#Область ПрограммныйИнтерфейс

#Область ИнтеграцияСБЭД

// При заполнении параметров документа информации отправителя.
// См. ЭлектронныеДокументыЭДО.ПараметрыЗагрузкиСообщения.
// Параметры:
//  ПараметрыДокумента - Структура - Параметры документа см. ЭлектронныеДокументыЭДО.НовыеПараметрыДокументаДляЗагрузки.
Процедура ПриЗаполненииПараметровДокументаИнформацииОтправителя(ПараметрыДокумента) Экспорт
	
	Если НЕ ИспользоватьЭлектронноеАктированиеВЕИС()
		И НЕ ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента.ОбменБезПодписи = Истина;
	
КонецПроцедуры

// Это документ электронного актирования.
// См. ИнтеграцияЭДО.СохранитьДанныеОбъекта
// 
// Параметры:
//  ДанныеЭлектронногоДокумента - Структура - Данные электронного документа.
//  НовыйЭД - СтрокаДереваЗначений - данные нового ЭД.
// 
// Возвращаемое значение:
//  Булево -- Истина, если это документ электронного актирования.
Функция ЭтоДокументЭлектронногоАктирования(ДанныеЭлектронногоДокумента, НовыйЭД) Экспорт
	
	Результат = ЭтоТипДокументаАктирования(ДанныеЭлектронногоДокумента.ТипДокумента);
	
	Возврат Результат;
	
КонецФункции

// См. ЭлектронныеДокументыЭДО.ДополнитьДанныеОбъектаСодержаниемИнформацииОтправителя
Процедура ПриЗаполненииТипаДокументаИзСодержания(ДанныеОбъекта, Содержание) Экспорт
	
	Если НЕ (ДанныеОбъекта.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД
			ИЛИ ДанныеОбъекта.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД) Тогда
		ДанныеОбъекта.ТипДокумента = Содержание.ТипДокумента;
	КонецЕсли;
	
КонецПроцедуры

// См. РегламентыЭДО_Неформализованный.ДобавитьЭлементыСхемыРегламента.
Процедура ПриДобавленииЭлементовСхемыРегламента(ЭлементыСхемы, НастройкиСхемыРегламента) Экспорт

	Если НЕ НастройкиСхемыРегламента.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОтправителя = ЭлементыСхемы[Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя];
	Если НЕ ИнформацияОтправителя = Неопределено Тогда
		РегламентыЭДО.ВставитьЭлементСхемыРегламента(ЭлементыСхемы, ИнформацияОтправителя,
			Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУПДДляЕИС);
		РегламентыЭДО.ВставитьЭлементСхемыРегламента(ЭлементыСхемы, ИнформацияОтправителя,
			Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУКДДляЕИС);
		ИнформацияПолучателя = РегламентыЭДО.ВставитьЭлементСхемыРегламента(ЭлементыСхемы, ИнформацияОтправителя,
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
		РегламентыЭДО.ВставитьЭлементСхемыРегламента(ЭлементыСхемы, ИнформацияПолучателя,
			Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУПДПокупателяДляЕИС);
		РегламентыЭДО.ВставитьЭлементСхемыРегламента(ЭлементыСхемы, ИнформацияПолучателя,
			Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУКДПокупателяДляЕИС);
	КонецЕсли;
		
КонецПроцедуры

// Вызываетс при формировании таблицы типов элементов регламента.
// см. ТранспортныеКонтейнерыЭДОСлужебный.ТаблицаТиповЭлементовРегламента
// 
// Параметры:
//  Таблица - ТаблицаЗначений - таблица типов элемента регламента.
Процедура ПриФормированииТаблицыТиповЭлементовРегламента(Таблица) Экспорт
	
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"ErrorEIS", Перечисления.ТипыЭлементовРегламентаЭДО.ОшибкаЕИС);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"SuccessEIS", Перечисления.ТипыЭлементовРегламентаЭДО.КвитанцияЕИС);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"ApplicationTitleEIS", Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУПДДляЕИС);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"ApplicationCorrectionTitleEIS", Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУКДДляЕИС);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"ApplicationTitleResignEIS", Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУПДПокупателяДляЕИС);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"ApplicationCorrectionTitleResignEIS", Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУКДПокупателяДляЕИС);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"InvoiceProjectEIS", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"CorrectionInvoiceProjectEIS", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	
КонецПроцедуры

// Дополнить дерево данными электронного актирования.
// 
// Параметры:
//  ДеревоДанных - ДеревоЗначений - дерево данных электронного документа.
//  ДанныеЭлектронногоДокумента - Структура - данные электронного документа См. ИнтеграцияЭДОКлиентСервер.НовыеДанныеДокументооборота
Процедура ДополнитьДеревоДаннымиЭлектронногоАктирования(ДеревоДанных, ДанныеЭлектронногоДокумента) Экспорт
	
	ЭлектронныйДокумент = ДанныеЭлектронногоДокумента.ЭлектронныйДокумент;
	
	Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ЭлектронныйДокумент.Метаданные();
	Если НЕ ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	СпособОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ЭлектронныйДокумент, "СпособОбмена");
	Если НЕ СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПриложения = Неопределено;
	ТипПриложения = ОпределитьТипПриложенияПоТипуДокумента(ДанныеЭлектронногоДокумента.ТипДокумента);
	Если ТипПриложения = ТипПриложенияУПДПродавца() Тогда
		ДанныеПриложения = НовыеДанныеПриложенияКТитулуПродавцаУПД();
	ИначеЕсли ТипПриложения = ТипПриложенияУКДПродавца() Тогда
		ДанныеПриложения = НовыеДанныеПриложенияКТитулуПродавцаУКД();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПриложения) Тогда
		
		ЭлектронныеДокументы = Новый Массив;
		ЭлектронныеДокументы.Добавить(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент);
		Приложения = ДанныеПриложенияДляОтраженияВУчете(ЭлектронныеДокументы);
		Если Приложения.Количество() > 0 Тогда
			ДвоичныеДанныеПриложения = Приложения[0].ДанныеОсновногоФайла.ДвоичныеДанные;
			ЗаполнитьДанныеПриложения(ДанныеПриложения, ДвоичныеДанныеПриложения);
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			"ДанныеЭлектронногоАктированияЕИС.ДанныеПриложения",
			ДанныеПриложения);
		
	КонецЕсли;

КонецПроцедуры

Функция ДанныеПриложенияДляОтраженияВУчете(ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ВЫБОР
		|		КОГДА ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Прикладной)
		|			ТОГДА ЭлектронныйДокументВходящийЭДО.ВидДокумента.ПрикладнойТипДокумента
		|		ИНАЧЕ ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента
		|	КОНЕЦ КАК ТипДокумента,
		|	СообщениеЭДО.Представление КАК Представление,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Отправитель,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Получатель,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторКонтрагента КАК ИдентификаторОтправителя,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации КАК ИдентификаторПолучателя,
		|	ПрисоединенныеФайлы.Ссылка КАК ОсновнойФайл,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла КАК ИмяОсновногоФайла,
		|	СообщениеЭДО.Направление КАК Направление
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО (СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ПриложениеУПДДляЕИС)
		|		ИЛИ СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ПриложениеУКДДляЕИС))
		|		И (СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка)
		|		И (ЭлектронныйДокументВходящийЭДО.Ссылка В (&ЭлектронныеДокументы))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО (ПрисоединенныеФайлы.Ссылка = СообщениеЭДО.ОсновнойФайл)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка,
		|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента,
		|	ВЫБОР
		|		КОГДА
		|			ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Прикладной)
		|			ТОГДА ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ПрикладнойТипДокумента
		|		ИНАЧЕ ЭлектронныйДокументИсходящийЭДО.ВидДокумента.ТипДокумента
		|	КОНЕЦ,
		|	СообщениеЭДО.Представление,
		|	ЭлектронныйДокументИсходящийЭДО.Организация,
		|	ЭлектронныйДокументИсходящийЭДО.Контрагент,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторКонтрагента,
		|	ПрисоединенныеФайлы.Ссылка,
		|	ПрисоединенныеФайлы.ПолноеИмяФайла,
		|	СообщениеЭДО.Направление
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО (СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ПриложениеУПДДляЕИС)
		|		ИЛИ СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ПриложениеУКДДляЕИС))
		|		И (СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка)
		|		И (ЭлектронныйДокументИсходящийЭДО.Ссылка В (&ЭлектронныеДокументы))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО (ПрисоединенныеФайлы.Ссылка = СообщениеЭДО.ОсновнойФайл)";
	
	Запрос.Параметры.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	НаборДанных = Новый Массив;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат НаборДанных;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Данные = ИнтеграцияЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете();
		ЗаполнитьЗначенияСвойств(Данные, Выборка);
		Данные.ДанныеОсновногоФайла.ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.ОсновнойФайл);
		Данные.ДанныеОсновногоФайла.ИмяФайла = Выборка.ИмяОсновногоФайла;
		
		НаборДанных.Добавить(Данные);
		
	КонецЦикла;
	
	Возврат НаборДанных;
	
КонецФункции

// См. СинхронизацияЭДОСлужебный.ПараметрыСинхронизации
// 
// Параметры:
//  ПараметрыСинхронизации - Структура - параметры синхронизации.
Процедура ПриЗаполненииПараметровСинхронизации(ПараметрыСинхронизации) Экспорт

	Если (ИспользоватьЭлектронноеАктированиеВЕИС()
		ИЛИ ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС())
		И ЕстьВозможностьОтправкиПолученияЭД() Тогда
		ПараметрыСинхронизации.ЕстьВозможностьОтправкиПолученияЭД = Истина;
		ПараметрыСинхронизации.ЕстьЭлектронноеАктированиеЕИС = Истина;
	КонецЕсли;
			
КонецПроцедуры

// Проверяет заполнение обязательных реквизитов дерева.
// Только для внутреннего использования.
// Параметры:
//  ДеревоДанных                            - деревоЗначений - дерево с данными.
//  Ошибки                                  - Массив - ошибки, накопленные за время обработки. Элементами массива являются структуры.
//                                                     Состав структур см. в ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки().
//
Процедура ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(
				ДеревоДанных, Ошибки) Экспорт
				
	Для Каждого СтрокаДерева Из ДеревоДанных.Строки Цикл
		Если СтрокаДерева.Уровень1 = "ДанныеЭлектронногоАктированияЕИС"
			И ЗначениеЗаполнено(СтрокаДерева.Значение) 
			И СтрокаДерева.Значение Тогда
			Для Каждого СтрокаУровень2 Из СтрокаДерева.Строки Цикл
				Если СтрокаУровень2.Уровень2 = "ДанныеПриложения"
					И ЗначениеЗаполнено(СтрокаУровень2.Значение) Тогда
					ДанныеПриложения = СтрокаУровень2.Значение;
					Если ДанныеПриложения.ОшибкиЗаполнения.Количество() > 0 Тогда
						Для Каждого ТекстОшибки Из ДанныеПриложения.ОшибкиЗаполнения Цикл
							ПредставлениеРеквизита = НСтр("ru = 'Электронное актирование в ЕИС'");
							ДеревоЭлектронногоДокументаБЭДСлужебный.ДобавитьОшибкуПроверкиДереваДанных(
								Ошибки, СтрокаДерева, ТекстОшибки, , , ПредставлениеРеквизита);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Переопределяет способ обработки электронного документа.
//   
// Параметры:
// 	КлючНастройки - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете
// 	Настройки - Структура:
// 	 * СпособОбработки - Строка - способ обработки.
// 	 * ПредлагатьСохранятьНастройки - Булево - предлагать сохранять настройки.
Процедура НастройкиОтраженияВУчете(КлючНастройки, Настройки) Экспорт
	
	Если КлючНастройки.ВидДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.КонтрактЕИС Тогда
		Настройки.СпособОбработки = "Автоматически";
	ИначеЕсли КлючНастройки.ВидДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД
		ИЛИ КлючНастройки.ВидДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД Тогда
		Настройки.СпособОбработки = "ДокументПриемкиЕИС";
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку электронного документа на готовность к отражению в учете.
// Не готовые к отражению документы ставятся на контроль.
//
// Параметры:
//  УчетныйДокумент - ДокументСсылка, СправочникСсылка - учетный документ на проверку.
//  ДокументыНаКонтроль - Массив - учетные документы, готовность которых нужно контролировать. 
Процедура ВыполнитьКонтрольПроведенияУчетныхДокументов(
			Знач УчетныйДокумент, ДокументыНаКонтроль) Экспорт
			
	ИмяСправочникаГосударственныеКонтракты = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("ГосударственныеКонтракты");
	Если Не ЗначениеЗаполнено(ИмяСправочникаГосударственныеКонтракты) Тогда
		ИмяСправочникаГосударственныеКонтракты = "ГосударственныеКонтрактыЕИС";
	КонецЕсли;	
	СправочникСсылкаГосударственныеКонтракты = СтрШаблон("СправочникСсылка.%1", 
			ИмяСправочникаГосударственныеКонтракты);
		 
	Если ТипЗнч(УчетныйДокумент) = Тип(СправочникСсылкаГосударственныеКонтракты) Тогда
		Если Не УчетныйДокумент.ГотовДляОтраженияВУчете Тогда
			ДокументыНаКонтроль.Добавить(УчетныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает информацию по данным электронного документа.
//
// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО - Ссылка на сообщение ЭДО.
// Возвращаемое значение:
// 	См. КонвертацияЭДО.ПараметрыФайлаПроизвольногоДокумента.
Функция РаспознатьСообщение(Сообщение) Экспорт
	
	ПараметрыФайла = Новый Структура();
	
	ПараметрыФайла.Вставить("ТипДокумента", "КонтрактЕИС");
	ПараметрыФайла.Вставить("ОтражениеВУчете", Истина);
	
	Возврат ПараметрыФайла;
	
КонецФункции

// Разрешается использовать электронное актирование ЕИС для поставщиков.
// 
// Возвращаемое значение:
//  Булево - Признак использования электронное актирование ЕИС в зависимости от опций конфигурации потребителя.
Функция РазрешаетсяИспользоватьЭлектронноеАктированиеДляПоставщиков() Экспорт
	
	Результат = Ложь;
	ЭлектронноеАктированиеЕИСПереопределяемый.
		РазрешаетсяИспользоватьЭлектронноеАктированиеДляПоставщиков(Результат);
	Возврат Результат;
	
КонецФункции

// Разрешается использовать электронное актирование ЕИС для заказчиков.
// 
// Возвращаемое значение:
//  Булево - Признак использования электронное актирование ЕИС в зависимости от опций конфигурации потребителя.
Функция РазрешаетсяИспользоватьЭлектронноеАктированиеДляЗаказчиков() Экспорт
	
	Если НЕ ЕстьПодсистемаДляЗаказчиков() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	ЭлектронноеАктированиеЕИСПереопределяемый.
		РазрешаетсяИспользоватьЭлектронноеАктированиеДляЗаказчиков(Результат);
	Возврат Результат;
	
КонецФункции

// Заполнить описание объекта учета.
// 
// Параметры:
//  ИсточникДанныхСсылка - СправочникСсылка, ДокументСсылка - ссылка на источник данных.
//  Описание - ТаблицаЗначений - см. ИнтеграцияЭДО.НовоеОписаниеОбъектаУчета.
// 
// Возвращаемое значение:
//  Булево - Истина, если это объект учета электронного актирования.
Функция ЗаполнитьОписаниеОбъектаУчета(ИсточникДанныхСсылка, Описание) Экспорт
	
	Результат = Ложь;

	Если НЕ ИспользоватьЭлектронноеАктированиеВЕИС()
		И НЕ ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	ИмяСправочникаГосударственныеКонтракты = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("ГосударственныеКонтракты");
	Если Не ЗначениеЗаполнено(ИмяСправочникаГосударственныеКонтракты) Тогда
		ИмяСправочникаГосударственныеКонтракты = "ГосударственныеКонтрактыЕИС";
	КонецЕсли;	
	СправочникСсылкаГосударственныеКонтракты = СтрШаблон("СправочникСсылка.%1", 
			ИмяСправочникаГосударственныеКонтракты);
	
	Если ТипЗнч(ИсточникДанныхСсылка) = Тип(СправочникСсылкаГосударственныеКонтракты) Тогда
		
		СтрокаОписания = Описание.Добавить();
		
		СтрокаОписания.ОбъектУчета = ИсточникДанныхСсылка;
		СтрокаОписания.ТипДокумента = Перечисления.ТипыДокументовЭДО.КонтрактЕИС;
		СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Входящий;
		СтрокаОписания.Контрагент = ИсточникДанныхСсылка.Контрагент;
		СтрокаОписания.Организация = ИсточникДанныхСсылка.Организация;
			
		Результат = Истина;
		
	КонецЕсли;
	
	Если НЕ Результат
		И ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
		
		МодульПодсистемыЗаказчика = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЗаказчикаЕИС");
		Результат = МодульПодсистемыЗаказчика.ЗаполнитьОписаниеОбъектаУчета(ИсточникДанныхСсылка, Описание)
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Это объект учета электронного актирования.
// 
// Параметры:
//  ИсточникДанныхСсылка - СправочникСсылка, ДокументСсылка - ссылка на источник данных.
// 
// Возвращаемое значение:
//  Булево - Истина, если это объект учета электронного актирования.
Функция ЭтоОбъектУчетаЭлектронногоАктирования(ИсточникДанныхСсылка) Экспорт
	
	Результат = Ложь;
	
	ИмяСправочникаГосударственныеКонтракты = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("ГосударственныеКонтракты");
	Если Не ЗначениеЗаполнено(ИмяСправочникаГосударственныеКонтракты) Тогда
		ИмяСправочникаГосударственныеКонтракты = "ГосударственныеКонтрактыЕИС";
	КонецЕсли;	
	СправочникСсылкаГосударственныеКонтракты = СтрШаблон("СправочникСсылка.%1", 
			ИмяСправочникаГосударственныеКонтракты);
	
	Если ТипЗнч(ИсточникДанныхСсылка) = Тип(СправочникСсылкаГосударственныеКонтракты) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак успешности заполнения состояния документа.
// 
// Параметры:
//  ПараметрыДокумента - См. РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния
//  СостоянияЭлементовРегламента - См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
//  Состояние - Перечисления.СостоянияДокументовЭДО - исходное значение состояния 
// Возвращаемое значение:
//  Булево - Истина, если было установлено новое значение параметра Состояние.
//
Функция СостояниеВходящегоДокумента(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние) Экспорт
	
	Результат = Ложь;
	ЭлементРегламента = Неопределено;
	
	Если ПараметрыДокумента.ВидДокумента.ТипДокумента =
		Перечисления.ТипыДокументовЭДО.КонтрактЕИС Тогда
		
		// Для контракта сразу устанавливаем состояние завершен.
		РегламентыЭДО.УстановитьПриоритетноеСостояние(Состояние,
			Перечисления.СостоянияДокументовЭДО.ОбменЗавершен);
		Возврат Истина;
		
	КонецЕсли;

	Если ПараметрыДокумента.ВидДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД
		ИЛИ ПараметрыДокумента.ВидДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД Тогда
		
		Если НЕ РегламентыЭДО.ЕстьЭлементРегламента(СостоянияЭлементовРегламента,
			Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя, ЭлементРегламента) Тогда
			// Для документа приемки сразу устанавливаем состояние требуется утрверждение.
			РегламентыЭДО.УстановитьПриоритетноеСостояние(Состояние,
				Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение);
		ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Отправка Тогда
			РегламентыЭДО.УстановитьПриоритетноеСостояние(Состояние,
				Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора);
		Иначе
			РегламентыЭДО.УстановитьПриоритетноеСостояние(Состояние,
				Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка);
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ЗаполнитьСостояниеПоИсходящейИнформацииОтправителя(ПараметрыДокумента,
		СостоянияЭлементовРегламента, Состояние) Тогда
			
		Результат = Истина;
		
	ИначеЕсли НЕ РегламентыЭДО.ЕстьЭлементРегламента(СостоянияЭлементовРегламента,
			Перечисления.ТипыЭлементовРегламентаЭДО.ОшибкаЕИС, ЭлементРегламента)
		И НЕ РегламентыЭДО.ЕстьЭлементРегламента(СостоянияЭлементовРегламента,
			Перечисления.ТипыЭлементовРегламентаЭДО.КвитанцияЕИС, ЭлементРегламента) Тогда
		
		РегламентыЭДО.УстановитьПриоритетноеСостояние(Состояние,
			Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора);

		Результат = Истина;
	
	ИначеЕсли ЗаполнитьСостояниеПоИзвещениюОПолучении(ПараметрыДокумента,
			СостоянияЭлементовРегламента, Состояние) Тогда
				
		Результат = Истина;
		
	ИначеЕсли ЗаполнитьСостояниеПоОшибкеЕИС(ПараметрыДокумента,
			СостоянияЭлементовРегламента, Состояние) Тогда
		
		Результат = Истина;
		
	ИначеЕсли ЗаполнитьСостояниеПоКвитанцииЕИС(ПараметрыДокумента,
		СостоянияЭлементовРегламента, Состояние) Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Текст запроса настроек отправки объектов учета.
// Добавляет в текст запроса таблицы настроек для электронного актирования.
// 
// Возвращаемое значение:
//  Строка - Текст запроса настроек отправки объектов учета
Функция ТекстЗапросаНастроекОтправкиОбъектовУчета() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.УПД) КАК ТипДокумента,
	|	""%СхемаУПД%"" КАК Формат
	|ПОМЕСТИТЬ ФорматыТиповДокументовЕИС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.УКД),
	|	""%СхемаУКД%""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.ТоварнаяНакладная),
	|	""%СхемаУПД%""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.СчетФактура),
	|	""%СхемаУПД%""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости),
	|	""%СхемаУКД%""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.АктВыполненныхРабот),
	|	""%СхемаУПД%""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.РезультатРассмотренияАктаПриемкиЕИСУПД),
	|	""%СхемаУПДПокупателя%""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.РезультатРассмотренияАктаПриемкиЕИСУКД),
	|	""%СхемаУКДПокупателя%""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
	|	ОписанияОбъектовУчета.Организация КАК Отправитель,
	|	ОписанияОбъектовУчета.Контрагент КАК Получатель,
	|	ОписанияОбъектовУчета.ДоговорКонтрагента КАК Договор,
	|	ОписанияОбъектовУчета.Направление КАК Направление,
	|	ОписанияОбъектовУчета.ТипДокумента КАК ТипДокумента,
	|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
	|	ФорматыТиповДокументовЕИС.Формат КАК Формат,
	|	ЗНАЧЕНИЕ(Справочник.МаршрутыПодписания.ОднойДоступнойПодписью) КАК МаршрутПодписания,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСерверЕИС) КАК СпособОбмена,
	|	НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота КАК ИдентификаторОтправителя,
	|	ГосударственныеКонтрактыЕИС.ИдентификаторУчастникаДокументооборотаЗаказчика КАК ИдентификаторПолучателя,
	|	ЛОЖЬ КАК ТребуетсяОтветнаяПодпись,
	|	ЛОЖЬ КАК ТребуетсяИзвещениеОПолучении,
	|	ЛОЖЬ КАК ВыгружатьДополнительныеСведения,
	|	ИСТИНА КАК ОбменБезПодписи,
	|	ИСТИНА КАК Формировать,
	|	ЛОЖЬ КАК ЗаполнениеКодаТовара
	|ПОМЕСТИТЬ НастройкиОтправкиЕИС
	|ИЗ
	|	ОписанияОбъектовУчета КАК ОписанияОбъектовУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (Константы.ИспользоватьЭлектронноеАктированиеВЕИС = ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
	|		ПО ОписанияОбъектовУчета.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
	|		И ОписанияОбъектовУчета.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента
	|		И ОписанияОбъектовУчета.Направление <> &НаправлениеВнутренний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕИС КАК НастройкиОбменаЕИС
	|		ПО ОписанияОбъектовУчета.Организация = НастройкиОбменаЕИС.Организация
	|		И НастройкиОбменаЕИС.ОбменВключен = ИСТИНА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ГосударственныеКонтракты КАК ГосударственныеКонтрактыЕИС
	|		ПО ОписанияОбъектовУчета.ДоговорКонтрагента.ГосударственныйКонтракт = ГосударственныеКонтрактыЕИС.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФорматыТиповДокументовЕИС КАК ФорматыТиповДокументовЕИС
	|		ПО ФорматыТиповДокументовЕИС.ТипДокумента = ОписанияОбъектовУчета.ТипДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ПО ОписанияОбъектовУчета.ОбъектУчета = ОбъектыУчетаДокументовЭДО.ОбъектУчета
	|		И ВидыДокументовЭДО.Ссылка = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента
	|		И ОписанияОбъектовУчета.Контрагент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Контрагент
	|		И ОписанияОбъектовУчета.ДоговорКонтрагента = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ДоговорКонтрагента
	|
	|%ТекстЗапросаПоНастройкамЗаказчика%
	|
	|;
	|////////////////////////////////////
	|ВЫБРАТЬ
	|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
	|	ОписанияОбъектовУчета.Организация КАК Отправитель,
	|	ОписанияОбъектовУчета.Контрагент КАК Получатель,
	|	ЕСТЬNULL(НастройкиОтправки.Договор, ОписанияОбъектовУчета.ДоговорКонтрагента) КАК Договор,
	|	ОписанияОбъектовУчета.Направление КАК Направление,
	|	ОписанияОбъектовУчета.ТипДокумента КАК ТипДокумента,
	|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
	|	ВЫБОР
	|		КОГДА НастройкиОтправкиЕИС.СпособОбмена ЕСТЬ NULL
	|			ТОГДА НастройкиОтправки.ВерсияФормата
	|		ИНАЧЕ НастройкиОтправкиЕИС.Формат
	|	КОНЕЦ КАК Формат,
	|	ВЫБОР
	|		КОГДА НастройкиОтправкиЕИС.СпособОбмена ЕСТЬ NULL
	|			ТОГДА НастройкиОтправки.МаршрутПодписания
	|		ИНАЧЕ НастройкиОтправкиЕИС.МаршрутПодписания
	|	КОНЕЦ КАК МаршрутПодписания,
	|	ВЫБОР
	|		КОГДА НастройкиОтправкиЕИС.СпособОбмена ЕСТЬ NULL
	|			ТОГДА НастройкиОтправки.СпособОбменаЭД
	|		ИНАЧЕ НастройкиОтправкиЕИС.СпособОбмена
	|	КОНЕЦ КАК СпособОбмена,
	|	ВЫБОР
	|		КОГДА НастройкиОтправкиЕИС.СпособОбмена ЕСТЬ NULL
	|			ТОГДА НастройкиОтправки.ИдентификаторОтправителя
	|		ИНАЧЕ НастройкиОтправкиЕИС.ИдентификаторОтправителя
	|	КОНЕЦ КАК ИдентификаторОтправителя,
	|	ВЫБОР
	|		КОГДА НастройкиОтправкиЕИС.СпособОбмена ЕСТЬ NULL
	|			ТОГДА НастройкиОтправки.ИдентификаторПолучателя
	|		ИНАЧЕ НастройкиОтправкиЕИС.ИдентификаторПолучателя
	|	КОНЕЦ КАК ИдентификаторПолучателя,
	|	ВЫБОР
	|		КОГДА НастройкиОтправкиЕИС.СпособОбмена ЕСТЬ NULL
	|			ТОГДА НастройкиОтправки.ТребуетсяОтветнаяПодпись
	|		ИНАЧЕ НастройкиОтправкиЕИС.ТребуетсяОтветнаяПодпись
	|	КОНЕЦ КАК ТребуетсяОтветнаяПодпись,
	|	ВЫБОР
	|		КОГДА НастройкиОтправкиЕИС.СпособОбмена ЕСТЬ NULL
	|			ТОГДА НастройкиОтправки.ТребуетсяИзвещениеОПолучении
	|		ИНАЧЕ НастройкиОтправкиЕИС.ТребуетсяИзвещениеОПолучении
	|	КОНЕЦ КАК ТребуетсяИзвещениеОПолучении,
	|	ВЫБОР
	|		КОГДА НастройкиОтправкиЕИС.СпособОбмена ЕСТЬ NULL
	|			ТОГДА НастройкиОтправки.ВыгружатьДополнительныеСведения
	|		ИНАЧЕ НастройкиОтправкиЕИС.ВыгружатьДополнительныеСведения
	|	КОНЕЦ КАК ВыгружатьДополнительныеСведения,
	|	ВЫБОР
	|		КОГДА НастройкиОтправкиЕИС.СпособОбмена ЕСТЬ NULL
	|			ТОГДА НастройкиОтправки.ОбменБезПодписи
	|		ИНАЧЕ НастройкиОтправкиЕИС.ОбменБезПодписи
	|	КОНЕЦ КАК ОбменБезПодписи,
	|	ВЫБОР
	|		КОГДА НастройкиОтправкиЕИС.СпособОбмена ЕСТЬ NULL
	|			ТОГДА НастройкиОтправки.Формировать
	|		ИНАЧЕ НастройкиОтправкиЕИС.Формировать
	|	КОНЕЦ КАК Формировать,
	|	ВЫБОР
	|		КОГДА НастройкиОтправкиЕИС.СпособОбмена ЕСТЬ NULL
	|			ТОГДА НастройкиОтправки.ЗаполнениеКодаТовара
	|		ИНАЧЕ НастройкиОтправкиЕИС.ЗаполнениеКодаТовара
	|	КОНЕЦ КАК ЗаполнениеКодаТовара
	|ИЗ
	|	ОписанияОбъектовУчета КАК ОписанияОбъектовУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
	|		ПО ОписанияОбъектовУчета.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
	|		И ОписанияОбъектовУчета.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента
	|		И ОписанияОбъектовУчета.Направление <> &НаправлениеВнутренний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправки
	|		ПО ОписанияОбъектовУчета.Организация = НастройкиОтправки.Отправитель
	|		И ОписанияОбъектовУчета.Контрагент = НастройкиОтправки.Получатель
	|		И ВидыДокументовЭДО.Ссылка = НастройкиОтправки.ВидДокумента
	|		И НастройкиОтправки.Договор В (ОписанияОбъектовУчета.ДоговорКонтрагента, &ПустойДоговор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ПО ОписанияОбъектовУчета.ОбъектУчета = ОбъектыУчетаДокументовЭДО.ОбъектУчета
	|		И ВидыДокументовЭДО.Ссылка = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента
	|		И ОписанияОбъектовУчета.Контрагент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Контрагент
	|		И ЕСТЬNULL(НастройкиОтправки.Договор,
	|			ОписанияОбъектовУчета.ДоговорКонтрагента) = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ДоговорКонтрагента
	|		И ОбъектыУчетаДокументовЭДО.Актуальный
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиОтправкиЕИС КАК НастройкиОтправкиЕИС
	|		ПО ОписанияОбъектовУчета.ОбъектУчета = НастройкиОтправкиЕИС.ОбъектУчета
	|ГДЕ
	|	ОписанияОбъектовУчета.Направление В (&НаправленияНастроекОтправки)
	|	И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент ЕСТЬ NULL
	|УПОРЯДОЧИТЬ ПО
	|	Договор УБЫВ";
	
	ИмяСправочникаГосударственныеКонтракты = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("ГосударственныеКонтракты");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ГосударственныеКонтракты", "Справочник." +     ИмяСправочникаГосударственныеКонтракты);
	
	Если ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
		МодульПодсистемыЗаказчика = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЗаказчикаЕИС");
		ТекстЗапросаПоНастройкамЗаказчика = МодульПодсистемыЗаказчика.ТекстЗапросаПоНастройкамЗаказчика();
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстЗапросаПоНастройкамЗаказчика%",
			ТекстЗапросаПоНастройкамЗаказчика);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстЗапросаПоНастройкамЗаказчика%",
			"");
	КонецЕсли;
	
	// УПД поставщика.
	ВерсияФорматаУПД = ВерсияФорматаТипаДокумента(Перечисления.ТипыДокументовЭДО.УПД);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СхемаУПД%",
		ВерсияФорматаУПД);
	
	// УКД поставщика.
	ВерсияФорматаУКД = ВерсияФорматаТипаДокумента(Перечисления.ТипыДокументовЭДО.УКД);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СхемаУКД%",
		ВерсияФорматаУКД);
	
	// УПД покупателя.
	ТипУПДПокупателя = Перечисления.ТипыДокументовЭДО.РезультатРассмотренияАктаПриемкиЕИСУПД;
	ВерсияФорматаУПДПокупателя = ВерсияФорматаТипаДокумента(ТипУПДПокупателя);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СхемаУПДПокупателя%",
		ВерсияФорматаУПДПокупателя);

	// УКД покупателя.
	ТипУКДПокупателя = Перечисления.ТипыДокументовЭДО.РезультатРассмотренияАктаПриемкиЕИСУКД;
	ВерсияФорматаУКДПокупателя = ВерсияФорматаТипаДокумента(ТипУКДПокупателя);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СхемаУКДПокупателя%",
		ВерсияФорматаУКДПокупателя);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Владелец присоединенных файлов.
// 
// Параметры:
//  ОбъектыУчетаЭД - Массив -Объекты учета ЭД.
// 
// Возвращаемое значение:
//  Неопределено, ДокументСсылка - Владелец присоединенных файлов
Функция ВладелецПрисоединенныхФайлов(Знач ОбъектыУчетаЭД) Экспорт
	
	Владелец = Неопределено;
	ЭлектронноеАктированиеЕИСПереопределяемый.ОпределитьВладельцаПрисоединенныхФайлов(ОбъектыУчетаЭД, Владелец);
	Если НЕ ЗначениеЗаполнено(Владелец) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не определен владелец присоединенных файлов документа.'");
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	Возврат Владелец;
	
КонецФункции

// Сформировать транспортный пакет для ЕИС.
// 
// Параметры:
//  ТранспортныйКонтейнер Транспортный контейнер
//  ДанныеОбъекта Данные объекта
// 
// Возвращаемое значение:
//  Структура - Сформировать транспортный пакет для ЕИС:
// * Выполнено - Булево - результат выполнения.
// * ОписаниеОшибки - Строка - описание ошибки.
Функция СформироватьТранспортныйПакетДляЕИС(ТранспортныйКонтейнер, ДанныеОбъекта) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	ИдентификаторПакета = ТранспортныйКонтейнер.УникальныйИдентификатор();
	Если ЭтоТипДокументаПриложениеДляЕИС(ДанныеОбъекта.ТипДокумента) Тогда
		// Создаем пустой контейнер.
		ДвоичныеДанныеКонтейнера = ПолучитьДвоичныеДанныеИзСтроки("", КодировкаТекстаСервисаЕИС());
		ТранспортныеКонтейнерыЭДОСлужебный.ПоместитьАрхивВКонтейнер(ТранспортныйКонтейнер,
			ДвоичныеДанныеКонтейнера,
			ИдентификаторПакета,
			"xml");
		Результат.Выполнено = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ЭлектронныйДокумент = ДанныеОбъекта.Объект.ЭлектронныйДокумент;
	ОсновнойФайл = ДанныеОбъекта.Объект.ОсновнойФайл;
	
	ДанныеФайлаЭД = ПолучитьДанныеФайлаБСП(ОсновнойФайл);
	ДвоичныеДанныеЭД = ПолучитьИзВременногоХранилища(ДанныеФайлаЭД.СсылкаНаДвоичныеДанныеФайла);
	
	ДвоичныеДанныеПриложения =
		ДанныеПриложенияДляЕИСЭлектронногоДокумента(ЭлектронныйДокумент);
		
	Если ДвоичныеДанныеПриложения = Неопределено Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Не найдено приложение для ЕИС.'");
		Возврат Результат;
	КонецЕсли;
		
	ДанныеТранспортногоПакета = НовыеДанныеТранспортногоПакета();
	ДанныеТранспортногоПакета.ИдентификаторПакета = ИдентификаторПакета;
	ДанныеТранспортногоПакета.КодСистемыОтправителя = СистемаЛичногоКабинетаПоставщика();
	ДанныеТранспортногоПакета.КодСистемыПолучателя = СистемаЛичногоКабинетаЗаказчика();
	ДанныеТранспортногоПакета.ИдентификаторОбъекта = ДанныеОбъекта.ИдентификаторДокументооборота;
	НаименованиеДокумента = ИмяФайлаБезРасширения(ДанныеОбъекта.ОписаниеДанных.ИмяФайла);
	ДанныеТранспортногоПакета.ИдентификаторФайла = НаименованиеДокумента;
	ДанныеТранспортногоПакета.ИдентификаторПриложения = ПрефиксИмениПриложенияЕИС() + НаименованиеДокумента;
	
	// Определяем тип приложения.
	ТипДокумента = ОпределитьТипПриложенияПоТипуДокумента(ДанныеОбъекта.ТипДокумента);
	Если НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
		ВызватьИсключение(НСтр("ru='Не удалось определить тип приложенного документа.'"));
	КонецЕсли;
	ДанныеТранспортногоПакета.ТипПриложенногоДокумента = ТипДокумента;
	
	РеквизитыКонтейнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТранспортныйКонтейнер, "Отправитель, Получатель");
	ДанныеТранспортногоПакета.ИдентификаторОтправителя = РеквизитыКонтейнера.Отправитель;
	ДанныеТранспортногоПакета.ИдентификаторПолучателя = РеквизитыКонтейнера.Получатель;
	ДанныеТранспортногоПакета.ДатаФормирования = ТекущаяДатаСеанса();
	
	ДанныеТранспортногоПакета.КонтентДокументаBase64 = Base64Строка(ДвоичныеДанныеЭД);
	ДанныеТранспортногоПакета.ПриложениеBase64 = Base64Строка(ДвоичныеДанныеПриложения);

	ЭлДокументы = Новый Массив();
	ЭлДокументы.Добавить(ЭлектронныйДокумент);
	ДокументыОснования = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(ЭлДокументы);
	
	СсылкаНаВладельцаФайлов = ВладелецПрисоединенныхФайлов(ДокументыОснования);
	
	ПрикрепленныеФайлыКДокументу = ДанныеФайловПрисоединенныхКДокументу(СсылкаНаВладельцаФайлов);
	Если ПрикрепленныеФайлыКДокументу.Количество() > 0 Тогда
		Для каждого Строка Из ПрикрепленныеФайлыКДокументу Цикл
			Вложение = НовыеСведенияОВложенииТранспортногоПакета();
			Файл = Строка.ПрисоединенныйФайл;
			Вложение.ВнешнийИдентификаторКонтента = Файл.УникальныйИдентификатор();
			ДанныеФайла = ПолучитьДанныеФайлаБСП(Файл);
			Вложение.ИмяФайла = ДанныеФайла.Имяфайла;
			ДвоичныеДанныеПриложения =
				ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			Вложение.КонтентBase64 = Base64Строка(ДвоичныеДанныеПриложения);
			ДанныеТранспортногоПакета.Вложения.Добавить(Вложение);
		КонецЦикла;
	КонецЕсли;
	
	// Формируем запрос на сервер ЕИС.
	СодержимоеТранспортногоПакета = ТекстЗапросаОтправкиТранспортногоПакета(ДанныеТранспортногоПакета);
	РезультатПроверки = ПроверитьНаСоответствиеСхеме(СодержимоеТранспортногоПакета,
		ИмяТипаXDTOТранспортныйПакет(), "ФайлПакет");
	Если НЕ ПустаяСтрока(РезультатПроверки) Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка проверки транспортного пакета для ЕИС:'")
			+ Символы.ПС + РезультатПроверки; 
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	СодержимоеТранспортногоПакета = УдалитьПространствоИменТранспортногоПакета(
		СодержимоеТранспортногоПакета, Истина);
	
	ДвоичныеДанныеКонтейнера = ПолучитьДвоичныеДанныеИзСтроки(
		СодержимоеТранспортногоПакета, КодировкаТекстаСервисаЕИС());
	ТранспортныеКонтейнерыЭДОСлужебный.ПоместитьАрхивВКонтейнер(ТранспортныйКонтейнер,
		ДвоичныеДанныеКонтейнера,
		ИмяФайлаТранспортногоПакета(ИдентификаторПакета),
		"xml");
	
	// Сохраняем идентификатор пакета в реквизите.
	УстановитьПривилегированныйРежим(Истина);
	ОбъектТранспортныйКонтейнер = ТранспортныйКонтейнер.ПолучитьОбъект();
	ОбъектТранспортныйКонтейнер.ИдентификаторПакета =
		ИдентификаторПакетаДляБЭД(ИдентификаторПакета);
	ОбъектТранспортныйКонтейнер.Записать(РежимЗаписиДокумента.Запись);
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаписатьОтладочнуюИнформацию(ИмяФайлаТранспортногоПакета(ИдентификаторПакета) + ".xml",
		СодержимоеТранспортногоПакета);
	
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

// Идентификатор пакета для БЭД. В БЭД идентификатор хранится в 32 символьном представлении.
// 
// Параметры:
//  ИдентификаторПакетаЕИС - Строка - Идентификатор пакета ЕИС в 36 символьном представлении.
// 
// Возвращаемое значение:
//  Строка - Идентификатор пакета в формате БЭД
Функция ИдентификаторПакетаДляБЭД(ИдентификаторПакетаЕИС) Экспорт
	
	Возврат СтрЗаменить(ИдентификаторПакетаЕИС, "-", "");
	
КонецФункции

// Создать сообщение приложения для ЕИС.
// 
// Параметры:
//  ОписаниеСообщения Описание сообщения
//  ЭлектронныйДокумент Электронный документ
//  НастройкиДокумента Настройки документа
// 
// Возвращаемое значение:
//  ДокументОбъект.СообщениеЭДО - Создать сообщение приложения для ЕИС
Функция СоздатьСообщениеПриложенияДляЕИС(ОписаниеСообщения, ЭлектронныйДокумент, НастройкиДокумента) Экспорт

	Если ОписаниеСообщения.Данные.ДополнительныйДокумент.ДвоичныеДанные = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заполнены данные приложения для личного кабинета ЕИС.'");
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	// Создаем приложение для ЕИС как сообщение.
	СообщениеОбъектПриложениеЕИС = Документы.СообщениеЭДО.СоздатьДокумент();
	СообщениеОбъектПриложениеЕИС.Дата = ТекущаяДатаСеанса();
	СообщениеОбъектПриложениеЕИС.ЭлектронныйДокумент = ЭлектронныйДокумент;
	Если ОписаниеСообщения.ВидСообщения.ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда
		// Приложение к УПД.
		СообщениеОбъектПриложениеЕИС.ТипЭлементаРегламента =
			Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУПДДляЕИС;
		ВидСообщения = ВидСообщенияПриложениеУПДДляЕИС();
	ИначеЕсли ОписаниеСообщения.ВидСообщения.ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД
		ИЛИ ОписаниеСообщения.ВидСообщения.ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости Тогда
		// Приложение к УКД.
		СообщениеОбъектПриложениеЕИС.ТипЭлементаРегламента =
			Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУКДДляЕИС;
		ВидСообщения = ВидСообщенияПриложениеУКДДляЕИС();
	ИначеЕсли ОписаниеСообщения.ВидСообщения.ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная
		ИЛИ ОписаниеСообщения.ВидСообщения.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот Тогда
		// Приложение к товарной накладной или к акту.
		СообщениеОбъектПриложениеЕИС.ТипЭлементаРегламента =
			Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУПДДляЕИС;
		ВидСообщения = ВидСообщенияПриложениеУПДДляЕИС();
	ИначеЕсли ОписаниеСообщения.ВидСообщения.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД Тогда
		СообщениеОбъектПриложениеЕИС.ТипЭлементаРегламента =
			Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУПДПокупателяДляЕИС;
		ВидСообщения = ВидСообщенияПриложениеУПДДляЕИС();
	ИначеЕсли ОписаниеСообщения.ВидСообщения.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД Тогда
		СообщениеОбъектПриложениеЕИС.ТипЭлементаРегламента =
			Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУКДПокупателяДляЕИС;
		ВидСообщения = ВидСообщенияПриложениеУКДДляЕИС();
	Иначе
		Шаблон = НСтр("ru = 'Не удалось определить вид сообщения приложения для ЕИС для типа документа %1'");
		ОписаниеОшибки = СтрШаблон(Шаблон, ОписаниеСообщения.ВидСообщения.ТипДокумента);
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	СообщениеОбъектПриложениеЕИС.Направление = ОписаниеСообщения.Направление;
	СообщениеОбъектПриложениеЕИС.ДополнительнаяИнформация = ОписаниеСообщения.ДополнительнаяИнформация;
	СообщениеОбъектПриложениеЕИС.ВидСообщения = ВидСообщения;
	СообщениеОбъектПриложениеЕИС.Статус = Перечисления.СтатусыСообщенийЭДО.Сформирован;
	СообщениеОбъектПриложениеЕИС.ДатаИзмененияСтатуса = СообщениеОбъектПриложениеЕИС.Дата;
	СообщениеОбъектПриложениеЕИС.Состояние = РегламентыЭДО.СостояниеСообщения(
		СообщениеОбъектПриложениеЕИС,
		НастройкиДокумента,
		Ложь);
	СообщениеОбъектПриложениеЕИС.ОсновнойФайл = Справочники.СообщениеЭДОПрисоединенныеФайлы.ПолучитьСсылку();
	
	Если НЕ СообщениеОбъектПриложениеЕИС.ПроверитьЗаполнение() Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка заполнения сообщения с приложением для ЕИС'");
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	СообщениеОбъектПриложениеЕИС.Записать();
	
	Возврат СообщениеОбъектПриложениеЕИС;
	
КонецФункции

// Наименование организации для ЭД.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация.
// 
// Возвращаемое значение:
//  Наименование - Строка - Наименование организация.
Функция НаименованиеОрганизацииДляЭД(Организация) Экспорт
	
	Настройки = НастройкиОбменаЕИС(Организация);
	Наименование = Настройки.НаименованиеОрганизации;
	Возврат Наименование;
	
КонецФункции

// Использовать электронное актирование в ЕИС для поставщиков.
// 
// Возвращаемое значение:
//  Булево - Использовать электронное актирование поставщика в ЕИС
Функция ИспользоватьЭлектронноеАктированиеВЕИС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	// Электронное актирование может быть отключено функциональными опциями потребителя.
	Результат = Константы.ИспользоватьЭлектронноеАктированиеВЕИС.Получить()
		И РазрешаетсяИспользоватьЭлектронноеАктированиеДляПоставщиков();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Результат;
	
КонецФункции

// Использовать электронное актирование в ЕИС для заказчика.
// 
// Возвращаемое значение:
//  Булево - Использовать электронное актирование заказчика в ЕИС
Функция ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Экспорт
	
	Если НЕ ЕстьПодсистемаДляЗаказчиков() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	// Электронное актирование может быть отключено функциональными опциями потребителя.
	Результат = РазрешаетсяИспользоватьЭлектронноеАктированиеДляЗаказчиков()
		И Константы["ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС"].Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Это обмен через сервер ЕИС.
// 
// Параметры:
//  СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД - способ обмена.
// 
// Возвращаемое значение:
//  Булево - Это обмен через сервер ЕИС
Функция ЭтоОбменЧерезСерверЕИС(СпособОбмена) Экспорт
	
	Возврат СпособОбмена = СпособОбменаЧерезСерверЕИС();
	
КонецФункции

// Оператор ЭДО Федерального казначейства.
// 
// Возвращаемое значение:
//  Структура - Оператор ЭДО Федерального казначейства:
// * Идентификатор - Строка -
// * Наименование - Строка -
// * ИНН - Строка -
Функция ОператорЭДОФедеральногоКазначейства() Экспорт
	
	Результат = НовыеСведенияОбОператореЭДО();
	
	Результат.Идентификатор = "2ZK";
	Результат.Наименование = "Федеральное казначейство";
	Результат.ИНН = "7710568760";
	
	Возврат Результат;
	
КонецФункции

// Вид сообщения приложение УПД для ЕИС.
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыДокументовЭДО - Вид сообщения приложение УПД для ЕИС.
Функция ВидСообщенияПриложениеУПДДляЕИС() Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.ПриложениеДляЕИС);
	
КонецФункции

// Вид сообщения приложение УКД для ЕИС.
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыДокументовЭДО, Произвольный - Вид сообщения приложение УКД для ЕИС.
Функция ВидСообщенияПриложениеУКДДляЕИС() Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.ПриложениеДляЕИС);
	
КонецФункции

// Есть возможность отправки получения ЭД.
// 
// Возвращаемое значение:
//  Булево - Есть возможность отправки получения ЭД
Функция ЕстьВозможностьОтправкиПолученияЭД() Экспорт

	Результат = Ложь;
	
	Если НЕ ИспользоватьЭлектронноеАктированиеВЕИС()
		И НЕ ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЕстьОбменДляЗаказчиков = ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС();
	
	// Анализ настроек поставщиков и заказчиков.
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменаЕИС.Организация,
	|	НастройкиОбменаЕИС.ТокенАвторизации,
	|	НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота,
	|	НастройкиОбменаЕИС.НаименованиеОрганизации
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕИС КАК НастройкиОбменаЕИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ИспользоватьЭлектронноеАктированиеВЕИС КАК
	|			ИспользоватьЭлектронноеАктированиеВЕИС
	|		ПО ИспользоватьЭлектронноеАктированиеВЕИС.Значение = ИСТИНА
	|ГДЕ
	|	НастройкиОбменаЕИС.ОбменВключен = ИСТИНА
	|;
	|%ТекстЗапросаПоЗаказчикам%";
	
	Если ЕстьОбменДляЗаказчиков Тогда
		МодульПодсистемыЗаказчика = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЗаказчикаЕИС");
		ТекстЗапросаПоЗаказчикам =
			МодульПодсистемыЗаказчика.ТекстЗапросаЕстьВозможностьОтправкиПолученияЭД();
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстЗапросаПоЗаказчикам%", ТекстЗапросаПоЗаказчикам);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстЗапросаПоЗаказчикам%", "");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.ВыполнитьПакет();
	
	НастройкиПоставщиков = Выборка[0].Выгрузить();
	Для Каждого Строка Из НастройкиПоставщиков Цикл
		Если НЕ ПустаяСтрока(Строка.ИдентификаторУчастникаДокументооборота)
			И НЕ ПустаяСтрока(Строка.НаименованиеОрганизации)
			И СтрДлина(Строка.ТокенАвторизации) = 36 Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Результат И ЕстьОбменДляЗаказчиков Тогда
		НастройкиЗаказчиков = Выборка[1].Выгрузить();
		Для Каждого Строка Из НастройкиЗаказчиков Цикл
			Если СтрДлина(Строка.ТокенАвторизации) = 36 Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// Заполнить сведения о подписантах.
// 
// Параметры:
//  ДеревоДанных - ДеревоЗначений - Дерево данных.
//  Документ - ДокументСсылка - Документ
//  ПространствоИменСхемы - Строка - Пространство имен схемы
//  Ошибки - Строка - Ошибки
Процедура ЗаполнитьСведенияОПодписантах(ДеревоДанных, Документ, ПространствоИменСхемы, Ошибки) Экспорт

	Подписанты = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДанныеЭлектронногоАктированияЕИС.Подписанты");
		
	Если НЕ ЗначениеЗаполнено(Подписанты) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из Подписанты Цикл
		Подписант = ФорматыЭДО_ФНС.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", Строка.ОбластьПолномочий, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Статус", Строка.Статус, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", Строка.ОснованиеПолномочий, Истина, Ошибки);
		ЗаполнитьЮрЛицоПодписантаЕИС(Подписант, ПространствоИменСхемы, Ошибки, Строка);
		
		Документ.Подписант.Добавить(Подписант);
	КонецЦикла;
			
КонецПроцедуры

// Дополнить значения свойств учетных записей организации сервиса ЭДО.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация.
//  Свойства - Строка - Свойства.
//  МассивЗначенийСвойств - Массив - Массив значений свойств.
Процедура ДополнитьЗначенияСвойствУчетныхЗаписейОрганизацииСервисаЭДО(
		Организация,
		Свойства,
		МассивЗначенийСвойств) Экспорт
	
	Если ИспользоватьЭлектронноеАктированиеВЕИС() Тогда
		НастройкиОбменаЕИС = НастройкиОбменаЕИС(Организация);
		Если НастройкиОбменаЕИС = Неопределено
			ИЛИ НЕ НастройкиОбменаЕИС.ОбменВключен Тогда
			Возврат;
		КонецЕсли;
		ДанныеУчетнойЗаписи = НовыеДанныеУчетнойЗаписи();
		ЗаполнитьДанныеУчетнойЗаписи(ДанныеУчетнойЗаписи, НастройкиОбменаЕИС);
		ЗначенияСвойств = Новый Структура(Свойства);
		ЗаполнитьЗначенияСвойств(ЗначенияСвойств, ДанныеУчетнойЗаписи);
		МассивЗначенийСвойств.Добавить(ЗначенияСвойств);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные учетной записи.
// 
// Параметры:
// 	ИдентификаторУчетнойЗаписи - Строка
// Возвращаемое значение:
// 	Структура, Неопределено - данные учетной записи:
//  * НаименованиеУчетнойЗаписи - Строка - наименование учетной записи
//  * ИдентификаторОрганизации - Строка - идентификатор учетной записи
//  * Организация - ОпределяемыйТип.Организация
//  * ОператорЭДО - Строка - идентификатор оператора электронного документооборота
//  * СпособОбменаЭД - ПеречислениеСсылка.СпособыОбменаЭД
Функция ДанныеУчетнойЗаписи(ИдентификаторУчетнойЗаписи) Экспорт
	
	Результат = Неопределено;
	СтруктураРезультата = НовыеДанныеУчетнойЗаписи();
	ОператорЭДОФК = ОператорЭДОФедеральногоКазначейства();
	
	Если ИспользоватьЭлектронноеАктированиеВЕИС()
		И Лев(ИдентификаторУчетнойЗаписи, 3) = ОператорЭДОФК.Идентификатор Тогда
			НастройкиОбменаЕИС = НастройкиОбменаЕИСПоИдентификаторуОрганизации(
					ИдентификаторУчетнойЗаписи);
			Если НастройкиОбменаЕИС = Неопределено
				ИЛИ НЕ НастройкиОбменаЕИС.ОбменВключен Тогда
				Возврат Результат;
			КонецЕсли;
			Результат = СтруктураРезультата;
			ЗаполнитьДанныеУчетнойЗаписи(Результат, НастройкиОбменаЕИС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает сведения об операторе электронного документооборота федерального казначейства (ФК).
// Если идентификатор не относится к ФК возвращается Неопределено.
// 
// Параметры:
// 	ИдентификаторОтправителя - Строка
// 	СтруктураСведенияОбОператоре - Структура:
//	 * Наименование - Строка - наименование оператора.
//	 * Идентификатор - Строка - идентификатор оператора.
//	 * ИНН - Строка - ИНН оператора.
// Возвращаемое значение:
//  Неопределено,
// 	Структура:
// * Наименование - Строка - наименование оператора.
// * Идентификатор - Строка - идентификатор оператора.
// * ИНН - Строка - ИНН оператора.
Функция СведенияОбОператоре(ИдентификаторОтправителя, Знач СтруктураСведенияОбОператоре) Экспорт
	
	ОператорЭДОФК = ОператорЭДОФедеральногоКазначейства();
	
	ДлинаКодаОператора = 3;
	Если (ИспользоватьЭлектронноеАктированиеВЕИС()
		ИЛИ ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС())
		И Лев(ВРЕГ(ИдентификаторОтправителя), ДлинаКодаОператора) = ОператорЭДОФК.Идентификатор Тогда
		СведенияОбОператоре = СтруктураСведенияОбОператоре;
		ЗаполнитьЗначенияСвойств(СведенияОбОператоре, ОператорЭДОФК);
	Иначе
		СведенияОбОператоре = Неопределено;
	КонецЕсли;
	
	Возврат СведенияОбОператоре;
	
КонецФункции

// Используется УПД УКД.
// 
// Параметры:
//  КлючНастроекОтправки Ключ настроек отправки
// 
// Возвращаемое значение:
//  Неопределено, Структура - Используется УПД УКД:
// * ИспользуетсяУПД - Булево - используется УПД.
// * ИспользуетсяУКД - Булево - используется УКД.
Функция ИспользуетсяУПД_УКД(КлючНастроекОтправки) Экспорт
	
	Результат = Неопределено;
	СтруктураРезультата = НовыйРезультатИспользуетсяУПД_УКД();
	
	Договор = КлючНастроекОтправки.Договор;
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ГосударственныйКонтракт = ГосударственныйКонтрактДоговора(Договор);
	
	Если ИспользоватьЭлектронноеАктированиеВЕИС()
		И НЕ ГосударственныйКонтракт.Пустая() Тогда
		НастройкаОбмена = НастройкиОбменаЕИС(КлючНастроекОтправки.Отправитель);
		Если НастройкаОбмена <> Неопределено И НастройкаОбмена.ОбменВключен Тогда
			Результат = СтруктураРезультата;
			Результат.ИспользуетсяУПД = Истина;
			Результат.ИспользуетсяУКД = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройки отправки.
// 
// Параметры:
// 	КлючНастроекОтправки - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки
// Возвращаемое значение:
// 	- Неопределено - настройки не существуют
// 	- См. НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки.
Функция НастройкиОтправкиПоКлючу(КлючНастроекОтправки) Экспорт
	
	НастройкаОтправки = НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки();

	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		КлючНастроекОтправки.ВидДокумента, "ТипДокумента");
	
	ЭтоДокументЗаказчика = ТипДокументаОтправляетсяВЕИС(ТипДокумента, Ложь, Истина);
	ЭтоДокументПоставщика = ТипДокументаОтправляетсяВЕИС(ТипДокумента, Истина, Ложь);
	Если НЕ ЭтоДокументЗаказчика
		И НЕ ЗначениеЗаполнено(КлючНастроекОтправки.Договор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ГосударственныйКонтракт = ГосударственныйКонтрактДоговора(КлючНастроекОтправки.Договор);
	
	Если ЭтоДокументПоставщика
		И ИспользоватьЭлектронноеАктированиеВЕИС()
		И НЕ ГосударственныйКонтракт.Пустая() Тогда
		НастройкаОбмена = НастройкиОбменаЕИС(КлючНастроекОтправки.Отправитель);
		Если НЕ НастройкаОбмена = Неопределено И НастройкаОбмена.ОбменВключен Тогда
			ЗаполнитьЗначенияСвойств(НастройкаОтправки, КлючНастроекОтправки);
			НастройкаОтправки.ИдентификаторОтправителя = НастройкаОбмена.ИдентификаторУчастникаДокументооборота;
			НастройкаОтправки.ИдентификаторПолучателя = ГосударственныйКонтракт.ИдентификаторУчастникаДокументооборотаЗаказчика;
			НастройкаОтправки.СпособОбмена = СпособОбменаЧерезСерверЕИС();
			НастройкаОтправки.Формат = ВерсияФорматаТипаДокумента(ТипДокумента);
			НастройкаОтправки.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
			НастройкаОтправки.ОбменБезПодписи = Истина;
			НастройкаОтправки.Формировать = Истина;
			НастройкаОтправки.ГотовностьКОбмену = Истина;
		Иначе
			НастройкаОтправки = Неопределено;
		КонецЕсли;
	ИначеЕсли ЭтоДокументЗаказчика
		И ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
		НастройкаОбмена = НастройкиОбменаЕИСЗаказчика(КлючНастроекОтправки.Отправитель);
		Если НЕ НастройкаОбмена = Неопределено И НастройкаОбмена.ОбменВключен Тогда
			ЗаполнитьЗначенияСвойств(НастройкаОтправки, КлючНастроекОтправки);
			НастройкаОтправки.ИдентификаторОтправителя = НастройкаОбмена.ИдентификаторУчастникаДокументооборота;
			НастройкаОтправки.ИдентификаторПолучателя = ИдентификаторОбменаКонтрагента(КлючНастроекОтправки.Получатель);
			НастройкаОтправки.СпособОбмена = СпособОбменаЧерезСерверЕИС();
			НастройкаОтправки.Формат = ВерсияФорматаТипаДокумента(ТипДокумента);
			НастройкаОтправки.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
			НастройкаОтправки.ОбменБезПодписи = Истина;
			НастройкаОтправки.Формировать = Истина;
			НастройкаОтправки.ГотовностьКОбмену = Истина;
		КонецЕсли;
	Иначе
		НастройкаОтправки = Неопределено;
	КонецЕсли;
	
	Возврат НастройкаОтправки;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСФормамиПотребителей

// См. ЭлектронноеАктированиеЕИСПереопределяемый.ПередЗаписьюНаСервереГосударственногоКонтракта()
Процедура ПередЗаписьюНаСервереГосударственногоКонтракта(
		ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
		
	ЭлектронноеАктированиеЕИСПереопределяемый.ПередЗаписьюНаСервереГосударственногоКонтракта(
		ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
		
КонецПроцедуры

// Заполняет параметры для актирования документа по умолчанию.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - ссылка на организацию.
//  Документ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на документ.
Процедура ЗаполнитьПараметрыАктированияДокументаПоУмолчанию(Организация, Документ) Экспорт
	
	ГосКонтракт = ГосударственныйКонтрактДокумента(Документ);
	Если НЕ ИспользоватьЭлектронноеАктированиеВЕИС()
		ИЛИ НЕ ЗначениеЗаполнено(ГосКонтракт) Тогда
		Возврат;
	КонецЕсли;
	
	// Параметры документа.
	НаборДанныеДокумента = РегистрыСведений.
		ДанныеДокументовЭлектронногоАктированияЕИС.СоздатьНаборЗаписей();
	НаборДанныеДокумента.Отбор.Документ.Установить(Документ);
	НаборДанныеДокумента.Прочитать();
	Если НаборДанныеДокумента.Количество() = 0
		И ГосКонтракт.ЭтапыИсполнения.Количество() Тогда
			
		Запись = НаборДанныеДокумента.Добавить();
		Запись.Документ = Документ;
		Запись.Организация = Организация;
		Запись.ГосударственныйКонтрактЕИС = ГосКонтракт;
		Запись.ЭтапИсполненияКонтракта = ГосКонтракт.ЭтапыИсполнения[0].Идентификатор;
		НаборДанныеДокумента.Записать(Истина);
		
	КонецЕсли;
	
	// Подписанты документа.
	ПодписантыДокумента = ПодписантыЕИС(Документ);
	Если ПодписантыДокумента.Количество() = 0 Тогда
		ПодписантыОрганизации = ПодписантыОрганизации(Организация);
		НаборЗаписейПодписанты = РегистрыСведений.ПодписантыДокументовЕИС.СоздатьНаборЗаписей();
		НаборЗаписейПодписанты.Отбор.Документ.Установить(Документ);
		Для Каждого Подписант Из ПодписантыОрганизации Цикл
			Если Подписант.ЭтоРуководительОрганизации
				ИЛИ ПодписантыОрганизации.Количество() = 1 Тогда
					
				ЗаписьПодписант = НаборЗаписейПодписанты.Добавить();
				ЗаписьПодписант.Документ = Документ;
				ЗаписьПодписант.Организация = Организация;
				ЗаписьПодписант.Подписант = Подписант.Ссылка;
				ЗаписьПодписант.ОбластьПолномочий = Подписант.ОбластьПолномочий;
				ЗаписьПодписант.ОснованиеПолномочий = Подписант.ОснованиеПолномочий;
				
			КонецЕсли;
		КонецЦикла;
		НаборЗаписейПодписанты.Записать();
	КонецЕсли;
	
	// Адреса (места) доставки.
	МестаПоставки = МестаПоставкиДляЕИС(Документ);
	МестаПоставкиДокумента = ЭлектронноеАктированиеЕИСВызовСервера.
		МестаПоставкиДокумента(Документ);
	Если МестаПоставки.Количество() = 0 Тогда
		НаборЗаписейМеста = РегистрыСведений.
			МестаПоставкиДокументовДляЕИС.СоздатьНаборЗаписей();
		НаборЗаписейМеста.Отбор.Документ.Установить(Документ);
		НаборЗаписейМеста.Прочитать();
		Если НаборЗаписейМеста.Количество() = 0 И МестаПоставкиДокумента.Количество() > 0 Тогда
			// Заполнение мест поставки.
			МестоИзДокумента = МестаПоставкиДокумента[0];
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(МестоИзДокумента);
			Попытка
				ОбъектАдрес = ПрочитатьJSON(ЧтениеJSON);
			Исключение
				Шаблон = НСтр("ru = 'Не удалось разобрать данные адреса: %1.'");
				ОписаниеОшибки = СтрШаблон(Шаблон, МестоИзДокумента);
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
				Возврат;
			КонецПопытки;
			КодыАдреса = АдресныйКлассификатор.КодыАдреса(МестоИзДокумента);
			Если НЕ ЗначениеЗаполнено(КодыАдреса.КодКЛАДР) Тогда
				КодыАдреса.КодКЛАДР = КодКЛАДРПроизвольногоАдреса();
			КонецЕсли;
			Запись = НаборЗаписейМеста.Добавить();
			Запись.Документ = Документ;
			Запись.Организация = Организация;
			Если КодыАдреса.Свойство("Идентификатор")
				И ЗначениеЗаполнено(КодыАдреса.Идентификатор) Тогда
				Запись.ИдентификаторАдреса = КодыАдреса.Идентификатор;
			Иначе
				Запись.ИдентификаторАдреса = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			Запись.ИдентификаторАдреса = СтрЗаменить(Запись.ИдентификаторАдреса, "-", "");
			Запись.Место = ОбъектАдрес.value;
			Запись.Классификатор = Перечисления.КлассификаторМестаПоставкиЕИС.КЛАДР;
			Запись.Код = ЭлектронноеАктированиеЕИС.ПреобразоватьКодКладрДляЕИС(
					КодыАдреса.КодКЛАДР);
			Запись.Наименование = ОбъектАдрес.value;
			Запись.Адрес = ОбъектАдрес.value;
			Запись.РайонИлиГород = ОбъектАдрес.area;
			Запись.НаселенныйПункт = ОбъектАдрес.area;
			Запись.ДанныеМеста = МестоИзДокумента;
			Запись.Адрес = ОбъектАдрес.value;
			Запись.ЭтоМестоИзДанныхДокумента = Истина;
			НаборЗаписейМеста.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Установить представление госконтракта по договору.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - ссылка на организацию.
//  Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - ссылка на договор.
//  Форма - ФормаКлиентскогоПриложения - форма документа.
Процедура УстановитьПредставлениеГосконтрактаПоДоговору(Организация, Договор, Форма) Экспорт

	Контракт = ГосударственныйКонтрактДоговора(Договор);
	ИспользуетсяЭлектронноеАктирование = ИспользоватьЭлектронноеАктированиеВЕИС() 
		И ЗначениеЗаполнено(Контракт)
		И ЗначениеЗаполнено(Договор)
		И ОбменПоОрганизацииВключен(Организация);
	
	ИмяДекорации = ИмяДекорацииФормыПараметровЭлектронногоАктированияДокумента();
	ДекорацияПараметровАктирования = Форма.Элементы.Найти(ИмяДекорации);
	
	Если ИспользуетсяЭлектронноеАктирование Тогда
		Если ДекорацияПараметровАктирования = Неопределено Тогда
			ДекорацияПараметровАктирования =
				СоздатьЭлементФормыПараметровЭлектронногоАктированияДокумента(Форма);
		КонецЕсли;
		ДекорацияПараметровАктирования.Видимость = Истина;
		ДекорацияПараметровАктирования.Заголовок = 
			ЭлектронноеАктированиеЕИСВызовСервера.ПредставлениеКонтрактаПоДоговору(Договор);
	Иначе
		Если ДекорацияПараметровАктирования <> Неопределено Тогда
			ДекорацияПараметровАктирования.Видимость = Ложь;
			ДекорацияПараметровАктирования.Заголовок = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		Форма, "ИспользуетсяЭлектронноеАктирование") Тогда
		Форма.ИспользуетсяЭлектронноеАктирование = ИспользуетсяЭлектронноеАктирование;
	Иначе
		// Добавим реквизит формы.
		ДобавляемыеРеквизиты	= Новый Массив;
		ОписаниеТипа = Новый ОписаниеТипов("Булево");
		РеквизитИспользуетсяЭлектронноеАктирование =
			Новый РеквизитФормы("ИспользуетсяЭлектронноеАктирование", ОписаниеТипа);
		ДобавляемыеРеквизиты.Добавить(РеквизитИспользуетсяЭлектронноеАктирование);
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		Форма.ИспользуетсяЭлектронноеАктирование = ИспользуетсяЭлектронноеАктирование;
	КонецЕсли;
	
	УстановитьВидимостьКнопокЗаполненияТабличныхЧастей(Форма, ИспользуетсяЭлектронноеАктирование);
	
КонецПроцедуры

Функция ПреобразоватьКодКладрДляЕИС(Знач КодКладрБСП) Экспорт
	
	// Структура кодового обозначения в блоке "Код":
	// СС РРР ГГГ ППП УУУУ ДДДД КККК, где
	// СС - код субъекта Российской Федерации (региона).
	// РРР - код района;
	// ГГГ - код города;
	// ППП - код населенного пункта;
	// УУУУ - код улицы;
	// ДДДД - порядковый номер позиции классификатора с обозначениями домов;
	// КККК - порядковый номер позиции классификатора с обозначениями квартир.
	
	МинимальнаяДлинаКода = 15;
	Если СтрДлина(КодКладрБСП) > МинимальнаяДлинаКода И Прав(КодКладрБСП, 2) = "00" Тогда
		КодКЛАДР = Лев(КодКладрБСП, СтрДлина(КодКладрБСП) - 2);
	Иначе
		КодКЛАДР = КодКладрБСП;
	КонецЕсли;
	
	Возврат КодКЛАДР;
	
КонецФункции

Функция ПараметрыПриСозданииНаСервере_ФормаДокумента() Экспорт
	
	ПараметрыПриСоздании = Новый Структура;
	ПараметрыПриСоздании.Вставить("Форма");
	ПараметрыПриСоздании.Вставить("ДокументСсылка");
	ПараметрыПриСоздании.Вставить("ДоговорКонтрагента");
	ПараметрыПриСоздании.Вставить("Организация");
	
	Возврат ПараметрыПриСоздании;
	
КонецФункции

// Обработчик события "ПриСозданииНаСервере" формы документа.
//
// Параметры:
//  ПараметрыПриСозданииНаСервере - Структура - см. ПараметрыПриСозданииНаСервере_ФормаДокумента.
//   
Процедура ПриСозданииНаСервере_ФормаДокумента(ПараметрыПриСозданииНаСервере) Экспорт

	Форма = ПараметрыПриСозданииНаСервере.Форма;
	Контракт = НайтиГосударственныйКонтрактПоВладельцу(
		ПараметрыПриСозданииНаСервере.ДоговорКонтрагента);
	ЕстьЭлектронноеАктирование = ОбменПоОрганизацииВключен(ПараметрыПриСозданииНаСервере.Организация)
		И ИспользоватьЭлектронноеАктированиеВЕИС()
		И ЗначениеЗаполнено(Контракт);
	
	УстановитьВидимостьКнопокЗаполненияТабличныхЧастей(Форма, ЕстьЭлектронноеАктирование);
	
	Если ЕстьЭлектронноеАктирование Тогда
		СоздатьЭлементФормыПараметровЭлектронногоАктированияДокумента(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Имя декорации формы параметров электронного актирования документа.
// 
// Возвращаемое значение:
//  Строка - Имя декорации формы параметров электронного актирования документа
Функция ИмяДекорацииФормыПараметровЭлектронногоАктированияДокумента() Экспорт
	
	Возврат "ДекорацияГосударственныйКонтракт";
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСБСП

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
КонецПроцедуры

// Обработчик события "ПриОпределенииКомандПодключенныхКОбъекту" формы документа.
//
// Параметры:
//  см. ПодключаемыеКоманды.ПриОпределенииКомандПодключенныхКОбъекту.
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(Контекст, Источники, ПодключенныеОбъекты, Команды) Экспорт
	
	ТипыОбъектов = Новый Массив;
	ЭлектронноеАктированиеЕИСПереопределяемый.
		ЗаполнитьТипыОбъектовВызоваКомандыОткрытияПараметровАктирования(ТипыОбъектов);
	
	ТипПараметра = Новый ОписаниеТипов(ТипыОбъектов);
	
	Команда = Команды.Добавить();
	Команда.Вид = "ГруппаКомандЭлектронноеАктированиеЕИС";
	Команда.Идентификатор = "ДекорацияГосударственныйКонтракт";
	Команда.ИмяВФорме = "ДекорацияГосударственныйКонтракт";
	Команда.Представление = НСтр("ru = 'Изменение параметров электронного актирования ЕИС'");
	Команда.Важность = "Обычное";
	Команда.Порядок = 5;
	Команда.ТипПараметра = ТипПараметра;
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.РежимЗаписи = "Записывать";
	Команда.Обработчик = "ЭлектронноеАктированиеЕИСКлиент.ОткрытьПодборТоваровПоГосударственномуКонтрактуВДокументе";
	Команда.МножественныйВыбор = Ложь;
	
КонецПроцедуры

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	СерверыОбмена = СерверыОбменаЕИС();
	СтрокаАдреса = СерверыОбмена.Определения[КлючСервераИнформацииДляПоставщика()];
	РезультатРазбораАдреса = РазобратьСтрокуАдресаСервера(СтрокаАдреса);
	АдресСервера = СтрЗаменить(РезультатРазбораАдреса.АдресСервера, "https://", "");
	Описание = НСтр("ru = 'Сервис личных кабинетов единой информационной системы в сфере закупок'");
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		АдресСервера,
		443,
		Описание);
	НовыеРазрешения.Добавить(Разрешение);

	Разрешения = РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения);
	ЗапросыРазрешений.Добавить(Разрешения);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПриложенийДляТитулов

Функция НовыйРазделВидовРаботСтроительство() Экспорт
	
	Результат = Новый Структура;
	// Идентификатор (GUID) раздела.
	// ИдРаздел, Строка 32.
	Результат.Вставить("Идентификатор", "");
	// Наименование раздела.
	// НаимРаздел, Строка 500.
	Результат.Вставить("НаименованиеРаздела", "");
	// Стоимость без налога - всего для раздела.
	// СтоимБезНДСРаздел, Число(20,2).
	Результат.Вставить("СтоимостьБезНДСРаздела", "");
	// Стоимость с налогом - всего для раздела.
	// СтоимСНДСРаздел, Число(20,2).
	Результат.Вставить("СтоимостьСНДСРаздела", "");
	
	// Итоговая сумма налога для раздела.
	// СумНалРаздел.
	ДобавитьПоляДанныхОСуммеНДС(Результат);
	
	// Конструктивное решение (вид работ) (УПД).
	// Массив структур НовыйВидРаботСтроительство().
	Результат.Вставить("ВидыРабот", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОТаможеннойДекларации() Экспорт
	
	Результат = Новый Структура;
	// Цифровой код страны происхождения товара (Графа 10 счета-фактуры).
	// КодПроисх, Строка 3.
	Результат.Вставить("КодСтраныПроисхождения");
	// Краткое наименование страны происхождения.
	// Игнорируется при приеме, заполняется при передаче значением из справочника ОКСМ.
	// Наим, Строка 255.
	Результат.Вставить("НаименованиеСтраныПроисхождения");
	
	// Цифровой код страны происхождения товара (Графа 10 счета-фактуры; для документа с Функция=СЧФ,
	// выставляемом при получении оплаты, частичной оплаты в счет предстоящих поставок товаров
	// (выполнения работ, оказания услуг), передачи имущественных прав.
	// ДефКодПроисх, Строка 3.
	Результат.Вставить("КодСтраныПроисхожденияСчетФактура");
	
	// Регистрационный номер таможенной декларации (номер декларации на товары; графа 11 счета-фактуры).
	// НомерТД, Строка 29.
	Результат.Вставить("НомерТаможеннойДекларации");
	
	Возврат Результат;
	
КонецФункции

// Сведения о детализированных позициях ТРУ.
// В блоке указываются сведения о родительской позиции ТРУ и его детализациях.
// Возвращаемое значение:
//  Структура - Новые детализированные сведения ОТРУ:
// * ЭтоДетализированныеСведения - Булево - Истина, если сведения детализированные
// * СведенияОРодительскойПозиции - Структура - сведения о родителе:
// ** Идентификатор 
// ** ТехническийИдентификатор 
// ** ВнешнийТехническийИдентификатор 
// ** Код - Строка - код
// ** Наименование 
// ** Вид - Число - вид ТРУ
// ** КодЕдиницыИзмерения 
// ** НаименованиеЕдиницыИзмерения 
// ** ЦенаЗаЕдиницу 
// ** Количество - Число - количество
// ** СтоимостьБезНалогов - Число - стоимость без налога
// ** НалоговаяСтавка - Строка - налоговая ставка
// ** СтоимостьСНалогами - Число - стоимость с налогом
// ** СуммаНалога - Число - сумма налога
// ** СуммаАкциза - Число - сумма акциза
// ** КодСтраныПроисхождения 
// ** НаименованиеСтраныПроисхождения 
// ** КодСтраныПроизводителя 
// ** НаименованиеСтраныПроизводителя 
// * СведенияОДочернихПозициях - Массив - дочерние позиции, см. НовыеСведенияОДочернейПозицииТРУ().
Функция НовыеДетализированныеСведенияОТРУ() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоДетализированныеСведения", Истина);
	// Сведения о родительской позиции ТРУ.
	Результат.Вставить("СведенияОРодительскойПозиции",
		НовыеСведенияОРодительскойПозицииТРУ());
	// Массив структур см. НовыеСведенияОДочернейПозицииТРУ().
	Результат.Вставить("СведенияОДочернихПозициях", Новый Массив());
		
	Возврат Результат;
	
КонецФункции

// Новые сведения о месте поставки товарной позиции.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о месте поставки товарной позиции:
// * Идентификатор - Строка -Идентификатор места поставки в виде уникального идентификатора. Длина строки 32 символа.
// * ПоставляемоеКоличество - Число - Поставляемое количество. Число(15, 11).
Функция НовыеСведенияОМестеПоставкиТоварнойПозиции() Экспорт
	
	Результат = Новый Структура;
	
	// Идентификатор места поставки.
	// Контролируется наличие значения среди идентификаторов,
	// указанных в блоках "Сведения о месте поставки товаров"
	// (ФайлУПДПрод/СведМестаПоставки/СведМестоПоставки)
	// ИдМестаПоставки, УникальныйИдентификатор, Строка 32.
	Результат.Вставить("Идентификатор", "");
	// Поставляемое количество.
	// Контролиуется непревышение количества поставляемого товара (по всем местам поставки)
	// над общим количеством товара. То есть сумма значений данных атрибутов
	// в рамках одного ТРУ не должна превышать количество товара,
	// указанное в атрибуте "Количество (объем)"
	// (Файл/Документ/ТаблСчФакт/СведТов/@КолТов) основного документа УПД (титул продавца).
	// ПостКол, Число(15, 11).
	Результат.Вставить("ПоставляемоеКоличество", 0);
	
	Возврат Результат;
	
КонецФункции

// Новые сведения о дочерней позиции ТРУ.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о дочерней позиции ТРУ:
// * Идентификатор - Строка - GUID товара, работы, услуг.
// * НомерСтрокиТаблицы - Число - Повторяет номер строки таблицы из файла обмена счет-фактуры (информации продавца).
// * ЦенаЗаЕдиницуСНДС - Число - Цена за единицу с НДС.
// * КодСтраныПроисхождения - Строка - код страны происхождения. 
// * НаименованиеСтраныПроисхождения - Строка - наименование страны происхождения. 
// * КодСтраныПроизводителя - Строка - код страны производителя.
// * НаименованиеСтраныПроизводителя - Строка - наименование страны производителя.
Функция НовыеСведенияОДочернейПозицииТРУ() Экспорт
	
	Результат = Новый Структура;
	// GUID товара, работы, услуг. Назначается во внешней системе. Строка 32.
	Результат.Вставить("Идентификатор");
	// Повторяет номер строки таблицы из файла обмена счет-фактуры (информации продавца),
	// содержащей информацию о детализированной позиции товара, работы, услуги.
	Результат.Вставить("НомерСтрокиТаблицы", 0);
	// Цена за единицу с НДС.
	Результат.Вставить("ЦенаЗаЕдиницуСНДС");
	// Не заполняется для авансовых СЧФ.
	Результат.Вставить("КодСтраныПроисхождения");
	Результат.Вставить("НаименованиеСтраныПроисхождения");
	// Не заполняется для авансовых СЧФ.
	Результат.Вставить("КодСтраныПроизводителя");
	Результат.Вставить("НаименованиеСтраныПроизводителя");
	
	ДобавитьОбщиеСвойстваПозицииТРУ(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйВидРаботСтроительство() Экспорт
	
	Результат = Новый Структура;
	// Идентификатор (GUID) конструктивного решения (вида работ).
	// ИдВидРаб, Строка 32.
	Результат.Вставить("Идентификатор", "");
	// Порядковый номер конструктивного решения (вида работ).
	// Игнорируется при приеме,
	// заполняется при передаче присвоенным в ЕИС порядковым номером.
	// НомВидРаб, Число(2).
	Результат.Вставить("ПорядковыйНомер");
	// Наименование конструктивного решения (вида работ).
	// НаимВидРаб, Строка 500.
	Результат.Вставить("НаименованиеВидаРабот", "");
	// Номер позиции по смете.
	// ПозСмет, Строка 100.
	Результат.Вставить("НомерПозицииПоСмете");
	// Признак Товар/Работа.
	// ПрТовРаб, Булево.
	Результат.Вставить("ЭтоТовар", Ложь);
	// Количество (объем)
	// КолВидРаб, Число(27, 11).
	Результат.Вставить("Количество", 0);
	// Объем работ
	// КолВидРаб, Число(27, 11).
	Результат.Вставить("ОбВидРаб", "");
	// Цена на единицу измерения без НДС.
	// ЦенаБезНДС, Число(27, 11).
	Результат.Вставить("ЦенаБезНДС", 0);
	// Цена на единицу измерения с НДС.
	// ЦенаСНДС, Число(27, 11).
	Результат.Вставить("ЦенаСНДС", 0);
	// Стоимость без налога - всего.
	// СтоимБезНДС, Число(20, 2).
	Результат.Вставить("СтоимостьБезНДСВсего", 0);
	// Стоимость с налогом - всего.
	// СтоимСНДС, Число(20, 2).
	Результат.Вставить("СтоимостьСНДСВсего", 0);
	
	// Код товара. Ссылка на справочник ОКПД2
	// КодТов/Код, Строка 12.
	Результат.Вставить("КодТовараПоОКПД2");
	// Наименование товара, работы или услуги.
	// Игнорируется при приеме, заполняется при передаче значением из справочника ОКПД2.
	// КодТов/Наим, Строка 2000.
	Результат.Вставить("НаименованиеТовараПоОКПД2");
	
	// Инфорамция о единицах измерения.
	// При приеме контролируется обязательность заполнения блока "Единица измерения по ОКЕИ" (ОКЕИ)	
	// Единица измерения по ОКЕИ
	// ЕдИз/ОКЕИ, Структура.
	Результат.Вставить("ОКЕИ", НовоеЗначениеОКЕИ());
	// Общепринятые единицы измерения.
	// ЕдИзм/ОЕИ/Код, Строка 10.
	Результат.Вставить("КодОЕИ");
	// Полное наименование.
	// Игнорируется при приеме, заполняется при передаче значением из справочника ОЕИ.
	// ЕдИзм/ОЕИ/Наим, Строка 255.
	Результат.Вставить("НаименованиеОЕИ");
	
	// Страны происхождения и производства.
	// Код страны происхождения товара.
	// СтрПроисх/Код, Строка 3.
	Результат.Вставить("КодСтраныПроисхождения");
	// Краткое наименование.
	// Игнорируется при приеме, заполняется при передаче значением из справочника ОКСМ
	// СтрПроисх/Наим, Строка 255.
	Результат.Вставить("НаименованиеСтраныПроисхождения");
	// Страна регистрации производителя товара
	// Код.
	// СтрРегПроизв/Код, Строка 3.
	Результат.Вставить("КодСтраныПроизводителя");
	// Краткое наименование.
	// Игнорируется при приеме, заполняется при передаче значением из справочника ОКСМ.
	// СтрРегПроизв/Наим, Строка 255.
	Результат.Вставить("НаименованиеСтраныПроизводителя");
	
	ДобавитьПоляДанныхОСуммеНДС(Результат);
	
	// Сведения о таможенной декларации.
	// Массив структур НовыеСведенияОТаможеннойДекларации().
	// СвТД, Массив.
	Результат.Вставить("СведенияОТаможеннойДекларации", Новый Массив);
	
	Результат.Вставить("СтоимостьСНДСВсего", 0);
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОтраслевойСпециализацииСтроительствоДляУПД() Экспорт
	
	Результат = Новый Структура;
	// Раздел видов работ.
	// Массив структур НовыйРазделВидовРаботСтроительство().
	Результат.Вставить("РазделыВидовРабот", Новый Массив);
	// Конструктивное решение (вид работ) (УПД).
	// Массив структур НовыйВидРаботСтроительство().
	Результат.Вставить("ВидыРабот", Новый Массив);
	Возврат Результат;
	
КонецФункции

// Отраслевая специализация лекарственные препараты.
// 
// Возвращаемое значение:
//  Строка - код отраслевой специализации лекарственные препараты.
Функция ОтраслеваяСпециализацияЛекарственныеПрепараты() Экспорт
	
	Возврат "2";
	
КонецФункции

// Отраслевая специализация строительство.
// 
// Возвращаемое значение:
//  Строка - код отраслевой специализации строительство.
Функция ОтраслеваяСпециализацияСтроительство() Экспорт
	
	Возврат "1";
	
КонецФункции

// Отраслевая специализация приобретение жилых помещений.
// 
// Возвращаемое значение:
//  Строка - код отраслевой специализации приобретение жилых помещений.
Функция ОтраслеваяСпециализацияПриобретениеЖилыхПомещений() Экспорт
	
	Возврат "3";
	
КонецФункции

// Новые данные приложения к титулу продавца УКД.
// 
// Возвращаемое значение:
//  Структура - Новые данные приложения к титулу продавца УКД:
// * ПорядковыйНомерПодписантаПредлагающегоИзменитьСтоимостьУведомление - Число - номер подписанта. 
// * ПорядковыйНомерПодписантаПредлагающегоИзменитьСтоимостьПредложение - Число - номер подписанта.
// * ПорядковыйНомерРуководителяОрганизации - Число - порядковый номер руководителя. 
// * ИдентификаторИсходногоФайла - Строка - идентификатор исходного файла.
// * СведенияОКонтракте - Структура -:.
// ** НомерКонтракта - Строка - номер контракта.
// ** ДатаЗаключенияКонтракта - Дата - дата контракта.
// * СведенияОТоварах - Структура -:
// ** УменьшениеСтоимостиТоваровСНалогом - Число - уменьшение стоимости.
// ** УвеличениеСтоимостиТоваровСНалогом - Число - увеличение стоимости.
// ** УменьшениеСуммыНалога - Число - уменьшение налога.
// ** УвеличениеСуммыНалога - Число - увеличение налога.
// ** НоминалКурсаВалюты - Число - номинал курса валюты.
// ** ТоварыРаботыУслуги - Массив - данные табличной части.
// * СведенияОСтроительстве - Структура - сведения о строительстве.
// * Вложения - Массив - данные вложений.
Функция НовыеДанныеПриложенияКТитулуПродавцаУКД() Экспорт
	
	Результат = Новый Структура;
	ДобавитьМетаданныеСтруктуры(Результат);
	
	ДобавитьОбщиеПоляПриложенияКТитулуПродавца(Результат);
	
	// Выбор предложения или уведомления зависит от оснований изменения стоимости.
	// Например, если возможность изменения стоимости предусмотрена договором при 
	// наступлении определенных событий (т.е. изначально согласована сторонами),
	// то при наступлении таких событий достаточно УКД с атрибутом уведомления.
	// Если изменение стоимости стороны предварительно не согласовали,
	// то провести такое изменение можно только по взаимному  согласию сторон.
	// Тогда в УКД заполняется атрибут предложение, и такой УКД обязательно должен быть двусторонним.
	//
	// Порядковый номер подписанта (указанный в элементе ИныеСвед),
	// у которого установлен признак «Предлагаю изменить стоимость».
	// Заполняется, если не заполнено УведИзмСтоим.
	// ПредлИзмСтоим, Число(2).
	Результат.Вставить("ПорядковыйНомерПодписантаПредлагающегоИзменитьСтоимостьУведомление"); 
	// Порядковый номер подписанта (указанный в элементе ИныеСвед),
	// у которого установлен признак «Предлагаю изменить стоимость».
	// Заполняется, если не заполнено ПредлИзмСтоим
	// УведИзмСтоим, Число(2).
	Результат.Вставить("ПорядковыйНомерПодписантаПредлагающегоИзменитьСтоимостьПредложение");
	
	// Порядковый номер подписанта (указанный в элементе ИныеСвед),
	// являющегося руководителем организации, Число(2).
	Результат.Вставить("ПорядковыйНомерРуководителяОрганизации");
	// Для УКД - идентификатор файла с исходным УПД, для которого сформирован текущий УКД. 
	// Для Исправлений УКД - идентификатор файла с исходным УКД, для которого сформировано текущее Исправление.
	Результат.Вставить("ИдентификаторИсходногоФайла");
	Результат.Вставить("СведенияОКонтракте", НовыеСведенияОКонтрактеДляТитулаПродавцаУКД());
	
	// Сведения об отгруженных товарах (о выполненных работах, оказанных услугах), переданных имущественных правах.
	Результат.Вставить("СведенияОТоварах", НовыеСведенияОТоварахРаботахУслугахДляТитулаПродавцаУКД());
	
	// Сведения, относящиеся к отраслевой специализации по строительству.
	// Блок может быть задан только в том случае, если корректировочный документ формируется
	// к документу о приемке со специализацией "Строительство", то есть в атрибуте
	// "Отраслевая специализация" (ФайлУПДПрод/СведТов/@ОтрСпец) приложения к УПД задано значение
	// "1 - Строительство", иначе игнорируется при приеме.
	// СведСтройк, Неопределено или см. НовыеСведенияОСтроительствеДляПриложенияУКД.
	Результат.Вставить("СведенияОСтроительстве");
	
	// Прикрепленные документы.
	// Массив структур НовыеСведенияОВложенииТитулаПродавцаУПД().
	Результат.Вставить("Вложения", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Новые сведения о строительстве для приложения УПД.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о строительстве для приложения УПД:
// * СуммаНеОблагаемаяНалогом - Число - сумма не облагаемая налогом. 
// * СуммаНалогаПоСтавке10Процентов - Число - сумма налога по ставке 10 %.
// * СуммаНалогаПоСтавке20Процентов - Число - сумма налога по ставке 20 %.
// * ПроизводитьРасчетНДСВИтоговыхСтроках - Булево - производить расчет НДС в итоговых строках.
// * ОкруглятьСтоимостьДоЦелыхЗначений 
// * НаименованияСтолбцовТаблицы 
// * СведенияОбИнвесторе 
Функция НовыеСведенияОСтроительствеДляПриложенияУПД() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Сумма, не облагаемая налогом.
	Результат.Вставить("СуммаНеОблагаемаяНалогом");
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(17, 2));
	Описание = НСтр("ru = 'Сумма, не облагаемая налогом (по ставке Без НДС и 0%)'");
	Поле = НовоеПолеСтруктуры("СуммаНеОблагаемаяНалогом", 0,
		Тип,
		Описание,
		Ложь,
		"@ВсегоСумНеОблНал");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Сумма налога по ставке 10%.
	Результат.Вставить("СуммаНалогаПоСтавке10Процентов");
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(17, 2));
	Описание = Нстр(
		"ru = 'Сумма налога по ставке 10%. Может быть задан только в том случае, если установлен признак" +
			"""Производить расчет НДС в итоговых строках"" (РасчНДСВИтогСтр)'");
	Поле = НовоеПолеСтруктуры("СуммаНалогаПоСтавке10Процентов", 0,
		Тип,
		Описание,
		Ложь,
		"@СумНал10");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Сумма налога по ставке 20%.
	Результат.Вставить("СуммаНалогаПоСтавке20Процентов");
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(17, 2));
	Описание =  НСтр(
		"ru = 'Сумма налога по ставке 20%. Может быть задан только в том случае, если установлен признак" +
			"""Производить расчет НДС в итоговых строках"" (РасчНДСВИтогСтр)'");
	Поле = НовоеПолеСтруктуры("СуммаНалогаПоСтавке20Процентов", 0,
		Тип,
		Описание,
		Ложь,
		"@СумНал20");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Настройки для формирования документа.
	// При приеме исправления к документу в статусе "Подписано", "Подписано с частичной приемкой",
	// ИЛИ для документа о приемке существует исправление в аналогичном статусе, то значения 
	// дочерних атрибутов должны совпадать со значениями аналогичных атрибутов в существующем документе.
	// НастрФормДок
	
	// Производить расчет НДС в итоговых строках.
	Результат.Вставить("ПроизводитьРасчетНДСВИтоговыхСтроках");
	Тип = Новый ОписаниеТипов("Булево");
	Описание =  НСтр(
		"ru = 'Производить расчет НДС в итоговых строках." + 
			"Может быть задано только в том случае, если документ имеет функцию ДОП'");
	Поле = НовоеПолеСтруктуры("ПроизводитьРасчетНДСВИтоговыхСтроках", Ложь,
		Тип,
		Описание,
		Ложь,
		"НастрФормДок/@РасчНДСВИтогСтр");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Округлять стоимость до целых значений.
	Результат.Вставить("ОкруглятьСтоимостьДоЦелыхЗначений");
	Тип = Новый ОписаниеТипов("Булево");
	Описание =  НСтр(
		"ru = 'Округлять стоимость до целых значений." + 
			"Может быть задано только в том случае, если установлен признак" +
			"""Производить расчет НДС в итоговых строках"" (РасчНДСВИтогСтр)'");
	Поле = НовоеПолеСтруктуры("ОкруглятьСтоимостьДоЦелыхЗначений", Ложь,
		Тип,
		Описание,
		Ложь,
		"НастрФормДок/@ОкрСтоимДоЦелых");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Наименования столбцов таблицы.
	// см. НаименованияСтолбцовТаблицыКонструктивныеРешения.
	// см. НаименованияСтолбцовТаблицыРаботы.
	Результат.Вставить("НаименованияСтолбцовТаблицы");
	Тип = Новый ОписаниеТипов("Строка");
	Описание =  НСтр(
		"ru = 'Наименования столбцов таблицы." +
			"Допустимые значения:" +
			"НаимКонстрРеш - наименование конструктивных решений (элементов), комплексов (видов) работ, затрат, оборудования;" +
			"НаимРаб - наименование работ'");
	Поле = НовоеПолеСтруктуры("НаименованияСтолбцовТаблицы", "",
		Тип,
		Описание,
		Ложь,
		"НастрФормДок/@НаимСтолбцТабл");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Сведения об инвесторе.
	// СведИнвестор, см. НовыеСведенияОбИнвестореСтроительства.
	Результат.Вставить("СведенияОбИнвесторе");
	Тип = Новый ОписаниеТипов("Структура");
	Описание =  НСтр(
		"ru = 'Сведения об инвесторе'");
	Поле = НовоеПолеСтруктуры("СведенияОбИнвесторе", Неопределено,
		Тип,
		Описание,
		Ложь,
		"СведИнвестор", ,
		"НовыеСведенияОбИнвестореСтроительства");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;
	
КонецФункции

// Новые сведения о строительстве для приложения УКД.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о строительстве для приложения УКД:
// * УвеличениеСуммаНалогаПоСтавке10Процентов - Число - увеличение налога по ставке 10 %.
// * УвеличениеСуммаНалогаПоСтавке20Процентов - Число - увеличение налога по ставке 20 %.
// * УменьшениеСуммаНалогаПоСтавке10Процентов - Число - уменьшение налога по ставке 10 %.
// * УменьшениеСуммаНалогаПоСтавке20Процентов - Число - уменьшение налога по ставке 20 %.
Функция НовыеСведенияОСтроительствеДляПриложенияУКД() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Итоговое увеличение суммы налога по ставке 10%.	
	Результат.Вставить("УвеличениеСуммаНалогаПоСтавке10Процентов");
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(17, 2));
	Описание = Нстр(
		"ru = 'Итоговое увеличение суммы налога по ставке 10%." +
			"Может быть задан только в том случае, если в приложении к исходному документу" +
			"о приемке установлен признакк ""Производить расчет НДС в итоговых строках"" (РасчНДСВИтогСтр)'");
	Поле = НовоеПолеСтруктуры("УвеличениеСуммаНалогаПоСтавке10Процентов", 0,
		Тип,
		Описание,
		Ложь,
		"@ВсегоУвелСумНДС10");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Итоговое увеличение суммы налога по ставке 20%.	
	Результат.Вставить("УвеличениеСуммаНалогаПоСтавке20Процентов");
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(17, 2));
	Описание = Нстр(
		"ru = 'Итоговое увеличение суммы налога по ставке 20%." +
			"Может быть задан только в том случае, если в приложении к исходному документу" +
			"о приемке установлен признак ""Производить расчет НДС в итоговых строках"" (РасчНДСВИтогСтр)'");
	Поле = НовоеПолеСтруктуры("УвеличениеСуммаНалогаПоСтавке20Процентов", 0,
		Тип,
		Описание,
		Ложь,
		"@ВсегоУвелСумНДС20");
	ДобавитьПолеСтруктуры(Результат, Поле);

	// Итоговое уменьшение суммы налога по ставке 10%.	
	Результат.Вставить("УменьшениеСуммаНалогаПоСтавке10Процентов");
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(17, 2));
	Описание = Нстр(
		"ru = 'Итоговое уменьшение суммы налога по ставке 10%." +
			"Может быть задан только в том случае, если в приложении к исходному документу" +
			"о приемке установлен признак ""Производить расчет НДС в итоговых строках"" (РасчНДСВИтогСтр)'");
	Поле = НовоеПолеСтруктуры("УменьшениеСуммаНалогаПоСтавке10Процентов", 0,
		Тип,
		Описание,
		Ложь,
		"@ВсегоУмСумНДС10");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Итоговое уменьшение суммы налога по ставке 20%.	
	Результат.Вставить("УменьшениеСуммаНалогаПоСтавке20Процентов");
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(17, 2));
	Описание = Нстр(
		"ru = 'Итоговое уменьшение суммы налога по ставке 20%." +
			"Может быть задан только в том случае, если в приложении к исходному документу" +
			"о приемке установлен признак ""Производить расчет НДС в итоговых строках"" (РасчНДСВИтогСтр)'");
	Поле = НовоеПолеСтруктуры("УменьшениеСуммаНалогаПоСтавке20Процентов", 0,
		Тип,
		Описание,
		Ложь,
		"@ВсегоУмСумНДС20");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;
	
КонецФункции

// Новые сведения об инвесторе строительства.
// 
// Возвращаемое значение:
//  Структура - Новые сведения об инвесторе строительства:
// * Наименование - Строка - наименование организации или ФИО.
// * ИНН - Строка - ИНН инвестора.
// * КПП - Строка - КПП инвестора.
Функция НовыеСведенияОбИнвестореСтроительства() Экспорт
	
	Результат = Новый Структура;
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("Наименование");
	Тип = Новый ОписаниеТипов("Строка");
	Описание =  НСтр("ru = 'Наименования или ФИО инвестора'");
	Поле = НовоеПолеСтруктуры("Наименование", "",
		Тип,
		Описание,
		Истина,
		"@Наим");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ИНН");
	Тип = Новый ОписаниеТипов("Строка");
	Описание =  НСтр("ru = 'ИНН инвестора'");
	Поле = НовоеПолеСтруктуры("ИНН", "",
		Тип,
		Описание,
		Истина,
		"@ИНН");
	ДобавитьПолеСтруктуры(Результат, Поле);

	Результат.Вставить("КПП");
	Тип = Новый ОписаниеТипов("Строка");
	Описание =  НСтр("ru = 'КПП инвестора'");
	Поле = НовоеПолеСтруктуры("КПП", "",
		Тип,
		Описание,
		Ложь,
		"@КПП");
	ДобавитьПолеСтруктуры(Результат, Поле);

	Возврат Результат;
	
КонецФункции

// Новые сведения об обжаловании отказа о приемке.
// 
// Возвращаемое значение:
//  Структура - Новые сведения об обжаловании отказа о приемке:
// * ИдентификаторДокументаЯвляющегосяПредметомОбжалования - Строка
// * РеквизитыДокументаЯвляющегоПредметомОбжалования - Строка
// * ВидДокументаОбжалованияОтказаОПриемке - Строка
// * РеквизитыДокументаОбжалованияОтказаОПриемке - Строка
Функция НовыеСведенияОбОбжалованииОтказаОПриемке() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	// Идентификатор документа, являющегося предметом обжалования	
	Результат.Вставить("ИдентификаторДокументаЯвляющегосяПредметомОбжалования");
	Тип = Новый ОписаниеТипов("Строка");
	Описание = Нстр(
		"ru = 'Идентификатор документа, являющегося предметом обжалования'");
	Поле = НовоеПолеСтруктуры("ИдентификаторДокументаЯвляющегосяПредметомОбжалования", "",
		Тип,
		Описание,
		Истина,
		"@ИдФайлОбжалДок");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Реквизиты документа, являющего предметом обжалования	
	Результат.Вставить("РеквизитыДокументаЯвляющегоПредметомОбжалования");
	Тип = Новый ОписаниеТипов("Строка");
	Описание = Нстр(
		"ru = 'Игнорируется при приеме, заполняется при передаче реквизитами документа, " +
			"являющегося предметом обжалования'");
	Поле = НовоеПолеСтруктуры("РеквизитыДокументаЯвляющегоПредметомОбжалования", "",
		Тип,
		Описание,
		Ложь,
		"@ОбжалДок");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Вид документа, подтверждающего наличие соглашения сторон/решения суда	
	Результат.Вставить("ВидДокументаОбжалованияОтказаОПриемке");
	Тип = Новый ОписаниеТипов("Строка");
	Описание = Нстр(
		"ru = 'Вид документа, подтверждающего наличие соглашения сторон/решения суда'");
	Поле = НовоеПолеСтруктуры("ВидДокументаОбжалованияОтказаОПриемке", "",
		Тип,
		Описание,
		Истина,
		"@ВидДокСогл");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Реквизиты документа, подтверждающего наличие соглашения сторон/решения суда	
	Результат.Вставить("РеквизитыДокументаОбжалованияОтказаОПриемке");
	Тип = Новый ОписаниеТипов("Строка");
	Описание = Нстр(
		"ru = 'Реквизиты документа, подтверждающего наличие соглашения сторон/решения суда'");
	Поле = НовоеПолеСтруктуры("РеквизитыДокументаОбжалованияОтказаОПриемке", "",
		Тип,
		Описание,
		Ложь,
		"@РеквДокСогл");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;
	
КонецФункции

// Наименования столбцов таблицы конструктивные решения.
// 
// Возвращаемое значение:
//  Строка - Наименования столбцов таблицы конструктивные решения
Функция НаименованияСтолбцовТаблицыКонструктивныеРешения() Экспорт
	
	Возврат "НаимКонстрРеш";
	
КонецФункции

// Наименования столбцов таблицы работы.
// 
// Возвращаемое значение:
//  Строка - Наименования столбцов таблицы работы
Функция НаименованияСтолбцовТаблицыРаботы() Экспорт
	
	Возврат "НаимРаб";
	
КонецФункции

// Новые данные приложения к титулу УПДЗаказчика.
// 
// Возвращаемое значение:
//  Структура - Новые данные приложения к титулу УПДЗаказчика:
// * ИдентификаторПриложения - Строка - идентификатор приложения.
// * ИдентификаторФайла - Строка - идентификатор файла.
// * ВерсияФормата - Строка - версия формата.
// * ИтогоФактическиПринято - Число - итого принято.
// * ИнформацияОРасхожденияхПричинахОтказа - Строка - информация о расхождениях.
// * ДатаНачалаПриемки - Дата - дата начала приемки.
// * ХэшФайла - Строка - хэш файла.
// * СведенияОТРУ - Массив - табличная часть.
// * ИнформацияОРешенииПриемочнойКомиссии - Структура - информация о решении приемной комиссии.
// * ИныеУполномоченныеЛица - Массив - иные уполномоченные лица.
// * ПрочиеНачисления - Структура - прочие начисления.
// * Вложения - Массив - прикрепленные документы.
// * ОшибкиЗаполнения - Массив - ошибки заполнения.
Функция НовыеДанныеПриложенияКТитулуЗаказчикаУПД() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	ДобавитьОбщиеПоляПриложенияКТитулуЗаказчика(Результат);
	
	Результат.Вставить("ИдентификаторПриложения"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Идентификатор приложения к документу'"); 
	Поле = НовоеПолеСтруктуры("ИдентификаторПриложения", "",
		Тип,
		Описание,
		Истина,
		"@ИдПрилож",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	 
	Результат.Вставить("ИдентификаторФайла"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Идентификатор файла, к которому сформировано приложение'"); 
	Поле = НовоеПолеСтруктуры("ИдентификаторФайла", "",
		Тип,
		Описание,
		Истина,
		"@ИдФайл",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ИтогоФактическиПринято"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(20, 2)); 
	Описание =	НСтр("ru = 'Итого, фактически принято заказчиком'"); 
	Поле = НовоеПолеСтруктуры("ИтогоФактическиПринято", 0,
		Тип,
		Описание,
		Ложь,
		"@СтТовУчНалВсегоПринЗак",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ИнформацияОРасхожденияхПричинахОтказа"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Информация о расхождениях / причинах отказа в приемке'"); 
	Поле = НовоеПолеСтруктуры("ИнформацияОРасхожденияхПричинахОтказа", "",
		Тип,
		Описание,
		Ложь,
		"@ИнфРасхОтказПрием",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ДатаНачалаПриемки"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Дата начала приемки товаров'"); 
	Поле = НовоеПолеСтруктуры("ДатаНачалаПриемки", "",
		Тип,
		Описание,
		Ложь,
		"@ДатаНачПрин",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ХэшФайла"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Хэш файла, к которому сформировано приложение,"
		+ " в hex представлении, рассчитанный по алгоритму ГОСТ Р 34.11-2012'"); 
	Поле = НовоеПолеСтруктуры("ХэшФайла", "",
		Тип,
		Описание,
		Ложь,
		"@ХэшФайл",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("СведенияОТРУ"); 
	Тип = Новый ОписаниеТипов("Массив"); 
	Описание =	НСтр("ru = 'Сведения о принятии товаров, работ, услуг (ТРУ)'"); 
	Поле = НовоеПолеСтруктуры("СведенияОТРУ", Новый Массив,
		Тип,
		Описание,
		Ложь,
		"СвПрин",,
		"НовыеСведенияТРУУПДЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ИнформацияОРешенииПриемочнойКомиссии"); 
	Тип = Новый ОписаниеТипов("Структура"); 
	Описание =	НСтр("ru = 'Информация о решении приемочной комиссии'"); 
	Поле = НовоеПолеСтруктуры("ИнформацияОРешенииПриемочнойКомиссии", Неопределено,
		Тип,
		Описание,
		Ложь,
		"СвПриемКом",,
		"НовыеСведенияИнформацииОРешенииПриемочнойКомиссииЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ИныеУполномоченныеЛица"); 
	Тип = Новый ОписаниеТипов("Массив"); 
	Описание =	НСтр("ru = 'Иные уполномоченные лица'"); 
	Поле = НовоеПолеСтруктуры("ИныеУполномоченныеЛица", Новый Массив,
		Тип,
		Описание,
		Ложь,
		"ИныеУполнЛица",,
		"НовыеСведенияОИныхУполномоченныхЛицахЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПрочиеНачисления"); 
	Тип = Новый ОписаниеТипов("Структура"); 
	Описание =	НСтр("ru = 'Прочие начисления'"); 
	Поле = НовоеПолеСтруктуры("ПрочиеНачисления", Неопределено,
		Тип,
		Описание,
		Ложь,
		"ПрочиеНачислен",,
		"НовыеСведенияОПрочихНачисленияхЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;
	
КонецФункции

// Новые данные приложения к титулу заказчика УКД.
// 
// Возвращаемое значение:
//  Структура - Новые данные приложения к титулу заказчика УКД:
// * ИдентификаторПриложения - Строка - идентификатор приложения.
// * ИдентификаторФайла - Строка - идентификатор файла.
// * ВерсияФормата - Строка - версия формата.
// * ПорядковыйНомерСогласившегосяИзменитьСтоимость 
// * ХэшФайла - Строка - хэш файла. 
// * ИнформацияОРешенииПриемочнойКомиссии 
// * ПрочиеНачисления
// * Вложения - Массив - прикрепленные документы.
// * ОшибкиЗаполнения - Массив - ошибки заполнения. 
Функция НовыеДанныеПриложенияКТитулуЗаказчикаУКД() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	ДобавитьОбщиеПоляПриложенияКТитулуЗаказчика(Результат);
	
	Результат.Вставить("ИдентификаторПриложения"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Идентификатор приложения к документу'"); 
	Поле = НовоеПолеСтруктуры("ИдентификаторПриложения", "",
		Тип,
		Описание,
		Истина,
		"@ИдПрилож",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	 
	Результат.Вставить("ИдентификаторФайла"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Идентификатор файла, к которому сформировано приложение'"); 
	Поле = НовоеПолеСтруктуры("ИдентификаторФайла", "",
		Тип,
		Описание,
		Истина,
		"@ИдФайл",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПорядковыйНомерСогласившегосяИзменитьСтоимость"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(17, 2)); 
	Описание =	НСтр("ru = 'Порядковый номер подписанта, согласившегося изменить стоимость'"); 
	Поле = НовоеПолеСтруктуры("ПорядковыйНомерСогласившегосяИзменитьСтоимость", "",
		Тип,
		Описание,
		Истина,
		"@СоглИзмСтоим",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ХэшФайла"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Хэш файла, к которому сформировано приложение,"
		+ " в hex представлении, рассчитанный по алгоритму ГОСТ Р 34.11-2012'"); 
	Поле = НовоеПолеСтруктуры("ХэшФайла", "",
		Тип,
		Описание,
		Ложь,
		"@ХэшФайл",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ИнформацияОРешенииПриемочнойКомиссии"); 
	Тип = Новый ОписаниеТипов("Структура"); 
	Описание =	НСтр("ru = 'Информация о решении приемочной комиссии'"); 
	Поле = НовоеПолеСтруктуры("ИнформацияОРешенииПриемочнойКомиссии", Неопределено,
		Тип,
		Описание,
		Ложь,
		"СвПриемКом",,
		"НовыеСведенияИнформацииОРешенииПриемочнойКомиссииЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);
			
	Результат.Вставить("ПрочиеНачисления"); 
	Тип = Новый ОписаниеТипов("Структура"); 
	Описание =	НСтр("ru = 'Прочие начисления'"); 
	Поле = НовоеПолеСтруктуры("ПрочиеНачисления", Неопределено,
		Тип,
		Описание,
		Ложь,
		"ПрочиеНачислен",,
		"НовыеСведенияОПрочихНачисленияхУКДЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);
		
	Возврат Результат;
	
КонецФункции

Функция НовыеДанныеПриложенияКТитулуПродавцаУПД() Экспорт
	
	Результат = Новый Структура;
	ДобавитьМетаданныеСтруктуры(Результат);
	
	ДобавитьОбщиеПоляПриложенияКТитулуПродавца(Результат);
	
	// Порядковый номер подписанта (указанный в элементе ИныеСвед),
	// являющегося руководителем организации, Число(2).
	Результат.Вставить("ПорядковыйНомерРуководителяОрганизации");
	// Идентификатор файла с исходным УПД, для которого сформировано текущее Исправление.
	// Заполняется только для Исправлений УПД.
	Результат.Вставить("ИдентификаторИсходногоФайла");
	// Сведения о контракте.
	Результат.Вставить("СведенияОКонтракте", НовыеСведенияОКонтрактеДляТитулаПродавцаУПД());
	
	// Сведения об отгруженных товарах (о выполненных работах, оказанных услугах), переданных имущественных правах.
	// СведТов, см. НовыеСведенияОТоварахРаботахУслугахДляТитулаПродавцаУПД().
	Результат.Вставить("СведенияОТоварах", НовыеСведенияОТоварахРаботахУслугахДляТитулаПродавцаУПД());
	// Сведения о местах поставки товаров.
	// СведМестаПоставки, Массив структур, см. НовыеСведенияОМестеПоставкиТовара().
	Результат.Вставить("МестаПоставки", Новый Массив);

	// Сведения досудебном (судебном) обжалования отказа в приемке товаров (работ, услуг)
	// Блок может быть заполнен только в том случае, если одновременно выполняются следующие условия:
	// функция документа отлична от СЧФ;
	// в рамках этапа контракта, к которому принимается документ, существует хотя бы один документ о приемке
	// в статусе "Подписано с частичной приемкой" или "Отказано при приемке".
	// ИтогОбжОтзакПриемТов, Неопределено, Структура см. НовыеСведенияОбОбжалованииОтказаОПриемке
	Результат.Вставить("СведенияОбОбжалованииОтказаОПриемке");
	
	// Сведения, относящиеся к отраслевой специализации по строительству.
	// Блок может быть задан только в том случае, если в атрибуте "Отраслевая специализация"
	// (ФайлУПДПрод/СведТов/@ОтрСпец) задано значение "1 - Строительство", иначе игнорируется при приеме
	// СведСтройк, Неопределено, Структура см.НовыеСведенияОСтроительствеДляПриложенияУПД. 
	Результат.Вставить("СведенияОСтроительстве");
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьДвоичныеВложенияПриложенияДляЕИС(ДанныеПриложенияЕИС, ДанныеЭлектронногоАктированияЕИС) Экспорт

	ПриложенныеФайлыДляЭлектронногоАктированияЕИС =
		ДанныеЭлектронногоАктированияЕИС.ПриложенныеФайлыДляЭлектронногоАктированияЕИС;
	ДопустимыеРасширения = ЭлектронноеАктированиеЕИС.ДопустимыеРасширенияПриложенныхФайлов();
	Для Каждого Приложение Из ПриложенныеФайлыДляЭлектронногоАктированияЕИС Цикл
		Вложение = ЭлектронноеАктированиеЕИС.НовыеСведенияОВложенииТитулаПродавцаУПД();
		Файл = Приложение.ПрисоединенныйФайл;
		ДанныеФайла = ЭлектронноеАктированиеЕИС.ПолучитьДанныеФайлаБСП(Файл);
		Расширение = ДанныеФайла.Расширение;
		Если ДопустимыеРасширения.Найти(Расширение) = Неопределено Тогда
			Шаблон = НСтр("ru='Недопустимое расширение файла вложения %1.'");
			ОписаниеОшибки = СтрШаблон(Шаблон, Расширение);
			ВызватьИсключение(ОписаниеОшибки);
		КонецЕсли;
		Вложение.ВнешнийИдентификатор = Файл.УникальныйИдентификатор();
		Вложение.ИмяФайла = ДанныеФайла.ИмяФайла;
		Вложение.РасширениеФайла = ДанныеФайла.Расширение;
		Вложение.ДатаПрикрепления = МестноеВремя(ДанныеФайла.ДатаМодификацииУниверсальная);
		Вложение.КодВидаДокумента = Приложение.КодВида;
		Вложение.НаименованиеВидаДокумента = Приложение.НаименованиеВида;
		ДанныеПриложенияЕИС.Вложения.Добавить(Вложение);
	КонецЦикла;
	
КонецПроцедуры

Функция НовыеНедетализированныеСведенияОТРУ() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоДетализированныеСведения", Ложь);
	// Номер строки таблицы.
	// Повторяет номер строки таблицы из файла обмена счет-фактуры (информации продавца),
	// содержащей информацию о недетализированной позиции товара, работы, услуги
	Результат.Вставить("НомерСтрокиТаблицы", 0);
	// Объем работы, услуги в текстовом выражении.
	// НедеталТРУ/НеЛПСвед/ОбРабУсл, Строка 500.
	Результат.Вставить("ОбъемВТекстовомВыражении");
	// GUID товара, работы, услуги (в случае закупки лекарственных препаратов - GUID ЛП)
	// Идентификатор товара, работы, услуги из контракта, но основании которого формируется документ.
	Результат.Вставить("Идентификатор");
	// Технический идентификатор позиции ТРУ.
	// Соответствует значению поля sid из сведений о контракте.
	Результат.Вставить("ТехническийИдентификатор");
	// Внешний технический идентифи-катор позиции ТРУ.
	// Соответствует значению поля externalSid из сведений о контракте.
	Результат.Вставить("ВнешнийТехническийИдентификатор");
	// Исходное наименование ТРУ.
	Результат.Вставить("ИсходноеНаименование", "");
	// Цена за единицу с НДС (из сведений контракта)
	// Для обычного товара, не лекарства.
	// Для лекарства заполняется сюда помещается цена за потребительскую упаковку (с НДС).
	// Для лекарств не заполняется для авансовых СЧФ, в других случаях обязателен для заполнения.
	Результат.Вставить("ЦенаИзКонтрактаСНДС");
	// Страны происхождения и производства.
	Результат.Вставить("КодСтраныПроисхождения");
	Результат.Вставить("НаименованиеСтраныПроисхождения");
	Результат.Вставить("КодСтраныПроизводителя");
	Результат.Вставить("НаименованиеСтраныПроизводителя");
	// Признак того, что объект закупки является лекартсвенным препаратом.
	Результат.Вставить("ЭтоЛекарственныйПрепарат", Ложь);
	// Данные лекарственного препарата.
	Результат.Вставить("СведенияОЛекарственномПрепарате", НовыеСведенияОЛекарственномПрепаратеДляПриложения());
	// Отраслевая специализация.
	// Неопределено или ОтраслеваяСпециализацияСтроительство().
	Результат.Вставить("ОтраслеваяСпециализация");
	// Данные отраслевой специализации.
	// Неопределено или структура НовыеСведенияОтраслевойСпециализацииСтроительствоДляУПД().
	Результат.Вставить("СведенияОтраслевойСпециализация");
	
	ДобавитьОбщиеСвойстваПозицииТРУ(Результат);
	
	Возврат Результат;
	
КонецФункции

// Сведения о детализированных позициях ТРУ.
// В блоке указываются сведения о родительской позиции ТРУ и его детализациях.
Функция НовыеСведенияОТРУДляУКД() Экспорт
	
	Результат = Новый Структура;
	// Номер строки таблицы, Число(2).
	Результат.Вставить("НомерСтрокиТаблицы");
	// GUID товара, работы, услуги.
	Результат.Вставить("Идентификатор");
	// Технический идентификатор позиции ТРУ.
	// Соответствует значению поля sid из сведений о контракте.
	Результат.Вставить("ТехническийИдентификатор");
	// Внешний технический идентифи-катор позиции ТРУ.
	// Соответствует значению поля externalSid из сведений о контракте.
	Результат.Вставить("ВнешнийТехническийИдентификатор");
	
	// GUID родительской позиции ТРУ.
	// ТРУ/ИдРодТРУ, Строка 32.
	Результат.Вставить("РодительскийИдентификатор");
	// Технический идентификатор родительской позиции ТРУ.
	// Соответствует значению поля sid из сведений о контракте.
	// ТРУ/ТехИдРодТРУ, Число.
	Результат.Вставить("РодительскийТехническийИдентификатор");
	// Внешний технический идентификатор родительской позиции ТРУ.
	// Соответствует значению поля externalSid из сведений о контракте.
	// ТРУ/ВнешТехИдРодТРУ, Строка 40.
	Результат.Вставить("РодительскийВнешнийТехническийИдентификатор");
	
	// Код товара.
	// КодТов, Строка 100.
	Результат.Вставить("Код", "");
	// Исходное наименование ТРУ.
	// НаимТовИсх, Строка 1000.
	Результат.Вставить("ИсходноеНаименование");
	
	// Сведения только для не лекарственного препарата.
	// Объем работы, услуги в текстовом выражении.
	// Используется только для работ и услуг.
	// ОбРабУсл/ДоИзм, Строка 500.
	Результат.Вставить("ОбъемВТекстовомВыраженииДоИзменения", );
	// ОбРабУсл/ПослеИзм, Строка 500.
	Результат.Вставить("ОбъемВТекстовомВыраженииПослеИзменения", );
	// Наименование единицы измерения до и после изменения.
	// НаимЕдИзм/ДоИзм, Строка 255.
	Результат.Вставить("НаименованиеЕдиницыИзмеренияДоИзменения");
	// НаимЕдИзм/ПослеИзм, Строка 255.
	Результат.Вставить("НаименованиеЕдиницыИзмеренияПослеИзменения");
	// Цена за единицу с НДС до и после изменения.
	// ЦенаСНДС/ДоИзм, Число(27, 11)
	Результат.Вставить("ЦенаСНДСДоИзменения");
	// ЦенаСНДС/ПослеИзм, Число(27, 11)
	Результат.Вставить("ЦенаСНДСПослеИзменения");
	
	// Признак лекарсвенного препарата.
	Результат.Вставить("ЭтоЛекарственныйПрепарат", Ложь);
	// Данные лекарственного препарата.
	Результат.Вставить("СведенияОЛекарственномПрепарате", НовыеСведенияОЛекарственномПрепаратеДляПриложения(Истина));
	
	Возврат Результат;
	
КонецФункции

Функция ВидТРУТовар() Экспорт
	
	Возврат 1;
	
КонецФункции

Функция ВидТРУРабота() Экспорт
	
	Возврат 2;
	
КонецФункции

Функция ВидТРУУслуга() Экспорт
	
	Возврат 3;
	
КонецФункции

Функция МестоПоставкиПоКЛАДР() Экспорт
	
	Возврат "КЛАДР";
	
КонецФункции

Функция МестоПоставкиПоОКТМО() Экспорт
	
	Возврат "ОКТМО";
	
КонецФункции

Функция МестоПоставкиПоОКСМ() Экспорт
	
	Возврат "ОКСМ";
	
КонецФункции

// Код КЛАДРПроизвольного адреса.
// 
// Параметры:
//  КодРегиона - Строка - Код региона
// 
// Возвращаемое значение:
//  Строка -- Код КЛАДР произвольного адреса в тестовой форме.
Функция КодКЛАДРПроизвольногоАдреса(КодРегиона = "01") Экспорт
	
	Возврат КодРегиона + "000000000";
	
КонецФункции

#КонецОбласти

// Добавить ошибку заполнения приложения.
// 
// Параметры:
//  ДанныеПриложения - Структура - Данные приложения см. НовыеДанныеПриложенияКТитулуПродавцаУПД(), НовыеДанныеПриложенияКТитулуПродавцаУКД()
//  ТекстОшибки - Строка - текст ошибки.
// 
Процедура ДобавитьОшибкуЗаполненияПриложения(ДанныеПриложения, ТекстОшибки) Экспорт
	
	ДанныеПриложения.ОшибкиЗаполнения.Добавить(ТекстОшибки);
	
КонецПроцедуры

// Текст запроса данных шапки государственного контракта.
// 
// Возвращаемое значение:
//  Строка - Текст запроса данных шапки государственного контракта.
Функция ТекстЗапросаДанныхШапкиГосударственногоКонтракта() Экспорт
	
	ТекстЗапроса = "////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГосударственныеКонтрактыЕИС.Ссылка,
	|	ГосударственныеКонтрактыЕИС.Код,
	|	ГосударственныеКонтрактыЕИС.ВнутреннийИдентификаторЕИС,
	|	ГосударственныеКонтрактыЕИС.ЕстьАвансы,
	|	ГосударственныеКонтрактыЕИС.ЕстьАвансыПоЭтапам,
	|	ГосударственныеКонтрактыЕИС.ЕстьЛекарственныеПрепараты,
	|	ГосударственныеКонтрактыЕИС.ЕстьПриобретениеЖилыхПомещений,
	|	ГосударственныеКонтрактыЕИС.ЕстьРаботыИлиУслуги,
	|	ГосударственныеКонтрактыЕИС.ЕстьУслугиСУказаниемОбъемаВТекстовомВыражении,
	|	ГосударственныеКонтрактыЕИС.ИдентификаторУчастникаДокументооборотаЗаказчика,
	|	ГосударственныеКонтрактыЕИС.ИдентификационныйКодЗакупки,
	|	ГосударственныеКонтрактыЕИС.НомерИГК,
	|	ГосударственныеКонтрактыЕИС.Номер,
	|	ГосударственныеКонтрактыЕИС.ДатаЗаключенияКонтракта,
	|	ГосударственныеКонтрактыЕИС.ПредметОтноситсяКРаботамПоСтроительству,
	|	ГосударственныеКонтрактыЕИС.ПолноеНаименованиеЗаказчика,
	|	ДанныеДокументовЭлектронногоАктированияЕИС.ЭтапИсполненияКонтракта,
	|	ГосударственныеКонтрактыЕИСЭтапыИсполнения.Идентификатор КАК ИдентификаторЭтапаКонтракта,
	|	ГосударственныеКонтрактыЕИСЭтапыИсполнения.ВнутреннийИдентификаторЕИС КАК ТехническийИдентификаторЭтапаКонтракта,
	|	ГосударственныеКонтрактыЕИС.ПолноеНаименованиеПоставщика
	|ИЗ
	|	РегистрСведений.ДанныеДокументовЭлектронногоАктированияЕИС КАК ДанныеДокументовЭлектронногоАктированияЕИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГосударственныеКонтрактыЕИС КАК ГосударственныеКонтрактыЕИС
	|		ПО ГосударственныеКонтрактыЕИС.Ссылка = ДанныеДокументовЭлектронногоАктированияЕИС.ГосударственныйКонтрактЕИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГосударственныеКонтрактыЕИС.ЭтапыИсполнения КАК
	|			ГосударственныеКонтрактыЕИСЭтапыИсполнения
	|		ПО ДанныеДокументовЭлектронногоАктированияЕИС.ЭтапИсполненияКонтракта = ГосударственныеКонтрактыЕИСЭтапыИсполнения.Идентификатор
	|ГДЕ
	|	ДанныеДокументовЭлектронногоАктированияЕИС.Документ &УсловиеСсылки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Государственный контракт не заполнен.
// 
// Параметры:
//  СсылкаНаКонтракт - ОпределяемыйТип.ГосударственныеКонтрактыБЭД - Ссылка на контракт.
// 
// Возвращаемое значение:
//  Булево - Государственный контракт не заполнен.
Функция ГосударственныйКонтрактНеЗаполнен(СсылкаНаКонтракт) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Госконтракт", СсылкаНаКонтракт);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор КАК ИдентификаторСтрокиГосконтрактаЕИС,
	|	ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Номенклатура КАК Номенклатура
	|ИЗ
	|	&ГосударственныеКонтрактыОбъектыЗакупки КАК ГосударственныеКонтрактыЕИСОбъектыЗакупки
	|		ЛЕВОЕ СОЕДИНЕНИЕ &ГосударственныеКонтрактыНоменклатураОбъектовЗакупки КАК ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки
	|		ПО (ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Идентификатор = ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор)
	|ГДЕ
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Ссылка = &Госконтракт
	|	И ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Номенклатура ЕСТЬ NULL
	|	И НЕ ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоРаботаИлиУслуга";
	
	ИмяСправочникаГосударственныеКонтракты = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("ГосударственныеКонтракты");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ГосударственныеКонтрактыОбъектыЗакупки", "Справочник." + ИмяСправочникаГосударственныеКонтракты + ".ОбъектыЗакупки");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ГосударственныеКонтрактыНоменклатураОбъектовЗакупки", "Справочник." + ИмяСправочникаГосударственныеКонтракты + ".НоменклатураОбъектовЗакупки");
	
	РезультатПроверки = НЕ Запрос.Выполнить().Пустой();
	
	Возврат РезультатПроверки;
	
КонецФункции

// Данные госконтракта по владельцу.
// 
// Параметры:
//  ВладелецКонтракта Владелец контракта
// 
// Возвращаемое значение:
//  Структура - Данные госконтракта по владельцу:
// * ГосконтрактЕИС - ОпределяемыйТип.ГосударственныеКонтрактыБЭД - ссылка на контракт.
// * ГосконтрактЕИСНеЗаполнен - Булево - признак того, что контракт не заполнен.
// * ТаблицаНоменклатуры - ТаблицаЗначений - таблица номенклатуры контракта.
// * ТаблицаЭтапов - ТаблицаЗначений - таблица этапов контракта.
Функция ДанныеГосконтрактаПоВладельцу(ВладелецКонтракта) Экспорт
	
	ИмяСправочникаГосударственныеКонтракты = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("ГосударственныеКонтракты");
	Если Не ЗначениеЗаполнено(ИмяСправочникаГосударственныеКонтракты) Тогда
		ИмяСправочникаГосударственныеКонтракты = "ГосударственныеКонтрактыЕИС";
	КонецЕсли;
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрШаблон("Справочник.%1",
			ИмяСправочникаГосударственныеКонтракты));
	
	ДанныеГосконтракта = Новый Структура;
	ДанныеГосконтракта.Вставить("ГосконтрактЕИС", МенеджерОбъекта.ПустаяСсылка());
	ДанныеГосконтракта.Вставить("ГосконтрактЕИСНеЗаполнен", Ложь);
	ДанныеГосконтракта.Вставить("ТаблицаНоменклатуры", Неопределено);
	ДанныеГосконтракта.Вставить("ТаблицаЭтапов", Неопределено);
	
	ДанныеГосконтракта.ГосконтрактЕИС = ЭлектронноеАктированиеЕИС.НайтиГосударственныйКонтрактПоВладельцу(ВладелецКонтракта);
	
	Если Не ЗначениеЗаполнено(ДанныеГосконтракта.ГосконтрактЕИС) Тогда
		Возврат ДанныеГосконтракта;
	КонецЕсли;
	
	ДанныеГосконтракта.ГосконтрактЕИСНеЗаполнен = ГосударственныйКонтрактНеЗаполнен(ДанныеГосконтракта.ГосконтрактЕИС);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Госконтракт", ДанныеГосконтракта.ГосконтрактЕИС);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Номенклатура КАК НоменклатураГосконтракта
	//|	СпрНоменклатура.Услуга КАК Услуга
	|ИЗ
	|	&ГосударственныеКонтрактыНоменклатураОбъектовЗакупки КАК ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	//|		ПО ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Ссылка = &Госконтракт
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураГосконтракта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГосударственныеКонтрактыЕИСЭтапыИсполнения.Идентификатор КАК Идентификатор,
	|	ГосударственныеКонтрактыЕИСЭтапыИсполнения.НомерСтроки КАК НомерСтроки,
	|	ГосударственныеКонтрактыЕИСЭтапыИсполнения.ДатаНачала КАК ДатаНачала,
	|	ГосударственныеКонтрактыЕИСЭтапыИсполнения.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	&ГосударственныеКонтрактыЭтапыИсполнения КАК ГосударственныеКонтрактыЕИСЭтапыИсполнения
	|ГДЕ
	|	ГосударственныеКонтрактыЕИСЭтапыИсполнения.Ссылка = &Госконтракт
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОкончания";
	
	ИмяСправочникаГосударственныеКонтракты = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("ГосударственныеКонтракты");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ГосударственныеКонтрактыЭтапыИсполнения", "Справочник." + ИмяСправочникаГосударственныеКонтракты + ".ЭтапыИсполнения");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ГосударственныеКонтрактыНоменклатураОбъектовЗакупки", "Справочник." + ИмяСправочникаГосударственныеКонтракты + ".НоменклатураОбъектовЗакупки");
	
	Результат = Запрос.ВыполнитьПакет();
	ДанныеГосконтракта.ТаблицаНоменклатуры = Результат[0].Выгрузить();
	ДанныеГосконтракта.ТаблицаЭтапов = Результат[1].Выгрузить();
	
	Возврат ДанныеГосконтракта;
	
КонецФункции

// см. ЭлектронноеАктированиеЕИСПереопределяемый.СопоставлятьНоменклатуруКонтракта
Функция СопоставлятьНоменклатуруКонтракта() Экспорт
	
	СопоставлятьНоменклатуру = Ложь;
	ЭлектронноеАктированиеЕИСПереопределяемый.СопоставлятьНоменклатуруКонтракта(
		СопоставлятьНоменклатуру);
		
	Возврат СопоставлятьНоменклатуру;
	
КонецФункции

// Создать договор на основании контракта.
// 
// Параметры:
//  СсылкаНаКонтракт - ОпределяемыйТип.ГосударственныеКонтрактыБЭД - Ссылка на контракт.
// 
// Возвращаемое значение:
//  Структура - резульат создания контракта:
// * Договор - Неопределено, ОпределяемыйТип.ДоговорСКонтрагентомЭДО - ссылка на договор.
// * Выполнено - Булево - Истина, если договор был успешно создан.
// * ОписаниеОшибки - Строка - описание ошибки создания договора.
Функция СоздатьДоговорНаОснованииКонтракта(СсылкаНаКонтракт) Экспорт
	
	РезультатСоздания = Новый Структура();
	РезультатСоздания.Вставить("Договор", Неопределено);
	РезультатСоздания.Вставить("Выполнено", Ложь);
	РезультатСоздания.Вставить("ОписаниеОшибки", "");
	
	ЭлектронноеАктированиеЕИСПереопределяемый.
		СоздатьДоговорНаОснованииКонтракта(СсылкаНаКонтракт, РезультатСоздания);
	
	Возврат РезультатСоздания;
	
КонецФункции

// Определяет следующие свойств регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
// Параметры:
//  Настройки - ТаблицаЗначений - таблица значений с колонками:
//    * РегламентноеЗадание - ОбъектМетаданных:РегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданных:ФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более, чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - неопределено.
//    * ДоступноВМоделиСервиса      - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в модели сервиса.
//        По умолчанию - неопределено.
//    * РаботаетСВнешнимиРесурсами  - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.).
//        По умолчанию - Ложь.
//    * Параметризуется             - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
// Например:
//	Настройка = Настройки.Добавить();
//	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS;
//	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
//	Настройка.ДоступноВМоделиСервиса = Ложь;
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание =
		Метаданные.РегламентныеЗадания.ПолучениеЭлектронныхДокументовИзЕИС;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий.
// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
// Параметры:
//  СоответствиеИменПсевдонимам - Соответствие - 
//    * Ключ - псевдоним метода, например ОчиститьОбластьДанных.
//    * Значение - имя метода для вызова, например РаботаВМоделиСервиса.ОчиститьОбластьДанных.
//        В качестве значения можно указать Неопределено, в этом случае считается что имя 
//        совпадает с псевдонимом.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(
		Метаданные.РегламентныеЗадания.ПолучениеЭлектронныхДокументовИзЕИС.ИмяМетода);
	
КонецПроцедуры

Процедура ПолучитьНовыеЭлектронныеДокументыПоРасписанию() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПолучениеЭлектронныхДокументовИзЕИС);
		
	УстановитьПривилегированныйРежим(Истина);
	Контейнеры = Новый Массив;
	ЭлектронноеАктированиеЕИСПолучениеВходящих.ПолучитьНовыеДокументыЕИС(Контейнеры);
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// См. ЭлектронноеАктированиеЕИСПереопределяемый.ЗаполнитьСвязиПараметровВыбораИПараметрыВыбораДоговора().
Функция СвязиПараметровВыбораИПараметрыВыбораДоговора() Экспорт
	
	СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	
	ЭлектронноеАктированиеЕИСПереопределяемый.
		ЗаполнитьСвязиПараметровВыбораИПараметрыВыбораДоговора(
			СвязиПараметровВыбора, ПараметрыВыбора);
	
	Результат = Новый Структура;
	Результат.Вставить("СвязиПараметровВыбора", СвязиПараметровВыбора);
	Результат.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	
	Возврат Результат;
		
КонецФункции

// Заполнить деревья данных для актирования документа.
// 
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ.
//  ДанныеКонтракта - Структура - данные контракта.
//  ДеревоТоваров - ДеревоЗначений - дерево товаров.
//  ДеревоРаботУслуг - ДеревоЗначений - Дерево работ услуг.
Процедура ЗаполнитьДеревьяДанныхДляАктированияДокумента(Документ,
			ДанныеКонтракта, ДеревоТоваров, ДеревоРаботУслуг) Экспорт

	ЭлектронноеАктированиеЕИСПереопределяемый.
		ЗаполнитьДеревьяДанныхПараметровАктированияДокумента(
			Документ, ДанныеКонтракта, ДеревоТоваров, ДеревоРаботУслуг);
	
КонецПроцедуры

// Новый результат заполнения табличных частей.
// 
// Возвращаемое значение:
//  Структура - результат заполнения табличных частей:
// * Выполнено - Булево - Истина, если заполнение прошло без ошибок.
// * ОписаниеОшибки - Строка - описание ошибки.
Функция НовыйРезультатЗаполненияТабличныхЧастей() Экспорт
	
	РезультатЗаполнения = Новый Структура();
	РезультатЗаполнения.Вставить("Выполнено", Ложь);
	РезультатЗаполнения.Вставить("ОписаниеОшибки", "");
	
	Возврат РезультатЗаполнения;
	
КонецФункции

// Заполнить табличную часть документа по данным дерева товаров услуг.
// 
// Параметры:
//  СсылкаНаДокумент - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на документ.
//  ДеревоТоваров - ДеревоЗначений - дерево товаров.
//  ДеревоРаботУслуг - ДеревоЗначений - дерево работ услуг.
// 
// Возвращаемое значение:
//  Структура - см. ЭлектронноеАктированиеЕИС.НовыйРезультатЗаполненияТабличныхЧастей().
Функция ЗаполнитьТабличнуюЧастьДокументаПоДаннымДереваТоваровУслуг(
			СсылкаНаДокумент, ДеревоТоваров, ДеревоРаботУслуг) Экспорт
	
	РезультатЗаполнения = НовыйРезультатЗаполненияТабличныхЧастей();
	
	ЭлектронноеАктированиеЕИСПереопределяемый.
		ЗаполнитьТабличнуюЧастьДокументаПоДаннымДереваТоваровУслуг(
			СсылкаНаДокумент, ДеревоТоваров, ДеревоРаботУслуг, РезультатЗаполнения);
			
	Возврат РезультатЗаполнения;
	
КонецФункции

// Обмен по организации включен.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - ссылка на организацию.
// 
// Возвращаемое значение:
//  Булево - Истина, если обмен по организации включен.
Функция ОбменПоОрганизацииВключен(Организация) Экспорт
	
	Результат = Ложь;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Настройки = НастройкиОбменаЕИС(Организация);
	Результат = ЗначениеЗаполнено(Настройки) И Настройки.ОбменВключен;
	
	Возврат Результат;
	
КонецФункции

// Настройки обмена ЕИС для заказчика.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация заказчика.
// 
// Возвращаемое значение:
//  Неопределено, Структура - Настройки обмена ЕИС заказчика.
Функция НастройкиОбменаЕИСЗаказчика(Организация) Экспорт
	
	Если НЕ ЕстьПодсистемаДляЗаказчиков() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МодульПодсистемыЗаказчика = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЗаказчикаЕИС");
	Возврат МодульПодсистемыЗаказчика.НастройкиОбменаЕИСЗаказчика(Организация);
	
КонецФункции

// Настройки обмена ЕИС для поставщика.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация поставщика.
//  ПолучитьИдентификаторССервера - Булево - Истина, получить идентификатор поставщика с серверра.
// 
// Возвращаемое значение:
//  Неопределено, Структура - Настройки обмена ЕИС заказчика.
Функция НастройкиОбменаЕИС(Организация, ПолучитьИдентификаторССервера = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменаЕИС.Организация КАК Организация,
	|	НастройкиОбменаЕИС.РегистрационныйНомерЕРУЗ КАК РегистрационныйНомерЕРУЗ,
	|	НастройкиОбменаЕИС.ТокенАвторизации КАК ТокенАвторизации,
	|	НастройкиОбменаЕИС.КодПоСПЗ КАК КодПоСПЗ,
	|	НастройкиОбменаЕИС.ТипОрганизации КАК ТипОрганизации,
	|	НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота КАК ИдентификаторУчастникаДокументооборота,
	|	НастройкиОбменаЕИС.ОбменВключен КАК ОбменВключен,
	|	ИСТИНА КАК ИспользоватьУПД,
	|	ИСТИНА КАК ИспользоватьУКД,
	|	НастройкиОбменаЕИС.НаименованиеОрганизации КАК НаименованиеОрганизации
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕИС КАК НастройкиОбменаЕИС
	|ГДЕ
	|	НастройкиОбменаЕИС.Организация = &Организация";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Настройки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат[0]);
	
	Если Настройки.ТипОрганизации = Перечисления.ВидыУчастниковЭлектронногоАктированияЕИС.Поставщик
		И ПолучитьИдентификаторССервера Тогда
		РезультатСведенияОПоставщике = СведенияОПоставщикеИЕгоПодписантах(Организация,
			Настройки);
		Если НЕ РезультатСведенияОПоставщике.Выполнено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Настройки.ИдентификаторУчастникаДокументооборота =
			РезультатСведенияОПоставщике.СведенияОПоставщике.ИдентификаторУчастникаДокументооборота;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция НовыеСведенияОВложенииТитулаПродавцаУПД() Экспорт
	
	Результат = Новый Структура;
	
	// Уникальный идентификатор контента прикрепленного документа на ЕИС.
	// КонтентИд, Строка 32.
	Результат.Вставить("Идентификатор");
	// Внешний уникальный идентификатор контента прикрепленного документа.
	// ВнешКонтентИд, Строка 40.
	Результат.Вставить("ВнешнийИдентификатор");
	// Имя файла.
	// ИмяФайл, Строка 255.
	Результат.Вставить("ИмяФайла", "");
	// Хэш файла в hex представлении, рассчитанный по алгоритму ГОСТ Р 34.11-2012.
	// ХэшФайл, Строка 64.
	Результат.Вставить("ХэшФайла");
	// Расширение файла,допустимые значения перечислены в схеме.
	// РасширенФайл, список предопредленных значений.
	Результат.Вставить("РасширениеФайла", "");
	// Описание прикрепляемого документа, Строка 255.
	// ОписаниеФайл, Строка 255.
	Результат.Вставить("ОписаниеФайла");
	// Дата/время прикрепления документа, Дата.
	// ДатаПрикреплен, Дата.
	Результат.Вставить("ДатаПрикрепления", Неопределено);
	// Ссылка для скачивания прикрепленного документа.
	// Ссылк, Стока 2048.
	Результат.Вставить("Ссылка");
	
	// Ссылка на справочник видов документов.
	// Код вида документа.
	// ВидДок/Код, Число(2).
	Результат.Вставить("КодВидаДокумента");
	// Наименование вида документа.
	// ВидДок/Наим, Строка 255.
	Результат.Вставить("НаименованиеВидаДокумента");
	
	Возврат Результат;
	
КонецФункции

// Данные для заполнения табличной части документа.
// 
// Параметры:
//  ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - Ссылка на договор с контрагентом.
//  ИдентификаторСтроки - Строка - идентификатор строки контракта.
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - Данные для заполнения табличной части документа.
Функция ДанныеДляЗаполненияТабличнойЧастиДокумента(ДоговорКонтрагента, ИдентификаторСтроки = "") Экспорт
	
	ГосКонтракт = ГосударственныйКонтрактДоговора(ДоговорКонтрагента);
	
	Если ГосКонтракт.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Номенклатура,
	|	ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.НоменклатураПартнера,
	|	ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Количество КАК Количество,
	|	ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Характеристика,
	|	ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Упаковка,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.НомерСтроки,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ВнешнийИдентификатор,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ВнутреннийИдентификаторЕИС,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияКод,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЕдиницаИзмеренияНаименование,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ИдентификаторЛП,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.КодМНН,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.КодПоСправочникуЛП,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.КодТовараДляЕИС,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Количество КАК КоличествоИзКонтракта,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Наименование,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ОбъемРаботыУслуги,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтавкаНДС,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтранаПроизводителя,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СтранаПроисхождения,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Сумма,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Тип,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Цена,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоЛекарственныйПрепарат,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоМедицинскоеИзделие,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоРаботаИлиУслуга,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.ЭтоПриобретениеЖилыхПомещений,
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.СуммаНДС
	|ИЗ
	|	&ГосударственныеКонтрактыОбъектыЗакупки КАК ГосударственныеКонтрактыЕИСОбъектыЗакупки
	|		ЛЕВОЕ СОЕДИНЕНИЕ &ГосударственныеКонтрактыНоменклатураОбъектовЗакупки КАК
	|			ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки
	|		ПО ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор = ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Идентификатор
	|ГДЕ
	|	ГосударственныеКонтрактыЕИСОбъектыЗакупки.Ссылка = &ГосКонтракт
	|	И ГосударственныеКонтрактыЕИСНоменклатураОбъектовЗакупки.Ссылка = &ГосКонтракт";
	
	ИмяСправочникаГосударственныеКонтракты = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("ГосударственныеКонтракты");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ГосударственныеКонтрактыОбъектыЗакупки", "Справочник." + ИмяСправочникаГосударственныеКонтракты + ".ОбъектыЗакупки");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ГосударственныеКонтрактыНоменклатураОбъектовЗакупки", "Справочник." + ИмяСправочникаГосударственныеКонтракты + ".НоменклатураОбъектовЗакупки");
	
	Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		Запрос.Текст = Запрос.Текст + " И ГосударственныеКонтрактыЕИСОбъектыЗакупки.Идентификатор = &ИдентификаторСтроки";
		Запрос.УстановитьПараметр("ИдентификаторСтроки", ИдентификаторСтроки);
	КонецЕсли;

	Запрос.УстановитьПараметр("ГосКонтракт", ГосКонтракт);
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выборка;
	
КонецФункции

// Государственный контракт документа.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на документ.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ГосударственныеКонтрактыБЭД - государственный контракт документа.
Функция ГосударственныйКонтрактДокумента(Документ) Экспорт
	
	ИмяСправочникаГосударственныеКонтракты = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("ГосударственныеКонтракты");
	Если Не ЗначениеЗаполнено(ИмяСправочникаГосударственныеКонтракты) Тогда
		ИмяСправочникаГосударственныеКонтракты = "ГосударственныеКонтрактыЕИС";
	КонецЕсли;
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрШаблон("Справочник.%1",
			ИмяСправочникаГосударственныеКонтракты));	
	
	ГосударственныйКонтракт = МенеджерОбъекта.ПустаяСсылка();
	ЭлектронноеАктированиеЕИСПереопределяемый.ГосударственныйКонтрактДокумента(Документ, ГосударственныйКонтракт);
	Возврат ГосударственныйКонтракт;
	
КонецФункции

// Государственный контракт договора в привилегированном режиме.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - ссылка на договор.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ГосударственныеКонтрактыБЭД - государственный контракт, привязанный к договору.
Функция ГосударственныйКонтрактДоговора(Договор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ГосударственныйКонтракт = Договор.ГосударственныйКонтракт;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ГосударственныйКонтракт;
	
КонецФункции

// Найти государственный контракт по договору с учетом прав.
// 
// Параметры:
//  Владелец ОпределяемыйТип.ДоговорСКонтрагентомЭДО - ссылка на договор.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ГосударственныеКонтрактыБЭД - государственный контракт, привязанный к договору.
Функция НайтиГосударственныйКонтрактПоВладельцу(Владелец) Экспорт
	
	Возврат Владелец.ГосударственныйКонтракт;
	
КонецФункции

Функция ПредставлениеОбъектаЗакупки(ОбъектЗакупки, ДобавитьНомерСтроки) Экспорт
	
	Если ДобавитьНомерСтроки Тогда
		Шаблон = "%1. %2";
		Представление = СтрШаблон(Шаблон, ОбъектЗакупки.НомерСтроки, ОбъектЗакупки.Наименование);
	Иначе
		Представление = ОбъектЗакупки.Наименование;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Преобразование прикладного значения ставки в текстовое для приложения УПД/УКД.
Функция СтавкаНДСДляПриложенияЕИС(Знач СтавкаНДС) Экспорт
	
	СтавкаНДСПриложения = Неопределено;
	ЭлектронноеАктированиеЕИСПереопределяемый.СтавкаНДСДляПриложенияЕИС(
		СтавкаНДС, СтавкаНДСПриложения);
	Возврат СтавкаНДСПриложения;
	
КонецФункции

// Преобразование текстового значения ставки из данных контракта в прикладное.
Функция СтавкаНДСОбъектаЗакупки(Знач ОбъектЗакупки) Экспорт
	
	СтавкаНДС = Неопределено;
	
	ЭлектронноеАктированиеЕИСПереопределяемый.СтавкаНДСОбъектаЗакупки(
			ОбъектЗакупки.СтавкаНДС, СтавкаНДС);
	
	Если СтавкаНДС = Неопределено Тогда
		Шаблон = НСтр("ru='Неизвестная ставка НДС объекта закупки ""%1"".'");
		ТекстОшибки = СтрШаблон(Шаблон, ОбъектЗакупки.СтавкаНДС);
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	Возврат СтавкаНДС;
	
КонецФункции

// Возвращает организацию по умолчанию.
// 
// Возвращаемое значение:
//  Неопределено - не удалось определить организацию.
//  ОпределяемыеТипы.Организация - организация для автоматической подстановки.
//
Функция ОрганизацияПоУмолчанию() Экспорт
	
	Если Не Метаданные.ОпределяемыеТипы.Организация.Тип.СодержитТип(Тип("Строка")) Тогда
		ПолноеИмя = Метаданные.НайтиПоТипу(Метаданные.ОпределяемыеТипы.Организация.Тип.Типы()[0]).ПолноеИмя();
		ИмяСправочникаОрганизации = "Справочники." + СтрРазделить(ПолноеИмя, ".")[1];
		МодульОрганизации = ОбщегоНазначения.ОбщийМодуль(ИмяСправочникаОрганизации);
		ОрганизацияПоУмолчанию = МодульОрганизации.ОрганизацияПоУмолчанию();
	Иначе
		ОрганизацияПоУмолчанию = Неопределено;
	КонецЕсли;
	
	Возврат ОрганизацияПоУмолчанию;
	
КонецФункции

// Поддерживаемые версии схем.
// 
// Возвращаемое значение:
//  Массив - Поддерживаемые версии схем
Функция ПоддерживаемыеВерсииСхем() Экспорт
	
	Версии = Новый Массив;
	Версии.Добавить("12.0");
	
	Возврат Версии;
	
КонецФункции

// Пользовательская версия схем электронного актирования ЕИС.
// 
// Возвращаемое значение:
//  Строка - Пользовательская версия схем электронного актирования ЕИС
Функция ПользовательскаяВерсияСхемЭлектронногоАктированияЕИС() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ВерсияИзКонстанты = Константы.ВерсияСхемЭлектронногоАктированияЕИС.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВерсияИзКонстанты;
	
КонецФункции

// Установить пользовательскую версию схем электронного актирования ЕИС.
// 
// Параметры:
//  НоваяВерсия - Строка - новая версия
Процедура УстановитьПользовательскуюВерсиюСхемЭлектронногоАктированияЕИС(НоваяВерсия) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Константы.ВерсияСхемЭлектронногоАктированияЕИС.Установить(НоваяВерсия);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Версия схем ЕИС.
// 
// Возвращаемое значение:
//  Строка - версия схем ЕИС
Функция ВерсияСхемЕИС() Экспорт

	ПоддерживаемыеВерсии = ПоддерживаемыеВерсииСхем();
	ВерсияПоУмолчанию = ПоддерживаемыеВерсии[ПоддерживаемыеВерсии.Количество() - 1];

	УстановитьПривилегированныйРежим(Истина);
	ВерсияИзКонстанты = ПользовательскаяВерсияСхемЭлектронногоАктированияЕИС();
	Если ПоддерживаемыеВерсии.Найти(ВерсияИзКонстанты) = Неопределено Тогда
		УстановитьПользовательскуюВерсиюСхемЭлектронногоАктированияЕИС("");
		ВерсияИзКонстанты = "";
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(ВерсияИзКонстанты)
		И ПоддерживаемыеВерсии.Количество() > 1 Тогда
		Версия = ВерсияИзКонстанты;
	Иначе
		Версия = ВерсияПоУмолчанию;
	КонецЕсли;
	
	Возврат Версия;
	
КонецФункции

// Сохранить данные контракта.
// 
// Параметры:
//  СсылкаНаКонтракт - ОпределяемыйТип.ГосударственныеКонтрактыБЭД - ссылка на контракт.
//  ДвоичныеДанныеКонтрактаИлиАдрес - ДвоичныеДанные, Строка - двоичные данные контракта или адрес.
Процедура СохранитьДанныеКонтракта(СсылкаНаКонтракт, ДвоичныеДанныеКонтрактаИлиАдрес) Экспорт
	
	ПрисоединенныйФайл = НайтиПрисоединенныйФайлКонтракта(СсылкаНаКонтракт);
	
	Если ЭтоАдресВременногоХранилища(ДвоичныеДанныеКонтрактаИлиАдрес) Тогда
		АдресДанных = ДвоичныеДанныеКонтрактаИлиАдрес;
	Иначе
		АдресДанных = 
			ПоместитьВоВременноеХранилище(ДвоичныеДанныеКонтрактаИлиАдрес);
	КонецЕсли;
	
	Если ПрисоединенныйФайл <> Неопределено Тогда
		// Обновляем данные контракта.
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", АдресДанных);
		ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста");
		РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ПараметрыФайла);
		Возврат;
	КонецЕсли;
	
	ИмяРасширениеФайла = ЭлектронноеАктированиеЕИС.ИмяРасширениеФайлаКонтрактаПрисоединенныеФайлы();
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыФайла.Автор = Пользователи.АвторизованныйПользователь();
	ПараметрыФайла.ВладелецФайлов = СсылкаНаКонтракт;
	ПараметрыФайла.ИмяБезРасширения = ИмяРасширениеФайла.Имя;
	ПараметрыФайла.РасширениеБезТочки = ИмяРасширениеФайла.Расширение;
	
	РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресДанных);
	
КонецПроцедуры

Функция ДанныеГосударственногоКонтракта(СсылкаНаКонтракт, ВозвратитьКонтрактВВидеСтроки=Ложь) Экспорт
	
	ПрисоединенныйФайл = НайтиПрисоединенныйФайлКонтракта(СсылкаНаКонтракт);
	
	Если ПрисоединенныйФайл = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'В присоединенных файлах не найдены данные контракта.'");
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	РезультатПолучения = ПолучитьДанныеФайлаБСП(ПрисоединенныйФайл);
	ДвоичныеДанныеКонтракта =
		ПолучитьИзВременногоХранилища(РезультатПолучения.СсылкаНаДвоичныеДанныеФайла);
	Если ДвоичныеДанныеКонтракта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КодировкаДанныхКонтракта = "UTF-8";
	Если ВозвратитьКонтрактВВидеСтроки Тогда
		ДанныеКонтракта = ПолучитьСтрокуИзДвоичныхДанных(
			ДвоичныеДанныеКонтракта, КодировкаДанныхКонтракта);
	Иначе
		ДанныеКонтракта = РазобратьФайлКонтракта(ДвоичныеДанныеКонтракта);
	КонецЕсли;
	
	Возврат ДанныеКонтракта;
	
КонецФункции

Функция ДанныеДокументаЭлектронногоАктированияЕИС(Организация, Документ) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтапИсполненияКонтракта");
	Результат.Вставить("ГосударственныйКонтрактЕИС");
	Результат.Вставить("ВидДокументаОбжалованияОтказаОПриемке");
	Результат.Вставить("РеквизитыДокументаОбжалованияОтказаОПриемке");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеДокументовЭлектронногоАктированияЕИС.ЭтапИсполненияКонтракта КАК ЭтапИсполненияКонтракта,
	|	ДанныеДокументовЭлектронногоАктированияЕИС.ГосударственныйКонтрактЕИС КАК ГосударственныйКонтрактЕИС,
	|	ДанныеДокументовЭлектронногоАктированияЕИС.ВидДокументаОбжалованияОтказаОПриемке КАК ВидДокументаОбжалованияОтказаОПриемке,
	|	ДанныеДокументовЭлектронногоАктированияЕИС.РеквизитыДокументаОбжалованияОтказаОПриемке КАК РеквизитыДокументаОбжалованияОтказаОПриемке
	|ИЗ
	|	РегистрСведений.ДанныеДокументовЭлектронногоАктированияЕИС КАК ДанныеДокументовЭлектронногоАктированияЕИС
	|ГДЕ
	|	ДанныеДокументовЭлектронногоАктированияЕИС.Организация = &Организация
	|	И ДанныеДокументовЭлектронногоАктированияЕИС.Документ = &Документ");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьКонтейнерЧерезСерверЕИС(ПараметрыОтправки, КонтекстОперации) Экспорт
	
	Результат= СинхронизацияЭДОСлужебный.НовыйРезультатОтправкиТранспортногоКонтейнера();
	
	ТранспортныйКонтейнер = ПараметрыОтправки.ТранспортныйКонтейнер;
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранспортныйКонтейнер, "Организация");
	
	СодержимоеПакета = ПолучитьСтрокуИзДвоичныхДанных(
		ПараметрыОтправки.ДанныеДляОтправки.ДвоичныеДанные,
		КодировкаТекстаСервисаЕИС());
	
	Если ПустаяСтрока(СодержимоеПакета) Тогда
		// В пакете приложения для УПД закладывается пустая строка.
		Результат.Успех = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ПрефиксКодаЗаказчика = "2ZK-CUS";
	Если СтрНачинаетсяС(ПараметрыОтправки.ТранспортныйКонтейнер.Отправитель, ПрефиксКодаЗаказчика) Тогда
		РезультаОтправки = ОтправитьТранспортныйПакетЗаказчика(Организация, СодержимоеПакета);
	Иначе
		РезультаОтправки = ОтправитьТранспортныйПакетПоставщика(Организация, СодержимоеПакета);
	КонецЕсли;
	
	Если НЕ РезультаОтправки.Выполнено Тогда
		ВызватьИсключение(РезультаОтправки.ОписаниеОшибки);
	Иначе
		Результат.Успех = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИмяФайлаТранспортногоПакета(ИдентификаторПакета) Экспорт
	
	Шаблон = НСтр("ru='ТранспортныйПакетЕИС_%1'");
	Возврат СтрШаблон(Шаблон, ИдентификаторПакета);
	
КонецФункции

Функция ДанныеФайловПрисоединенныхКДокументу(СсылкаНаДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПриложенныеФайлыДляЭлектронногоАктированияЕИС.Документ КАК Документ,
	|	ПриложенныеФайлыДляЭлектронногоАктированияЕИС.ВидВложения КАК ВидВложения,
	|	ПриложенныеФайлыДляЭлектронногоАктированияЕИС.ВидВложения.Наименование КАК НаименованиеВложения,
	|	ПриложенныеФайлыДляЭлектронногоАктированияЕИС.ПрисоединенныйФайл КАК ПрисоединенныйФайл,
	|	ПриложенныеФайлыДляЭлектронногоАктированияЕИС.ВидВложения.Код КАК КодВида
	|ИЗ
	|	РегистрСведений.ПриложенныеФайлыДляЭлектронногоАктированияЕИС КАК ПриложенныеФайлыДляЭлектронногоАктированияЕИС
	|ГДЕ
	|	ПриложенныеФайлыДляЭлектронногоАктированияЕИС.Документ = &Документ";
		
	Запрос.УстановитьПараметр("Документ", СсылкаНаДокумент);
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выборка;
	
КонецФункции

Функция ИдентификаторЛекарственногоПрепаратаДляПриложенияКТитулуПродавца(Номенклатура) Экспорт
	
	Возврат СтрЗаменить(Строка(Номенклатура.УникальныйИдентификатор()), "-", "");
	
КонецФункции

Функция ДопустимыеРасширенияПриложенныхФайлов() Экспорт
	
	ДопустимыеРасширения = Новый Массив;
	ДопустимыеРасширения.Добавить("pdf");
	ДопустимыеРасширения.Добавить("docx");
	ДопустимыеРасширения.Добавить("doc");
	ДопустимыеРасширения.Добавить("rtf");
	ДопустимыеРасширения.Добавить("xls");
	ДопустимыеРасширения.Добавить("xlsx");
	ДопустимыеРасширения.Добавить("jpeg");
	ДопустимыеРасширения.Добавить("jpg");
	ДопустимыеРасширения.Добавить("bmp");
	ДопустимыеРасширения.Добавить("tif");
	ДопустимыеРасширения.Добавить("tiff");
	ДопустимыеРасширения.Добавить("txt");
	ДопустимыеРасширения.Добавить("gif");
	ДопустимыеРасширения.Добавить("csv");
	ДопустимыеРасширения.Добавить("odp");
	ДопустимыеРасширения.Добавить("odf");
	ДопустимыеРасширения.Добавить("ods");
	ДопустимыеРасширения.Добавить("odt");
	ДопустимыеРасширения.Добавить("sxc");
	ДопустимыеРасширения.Добавить("sxw");
	ДопустимыеРасширения.Добавить("zip");
	ДопустимыеРасширения.Добавить("rar");
	
	Возврат ДопустимыеРасширения;
	
КонецФункции

Функция ОпределитьВидТРУДляУПД(ТипОбъектаЗакупки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТипОбъектаЗакупки) Тогда
		ТекстОшибки = НСтр("ru='Не заполнен тип объекта закупки госконтракта.'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
		
	// Определяем вид ТРУ.
	ВидыТРУ = Новый Соответствие;
	ВидыТРУ.Вставить(Перечисления.ТипыОбъектовЗакупкиЕИС.Товар, ВидТРУТовар());
	ВидыТРУ.Вставить(Перечисления.ТипыОбъектовЗакупкиЕИС.Работа, ВидТРУРабота());
	ВидыТРУ.Вставить(Перечисления.ТипыОбъектовЗакупкиЕИС.Услуга, ВидТРУУслуга());
	ВидТРУ = ВидыТРУ[ТипОбъектаЗакупки];
	
	Если НЕ ЗначениеЗаполнено(ВидТРУ) Тогда
		Шаблон = НСтр("ru='Не удалось определить вид ТРУ для приложения ЕИС по типу объекта закупки %1.'");
		ТекстОшибки = СтрШаблон(Шаблон, ТипОбъектаЗакупки); 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	Возврат ВидТРУ;
	
КонецФункции

Функция НовыеСведенияОМестеПоставкиТовара() Экспорт
	
	Результат = Новый Структура;
	// Место поставки.
	// Место, Строка 2000.
	Результат.Вставить("Место", "");
	// Идентификатор места поставки.
	// Контролируется наличие значения среди идентификаторов,
	// указанных в блоках "Сведения о месте поставки товаров"
	// (ФайлУПДПрод/СведМестаПоставки/СведМестоПоставки).
	// Добавлено в схеме версии 11.3.
	// ИдМестаПоставки, Строка 32.
	Результат.Вставить("Идентификатор", "");
	// Информация для участника документооборота.
	// Используется для идентификации заказчика/грузополучателя,
	// информация о котором указывается в основном документе.
	// Контролируется обязательность заполнения при приеме и наличие 
	// в основном документе заказчика/грузополучателя с указанным идентификатором,
	// который задается в атрибуте "Информация для участника документооборота"
	// (Файл/Документ/СвСчФакт/ГрузПолуч/@ИнфДляУчаст
	// или Файл/Документ/СвСчФакт/СвПокуп/@ИнфДляУчаст).
	// Добавлено в схеме версии 11.3.
	// ИнфДляУчаст, Строка 255.
	Результат.Вставить("ИдентификаторУчастника", "");
	// Варианты:
	// 1) КЛАДР - если поставка в РФ.
	// 2) Страна в ОКСМ - если поставка не в РФ. При приеме содержимое контролируется
	// на  присутствие в справочнике "Общероссийский классификатор стран мира (ОКСМ)" (nsiOKSM).
	// 3) Место поставки по ОКТМО.
	// см. МестоПоставкиПоКЛАДР(), МестоПоставкиПоОКТМО(), МестоПоставкиПоОКСМ().
	Результат.Вставить("Классификатор");
	// ПоКЛАДР/КЛАДР/Код, Строка 20.
	// ПоКЛАДР/Страна/Код, Строка 3.
	// ПоОКТМО/Код, Строка 11.
	Результат.Вставить("Код");
	// ПоКЛАДР/КЛАДР/Наим, Строка 200.
	// ПоКЛАДР/Страна/Наим, Строка 255.
	// ПоОКТМО/Наим, Строка 1000.
	Результат.Вставить("Наименование");
	// Адрес по КЛАДР.
	// Заполняется для ПФ адресом в соответствии со справочником КЛАДР.
	// Адрес по ОКТМО.
	// Заполняется для ПФ адресом в соответствии со справочником ОКТМО.
	// ПоКЛАДР/КЛАДР/Адрес, Строка 2000.
	// ПоОКТМО/Адрес, Строка 2000.
	Результат.Вставить("Адрес");
	// КЛАДР/НеКЛАДР/РайонГород, Строка 100.
	Результат.Вставить("РайонИлиГород");
	// Населенный пункт.
	// КЛАДР/НеКЛАДР/НаселенПункт, Строка 100.
	Результат.Вставить("НаселенныйПункт");
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДанныеПриложенияУКДДляЕИС(
		ДеревоДанных, ИдентификаторФайла) Экспорт
		
	Результат = НовыйРезультатФормированияПриложения();
		
	ДанныеПриложения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДанныеЭлектронногоАктированияЕИС.ДанныеПриложения");
	ДанныеБД= ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДанныеЭлектронногоАктированияЕИС.ДанныеБД");
		
	Таблица = ДанныеБД.ДанныеГосконтракта;
	Если Таблица.Количество() = 0 Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не заполнены данные для электронного актирования.'");
		Возврат Результат;
	КонецЕсли;
	ДанныеКонтракта = Таблица[0];
	
	Если НЕ ЗначениеЗаполнено(ДанныеПриложения.ДокументОснование) Тогда
		Результат.ОписаниеОшибки =
			НСтр("ru = 'Не указан документ основание при формировании приложения к УКД для ЕИС.'");
		Возврат Результат;
	КонецЕсли;
	ЗаполнитьИдентификаторИсходногоФайлаПриложения(ДанныеПриложения);
	
	РеестровыйНомерКонтракта = ДанныеКонтракта.Код;
	
	Если НЕ ЗначениеЗаполнено(ДанныеКонтракта.ИдентификаторЭтапаКонтракта) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не заполнен идентификатор этапа контракта.'");
		Возврат Результат;
	КонецЕсли;
	
	// Порядковый номер подписанта (указанный в элементе ИныеСвед), являющегося руководителем организации.
	ДанныеПриложения.ПорядковыйНомерРуководителяОрганизации = 1;
	// Порядковый номер подписанта (указанный в элементе ИныеСвед), у которого установлен признак «Предлагаю изменить стоимость.
	// Заполняется, если не заполнено УведИзмСтоим
	ДанныеПриложения.ПорядковыйНомерПодписантаПредлагающегоИзменитьСтоимостьУведомление = 1;
	
	ДанныеПриложения.СведенияОКонтракте.РеестровыйНомерКонтракта = РеестровыйНомерКонтракта;
	ДанныеПриложения.СведенияОКонтракте.ИдентификаторВерсииКонтракта =
		ДанныеКонтракта.ВнутреннийИдентификаторЕИС;
	ДанныеПриложения.СведенияОКонтракте.ИдентификаторЭтапаКонтракта =
		ДанныеКонтракта.ИдентификаторЭтапаКонтракта;
	ДанныеПриложения.СведенияОКонтракте.ТехническийИдентификаторЭтапаКонтракта =
		ДанныеКонтракта.ТехническийИдентификаторЭтапаКонтракта;
	ДанныеПриложения.СведенияОКонтракте.ИКЗ = ДанныеКонтракта.ИдентификационныйКодЗакупки;
	ДанныеПриложения.СведенияОКонтракте.НомерКонтракта = ДанныеКонтракта.Номер;
	ДанныеПриложения.СведенияОКонтракте.ДатаЗаключенияКонтракта = ДанныеКонтракта.ДатаЗаключенияКонтракта;
	
	ДанныеПриложения.ИдентификаторПриложения = ПрефиксИмениПриложенияЕИС() + ИдентификаторФайла;
	ДанныеПриложения.ИдентификаторФайла = ИдентификаторФайла;
	
	РезультатПроверки = ПроверитьДанныеПриложенияУКДДляЕИС(ДанныеПриложения);
	Если НЕ РезультатПроверки.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	// Заполняем информацию о дополнительном документе.
	ТекстПриложения = ТекстПриложенияКТитулуПродавцаУКД(ДанныеПриложения);
	
	РезультатПроверки = ПроверитьНаСоответствиеСхеме(
		ТекстПриложения, ИмяТипаXDTOПриложениеУКДПродавца());
	Если НЕ ПустаяСтрока(РезультатПроверки) Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка проверки приложения к УКД для ЕИС:'")
			+ Символы.ПС + РезультатПроверки;
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ИмяФайлаПриложения = ДанныеПриложения.ИдентификаторПриложения + ".xml";
	
	ТекстПриложения = УдалитьПространствоИменТранспортногоПакета(ТекстПриложения);
	ЗаписатьОтладочнуюИнформацию(ИмяФайлаПриложения, ТекстПриложения);
	
	Результат.ДвоичныеДанные =
		 ПолучитьДвоичныеДанныеИзСтроки(ТекстПриложения, КодировкаТекстаПриложенияДляЕИС());
	Результат.ИмяФайла = ИмяФайлаПриложения;
	Результат.Выполнено = Истина;
	Возврат Результат;
		
КонецФункции

Функция СформироватьДанныеПриложенияУПДДляЕИС(
		ДеревоДанных, ИдентификаторФайла) Экспорт

	Результат = НовыйРезультатФормированияПриложения();
	
	ДанныеПриложения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДанныеЭлектронногоАктированияЕИС.ДанныеПриложения");
	ДанныеБД= ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДанныеЭлектронногоАктированияЕИС.ДанныеБД");
	
	Если ДанныеБД.ДанныеГосконтракта[0].ЕстьПриобретениеЖилыхПомещений Тогда
		ДанныеПриложения.СведенияОТоварах.ОтраслеваяСпециализация = ОтраслеваяСпециализацияПриобретениеЖилыхПомещений();
	КонецЕсли;
		
	Таблица = ДанныеБД.ДанныеГосконтракта;
	Если Таблица.Количество() = 0 Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не заполнены данные для электронного актирования.'");
		Возврат Результат;
	КонецЕсли;
	ДанныеКонтракта = Таблица[0];
	
	Если НЕ ЗначениеЗаполнено(ДанныеКонтракта.ИдентификаторЭтапаКонтракта) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не заполнен идентификатор этапа контракта.'");
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьИдентификаторИсходногоФайлаПриложения(ДанныеПриложения);
	
	Если ДанныеПриложения.СведенияОбОбжалованииОтказаОПриемке <> Неопределено Тогда
		ДанныеПриложения.СведенияОбОбжалованииОтказаОПриемке.ИдентификаторДокументаЯвляющегосяПредметомОбжалования =
			ДанныеПриложения.ИдентификаторИсходногоФайла;
	КонецЕсли;
	
	РеестровыйНомерКонтракта = ДанныеКонтракта.Код;
	
	ДанныеПриложения.ИдентификаторПриложения = ПрефиксИмениПриложенияЕИС() + ИдентификаторФайла;
	ДанныеПриложения.ИдентификаторФайла = ИдентификаторФайла;
	
	ДанныеПриложения.СведенияОКонтракте.РеестровыйНомерКонтракта = РеестровыйНомерКонтракта;
	ДанныеПриложения.СведенияОКонтракте.ИдентификаторВерсииКонтракта =
		ДанныеКонтракта.ВнутреннийИдентификаторЕИС;
	ДанныеПриложения.СведенияОКонтракте.ИдентификаторЭтапаКонтракта = ДанныеКонтракта.ИдентификаторЭтапаКонтракта;
	ДанныеПриложения.СведенияОКонтракте.ТехническийИдентификаторЭтапаКонтракта =
		ДанныеКонтракта.ТехническийИдентификаторЭтапаКонтракта;
	ДанныеПриложения.СведенияОКонтракте.ИКЗ = ДанныеКонтракта.ИдентификационныйКодЗакупки;
	
	Если ДанныеПриложения.СведенияОбОбжалованииОтказаОПриемке <> Неопределено Тогда
		ЗначениеВидаДокумента = ЗначениеВидаДокументаОбжалованияОтказаОПриемкеДляПриложения(
			ДанныеПриложения.СведенияОбОбжалованииОтказаОПриемке.ВидДокументаОбжалованияОтказаОПриемке);
		ДанныеПриложения.СведенияОбОбжалованииОтказаОПриемке.ВидДокументаОбжалованияОтказаОПриемке =
			ЗначениеВидаДокумента;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьДанныеПриложенияУПДДляЕИС(ДанныеПриложения);
	Если НЕ РезультатПроверки.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	// Заполняем информацию о дополнительном документе.
	ТекстПриложения = ТекстПриложенияКТитулуПродавцаУПД(ДанныеПриложения);
	
	РезультатПроверки = ПроверитьНаСоответствиеСхеме(
		ТекстПриложения, ИмяТипаXDTOПриложениеУПДПродавца());
	Если НЕ ПустаяСтрока(РезультатПроверки) Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка проверки приложения к УПД для ЕИС:'")
			+ Символы.ПС + РезультатПроверки;
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ИмяФайлаПриложения = ДанныеПриложения.ИдентификаторПриложения + ".xml";
	ЗаписатьОтладочнуюИнформацию(ИмяФайлаПриложения, ТекстПриложения);
	
	ТекстПриложения = УдалитьПространствоИменТранспортногоПакета(ТекстПриложения);
	
	Результат.ДвоичныеДанные =
		 ПолучитьДвоичныеДанныеИзСтроки(ТекстПриложения, КодировкаТекстаПриложенияДляЕИС());
	Результат.ИмяФайла = ИмяФайлаПриложения;
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции


#Область ОтправкаТранспортныхПакетов

Функция НовыйРезультатОтправкиТранспортногоПакета()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("РезультатОтправки", Неопределено);
	
	Возврат Результат;
		
КонецФункции

Функция ОтправитьТранспортныйПакет(Организация, ДанныеДляОтправкиИлиСтрока, Настройки, КлючСервера) Экспорт

	// При приеме в ЕИС информации в рамках интеграционных взаимодействий в части электронного актирования,
	// а также при загрузке в личном кабинете пользователя организации файлов
	// установленных форматов действуют следующие ограничения:
	// Максимальный размер загружаемого файла в личном кабинете пользователя организации - 10 мегабайт.
	
	Результат = НовыйРезультатОтправкиТранспортногоПакета();
	
	Попытка
		Если ТипЗнч(ДанныеДляОтправкиИлиСтрока) = Тип("Строка") Тогда
			ТекстЗапроса = ДанныеДляОтправкиИлиСтрока;
		Иначе
			ТекстЗапроса = ТекстЗапросаОтправкиТранспортногоПакета(ДанныеДляОтправкиИлиСтрока);
			РезультатПроверки = ПроверитьНаСоответствиеСхеме(ТекстЗапроса,
				ИмяТипаXDTOТранспортныйПакет(), "ФайлПакет");
			Если НЕ ПустаяСтрока(РезультатПроверки) Тогда
				Результат.ОписаниеОшибки = РезультатПроверки;
				Возврат Результат;
			КонецЕсли;
			ТекстЗапроса = УдалитьПространствоИменТранспортногоПакета(ТекстЗапроса, Истина);
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВариантСобытия = НСтр("ru = 'Отправка контейнера'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписатьСобытиеВЖурнал(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ВариантСобытия);
		Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Возврат Результат;
	КонецПопытки;
	
	ЗаписатьОтладочнуюИнформацию("ТранспортныйПакет.xml", ТекстЗапроса);
	
	РезультатОтправкиЗапроса = ОтправитьЗапросСервисуЕИС(Настройки,
		КлючСервера,
		"reciveFile",
		ТекстЗапроса);
		
	Если НЕ РезультатОтправкиЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатОтправкиЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Ответ = ПолучитьИзВременногоХранилища(РезультатОтправкиЗапроса.АдресОтветаSOAP);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Ответ);
	
	Результат.РезультатОтправки = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Результат.Выполнено = Истина;
	
	Возврат Результат;

КонецФункции

Функция ОтправитьТранспортныйПакетПоставщика(Организация, ДанныеДляОтправкиИлиСтрока) Экспорт
	
	Результат = НовыйРезультатОтправкиТранспортногоПакета();
	
	Настройки = НастройкиОбменаЕИС(Организация);
	Если Настройки = Неопределено Тогда
		Шаблон = НСтр("ru='Не определены настройки обмена с ЕИС для организации %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(Шаблон, Организация);
		ВариантСобытия = НСтр("ru = 'Отправка контейнера'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки, ВариантСобытия);
		Возврат Результат;
	КонецЕсли;
	
	Результат = ОтправитьТранспортныйПакет(Организация,
		ДанныеДляОтправкиИлиСтрока, Настройки, КлючСервераЗагрузкиДляПоставщика());
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьТранспортныйПакетЗаказчика(Организация, ДанныеДляОтправкиИлиСтрока) Экспорт
	
	Результат = НовыйРезультатОтправкиТранспортногоПакета();
	
	Настройки = НастройкиОбменаЕИСЗаказчика(Организация);
	Если Настройки = Неопределено Тогда
		Шаблон = НСтр("ru='Не определены настройки обмена с ЕИС для организации %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(Шаблон, Организация);
		ВариантСобытия = НСтр("ru = 'Отправка контейнера'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки, ВариантСобытия);
		Возврат Результат;
	КонецЕсли;
	
	Результат = ОтправитьТранспортныйПакет(Организация,
		ДанныеДляОтправкиИлиСтрока, Настройки, КлючСервераЗагрузкиДляЗаказчика());
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОВложенииТранспортногоПакета() Экспорт
	
	Результат = Новый Структура;
	// Уникальный идентификатор контента прикрепленного документа в ЕИС.
	// КонтентИд, Строка 32.
	Результат.Вставить("ИдентификаторКонтента");
	// Внешний уникальный идентификатор контента прикрепленного документа.
	// ВнешКонтентИд, Строка 40.
	Результат.Вставить("ВнешнийИдентификаторКонтента");
	// Имя файла.
	// ИмяФайл, Строка 1024.
	Результат.Вставить("ИмяФайла", "");
	// Размер файла.
	// РазмерФайл, Число 20.
	Результат.Вставить("РазмерФайла");
	// Вид вложения.
	
	// ВидВложенияBase64(), ВидВложенияОтносительнаяСсылка(), ВидВложенияСсылка().
	Результат.Вставить("ВидВложения", ВидВложенияBase64());
	
	// Для вложения вида ВидВложенияBase64().
	// Содержимое файла в формате Base64. 
	Результат.Вставить("КонтентBase64", "");
	
	// Для вложения вида ВидВложенияСсылка().
	// Ссылка для скачивания прикрепленного документа.
	// Ссылк, Строка 2048.
	Результат.Вставить("Ссылка");
	
	// Для вложения вида ВидВложенияОтносительнаяСсылка().
	// Уникальный идентификатор контента прикрепленного документа в ЕИС в относительной ссылки.
	// ОтносСсылка/КонтентИд, ГУИД, Строка 32.
	Результат.Вставить("ИдентификаторКонтентаОтносительнойСсылки");
	// Тип файлового хранилища.
	// ОтносСсылка/ТипФХ, Строка.
	Результат.Вставить("ТипФайлогоХранилищаОтносительнойСсылки");
	Возврат Результат;
	
КонецФункции

Функция НовыеДанныеТранспортногоПакета() Экспорт
	
	Результат = Новый Структура;
	// Идентификатор транспортного пакета, ГУИД 36.
	Результат.Вставить("ИдентификаторПакета", "");
	// Код системы отправителя, Строка 5.
	Результат.Вставить("КодСистемыОтправителя");
	// Код системы получателя, Строка 5.
	Результат.Вставить("КодСистемыПолучателя");
	// Идентификатор объекта, ГУИД 36
	Результат.Вставить("ИдентификаторОбъекта");
	// Внешний идентификатор документа, Строка 40.
	Результат.Вставить("ВнешнийИдентификатор");
	// Идентификатор файла, к которому сформировано приложение, Строка 255.
	Результат.Вставить("ИдентификаторФайла", "");
	// Идентификатор приложения к документу, Строка 255.
	// Заполняется идентификатором бизнес-документа, к которому сформировано приложение,
	// с добавлением префикса «PRIL_».
	Результат.Вставить("ИдентификаторПриложения", "");
	// Дата-время формирования транспортного пакета, Дата+Время.
	Результат.Вставить("ДатаФормирования", Дата(1, 1, 1));
	// Тип приложенного документа:
	// УПДПрод - УПД (титул продавца);
	// УКДПрод - УКД (титул продавца);
	// УПДПок - УПД (титул покупателя);
	// УКДПок - УКД (титул покупателя);
	// УвУточ - Уведомлние об уточнении;
	// ИзвУч - Извещение о принятии к учёту;
	// ПодтвОтпр - Подтверждение даты отправки документа;
	// ПодтвПолуч - Подтверждение даты получения документа;
	// ИзвПол - Извещение о получении электронного документа;
	// ПрОтз - Запрос об отзыве электронного документа;
	// УвОбж - Уведомление о намерении обжаловать мотивированный отказ
	// См. ТипыПриложенногоДокументаТранспотногоПакета()
	Результат.Вставить("ТипПриложенногоДокумента", "");
	// Версия формата, Строка 5.
	// 1.00, 1.01, 1.02, 1.03, 1.04
	Результат.Вставить("ВерсияФормата", ВерсияФормата());
	// Идентификатор участника документооборота, - отправителя файла обмена, Строка 4-46.
	Результат.Вставить("ИдентификаторОтправителя", "");
	// Идентификатор участника документооборота, получателя файла обмена, Строка 4-46.
	Результат.Вставить("ИдентификаторПолучателя", "");
	// Контент документа в формате Base64.
	Результат.Вставить("КонтентДокументаBase64", "");
	// Подписи документа.
	// Игнорируется при приеме из внешней системы.
	Результат.Вставить("ПодписиДокумента", Новый Массив);
	// Вложения. См. ДанныеВложенияТранспортногоПакета().
	Результат.Вставить("Вложения", Новый Массив);
	// Содержимое приложения к документу в формате Base64.
	Результат.Вставить("ПриложениеBase64");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ПолучитьДанныеФайлаБСП(Знач ПрисоединенныйФайл,
			Знач ИдентификаторФормы = Неопределено,
			Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл,
		ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
	Возврат ДанныеФайла;
	
КонецФункции

// Управляет объектную блокировку.
// Вызывает исключение, если объект уже заблокирован.
//
// Параметры:
//  Объект   - любой объект ссылочного типа информационной базы.
//  Включить - Булево - определяет, будет ли включена объектная блокировка.
//
Процедура ЗаблокироватьОбъект(Объект) Экспорт
	
	Попытка
		Объект.Заблокировать();
	Исключение
		
		Текст = НСтр("ru = 'Не удалось заблокировать данные объекта ""%1"".
			|Возможно, объект редактируется другим пользователем.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Объект.Ссылка);
		ВызватьИсключение Текст;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область API_Поставщика

Функция СведенияОКонтрактеПоставщика(Организация, НомерКонтракта) Экспорт
	
	Результат = РезультатПолученияСпискаКонтрактовПоставщика();
	Если НЕ ЗначениеЗаполнено(НомерКонтракта) Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Не указан регистрационный номер контракта поставщика.'");
		Возврат Результат;
	КонецЕсли;
	
	Возврат СписокКонтрактовПоставщика(Организация, , , , , НомерКонтракта);
	
КонецФункции

Функция СведенияОКонтрактахПоставщика(Организация,
		СДаты,
		ПоДату,
		ИННЗаказчика = "",
		КППЗаказчика = "") Экспорт
	
	Возврат СписокКонтрактовПоставщика(Организация, СДаты, ПоДату, ИННЗаказчика, КППЗаказчика);
	
КонецФункции

// Возвращает структуру НовыеСведенияОПоставщикеИЕгоПодписантах().
Функция СведенияОПоставщикеИЕгоПодписантах(Организация, Настройки = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("СведенияОПоставщике", НовыеСведенияОПоставщикеИЕгоПодписантах());
	
	Если НЕ ЗначениеЗаполнено(Настройки) Тогда
		Настройки = НастройкиОбменаЕИС(Организация);
		Если Настройки = Неопределено Тогда
			Шаблон = НСтр("ru='Не определены настройки обмена с ЕИС для организации %1.'");
			Результат.ОписаниеОшибки = СтрШаблон(Шаблон, Организация);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	РегистрационныйНомерЕРУЗ = Настройки.РегистрационныйНомерЕРУЗ;
	
	Если ПустаяСтрока(Настройки.РегистрационныйНомерЕРУЗ) Тогда
		Шаблон = НСтр("ru='Не указан регистрационный номер ЕРУЗ для организации %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(Шаблон, Организация);
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		ТекстЗапроса = ТекстЗапросаПолученияИнформацииОПоставщике(РегистрационныйНомерЕРУЗ);
	Исключение
		Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ОтправитьЗапросСервисуЕИС(Настройки,
		КлючСервераИнформацииДляПоставщика(),
		"lkp-get-participant-info",
		ТекстЗапроса);
		
	Если НЕ РезультатОтправкиЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатОтправкиЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Ответ = ПолучитьИзВременногоХранилища(РезультатОтправкиЗапроса.АдресОтветаSOAP);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Ответ);
	
	Данные = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Результат.СведенияОПоставщике =
		РазобратьСведенияОПоставщикеИЕгоПодписантах(Данные);
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

// Список объектов поставщика по датам и сведениям о заказчике.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация поставщика.
//  ДатаНачала - Дата - Дата начала
//  ДатаОкончания - Дата - Дата окончания
//  ВидыДокументов - Массив, Неопределено - Виды документов
//  ИНН - Строка - ИНН заказчика.
//  КПП - Строка - КПП заказчика.
// 
// Возвращаемое значение:
//  Структура - Список объектов поставщика по датам и сведениям о заказчике:
// * Выполнено - Булево - Истина, если выполнено без ошибок.
// * ОписаниеОшибки - Строка - описание ошибки.
// * АдресОтвета - Строка - адрес ответа.
// * АдресЗапроса - Строка - адрес запроса.
// * СписокОбъектов - Массив - массив данных объектов.
Функция СписокОбъектовПоставщикаПоДатамИСведениямОЗаказчике(Организация,
		ДатаНачала,
		ДатаОкончания,
		ВидыДокументов = Неопределено,
		ИНН = "",
		КПП = "") Экспорт
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияСпискаОбъектов(Ложь);
	ПараметрыЗапроса.ДатаНачала = ДатаНачала;
	ПараметрыЗапроса.ДатаОкончания = ДатаОкончания;
	ПараметрыЗапроса.ИНН = ИНН;
	ПараметрыЗапроса.КПП = КПП;
	
	Если ЗначениеЗаполнено(ВидыДокументов) Тогда
		ПараметрыЗапроса.ВидыДокументов = ВидыДокументов;
	КонецЕсли;
	
	Настройки = НастройкиОбменаЕИС(Организация);
	
	Возврат СписокОбъектов(Организация, ПараметрыЗапроса, Настройки);
	
КонецФункции

Функция СписокОбъектовПоставщикаПоВнешнемуИДДокумента(Организация,
		ВнешнийИдентификатор,
		ВидыДокументов = Неопределено) Экспорт
		
	Если НЕ ЗначениеЗаполнено(ВнешнийИдентификатор) Тогда
		Результат = РезультатСпискаОбъектов();
		Результат.ОписаниеОшибки = НСтр("ru='Не задан внешний идентификатор документа.'");
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияСпискаОбъектов(Ложь);
	ПараметрыЗапроса.ВнешнийИдентификатор = ВнешнийИдентификатор;
	
	Если ЗначениеЗаполнено(ВидыДокументов) Тогда
		ПараметрыЗапроса.ВидыДокументов = ВидыДокументов;
	КонецЕсли;
	
	Настройки = НастройкиОбменаЕИС(Организация);
	
	Возврат СписокОбъектов(Организация, ПараметрыЗапроса, Настройки);
	
КонецФункции

Функция СписокОбъектовПоставщикаПоИДОбъектаЕИС(Организация,
		ИдентификаторЕИС,
		ВидыДокументов = Неопределено) Экспорт
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияСпискаОбъектов(Ложь);
	ПараметрыЗапроса.ИдентификаторОбъектаЕИС = ИдентификаторЕИС;
	
	Если ЗначениеЗаполнено(ВидыДокументов) Тогда
		ПараметрыЗапроса.ВидыДокументов = ВидыДокументов;
	КонецЕсли;
	
	Настройки = НастройкиОбменаЕИС(Организация);
	
	Возврат СписокОбъектов(Организация, ПараметрыЗапроса, Настройки);
	
КонецФункции

Функция СписокОбъектовПоставщикаПоНомеруКонтракта(Организация,
		НомерКонтракта,
		ВидыДокументов = Неопределено) Экспорт
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияСпискаОбъектов(Ложь);
	ПараметрыЗапроса.НомерКонтракта = НомерКонтракта;
	
	Если ЗначениеЗаполнено(ВидыДокументов) Тогда
		ПараметрыЗапроса.ВидыДокументов = ВидыДокументов;
	КонецЕсли;
	
	Настройки = НастройкиОбменаЕИС(Организация);
	
	Возврат СписокОбъектов(Организация, ПараметрыЗапроса, Настройки);
	
КонецФункции

Функция СведенияОбОбъектеПоставщика(Организация,
		ИдентификаторДокумента,
		ВидДокумента) Экспорт
		
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ДанныеОбъекта", Неопределено);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
		Результат = РезультатСпискаОбъектов();
		Результат.ОписаниеОшибки = НСтр("ru='Не задан идентификатор документа.'");
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидДокумента) Тогда
		Результат = РезультатСпискаОбъектов();
		Результат.ОписаниеОшибки = НСтр("ru='Не задан вид документа.'");
		Возврат Результат;
	КонецЕсли;
	
	Настройки = НастройкиОбменаЕИС(Организация);
	Если Настройки = Неопределено Тогда
		Шаблон = НСтр("ru='Не определены настройки обмена с ЕИС для организации %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(Шаблон, Организация);
		Возврат Результат;
	КонецЕсли;
	
	РегистрационныйНомерЕРУЗ = Настройки.РегистрационныйНомерЕРУЗ;
	
	Попытка
		ТекстЗапроса = ТекстЗапросаПолученияОбъектаПоставщика(РегистрационныйНомерЕРУЗ,
			ИдентификаторДокумента,
			ВидДокумента);
	Исключение
		Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ОтправитьЗапросСервисуЕИС(Настройки,
		КлючСервераИнформацииДляПоставщика(),
		"lkp-get-object-info",
		ТекстЗапроса);
		
	Если НЕ РезультатОтправкиЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатОтправкиЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Ответ = ПолучитьИзВременногоХранилища(РезультатОтправкиЗапроса.АдресОтветаSOAP);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Ответ);
	ДанныеОтвета = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	Результат.ДанныеОбъекта = РазобратьДанныеОбъекта(ДанныеОтвета);
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область API_Заказчика

Функция ПараметрыОрганизации(Знач КодСПЗ = "") Экспорт
	
	// Отображение типа ЕИС zfcs_organizationRef.
	Результат = Новый Структура;
	
	// Код по СПЗ.  В случае если организация идентифицируется по коду СвР,
	// а код СПЗ неизвестен, необходимо заполнить данное поле значением 00000000000,
	// и обязательно указать код СвР
	Если НЕ ЗначениеЗаполнено(КодСПЗ) Тогда
		КодСПЗ = ПустойКодСПЗ();
	КонецЕсли;
	Результат.Вставить("КодПоСПЗ", КодСПЗ);
	
	// Код по Сводному Реестру. Должен быть заполнен в случае,
	// если в поле regNum указано значение 00000000000
	Результат.Вставить("КодПоСводномуРеестру", Неопределено);
	
	// Полное наименование.
	// Игнорируется при приеме. При передаче заполняется значением из справочника "Сводный перечень заказчиков (СПЗ)" (nsiOrganizationList)
	Результат.Вставить("ПолноеНаименование");
	
	Возврат Результат;
	
КонецФункции

Функция СписокОбъектовЗаказчикаПоДатамИСведениямОПоставщике(Организация,
		ДатаНачала,
		ДатаОкончания,
		ВидыДокументов = Неопределено) Экспорт
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияСпискаОбъектов(Истина);
	КодПоСПЗ = КодОрганизацииПоСПЗ(Организация);
	ПараметрыЗапроса.ПараметрыЗаказчика = ПараметрыОрганизации(КодПоСПЗ);
	ПараметрыЗапроса.ПараметрыОтправителя = ПараметрыОрганизации(КодПоСПЗ);
	ПараметрыЗапроса.ДатаНачала = ДатаНачала;
	ПараметрыЗапроса.ДатаОкончания = ДатаОкончания;
	ПараметрыЗапроса.ДляЗаказчика = Истина;
	
	Если ЗначениеЗаполнено(ВидыДокументов) Тогда
		ПараметрыЗапроса.ВидыДокументов = ВидыДокументов;
	КонецЕсли;
	
	Настройки = НастройкиОбменаЕИСЗаказчика(Организация);
	
	Возврат СписокОбъектов(Организация, ПараметрыЗапроса, Настройки);
	
КонецФункции

Функция СписокОбъектовЗаказчикаПоВнешнемуИДДокумента(Организация,
		ДанныеПоставщика,
		ВнешнийИдентификатор,
		ВидыДокументов = Неопределено) Экспорт
		
	Если НЕ ЗначениеЗаполнено(ВнешнийИдентификатор) Тогда
		Результат = РезультатСпискаОбъектов();
		Результат.ОписаниеОшибки = НСтр("ru='Не задан внешний идентификатор документа.'");
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияСпискаОбъектов(Истина);
	КодПоСПЗ = КодОрганизацииПоСПЗ(Организация);
	ПараметрыЗапроса.ПараметрыЗаказчика = ПараметрыОрганизации(КодПоСПЗ);
	ПараметрыЗапроса.ПараметрыОтправителя = ДанныеПоставщика;
	ПараметрыЗапроса.ВнешнийИдентификатор = ВнешнийИдентификатор;
	ПараметрыЗапроса.ДляЗаказчика = Истина;
	
	Если ЗначениеЗаполнено(ВидыДокументов) Тогда
		ПараметрыЗапроса.ВидыДокументов = ВидыДокументов;
	КонецЕсли;
	
	Настройки = НастройкиОбменаЕИСЗаказчика(Организация);
	
	Возврат СписокОбъектов(Организация, ПараметрыЗапроса, Настройки);
	
КонецФункции

Функция СписокОбъектовЗаказчикаПоИДОбъектаЕИС(Организация,
		ДанныеПоставщика,
		ИдентификаторЕИС,
		ВидыДокументов = Неопределено) Экспорт
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияСпискаОбъектов(Истина);
	КодПоСПЗ = КодОрганизацииПоСПЗ(Организация);
	ПараметрыЗапроса.ПараметрыЗаказчика = ПараметрыОрганизации(КодПоСПЗ);
	ПараметрыЗапроса.ПараметрыОтправителя = ДанныеПоставщика;
	ПараметрыЗапроса.ИдентификаторОбъектаЕИС = ИдентификаторЕИС;
	ПараметрыЗапроса.ДляЗаказчика = Истина;
	
	Если ЗначениеЗаполнено(ВидыДокументов) Тогда
		ПараметрыЗапроса.ВидыДокументов = ВидыДокументов;
	КонецЕсли;
	
	Настройки = НастройкиОбменаЕИСЗаказчика(Организация);
	
	Возврат СписокОбъектов(Организация, ПараметрыЗапроса, Настройки);
	
КонецФункции

Функция СписокОбъектовЗаказчикаПоНомеруКонтракта(Организация,
		ДанныеПоставщика,
		НомерКонтракта,
		ВидыДокументов = Неопределено) Экспорт
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияСпискаОбъектов(Истина);
	КодПоСПЗ = КодОрганизацииПоСПЗ(Организация);
	ПараметрыЗапроса.ПараметрыЗаказчика = ПараметрыОрганизации(КодПоСПЗ);
	ПараметрыЗапроса.ПараметрыОтправителя = ДанныеПоставщика;
	ПараметрыЗапроса.НомерКонтракта = НомерКонтракта;
	ПараметрыЗапроса.ДляЗаказчика = Истина;
	
	Если ЗначениеЗаполнено(ВидыДокументов) Тогда
		ПараметрыЗапроса.ВидыДокументов = ВидыДокументов;
	КонецЕсли;
	
	Настройки = НастройкиОбменаЕИС(Организация);
	
	Возврат СписокОбъектов(Организация, ПараметрыЗапроса, Настройки);
	
КонецФункции

Функция СведенияОбОбъектеЗаказчика(Организация,
		ИдентификаторДокумента,
		ВидДокумента) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ДанныеОбъекта", Неопределено);
	
	Настройки = НастройкиОбменаЕИСЗаказчика(Организация);
	Если Настройки = Неопределено Тогда
		Шаблон = НСтр("ru='Не определены настройки обмена с ЕИС для организации заказчика %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(Шаблон, Организация);
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыОтправителя = ПараметрыОрганизации(Настройки.КодПоСПЗ);
	ПараметрыЗаказчика = ПараметрыОрганизации(Настройки.КодПоСПЗ);
	
	Попытка
		ТекстЗапроса = ТекстЗапросаПолученияОбъектаЗаказчика(ИдентификаторДокумента,
			ВидДокумента,
			ПараметрыОтправителя,
			ПараметрыЗаказчика);
	Исключение
		Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ОтправитьЗапросСервисуЕИС(Настройки,
		КлючСервераИнформацииДляЗаказчика(),
		"lkz-get-object-info",
		ТекстЗапроса);
		
	Если НЕ РезультатОтправкиЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатОтправкиЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Ответ = ПолучитьИзВременногоХранилища(РезультатОтправкиЗапроса.АдресОтветаSOAP);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Ответ);
	ДанныеОтвета = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	Результат.ДанныеОбъекта = РазобратьДанныеОбъекта(ДанныеОтвета, Истина);
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

Функция СведенияОПодписантахЗаказчика(Организация, Настройки = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ИнформацияОПодписантах", Неопределено);
	
	Если НЕ ЗначениеЗаполнено(Настройки) Тогда
		Настройки = НастройкиОбменаЕИСЗаказчика(Организация);
		Если Настройки = Неопределено Тогда
			Шаблон = НСтр("ru='Не определены настройки обмена с ЕИС для организации заказчика %1.'");
			Результат.ОписаниеОшибки = СтрШаблон(Шаблон, Организация);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаказчика = ПараметрыОрганизации(Настройки.КодПоСПЗ);
	
	Попытка
		ТекстЗапроса = ТекстЗапросаПолученияСведенийОПодписантахЗаказчика(ПараметрыЗаказчика);
	Исключение
		Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ОтправитьЗапросСервисуЕИС(Настройки,
		КлючСервераИнформацииДляЗаказчика(),
		"lkz-get-signers-info",
		ТекстЗапроса);
		
	Если НЕ РезультатОтправкиЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатОтправкиЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Ответ = ПолучитьИзВременногоХранилища(РезультатОтправкиЗапроса.АдресОтветаSOAP);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Ответ);
	Данные = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	Результат.ИнформацияОПодписантах = РазобратьСведенияОЗаказчикеИЕгоПодписантах(Данные);
	Если ЗначениеЗаполнено(Результат.ИнформацияОПодписантах.ОписаниеОшибки) Тогда
		Результат.ОписаниеОшибки = Результат.ИнформацияОПодписантах.ОписаниеОшибки;
	Иначе
		Результат.Выполнено = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РазобратьСведенияОЗаказчикеИЕгоПодписантах(Данные)
	
	Сведения = НовыеСведенияОЗаказчикеИЕгоПодписантах();
	Если ЕстьСвойство(Данные, "errorInfo") Тогда
		Сведения.КодОшибки = Данные.errorInfo.code;
		Сведения.ОписаниеОшибки = Данные.errorInfo.message;
		Возврат Сведения;
	КонецЕсли;
	
	ДанныеПодписантовОрганизации = Данные.Body.
		lkzGetSignersInfoResponse.organizationSignersInfo;
	ДанныеОрганизации = ДанныеПодписантовОрганизации.organizationInfo;
	Сведения.КодПоСПЗ = ДанныеОрганизации.regNum;
	Сведения.НаименованиеОрганизации = ЭлектронноеАктированиеЕИС.ЗначениеНеобязательногоСвойства(
		ДанныеОрганизации, "fullName");
	
	ТипБулево = Тип("Булево");
	Если ЕстьСвойство(ДанныеПодписантовОрганизации, "signersInfo") Тогда
		ДанныеПодписантов = ДанныеПодписантовОрганизации.signersInfo.signerInfo;
		Для каждого Подписант Из ЗначениеВКоллекцию(ДанныеПодписантов) Цикл
			ДанныеПодписанта = НовыеСведенияОПодписантеЗаказчика();
			ДанныеПодписанта.Фамилия = Подписант.nameInfo.lastName;
			ДанныеПодписанта.Имя = Подписант.nameInfo.firstName;
			ДанныеПодписанта.Отчество = ЗначениеНеобязательногоСвойства(Подписант.nameInfo, "middleName");
			ДанныеПодписанта.ФИО = СтрШаблон("%1 %2 %3", ДанныеПодписанта.Фамилия,
				ДанныеПодписанта.Имя, ДанныеПодписанта.Отчество);
			Если ЕстьСвойство(Подписант.signerType, "legalEntityInfo") Тогда
				ДанныеПодписанта.Должность = Подписант.signerType.legalEntityInfo.position;
			КонецЕсли;
			ДанныеПодписанта.ВключенВПриемнуюКомиссию = XMLЗначение(ТипБулево, Подписант.isComissionMember);
			ДанныеПодписанта.Логин = Подписант.login;
			Сведения.Подписанты.Добавить(ДанныеПодписанта);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

Функция НовыеСведенияОЗаказчикеИЕгоПодписантах()
	
	Результат = Новый Структура;
	
	// errorInfo/code.
	Результат.Вставить("КодОшибки");
	// errorInfo/message.
	Результат.Вставить("ОписаниеОшибки");
	// Код по СПЗ.  В случае если организация идентифицируется по коду СвР,
	// а код СПЗ неизвестен, необходимо заполнить данное поле значением 00000000000,
	// и обязательно указать код СвР.
	// organizationSignersInfo/organizationInfo/regNum, Число(11) .
	Результат.Вставить("КодПоСПЗ");
	// organizationSignersInfo/organizationInfo/fullName, Строка 2000.
	Результат.Вставить("НаименованиеОрганизации");
	// Подписанты.
	// organizationSignersInfo/signersInfo/signerInfo.
	Результат.Вставить("Подписанты", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОПодписантеЗаказчика()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Логин");
	Результат.Вставить("Фамилия");
	Результат.Вставить("Имя");
	Результат.Вставить("Отчество");
	Результат.Вставить("ФИО");
	Результат.Вставить("Должность");
	Результат.Вставить("ВключенВПриемнуюКомиссию");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область API_ОбщиеФункции

Функция РезультатОбработкиТранспортногоПакета(Организация,
		ИдентификаторПакета,
		ДатаФормированияПакета,
		ЭтоПакетЗаказчика = Ложь) Экспорт
		
	Результат = Новый Структура;
	// Возможна ситуация когда будет возвращено Выполнено = Истина, но ОписаниеОшибки будет заполнено.
	// Такая ситуация возникает в случае если были ошибки обработки пакета.
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("РезультатОбработки", Неопределено);
	Результат.Вставить("Ошибки", Неопределено);
	Результат.Вставить("ТекстОшибок", "");
	Результат.Вставить("ТолькоПредупреждения", Истина);
	Результат.Вставить("ДанныеОбрабатываются", Ложь);
	Результат.Вставить("ИдентификаторДокументаВЕИС", "");
	Результат.Вставить("ИдентификаторФайлаДокумента", "");
	Результат.Вставить("ИдентификаторФайлаКвитанции", "");
	Результат.Вставить("ИдентификаторДокументооборота", "");
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Не задан идентификатор транспортного пакета ЕИС.'");
		Возврат Результат;
	КонецЕсли;
	
	Если СтрДлина(ИдентификаторПакета) <> 36 Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Длина идентификатора пакета ЕИС отличается от 36 символов.'");
		Возврат Результат;
	КонецЕсли;
	
	КлючСервера = "";
	Если ЭтоПакетЗаказчика Тогда
		Настройки = НастройкиОбменаЕИСЗаказчика(Организация);
		КлючСервера = КлючСервераЗагрузкиДляЗаказчика();
	Иначе
		Настройки = НастройкиОбменаЕИС(Организация);
		КлючСервера = КлючСервераЗагрузкиДляПоставщика();
	КонецЕсли;
		
	Если Настройки = Неопределено Тогда
		Шаблон = НСтр("ru='Не определены настройки обмена с ЕИС для организации %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(Шаблон, Организация);
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		ТекстЗапроса = ТекстЗапросаПолученияРезультатаОбработкиПакета(ИдентификаторПакета,
			ДатаФормированияПакета);
	Исключение
		Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ОтправитьЗапросСервисуЕИС(Настройки,
		КлючСервера,
		"getProcessingResult",
		ТекстЗапроса);
		
	Если НЕ РезультатОтправкиЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатОтправкиЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
		
	Ответ = ПолучитьИзВременногоХранилища(РезультатОтправкиЗапроса.АдресОтветаSOAP);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Ответ);
	Результат.РезультатОбработки = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	Если НЕ ЕстьСвойство(Результат.РезультатОбработки.Body, "ФайлРезул") Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Неверный формат ответа от сервера ЕИС.'");
		Возврат Результат;
	КонецЕсли;
	
	ДанныеРезультатаОбработки = Результат.РезультатОбработки.Body.ФайлРезул;
	Если ЕстьСвойство(ДанныеРезультатаОбработки, "ИдФайл") Тогда
		Результат.ИдентификаторФайлаКвитанции = ДанныеРезультатаОбработки.ИдФайл;
	КонецЕсли;
	
	ДанныеДокумента = Результат.РезультатОбработки.Body.ФайлРезул.Документ;
	Результат.ДанныеОбрабатываются = ЕстьСвойство(ДанныеДокумента ,"Процесс");
	
	Если НЕ Результат.ДанныеОбрабатываются Тогда
		// Разбираем ошибки.
		РезультатРазбора = ОшибкаСервисаЗагрузкиПакетов(Ответ);
		
		Если РезультатРазбора.ОшибкаВЗапросе Тогда
			Результат.ОписаниеОшибки = РезультатРазбора.ОписаниеОшибки;
			Возврат Результат;
		КонецЕсли;

		Результат.Ошибки = РезультатРазбора.Ошибки;
		Результат.ТолькоПредупреждения = РезультатРазбора.ТолькоПредупреждения;
		Результат.ТекстОшибок = РезультатРазбора.ОписаниеОшибки;
	КонецЕсли;
	
	Если ЕстьСвойство(ДанныеДокумента, "СведФайл") Тогда
		// Разбираем идентификаторы.
		СведенияФайла = ДанныеДокумента.СведФайл;
		Результат.ИдентификаторФайлаДокумента = СведенияФайла.ИдФайл;
	КонецЕсли;

	Если ЕстьСвойство(ДанныеДокумента, "УспешОбр") Тогда
		Если ЕстьСвойство(ДанныеДокумента.УспешОбр, "ИдДокЕИС") Тогда
			Результат.ИдентификаторДокументаВЕИС = ДанныеДокумента.УспешОбр.ИдДокЕИС;
		КонецЕсли;
		Результат.ИдентификаторДокументооборота = ДанныеДокумента.УспешОбр.ИдОбъект;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Есть подсистема актирования для заказчиков.
// 
// Возвращаемое значение:
//  Булево - Истина, если в конфигурации присутствует подсистема для заказчиков.
Функция ЕстьПодсистемаДляЗаказчиков() Экспорт
	
	Возврат ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС.АктированиеДляЗаказчиков");
	
КонецФункции

// Тип приложения УПД продавца.
// 
// Возвращаемое значение:
//  Строка - Тип приложения УПД продавца
Функция ТипПриложенияУПДПродавца() Экспорт
	
	Возврат "УПДПрод";
	
КонецФункции

// Тип приложения УКД продавца.
// 
// Возвращаемое значение:
//  Строка - Тип приложения УКД продавца
Функция ТипПриложенияУКДПродавца() Экспорт
	
	Возврат "УКДПрод";
	
КонецФункции

// Тип приложения УКД покупателя.
// 
// Возвращаемое значение:
//  Строка - Тип приложения УКД покупателя
Функция ТипПриложенияУКДПокупателя() Экспорт
	
	Возврат "УКДПок";
	
КонецФункции

// Тип приложения УПД покупателя.
// 
// Возвращаемое значение:
//  Строка - Тип приложения УПД покупателя
Функция ТипПриложенияУПДПокупателя() Экспорт
	
	Возврат "УПДПок";
	
КонецФункции

// Распаковывать проекты титулов поставщика, не подписанные заказчиком.
// 
// Возвращаемое значение:
//  Булево - Распаковывать проекты титулов поставщика при получении заказчиком
Функция РаспаковыватьПроектыТитуловПоставщикаПриПолученииЗаказчиком() Экспорт
	
	Результат = Ложь;
	ЭлектронноеАктированиеЕИСПереопределяемый.РаспаковыватьПроектыТитуловПоставщикаПриПолученииЗаказчиком(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьДанныеВФайловоеХранилищеЕИС(Организация, КлючСервера, ИмяФайла, Данные) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ОшибкаСоединения", Ложь);
	Результат.Вставить("КодСостояния", 0);
	Результат.Вставить("АдресРесурса", "");
	Результат.Вставить("АдресСервера", "");
	
	Настройки = НастройкиОбменаЕИС(Организация);
	Если Настройки = Неопределено Тогда
		Шаблон = НСтр("ru='Не определены настройки обмена с ЕИС для организации %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(Шаблон, Организация);
		Возврат Результат;
	КонецЕсли;
	
	Если КлючСервера = КлючФайловогоХранилищаДляПоставщика() Тогда
		ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Электронный документооборот с ЕИС. Сервер файлового хранилища поставщика.'");
	ИначеЕсли КлючСервера = КлючФайловогоХранилищаДляЗаказчика() Тогда
		ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Электронный документооборот с ЕИС. Сервер файлового хранилища заказчика.'");
	Иначе
		ВызватьИсключение(НСтр("ru='Неизвестный тип сервера.'"));
	КонецЕсли;
	
	Токен = Настройки.ТокенАвторизации;
	
	НастройкиWS = СерверыОбменаЕИС();
	Если ОбщегоНазначенияКлиентСервер.
			СвойствоСтруктуры(НастройкиWS, "Определения", Неопределено) = Неопределено Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Не определены настройки серверов обмена с ЕИС'");
		Возврат Результат;
	КонецЕсли;
	
	СтрокаURL = НастройкиWS.Определения[КлючСервера];
	
	РезультатРазбора = РазобратьСтрокуАдресаСервера(СтрокаURL);
	АдресСервера = РезультатРазбора.АдресСервера;
	АдресРесурса = РезультатРазбора.АдресРесурса;
	
	ДанныеТокена = ПолучитьДвоичныеДанныеИзСтроки(Токен);
	
	// Получение ссылки для загрузки данных.
	// POST {create-session-uri} HTTP/1.1
	// Authorization: Basic NDgyZGEzMmQtOWI1ZS00MThiLTg2NGMtNzViNjk0ZDUxYzM2
	// Content-Length: 143
	// Content-Type: application/json; charset=UTF-8
	// {"name":"Мой тестовый файл.docx","size":15098192,"digest":"bMcmsuV07MJB49gMKELBFCnso4+Y9dagSgZUUF4mLf0\u003d"}
	// Ответ:
	// HTTP/1.1 200 OK
	// Location: {upload-file-session-uri}
	// Content-Length: 58
	// Content-Type: application/json; charset=UTF-8
	// {"file_content_id":"be9d6f42-2d6d-4ab7-ab68-89b24fd2b922"}
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса + "/new");
	HTTPЗапрос.Заголовки.Вставить("Proxy-Connection", "Keep-Alive");
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Basic " + Base64Строка(ДанныеТокена));
	
	// Формируем тело запроса.
	Хеширование  = Новый ХешированиеДанных(ХешФункция.SHA256);
	Хеширование.Добавить(Данные);
	
	РазмерДанных = Данные.Размер();
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("name", ИмяФайла);
	ПараметрыЗапроса.Вставить("size", РазмерДанных);
	ПараметрыЗапроса.Вставить("digest", Base64Строка(Хеширование.ХешСумма));
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, ПараметрыЗапроса);
	ТелоЗапроса = Запись.Закрыть();
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8);
	
	ОписаниеОшибкиУстановкиСоединения = "";
	Таймаут = 120;
	СоединениеHTTP = УстановитьСоединениеССерверомИнтернета(
		АдресСервера,
		ОписаниеОшибкиУстановкиСоединения,
		Таймаут);
	Если СоединениеHTTP = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось установить соединение с сервером:
								 |%1'");
		ТекстОшибки = СтрШаблон(
			ТекстОшибки,
			ОписаниеОшибкиУстановкиСоединения);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстОшибки);
		Результат.ОписаниеОшибки = ТекстОшибки;
		Результат.ОшибкаСоединения = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ОписаниеОшибкиОтправки = ОписаниеОшибки();
		ТекстОшибки = НСтр("ru = 'Не удалось установить соединение с сервером:
								 |%1'");
		ТекстОшибки = СтрШаблон(
			ТекстОшибки,
			ОписаниеОшибкиОтправки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстОшибки);
		Результат.ОписаниеОшибки = ТекстОшибки;
		Результат.ОшибкаСоединения = Истина;
		Возврат Результат;
	КонецПопытки;
	
	// Отправка данных.
	// POST {upload-file-session-uri} HTTP/1.1
	// Host: zakupki.gov.ru
	// Authorization: Basic NDgyZGEzMmQtOWI1ZS00MThiLTg2NGMtNzViNjk0ZDUxYzM2
	// Content-Length: 512000
	// Content-Type: application/octet-stream
	// Content-Range: bytes 0 - 512000/15098192
	// {bytes from 0 to 512000}
	// Ответ:
	// HTTP/1.1 202 Accepted
	// Content-Length: 0
	// Range: 0-512000
	
	// Размер части от 10 Кб до 1 Мб.
	Шаблон = "bytes %1 - %2/%3";
	ИнтервалБайтов = СтрШаблон(Шаблон, 0, РазмерДанных, РазмерДанных);
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("Proxy-Connection", "Keep-Alive");
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/octet-stream");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Basic " + Base64Строка(ДанныеТокена));
	HTTPЗапрос.Заголовки.Вставить("Content-Range", ИнтервалБайтов);
	
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Данные);
	
	Попытка
		СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ОписаниеОшибкиОтправки = ОписаниеОшибки();
		ТекстОшибки = НСтр("ru = 'Не удалось установить соединение с сервером:
								 |%1'");
		ТекстОшибки = СтрШаблон(
			ТекстОшибки,
			ОписаниеОшибкиОтправки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстОшибки);
		Результат.ОписаниеОшибки = ТекстОшибки;
		Результат.ОшибкаСоединения = Истина;
		Возврат Результат;
	КонецПопытки;
	
	Результат.Выполнено = Истина;
	
	Возврат Результат;
	
КонецФункции

// Способ указания цены точная цена.
// 
// Возвращаемое значение:
//  Строка - Способ указания цены точная цена
Функция СпособУказанияЦеныТочнаяЦена() Экспорт
	
	Возврат "P";
	
КонецФункции

// Способ указания цены ориентировочно.
// 
// Возвращаемое значение:
//  Строка - Способ указания цены ориентировочно
Функция СпособУказанияЦеныОриентировочно() Экспорт
	
	Возврат "OP";
	
КонецФункции

// Способ указания цены максимальная цена.
// 
// Возвращаемое значение:
//  Строка - Способ указания цены максимальная цена
Функция СпособУказанияЦеныМаксимальнаяЦена() Экспорт
	
	Возврат "MP";
	
КонецФункции

// После загрузки контракта из ЕИС.
// 
// Параметры:
//  СсылкаНаКонтракт - ОпределяемыйТип.ГосударственныеКонтрактыБЭД - ссылка на контракт.
Процедура ПослеЗагрузкиКонтрактаИзЕИС(СсылкаНаКонтракт) Экспорт
	
	ЭлектронноеАктированиеЕИСПереопределяемый.ПослеЗагрузкиКонтрактаИзЕИС(СсылкаНаКонтракт);
	
КонецПроцедуры

// Гиперссылка на инструкцию по автоматической настройке рабочего места.
// 
// Возвращаемое значение:
//  Строка - Гиперссылка на инструкцию по автоматической настройке рабочего места
Функция ГиперссылкаНаИнструкциюПоАвтоматическойНастройкеРабочегоМеста() Экспорт
	
	Возврат "https://zakupki.gov.ru/epz/main/public/document/view.html?"
		+ "searchString=&sectionId=1608&strictEqual=false";
		
КонецФункции

// Гиперссылка на инструкцию по ручной настройке рабочего места.
// 
// Возвращаемое значение:
//  Строка - Гиперссылка на инструкцию по ручной настройке рабочего места
Функция ГиперссылкаНаИнструкциюПоРучнойНастройкеРабочегоМеста() Экспорт
	
	Возврат "https://zakupki.gov.ru/epz/main/public/document/view.html?"
			+ "searchString=&sectionId=1607&strictEqual=false";
	
КонецФункции

// Гиперссылка на личный кабинет участника госзакупок.
// 
// Возвращаемое значение:
//  Строка - Гиперссылка на личный кабинет участника госзакупок
Функция ГиперссылкаНаЛичныйКабинетУчастникаГосзакупок() Экспорт
	
	Возврат "https://zakupki.gov.ru/auth/welcome";
	
КонецФункции

// Гиперссылка на личный кабинет заказчика.
// 
// Возвращаемое значение:
//  Строка - Гиперссылка на личный кабинет заказчика
Функция ГиперссылкаНаЛичныйКабинетЗаказчика() Экспорт
	
	Возврат "https://zakupki.gov.ru/sso/pcabinet.jsp";
	
КонецФункции

// Имя расширение файла контракта присоединенные файлы.
// 
// Возвращаемое значение:
//  Структура - Имя расширение файла контракта присоединенные файлы:
// * Имя - Строка - имя файла.
// * Расширение - Строка - расширение файла.
Функция ИмяРасширениеФайлаКонтрактаПрисоединенныеФайлы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Имя", "contract");
	Результат.Вставить("Расширение", "xml");
	
	Возврат Результат;
	
КонецФункции

Функция СтартоваяДатаПолученияКонтрактовПоУмолчанию() Экспорт
	
	Результат = Дата(2021, 4, 1);
	Возврат Результат;
	
КонецФункции

Функция СтартоваяДатаПолученияДокументовПоУмолчанию() Экспорт
	
	Результат = Дата(2021, 4, 1);
	Возврат Результат;
	
КонецФункции

Функция ЕстьСвойство(Данные, Имя) Экспорт
	
	Возврат Данные.Свойства().Получить(Имя) <> Неопределено;
	
КонецФункции

Функция ЗначениеНеобязательногоСвойства(Данные,
		ИмяСвойства,
		ПривестиКТипу = "",
		ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если ЕстьСвойство(Данные, ИмяСвойства) Тогда
		Если НЕ ПустаяСтрока(ПривестиКТипу) Тогда
			Возврат XMLЗначение(Тип(ПривестиКТипу), Данные[ИмяСвойства]);
		Иначе
			Возврат Данные[ИмяСвойства];
		КонецЕсли;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

Функция УстановитьСоединениеССерверомИнтернета(URLСервера, ОписаниеОшибки = "", Таймаут = 60) Экспорт

	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLСервера);
	Схема = ?(ЗначениеЗаполнено(СтруктураURI.Схема), СтруктураURI.Схема, "http");
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(Схема);
	
	Попытка
		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			СтруктураURI.Порт,
			СтруктураURI.Логин,
			СтруктураURI.Пароль, 
			Прокси,
			Таймаут,
			?(НРег(Схема) = "http", Неопределено, ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение()));
	Исключение
		ИнформацияОбОшибке = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооборот с ЕИС. Установление соединения с сервером интернета'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция НаименованиеЭлементаСправочникаГосконтрактов(СсылкаНаКонтракт) Экспорт
	
	Шаблон = НСтр("ru='РК %1 №%2 от %3'");
	ДатаСтрока = Формат(СсылкаНаКонтракт.ДатаЗаключенияКонтракта, "ДФ=dd.MM.yyyy");
	Результат = СтрШаблон(Шаблон, СсылкаНаКонтракт.Код, СсылкаНаКонтракт.Номер, ДатаСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция ПодписантыЕИС(Объект) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Объект);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодписантыДокументовЕИС.Подписант.Фамилия КАК Фамилия,
	|	ПодписантыДокументовЕИС.Подписант.Имя КАК Имя,
	|	ПодписантыДокументовЕИС.Подписант.Отчество КАК Отчество,
	|	ПодписантыДокументовЕИС.Подписант.ИНН КАК ИНН,
	|	ПодписантыДокументовЕИС.Подписант.Должность КАК Должность,
	|	ПодписантыДокументовЕИС.Подписант.СтатусЕИС КАК СтатусЕИС,
	|	ПодписантыДокументовЕИС.Статус КАК Статус,
	|	ПодписантыДокументовЕИС.Подписант.Актуален КАК Актуален,
	|	ПодписантыДокументовЕИС.Подписант.ТипПодписанта КАК ТипПодписанта,
	|	ПодписантыДокументовЕИС.Подписант.ПолноеНаименованиеОрганизации КАК ПолноеНаименованиеОрганизации,
	|	ПодписантыДокументовЕИС.Подписант.ДатаРегистрацииПользователя КАК ДатаРегистрацииПользователя,
	|	ПодписантыДокументовЕИС.Подписант.Организация КАК Организация,
	|	ПодписантыДокументовЕИС.Подписант.Наименование КАК Наименование,
	|	ПодписантыДокументовЕИС.Подписант.Идентификатор КАК Идентификатор,
	|	ПодписантыДокументовЕИС.Подписант КАК ФИО
	|ИЗ
	|	РегистрСведений.ПодписантыДокументовЕИС КАК ПодписантыДокументовЕИС
	|ГДЕ
	|	ПодписантыДокументовЕИС.Документ = &Регистратор";
	
	ТаблицаПодписантов = Запрос.Выполнить().Выгрузить();
	ИменаКолонок = "";
	Для Каждого Колонка Из ТаблицаПодписантов.Колонки Цикл
		ИменаКолонок = ИменаКолонок + "," + Колонка.Имя;
	КонецЦикла;
	
	Для Каждого СтрПодписант Из ТаблицаПодписантов Цикл
		СтруктураПодписанта = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(СтруктураПодписанта, СтрПодписант);
		Результат.Добавить(СтруктураПодписанта);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПодписантыОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодписантыОрганизацийЕИС.Ссылка,
	|	ПодписантыОрганизацийЕИС.ПометкаУдаления,
	|	ПодписантыОрганизацийЕИС.Наименование,
	|	ПодписантыОрганизацийЕИС.ОбластьПолномочий,
	|	ПодписантыОрганизацийЕИС.ОснованиеПолномочий,
	|	ПодписантыОрганизацийЕИС.Фамилия,
	|	ПодписантыОрганизацийЕИС.Имя,
	|	ПодписантыОрганизацийЕИС.Отчество,
	|	ПодписантыОрганизацийЕИС.ИНН,
	|	ПодписантыОрганизацийЕИС.Должность,
	|	ПодписантыОрганизацийЕИС.СтатусЕИС,
	|	ПодписантыОрганизацийЕИС.Организация,
	|	ПодписантыОрганизацийЕИС.Актуален,
	|	ПодписантыОрганизацийЕИС.ТипПодписанта,
	|	ПодписантыОрганизацийЕИС.ПолноеНаименованиеОрганизации,
	|	ПодписантыОрганизацийЕИС.ДатаРегистрацииПользователя,
	|	ПодписантыОрганизацийЕИС.Идентификатор,
	|	ПодписантыОрганизацийЕИС.ЭтоРуководительОрганизации,
	|	ПодписантыОрганизацийЕИС.ПодписаниеУКД,
	|	ПодписантыОрганизацийЕИС.ПодписаниеУПД,
	|	ПодписантыОрганизацийЕИС.ПодписаниеИсправления,
	|	ПодписантыОрганизацийЕИС.ПодписаниеСчетаФактуры,
	|	ПодписантыОрганизацийЕИС.ИнформацияОПолномочиях.(
	|		Ссылка,
	|		НомерСтроки,
	|		КодОбластиПолномочий,
	|		НаименованиеОбластиПолномочий,
	|		ОснованиеПолномочий),
	|	ПодписантыОрганизацийЕИС.Предопределенный,
	|	ПодписантыОрганизацийЕИС.ИмяПредопределенныхДанных,
	|	ПодписантыОрганизацийЕИС.Представление
	|ИЗ
	|	Справочник.ПодписантыОрганизацийЕИС КАК ПодписантыОрганизацийЕИС
	|ГДЕ
	|	ПодписантыОрганизацийЕИС.ПометкаУдаления = ЛОЖЬ
	|	И ПодписантыОрганизацийЕИС.Актуален = ИСТИНА
	|	И ПодписантыОрганизацийЕИС.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция МестаПоставкиДляЕИС(Объект) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Объект);
	Запрос.Текст = "ВЫБРАТЬ
	               |	МестаПоставкиДокументовДляЕИС.Место КАК Место,
	               |	МестаПоставкиДокументовДляЕИС.Классификатор КАК Классификатор,
	               |	МестаПоставкиДокументовДляЕИС.Код КАК Код,
	               |	МестаПоставкиДокументовДляЕИС.Наименование КАК Наименование,
	               |	МестаПоставкиДокументовДляЕИС.Адрес КАК Адрес,
	               |	МестаПоставкиДокументовДляЕИС.РайонИлиГород КАК РайонИлиГород,
	               |	МестаПоставкиДокументовДляЕИС.НаселенныйПункт КАК НаселенныйПункт,
	               |	МестаПоставкиДокументовДляЕИС.ДанныеМеста КАК ДанныеМеста
	               |ИЗ
	               |	РегистрСведений.МестаПоставкиДокументовДляЕИС КАК МестаПоставкиДокументовДляЕИС
	               |ГДЕ
	               |	МестаПоставкиДокументовДляЕИС.Документ = &Регистратор";
	
	ТаблицаМестДоставки = Запрос.Выполнить().Выгрузить();
	ИменаКолонок = "";
	Для Каждого Колонка Из ТаблицаМестДоставки.Колонки Цикл
		ИменаКолонок = ИменаКолонок + "," + Колонка.Имя;	
	КонецЦикла;
	
	Для Каждого СтрМестоДоставки Из ТаблицаМестДоставки Цикл
		СтруктураМестоДоставки = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(СтруктураМестоДоставки, СтрМестоДоставки);
		Результат.Добавить(СтруктураМестоДоставки);	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИмяУзлаДанныхКонтракта() Экспорт
	
	Возврат "contract";
	
КонецФункции

Функция ИмяУзлаДанныхЗакрытогоКонтракта() Экспорт
	
	Возврат "closedContract";
	
КонецФункции

Функция РазобратьФайлКонтракта(ПутьККонтрактуИлиДвоичныеДанныеИлиОбъектXDTO, ИдентификаторУчастникаДокументооборотаЗаказчика = "") Экспорт
	
	Результат = НовыеДанныеКонтракта();
	
	Если ТипЗнч(ПутьККонтрактуИлиДвоичныеДанныеИлиОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		ДанныеКонтракта = ПутьККонтрактуИлиДвоичныеДанныеИлиОбъектXDTO;
	Иначе
		Чтение = Новый ЧтениеXML;
		Если ТипЗнч(ПутьККонтрактуИлиДвоичныеДанныеИлиОбъектXDTO) = Тип("Строка") Тогда
			Чтение.ОткрытьФайл(ПутьККонтрактуИлиДвоичныеДанныеИлиОбъектXDTO);
		Иначе
			СтрокаДанных = ПолучитьСтрокуИзДвоичныхДанных(
				ПутьККонтрактуИлиДвоичныеДанныеИлиОбъектXDTO, "UTF-8");
			Чтение.УстановитьСтроку(СтрокаДанных);
		КонецЕсли;
		ДанныеКонтракта = ФабрикаXDTO.ПрочитатьXML(Чтение);
	КонецЕсли;

	Если ЕстьСвойство(ДанныеКонтракта, ИмяУзлаДанныхКонтракта()) Тогда
		ДанныеКонтракта = ДанныеКонтракта[ИмяУзлаДанныхКонтракта()];
	ИначеЕсли ЕстьСвойство(ДанныеКонтракта, ИмяУзлаДанныхЗакрытогоКонтракта()) Тогда
		ДанныеКонтракта = ДанныеКонтракта[ИмяУзлаДанныхЗакрытогоКонтракта()];
		Результат.ЭтоЗакрытыйКонтракт = Истина;
		Возврат Результат;
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Не обнаружен узел с данными государственного контракта ЕИС.'");
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	Результат.ИдентификаторУчастникаДокументооборотаЗаказчика = ИдентификаторУчастникаДокументооборотаЗаказчика;
	Результат.ВерсияСхемы = ДанныеКонтракта.schemeVersion;
	Результат.Идентификатор = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "id");
	Результат.ВнешнийИдентификатор = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "externalId");
	Результат.ДатаРазмещенияДокумента = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "publishDate", "Дата");
	Результат.Версия = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "versionNumber");
	ОснованиеЗаключения = ДанныеКонтракта.foundation;
	ИмяУзла44ФЗ = "fcsOrder";
	ИмяУзла94ФЗ = "oosOrder";
	Если ЕстьСвойство(ОснованиеЗаключения, ИмяУзла94ФЗ) Тогда
		Результат.НомерЗакона = Закон94ФЗ();
	ИначеЕсли ЕстьСвойство(ОснованиеЗаключения, ИмяУзла44ФЗ) Тогда
		Узел44ФЗ = ОснованиеЗаключения[ИмяУзла44ФЗ];
		Результат.НомерЗакона = Закон44ФЗ();
		// Извлекаем идентификационный код закупки (ИКЗ).
		ИмяУзлаЗакупка = "order";
		ИмяУзлаЗакупкаУОдногоПоставщика = "singleCustomer";
		ИмяУзлаЗакупкаНеРазмещалась = "notOosOrder";
		ИмяУзлаКодаЗакупки = "";
		Если ЕстьСвойство(Узел44ФЗ, ИмяУзлаЗакупка) Тогда
			ИмяУзлаКодаЗакупки = ИмяУзлаЗакупка;
		ИначеЕсли ЕстьСвойство(Узел44ФЗ, ИмяУзлаЗакупкаУОдногоПоставщика) Тогда
			ИмяУзлаКодаЗакупки = ИмяУзлаЗакупкаУОдногоПоставщика;
		ИначеЕсли ЕстьСвойство(Узел44ФЗ, ИмяУзлаЗакупкаНеРазмещалась) Тогда
			ИмяУзлаКодаЗакупки = ИмяУзлаЗакупкаНеРазмещалась;
		КонецЕсли;
		Если НЕ ПустаяСтрока(ИмяУзлаКодаЗакупки) Тогда
			Результат.ИдентификационныйКодЗакупки =
				 ЗначениеНеобязательногоСвойства(Узел44ФЗ[ИмяУзлаКодаЗакупки], "purchaseCode");
		КонецЕсли;
	КонецЕсли;
	Результат.ДатаЗаключенияКонтракта = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "signDate", "Дата");
	Результат.НомерРеестровойЗаписи = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "regNum");
	Результат.НомерКонтракта = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "number");
	Результат.ПредметКонтракта = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "contractSubject");
	Результат.НомерКонтрактаГОЗ = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "defenseContractNumber");
	Результат.ЭтоГОЗ = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "isGOZ", "Булево", Ложь);
	Результат.ИГК = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "IGK");
	
	// Данные аванса по контракту.
	Если ЕстьСвойство(ДанныеКонтракта, "AdvancePaymentSum") Тогда
		ДанныеАванса = ДанныеКонтракта.AdvancePaymentSum;
		Результат.РазмерАвансаВПроцентах = ЗначениеНеобязательногоСвойства(ДанныеАванса, "sumInPercents", "Число");
		Результат.РазмерАванса = ЗначениеНеобязательногоСвойства(ДанныеАванса, "priceValue", "Число");
		Результат.РазмерАвансаВРублях = ЗначениеНеобязательногоСвойства(ДанныеАванса, "priceValueRUR", "Число");
		Если ЗначениеЗаполнено(Результат.РазмерАвансаВПроцентах) Тогда
			Результат.ЕстьАвансовыеПлатежиПоКонтракту = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Этапы контракта.
	Результат.КоличествоЭтаповКонтракта = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "quantityContractStages");
	Результат.ДатаНачалаИсполнения = XMLЗначение(Тип("Дата"), ДанныеКонтракта.executionPeriod.startDate);
	Результат.ДатаОкончанияИсполнения = XMLЗначение(Тип("Дата"), ДанныеКонтракта.executionPeriod.endDate);
	Для каждого ДанныеЭтапа Из ЗначениеВКоллекцию(ДанныеКонтракта.executionPeriod.stages) Цикл
		Этап = НовыйЭтапИсполненияКонтракта();
		Этап.ВнутреннийИдентификаторЕИС = ЗначениеНеобязательногоСвойства(ДанныеЭтапа, "sid", "Число");
		Этап.ВнешнийИдентификатор = ЗначениеНеобязательногоСвойства(ДанныеЭтапа, "externalSid");
		Этап.Идентификатор = ЗначениеНеобязательногоСвойства(ДанныеЭтапа, "guid");
		Этап.ДатаНачала = ЗначениеНеобязательногоСвойства(ДанныеЭтапа, "startDate", "Дата");
		Этап.ДатаОкончания = XMLЗначение(Тип("Дата"), ДанныеЭтапа.endDate);
		Этап.Цена = ЗначениеНеобязательногоСвойства(ДанныеЭтапа, "stagePrice", "Число");
		Этап.ЦенаВРублях = ЗначениеНеобязательногоСвойства(ДанныеЭтапа, "stagePriceRUR", "Число");
		// Процент и размер аванса по этапу контракта. Указание допустимо при заполненом блоке advancePaymentSum.
		Если ЕстьСвойство(ДанныеЭтапа, "stageAdvancePaymentSum") Тогда
			ДанныеАванса = ДанныеЭтапа.stageAdvancePaymentSum;
			Этап.РазмерАвансаВПроцентах = ЗначениеНеобязательногоСвойства(ДанныеАванса, "sumInPercents", "Число");
			Этап.РазмерАванса = ЗначениеНеобязательногоСвойства(ДанныеАванса, "priceValue", "Число");
			Этап.РазмерАвансаВРублях = ЗначениеНеобязательногоСвойства(ДанныеАванса, "priceValueRUR", "Число");
			Если ЗначениеЗаполнено(Результат.РазмерАвансаВПроцентах) Тогда
				Результат.ЕстьАвансовыеПлатежиПоЭтапам = Истина;
			КонецЕсли;
		КонецЕсли;
		Результат.ЭтапыИсполнения.Добавить(Этап);
	КонецЦикла;
	
	// Сведения о заказчике.
	Результат.СведенияОЗаказчике = ИзвлечьСведенияОЗаказчике(ДанныеКонтракта);
	
	// Сведения о поставщиках.
	Результат.СведенияОПоставщиках = ИзвлечьСведенияОПоставщиках(ДанныеКонтракта);
	
	// Сведения об объектах закупки.
	Результат.ОбъектыЗакупки = ИзвлечьСведенияОбОбъектахЗакупки(ДанныеКонтракта);
	Результат.ИнформацияОЦенах = ИзвлечьИнформациюОЦенах(ДанныеКонтракта);
	
	Результат.КонтрактНедействителен =
		ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "isInvalid", "Булево", Ложь);
		
	// Текущее состояние контракта:
	// СостояниКонтрактаAннулирован(), СостояниКонтрактаИсполнение(),
	// СостояниКонтрактаИсполнениеЗавершено(), СостояниКонтрактаИсполнениеПрекращено()
	Результат.ТекущееСостояние = ОпределитьСостояниеКонтракта(ДанныеКонтракта);
	
	// Строительная специфика.
	Если ЕстьСвойство(ДанныеКонтракта, "constructionWorksInfo") Тогда
		ДанныеПоСтроительству = ДанныеКонтракта.constructionWorksInfo;
		Результат.ПредметОтноситсяКРаботамПоСтроительству =
			ЗначениеНеобязательногоСвойства(ДанныеПоСтроительству, "isConstructionWorks");
		Если ЕстьСвойство(ДанныеПоСтроительству, "constructionWorkGroup") Тогда
			ДанныеГруппы = ДанныеПоСтроительству.constructionWorkGroup;
			Результат.КодГруппыРаботПоСтроительству = ЗначениеНеобязательногоСвойства(ДанныеГруппы, "code");
			Результат.НаименованиеГруппыРаботПоСтроительству = ЗначениеНеобязательногоСвойства(ДанныеГруппы, "name");
		КонецЕсли;
	КонецЕсли;
	
	// Банковское или казначейское сопровождение.
	Если ЕстьСвойство(ДанныеКонтракта, "bankSupportContractRequiredInfo") Тогда
		ДанныеСопровождения = ДанныеКонтракта.bankSupportContractRequiredInfo;
		Результат.ТребуетсяБанковскоеСопровождение = 
			ЕстьСвойство(ДанныеСопровождения, "bankSupportContractRequired");
		Результат.ТребуетсяКазначейскоеСопровождение = 
			ЕстьСвойство(ДанныеСопровождения, "treasurySupportContractRequired");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторОбменаКонтрагента(Контрагент) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	КонтрагентыЕИС.ИдентификаторУчастника КАК ИдентификаторУчастника
	                      |ИЗ
	                      |	РегистрСведений.КонтрагентыЕИС КАК КонтрагентыЕИС
	                      |ГДЕ
	                      |	КонтрагентыЕИС.Контрагент = &Контрагент");
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИдентификаторУчастника;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НайтиПакетДокумента(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ЭлектронныеДокументы
	               |ИЗ
	               |	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
	               |ГДЕ
	               |	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование.Ссылка = &Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПакетЭДЭлектронныеДокументы.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ Пакеты
	               |ИЗ
	               |	ЭлектронныеДокументы КАК ЭлектронныеДокументы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	               |		ПО ЭлектронныеДокументы.Ссылка = ПакетЭДЭлектронныеДокументы.ОбъектВладелец
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПакетЭДПрисоединенныеФайлы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Пакеты КАК Пакеты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПакетЭДПрисоединенныеФайлы КАК ПакетЭДПрисоединенныеФайлы
	               |		ПО Пакеты.Ссылка = ПакетЭДПрисоединенныеФайлы.ВладелецФайла";
	
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Если Выборка.Количество() > 0 Тогда
		ТранспортныйПакет = Выборка[0].Ссылка;
	Иначе
		ТранспортныйПакет = Неопределено;
	КонецЕсли;
	
	Возврат ТранспортныйПакет;
	
КонецФункции

Функция НайтиСоздатьКонтрагентаПоСведениямОЗаказчике(ДанныеКонтрагента) Экспорт

	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	ЭлектронноеАктированиеЕИСПереопределяемый.
		НайтиСоздатьКонтрагентаПоСведениямОЗаказчике(ДанныеКонтрагента, Контрагент);
	Возврат Контрагент;
	
КонецФункции

Функция ЕстьМедицинскаяСпециализация() Экспорт
	
	Результат = Ложь;
	ЭлектронноеАктированиеЕИСПереопределяемый.МедицинскаяСпециализацияВключена(Результат);
	Возврат Результат;
	
КонецФункции

Функция ЕстьСтроительнаяСпециализация() Экспорт
	
	Результат = Ложь;
	ЭлектронноеАктированиеЕИСПереопределяемый.СтроительнаяСпециализацияВключена(Результат);
	Возврат Результат;
	
КонецФункции

Процедура НачатьПолучениеПодписантов(Форма) Экспорт 

	СведенияОДлительнойОперации = Форма.СведенияОДлительнойОперации;
	Организация = Форма.Организация;
	
	Если Форма.ТолькоПросмотр Тогда
		// Обновление не требуется.
		Возврат;
	КонецЕсли;
	
	Если СведенияОДлительнойОперации.ДлительнаяОперация <> Неопределено Тогда
		// Не завершено предыдущее фоновое задание, новое не запускаем.
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Форма.УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение           = 0; // Не ждем завершения.
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение списка подписантов с сервера ЕИС в сфере закупок.'");
	
	СведенияОДлительнойОперации.Имя = "ПолучитьСписокПодписантов";
	СведенияОДлительнойОперации.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"ЭлектронноеАктированиеЕИС.ПолучитьПодписантовОрганизации",
		Новый Структура("Организация", Организация),
		ПараметрыВыполнения);

КонецПроцедуры

Процедура ПолучитьПодписантовОрганизации(Параметры, АдресХранилища) Экспорт

	Попытка
		
		Результат = СведенияОПоставщикеИЕгоПодписантах(Параметры.Организация);
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("ЭлектронноеАктированиеЕИС.ПолучитьПодписантовОрганизации",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;

КонецПроцедуры

Функция СохранитьПодписанта(Организация, ДанныеПодписанта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПодписантыОрганизацийЕИС.Ссылка
	|ИЗ
	|	Справочник.ПодписантыОрганизацийЕИС КАК ПодписантыОрганизацийЕИС
	|ГДЕ
	|	ПодписантыОрганизацийЕИС.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", ДанныеПодписанта.Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЭлементСправочника = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		ЭлементСправочника = Справочники.ПодписантыОрганизацийЕИС.СоздатьЭлемент();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭлементСправочника, ДанныеПодписанта);
	ЭлементСправочника.СтатусЕИС = ДанныеПодписанта.Статус;
	ЭлементСправочника.Актуален = ДанныеПодписанта.АктуальностьСвязиСРеестровойЗаписьюЕРУЗ;
	Если ДанныеПодписанта.ТипПодписанта = ТипПодписантаПредставительЮрЛица() Тогда
		ЭлементСправочника.ПолноеНаименованиеОрганизации = ДанныеПодписанта.НаименованиеОрганизации;
	КонецЕсли;
	
	Должности = ДолжностиРуководителя();
	Для Каждого Должность Из Должности Цикл
		Если ВРЕГ(Должность) = ВРЕГ(ЭлементСправочника.Должность) Тогда
			ЭлементСправочника.ЭтоРуководительОрганизации = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементПолномочий Из ДанныеПодписанта.Полномочия Цикл
		НовСтр = ЭлементСправочника.ИнформацияОПолномочиях.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ЭлементПолномочий);
	КонецЦикла;
	ЭлементСправочника.Организация = Организация;
	ЭлементСправочника.Наименование = ЭлементСправочника.Фамилия 
									+ " " + ЭлементСправочника.Имя 
									+ ?(ЗначениеЗаполнено(ЭлементСправочника.Отчество), " " + ЭлементСправочника.Отчество, "");
	ЭлементСправочника.Записать();
	
	Возврат ЭлементСправочника.Ссылка;
	
КонецФункции

// Сохранить подписанта заказчика.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация.
//  ДанныеПодписанта - Структура - данные подписанта, см. НовыеСведенияОПодписантеЗаказчика.
// 
// Возвращаемое значение:
//  СправочникСсылка.ПодписантыОрганизацийЕИС - Сохранить подписанта заказчика.
Функция СохранитьПодписантаЗаказчика(Организация, ДанныеПодписанта) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеПодписанта.Логин) Тогда
		Возврат Справочники.ПодписантыОрганизацийЕИС.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПодписантыОрганизацийЕИС.Ссылка
	|ИЗ
	|	Справочник.ПодписантыОрганизацийЕИС КАК ПодписантыОрганизацийЕИС
	|ГДЕ
	|	ПодписантыОрганизацийЕИС.Логин = &Логин
	|	И ПодписантыОрганизацийЕИС.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Логин", ДанныеПодписанта.Логин);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЭлементСправочника = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		ЭлементСправочника = Справочники.ПодписантыОрганизацийЕИС.СоздатьЭлемент();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭлементСправочника, ДанныеПодписанта);
	ЭлементСправочника.Организация = Организация;
	ЭлементСправочника.ВключенВПриемнуюКомиссию = ДанныеПодписанта.ВключенВПриемнуюКомиссию;
	ЭлементСправочника.Наименование = ЭлементСправочника.Фамилия 
									+ " " + ЭлементСправочника.Имя 
									+ ?(ЗначениеЗаполнено(ЭлементСправочника.Отчество), " " + ЭлементСправочника.Отчество, "");
	ЭлементСправочника.Записать();
	
	Возврат ЭлементСправочника.Ссылка;
	
КонецФункции

Функция КлассификаторОКПД() Экспорт
	
	Возврат "ОКПД";
	
КонецФункции

Функция КлассификаторОКПД2() Экспорт
	
	Возврат "ОКПД2";
	
КонецФункции

Функция КлассификаторКТРУ() Экспорт
	
	Возврат "КТРУ";
	
КонецФункции

Функция КодировкаТекстаСервисаЕИС() Экспорт
	
	Возврат "windows-1251";
	
КонецФункции

Функция ЦветТекстаОбычный() Экспорт
	
	Возврат ЦветаСтиля.ЦветТекстаПоля;
	
КонецФункции

Функция ЦветТекстаКрасный() Экспорт
	
	Возврат ЦветаСтиля.ЦветОтрицательногоЧисла;
	
КонецФункции

Функция ЦветТекстаСерый() Экспорт
	
	Возврат ЦветаСтиля.ЦветТекстаНеважнаяНадписьЭлАктированиеЕИС;
	
КонецФункции

Функция ЦветТекстаГиперссылки() Экспорт
	
	Возврат ЦветаСтиля.ЦветГиперссылкиБЭД;
	
КонецФункции

// Определяет является ли переданный код, кодом по приобритению жилых помещений по классификатору КТРУ и ОКПД2
// 
// Параметры:
//  Код - Строка 
// 
// Возвращаемое значение:
//  Булево - Признак того, что данный код является кодом по приобритению жилых помещений
Функция ЭтоКодТовараПоПриобритениюЖилыхПомещений(Код) Экспорт
	
	// BSLLS:UsingHardcodeNetworkAddress-off
	// Услуги по покупке и продаже жилых зданий и занимаемых ими земельных участков.
	КодУслугПоПродажеЗданий = "68.10.11.000";
	// Здания жилые прочие, не включенные в другие группировки.
	КодЗданияПрочие = "41.20.10.190";
	// BSLLS:UsingHardcodeNetworkAddress-on
	
	Возврат СтрНачинаетсяС(Код, КодУслугПоПродажеЗданий) ИЛИ СтрНачинаетсяС(Код, КодЗданияПрочие);
	
КонецФункции

// Фиксирует событие в журнале регистрации, заполняя часть параметров по-умолчанию.
//
// Параметры:
//  Комментарий  - Строка или ИнформацияОбОшибке - комментарий к событию.
//  ВариантСобытия - Строка - должна быть получена с использованием НСтр("", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
//  Данные       - ссылка на объект, с которым связано событие, или метаданные объекта.
//  Уровень      - УровеньЖурналаРегистрации - если не заполнено, то Ошибка .
//
Процедура ЗаписатьСобытиеВЖурнал(Знач Комментарий = "",
		Знач ВариантСобытия = "",
		Знач Данные = Неопределено,
		Знач Уровень = Неопределено) Экспорт
	
	ИмяСобытия = ЭлектронноеАктированиеЕИСКлиентСервер.СобытиеЖурналаРегистрации(ВариантСобытия);
	
	Если Не ЗначениеЗаполнено(Уровень) Тогда
		Уровень = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("ОбъектМетаданных") Тогда
		ОбъектМетаданных = Данные;
		Данные = Неопределено;
	ИначеЕсли ЗначениеЗаполнено(Данные) Тогда
		ОбъектМетаданных = Данные.Метаданные();
	Иначе
		ОбъектМетаданных = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Комментарий) = Тип("ИнформацияОбОшибке") Тогда
		Комментарий = ПодробноеПредставлениеОшибки(Комментарий);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, ОбъектМетаданных, Данные, Комментарий,
		РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииИнтеграцияСБЭД

Функция ТипыДокументаДляЛичногоКабинетаПоставщика()

	ТипыДляЕИС = Новый Массив;
	
	// Типы поставщиков.
	ТипыДляЕИС.Добавить(Перечисления.ТипыДокументовЭДО.УПД);
	ТипыДляЕИС.Добавить(Перечисления.ТипыДокументовЭДО.УКД);
	ТипыДляЕИС.Добавить(Перечисления.ТипыДокументовЭДО.СчетФактура);
	ТипыДляЕИС.Добавить(Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	ТипыДляЕИС.Добавить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	ТипыДляЕИС.Добавить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
	
	Возврат ТипыДляЕИС;
	
КонецФункции

Функция ТипыДокументаДляЛичногоКабинетаЗаказчика()

	ТипыДляЕИС = Новый Массив;
	
	// Типы поставщиков.
	ТипыДляЕИС.Добавить(Перечисления.ТипыДокументовЭДО.РезультатРассмотренияАктаПриемкиЕИСУПД);
	ТипыДляЕИС.Добавить(Перечисления.ТипыДокументовЭДО.РезультатРассмотренияАктаПриемкиЕИСУКД);
	
	Возврат ТипыДляЕИС;
	
КонецФункции

Функция ТипДокументаОтправляетсяВЕИС(ТипДокумента, ВключаяДокументыПоставщика = Истина, ВключаяДокументыЗаказчика = Истина)
	
	ТипыДляЕИС = Новый Массив;
	
	Если ВключаяДокументыПоставщика Тогда
		ТипыПоставщика = ТипыДокументаДляЛичногоКабинетаПоставщика();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыДляЕИС, ТипыПоставщика);
	КонецЕсли;
	
	Если ВключаяДокументыЗаказчика Тогда
		ТипыЗаказчика = ТипыДокументаДляЛичногоКабинетаЗаказчика();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыДляЕИС, ТипыЗаказчика);
	КонецЕсли;
	
	Возврат НЕ ТипыДляЕИС.Найти(ТипДокумента) = Неопределено;
	
КонецФункции

Функция НастройкиОбменаЕИСПоИдентификаторуОрганизации(ИдентификаторУчастникаДокументооборота)
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменаЕИС.Организация КАК Организация,
	|	НастройкиОбменаЕИС.РегистрационныйНомерЕРУЗ КАК РегистрационныйНомерЕРУЗ,
	|	НастройкиОбменаЕИС.ТокенАвторизации КАК ТокенАвторизации,
	|	НастройкиОбменаЕИС.КодПоСПЗ КАК КодПоСПЗ,
	|	НастройкиОбменаЕИС.ТипОрганизации КАК ТипОрганизации,
	|	НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота КАК ИдентификаторУчастникаДокументооборота,
	|	НастройкиОбменаЕИС.ОбменВключен,
	|	ИСТИНА КАК ИспользоватьУПД,
	|	ИСТИНА КАК ИспользоватьУКД
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕИС КАК НастройкиОбменаЕИС
	|ГДЕ
	|	НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота = &ИдентификаторУчастникаДокументооборота";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр(
		"ИдентификаторУчастникаДокументооборота",
		ИдентификаторУчастникаДокументооборота);
		
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Настройки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат[0]);
	
	Возврат Настройки;
		
КонецФункции

Функция ВерсияФорматаТипаДокумента(ТипДокумента)
	
	ФорматыТипов = Новый Соответствие();
	
	ВерсияФорматаУПДПродавца = "ON_NSCHFDOPPR_1_997_01_05_01";
	ВерсияФорматаУКДПродавца = "ON_NKORSCHFDOPPR_1_996_03_05_01";
	
	ВерсияФорматаУПДПокупателя = "ON_NSCHFDOPPOK_1_997_02_05_01";
	ВерсияФорматаУКДПокупателя = "ON_NKORSCHFDOPPOK_1_996_04_05_01";
	
	ФорматыТипов.Вставить(Перечисления.ТипыДокументовЭДО.УПД,
		ВерсияФорматаУПДПродавца);
	ФорматыТипов.Вставить(Перечисления.ТипыДокументовЭДО.УКД,
		ВерсияФорматаУКДПродавца);
	ФорматыТипов.Вставить(Перечисления.ТипыДокументовЭДО.СчетФактура,
		ВерсияФорматаУПДПродавца);
	ФорматыТипов.Вставить(Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости,
		ВерсияФорматаУКДПродавца);
	ФорматыТипов.Вставить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная,
		ВерсияФорматаУПДПродавца);
	ФорматыТипов.Вставить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот,
		ВерсияФорматаУПДПродавца);
	ФорматыТипов.Вставить(Перечисления.ТипыДокументовЭДО.РезультатРассмотренияАктаПриемкиЕИСУПД,
		ВерсияФорматаУПДПокупателя);
	ФорматыТипов.Вставить(Перечисления.ТипыДокументовЭДО.РезультатРассмотренияАктаПриемкиЕИСУКД,
		ВерсияФорматаУКДПокупателя);
	
	Возврат ФорматыТипов[ТипДокумента];
	
КонецФункции

Функция НовыйРезультатИспользуетсяУПД_УКД()

	Результат = Новый Структура;
	Результат.Вставить("ИспользуетсяУПД", Ложь);
	Результат.Вставить("ИспользуетсяУКД", Ложь);
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОбОператореЭДО()
	
	СведенияОбОператоре = Новый Структура;
	СведенияОбОператоре.Вставить("Идентификатор", "");
	СведенияОбОператоре.Вставить("Наименование", "");
	СведенияОбОператоре.Вставить("ИНН", "");
	
	Возврат СведенияОбОператоре;
	
КонецФункции

Процедура ЗаполнитьДанныеУчетнойЗаписи(ДанныеУчетнойЗаписи, НастройкиОбменаЕИС)

	ОператорЭДОФК = ОператорЭДОФедеральногоКазначейства();
	
	ДанныеУчетнойЗаписи.НаименованиеУчетнойЗаписи = НСтр("ru='Электронное актирование ЕИС в сфере закупок'");
	ДанныеУчетнойЗаписи.ИдентификаторОрганизации = НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота;
	ДанныеУчетнойЗаписи.Организация = НастройкиОбменаЕИС.Организация;
	ДанныеУчетнойЗаписи.ОператорЭДО = ОператорЭДОФК.Идентификатор;
	ДанныеУчетнойЗаписи.СпособОбменаЭД = СпособОбменаЧерезСерверЕИС();
	
КонецПроцедуры

Функция НовыеДанныеУчетнойЗаписи()
	
	Результат = Новый Структура;
	Результат.Вставить("НаименованиеУчетнойЗаписи", "");
	Результат.Вставить("ИдентификаторОрганизации", "");
	Результат.Вставить("Организация");
	Результат.Вставить("ОператорЭДО", "");
	Результат.Вставить("СпособОбменаЭД");
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак успешности заполнения состояния по исходящей информации отправителя.
// 
// Параметры:
//  ПараметрыДокумента - См. РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния
//  СостоянияЭлементовРегламента - См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Булево - признак успешности заполнения.
//
Функция ЗаполнитьСостояниеПоИсходящейИнформацииОтправителя(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
	
	Результат = Истина;
	ЭлементРегламента = Неопределено; // Неопределено,СтрокаТаблицыЗначений: См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
	
	Если Не РегламентыЭДО.ЕстьЭлементРегламента(СостоянияЭлементовРегламента,
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя, ЭлементРегламента) Тогда
		
		Состояние = РегламентыЭДО.НачальноеСостояниеДокумента();
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.ПодготовкаКОтправке Тогда
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке;
		
	ИначеЕсли ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Отправка Тогда
		
		Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка;
		
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак успешности заполнения состояния по извещению о получении из ЕИС.
// 
// Параметры:
//  ПараметрыДокумента - См. РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния
//  СостоянияЭлементовРегламента - См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Булево
//
Функция ЗаполнитьСостояниеПоИзвещениюОПолучении(
			ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
	
	Результат = Истина;
	ЭлементРегламента = Неопределено; // Неопределено,СтрокаТаблицыЗначений: См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
	
	Если НЕ РегламентыЭДО.ЕстьЭлементРегламента(СостоянияЭлементовРегламента,
		Перечисления.ТипыЭлементовРегламентаЭДО.ИОП, ЭлементРегламента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак успешности заполнения состояния по ошибке приема из ЕИС.
// 
// Параметры:
//  ПараметрыДокумента - См. РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния
//  СостоянияЭлементовРегламента - См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Булево
//
Функция ЗаполнитьСостояниеПоОшибкеЕИС(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
	
	Результат = Истина;
	ЭлементРегламента = Неопределено; // Неопределено,СтрокаТаблицыЗначений: См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
	
	Если НЕ РегламентыЭДО.ЕстьЭлементРегламента(СостоянияЭлементовРегламента,
		Перечисления.ТипыЭлементовРегламентаЭДО.ОшибкаЕИС, ЭлементРегламента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак успешности заполнения состояния по квитанции о приеме из ЕИС.
// 
// Параметры:
//  ПараметрыДокумента - См. РегламентыЭДО.НовыеПараметрыДокументаДляОпределенияСостояния
//  СостоянияЭлементовРегламента - См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Булево
//
Функция ЗаполнитьСостояниеПоКвитанцииЕИС(ПараметрыДокумента, СостоянияЭлементовРегламента, Состояние)
	
	Результат = Истина;
	
	ЭлементРегламента = Неопределено; // Неопределено,СтрокаТаблицыЗначений: См. РегламентыЭДО.НовыеСостоянияЭлементовРегламента
	
	Если НЕ РегламентыЭДО.ЕстьЭлементРегламента(СостоянияЭлементовРегламента,
		Перечисления.ТипыЭлементовРегламентаЭДО.КвитанцияЕИС, ЭлементРегламента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭлементРегламента.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение Тогда
		Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура ДобавитьВТаблицуТипЭлементаРегламента(Таблица, КодТранзакции, ТипЭлементаРегламента)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.КодТранзакции = КодТранзакции;
	НоваяСтрока.ТипЭлементаРегламента = ТипЭлементаРегламента;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПриложения(ДанныеПриложения, ДвоичныеДанныеПриложения)
	
	Кодировка = КодировкаТекстаПриложенияДляЕИС();
	ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеПриложения, Кодировка);
	
КонецПроцедуры

Функция ОпределитьТипПриложенияПоТипуДокумента(ТипДокумента)
	
	// Определяем тип приложения.
	ПриложениеУПД = ТипПриложенияУПДПродавца();
	ПриложениеУКД = ТипПриложенияУКДПродавца();
	ПриложениеУПДПокупателя = ТипПриложенияУПДПокупателя();
	ПриложениеУКДПокупателя = ТипПриложенияУКДПокупателя();
	
	ТипыДокументов = Новый Соответствие;
	ТипыДокументов.Вставить(Перечисления.ТипыДокументовЭДО.УПД, ПриложениеУПД);
	ТипыДокументов.Вставить(Перечисления.ТипыДокументовЭДО.УКД, ПриложениеУКД);
	ТипыДокументов.Вставить(Перечисления.ТипыДокументовЭДО.СчетФактура, ПриложениеУПД);
	ТипыДокументов.Вставить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная, ПриложениеУПД);
	ТипыДокументов.Вставить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот, ПриложениеУПД);
	ТипыДокументов.Вставить(Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости, ПриложениеУКД);
	ТипыДокументов.Вставить(Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура, ПриложениеУКД);
	ТипыДокументов.Вставить(Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД, ПриложениеУПДПокупателя);
	ТипыДокументов.Вставить(Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД, ПриложениеУКДПокупателя);
	ТипПриложения = ТипыДокументов[ТипДокумента];
	
	Возврат ТипПриложения;
	
КонецФункции

Функция ДолжностиРуководителя()
	
	Должности = Новый Массив;
	Должности.Добавить("Руководитель");
	Должности.Добавить("Генеральный директор");
	Возврат Должности;
	
КонецФункции

Процедура УстановитьВидимостьКнопокЗаполненияТабличныхЧастей(Форма, ЕстьЭлектронноеАктирование)

	Кнопки = КнопкиЗаполненияТабличныхЧастей(Форма);
	Для Каждого Кнопка Из Кнопки Цикл
		Если ОбщегоНазначенияКлиентСервер.
				ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, Кнопка) Тогда
			Форма.Элементы[Кнопка].Видимость = ЕстьЭлектронноеАктирование;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция КнопкиЗаполненияТабличныхЧастей(Форма)
	
	Кнопки = Новый Массив;
	ЭлектронноеАктированиеЕИСПереопределяемый.
		КнопкиЗаполненияТабличныхЧастейДокументов(Форма, Кнопки);
	
	Возврат Кнопки;
	
КонецФункции

Функция СоздатьЭлементФормыПараметровЭлектронногоАктированияДокумента(Форма)
	
	ДекорацияГосударственныйКонтракт = Неопределено;
	
	ЭлектронноеАктированиеЕИСПереопределяемый.
		СоздатьЭлементФормыПараметровЭлектронногоАктированияДокумента(Форма,
			ДекорацияГосударственныйКонтракт);
			
	ДекорацияГосударственныйКонтракт.УстановитьДействие("Нажатие", "Подключаемый_ВыполнитьКоманду");
	
	Возврат ДекорацияГосударственныйКонтракт;

КонецФункции

Функция НайтиПрисоединенныйФайлКонтракта(СсылкаНаКонтракт)

	ПрисоединенныйФайл = Неопределено;
	
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(СсылкаНаКонтракт, Файлы);
	ИмяРасширениеФайла = ИмяРасширениеФайлаКонтрактаПрисоединенныеФайлы();
	Для Каждого Файл Из Файлы Цикл
		Если Файл.Наименование = ИмяРасширениеФайла.Имя
			И Файл.Расширение = ИмяРасширениеФайла.Расширение
			И НЕ Файл.ПометкаУдаления Тогда
			ПрисоединенныйФайл = Файл;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции

Функция СообщенияЭлектронногоДокумента(ЭлектронныйДокумент, ТипыЭлементовРегламента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеЭДО.Ссылка КАК Ссылка,
		|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|ГДЕ
		|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТипыЭлементовРегламента)";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.УстановитьПараметр("ТипыЭлементовРегламента", ТипыЭлементовРегламента);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ДанныеПриложенияДляЕИСЭлектронногоДокумента(ЭлектронныйДокумент)
	
	ТипыЭлементовРегламента = Новый Массив();
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУПДДляЕИС);
	ТипыЭлементовРегламента.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ПриложениеУКДДляЕИС);
	Сообщения = СообщенияЭлектронногоДокумента(ЭлектронныйДокумент, ТипыЭлементовРегламента);
	
	Если Сообщения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФайлаПриложения = ПолучитьДанныеФайлаБСП(Сообщения[0].ОсновнойФайл);
	ДвоичныеДанныеПриложения =
		ПолучитьИзВременногоХранилища(ДанныеФайлаПриложения.СсылкаНаДвоичныеДанныеФайла);
	
	Возврат ДвоичныеДанныеПриложения;
	
КонецФункции


Функция ЭтоТипДокументаПриложениеДляЕИС(ТипДокумента) 
	
	Возврат ТипДокумента = Перечисления.ТипыДокументовЭДО.ПриложениеДляЕИС;
	
КонецФункции

Функция КодировкаТекстаПриложенияДляЕИС()
	
	Возврат "windows-1251";
	
КонецФункции

Функция ИмяФайлаБезРасширения(ИмяФайла)
	
	Файл = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
	Возврат Файл.ИмяБезРасширения;
	
КонецФункции

Функция СпособОбменаЧерезСерверЕИС()
	
	Возврат Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС;
	
КонецФункции

Функция ОпределитьТипОбъектаЗакупкиПоСтрокеИзКонтракта(СтрокаТипа)
	
	СоответствиеТипов = Новый Соответствие();
	СоответствиеТипов.Вставить(ТипОбъектаЗакупкиКонтрактаРабота(), Перечисления.ТипыОбъектовЗакупкиЕИС.Работа);
	СоответствиеТипов.Вставить(ТипОбъектаЗакупкиКонтрактаУслуга(), Перечисления.ТипыОбъектовЗакупкиЕИС.Услуга);
	СоответствиеТипов.Вставить(ТипОбъектаЗакупкиКонтрактаТовар(), Перечисления.ТипыОбъектовЗакупкиЕИС.Товар);
	
	Результат = СоответствиеТипов[СтрокаТипа];
	Если Результат = Неопределено Тогда
		Шаблон = НСтр("ru='Неизвестный тип объекта закупку - %1.");
		ВызватьИсключение СтрШаблон(Шаблон, СтрокаТипа)
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке)
	
	Результат = ИнформацияОбОшибке;
	Если ИнформацияОбОшибке <> Неопределено Тогда
		Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
			Результат = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке.Причина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область РазборДанныхКонтракта

Функция НовыйЭтапИсполненияКонтракта()
	
	Результат = Новый Структура;
	// Уникальный идентификатор этапа контракта в ЕИС. Игнорируется при приеме.
	// sid, Число.
	Результат.Вставить("ВнутреннийИдентификаторЕИС");
	// Внешний идентификатор этапа. При приеме контролируется уникальность номера в рамках документа.
	// externalSid, Строка(40).
	Результат.Вставить("ВнешнийИдентификатор");
	// GUID этапа контракта.
	// Игнорируется при приеме, используется для электронного актирования.
	// guid, Строка(36).
	Результат.Вставить("Идентификатор");
	// Дата начала исполнения этапа.
	// startDate, Дата.
	Результат.Вставить("ДатаНачала");
	// Дата окончания исполнения этапа.
	// endDate, Дата.
	Результат.Вставить("ДатаОкончания", Дата(1, 1, 1));
	// Цена этапа контракта в валюте контракта. 
	// Игнорируется при приеме в случае указания только одного блока executionPeriod/stages.
	// stagePrice, Число.
	Результат.Вставить("Цена");
	// Цена этапа контракта в российских рублях. Игнорируется при приеме.
	// Заполняется при передаче, в случае если валюта контракта отлична от рублей.
	// stagePriceRUR, Число.
	Результат.Вставить("ЦенаВРублях");
	// Процент и размер аванса по этапу контракта. Указание допустимо при заполненом блоке advancePaymentSum.
	// Размер аванса в процентах. 
	// Если заполнено поле priceValue, то значение поля игнорируется при приеме,
	// рассчитывается автоматически sumInPercents = (priceValue*100)/ stagePrice.
	// Результат округляется до 2-х знаков после запятой по правилам математического округления.
	// sumInPercents.
	Результат.Вставить("РазмерАвансаВПроцентах");
	// Размер аванса в валюте контракта. 
	// Если заполнено поле sumInPercents, то значение поля игнорируется при приеме,
	// рассчитывается автоматически priceValue =  stagePrice*(sumInPercents/100).
	// Результат округляется до 2-х знаков после запятой в меньшую сторону.
	Результат.Вставить("РазмерАванса");
	// Размер аванса в рублевом эквиваленте. При приеме игнорируется,
	// заполняется при передаче в случае если валюта контракта отлична от рублей.
	Результат.Вставить("РазмерАвансаВРублях");
	
	Возврат Результат;
	
КонецФункции

Функция НовыеДанныеКонтракта()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВерсияСхемы");
	
	Результат.Вставить("ЭтоЗакрытыйКонтракт", Ложь);
	
	// Идентификаторы.
	// Идентификатор участника документооборота - заказчика.
	// Заполняется из данных списка контрактов.
	// contractInfo/EDOAddInfo/customerID, Строка 4-46.
	Результат.Вставить("ИдентификаторУчастникаДокументооборотаЗаказчика");
	// Идентификатор версии документа.
	// id, Число.
	Результат.Вставить("Идентификатор");
	// externalId, Строка.
	// Внешний идентификатор документа.
	Результат.Вставить("ВнешнийИдентификатор");
	// Номер реестровой записи.
	// Основной идентификатор для актирования ЕИС.
	// regNum, Строка 1-19.
	Результат.Вставить("НомерРеестровойЗаписи");
	// Номер контракта.
	// number, Строка 1-100.
	Результат.Вставить("НомерКонтракта");
	// Идентификационный код закупки (ИКЗ).
	// Если извещение сформировано на основании позиции
	// ПГ с 01.01.2020 (заполнен блок tenderPlan2020Info),
	// то контролируется заполнение поля и соответствие
	// значению ИКЗ из позиции плана-графика за исключением 27-29 разрядов.
	// foundation/fcsOrder/singleCustomer/purchaseCode, Строка (36), только цифры.
	Результат.Вставить("ИдентификационныйКодЗакупки");
	
	// Дата размещения документа.
	// publishDate, Дата.
	Результат.Вставить("ДатаРазмещенияДокумента");
	// versionNumber, Число.
	Результат.Вставить("Версия");
	// Размещение заказа по закону №94-ФЗ или по №44-ФЗ.
	// foundation, Закон94ФЗ(), Закон44ФЗ().
	Результат.Вставить("НомерЗакона");
	Результат.Вставить("СведенияОЗаказчике", НовыеСведенияОЗаказчикеКонтракта());
	// Сведения о поставщиках.
	// suppliers, Массив структур, см. НовыеСведенияОПоставщике().
	Результат.Вставить("СведенияОПоставщиках", Новый Массив);
	Результат.Вставить("ИнформацияОЦенах", ИнформацияОЦенах());
	Результат.Вставить("ДатаЗаключенияКонтракта");
	// Предмет контракта.
	// contractSubject, Строка 1-2000.
	Результат.Вставить("ПредметКонтракта");
	// Номер государственного контракта по государственному оборонному заказу.
	// Может быть указан только при наличии в извещении-основании признака
	// «Закупка товар, работ, услуг по государственному оборонному заказу в соответствии
	// с ФЗ № 275-ФЗ от 29 декабря 2012 г» или при установленном признаке «Закупка товара,
	// работы, услуги по государственному оборонному заказу в соответствии
	// с ФЗ № 275-ФЗ от 29 декабря 2012 г» (isGOZ).
	// defenseContractNumber, Строка (25).
	Результат.Вставить("НомерКонтрактаГОЗ");
	// Закупка товара, работы, услуги по государственному оборонному заказу в соответствии
	// с ФЗ № 275-ФЗ от 29 декабря 2012 г. При наличии связи с извещением (блок foundation\fcsOrder\order),
	// имеющим признак «Закупка товар, работ, услуг по государственному оборонному заказу
	// в соответствии с ФЗ № 275-ФЗ от 29 декабря 2012 г», игнорируется при приеме и заполняется автоматически.
	// isGOZ, Булево.
	Результат.Вставить("ЭтоГОЗ");
	// Идентификатор государственного контракта.
	// IGK, Строка 1-20.
	Результат.Вставить("ИГК");
	
	// Дата начала исполнения контракта.
	// executionPeriod/startDate, Дата.
	Результат.Вставить("ДатаНачалаИсполнения");
	// Дата окончания исполнения контракта.
	Результат.Вставить("ДатаОкончанияИсполнения");
	// Этапы исполнения контракта.
	// executionPeriod/stages, массив структур НовыйЭтапИсполненияКонтракта().
	Результат.Вставить("ЭтапыИсполнения", Новый Массив);
	
	// Признак наличия авансовых платежей.
	Результат.Вставить("ЕстьАвансовыеПлатежиПоЭтапам", Ложь);
	Результат.Вставить("ЕстьАвансовыеПлатежиПоКонтракту", Ложь);
	
	// Предусмотрена выплата аванса. В блоке должно быть заполнено либо
	// поле sumInPercents либо поле priceValue. Оба поля одновременно заполнены быть не могут. 
	// Не может быть заполнен если заполнен блок
	// "Цена за право заключения контракта" (priceInfo\rightToConcludeContractPriceInfo).
	// advancePaymentSum
	// Размер аванса в процентах. Если заполнено поле priceValue, то значение поля игнорируется при приеме,
	// рассчитывается автоматически sumInPercents = (priceValue*100)/ priceInfo\price.
	// Результат округляется до 2-х знаков после запятой по правилам математического округления.
	// sumInPercents, Число.
	Результат.Вставить("РазмерАвансаВПроцентах");
	// Размер аванса в валюте контракта. Если заполнено поле sumInPercents,
	// то значение поля игнорируется при приеме, рассчитывается автоматически
	// priceValue =  priceInfo\price*(sumInPercents/100). Результат округляется до
	// 2-х знаков после запятой в меньшую сторону.
	// priceValue, Число(21,2).
	Результат.Вставить("РазмерАванса");
	// Размер аванса в рублевом эквиваленте. При приеме игнорируется,
	// заполняется при передаче в случае если валюта контракта отлична от рублей.
	Результат.Вставить("РазмерАвансаВРублях");
	
	// Описание объектов закупки.
	// Значение блоков OKPD/OKPD2/KTRU игнорируется и заполняется значением соответствующей позиции КТРУ,
	// в случае если контракт создан на основании извещения об осуществлении закупки
	// (заполнен блок foundation\fcsOrder\order\notificationNumber) и в извещении заполнен код по КТРУ,
	// либо в случае если контракт создан на основании позиции плана-графика
	// (заполнен блок foundation\singleCustomer\tenderPlanInfo или foundation\ notOosOrder\ tenderPlanInfo)
	// и в такой позиции заполнен код по КТРУ. 
	// В других случаях сохраняется значение одного из блоков OKPD/OKPD2/KTRU.
	// Массив структур НовыйОбъектЗакупки().
	Результат.Вставить("ОбъектыЗакупки", Новый Массив);//products
	// Данные объектов закупки в разрезе идентификаторов.
	Результат.Вставить("ОбъектыЗакупкиПоИдентификаторам", Новый Соответствие);
	Результат.Вставить("КоличествоЭтаповКонтракта");//quantityContractStages
	
	// Текущее состояние контракта:
	// СостояниКонтрактаAннулирован(), СостояниКонтрактаИсполнение(),
	// СостояниКонтрактаИсполнениеЗавершено(), СостояниКонтрактаИсполнениеПрекращено()
	// currentContractStage, Необязательный.
	Результат.Вставить("ТекущееСостояние");
	
	// Контракт недействителен. Игнорируется при приеме. Заполняется автоматически при передаче.
	// isInvalid, Булево.
	Результат.Вставить("КонтрактНедействителен");
	
	// Информация, указываемая в случае, если предмет контракта относится к работам по строительству.
	// Предмет контракта относится к работам по строительству.
	// constructionWorksInfo/isConstructionWorks, Булево.
	Результат.Вставить("ПредметОтноситсяКРаботамПоСтроительству", Ложь);
	// Код группы. Контролируется наличие кода
	// в "Справочник: Группы работ по строительству" (zfcs_nsiGroupBuildType).
	// constructionWorksInfo/constructionWorkGroup/code, Строка 5.
	Результат.Вставить("КодГруппыРаботПоСтроительству", "");
	// Наименование группы.
	// Игнорируется при приеме. Заполняется автоматически на основании
	// "Справочник: Группы работ по строительству" (zfcs_nsiGroupBuildType).
	// constructionWorksInfo/constructionWorkGroup/name, Строка 1000.
	Результат.Вставить("НаименованиеГруппыРаботПоСтроительству");
	
	// Информация о банковском и (или) казначейском сопровождении контакта.
	// bankSupportContractRequiredInfo.
	// Если блок bankSupportContractRequiredInfo не задан и имеется связь с планом-графиком
	// (задан блок tenderPlanInfo) и в качестве основания заключения контракта указан блок
	// foundation/fcsOrder/notOosOrder или foundation/fcsOrder/singleCustomer,
	// сведения о банковском и (или) казначейском сопровождении контакта автоматически
	// заполняются на основании позиции плана-графика. 
	// Если блок bankSupportContractRequiredInfo не задан и в качестве основания
	// заключения контракта указан блок foundation/fcsOrder/order,
	// сведения о банковском и (или) казначейском сопровождении контакта
	// автоматически заполняются на основании извещения.
	//
	// Требуется банковское сопровождение контракта.
	// bankSupportContractRequiredInfo/bankSupportContractRequired, Булево.
	Результат.Вставить("ТребуетсяБанковскоеСопровождение", Ложь);
	// Требуется казначейское сопровождение контракта. 
	// bankSupportContractRequiredInfo/treasurySupportContractRequired, Булево.
	Результат.Вставить("ТребуетсяКазначейскоеСопровождение", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция Закон94ФЗ()
	
	Возврат "94ФЗ";
	
КонецФункции

Функция Закон44ФЗ()
	
	Возврат "44ФЗ";
	
КонецФункции

// Новые сведения о контрагенте.
// 
// Возвращаемое значение:
//  Структура -- Новые сведения о контрагенте:
// * ПолноеНаименование - Строка - полное наименование.
// * СокращенноеНаименование - Строка - сокращенное наименование.
// * ИНН - Строка - ИНН контрагента.
// * КПП - Строка - КПП контрагента.
Функция НовыеСведенияОКонтрагенте() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПолноеНаименование");
	Результат.Вставить("СокращенноеНаименование");
	Результат.Вставить("ИНН");
	Результат.Вставить("КПП");
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОЗаказчикеКонтракта()
	
	Результат = Новый Структура;
	Результат.Вставить("КодыОрганизации", ПараметрыОрганизации());
	Результат.Вставить("СокращенноеНаименование");
	Результат.Вставить("ДатаПостановкиНаУчет");
	Результат.Вставить("ИНН");
	Результат.Вставить("КПП");
	Результат.Вставить("ОКПО"); // Для печатной формы.
	Результат.Вставить("ИдентификационныйКод"); // Для печатной формы.
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОПоставщике()
	
	Результат = Новый Структура;
	
	// supplier/legalEntityRF/fullName, Строка 2000.
	Результат.Вставить("ПолноеНаименование", "");
	// supplier/legalEntityRF/shortName, Строка 2000.
	Результат.Вставить("Наименование");
	
	Возврат Результат;
	
КонецФункции

Функция ИзвлечьСведенияОПоставщиках(ДанныеКонтракта)

	Поставщики = Новый Массив;
	
	УзелПоставщики = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "suppliers");
	Если УзелПоставщики = Неопределено Тогда
		Возврат Поставщики;
	КонецЕсли;
	
	Для Каждого УзелПоставщика Из ЗначениеВКоллекцию(УзелПоставщики.supplier) Цикл
		Поставщик = НовыеСведенияОПоставщике();
		Если ЕстьСвойство(УзелПоставщика, "legalEntityRF") Тогда
			ИмяУзлаДанных = "legalEntityRF";
			Поставщик.ПолноеНаименование = УзелПоставщика[ИмяУзлаДанных].fullName;
			Поставщик.Наименование = ЗначениеНеобязательногоСвойства(
				УзелПоставщика[ИмяУзлаДанных], "shortName");
		КонецЕсли;
		Поставщики.Добавить(Поставщик);
	КонецЦикла;
	
	Возврат Поставщики;

КонецФункции

Функция ИзвлечьСведенияОЗаказчике(ДанныеКонтракта)
	
	Сведения = НовыеСведенияОЗаказчикеКонтракта();
	
	Данные = ДанныеКонтракта.customer;
	Сведения.СокращенноеНаименование = ЗначениеНеобязательногоСвойства(Данные, "shortName");
	Сведения.ДатаПостановкиНаУчет = XMLЗначение(Тип("Дата"), Данные.registrationDate);
	Сведения.ИНН = СокрЛП(ЗначениеНеобязательногоСвойства(Данные, "inn"));
	Сведения.КПП = СокрЛП(ЗначениеНеобязательногоСвойства(Данные, "kpp"));
	Сведения.ОКПО = СокрЛП(ЗначениеНеобязательногоСвойства(Данные, "OKPO"));
	Сведения.ИдентификационныйКод = ЗначениеНеобязательногоСвойства(Данные, "customerCode");
	
	КодыОрганизации = Сведения.КодыОрганизации;
	КодыОрганизации.КодПоСПЗ = Данные.regNum;
	КодыОрганизации.КодПоСводномуРеестру = ЗначениеНеобязательногоСвойства(Данные, "consRegistryNum");
	КодыОрганизации.ПолноеНаименование = ЗначениеНеобязательногоСвойства(Данные, "fullName");
	
	Возврат Сведения;
	
КонецФункции

Функция ДанныеОКПД()
	
	Результат = Новый Структура;
	Результат.Вставить("Код",);
	Результат.Вставить("Наименование",);
	Возврат Результат;
	
КонецФункции

Функция НовоеЗначениеОКЕИ()
	
	Результат = Новый Структура;
	// Код единицы измерения.
	// Код, Строка 5.
	Результат.Вставить("Код");
	// Национальное условное обозначение (поле localSymbol в справочнике ОКЕИ (nsiOKEI)).
	// Игнорируется при приеме. автоматически заполняется значением из справочника и выгружается.
	// НацУслОбоз, Строка 50.
	Результат.Вставить("НациональныйКод");
	// Полное наименование единицы измерения (поле fullName  в справочнике ОКЕИ (nsiOKEI)).
	// Игнорируется при приеме. автоматически заполняется значением из справочника и выгружается.
	// Наим, Строка 1000.
	Результат.Вставить("Наименование");
	Возврат Результат;
	
КонецФункции

Функция ДиапазонЗначенийКТРУ()
	
	Результат = Новый Структура;
	// minMathNotation.
	// В случае отсутствия должна быть задана верхняя граница диапазона (maxMathNotation + max).
	// Математическое обозначение отношения к минимальному значению диапазона.
	Результат.Вставить("МатематическоеОбозначениеОтношенияКМинимуму");
	// min.
	// Минимальное значение диапазона.
	Результат.Вставить("МинимальноеЗначение");
	
	// maxMathNotation.
	// В случае отсутствия должна быть задана нижняя граница диапазона (minMathNotation + min).
	// Математическое обозначение отношения к максимальному значению диапазона.
	Результат.Вставить("МатематическоеОбозначениеОтношенияКМаксимуму");
	// max.
	// Максимальное значение диапазона.
	Результат.Вставить("МаксимальноеЗначение");
	Возврат Результат;
	
КонецФункции

Функция ЗначениеХарактеристикиКТРУ()
	
	Результат = Новый Структура;
	
	// Заполняется для качественной характеристики.
	// Текстовое описание значения качественной характеристики
	Результат.Вставить("ОписаниеКачества");
	
	// Заполняется для количественной характеристики.
	// Единица измерения. 
	// Ссылка на классификатор ОКЕИ (nsiOKEI).
	// Допустимо указание как постоянных, так и временных единиц измерения
	// (для которых установлено поле isTemporaryForKTRU в выгрузке справочника nsiOKEI). 
	// Игнорируется при приеме для извещений предварительного отбора, начиная с версии 9.0
	Результат.Вставить("ОКЕИ", НовоеЗначениеОКЕИ());
	// Формат значения характеристики:
	// N-числовой;
	// A-дополнительный.
	Результат.Вставить("ФорматЗначения");
	
	// Заполняется для количественных характеристик.
	// Набор диапазонов значений характеристик.
	Результат.Вставить("ДиапазонЗначений", ДиапазонЗначенийКТРУ());
	// НаборЗначений
	Результат.Вставить("Значение");
	
	Возврат Результат;
	
КонецФункции

Функция ХарактеристикиКТРУ()
	
	Результат = Новый Структура;
	// Характеристика товара, работы услуги позиции КТРУ формируется с использованием справочной информации
	// (справочник Каталог товаров, работ, услуг (КТРУ) (nsiKTRU)).
	// Контролируется принадлежность характеристики по совокупности полей
	// name+type КТРУ(positions/position/purchaseObjectInfo/productsSpecification/product/KTRU/code)
	// по справочнику Каталог товаров, работ, услуг (КТРУ) (nsiKTRU).
	Результат.Вставить("ХарактеристикиИзСправочника");
	// Характеристика товара, работы услуги позиции КТРУ формируется в текстовой форме.
	Результат.Вставить("ХарактеристикиВТекстовойФорме");
	// Классификация по ОКПД2.
	// Игнорируется при приеме, используется в печатной форме.
	Результат.Вставить("ОКПД2", ДанныеОКПД());
	
	ХарактеристикиИзСправочника = Новый Структура;
	ХарактеристикиИзСправочника.Вставить("Код");
	// Наименование характеристики. Контролируется обязательность заполнения.
	// Является полем, идентифицирующим характеристику.
	ХарактеристикиИзСправочника.Вставить("Наименование");
	// Тип характеристики позиции КТРУ. Контролируется обязательность заполнения. Является полем, идентифицирующим характеристику:
	// 1 - качественная;
	// 2 - количественная
	ХарактеристикиИзСправочника.Вставить("Тип");
	// Вид характеристики позиции КТРУ
	// (игнорируется при приеме, заполняется автоматически на основе кода характеристики):
	// 1 - неизменяемая заказчиком (в применении КТРУ невозможно переопределить справочные значения); 
	// 2 - изменяемая заказчиком с выбором одного значения;
	// 3 - изменяемая заказчиком, выбор нескольких значений
	ХарактеристикиИзСправочника.Вставить("Вид");
	// Допустимые значения характеристики позиции КТРУ. 
	// Если значение поля «Вид характеристики» (kind) = "неизменяемая заказчиком",
	// то значение в блоке игнорируется, из справочника nsiKTRU автоматически заполняется полным набор значений для данной характеристики.
	// Если «Вид характеристики» = "изменяемая заказчиком, выбор нескольких значений",
	// то контролируется заполненность одного или нескольких значений характеристики.
	// Если «Вид характеристики» = "изменяемая заказчиком с выбором одного значения",
	// то контролируется заполненность ровно одного значения характеристики.
	// см. ЗначениеХарактеристикиКТРУ()
	ХарактеристикиИзСправочника.Вставить("Значения", Новый Массив);
	Значение = ЗначениеХарактеристикиКТРУ();
	ХарактеристикиИзСправочника.Значения.Добавить(Значение);
	Результат.ХарактеристикиИзСправочника = ХарактеристикиИзСправочника;
	
	ХарактеристикиВТекстовойФорме = Новый Структура;
	ХарактеристикиВТекстовойФорме.Вставить("Наименование");
	// Тип характеристики:
	// 1 - качественная;
	// 2 - количественная.
	ХарактеристикиВТекстовойФорме.Вставить("Тип");
	// Допустимые значения характеристики.
	ХарактеристикиВТекстовойФорме.Вставить("Значения");
	Результат.ХарактеристикиВТекстовойФорме = ХарактеристикиВТекстовойФорме;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеКТРУ()
	
	Результат = Новый Структура;
	Результат.Вставить("Код");
	Результат.Вставить("Наименование");
	Результат.Вставить("Версия");
	// Идентификатор версии позиции.
	// Не используется, добавлено на развитие.
	Результат.Вставить("ИдентификаторВерсии");
	Результат.Вставить("Характеристики", ХарактеристикиКТРУ());
	Результат.Вставить("ОКПД2");
	
	Возврат Результат;
	
КонецФункции

Функция НовыеДанныеСтраны()
	
	Результат = Новый Структура;
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("Код");
	Поле = НовоеПолеСтруктуры("Код", ,
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)),
		"Цифровой код страны.",
		Истина,
		"@countryCode");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПолноеНаименование");
	Поле = НовоеПолеСтруктуры("ПолноеНаименование", ,
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)),
		"Полное наименование страны.",
		Истина,
		"@countryFullName");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;
	
КонецФункции

Функция ИнформацияОЦенах()
	
	Результат = Новый Структура;
	// Значение цены контракта в валюте контракта.
	Результат.Вставить("Цена",);// price
	// Способ указания цены контракта:
	// P - цена контракта;
	// OP - ориентировочное значение цены контракта;
	// MP - максимальное значение цены контракта.
	Результат.Вставить("СпособУказанияЦены", "");// priceType
	Результат.Вставить("ФормулаЦены");// priceFormula, необязательный
	// Валюта контракта.
	Результат.Вставить("КодВалютыКонтракта");// currency.code
	Результат.Вставить("ИмяВалютыКонтракта");// currency.name, необязательный
	// Курс валюты по отношению к рублю на дату заключения контракта.
	// При приеме игнорируется, заполняется при передаче,
	// в случае если валюта контракта отлична от рублей.
	Результат.Вставить("КурсВалюты");// currencyRate.rate
	Результат.Вставить("НоминалВалюты");// currencyRate.raiting, необязательный
	// Цена контракта в рублевом эквиваленте.
	// При приеме игнорируется, заполняется при передаче
	// в случае если валюта контракта отлична от рублей.
	Результат.Вставить("ЦенаВРублях");// priceRUR, необязательный
	// Значение НДС в валюте контракта. При приеме контролируется обязательность заполнения.
	Результат.Вставить("СуммаНДС");// priceVAT, необязательный
	// Значение НДС в рублевом эквиваленте.
	// При приеме игнорируется, заполняется при передаче
	// в случае если валюта контракта отлична от рублей.
	Результат.Вставить("СуммаНДСВРублях");// priceVATRUR, необязательный
	// Суммы, уплачиваемые заказчиком поставщику (подрядчику, исполнителю),
	// будут уменьшены на размер налогов, сборов и иных обязательных платежей.
	// Признак может быть установлен,
	// если контракт заключается не по цене за право заключения контракта.
	Результат.Вставить("СуммаБудетУменьшенаНаРазмерНалогов", Ложь);// amountsReducedByTaxes, необязательный
	Результат.Вставить("ЭтоЦенаЗаПравоЗаключенияКонтракта", Ложь);// если присутствует узел rightToConcludeContractPriceInfo
	Возврат Результат;
	
КонецФункции

Функция ИзвлечьИнформациюОЦенах(ДанныеКонтракта)
	
	ДанныеОЦенах = ДанныеКонтракта.priceInfo;
	ИнформацияОЦенах = ИнформацияОЦенах();
	
	Если ДанныеОЦенах.Свойства().Получить("rightToConcludeContractPriceInfo") <> Неопределено Тогда
		ИнформацияОЦенах.ЭтоЦенаЗаПравоЗаключенияКонтракта = Истина;
		ДанныеОЦенах = ДанныеОЦенах.rightToConcludeContractPriceInfo;
	Иначе
		ИнформацияОЦенах.СпособУказанияЦены = ДанныеОЦенах.priceType;
	КонецЕсли;
	
	ИнформацияОЦенах.Цена = XMLЗначение(Тип("Число"), ДанныеОЦенах.price);
	ИнформацияОЦенах.ФормулаЦены = ЗначениеНеобязательногоСвойства(ДанныеОЦенах, "priceFormula");
	ИнформацияОЦенах.КодВалютыКонтракта = ДанныеОЦенах.currency.code;
	ИнформацияОЦенах.ИмяВалютыКонтракта = ЗначениеНеобязательногоСвойства(ДанныеОЦенах.currency, "name");
	Если ДанныеОЦенах.Свойства().Получить("currencyRate") <> Неопределено Тогда
		ИнформацияОЦенах.КурсВалюты = ЗначениеНеобязательногоСвойства(ДанныеОЦенах.currencyRate, "rate", "Число");
		ИнформацияОЦенах.НоминалВалюты = ЗначениеНеобязательногоСвойства(ДанныеОЦенах.currencyRate, "raiting", "Число");
	КонецЕсли;
	ИнформацияОЦенах.ЦенаВРублях = ЗначениеНеобязательногоСвойства(ДанныеОЦенах, "priceRUR", "Число");
	ИнформацияОЦенах.СуммаНДС = ЗначениеНеобязательногоСвойства(ДанныеОЦенах, "priceVAT", "Число");
	ИнформацияОЦенах.СуммаНДСВРублях = ЗначениеНеобязательногоСвойства(ДанныеОЦенах, "priceVATRUR", "Число");
	ИнформацияОЦенах.СуммаБудетУменьшенаНаРазмерНалогов = 
		ЗначениеНеобязательногоСвойства(ДанныеОЦенах, "amountsReducedByTaxes", "Булево");
	
	Возврат ИнформацияОЦенах;
	
КонецФункции

Функция СведенияОбИзмененияхОбъектаЗакупки()
	
	Результат = Новый Структура;
	Результат.Вставить("ИнформацияОбИзменении", "");// changeInfo, обязательный
	Результат.Вставить("Документы", Новый Массив);// documents, обязательный
	Возврат Результат;
	
КонецФункции

Функция ИзвлечьДанныеЛекарственногоПрепарата(Данные)
	
	Результат = НовыеСведенияОЛекарственномПрепаратеДляКонтракта();
	
	ДанныеПрепарата = Данные.drugPurchaseObjectInfo.drugInfoUsingReferenceInfo;
	Если ДанныеПрепарата.Свойства().Получить("MNNsInfo") <> Неопределено Тогда
		Для каждого МеждународныеНазвания Из ЗначениеВКоллекцию(ДанныеПрепарата.MNNsInfo.MNNInfo) Цикл
			СведенияМНН = НовыеСведенияМНН();
			СведенияМНН.ВнешнийКодМНН = МеждународныеНазвания.MNNExternalCode;
			СведенияМНН.КодМНН = ЗначениеНеобязательногоСвойства(МеждународныеНазвания, "MNNDrugCode");
			СведенияМНН.НаименованиеМНН = ЗначениеНеобязательногоСвойства(МеждународныеНазвания, "MNNName");			
			Для каждого Позиция Из ЗначениеВКоллекцию(МеждународныеНазвания.positionsTradeName.positionTradeName) Цикл
				Если Позиция.Свойства().Получить("positionTradeNameUsingTextForm") = Неопределено Тогда
					СведенияПозиции = НовыеСведенияПозицииТорговогоНаименованияЛП();
					СведенияПозиции.ВнутреннийИдентификаторЕИС = ЗначениеНеобязательногоСвойства(Позиция, "sid", "Число");
					СведенияПозиции.Идентификатор = ЗначениеНеобязательногоСвойства(Позиция, "guid");
					СведенияПозиции.КодПоСправочникуЛП = ЗначениеНеобязательногоСвойства(Позиция, "drugCode");
					
					УзелТорговогоНаименования = Неопределено;
					Если ЕстьСвойство(Позиция, "tradeInfo") Тогда
						УзелТорговогоНаименования = Позиция.tradeInfo;
					ИначеЕсли ЕстьСвойство(Позиция, "editedTradeInfo") Тогда
						УзелТорговогоНаименования = Позиция.editedTradeInfo;
						СведенияПозиции.ТорговоеНаименованиеИзмененоВручную = Истина;
					КонецЕсли;
					Если УзелТорговогоНаименования <> Неопределено Тогда
						СведенияПозиции.ТорговоеНаименование = УзелТорговогоНаименования.tradeName;
					КонецЕсли;
					
					УзелЛекФормы = Неопределено;
					Если ЕстьСвойство(Позиция, "medicamentalFormInfo") Тогда
						УзелЛекФормы = Позиция.medicamentalFormInfo;
					ИначеЕсли ЕстьСвойство(Позиция, "editedMedicamentalFormInfo") Тогда
						УзелЛекФормы = Позиция.editedMedicamentalFormInfo;
						СведенияПозиции.НаименованиеЛекарственнойФормыИзмененоВручную = Истина;
					КонецЕсли;
					Если УзелЛекФормы <> Неопределено Тогда
						СведенияПозиции.НаименованиеЛекарственнойФормы = УзелЛекФормы.medicamentalFormName;
					КонецЕсли;
					
					// Дозировка.
					УзелДозировки = Неопределено;
					Если ЕстьСвойство(Позиция, "dosageInfo") Тогда
						УзелДозировки = Позиция.dosageInfo;
					ИначеЕсли ЕстьСвойство(Позиция, "editedDosageInfo") Тогда
						УзелДозировки = Позиция.editedDosageInfo;
						СведенияПозиции.НаименованиеЛекарственнойФормыИзмененоВручную = Истина;
					КонецЕсли;
					Если УзелДозировки <> Неопределено Тогда
						СведенияПозиции.НаименованиеЕдиницыИзмеренияДозировки =
							ЗначениеНеобязательногоСвойства(УзелДозировки, "dosageName");
						СведенияПозиции.КодЕдиницыИзмеренияДозировки = УзелДозировки.dosageOKEI.code;
						СведенияПозиции.НациональноеОбозначениеЕдиницыИзмеренияДозировки =
							ЗначениеНеобязательногоСвойства(УзелДозировки.dosageOKEI, "nationalCode");
						СведенияПозиции.ПолноеНаименованиеЕдиницыИзмеренияДозировки =
							ЗначениеНеобязательногоСвойства(УзелДозировки.dosageOKEI, "name");
						СведенияПозиции.ЗначениеДозировки =
							ЗначениеНеобязательногоСвойства(УзелДозировки, "dosageValue");
						СведенияПозиции.НаименованиеПотребительскойЕдиницыДозировки =
							ЗначениеНеобязательногоСвойства(УзелДозировки, "dosageUserName");
					КонецЕсли;
					
					// Упаковка.
					УзелУпаковки = Неопределено;
					Если ЕстьСвойство(Позиция, "packagingsInfo") Тогда
						УзелУпаковки = Позиция.packagingsInfo.packagingInfo;
					ИначеЕсли ЕстьСвойство(Позиция, "editedPackagingsInfo") Тогда
						УзелУпаковки = Позиция.editedPackagingsInfo.packagingInfo;
						СведенияПозиции.НаименованиеЛекарственнойФормыИзмененоВручную = Истина;
					КонецЕсли;
					Если УзелУпаковки <> Неопределено Тогда
						СведенияПозиции.НаименованиеВидаПервичнойУпаковки =
							УзелУпаковки.primaryPackagingInfo.primaryPackagingName;
						СведенияПозиции.КоличествоЛекарственныхФормВПервичнойУпаковке =
							ЗначениеНеобязательногоСвойства(УзелУпаковки, "packaging1Quantity", "Число");
						СведенияПозиции.КоличествоПервичныхУпаковокВПотребительскойУпаковке =
							ЗначениеНеобязательногоСвойства(УзелУпаковки, "packaging2Quantity", "Число");
						СведенияПозиции.КоличествоЛекарственныхФормВПотребительскойУпаковке =
							ЗначениеНеобязательногоСвойства(УзелУпаковки, "sumaryPackagingQuantity", "Число");
					КонецЕсли;
					
					СведенияМНН.ПозицииПоТорговомуНаименованиюЛП.Добавить(СведенияПозиции);
				Иначе
					// В текстовой форме.
				КонецЕсли;
			КонецЦикла;
			Результат.СписокМНН.Добавить(СведенияМНН);
		КонецЦикла;
	КонецЕсли;
	
	// Срок годности.
	Если ДанныеПрепарата.Свойства().Получить("expirationDateCustomFormatInfo") <> Неопределено Тогда
		УзелСрокаГодности = ДанныеПрепарата.expirationDateCustomFormatInfo;
		Если ЕстьСвойство(УзелСрокаГодности, "expirationDateMonthYear") Тогда
			Результат.СрокГодностиМесяц = УзелСрокаГодности.expirationDateMonthYear.month;
			Результат.СрокГодностиГод = УзелСрокаГодности.expirationDateMonthYear.year;
			СрокГодности = Дата(Результат.СрокГодностиГод, Результат.СрокГодностиМесяц, 1);
			Результат.СрокГодности = КонецМесяца(СрокГодности);
		КонецЕсли;
		Если ЕстьСвойство(УзелСрокаГодности, "expirationDate") Тогда
			Результат.СрокГодностиВВидеДаты = XMLЗначение(Тип("Дата"), УзелСрокаГодности.expirationDate);
			Результат.СрокГодности = Результат.СрокГодностиВВидеДаты;
		КонецЕсли;
		
	КонецЕсли;
	
	// Признак включения в реестр жизненно необходимых и важнейших лекарственных препаратов (ЖНВЛП).
	Результат.ВключенВЖНВЛП = ЗначениеНеобязательногоСвойства(ДанныеПрепарата, "isZNVLP", "Булево");
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОЛекарственномПрепаратеДляКонтракта()
	
	Результат = Новый Структура;
	
	// Международные, группировочные или химические наименования лекарственных препаратов (МНН).
	// При приеме контролируется обязательность заполнения блока и принадлежность
	// всех МНН в блоке одному типу (т.е. все МНН в блоке должны иметь одинаковое наименование).
	// Массив структур НовыеСведенияМНН().
	Результат.Вставить("СписокМНН", Новый Массив);
	// Срок годности (годен до) в пользовательском формате.
	// Способ указания срока годности.
	Результат.Вставить("СрокГодностиУказанВПолномФормате", Ложь);
	// Срок годности в формате "месяц-год".
	// Окончание срока годности трактуется, как последний день месяца,
	// предшествующего месяцу, указанному на упаковке лекарственного препарата
	Результат.Вставить("СрокГодностиМесяц");
	Результат.Вставить("СрокГодностиГод");
	// Срок годности в полном формате даты "dd.mm.yyyy"
	Результат.Вставить("СрокГодностиВВидеДаты", Дата(1, 1, 1));
	// Формируется либо из месяца и года, либо из значения даты в СрокГодностиВВидеДаты.
	Результат.Вставить("СрокГодности");
	// Признак включения в реестр жизненно необходимых и важнейших лекарственных препаратов (ЖНВЛП)
	Результат.Вставить("ВключенВЖНВЛП");
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияМНН()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТекстоваяФорма", Ложь);
	
	// Международное непатентованное или
	// группировочное или химическое наименование формируется с использованием справочной информации.
	// Уникальный внешний код МНН по справочнику "Лекарственные препараты"
	// (поле MNNInfo\MNNExternalCode документа nsiFarmDrugDictionary)
	// MNNExternalCode, обязательный, строка 50.
	Результат.Вставить("ВнешнийКодМНН");
	// Уникальный код МНН. Игнорируется при приеме, автоматически заполняется при передаче из справочника
	// "Лекарственные препараты" (поле MNNInfo\MNNDrugCode документа nsiFarmDrugDictionary)
	// MNNDrugCode, необязательный, строка 50.
	Результат.Вставить("КодМНН");
	// Наименование МНН. Игнорируется при приеме, автоматически заполняется при передаче из справочника
	// "Лекарственные препараты" (поле MNNInfo\MNNName документа nsiFarmDrugDictionary)
	// MNNName, необязательный, строка 2000.
	Результат.Вставить("НаименованиеМНН");
	
	// Международное непатентованное или
	// группировочное или химическое наименование формируется в текстовой форме. 
	// Начиная с версии 10.1 не допускается указание лекарственных препаратов в текстовой форме.
	// Запрет не учитывается, если при формировании первичной информации о контракте осуществляется наследование
	// объектов закупки из извещения о закупке или позиции плана-графика 2019 года (2019 или ранее) и в источнике
	// сведений об унаследованных объектах закупки хотя бы одно МНН объекта закупки-лекарственного препарата указано вручную.
	// А так же при приеме информация об изменении контракта, если в предыдущей размещенной версии информации об этом контракте
	// хотя бы одно МНН или ТН объекта закупки лекарственного препарата указано вручную.
	Результат.Вставить("ТекстоваяФормаНаменованияМНН");
	
	// Позиции по торговому наименованию лекарственного средства.
	// Массив структур НовыеСведенияПозицииТорговогоНаименованияЛП().
	Результат.Вставить("ПозицииПоТорговомуНаименованиюЛП", Новый Массив);
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияПозицииТорговогоНаименованияЛП()
	
	Результат = Новый Структура;
	
	// Признак того, что позиция по торговому наименованию (ТН) лекарственного средства формируется в текстовой форме.
	Результат.Вставить("ПозицияВТекстовойФорме", Ложь);
	
	// Параметры позиции с использованием справочной информации.
	// Уникальный идентификатор лекарственного препарата.
	// Игнорируется при приеме, добавлено на развитие.
	// sid, Число(19)
	Результат.Вставить("ВнутреннийИдентификаторЕИС");
	// GUID лекарственного препарата.
	// Игнорируется при приеме, используется для электронного актирования.
	// guid, Строка 36.
	Результат.Вставить("Идентификатор");
	// Уникальный внешний код лекарственного препарата по справочнику "Лекарственные препараты"
	// (поле MNNInfo\positionsTradeName\positionTradeName\positionTradeNameExternalCode  документа nsiFarmDrugDictionary).
	// При приеме контролируется наличие в справочнике "Лекарственные препараты" ЕИС
	// лекарственного препарата с таким кодом и принадлежность лекарственного препарата
	// с указанным кодом к МНН с кодом, указанным в поле MNNInfo\MNNExternalCode
	// positionTradeNameExternalCode, Строка 50.
	Результат.Вставить("ИдентификаторПоСправочникуЛП", "");
	// Код лекарственного препарата по справочнику "Лекарственные препараты".
	// Игнорируется при приеме, автоматически заполняется при передаче из справочника "Лекарственные препараты"
	// поле MNNInfo\positionsTradeName\positionTradeName\drugCode документа nsiFarmDrugDictionary).
	// drugCode, Строка 50.
	Результат.Вставить("КодПоСправочникуЛП");
	
	// Торговое наименование (ТН) лекарственного препарата.
	// Игнорируется при приеме, автоматически заполняется
	// при передаче из справочника "Лекарственные препараты"
	// (блок MNNInfo\positionsTradeName\positionTradeName\tradeInfo документа nsiFarmDrugDictionary).
	// tradeInfo/tradeName, Строка 500.
	// editedTradeInfo/tradeName, Строка 500, торговое наименование изменено вручную.
	Результат.Вставить("ТорговоеНаименование", "");
	Результат.Вставить("ТорговоеНаименованиеИзмененоВручную", Ложь);
	
	// Лекарственная форма.
	// Игнорируется при приеме, автоматически заполняется при передаче из справочника
	// "Лекарственные препараты"
	// (блок MNNInfo\positionsTradeName\positionTradeName\medicamentalFormInfo документа nsiFarmDrugDictionary).
	// medicamentalFormInfo/medicamentalFormName, Строка 500.
	// editedMedicamentalFormInfo/medicamentalFormName, Строка 500.
	Результат.Вставить("НаименованиеЛекарственнойФормы", "");
	Результат.Вставить("НаименованиеЛекарственнойФормыИзмененоВручную", Ложь);
	
	// Дозировка.
	// Игнорируется при приеме, автоматически заполняется при передаче из справочника "Лекарственные препараты"
	// (блок MNNInfo\positionsTradeName\positionTradeName\dosagesInfo документа nsiFarmDrugDictionary).
	// Наименование единицы измерения дозировки.
	// dosageInfo/dosageName, Строка 500.
	Результат.Вставить("НаименованиеЕдиницыИзмеренияДозировки");
	// Единица измерения дозировки. Ссылка на классификатор ОКЕИ (nsiOKEI)/Потребительская единица 
	// измерения дозировки по справочнику  "Лекарственные препараты" (nsiFarmDrugDictionary)
	// (блок MNNsInfo\MNNInfo\dosagesInfo\dosageInfo\dosageUser\ dosageUserOKEI).
	// Ссылка на классификатор ОКЕИ (nsiOKEI).
	// dosageInfo/dosageOKEI/code, Число(4).
	Результат.Вставить("КодЕдиницыИзмеренияДозировки", 0);
	// Национальное условное обозначение (поле localSymbol в справочнике ОКЕИ (nsiOKEI)).
	// Игнорируется при приеме. автоматически заполняется значением из справочника и выгружается.
	// dosageInfo/dosageOKEI/nationalCode, Строка 50.
	Результат.Вставить("НациональноеОбозначениеЕдиницыИзмеренияДозировки");
	// Полное наименование единицы измерения (поле fullName  в справочнике ОКЕИ (nsiOKEI)).
	// Игнорируется при приеме. автоматически заполняется значением из справочника и выгружается.
	// dosageInfo/dosageOKEI/name, Строка 1000.
	Результат.Вставить("ПолноеНаименованиеЕдиницыИзмеренияДозировки");
	// Значение дозировки.
	// dosageInfo/dosageValue, Число (21,10).
	Результат.Вставить("ЗначениеДозировки", 0);
	// Полная форма дозировки.
	// dosageInfo/dosageGRLSValue, Строка 500.
	Результат.Вставить("ПолнаяФормаДозировки", "");
	// Наименование потребительской единицы дозировки по справочнику  "Дозировки лекарственных препаратов".
	// dosageInfo/dosageUserName, Строка 500.
	Результат.Вставить("НаименованиеПотребительскойЕдиницыДозировки");
	Результат.Вставить("ДозировкаИзмененаВручную", Ложь);
	
	// Упаковка.
	// Количество лекарственных форм в первичной упаковке.
	// Игнорируются при приеме. Автоматически заполняется при передаче из справочника "Лекарственные препараты"
	// (поле MNNInfo\positionsTradeName\positionTradeName\packagingsInfo\packagingInfo\packaging1Quantity
	// документа nsiFarmDrugDictionary).
	// packagingsInfo/packagingInfo/packaging1Quantity, Число(12, 10).
	Результат.Вставить("КоличествоЛекарственныхФормВПервичнойУпаковке");
	// Количество первичных упаковок во вторичной (потребительской) упаковке.
	// Игнорируются при приеме. Автоматически заполняется при передаче из справочника
	// "Лекарственные препараты"
	// (поле MNNInfo\positionsTradeName\positionTradeName\
	// packagingsInfo\packagingInfo\packaging1Quantity документа nsiFarmDrugDictionary).
	// packagingsInfo/packagingInfo/packaging2Quantity, Число(11).
	Результат.Вставить("КоличествоПервичныхУпаковокВПотребительскойУпаковке");
	// Наименование вида первичной упаковки по справочнику "Лекарственные препараты"
	// (поле MNNInfo\positionsTradeName\positionTradeName\packagingsInfo\packagingInfo
	// \primaryPackagingInfo\primaryPackagingName  документа nsiFarmDrugDictionary).
	// При приеме контролируется наличие в справочнике "Лекарственные препараты"
	// ЕИС первичной упаковки с таким наименованием и принадлежность первичной
	// упаковки с указанным наименованием к ТН с кодом, указанным в поле positionTradeNameExternalCode.
	// packagingsInfo/packagingInfo/primaryPackagingInfo/primaryPackagingName, Строка 500.
	Результат.Вставить("НаименованиеВидаПервичнойУпаковки");
	// Количество лекарственных форм во вторичной (потребительской) упаковке.
	// Игнорируется при приеме, автоматически рассчитывается как произведение packaging1Quantity*packaging2Quantity.
	// packagingsInfo/packagingInfo/primaryPackagingInfo/sumaryPackagingQuantity, Число(33, 11)
	Результат.Вставить("КоличествоЛекарственныхФормВПотребительскойУпаковке");
	
	Результат.Вставить("УпаковкаИзмененаВручную", Ложь);
	
	
	// Производитель
	// Упаковка
	// Изменения
	
	// Признак редактирования сведений по справочнику. Игнорируется при приеме,
	// при передаче устанавливается, если хотя бы один из блоков (полей) был отредактирован вручную.
	// isEdited, Булево.
	Результат.Вставить("БылиРучныеИзменеия", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ТипОбъектаЗакупкиКонтрактаТовар()
	
	Возврат "PRODUCT";
	
КонецФункции

Функция ТипОбъектаЗакупкиКонтрактаРабота()
	
	Возврат "WORK";
	
КонецФункции

Функция ТипОбъектаЗакупкиКонтрактаУслуга()
	
	Возврат "SERVICE";
	
КонецФункции

Функция ОбъектЗакупкиУслугаИлиРабота(ОбъектЗакупки) Экспорт
	
	Если ОбъектЗакупки.Тип = Перечисления.ТипыОбъектовЗакупкиЕИС.Работа
		ИЛИ ОбъектЗакупки.Тип = Перечисления.ТипыОбъектовЗакупкиЕИС.Услуга Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция НовыйОбъектЗакупки()
	
	// Отображение типа zfcs_contract2015PurchaseObjectInfoType
	Результат = Новый Структура;
	
	Результат.Вставить("НомерСтроки");

	// Идентификаторы.
	Результат.Вставить("ВнутреннийИдентификаторЕИС",);// sid
	Результат.Вставить("ВнешнийИдентификатор",);// externalSid
	// GUID объекта закупки. Игнорируется при приеме, используется для электронного актирования
	Результат.Вставить("Идентификатор",);// guid
	
	// Классификаторы.
	// Значение блоков OKPD/OKPD2/KTRU игнорируется и заполняется значением соответствующей позиции КТРУ,
	// в случае если контракт создан на основании извещения об осуществлении закупки
	// (заполнен блок foundation\fcsOrder\order\notificationNumber)
	// и в извещении заполнен код по КТРУ, либо в случае если контракт создан
	// на основании позиции плана-графика (заполнен блок foundation\singleCustomer\tenderPlanInfo
	// или foundation\ notOosOrder\ tenderPlanInfo) и в такой позиции заполнен код по КТРУ.
	// В других случаях сохраняется значение одного из блоков OKPD/OKPD2/KTRU.
	Результат.Вставить("ОКПД", ДанныеОКПД());
	Результат.Вставить("ОКПД2", ДанныеОКПД());
	Результат.Вставить("КТРУ", ДанныеКТРУ());
	// Используемый для описания объекта закупки классификатор.
	// Результат функций КлассификаторКТРУ(), КлассификаторОКПД(), КлассификаторОКПД2()
	Результат.Вставить("Классификатор");// ОКПД, ОКПД2, КТРУ
	
	// Наименование объекта закупки в соответствии с контрактом. Контролируется обязательность заполнения.
	// Игнорируется при приеме, если тип изменения modification/contractChange и не установлен признак
	// products/product/improvedProductReplacement и заполняется автоматически значением
	// из предыдущей версии сведений о контракте, в противном случае принимается и сохраняется.
	Результат.Вставить("Наименование");
	// Тип объекта закупки.
	// Перечисление.ТипыОбъектовЗакупкиЕИС
	Результат.Вставить("Тип");
	// Признак работы или услуги.
	Результат.Вставить("ЭтаРаботаИлиУслуга", Ложь);
	// Единица измерения. 
	// Блок по бизнесу обязателен для заполнения.
	Результат.Вставить("ОКЕИ", НовоеЗначениеОКЕИ());
	// Причины выбора единицы измерения, отличающейся от указанной в КТРУ.
	// Контролируется обязательность заполнения, если значение поля products/product/OKEI
	// не соответствует единице измерения указанной позиции КТРУ products/product/KTRU/code
	// в справочнике "Каталог товаров, работ, услуг (КТРУ) " (nsiKTRU).
	Результат.Вставить("ПричинаВыбораЕдиницыНеИзКТРУ", ПричинаВыбораЕдиницыНеИзКТРУ());
	// Цена за единицу в валюте контракта.
	Результат.Вставить("Цена");
	Результат.Вставить("ЦенаВРублях");
	Результат.Вставить("ЦенаБезНДС");
	Результат.Вставить("ЦенаБезНДСВРублях");
	// Количество поставляемого товара, объёма выполняемых работ, оказываемых услуг. Игнорируется при приеме,
	// если указан признак "Невозможно указать сведения о количестве товара, работы, услуги" products/quantityUndefined в значение true.
	// Не заполняется  в случае, если заполнен блок "Сведения об объекте закупки в том случае,
	// когда объектом закупки является лекарственный препарат" (drugPurchaseObjectInfo) 
	Результат.Вставить("Количество");
	// Объем работы, услуги (указание объема в текстовом виде). Допускается указание, только в случае, если в поле type указано значение WORK - работа или
	// SERVICE - услуга. Игнорируется при приеме, если указан признак "Невозможно указать сведения о количестве товара, работы, услуги" products/quantityUndefined в значение true. Не заполняется  в случае, если заполнен блок "Сведения об объекте закупки в том случае, когда объектом закупки является лекарственный препарат" (drugPurchaseObjectInfo) 	
	// volumeTextForm, Строка 500.
	Результат.Вставить("ОбъемРаботыУслуги");
	// Стоимость поставляемого товара, выполняемых работ, оказываемых услуг в валюте контракта.
	// Не заполняется  в случае, если заполнен блок "Сведения об объекте закупки в том случае,
	// когда объектом закупки является лекарственный препарат" (drugPurchaseObjectInfo)
	Результат.Вставить("Сумма");
	Результат.Вставить("СуммаВРублях");
	Результат.Вставить("СуммаБезНДС");
	Результат.Вставить("СуммаБезНДСВРублях");
	// Ставка НДС, процентов. 
	// Допустимые значения:
	// 20 - 20%;
	// 18 - 18%;
	// 10 - 10%;
	// 0 - 0%;
	// n - Без НДС.
	// При приеме контролируется обязательность заполнение поля.
	Результат.Вставить("СтавкаНДС");
	// Сумма НДС в валюте контракта.
	Результат.Вставить("СуммаНДС");
	Результат.Вставить("СуммаНДСВРублях");
	// Массив стран происхождения.
	// см. НовыеДанныеСтраны().
	Результат.Вставить("СтраныПросхождения", Новый Массив);
	Результат.Вставить("ОбъектЗамененНаЛучший", Ложь);
	// Невозможно указать сведения о количестве товара, работы, услуги.
	// Игнорируется при приеме и заполняется соответствующим значением,
	// в случае если контракт создан на основании извещения об осуществлении закупки
	// (заполнен блок foundation\fcsOrder\order\notificationNumber)
	// из поля «Невозможно определить количество товара,
	// объем подлежащих выполнению работ, оказанию услуг» (quantityUndefined)
	// (Для извещений о проведении ЭОК, ЭОК-ОУ, ЭОКД, ЭКЗ, ЭЗП, ЭЗакК, ЭЗакК-ОУ,
	// ЭЗакКД, ЭЗакА поле notificationInfo/purchaseObjectsInfo/notDrugPurchaseObjectsInfo/quantityUndefined,
	// для извещения о проведении ЭА lot/quantityUndefined).
	// В других случаях значение поля принимается и сохраняется
	Результат.Вставить("НевозможноУказатьКоличество", Ложь);//quantityUndefined, необязательный
	Результат.Вставить("СведенияОбИзмененияхОбъекта", СведенияОбИзмененияхОбъектаЗакупки());// productsChange, необязательный
	// Объектом закупки является медицинское изделие. 
	// При приеме контролируется обязательность заполнения, если 
	// позиция КТРУ, указанная в блоке products/product/KTRU, включает в себя позицию номенклатурной
	// классификации медицинских изделий по видам (НКМИ)
	// (т.е в выгрузке справочника nsiKTRU для данной позиции как минимум в одном поле classifiers\classifier\name указано значение
	// "Номенклатурная классификация медицинских изделий по видам")
	Результат.Вставить("ЭтоМедицинскоеИзделие", Ложь);// isMedicalProduct, необязательный
	// Код по НКМИ
	// При приеме контролируется на присутствие значения кода в позиции НКМИ позиции КТРУ, указанной в блоке products/product/KTRU 
	// (т.е в выгрузке справочника nsiKTRU для данной позиции КТРУ заполнен блок position\data\NSI\classifiers\classifier,
	// как минимум в одной записи в поле classifiers\classifier\name указано значение
	// "Номенклатурная классификация медицинских изделий по видам", а в поле classifiers\classifier\values\value\code
	// записи указан данный код)
	Результат.Вставить("КодМедицинскогоИзделия");// medicalProductCode, обязательный
	Результат.Вставить("НаименованиеМедицинскогоИзделия");// medicalProductCode, обязательный
	// Признак того, что объектом закупки является лекарственный препарат.
	Результат.Вставить("ЭтоЛекарственныйПрепарат", Ложь);
	// Сведения об объекте закупки в том случае, когда объектом закупки является лекарственный препарат.
	// см. НовыеСведенияОЛекарственномПрепаратеДляКонтракта().
	Результат.Вставить("СведенияОЛекарственномПрепарате");
	
	Возврат Результат;
	
КонецФункции

Функция ИзвлечьСведенияОбОбъектахЗакупки(ДанныеКонтракта) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОбъектыЗакупки", Новый Массив);
	Результат.Вставить("ОбъектыЗакупкиПоИдентификаторам", Новый Соответствие);
	
	ОбъектыЗакупки = Результат.ОбъектыЗакупки;
	ОбъектыЗакупкиПоИдентификаторам = Результат.ОбъектыЗакупкиПоИдентификаторам;
	
	НомерСтроки = 1;
	ДанныеОбъектов = ДанныеКонтракта.products;
	Для каждого Данные Из ЗначениеВКоллекцию(ДанныеОбъектов.product) Цикл
		
		ОбъектЗакупки = НовыйОбъектЗакупки();
		
		ОбъектЗакупки.НомерСтроки = НомерСтроки;
		
		// Идентификаторы.
		Идентификатор = ЗначениеНеобязательногоСвойства(Данные, "guid");
		ОбъектЗакупки.ВнутреннийИдентификаторЕИС = ЗначениеНеобязательногоСвойства(Данные, "sid");
		ОбъектЗакупки.ВнешнийИдентификатор = ЗначениеНеобязательногоСвойства(Данные, "externalSid");
		ОбъектЗакупки.Идентификатор = Идентификатор;
		
		// Классификаторы.
		Если Данные.Свойства().Получить("OKPD") <> Неопределено Тогда
			ОбъектЗакупки.Классификатор = КлассификаторОКПД();
			ДанныеКлассификатора = Данные.OKPD;
			ОбъектЗакупки.ОКПД.Код = ДанныеКлассификатора.code;
			ОбъектЗакупки.ОКПД.Наименование = ЗначениеНеобязательногоСвойства(ДанныеКлассификатора, "name");
		ИначеЕсли Данные.Свойства().Получить("OKPD2") <> Неопределено Тогда
			ОбъектЗакупки.Классификатор = КлассификаторОКПД2();
			ДанныеКлассификатора = Данные.OKPD2;
			ОбъектЗакупки.ОКПД2.Код = ДанныеКлассификатора.code;
			ОбъектЗакупки.ОКПД2.Наименование = ЗначениеНеобязательногоСвойства(ДанныеКлассификатора, "name");
		ИначеЕсли Данные.Свойства().Получить("KTRU") <> Неопределено Тогда
			ОбъектЗакупки.Классификатор = КлассификаторКТРУ();
			ДанныеКлассификатора = Данные.KTRU;
			ОбъектЗакупки.КТРУ.Код = ДанныеКлассификатора.code;
			ОбъектЗакупки.КТРУ.Наименование = ЗначениеНеобязательногоСвойства(ДанныеКлассификатора, "name");
			ОбъектЗакупки.КТРУ.Версия = ЗначениеНеобязательногоСвойства(ДанныеКлассификатора, "versionNumber");
			ОбъектЗакупки.КТРУ.ИдентификаторВерсии = ЗначениеНеобязательногоСвойства(ДанныеКлассификатора, "versionId");
			Если ДанныеКлассификатора.Свойства().Получить("OKPD2") <> Неопределено Тогда
				ДанныеОКПД2 = ДанныеКлассификатора.OKPD2;
				ОбъектЗакупки.КТРУ.ОКПД2  = ДанныеОКПД();
				ОбъектЗакупки.КТРУ.ОКПД2.Код = ДанныеОКПД2.code;
				ОбъектЗакупки.КТРУ.ОКПД2.Наименование = ЗначениеНеобязательногоСвойства(ДанныеОКПД2, "name");
			КонецЕсли;
		КонецЕсли;
		
		ОбъектЗакупки.Наименование = ЗначениеНеобязательногоСвойства(Данные, "name");
		
		// Тип объекта закупки.
		Тип = ЗначениеНеобязательногоСвойства(Данные, "type");
		Если НЕ ПустаяСтрока(Тип) Тогда
			ОбъектЗакупки.Тип = ОпределитьТипОбъектаЗакупкиПоСтрокеИзКонтракта(Тип);
			Если ОбъектЗакупки.Тип = Перечисления.ТипыОбъектовЗакупкиЕИС.Работа
				ИЛИ ОбъектЗакупки.Тип = Перечисления.ТипыОбъектовЗакупкиЕИС.Услуга Тогда
				ОбъектЗакупки.ЭтаРаботаИлиУслуга = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Единица измерения.
		Если Данные.Свойства().Получить("OKEI") <> Неопределено Тогда
			ОбъектЗакупки.ОКЕИ.Код = Данные.OKEI.code;
			ОбъектЗакупки.ОКЕИ.НациональныйКод = ЗначениеНеобязательногоСвойства(Данные.OKEI, "nationalCode");
			ОбъектЗакупки.ОКЕИ.Наименование = ЗначениеНеобязательногоСвойства(Данные.OKEI, "fullName");
		КонецЕсли;
		
		// Цена, ставка НДС, сумма НДС
		ОбъектЗакупки.Цена = XMLЗначение(Тип("Число"), Данные.price);
		ОбъектЗакупки.ЦенаВРублях = ЗначениеНеобязательногоСвойства(Данные, "priceRUR", "Число");
		ОбъектЗакупки.ЦенаБезНДС = ЗначениеНеобязательногоСвойства(Данные, "whitoutVATPrice", "Число");
		ОбъектЗакупки.ЦенаБезНДСВРублях = ЗначениеНеобязательногоСвойства(Данные, "whitoutVATPriceRUR", "Число");
		ОбъектЗакупки.Количество = ЗначениеНеобязательногоСвойства(Данные, "quantity", "Число");
		ОбъектЗакупки.ОбъемРаботыУслуги = ЗначениеНеобязательногоСвойства(Данные, "volumeTextForm", "Строка");
		ОбъектЗакупки.Сумма = ЗначениеНеобязательногоСвойства(Данные, "sum", "Число");
		ОбъектЗакупки.СуммаВРублях = ЗначениеНеобязательногоСвойства(Данные, "sumRUR", "Число");
		ОбъектЗакупки.СуммаБезНДС = ЗначениеНеобязательногоСвойства(Данные, "withoutVATSum", "Число");
		ОбъектЗакупки.СуммаБезНДСВРублях = ЗначениеНеобязательногоСвойства(Данные, "withoutVATSumRUR", "Число");
		ОбъектЗакупки.СтавкаНДС = ЗначениеНеобязательногоСвойства(Данные, "VATRate");
		ОбъектЗакупки.СуммаНДС = ЗначениеНеобязательногоСвойства(Данные, "VATSum", "Число");
		
		// Страна происхождения.
		Если Данные.Свойства().Получить("originCountry") <> Неопределено Тогда
			Для каждого ДанныеСтраны Из ЗначениеВКоллекцию(Данные.originCountry) Цикл
				Страна = НовыеДанныеСтраны();
				Страна.Код = ДанныеСтраны.countryCode;
				Страна.ПолноеНаименование= ЗначениеНеобязательногоСвойства(ДанныеСтраны, "countryFullName");
				ОбъектЗакупки.СтраныПросхождения.Добавить(Страна);
			КонецЦикла;
		КонецЕсли;
		
		// Прочие свойста.
		ОбъектЗакупки.ОбъектЗамененНаЛучший = ЗначениеНеобязательногоСвойства(Данные, "improvedProductReplacement", "Булево");
		ОбъектЗакупки.НевозможноУказатьКоличество = ЗначениеНеобязательногоСвойства(Данные, "quantityUndefined", "Булево");
		
		// Лекарственные препараты и медицинские изделия.
		ОбъектЗакупки.ЭтоМедицинскоеИзделие = ЗначениеНеобязательногоСвойства(Данные, "isMedicalProduct", "Булево");
		Если Данные.Свойства().Получить("drugPurchaseObjectInfo") <> Неопределено Тогда
			ОбъектЗакупки.ЭтоЛекарственныйПрепарат = Истина;
			ОбъектЗакупки.СведенияОЛекарственномПрепарате = ИзвлечьДанныеЛекарственногоПрепарата(Данные);
		КонецЕсли;
		
		ОбъектыЗакупки.Добавить(ОбъектЗакупки);
		Если ЗначениеЗаполнено(Идентификатор) Тогда
			ОбъектыЗакупкиПоИдентификаторам.Вставить(Идентификатор, ОбъектЗакупки);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат ОбъектыЗакупки;
	
КонецФункции

Функция ПричинаВыбораЕдиницыНеИзКТРУ()
	
	Результат = Новый Структура;
	Результат.Вставить("Код");
	Результат.Вставить("Наименование");
	Результат.Вставить("ИнаяПричина");
	Возврат Результат;
	
КонецФункции

Функция СостояниеКонтрактаИсполнение()
	
	// Значение "E" в данных контракта.
	Возврат Перечисления.СтатусыГосударственныхКонтрактовЕИС.Исполнение;
	
КонецФункции

Функция СостояниеКонтрактаИсполнениеПрекращено()
	
	// Значение "ET" в данных контракта.
	Возврат Перечисления.СтатусыГосударственныхКонтрактовЕИС.ИсполнениеПрекращено;
	
КонецФункции

Функция СостояниеКонтрактаИсполнениеЗавершено()
	
	// Значение "EC" в данных контракта.
	Возврат Перечисления.СтатусыГосударственныхКонтрактовЕИС.ИсполнениеЗавершено;
	
КонецФункции

Функция СостояниеКонтрактаАннулировано()
	
	// Значение "IN" в данных контракта.
	Возврат Перечисления.СтатусыГосударственныхКонтрактовЕИС.Аннулировано;
	
КонецФункции

Функция СостояниеКонтрактаНеопределено()
	
	// Значение currentContractStage в данных контракта отсутствует.
	Возврат Перечисления.СтатусыГосударственныхКонтрактовЕИС.Неопределен;
	
КонецФункции

Функция ОпределитьСостояниеКонтракта(Данные)
	
	Этап = ЗначениеНеобязательногоСвойства(Данные, "currentContractStage");
	Если Этап = "E" Тогда
		Возврат СостояниеКонтрактаИсполнение();
	ИначеЕсли Этап = "ET" Тогда
		Возврат СостояниеКонтрактаИсполнениеПрекращено();
	ИначеЕсли Этап = "EC" Тогда
		Возврат СостояниеКонтрактаИсполнениеЗавершено();
	ИначеЕсли Этап = "IN" Тогда
		Возврат СостояниеКонтрактаАннулировано();
	Иначе
		Возврат СостояниеКонтрактаНеопределено();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РазборXDTO

Функция ОпределитьСтатусДокумента(СтроковоеПредставлениеСтатуса)
	
	Статусы = Новый Соответствие();
	Статусы.Вставить("ON_SIGNING", Перечисления.СтатусыДокументовЕИС.НаПодписании);
	Статусы.Вставить("DELIVER_ERROR", Перечисления.СтатусыДокументовЕИС.ОшибкаДоставки);
	Статусы.Вставить("AWAIT_CORFIRM_RECEIVING", Перечисления.СтатусыДокументовЕИС.ОжидаетПодтвержденияОПолучении);
	Статусы.Вставить("UNDER_CONSIDERATION", Перечисления.СтатусыДокументовЕИС.НаРассмотрении);
	Статусы.Вставить("AWAIT_SIGNING", Перечисления.СтатусыДокументовЕИС.ОжидаетПодписания);
	Статусы.Вставить("SIGNED", Перечисления.СтатусыДокументовЕИС.Подписано);
	Статусы.Вставить("SIGNED_PARTIAL_ACCEPTANCE", Перечисления.СтатусыДокументовЕИС.ПодписаноСЧастичнойПриемкой);
	Статусы.Вставить("DENIED_BY_RECEIVE", Перечисления.СтатусыДокументовЕИС.ОтказаноПриПриемке);
	Статусы.Вставить("DENIED", Перечисления.СтатусыДокументовЕИС.ОтказаноПриРассмотрении);
	Статусы.Вставить("APPEAL", Перечисления.СтатусыДокументовЕИС.ПолученоУведомлениеОНамеренииОбжаловатьОтказ);
	Статусы.Вставить("APPEAL_WITHDRAWN", Перечисления.СтатусыДокументовЕИС.ОтозваноУведомлениеОНамеренииОбжаловатьОтказ);
	Статусы.Вставить("SENT_TO_SUPPLIER", Перечисления.СтатусыДокументовЕИС.НаправленоПоставщику);
	
	Возврат Статусы[СтроковоеПредставлениеСтатуса];
	
КонецФункции

Функция РазобратьДанныеОбъекта(Данные, ЭтоЗаказчик = Ложь)
	
	Объект = НовыеСведенияОбОбъектеЕИС();
	
	Префикс = "lkp";
	Если ЭтоЗаказчик Тогда
		Префикс = "lkz";
	КонецЕсли;
	
	ДанныеОбъекта = Данные.Body[Префикс + "GetObjectInfoResponse"].objectInfo;
	ТранспортныйКонтейнер = Данные.Body[Префикс + "GetObjectInfoResponse"].ФайлПакет;
	
	Объект = НовыеСведенияОбОбъектеЕИС();
	Объект.Идентификатор = ЗначениеНеобязательногоСвойства(ДанныеОбъекта, "id");
	Объект.ИдентификаторДокумента = ЗначениеНеобязательногоСвойства(ДанныеОбъекта, "objectId");
	Объект.ВидДокумента = ДанныеОбъекта.documentKind;
	Объект.ДатаДокумента = ДанныеОбъекта.documentDate;
	Объект.ВерсияСхемы = ДанныеОбъекта.schemeVersion;
	Объект.НомерВерсии = ЗначениеНеобязательногоСвойства(ДанныеОбъекта, "versionNumber", "Число");
	Статус = ЗначениеНеобязательногоСвойства(ДанныеОбъекта, "status");
	Если ЗначениеЗаполнено(Статус) Тогда
		Объект.Статус = ОпределитьСтатусДокумента(Статус);
	КонецЕсли;
	
	// Извлекаем данные документа.
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(Запись, ТранспортныйКонтейнер);
	Содержимое = Запись.Закрыть();
	Содержимое = СтрЗаменить(Содержимое, "anyType", "ФайлПакет");
	Содержимое = "<?xml version=""1.0"" encoding=""" + КодировкаТекстаСервисаЕИС() + """?>"
		+ Символы.ПС + Содержимое;
	Объект.Содержимое = Содержимое;
	Кодировка = КодировкаТекстаСервисаЕИС();
	Объект.ДвоичныеДанныеСодержимого = ПолучитьДвоичныеДанныеИзСтроки(
		Содержимое, Кодировка);
	
	Возврат Объект;
	
КонецФункции

Функция РазобратьСписокОбъектов(Данные)
	
	Объекты = Новый Массив;
	
	Если ЕстьСвойство(Данные.Body, "lkpGetObjectListResponse") Тогда
		ДанныеОтвета = Данные.Body.lkpGetObjectListResponse;
	Иначе
		ДанныеОтвета = Данные.Body.lkzGetObjectListResponse;
	КонецЕсли;
	
	Если ДанныеОтвета.objectList.Свойства().Получить("objectInfo") = Неопределено Тогда
		// отсутствуют данные по объектам.
		Возврат Объекты;
	КонецЕсли;
	
	ДанныеОбъектов = ЗначениеВКоллекцию(ДанныеОтвета.objectList.objectInfo);
	Для каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		Объект = НовыеСведенияОбОбъектеЕИС();
		Объект.Идентификатор = ЗначениеНеобязательногоСвойства(ДанныеОбъекта, "id");
		Объект.ИдентификаторДокумента = ЗначениеНеобязательногоСвойства(ДанныеОбъекта, "objectId");
		Объект.ИдентификаторФайла = ЗначениеНеобязательногоСвойства(ДанныеОбъекта, "idFile");
		Объект.ВидДокумента = ДанныеОбъекта.documentKind;
		Объект.ДатаДокумента = ДанныеОбъекта.documentDate;
		Объект.ВерсияСхемы = ДанныеОбъекта.schemeVersion;
		Объект.НомерВерсии = ЗначениеНеобязательногоСвойства(ДанныеОбъекта, "versionNumber", "Число");
		Статус = ЗначениеНеобязательногоСвойства(ДанныеОбъекта, "status");
		Объект.Статус = ОпределитьСтатусДокумента(Статус);
		Объекты.Добавить(Объект);
	КонецЦикла;
	
	Возврат Объекты;
	
КонецФункции

Функция РазобратьСписокКонтрактов(Данные)
	
	Контракты = Новый Массив;
	
	Если Данные.Body.lkpGetContractsListResponse.
		contractList.Свойства().Получить("contractInfo") = Неопределено Тогда
		// отсутствуют данные по контрактам.
		Возврат Контракты;
	КонецЕсли;
	
	ДанныеКонтрактов = ЗначениеВКоллекцию(Данные.Body.
		lkpGetContractsListResponse.contractList.contractInfo);
	Для каждого ДанныеКонтракта Из ДанныеКонтрактов Цикл
		Контракт = НовыеСведенияОКонтрактеССервераЕИС();
		Контракт.Идентификатор = ДанныеКонтракта.id;
		Контракт.ВнешнийИдентификатор = ЗначениеНеобязательногоСвойства(ДанныеКонтракта, "externalId");
		Контракт.ДатаПубликации = XMLЗначение(Тип("Дата"), ДанныеКонтракта.publishDate);
		Контракт.РеестровыйНомер = ДанныеКонтракта.regNumber;
		ИдентификаторУчастникаДокументооборотаЗаказчика = ДанныеКонтракта.EDOAddInfo.customerID;
		Контракт.ИдентификаторУчастникаДокументооборотаЗаказчика =
			ИдентификаторУчастникаДокументооборотаЗаказчика;
		Контракт.ИГК = ЗначениеНеобязательногоСвойства(ДанныеКонтракта.EDOAddInfo, "IGK");
		Контракт.Ссылка = ДанныеКонтракта.url;
		
		РезультатСкачивания = ПолучениеФайловИзИнтернета.
			СкачатьФайлВоВременноеХранилище(Контракт.Ссылка);
		Если НЕ РезультатСкачивания.Статус Тогда
			ОписаниеОшибки = ""
				+ РезультатСкачивания.КодСостояния 
				+ " " + РезультатСкачивания.СообщениеОбОшибке;
			Контракт.ОшибкаПриСкачивании = Истина;
			Контракт.ОписаниеОшибкиСкачивания = ОписаниеОшибки;
			ВариантСобытия = НСтр("ru = 'Загрузка данных контракта с сервера ЕИС'");
			ЗаписатьСобытиеВЖурнал(ОписаниеОшибки, ВариантСобытия);
		Иначе
			Данные = ПолучитьИзВременногоХранилища(РезультатСкачивания.Путь);
			Контракт.ДвоичныеДанныеКонтракта = Данные;
			Контракт.ДанныеКонтракта = РазобратьФайлКонтракта(Данные,
				ИдентификаторУчастникаДокументооборотаЗаказчика);
			Контракт.ЭтоЗакрытыйКонтракт = Контракт.ДанныеКонтракта.ЭтоЗакрытыйКонтракт;
		КонецЕсли;
		
		Контракты.Добавить(Контракт);
	КонецЦикла;
	
	Возврат Контракты;
	
КонецФункции

Функция НовыеСведенияОПолномочияхПользователя()
	
	Результат = Новый Структура;
	// Код области полномочий
	// authorityArea/code, Строка(1-2)
	Результат.Вставить("КодОбласти", "");
	// Наименование области полномочий
	// name, Строка (1-2000)
	Результат.Вставить("НаименованиеОбласти");
	// Основания полномочий
	// authorityFoundation, Строка (1-255)
	Результат.Вставить("ОснованиеПолномочий", "");
	Возврат Результат;
	
КонецФункции

Функция ТипПодписантаФизическоеЛицо()
	
	Возврат Перечисления.ТипыПодписантовЕИС.ФизическоеЛицо;
	
КонецФункции

Функция ТипПодписантаПредприниматель()
	
	Возврат Перечисления.ТипыПодписантовЕИС.ИндивидуальныйПредприниматель;
	
КонецФункции

Функция ТипПодписантаПредставительЮрЛица()
	
	Возврат Перечисления.ТипыПодписантовЕИС.ПредставительЮридическогоЛица;
	
КонецФункции

Функция НовыеСведенияОПодписанте() Экспорт
	
	Возврат ЭлектронноеАктированиеЕИСКлиентСервер.НовыеСведенияОПодписанте();
	
КонецФункции

Функция РазобратьСведенияОПоставщикеИЕгоПодписантах(Данные)
	
	Результат = НовыеСведенияОПоставщикеИЕгоПодписантах();
	
	УзелИнформации = Данные.Body.lkpGetParticipantInfoResponse.participantInfo;
	
	Результат.НомерРеестровойЗаписиЕРУЗ = УзелИнформации.regNum;
	Результат.ИдентификаторУчастникаДокументооборота = УзелИнформации.supplierID;
	Результат.ПолноеНаименование = УзелИнформации.fullName;
	
	Для каждого Подписант Из ЗначениеВКоллекцию(УзелИнформации.signersInfo.signerInfo) Цикл
		
		СведенияОПодписанте = НовыеСведенияОПодписанте();
		СведенияОПодписанте.Идентификатор = XMLЗначение(Тип("Число"), Подписант.userId);
		СведенияОПодписанте.ДатаРегистрации = ЗначениеНеобязательногоСвойства(
			Подписант.commonInfo, "regDate", "Дата");
		СведенияОПодписанте.ДатаМодификации = ЗначениеНеобязательногоСвойства(
			Подписант.commonInfo, "modificationDate", "Дата");
		СведенияОПодписанте.Фамилия = Подписант.nameInfo.lastName;
		СведенияОПодписанте.Имя = Подписант.nameInfo.firstName;
		СведенияОПодписанте.Отчество = ЗначениеНеобязательногоСвойства(
			Подписант.nameInfo, "middleName");
		Шаблон = "%1 %2 %3";
		СведенияОПодписанте.ФИО = СтрШаблон(Шаблон,
			СведенияОПодписанте.Фамилия,
			СведенияОПодписанте.Имя,
			СведенияОПодписанте.Отчество);
			
		Если Подписант.commonInfo.status = "A" Тогда
			СведенияОПодписанте.Статус =
				ЭлектронноеАктированиеЕИСКлиентСервер.СтатусПользователяАктивен();
		ИначеЕсли Подписант.commonInfo.status = "B" Тогда
			СведенияОПодписанте.Статус =
				ЭлектронноеАктированиеЕИСКлиентСервер.СтатусПользователяЗаблокирован();
		КонецЕсли;
		
		Если ЕстьСвойство(Подписант.authoritysInfo, "authorityInfo") Тогда
			Полномочия = ЗначениеВКоллекцию(Подписант.authoritysInfo.authorityInfo);
			Для каждого Полномочие Из Полномочия Цикл
				СведенияОПолномочии = НовыеСведенияОПолномочияхПользователя();
				СведенияОПолномочии.КодОбласти = Полномочие.authorityArea.code;
				СведенияОПолномочии.НаименованиеОбласти = ЗначениеНеобязательногоСвойства(
					Полномочие.authorityArea, "name");
				СведенияОПолномочии.ОснованиеПолномочий = Полномочие.authorityFoundation;
				СведенияОПодписанте.Полномочия.Добавить(СведенияОПолномочии);
			КонецЦикла;
		КонецЕсли;
		
		ТипПодписанта = Подписант.signerType;
		СвойствоИП = "individualEntrepreneurInfo";
		СвойствоФЛ = "individualPersonInfo";
		СвойствоЮЛ = "legalEntityInfo";
		Если ЕстьСвойство(ТипПодписанта, СвойствоИП) Тогда
			СведенияОПодписанте.ТипПодписанта = ТипПодписантаПредприниматель();
			СведенияОПодписанте.ИНН = ТипПодписанта[СвойствоИП].INN;
		ИначеЕсли ЕстьСвойство(ТипПодписанта, СвойствоФЛ) Тогда
			СведенияОПодписанте.ТипПодписанта = ТипПодписантаФизическоеЛицо();
			СведенияОПодписанте.ИНН = ТипПодписанта[СвойствоФЛ].INN;
		ИначеЕсли ЕстьСвойство(ТипПодписанта, СвойствоЮЛ) Тогда
			СведенияОПодписанте.ТипПодписанта = ТипПодписантаПредставительЮрЛица();
			СведенияОПодписанте.ИНН = ТипПодписанта[СвойствоЮЛ].INN;
			СведенияОПодписанте.НаименованиеОрганизации = ТипПодписанта[СвойствоЮЛ].fullName;
			СведенияОПодписанте.Должность = ЗначениеНеобязательногоСвойства(
				ТипПодписанта[СвойствоЮЛ], "position");
		КонецЕсли;
		
		СведенияОПодписанте.АктуальностьСвязиСРеестровойЗаписьюЕРУЗ =
			XMLЗначение(Тип("Булево"), Подписант.isActual);
			
		Результат.Подписанты.Добавить(СведенияОПодписанте);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхССервера

Функция РезультатПолученияСпискаКонтрактовПоставщика()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	// Массив структур, см. НовыеСведенияОКонтрактеССервераЕИС().
	Результат.Вставить("Контракты", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Список контрактов поставщика.
// 
// Параметры:
//  Организация Организация
//  СДаты - Дата, Неопределено - время указывается в универсальном формате.
//  ПоДату - Дата, Неопределено - время указывается в универсальном формате.
//  ИНН - Строка - ИНН
//  КПП - Строка - КПП
//  НомерКонтракта - Строка, Неопределено - Номер контракта
// 
// Возвращаемое значение:
//  Структура - Список контрактов поставщика:
// * Выполнено - Булево - Истина, если не было ошибок.
// * ОписаниеОшибки - Строка - описание ошибки.
// * Контракты - Массив - массив с данными контрактов см. НовыеСведенияОКонтрактеССервераЕИС().
Функция СписокКонтрактовПоставщика(Организация,
		СДаты = Неопределено,
		ПоДату = Неопределено,
		ИНН = "",
		КПП = "",
		НомерКонтракта = Неопределено) Экспорт
	
	Результат = РезультатПолученияСпискаКонтрактовПоставщика();
	
	Настройки = НастройкиОбменаЕИС(Организация);
	Если Настройки = Неопределено Тогда
		Шаблон = НСтр("ru='Не определены настройки обмена с ЕИС для организации %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(Шаблон, Организация);
		Возврат Результат;
	КонецЕсли;
	
	РегистрационныйНомерЕРУЗ = Настройки.РегистрационныйНомерЕРУЗ;
	ПараметрыЗапроса = ПараметрыЗапросаПолученияСпискаКонтрактов(
		РегистрационныйНомерЕРУЗ,
		СокрЛП(НомерКонтракта));
	Если НЕ ЗначениеЗаполнено(НомерКонтракта) Тогда
		ПараметрыЗапроса.ДатаНачала = СДаты;
		ПараметрыЗапроса.ДатаОкончания = ПоДату;
		ПараметрыЗапроса.ИНН = ИНН;
		ПараметрыЗапроса.КПП = КПП;
	КонецЕсли;
	
	Попытка
		ТекстЗапроса = ТекстЗапросаПолученияСпискаКонтрактовПоставщика(ПараметрыЗапроса);
	Исключение
		Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ОтправитьЗапросСервисуЕИС(Настройки,
		КлючСервераИнформацииДляПоставщика(),
		"lkp-get-contract-list",
		ТекстЗапроса);
		
	Если НЕ РезультатОтправкиЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатОтправкиЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Ответ = ПолучитьИзВременногоХранилища(РезультатОтправкиЗапроса.АдресОтветаSOAP);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Ответ);
	ДанныеОтвета = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	Результат.Контракты = РазобратьСписокКонтрактов(ДанныеОтвета);
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

Функция РезультатСпискаОбъектов()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("АдресОтвета", "");
	Результат.Вставить("АдресЗапроса", "");
	Результат.Вставить("СписокОбъектов", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция СписокОбъектов(Организация, ПараметрыЗапроса, Настройки) Экспорт
	
	Результат = РезультатСпискаОбъектов();
	
	ДляЗаказчика = ПараметрыЗапроса.ДляЗаказчика;
	
	Если Настройки = Неопределено Тогда
		Шаблон = НСтр("ru='Не определены настройки обмена с ЕИС для организации %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(Шаблон, Организация);
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ДляЗаказчика Тогда
		РегистрационныйНомерЕРУЗ = Настройки.РегистрационныйНомерЕРУЗ;
		ПараметрыЗапроса.РегистрационныйНомерЕРУЗ = РегистрационныйНомерЕРУЗ;
	КонецЕсли;
	
	Попытка
		ТекстЗапроса = ТекстЗапросаПолученияСпискаОбъектов(ПараметрыЗапроса);
	Исключение
		Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	Результат.АдресЗапроса = ПоместитьВоВременноеХранилище(ТекстЗапроса, Новый УникальныйИдентификатор);
	
	Если ДляЗаказчика Тогда
		Операция = "lkz-get-object-list-info";
		КлючСервера = КлючСервераИнформацииДляЗаказчика();
	Иначе
		Операция = "lkp-get-object-list-info";
		КлючСервера = КлючСервераИнформацииДляПоставщика();
	КонецЕсли;
	
	РезультатОтправкиЗапроса = ОтправитьЗапросСервисуЕИС(Настройки,
		КлючСервера,
		Операция,
		ТекстЗапроса);
		
	Если НЕ РезультатОтправкиЗапроса.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатОтправкиЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.АдресОтвета = РезультатОтправкиЗапроса.АдресОтветаSOAP;
	
	Ответ = ПолучитьИзВременногоХранилища(РезультатОтправкиЗапроса.АдресОтветаSOAP);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Ответ);
	Данные = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Результат.СписокОбъектов = РазобратьСписокОбъектов(Данные);
	
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтруктурыДанных

Функция НовыеСведенияОбОбъектеЕИС()
	
	Результат = Новый Структура;
	// Идентификатор, по которому может быть запрошен документ.
	// id, обязательный, Строка 36.
	Результат.Вставить("Идентификатор", "");
	// Идентификатор УПД/УКД (титул продавца), к которому относится документ.
	// objectId, необязательный, Строка 36.
	Результат.Вставить("ИдентификаторДокумента");
	// Идентификатор файла.
	// Соответвует атрибуту ИдФайл xml-документа.
	// idFile, Строка 200.
	Результат.Вставить("ИдентификаторФайла", "");
	// Вид документа.
	// documentKind, Строка 50.
	Результат.Вставить("ВидДокумента", "");
	// Дата и время подписания / получения от покупателя документа.
	// documentDate, Дата.
	Результат.Вставить("ДатаДокумента", Дата(1, 1, 1));
	// Версия схемы.
	// schemeVersion, Перечисление.
	Результат.Вставить("ВерсияСхемы", "");
	// Номер последнего изменения УПД/УКД (титул продавца).
	// Заполняется только для УПД/УКД (титул продавца)
	// versionNumber, Число
	Результат.Вставить("НомерВерсии", 0);
	// Статус УПД/УКД (титул продавца).
	// Заполняется только для УПД/УКД (титул продавца).
	// PROJECT - Проект;
	// PENDING_SIGN - На подписании;
	// PENDING_CONFIRMATION_OF_RECEIPT - Ожидает подтверждения получения;
	// UNDER_CONSIDERATION - На рассмотрении;
	// TRANSFER_ERROR - Ошибка доставки;
	// DENIED - Отказано;
	// SIGNED - Подписано;
	// ACCEPTED - Принят к учету,
	// SIGNED_PARTIALLY - Подписано с частичной приемкой;
	// DENIED_ON_REVIEW - Отказано при рассмотрении;
	// DENIED_ON_ACCEPTANCE- Отказано при приемке;
	// APPEAL_REVOKED - Отозвано уведомление о намерении обжаловать отказ;
	// APPEAL_SENT - Направлено уведомление о намерении обжаловать отказ;
	// PENDING_APPEAL_REVOKE - Уведомление о намерении обжаловать отказ ожидает отзыва
	// status, Строка 50
	Результат.Вставить("Статус");
	// Содержимое документа, Строка.
	Результат.Вставить("Содержимое");
	// Двоичные данные содержимого, кодировка ANSI.
	Результат.Вставить("ДвоичныеДанныеСодержимого");
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОКонтрактеССервераЕИС()
	
	Результат = Новый Структура;
	// Идентификатор документа.
	Результат.Вставить("Идентификатор", "");// id, обязательный, число
	Результат.Вставить("ВнешнийИдентификатор");// externalId, необязательный, строка 40
	Результат.Вставить("ДатаПубликации", Неопределено);// publishDate, обязательный
	Результат.Вставить("РеестровыйНомер", "");// regNumber, обязательный, строка 19
	// Идентификатор участника документооборота заказчика.
	Результат.Вставить("ИдентификаторУчастникаДокументооборотаЗаказчика", "");// EDOAddInfo/customerID, строка 4-46
	// Идентификатор государственного контракта.
	Результат.Вставить("ИГК");// EDOAddInfo/IGK, необязательный, строка 20
	Результат.Вставить("Ссылка", "");// url, обязательный, строка 1024
	Результат.Вставить("ДанныеКонтракта", Неопределено);// структура данных контракта.
	Результат.Вставить("ДвоичныеДанныеКонтракта", Неопределено);// двоичные данные контракта.
	Результат.Вставить("ОшибкаПриСкачивании", Ложь);// признак возникновения ошибки при скачивании данных контракта.
	Результат.Вставить("ОписаниеОшибкиСкачивания", "");
	Результат.Вставить("ЭтоЗакрытыйКонтракт", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОПоставщикеИЕгоПодписантах()
	
	Результат = Новый Структура;
	// Идентификатор участника документооборота, Строка 4-46.
	// supplierID
	Результат.Вставить("ИдентификаторУчастникаДокументооборота", "");
	// Номер реестровой записи в ЕРУЗ.
	// regNum
	Результат.Вставить("НомерРеестровойЗаписиЕРУЗ", "");
	// Полное наименование организации.
	// fullName
	Результат.Вставить("ПолноеНаименование", "");
	// Информация о подписантах.
	// Массив структур НовыеСведенияОПодписанте().
	// signersInfo
	Результат.Вставить("Подписанты", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебыеМетодыРаботыССерверомЕИС

Функция КодОрганизацииПоСПЗ(Организация)
	
	Настройки = НастройкиОбменаЕИСЗаказчика(Организация);
	Если Настройки <> Неопределено Тогда
		Возврат Настройки.КодПоСПЗ;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьДоступностьСервераSOAP(АдресСервера, АдресРесурса)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	// Проверка соединения с коротким таймаутом.
	Таймаут = 10;
	ОписаниеОшибкиУстановкиСоединения = "";
	СоединениеHTTP = УстановитьСоединениеССерверомИнтернета(
		АдресСервера,
		ОписаниеОшибкиУстановкиСоединения,
		Таймаут);
	Если СоединениеHTTP = Неопределено Тогда
		Шаблон = НСтр("ru = 'Не удалось установить соединение с сервером %2:
								 |%1'");
		ТекстОшибки = СтрШаблон(
			Шаблон,
			ОписаниеОшибкиУстановкиСоединения,
			АдресСервера);
		Результат.ОписаниеОшибки = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	// Скачиваем определение веб-сервиса.
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса + "?wsdl");
	Попытка
		Ответ = СоединениеHTTP.Получить(HTTPЗапрос);
	Исключение
		ОписаниеОшибкиОтправки = ОписаниеОшибки();
		Шаблон = НСтр("ru = 'Не удалось установить соединение с сервером %2:
								 |%1'");
		ТекстОшибки = СтрШаблон(
			Шаблон,
			ОписаниеОшибкиОтправки,
			АдресСервера);
		Результат.ОписаниеОшибки = ТекстОшибки;
		Возврат Результат;
	КонецПопытки;
	
	РезультатАнализа = АнализВыполненияHTTPЗапроса(Ответ, АдресРесурса);
	Если НЕ РезультатАнализа.Выполнено Тогда
		Шаблон = НСтр("ru = 'Ошибка подключения к веб-серверу %2:
								 |%1'");
		ТекстОшибки = СтрШаблон(Шаблон,
			РезультатАнализа.ОписаниеОшибки,
			АдресСервера);
		Результат.ОписаниеОшибки = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	
	Возврат Результат;
	
КонецФункции

Функция СерверыОбменаЕИС()
	
	Результат = Новый Структура;
	Определения = Новый Соответствие;
	
	// Начальная часть адреса сервера.
	Префикс = "https://int44.zakupki.gov.ru/eis-integration/elact";
	// Серверы получения информации.
	Определения.Вставить(КлючСервераИнформацииДляЗаказчика(),
		СтрШаблон("%1/customer-docs", Префикс));
	Определения.Вставить(КлючСервераИнформацииДляПоставщика(),
		СтрШаблон("%1/supplier-docs", Префикс));
	// Серверы загрузки документов.
	Определения.Вставить(КлючСервераЗагрузкиДляЗаказчика(),
		СтрШаблон("%1/customer-upload", Префикс));
	Определения.Вставить(КлючСервераЗагрузкиДляПоставщика(),
		СтрШаблон("%1/supplier-upload", Префикс));
	// Файловые хранилища.
	Определения.Вставить(КлючФайловогоХранилищаДляЗаказчика(),
		"");
	Определения.Вставить(КлючФайловогоХранилищаДляПоставщика(),
		"");
	
	Результат.Вставить("Определения", Определения);
	
	Возврат Результат;
	
КонецФункции

Функция КлючСервераИнформацииДляПоставщика()
	
	Возврат "СерверИнформацииПоставщика";
	
КонецФункции

Функция КлючСервераИнформацииДляЗаказчика()
	
	Возврат "СерверИнформацииЗаказчика";
	
КонецФункции

// Ключ сервера загрузки документов поставщика.
Функция КлючСервераЗагрузкиДляПоставщика()
	
	Возврат "СерверЗагрузкиПоставщика";
	
КонецФункции

// Ключ сервера загрузки документов заказчика.
Функция КлючСервераЗагрузкиДляЗаказчика()
	
	Возврат "СерверЗагрузкиЗаказчика";
	
КонецФункции

Функция КлючФайловогоХранилищаДляЗаказчика()
	
	Возврат "СерверФайловогоХранилищаЗаказчика";
	
КонецФункции

Функция КлючФайловогоХранилищаДляПоставщика()
	
	Возврат "СерверФайловогоХранилищаПоставщика";
	
КонецФункции

Функция РазобратьСтрокуАдресаСервера(СтрокаАдреса)
	
	Результат = Новый Структура;
	Результат.Вставить("АдресСервера",);
	Результат.Вставить("АдресРесурса",);
	
	АдресСервера = СтрокаАдреса;
	АдресРесурса = "";
	
	ПозицияЗавершенияСхемы = СтрНайти(АдресСервера, "://");
	Если ПозицияЗавершенияСхемы > 0 Тогда
		СтрокаURI = Сред(АдресСервера, ПозицияЗавершенияСхемы + 3);
		ПозицияЗавершенияСоединения = СтрНайти(СтрокаURI, "/");
		ДлинаСоединения = ?(ПозицияЗавершенияСоединения > 0, ПозицияЗавершенияСоединения - 1, СтрДлина(СтрокаURI));
		АдресРесурса = Сред(АдресСервера, ПозицияЗавершенияСхемы + 3 + ДлинаСоединения);
		АдресСервера = Лев(АдресСервера, ПозицияЗавершенияСхемы + 2 + ДлинаСоединения);
		
		ПозицияПараметров = СтрНайти(АдресРесурса, "?");
		ДлинаРесурсаНаСервере = ?(ПозицияПараметров > 0, ПозицияПараметров - 1, СтрДлина(АдресРесурса));
		АдресРесурса = Лев(АдресРесурса, ДлинаРесурсаНаСервере);
	КонецЕсли;
	
	Результат.АдресСервера = АдресСервера;
	Результат.АдресРесурса = АдресРесурса;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьЗапросСервисуЕИС(
		Настройки,
		КлючСервера,
		Операция,
		ТекстЗапросаSOAP)
		
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("АдресОтветаSOAP", Неопределено);
	Результат.Вставить("АдресОтветаSOAPДвоичныеДанные", Неопределено);
	Результат.Вставить("ОшибкаСоединения", Ложь);
	Результат.Вставить("КодСостояния", 0);
	Результат.Вставить("АдресРесурса", "");
	Результат.Вставить("АдресСервера", "");
	
	ЗаписатьОтладочнуюИнформацию("ТекстЗапросаКСерверуSOAP.xml", ТекстЗапросаSOAP);
	
	Если КлючСервера = КлючСервераИнформацииДляПоставщика()
		ИЛИ КлючСервера = КлючСервераЗагрузкиДляПоставщика() Тогда
		ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Электронный документооборот с ЕИС. Шлюз поставщика.'");
	ИначеЕсли КлючСервера = КлючСервераИнформацииДляЗаказчика()
		ИЛИ КлючСервера = КлючСервераЗагрузкиДляЗаказчика() Тогда
		ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Электронный документооборот с ЕИС. Шлюз заказчика.'");
	Иначе
		ВызватьИсключение(НСтр("ru='Неизвестный тип сервера.'"));
	КонецЕсли;
	
	Токен = Настройки.ТокенАвторизации;
	
	НастройкиWS = СерверыОбменаЕИС();
	Если ОбщегоНазначенияКлиентСервер.
			СвойствоСтруктуры(НастройкиWS, "Определения", Неопределено) = Неопределено Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Не определены настройки серверов обмена с ЕИС'");
		Возврат Результат;
	КонецЕсли;
	
	СтрокаURL = НастройкиWS.Определения[КлючСервера];
	
	РезультатРазбора = РазобратьСтрокуАдресаСервера(СтрокаURL);
	АдресСервера = РезультатРазбора.АдресСервера;
	АдресРесурса = РезультатРазбора.АдресРесурса;
	
	Результат.АдресРесурса = АдресРесурса;
	Результат.АдресСервера = АдресСервера;
	
	РезультатПинга = ПроверитьДоступностьСервераSOAP(АдресСервера, АдресРесурса);
	Если НЕ РезультатПинга.Выполнено Тогда
		ТекстОшибки = РезультатПинга.ОписаниеОшибки;
		ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстОшибки);
		Результат.ОписаниеОшибки = ТекстОшибки;
		Результат.ОшибкаСоединения = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеОшибкиУстановкиСоединения = "";
	Таймаут = 120;
	СоединениеHTTP = УстановитьСоединениеССерверомИнтернета(
		АдресСервера,
		ОписаниеОшибкиУстановкиСоединения,
		Таймаут);
	Если СоединениеHTTP = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось установить соединение с сервером:
								 |%1'");
		ТекстОшибки = СтрШаблон(
			ТекстОшибки,
			ОписаниеОшибкиУстановкиСоединения);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстОшибки);
		Результат.ОписаниеОшибки = ТекстОшибки;
		Результат.ОшибкаСоединения = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Шаблон = """http://zakupki.gov.ru/eruz/ws/elacts/%1""";
	ОперацияSOAP = СтрШаблон(Шаблон, Операция);
	
	// Формируем заголовки запроса SOAP.
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("Proxy-Connection", "Keep-Alive");
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "text/xml;charset=windows-1251");
	HTTPЗапрос.Заголовки.Вставить("SOAPAction", ОперацияSOAP);
	HTTPЗапрос.Заголовки.Вставить("usertoken", Токен);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапросаSOAP, КодировкаТекстаСервисаЕИС());
	
	// Посылаем запрос.
	Попытка
		Ответ = СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ОписаниеОшибкиОтправки = ОписаниеОшибки();
		ТекстОшибки = НСтр("ru = 'Не удалось установить соединение с сервером:
								 |%1'");
		ТекстОшибки = СтрШаблон(
			ТекстОшибки,
			ОписаниеОшибкиОтправки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстОшибки);
		Результат.ОписаниеОшибки = ТекстОшибки;
		Результат.ОшибкаСоединения = Истина;
		Возврат Результат;
	КонецПопытки;
	
	ТекстОтветаSOAP = Ответ.ПолучитьТелоКакСтроку(КодировкаТекстаСервисаЕИС());
	Результат.АдресОтветаSOAP = ПоместитьВоВременноеХранилище(
		ТекстОтветаSOAP,
		Новый УникальныйИдентификатор());
	ДвоичныеДанныеОтвета = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Результат.АдресОтветаSOAPДвоичныеДанные = ПоместитьВоВременноеХранилище(
		ДвоичныеДанныеОтвета,
		Новый УникальныйИдентификатор());
		
	ЗаписатьОтладочнуюИнформацию("ОтветСервера.xml", ТекстОтветаSOAP);
	
	Результат.КодСостояния = Ответ.КодСостояния;
	
	РезультатАнализа = АнализВыполненияHTTPЗапроса(Ответ, АдресРесурса, Операция, ТекстОтветаSOAP);
	Если НЕ РезультатАнализа.Выполнено Тогда
		Шаблон = НСтр("ru='При выполнении запроса к ресурсу %1 сервера %2 произошла ошибка:
			|%3'");
		ОписаниеОшибки = СтрШаблон(Шаблон, АдресРесурса, АдресСервера, РезультатАнализа.ОписаниеОшибки);
		ЗаписьЖурналаРегистрации(ИмяСобытияДляЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка, , ,
			ОписаниеОшибки);
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

Функция ОшибкаСервисаЛичныхКабинетов(ТекстОтвета)
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки",);
	Результат.Вставить("КодОшибки",);
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстОтвета);
	ДанныеОтвета= ФабрикаXDTO.ПрочитатьXML(Чтение);
	УзелОшибки = ДанныеОтвета.Body[ДанныеОтвета.Body.Свойства()[0].Имя].errorInfo;
	Результат.ОписаниеОшибки = УзелОшибки.message;
	Результат.КодОшибки = УзелОшибки.code;
	
	Возврат Результат;
	
КонецФункции

Функция ОшибкаСервисаЗагрузкиПакетов(ТекстОтвета)
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки",);
	Результат.Вставить("Ошибки", Новый Массив);
	Результат.Вставить("ТолькоПредупреждения", Истина);
	// Возвращается Истина, если была ошибка в запросе, а не в транспортном пакете.
	Результат.Вставить("ОшибкаВЗапросе", Ложь);
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстОтвета);
	ДанныеОтвета= ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	Если НЕ ЕстьСвойство(ДанныеОтвета.Body.ФайлРезул.Документ, "ОшибкиПр") Тогда
		// Ошибок нет.
		Возврат Результат;
	КонецЕсли;
	
	ТекстыОшибок = Новый Массив;
	
	ЗаготовкаОшибки = Новый Структура;
	ЗаготовкаОшибки.Вставить("ОписаниеОшибки",);
	ЗаготовкаОшибки.Вставить("КодОшибки",);
	// Уровень:
	// - Ошибка
	// - Предупреждение
	ЗаготовкаОшибки.Вставить("Уровень",);
	ЗаготовкаОшибки.Вставить("Наименование");
	ЗаготовкаОшибки.Вставить("Описание");
	
	Результат.ОшибкаВЗапросе = ПустаяСтрока(ДанныеОтвета.Body.ФайлРезул.Документ.СведФайл.ИдТрПакет);
	
	УровеньПредупреждение = "Предупреждение";
	
	Для каждого УзелОшибки Из ЗначениеВКоллекцию(ДанныеОтвета.Body.ФайлРезул.Документ.ОшибкиПр.ОшибкаПр) Цикл
		
		Ошибка = ОбщегоНазначения.СкопироватьРекурсивно(ЗаготовкаОшибки);
		
		КонтентBase64 = ЗначениеНеобязательногоСвойства(УзелОшибки, "Контент");
		Если ЗначениеЗаполнено(КонтентBase64) Тогда
			Контент = Base64Значение(КонтентBase64);
			Чтение = Новый ЧтениеДанных(Контент, КодировкаТекстаСервисаЕИС());
			ТекстОшибки = Чтение.ПрочитатьСимволы();
		Иначе
			ТекстОшибки = "";
		КонецЕсли;
		
		Ошибка.Описание = ЗначениеНеобязательногоСвойства(УзелОшибки, "Опис");
		Если ТипЗнч(Ошибка.Описание) = Тип("ОбъектXDTO") Тогда
			Ошибка.Описание = "";
		КонецЕсли;
		Ошибка.Наименование = УзелОшибки.Наим;
		Если ЗначениеЗаполнено(Ошибка.Описание) И ЗначениеЗаполнено(ТекстОшибки) Тогда
			Шаблон = НСтр("ru='%1: %2. %3.'");
			Ошибка.ОписаниеОшибки = СтрШаблон(Шаблон, Ошибка.Наименование, ТекстОшибки, Ошибка.Описание);
		ИначеЕсли ЗначениеЗаполнено(Ошибка.Описание) Тогда
			Шаблон = НСтр("ru='%1: %2'");
			Ошибка.ОписаниеОшибки = СтрШаблон(Шаблон, Ошибка.Наименование, Ошибка.Описание);
		ИначеЕсли ЗначениеЗаполнено(ТекстОшибки) Тогда
			Шаблон = НСтр("ru='%1: %2'");
			Ошибка.ОписаниеОшибки = СтрШаблон(Шаблон, Ошибка.Наименование, ТекстОшибки);
		Иначе
			Ошибка.ОписаниеОшибки = Ошибка.Наименование;
		КонецЕсли;
		Ошибка.КодОшибки = УзелОшибки.Код;
		Ошибка.Уровень = УзелОшибки.Уров;
		
		Если Ошибка.Уровень <> УровеньПредупреждение Тогда
			Результат.ТолькоПредупреждения = Ложь;
		КонецЕсли;
		
		Результат.Ошибки.Добавить(Ошибка);
		ТекстыОшибок.Добавить(Ошибка.ОписаниеОшибки);
	КонецЦикла;
	
	Результат.ОписаниеОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
	
	Если Результат.ОшибкаВЗапросе Тогда
		
		ВариантСобытия = НСтр("ru = 'Ошибка в запросе к сервису ЕИС'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки, ВариантСобытия);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция АнализВыполненияHTTPЗапроса(Ответ, АдресРесурса, Операция = "", ТекстОтвета = "")
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ОшибкаВызоваСервиса", Ложь);
	Результат.Вставить("КодОшибки", 0);
	Результат.Вставить("Ошибки", Неопределено);
	Результат.Вставить("ОшибкаВЗапросе", Ложь);
	
	// Ошибка в сервисе личных кабинетов.
	Если НЕ ПустаяСтрока(Операция)
		И (СтрНайти(ТекстОтвета, "<docs:errorInfo>") > 0
			ИЛИ СтрНайти(ТекстОтвета, "<errorInfo>") > 0) Тогда
		// Ошибка выполнения запроса.
		Результат.ОшибкаВызоваСервиса = Истина;
		ДанныеОшибки = ОшибкаСервисаЛичныхКабинетов(ТекстОтвета);
		Результат.КодОшибки = ДанныеОшибки.КодОшибки;
		Результат.ОписаниеОшибки = ДанныеОшибки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ВариантСобытия = НСтр("ru = 'Анализ выполнения запроса к серверу ЕИС'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	// Ошибка в сервисе загрузки или разборе результатов загрузки.
	Если НЕ ПустаяСтрока(Операция)
		И Операция <> "getProcessingResult"
		И СтрНайти(ТекстОтвета, "<ОшибкиПр>") Тогда
		ДанныеОшибки = ОшибкаСервисаЗагрузкиПакетов(ТекстОтвета);
		Если ДанныеОшибки.ТолькоПредупреждения Тогда
			ТекстПредупреждения = НСтр("ru='Предупреждение сервера ЕИС:'") + Символы.ПС + ДанныеОшибки.ОписаниеОшибки;
			ЗаписатьСобытиеВЖурнал(ТекстПредупреждения,
				ВариантСобытия, ,
				УровеньЖурналаРегистрации.Предупреждение);
		Иначе
			Результат.ОписаниеОшибки = ДанныеОшибки.ОписаниеОшибки;
			Результат.Ошибки = ДанныеОшибки.Ошибки;
			Результат.ОшибкаВЗапросе = ДанныеОшибки.ОшибкаВЗапросе;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния < 300 Тогда
		Результат.Выполнено = Истина;
	ИначеЕсли Ответ.КодСостояния >= 400 И Ответ.КодСостояния < 500 Тогда
		ОписаниеОшибки = НСтр("ru='Ошибка клиента, код состояния %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Ответ.КодСостояния);
	ИначеЕсли Ответ.КодСостояния >= 500 И Ответ.КодСостояния < 600 Тогда
		Если Ответ.КодСостояния = 501 Тогда
			Результат.ОписаниеОшибки = СтрШаблон("Операция %1 не реализована.", АдресРесурса);
		Иначе
			ОписаниеОшибки = НСтр("ru='Ошибка сервера, код состояния %1.'");
			Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Ответ.КодСостояния);
		КонецЕсли;
	Иначе
		ОписаниеОшибки = НСтр("ru='Ошибка выполнения запроса, код состояния %1.'");
		Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Ответ.КодСостояния);
	КонецЕсли;
	
	Если НЕ Результат.Выполнено Тогда
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки, ВариантСобытия);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСXDTO

// Преобразует значение в Массив в случае необходимости.
// Для типов Массив, ТаблицаЗначений, СписокXDTO возвращается исходый объект.
Функция ЗначениеВКоллекцию(Значение)
	
	Если ТипЗнч(Значение) <> Тип("Массив")
		И ТипЗнч(Значение) <> Тип("ТаблицаЗначений")
		И ТипЗнч(Значение) <> Тип("СписокXDTO") Тогда
		Коллекция = Новый Массив;
		Коллекция.Добавить(Значение);
		Возврат Коллекция;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область РаботаСXML

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ИмяКорневогоЭлемента = Неопределено)
	
	ПотокXML = СоздатьНовыйПотокXML();
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ИмяКорневогоЭлемента);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML()
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция СоздатьДеревоСтруктурыXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция СоздатьДеревоXML()
	
	ДеревоXML = Новый ДеревоЗначений;
	ДеревоXML.Колонки.Добавить("Имя");
	ДеревоXML.Колонки.Добавить("Тип");
	ДеревоXML.Колонки.Добавить("Значение");
	ДеревоXML.Колонки.Добавить("ЭтоCDATA");
	Возврат ДеревоXML;
	
КонецФункции

Функция ДобавитьУзелXML(
		Родитель,
		Имя,
		ЭтоАтрибут = Ложь,
		Значение = Неопределено,
		Необязательный = Ложь,
		ЭтоCDATA = Ложь,
		МаксимальнаяДлинаСтрокиССокращением = Неопределено,
		Индекс = Неопределено,
		ПоискЭлемента = Ложь)
	
	Если Необязательный И НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число")
		ИЛИ ТипЗнч(Значение) = Тип("Дата")
		ИЛИ ТипЗнч(Значение) = Тип("Булево") Тогда
			ПриведенноеЗначение = XMLСтрока(Значение);
	Иначе
		ПриведенноеЗначение = Значение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МаксимальнаяДлинаСтрокиССокращением) Тогда
		ПриведенноеЗначение = СокрЛП(ПриведенноеЗначение);
		Если МаксимальнаяДлинаСтрокиССокращением <> -1 Тогда
			ПриведенноеЗначение = Лев(ПриведенноеЗначение, МаксимальнаяДлинаСтрокиССокращением);
		КонецЕсли;
		ПриведенноеЗначение = XMLСтрока(ПриведенноеЗначение);
	КонецЕсли;
	
	// Ищем узел по имени.
	Если ПоискЭлемента Тогда
		НовСтр = Родитель.Строки.Найти(Имя, "Имя");
		Если ЗначениеЗаполнено(НовСтр) Тогда
			// Если узел найден, то меняем его значение.
			НовСтр.Значение = ПриведенноеЗначение;
			Возврат НовСтр;
		КонецЕсли;
	КонецЕсли;
	
	// Если узел не был найден создаем его.
	Если Индекс <> Неопределено Тогда
		НовСтр = Родитель.Строки.Вставить(Индекс);
	Иначе
		НовСтр = Родитель.Строки.Добавить();
	КонецЕсли;
	
	НовСтр.Имя = Имя;
	НовСтр.Значение = ПриведенноеЗначение;
	Если ТипЗнч(ЭтоАтрибут) = Тип("Булево") Тогда
		НовСтр.Тип = ?(ЭтоАтрибут, "А", "Э");
	Иначе
		НовСтр.Тип = ЭтоАтрибут;
	КонецЕсли;
	
	ТипЗнчРодитель = ТипЗнч(Родитель);
	Если (ТипЗнчРодитель = Тип("ДеревоЗначений") И Родитель.Колонки.Найти("ЭтоCDATA") <> Неопределено)
	ИЛИ (ТипЗнчРодитель = Тип("СтрокаДереваЗначений") И Родитель.Владелец().Колонки.Найти("ЭтоCDATA") <> Неопределено) Тогда
		НовСтр.ЭтоCDATA = ЭтоCDATA;
	КонецЕсли;
	
	Возврат НовСтр;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ИмяКорневогоЭлемента)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		Если ЗначениеЗаполнено(ИмяКорневогоЭлемента) Тогда
			ПотокXML.ЗаписатьНачалоЭлемента(ИмяКорневогоЭлемента);
		КонецЕсли;
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ИмяКорневогоЭлемента);
		КонецЦикла;
		Если ЗначениеЗаполнено(ИмяКорневогоЭлемента) Тогда
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Имя, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Имя);
			Для каждого Лист Из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ИмяКорневогоЭлемента);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML,
		ОписаниеОшибки = Неопределено,
		ЧтениеXML = Неопределено,
		Знач ТекУзел = Неопределено)
	
	ПерваяИтерация = (ТекУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовУзел = ТекУзел.Строки.Добавить();
				НовУзел.Имя = ЧтениеXML.Имя;
				НовУзел.Тип = "Э";
				НовУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовАтрибут = НовУзел.Строки.Добавить();
					НовАтрибут.Имя = ЧтениеXML.Имя;
					НовАтрибут.Тип = "А";
					НовАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовУзел);
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст И ТипЗнч(ТекУзел) = Тип("СтрокаДереваЗначений") И ТекУзел.Тип = "Э" Тогда
				ТекУзел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекУзел;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьУзелДереваXMLПоСтруктуре(СтруктураДанных, УзелДерева)
	
	МетаданныеСтруктуры = СтруктураДанных.Метаданные; 
	
	Для Каждого ЭлементСтруктуры Из СтруктураДанных Цикл
		
		ОбязательноеПоле = МетаданныеСтруктуры.Обязательность[ЭлементСтруктуры.Ключ];
		
		Если ЭлементСтруктуры.Ключ = "Метаданные"
			ИЛИ ЭлементСтруктуры.Значение = Неопределено
			ИЛИ ОбязательноеПоле = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеТипаПоля = МетаданныеСтруктуры.ТипыЗначений[ЭлементСтруктуры.Ключ];
		
		Если НЕ ЗначениеЗаполнено(ЭлементСтруктуры.Значение) 
			И НЕ ОбязательноеПоле Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеТипаПоля.СодержитТип(Тип("Массив")) Тогда
			ЗаполнитьУзелДереваXMLПоМассиву(ЭлементСтруктуры.Значение, УзелДерева, ЭлементСтруктуры.Ключ);
		ИначеЕсли ОписаниеТипаПоля.СодержитТип(Тип("Структура")) Тогда
			НовыйУзелДерева = ДобавитьУзелXML(УзелДерева, ЭлементСтруктуры.Ключ, Ложь);
			ЗаполнитьУзелДереваXMLПоСтруктуре(ЭлементСтруктуры.Значение, НовыйУзелДерева);
		Иначе
			ЗаписатьПолеВДерево(УзелДерева, СтруктураДанных, ЭлементСтруктуры.Ключ);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьУзелДереваXMLПоМассиву(МассивСтруктур, УзелДерева, ИмяПовторяющегосяЭлемента)
	
	Для Каждого СтруктураДанных Из МассивСтруктур Цикл
		
		НовыйУзелДерева = ДобавитьУзелXML(УзелДерева, ИмяПовторяющегосяЭлемента, Ложь); 
		ЗаполнитьУзелДереваXMLПоСтруктуре(СтруктураДанных, НовыйУзелДерева);
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПриложений

#Область МетаДанныеСтруктуры

Функция НовыеМетаданныеСтруктуры()
	
	Результат = Новый Структура;
	Результат.Вставить("Описания", Новый Соответствие);
	Результат.Вставить("ТехническиеОписания", Новый Соответствие);
	Результат.Вставить("ТипыЗначений", Новый Соответствие);
	Результат.Вставить("Конструкторы", Новый Соответствие);
	// Путь чтения из xml.
	Результат.Вставить("ПутиЧтения", Новый Соответствие);
	// Путь записи в xml.
	Результат.Вставить("ПутиЗаписи", Новый Соответствие);
	Результат.Вставить("Обязательность", Новый Соответствие);
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьМетаданныеСтруктуры(Структура)
	
	Структура.Вставить("Метаданные", НовыеМетаданныеСтруктуры());
	
КонецПроцедуры

Функция НовоеПолеСтруктуры(Имя,
		Значение = Неопределено,
		ОписаниеТипа = Неопределено,
		Описание = "",
		Обязательное = Истина,
		ПутьЧтенияЗаписи = "",
		ПутьЗаписи = "",
		Конструктор = "",
		ТехОписание = "")
	
	Результат = Новый Структура;
	Результат.Вставить("Имя", Имя);
	Результат.Вставить("ОписаниеТипа", ОписаниеТипа);
	Результат.Вставить("Значение", Значение);
	Результат.Вставить("Описание", Описание);
	Результат.Вставить("Обязательное", Обязательное);
	// Путь для чтения и для записи значения (по умолчанию), если задан путь записи, то будет использоваться он.
	Результат.Вставить("ПутьЧтенияЗаписи", ПутьЧтенияЗаписи);
	Результат.Вставить("ПутьЗаписи", ПутьЗаписи);
	Результат.Вставить("Конструктор", Конструктор);
	Результат.Вставить("ТехОписание", ТехОписание);
	Результат.Вставить("МинимальнаяДлинаСтроки", 0);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПолеСтруктуры(Структура, ПараметрыПоля)
		
	Имя = ПараметрыПоля.Имя;
	Значение =  ПараметрыПоля.Значение;
	ОписаниеТипа =  ПараметрыПоля.ОписаниеТипа;
	Описание =  ПараметрыПоля.Описание;
	Обязательное =  ПараметрыПоля.Обязательное;
	ПутьЧтенияЗаписи =  ПараметрыПоля.ПутьЧтенияЗаписи;
	ПутьЗаписи =  ПараметрыПоля.ПутьЗаписи;
	Конструктор =  ПараметрыПоля.Конструктор;
	ТехОписание =  ПараметрыПоля.ТехОписание;
		
	Структура.Вставить(Имя, Значение);
	
	МетаданныеСтруктуры = Структура.Метаданные;
	
	МетаданныеСтруктуры.ТипыЗначений.Вставить(Имя, ОписаниеТипа);
	МетаданныеСтруктуры.Описания.Вставить(Имя, Описание);
	
	МетаданныеСтруктуры.ТехническиеОписания.Вставить(Имя, ТехОписание);
	МетаданныеСтруктуры.Обязательность.Вставить(Имя, Обязательное);
	
	МетаданныеСтруктуры.ПутиЧтения.Вставить(Имя, ПутьЧтенияЗаписи);
	Если НЕ ПустаяСтрока(ПутьЗаписи) Тогда
		МетаданныеСтруктуры.ПутиЗаписи.Вставить(Имя, ПутьЗаписи);
	Иначе
		МетаданныеСтруктуры.ПутиЗаписи.Вставить(Имя, ПутьЧтенияЗаписи);
	КонецЕсли;
	
	МетаданныеСтруктуры.Конструкторы.Вставить(Имя, Конструктор);
		
КонецПроцедуры

Функция ЗаписатьПолеВДерево(Знач Узел, Структура, Имя)
	
	МетаданныеСтруктуры = Структура.Метаданные;
	Путь = МетаданныеСтруктуры.ПутиЗаписи[Имя];
	Если НЕ ЗначениеЗаполнено(Путь) Тогда
		Шаблон = НСтр("ru='Не заполнен путь записи поля %1.'");
		ТекстОшибки = СтрШаблон(Шаблон, Имя);
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	// Создаем промежуточные узлы.
	УзлыПути = СтрРазделить(Путь, "/", Ложь);
	Для ИндексУзла = 0 По УзлыПути.Количество() - 2 Цикл
		ИмяУзла = УзлыПути[ИндексУзла];
		Строка = Узел.Строки.Найти(ИмяУзла);
		Если ЗначениеЗаполнено(Строка) Тогда
			Узел = Строка;
		Иначе
			Узел = ДобавитьУзелXML(Узел, ИмяУзла, Ложь, , , , , , Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Создаем узел куда помещаем значение поля.
	ИмяУзла = УзлыПути[УзлыПути.Количество() - 1];
	ЭтоАтрибут = Ложь;
	Если СтрНайти(ИмяУзла, "@") Тогда
		ЭтоАтрибут = Истина;
		ИмяУзла = СтрЗаменить(ИмяУзла, "@", "");
	КонецЕсли;
	
	Обязательный = Структура.Метаданные.Обязательность[Имя];
	Если Обязательный = Неопределено Тогда
		Шаблон = НСтр("ru='Не заполнен признак обязательности поля %1.'");
		ТекстОшибки = СтрШаблон(Шаблон, Имя);
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	Узел = ДобавитьУзелXML(Узел, ИмяУзла, ЭтоАтрибут, Структура[Имя], НЕ Обязательный);
	
	Возврат Узел;
	
КонецФункции

#КонецОбласти

#Область ФормированиеПриложенияДляТитуловПродавцаПокупателя

Процедура ПроверитьОбщиеДанныеПриложенияУПДиУКД(ДанныеПриложения, Ошибки)
	
	Если НЕ ЗначениеЗаполнено(ДанныеПриложения.ИдентификаторФайла) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заполнен идентификатор файла электронного документа.'");
		Ошибки.Добавить(ОписаниеОшибки);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДанныеПриложения.ИдентификаторПриложения) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заполнен идентификатор приложения для ЕИС.'");
		Ошибки.Добавить(ОписаниеОшибки);
	КонецЕсли;
	
	Если ДанныеПриложения.СведенияОТоварах.ТоварыРаботыУслуги.Количество() = 0 Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заполнены сведения о товарах, работах, услугах в приложения для ЕИС.'");
		Ошибки.Добавить(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьДанныеПриложенияУПДДляЕИС(ДанныеПриложения)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Ошибки = Новый Массив;
	
	ПроверитьОбщиеДанныеПриложенияУПДиУКД(ДанныеПриложения, Ошибки);
	
	Если НЕ ЗначениеЗаполнено(ДанныеПриложения.ПорядковыйНомерРуководителяОрганизации) Тогда
		ОписаниеОшибки =
			НСтр("ru = 'Не заполнен порядковый номер руководителя организации в приложения к УПД для ЕИС.'");
		Ошибки.Добавить(ОписаниеОшибки);
	КонецЕсли;
	
	Если Ошибки.Количество() > 0 Тогда
		ОписаниеОшибки = СтрСоединить(Ошибки);
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	// Места поставки должны быть указаны даже если в составе документа только услуги.
	// В этом случае в качестве места доставки указывается адрес покупателя.
	Если ДанныеПриложения.МестаПоставки.Количество() = 0 Тогда
		ОписаниеОшибки =
			НСтр("ru = 'Не заполнены места поставки в приложения к УПД для ЕИС.'");
		Ошибки.Добавить(ОписаниеОшибки);
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

Функция ПроверитьДанныеПриложенияУКДДляЕИС(ДанныеПриложения)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Ошибки = Новый Массив;
	ПроверитьОбщиеДанныеПриложенияУПДиУКД(ДанныеПриложения, Ошибки);
	
	Если НЕ ЗначениеЗаполнено(ДанныеПриложения.ИдентификаторИсходногоФайла) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заполнен идентификатор исходного документа в приложении для ЕИС.'");
		Ошибки.Добавить(ОписаниеОшибки);
	КонецЕсли;
	
	Если Ошибки.Количество() > 0 Тогда
		ОписаниеОшибки = СтрСоединить(Ошибки);
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьИдентификаторИсходногоФайлаПриложения(ДанныеПриложения)

	Если ЗначениеЗаполнено(ДанныеПриложения.ДокументОснование) Тогда
		ДокументыОснования = ИнтеграцияЭДО.АктуальныеЭлектронныеДокументы(ДанныеПриложения.ДокументОснование);
		ДокументОснование = Неопределено;
		Для каждого Строка Из ДокументыОснования Цикл
			Если ТипДокументаОтправляетсяВЕИС(Строка.ВидДокумента.ТипДокумента) Тогда
				ДокументОснование = Строка.ЭлектронныйДокумент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ДанныеУПД = ЭлектронныеДокументыЭДО.ДанныеФайлаИнформацииОтправителяДляВыгрузкиФНС(ДокументОснование);
			ДанныеФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДанныеУПД.ИмяФайла);
			ДанныеПриложения.ИдентификаторИсходногоФайла = ДанныеФайла.ИмяБезРасширения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УдалитьПространствоИменТранспортногоПакета(Знач ТекстПриложения, ЗаменитьНаПространствоДляЕИС = Ложь)
	
	Шаблон = " xmlns=""%1""";
	Подстрока = СтрШаблон(Шаблон, ПространствоИменТранспортногоПакетаЕИС());
	Если ЗаменитьНаПространствоДляЕИС Тогда
		ПространствоДляЕИС = " xsi:noNamespaceSchemaLocation = ""DP_PAKET_EIS_01_00.xsd"""
			+ " xmlns:xsi = ""http://www.w3.org/2001/XMLSchema-instance""";
		ТекстПриложения = СтрЗаменить(ТекстПриложения, Подстрока, ПространствоДляЕИС);
	Иначе
		ТекстПриложения = СтрЗаменить(ТекстПриложения, Подстрока, "");
	КонецЕсли;
	
	Возврат ТекстПриложения;
	
КонецФункции

Функция ПрефиксИмениПриложенияЕИС()
	
	Возврат "PRIL_";
	
КонецФункции

Функция НовыйРезультатФормированияПриложения()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ДвоичныеДанные", Неопределено);
	Результат.Вставить("ИмяФайла", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьОбщиеСведенияОКонтрактеДляТитулаПродавца(Сведения)
	
	// Реестровый номер контракта, Строка 19.
	Сведения.Вставить("РеестровыйНомерКонтракта", "");
	// Идентификатор версии контракта, на основании которой сформирован УПД, Число.
	Сведения.Вставить("ИдентификаторВерсииКонтракта",);
	// GIUD этапа контракта, Строка 32.
	Сведения.Вставить("ИдентификаторЭтапаКонтракта");
	// Технический идентификатор этапа контракта, Число.
	// Соответствует значению поля sid из сведений о контракте.
	Сведения.Вставить("ТехническийИдентификаторЭтапаКонтракта",);
	// Внешний технический идентификатор этапа контракта, Строка 1-40.
	// Соответствует значению поля externalSid из сведений о контракте.
	Сведения.Вставить("ВнешнийТехническийИдентификаторЭтапаКонтракта");
	// Идентификационный код закупки из контракта.
	Сведения.Вставить("ИКЗ",);
	
	Возврат Сведения;
	
КонецФункции

Функция НовыеСведенияОКонтрактеДляТитулаПродавцаУПД()
	
	Результат = Новый Структура;
	ДобавитьОбщиеСведенияОКонтрактеДляТитулаПродавца(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОКонтрактеДляТитулаПродавцаУКД()
	
	Результат = Новый Структура;
	ДобавитьОбщиеСведенияОКонтрактеДляТитулаПродавца(Результат);
	// Номер государственного контракта.
	// НомерГосКонт, Строка 100.
	Результат.Вставить("НомерКонтракта", "");
	// Дата заключения контракта.
	// ДатаГосКонт, Дата.
	Результат.Вставить("ДатаЗаключенияКонтракта", Дата(1, 1, 1));
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПоляДанныхОСуммеНДС(Коллекция)
	
	// Сумма НДС.
	// СумНал, Число(20,2).
	Коллекция.Вставить("СуммаНДС", 0);
	// Без НДС.
	// БезНДС, Булево.
	Коллекция.Вставить("БезНДС", Ложь);
	// Прочерк НДС.
	// ДефНДС, Булево.
	Коллекция.Вставить("ПрочеркПоНДС", Ложь);
	
КонецПроцедуры

// Указывается в массиве мест поставок. См. ДобавитьОбщиеСвойстваПозицииТРУ()

Процедура ДобавитьОбщиеСвойстваПозицииТРУ(Результат)

	// Для строительной специализации.
	// Номер позиции по смете. Если значение атрибута "Отраслевая специализация"
	// (ФайлУПДПрод/СведТов/@ОтрСпец) не равно 1 - "Строительство", то атрибут игнорируется при приеме.
	// СведТРУ/НедеталТРУ/НеЛПСвед/ПозСмет
	// СведТРУ/ДеталТРУ/СведДетал/ПозСмет
	Результат.Вставить("НомерПозицииПоСмете");
	
	// Признак поставки объекта закупки с улучшенными характеристиками:
	// - 1 - не установлен;
	// - 2 - установлен из информации о контракте;
	// - 3 - установлен пользователем.
	// Игнорируется для авансовых СЧФ.
	// Игнорируется при приеме исправления к документу, который был подписан до версии 11.2.
	// В других случаях контролируется обязательное заполнение.
	// Если для позиции ТРУ в сведениях о контракте установлен одноименный признак, то контролируется, что в составе данного атрибута указано значение "2 - установлен из информации о контракте".
	// Если для позиции ТРУ в сведениях о контракте НЕ установлен одноименный признак, то контролируется, что в составе данного атрибута указано значение, отличное от "2 - установлен из информации о контракте".
	// В исправлении редактирование данного признака допускается только в том случае, если:
	// - статус документа, к которому формируется исправление - «Отказано при рассмотрении»
	// - в сведениях о контракте для данной позиции не установлен признак поставки объекта закупки с улучшенными характеристиками
	// СведТРУ/НедеталТРУ/НеЛПСвед/ПрУлучшХаракт
	// СведТРУ/ДеталТРУ/СведДетал/ПрУлучшХаракт
	Результат.Вставить("ПризнакПоставкиОбъектаЗакупкиСУлучшеннымиХарактеристиками");
	
	// Сведения о характеристиках жилого помещения
	// Атрибут обязателен для заполнения, если документ содержит специализацию "Приобретение жилых помещений",
	// то есть атрибут "Отраслевая специализация" (СведТов/@ОтрСпец) заполнен значением "3".
	// В других случаях игнорируется при приеме
	// СведТРУ/НедеталТРУ/НеЛПСвед/СведЖилПом)
	// СведТРУ/ДеталТРУ/СведДетал/СведЖилПом)
	Результат.Вставить("СведенияОХарактеристикахЖилогоПомещения");
	
	// Сведения о месте поставки товара.
	// Принимается только в том случае, если позиция является товаром.
	// В других случаях игнорируется при приеме.
	// СведТРУ/НедеталТРУ/НеЛПСвед/СведПоставкиТов
	// СведТРУ/ДеталТРУ/СведДетал/СведПоставкиТов
	// Массив структур, см. НовыеСведенияОМестеПоставкиТовара()
	Результат.Вставить("СведенияОМестахПоставкиТовара", Новый Массив);
	
КонецПроцедуры

// Данные лекарственного препарата для приложений к УКД и УПД.
Функция НовыеСведенияОЛекарственномПрепаратеДляПриложения(ДляУКД = Ложь)
	
	Результат = Новый Структура;
	
	// Идентификатор лекарственного препарата. Требуется обязательное заполнение.
	// ИдЛП, Строка 32, ГУИД.
	Результат.Вставить("ИдентификаторЛекарственногоПрепарата");
	// Серия ЛП.
	// Не заполняется для авансовых СЧФ, в других случаях обязателен для заполнения.
	// СерияЛекПреп, Строка 1-50
	Результат.Вставить("Серия");
	// Срок годности ЛП.
	// Не заполняется для авансовых СЧФ, в других случаях обязателен для заполнения.
	// СрокГодн, Строка(10), дата в формате ДД.ММ.ГГГГ (01.01.1900 - 31.12.2099).
	Результат.Вставить("СрокГодности");
	
	// Позиция по торговому наименованию лекарственного средства.
	// Международное непатентованное или химическое или группировочное наименование.
	// ПозицПоМНН/МНН, Строка 500.
	Результат.Вставить("МеждународноеНепатентованноеНаименование", "");
	// Торговое наименование.
	// ПозицПоМНН/ТН, Строка 500.
	Результат.Вставить("ТорговоеНаименование", "");
	// Лекарственная форма.
	// ПозицПоМНН/ЛекФорм, Строка 500.
	Результат.Вставить("ЛекарственнаяФорма", "");
	
	// Дозировка.
	// Наименование дозировки.
	// ДозСвед/Наим, Строка 500
	Результат.Вставить("ДозировкаНаименование");
	// Значение дозировки.
	// ДозСвед/Знач, Число(21, 10)
	Результат.Вставить("ДозировкаЗначение");
	
	// Сведения о потребительской единице измерения.
	// Игнорируется при приеме для авансовых СЧФ, в других случаях контролируется обязательность заполнения при приеме.
	// ПотребЕдИзмСвед/Наим, 
	Результат.Вставить("НаименованиеПотребительскойЕдиницыИзмерения");
	// Количество в потребительских единицах измерения.
	// ПотребЕдИзмСвед/Колич, Число(27, 11)
	Результат.Вставить("КоличествоВПотребительскихЕдиницахИзмерения");
	
	// Вид первичной упаковки.
	// УпакСвед/ВидПервУпак, Строка(500)
	Результат.Вставить("ВидПервичнойУпаковки", "");
	// Количество лекарственных форм в первичной упаковке.
	// УпакСвед/КоличЛекФормВПервУпак, Число(22,10)
	Результат.Вставить("КоличествоВПервичнойУпаковке", 0);
	// Количество первичных упаковок в потребительской упаковке.
	// УпакСвед/КоличПервУпакВПотребУпак, Число(11).
	Результат.Вставить("КоличествоПервичныхУпаковокВПотребительскойУпаковке", 0);
	// Количество лекарственных форм в потребительской упаковке.
	// УпакСвед/КоличЛекФормВПотребУпак, Число(33,11).
	Результат.Вставить("КоличествоЛекарственныхФормВПотребительскойУпаковке", 0);
	// Количество потребительских единиц в потребительской упаковке.
	// С версии 10.2.310 требуется обязательное заполнение атрибута.
	// КоличПотребЕдВПотребУпак, Число(33,11)
	Результат.Вставить("КоличествоПотребительскихЕдиницВПотребительскойУпаковке", 0);
	
	// Признак включения в реестр жизненно необходимых и важнейших лекарственных препаратов.
	// Указание блока означает, что установлен признак включения в реестр ЖНВЛП. При этом содержимое блока может быть не заполнено для авансовых СЧФ	
	Результат.Вставить("ВключенВЖНВЛП", Ложь);
	// Зарегистрированная предельная отпускная цена ЛП, руб.
	// Не заполняется для авансовых СЧФ, в других случаях обязателен для заполнения.
	// ЖНВЛП/ЗарегПредОтпЦена, Число(21,2).
	Результат.Вставить("ПредельнаяОтпускнаяЦенаЖНВЛП");
	
	
	Если ДляУКД Тогда
		
		// Цена за потребительскую упаковку с НДС до и после изменения.
		// Не заполняется для авансовых СЧФ, в других случаях обязателен для заполнения.
		// ЦенаЗаУпакСНДС/ДоИзм, Число(18,2)
		Результат.Вставить("ЦенаЗаПотребительскуюУпаковкуСНДСДоИзменения");
		// ЦенаЗаУпакСНДС/ПослеИзм, Число(18,2)
		Результат.Вставить("ЦенаЗаПотребительскуюУпаковкуСНДСПослеИзменения");
		
		// Для ЖНВЛП.
		// Зарегистрированная предельная отпускная цена ЛП, руб.
		// Не заполняется для авансовых СЧФ, в других случаях обязателен для заполнения.
		// ЖНВЛП/ЗарегПредОтпЦена, Число(21,2).
		Результат.Вставить("ЗарегистрированнаяПредельнаяОтпускнаяЦена");
		// Фактическая отпускная цена ЛП, руб.
		// Не заполняется для авансовых СЧФ, в других случаях обязателен для заполнения.
		// ЖНВЛП/ФактОтпЦена/ДоИзм, Число(21,2).
		Результат.Вставить("ФактическаяОтпускнаяЦенаЖНВЛПДоИзменения");
		// ЖНВЛП/ФактОтпЦена/ПослеИзм, Число(21,2).
		Результат.Вставить("ФактическаяОтпускнаяЦенаЖНВЛППослеИзменения");
		// Суммарный размер фактических оптовых надбавок ЛП, руб до и после изменений.
		// Не заполняется для авансовых СЧФ, в других случаях обязателен для заполнения.
		// ЖНВЛП/СуммРазмФактОптНадбРуб/ДоИзм, Число(21,2).
		Результат.Вставить("СуммарныйРазмерОптовыхНадбавокЖНВЛПДоИзменения");
		// ЖНВЛП/СуммРазмФактОптНадбРуб/ПослеИзм, Число(21,2).
		Результат.Вставить("СуммарныйРазмерОптовыхНадбавокЖНВЛППослеИзменения");
		// Суммарный размер фактических оптовых надбавок (процент) ЛП, % до и после изменений.
		// Не заполняется для авансовых СЧФ, в других случаях обязателен для заполнения.
		// ЖНВЛП/СуммРазмФактОптНадбПроц/ДоИзм, Число(6,2).
		Результат.Вставить("СуммарныйРазмерОптовыхНадбавокВПроцентахЖНВЛПДоИзменения");
		// ЖНВЛП/СуммРазмФактОптНадбПроц/ПослеИзм, Число(6,2).
		Результат.Вставить("СуммарныйРазмерОптовыхНадбавокВПроцентахЖНВЛППослеИзменения");
		
		// Страна производителя.
		// СтранаПроизв/Код, Строка 3.
		Результат.Вставить("КодСтраныПроизводителя");
		// Краткое наименование.
		// Игнорируется при приеме, заполняется при передаче значением из справочника ОКСМ.
		// СтранаПроизв/Наим, Строка 3.
		Результат.Вставить("НаименованиеСтраныПроизводителя");
		
	Иначе
		
		// Цена за потребительскую упаковку (с НДС).
		// Не заполняется для авансовых СЧФ, в других случаях обязателен для заполнения
		// ЦенаЗаУпакСНДС, Число(27, 11).
		Результат.Вставить("ЦенаЗаПотребительскуюУпаковкуСНДС");
		
		// Фактическая отпускная цена ЛП, руб.
		// Не заполняется для авансовых СЧФ, в других случаях обязателен для заполнения.
		// ЖНВЛП/ФактОтпЦена, Число(21,2).
		Результат.Вставить("ФактическаяОтпускнаяЦенаЖНВЛП");
		// Суммарный размер фактических оптовых надбавок ЛП, руб.
		// Не заполняется для авансовых СЧФ, в других случаях обязателен для заполнения
		// ЖНВЛП/СуммРазмФактОптНадбРуб, Число(21,2).
		Результат.Вставить("СуммарныйРазмерОптовыхНадбавокЖНВЛП");
		// Суммарный размер фактических оптовых надбавок (процент) ЛП, %.
		// Не заполняется для авансовых СЧФ, в других случаях обязателен для заполнения.
		// ЖНВЛП/СуммРазмФактОптНадбПроц, Число(6,2).
		Результат.Вставить("СуммарныйРазмерОптовыхНадбавокВПроцентахЖНВЛП");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Новые сведения о родительской позиции ТРУ.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о родительской позиции ТРУ:
// * Идентификатор 
// * ТехническийИдентификатор 
// * ВнешнийТехническийИдентификатор 
// * Код - Строка -код.
// * Наименование 
// * Вид - Число - вид ТРУ
// * КодЕдиницыИзмерения 
// * НаименованиеЕдиницыИзмерения 
// * ЦенаЗаЕдиницу 
// * Количество 
// * СтоимостьБезНалогов - Число - стоимость без налогов
// * НалоговаяСтавка - Строка - налоговая ставка
// * СтоимостьСНалогами - Число - стоимость с налогами
// * СуммаНалога 
// * СуммаАкциза 
// * КодСтраныПроисхождения 
// * НаименованиеСтраныПроисхождения 
// * КодСтраныПроизводителя 
// * НаименованиеСтраныПроизводителя 
Функция НовыеСведенияОРодительскойПозицииТРУ()
	
	Результат = Новый Структура;
	// GUID товара, работы, услуги.
	Результат.Вставить("Идентификатор");
	// Технический идентификатор позиции ТРУ.
	// Соответствует значению поля sid из сведений о контракте.
	Результат.Вставить("ТехническийИдентификатор");
	// Внешний технический идентифи-катор позиции ТРУ.
	// Соответствует значению поля externalSid из сведений о контракте.
	Результат.Вставить("ВнешнийТехническийИдентификатор");
	// Код товара, Строка 100.
	Результат.Вставить("Код", "");
	// Наименование товара (работы, услуги), Строка 1000.
	Результат.Вставить("Наименование");
	// Признак Товар/Работа/Услуга, Число(1).
	// см. ВидТРУТовар(), ВидТРУРабота(), ВидТРУУслуга().
	Результат.Вставить("Вид", ВидТРУТовар());
	// Код единицы измерения.
	Результат.Вставить("КодЕдиницыИзмерения");
	// Наименование единицы измерения.
	Результат.Вставить("НаименованиеЕдиницыИзмерения");
	// Цена за единицу измерения без НДС.
	Результат.Вставить("ЦенаЗаЕдиницу");
	// Количество (объем).
	Результат.Вставить("Количество", 0);
	// Стоимость товаров (работ, услуг) без налога - всего.
	Результат.Вставить("СтоимостьБезНалогов", 0);
	// Налоговая ставка, Строка: 0%, 10%, 18%, 20%, 10/110, 18/118, 20/120, без НДС.
	Результат.Вставить("НалоговаяСтавка", "0%");
	// Стоимость товаров (работ, услуг) с налогом - всего.
	Результат.Вставить("СтоимостьСНалогами", 0);
	// Сумма налога, предъявляемая покупателю.
	Результат.Вставить("СуммаНалога");
	// Сумма акциза.
	Результат.Вставить("СуммаАкциза");
	// Информация о стране происхождения, производителя.
	Результат.Вставить("КодСтраныПроисхождения");
	Результат.Вставить("НаименованиеСтраныПроисхождения");
	Результат.Вставить("КодСтраныПроизводителя");
	Результат.Вставить("НаименованиеСтраныПроизводителя");
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОТоварахРаботахУслугахДляТитулаПродавцаУПД()
	
	Результат = Новый Структура;
	// Отраслевая специализация:
	// 1 - Строительство;
	// 2 - Лекарственные препараты.
	// Игнорируется для счет-фактур
	// см. ОтраслеваяСпециализацияСтроительство() или ОтраслеваяСпециализацияЛекарственныеПрепараты().
	// ОтрСпец, Строка.
	Результат.Вставить("ОтраслеваяСпециализация");
	// Наименование объекта строительства.
	// Игнорируется для счет-фактур.
	// Если атрибут "Отраслевая специализация" (ОтрСпец) заполнен значением 1 - "Строительство",
	// то контролируется обязательность заполнения, иначе игнорируется при приеме.
	// НаимОбСтр, Строка 2000.
	Результат.Вставить("НаименованиеОбъектаСтроительства");
	// Всего к оплате, Стоимость товаров (работ, услуг) с налогом
	// - всего (строка «Всего к оплате»/графа 9 счета-фактуры) в валюте контракта.
	// Заполняется, если валюта УПД не совпадает с валютой контракта
	Результат.Вставить("СтоимостьТоваровСНалогом");
	// Всего к оплате, Сумма налога, предъявляемая покупателю
	// (строка «Всего к оплате»/графа 8 счета-фактуры) в валюте контракта.
	// Заполняется, если:
	// значение (НДС) СумНал больше 0 и валюта УПД не совпадает с валютой контракта
	Результат.Вставить("ВсегоКОплатеСуммаНалога");
	// Номинал курса валюты по справочнику курсов валют на дату составления УПД.
	Результат.Вставить("НоминалКурсаВалюты");
	// Сведения о товарах, работах, услугах (ТРУ).
	// Массив структур НовыеДетализированныеСведенияОТРУ() или НовыеНедетализированныеСведенияОТРУ().
	Результат.Вставить("ТоварыРаботыУслуги", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОТоварахРаботахУслугахДляТитулаПродавцаУКД()
	
	Результат = Новый Структура;
	// Всего к оплате, Стоимость товаров (работ, услуг) с налогом - всего - уменьшение (в валюте контракта).
 	// Заполняется, если значение не равно 0 и валюта УКД не совпадает с валютой контракта
	Результат.Вставить("УменьшениеСтоимостиТоваровСНалогом");
	// Всего к оплате, Стоимость товаров (работ, услуг) с налогом - всего - увеличение (в валюте контракта).
	// Заполняется, если значение не равно 0 и валюта УКД не совпадает с валютой контракта	
	Результат.Вставить("УвеличениеСтоимостиТоваровСНалогом");
	// Всего к оплате, Сумма налога, предъявляемая покупателю - уменьшение (в валюте контракта).
	// Заполняется, если значение не равно 0 и валюта УКД не совпадает с валютой контракта
	Результат.Вставить("УменьшениеСуммыНалога");
	// Всего к оплате, Сумма налога, предъявляемая покупателю - увеличение (в валюте контракта).
	// Заполняется, если значение не равно 0 и валюта УКД не совпадает с валютой контракта.
	Результат.Вставить("УвеличениеСуммыНалога");
	// Номинал курса валюты по справочнику курсов валют на дату составления УПД.
	Результат.Вставить("НоминалКурсаВалюты");
	// Сведения о товарах, работах, услугах (ТРУ).
	// Массив структур НовыеСведенияОТРУДляУКД()
	Результат.Вставить("ТоварыРаботыУслуги", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьОбщиеПоляПриложенияКТитулуЗаказчика(Результат)
	
	// Массив ошибок, возникших при заполнении приложения.
	Результат.Вставить("ОшибкиЗаполнения", Новый Массив);
	
	Результат.Вставить("ВерсияФормата");
	Тип = Новый ОписаниеТипов("Строка");
	Описание =	НСтр("ru = 'Версия формата'");
	Поле = НовоеПолеСтруктуры("ВерсияФормата", "",
		Тип,
		Описание,
		Истина,
		"@ВерсФорм",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("Вложения");
	Тип = Новый ОписаниеТипов("Массив");
	Описание =	НСтр("ru = 'Прикрепленные документы'");
	Поле = НовоеПолеСтруктуры("Вложения", Новый Массив,
		Тип,
		Описание,
		Ложь,
		"Вложен",,
		"НовыеСведенияОПрикрепленныхДокументахЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтранеПроисхожденияИПроизводителя(Узел,
		Данные,
		ДобавитьСтрануПроисхождения = Истина,
		ДобавитьСтрануПроизводителя = Истина,
		ИмяТегаСтраныПроисхождения = "СтранаПроисх",
		ИмяТегаСтраныПроизводителя = "СтранаПроизв")
	
	// Страна проихождения и производителя.
	Если ДобавитьСтрануПроисхождения И ЗначениеЗаполнено(Данные.КодСтраныПроисхождения) Тогда
		УзелСтранаПроисхождения = ДобавитьУзелXML(Узел, ИмяТегаСтраныПроисхождения, Ложь);
		ДобавитьУзелXML(УзелСтранаПроисхождения, "Код", Истина, Данные.КодСтраныПроисхождения);
		ДобавитьУзелXML(УзелСтранаПроисхождения, "Наим", Истина, Данные.НаименованиеСтраныПроисхождения, Истина);
	КонецЕсли;
	Если ДобавитьСтрануПроизводителя И ЗначениеЗаполнено(Данные.КодСтраныПроизводителя) Тогда
		УзелСтранаПроиводителя = ДобавитьУзелXML(Узел, ИмяТегаСтраныПроизводителя, Ложь);
		ДобавитьУзелXML(УзелСтранаПроиводителя, "Код", Истина, Данные.КодСтраныПроизводителя);
		ДобавитьУзелXML(УзелСтранаПроиводителя, "Наим", Истина, Данные.НаименованиеСтраныПроизводителя, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеОТоварахВПриложениеКТитулуПродавцаУКД(Узел, СведенияОТоварах)
	
	ТоварыРаботыУслуги = СведенияОТоварах.ТоварыРаботыУслуги;
	
	Если ТоварыРаботыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УзелСведенияОТоварах = ДобавитьУзелXML(Узел, "СведТов", Ложь);
	ДобавитьУзелXML(УзелСведенияОТоварах, "ВсегоУмОплСтТовУчНалВсего",
		Истина, СведенияОТоварах.УменьшениеСтоимостиТоваровСНалогом, Истина);
	ДобавитьУзелXML(УзелСведенияОТоварах, "ВсегоУвелОплСтТовУчНалВсего",
		Истина, СведенияОТоварах.УвеличениеСтоимостиТоваровСНалогом, Истина);
	ДобавитьУзелXML(УзелСведенияОТоварах, "ВсегоУмОплСумНал",
		Истина, СведенияОТоварах.УменьшениеСуммыНалога, Истина);
	ДобавитьУзелXML(УзелСведенияОТоварах, "ВсегоУвелОплСумНал",
		Истина, СведенияОТоварах.УвеличениеСуммыНалога, Истина);
		
	ДобавитьУзелXML(УзелСведенияОТоварах, "НоминалКурсВал",
		Истина, СведенияОТоварах.НоминалКурсаВалюты, Истина);
	
	Для каждого ТРУ Из ТоварыРаботыУслуги Цикл
		УзелСведенийТРУБезДеталей = ДобавитьУзелXML(УзелСведенияОТоварах, "ТРУ", Ложь);
		
		ДобавитьУзелXML(УзелСведенийТРУБезДеталей, "ИдТРУ", Истина, ТРУ.Идентификатор, Истина);
		ДобавитьУзелXML(УзелСведенийТРУБезДеталей, "ТехИдТРУ", Истина, ТРУ.ТехническийИдентификатор, Истина);
		ДобавитьУзелXML(УзелСведенийТРУБезДеталей, "ВнешТехИдТРУ", Истина, ТРУ.ВнешнийТехническийИдентификатор, Истина);
		ДобавитьУзелXML(УзелСведенийТРУБезДеталей, "ИдРодТРУ", Истина, ТРУ.РодительскийИдентификатор, Истина);
		ДобавитьУзелXML(УзелСведенийТРУБезДеталей, "ТехИдРодТРУ", Истина, ТРУ.РодительскийТехническийИдентификатор, Истина);
		ДобавитьУзелXML(УзелСведенийТРУБезДеталей, "ВнешТехИдРодТРУ", Истина, ТРУ.РодительскийВнешнийТехническийИдентификатор, Истина);
		ДобавитьУзелXML(УзелСведенийТРУБезДеталей, "НаимТовИсх", Истина, ТРУ.ИсходноеНаименование, Истина);
		ДобавитьУзелXML(УзелСведенийТРУБезДеталей, "КодТов", Истина, ТРУ.Код);
		Если ТРУ.ЭтоЛекарственныйПрепарат Тогда
			// Лекарство.
			СведенияОЛекарстве = ТРУ.СведенияОЛекарственномПрепарате;
			
			Если НЕ ЗначениеЗаполнено(СведенияОЛекарстве.СрокГодности) Тогда
				ВызватьИсключение("Не указан срок годности лекарственного препарата.");
			КонецЕсли;
			
			УзелСведенийЛП = ДобавитьУзелXML(УзелСведенийТРУБезДеталей, "ЛПСвед", Ложь);
			ДобавитьУзелXML(УзелСведенийЛП, "НомСтр", Истина, ТРУ.НомерСтрокиТаблицы);
			ДобавитьУзелXML(УзелСведенийЛП, "ИдЛП", Истина, СведенияОЛекарстве.ИдентификаторЛекарственногоПрепарата);
			ДобавитьУзелXML(УзелСведенийЛП, "СерияЛекПреп", Истина,
				СведенияОЛекарстве.Серия);
			ДобавитьУзелXML(УзелСведенийЛП, "СрокГодн", Истина,
				СведенияОЛекарстве.СрокГодности);
			
			УзелМНН = ДобавитьУзелXML(УзелСведенийЛП, "ПозицПоМНН", Ложь);
			ДобавитьУзелXML(УзелМНН, "МНН", Истина, СведенияОЛекарстве.МеждународноеНепатентованноеНаименование);
			ДобавитьУзелXML(УзелМНН, "ТН", Истина, СведенияОЛекарстве.ТорговоеНаименование);
			ДобавитьУзелXML(УзелМНН, "ЛекФорм", Истина, СведенияОЛекарстве.ЛекарственнаяФорма);
			
			УзелДозировка = ДобавитьУзелXML(УзелСведенийЛП, "ДозСвед", Ложь);
			ДобавитьУзелXML(УзелДозировка, "Наим", Истина, СведенияОЛекарстве.ДозировкаНаименование);
			ДобавитьУзелXML(УзелДозировка, "Знач", Истина, СведенияОЛекарстве.ДозировкаЗначение);
			
			УзелПотребЕдИзмерения = ДобавитьУзелXML(УзелСведенийЛП, "ПотребЕдИзмСвед", Ложь);
			ДобавитьУзелXML(УзелПотребЕдИзмерения, "Наим", Истина,
				СведенияОЛекарстве.НаименованиеПотребительскойЕдиницыИзмерения);
			ДобавитьУзелXML(УзелПотребЕдИзмерения, "Колич", Истина,
				СведенияОЛекарстве.КоличествоВПотребительскихЕдиницахИзмерения);
					
			// Упаковка.
			УзелУпаковки = ДобавитьУзелXML(УзелСведенийЛП, "УпакСвед", Ложь);
			ДобавитьУзелXML(УзелУпаковки, "ВидПервУпак", Истина,
				СведенияОЛекарстве.ВидПервичнойУпаковки);
			ДобавитьУзелXML(УзелУпаковки, "КоличЛекФормВПервУпак", Истина,
				СведенияОЛекарстве.КоличествоВПервичнойУпаковке);
			ДобавитьУзелXML(УзелУпаковки, "КоличПервУпакВПотребУпак", Истина,
				СведенияОЛекарстве.КоличествоПервичныхУпаковокВПотребительскойУпаковке);
			ДобавитьУзелXML(УзелУпаковки, "КоличЛекФормВПотребУпак", Истина,
				СведенияОЛекарстве.КоличествоЛекарственныхФормВПотребительскойУпаковке);
			ДобавитьУзелXML(УзелУпаковки, "КоличПотребЕдВПотребУпак", Истина,
				СведенияОЛекарстве.КоличествоПотребительскихЕдиницВПотребительскойУпаковке);
			// Цена за упаковку.
			УзелЦенаЗаУпаковку = ДобавитьУзелXML(УзелУпаковки, "ЦенаЗаУпакСНДС", Ложь);
			ДобавитьУзелXML(УзелЦенаЗаУпаковку, "ДоИзм", Истина,
				СведенияОЛекарстве.ЦенаЗаПотребительскуюУпаковкуСНДСДоИзменения);
			ДобавитьУзелXML(УзелЦенаЗаУпаковку, "ПослеИзм", Истина,
				СведенияОЛекарстве.ЦенаЗаПотребительскуюУпаковкуСНДСПослеИзменения);
				
			// Страна проихождения и производителя.
			ДобавитьСведенияОСтранеПроисхожденияИПроизводителя(УзелСведенийЛП, СведенияОЛекарстве, Ложь, Истина);
			
			Если СведенияОЛекарстве.ВключенВЖНВЛП Тогда
				УзелЖНВЛП = ДобавитьУзелXML(УзелСведенийЛП, "ЖНВЛП", Ложь);
				ДобавитьУзелXML(УзелЖНВЛП, "ЗарегПредОтпЦена", Истина,
					СведенияОЛекарстве.ПредельнаяОтпускнаяЦенаЖНВЛП);
					
				УзелЦены = ДобавитьУзелXML(УзелЖНВЛП, "ФактОтпЦена", Ложь);
				ДобавитьУзелXML(УзелЦены, "ДоИзм", Истина,
					СведенияОЛекарстве.ФактическаяОтпускнаяЦенаЖНВЛПДоИзменения);
				ДобавитьУзелXML(УзелЦены, "ПослеИзм", Истина,
					СведенияОЛекарстве.ФактическаяОтпускнаяЦенаЖНВЛППослеИзменения);
					
				УзелНадбавки = ДобавитьУзелXML(УзелЖНВЛП, "СуммРазмФактОптНадбРуб", Ложь);
				ДобавитьУзелXML(УзелНадбавки, "ДоИзм", Истина,
					СведенияОЛекарстве.СуммарныйРазмерОптовыхНадбавокЖНВЛПДоИзменения);
				ДобавитьУзелXML(УзелНадбавки, "ПослеИзм", Истина,
					СведенияОЛекарстве.СуммарныйРазмерОптовыхНадбавокЖНВЛППослеИзменения);
					
				УзелНадбавки = ДобавитьУзелXML(УзелЖНВЛП, "СуммРазмФактОптНадбПроц", Ложь);
				ДобавитьУзелXML(УзелНадбавки, "ДоИзм", Истина,
					СведенияОЛекарстве.СуммарныйРазмерОптовыхНадбавокВПроцентахЖНВЛПДоИзменения);
				ДобавитьУзелXML(УзелНадбавки, "ПослеИзм", Истина,
					СведенияОЛекарстве.СуммарныйРазмерОптовыхНадбавокВПроцентахЖНВЛППослеИзменения);
			КонецЕсли;
			
		Иначе
			// Не лекарственный ТРУ.
			УзелСведенийНеЛекарство = ДобавитьУзелXML(УзелСведенийТРУБезДеталей, "НеЛПСвед", Ложь);
			ДобавитьУзелXML(УзелСведенийНеЛекарство, "НомСтр", Истина, ТРУ.НомерСтрокиТаблицы);
			Если ЗначениеЗаполнено(ТРУ.ОбъемВТекстовомВыраженииДоИзменения) Тогда
				УзелКоличество = ДобавитьУзелXML(УзелСведенийНеЛекарство, "ОбРабУсл", Ложь);
				ДобавитьУзелXML(УзелКоличество, "ДоИзм", Истина, ТРУ.ОбъемВТекстовомВыраженииДоИзменения);
				ДобавитьУзелXML(УзелКоличество, "ПослеИзм", Истина, ТРУ.ОбъемВТекстовомВыраженииПослеИзменения);
			КонецЕсли;
			// Согласно РДИК_ИК_2017 всегда добавляем узел, даже если единицы не изменились.
			УзелЕдиницаИзмерения = ДобавитьУзелXML(УзелСведенийНеЛекарство, "НаимЕдИзм", Ложь);
			ДобавитьУзелXML(УзелЕдиницаИзмерения, "ДоИзм", Истина, ТРУ.НаименованиеЕдиницыИзмеренияДоИзменения);
			ДобавитьУзелXML(УзелЕдиницаИзмерения, "ПослеИзм", Истина, ТРУ.НаименованиеЕдиницыИзмеренияПослеИзменения);
			Если Истина ИЛИ ТРУ.ЦенаСНДСДоИзменения <> ТРУ.ЦенаСНДСПослеИзменения Тогда
				УзелЦена = ДобавитьУзелXML(УзелСведенийНеЛекарство, "ЦенаСНДС", Ложь);
				ДобавитьУзелXML(УзелЦена, "ДоИзм", Истина, ТРУ.ЦенаСНДСДоИзменения);
				ДобавитьУзелXML(УзелЦена, "ПослеИзм", Истина, ТРУ.ЦенаСНДСПослеИзменения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Разбор структуры НовыйВидРаботСтроительство().
Процедура ДобавитьДанныеОВидеРаботПоСтроительствуКТитулуПродавцаУПД(Узел, ДанныеВидаРабот)
	
	ПризнакТовара = 1;
	ПризнакРаботы = 2;
	
	УзелВидаРабот = ДобавитьУзелXML(Узел, "ВидРаб", Ложь);
	ДобавитьУзелXML(УзелВидаРабот, "ИдВидРаб", Истина, ДанныеВидаРабот.Идентификатор);
	ДобавитьУзелXML(УзелВидаРабот, "НомВидРаб", Истина, ДанныеВидаРабот.ПорядковыйНомер, Истина);
	ДобавитьУзелXML(УзелВидаРабот, "НаимВидРаб", Истина, ДанныеВидаРабот.НаименованиеВидаРабот);
	ДобавитьУзелXML(УзелВидаРабот, "ПозСмет", Истина, ДанныеВидаРабот.НомерПозицииПоСмете, Истина);
	ПризнакТовараРаботы = ?(ДанныеВидаРабот.ЭтоТовар, ПризнакТовара, ПризнакРаботы);
	ДобавитьУзелXML(УзелВидаРабот, "ПрТовРаб", Истина, ПризнакТовараРаботы);
	ДобавитьУзелXML(УзелВидаРабот, "КолВидРаб", Истина, ДанныеВидаРабот.Количество);
	Если ПризнакТовараРаботы = ПризнакРаботы Тогда
		ДобавитьУзелXML(УзелВидаРабот, "ОбВидРаб", Истина, ДанныеВидаРабот.Объем, Истина);
	КонецЕсли;
	ДобавитьУзелXML(УзелВидаРабот, "ЦенаБезНДС", Истина, ДанныеВидаРабот.ЦенаБезНДС);
	ДобавитьУзелXML(УзелВидаРабот, "ЦенаСНДС", Истина, ДанныеВидаРабот.ЦенаСНДС);
	ДобавитьУзелXML(УзелВидаРабот, "СтоимБезНДС", Истина, ДанныеВидаРабот.СтоимостьБезНДСВсего);
	ДобавитьУзелXML(УзелВидаРабот, "СтоимСНДС", Истина, ДанныеВидаРабот.СтоимостьСНДСВсего);
	
	УзелКодаТовара = ДобавитьУзелXML(УзелВидаРабот, "КодТов", Ложь);
	ДобавитьУзелXML(УзелКодаТовара, "Код", Истина, ДанныеВидаРабот.КодТовараПоОКПД2);
	ДобавитьУзелXML(УзелКодаТовара, "Наим", Истина, ДанныеВидаРабот.НаименованиеТовараПоОКПД2, Истина);
	
	// Инфорамция о единицах измерения.
	УзелЕдиницыИзмерения = ДобавитьУзелXML(УзелВидаРабот, "ЕдИзм", Ложь);
	УзелОКЕИ = ДобавитьУзелXML(УзелЕдиницыИзмерения, "ОКЕИ", Ложь);
	ДобавитьУзелXML(УзелОКЕИ, "Код", Истина, ДанныеВидаРабот.ОКЕИ.Код);
	ДобавитьУзелXML(УзелОКЕИ, "НацУслОбоз", Истина, ДанныеВидаРабот.ОКЕИ.НациональныйКод, Истина);
	ДобавитьУзелXML(УзелОКЕИ, "Наим", Истина, ДанныеВидаРабот.ОКЕИ.Наименование, Истина);
	Если НЕ ПустаяСтрока(ДанныеВидаРабот.КодОЕИ) Тогда
		УзелОЕИ = ДобавитьУзелXML(УзелЕдиницыИзмерения, "ОЕИ", Ложь);
		ДобавитьУзелXML(УзелОЕИ, "Код", Истина, ДанныеВидаРабот.КодОЕИ);
		ДобавитьУзелXML(УзелОЕИ, "Наим", Истина, ДанныеВидаРабот.НаименованиеОЕИ, Истина);
	КонецЕсли;
	
	ДобавитьСведенияОСтранеПроисхожденияИПроизводителя(УзелВидаРабот, ДанныеВидаРабот, , , "СтрПроисх", "СтрРегПроизв");
	
	ДобавитьДанныеОСуммахНДС(УзелВидаРабот, ДанныеВидаРабот, "СумНал");
	
	// Сведения о таможенной декларации.
	// Разбор НовыеСведенияОТаможеннойДекларации();
	Для каждого СведенияТД Из ДанныеВидаРабот.СведенияОТаможеннойДекларации Цикл
		УзелТД = ДобавитьУзелXML(УзелВидаРабот, "СвТД", Ложь);
		ДобавитьУзелXML(УзелТД, "КодПроисх", Истина, СведенияТД.КодСтраныПроисхождения);
		ДобавитьУзелXML(УзелТД, "Наим", Истина, СведенияТД.НименованиеСтраныПроисхождения);
		ДобавитьУзелXML(УзелТД, "ДефКодПроисх", Истина, СведенияТД.КодСтраныПроисхожденияСчетФактура);
		ДобавитьУзелXML(УзелТД, "НомерТД", Истина, СведенияТД.НомерТаможеннойДекларации);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеОСуммахНДС(Узел, ДанныеНДС, ИмяУзлаНДС)
	
	УзелНДС = ДобавитьУзелXML(Узел, ИмяУзлаНДС, Ложь);
	
	Если ДанныеНДС.СуммаНДС > 0 Тогда
		ДобавитьУзелXML(УзелНДС, "СумНал", Ложь, ДанныеНДС.СуммаНДС);
	ИначеЕсли ДанныеНДС.БезНДС Тогда
		ДобавитьУзелXML(УзелНДС, "БезНДС", Ложь, "без НДС");
	ИначеЕсли ДанныеНДС.ПрочеркПоНДС Тогда
		ДобавитьУзелXML(УзелНДС, "ДефНДС", Ложь, "-");
	КонецЕсли;
	
КонецПроцедуры

// Разбор структуры НовыйРазделВидовРаботСтроительство().
Процедура ДобавитьДанныеОСтроительнойСпециализацииКТитулуПродавцаУПД(Узел, СведенияОТРУ)
	
	СведенияСтроительнойСпециализация = СведенияОТРУ.СведенияОтраслевойСпециализация;
	
	УзелСпециализации = ДобавитьУзелXML(Узел, "ОтрСпец", Ложь);
	УзелСтроительства = ДобавитьУзелXML(УзелСпециализации, "СтройДетал", Ложь);
	
	Для каждого Раздел Из СведенияСтроительнойСпециализация.РазделыВидовРабот Цикл
		УзелРаздела = ДобавитьУзелXML(УзелСтроительства, "Раздел", Ложь);
		ДобавитьУзелXML(УзелРаздела, "ИдРаздел", Истина, Раздел.Идентификатор);
		ДобавитьУзелXML(УзелРаздела, "НаимРаздел", Истина, Раздел.НаименованиеРаздела);
		ДобавитьУзелXML(УзелРаздела, "СтоимБезНДСРаздел", Истина, Раздел.СтоимостьБезНДСРаздела);
		ДобавитьУзелXML(УзелРаздела, "СтоимСНДСРаздел", Истина, Раздел.СтоимостьСНДСРаздела);
		Для каждого ВидРабот Из Раздел.ВидыРабот Цикл
			ДобавитьДанныеОВидеРаботПоСтроительствуКТитулуПродавцаУПД(УзелСтроительства, ВидРабот);
		КонецЦикла;
		ДобавитьДанныеОСуммахНДС(УзелРаздела, СведенияСтроительнойСпециализация, "СумНалРаздел");
	КонецЦикла;
	
	Для каждого ВидРабот Из СведенияСтроительнойСпециализация.ВидыРабот Цикл
		ДобавитьДанныеОВидеРаботПоСтроительствуКТитулуПродавцаУПД(УзелСтроительства, ВидРабот);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеОЛекарственномПрепаратеКТитулуПродавцаУПД(Узел, СведенияОТРУ, ЭтоАвансоваяСчетФактура)
	
	СведенияОЛекарстве = СведенияОТРУ.СведенияОЛекарственномПрепарате;
	
	Если НЕ ЗначениеЗаполнено(СведенияОЛекарстве.СрокГодности) Тогда
		ВызватьИсключение("Не указан срок годности лекарственного препарата.");
	КонецЕсли;
	
	УзелСведенийЛП = ДобавитьУзелXML(Узел, "ЛПСвед", Ложь);
	ДобавитьУзелXML(УзелСведенийЛП, "НомСтр", Истина, СведенияОТРУ.НомерСтрокиТаблицы);
	ДобавитьУзелXML(УзелСведенийЛП, "ИдЛП", Истина, СведенияОЛекарстве.ИдентификаторЛекарственногоПрепарата);
	ДобавитьУзелXML(УзелСведенийЛП, "ЦенаЗаУпакСНДС", Истина,
		СведенияОЛекарстве.ЦенаЗаПотребительскуюУпаковкуСНДС);
	ДобавитьУзелXML(УзелСведенийЛП, "СерияЛекПреп", Истина,
		СведенияОЛекарстве.Серия);
	ДобавитьУзелXML(УзелСведенийЛП, "СрокГодн", Истина,
		СведенияОЛекарстве.СрокГодности);
	
	УзелМНН = ДобавитьУзелXML(УзелСведенийЛП, "ПозицПоМНН", Ложь);
	ДобавитьУзелXML(УзелМНН, "МНН", Истина, СведенияОЛекарстве.МеждународноеНепатентованноеНаименование);
	ДобавитьУзелXML(УзелМНН, "ТН", Истина, СведенияОЛекарстве.ТорговоеНаименование);
	ДобавитьУзелXML(УзелМНН, "ЛекФорм", Истина, СведенияОЛекарстве.ЛекарственнаяФорма);
	
	Если НЕ ЭтоАвансоваяСчетФактура Тогда
		УзелДозировка = ДобавитьУзелXML(УзелСведенийЛП, "ДозСвед", Ложь);
		ДобавитьУзелXML(УзелДозировка, "Наим", Истина, СведенияОЛекарстве.ДозировкаНаименование);
		ДобавитьУзелXML(УзелДозировка, "Знач", Истина, СведенияОЛекарстве.ДозировкаЗначение);
	КонецЕсли;
	
	Если НЕ ЭтоАвансоваяСчетФактура Тогда
		УзелПотребЕдИзмерения = ДобавитьУзелXML(УзелСведенийЛП, "ПотребЕдИзмСвед", Ложь);
		ДобавитьУзелXML(УзелПотребЕдИзмерения, "Наим", Истина,
			СведенияОЛекарстве.НаименованиеПотребительскойЕдиницыИзмерения);
		ДобавитьУзелXML(УзелПотребЕдИзмерения, "Колич", Истина,
			СведенияОЛекарстве.КоличествоВПотребительскихЕдиницахИзмерения);
	КонецЕсли;
	
	// Упаковка.
	УзелУпаковки = ДобавитьУзелXML(УзелСведенийЛП, "УпакСвед", Ложь);
	ДобавитьУзелXML(УзелУпаковки, "ВидПервУпак", Истина,
		СведенияОЛекарстве.ВидПервичнойУпаковки);
	ДобавитьУзелXML(УзелУпаковки, "КоличЛекФормВПервУпак", Истина,
		СведенияОЛекарстве.КоличествоВПервичнойУпаковке);
	ДобавитьУзелXML(УзелУпаковки, "КоличПервУпакВПотребУпак", Истина,
		СведенияОЛекарстве.КоличествоПервичныхУпаковокВПотребительскойУпаковке);
	ДобавитьУзелXML(УзелУпаковки, "КоличЛекФормВПотребУпак", Истина,
		СведенияОЛекарстве.КоличествоЛекарственныхФормВПотребительскойУпаковке);
	ДобавитьУзелXML(УзелУпаковки, "КоличПотребЕдВПотребУпак", Истина,
		СведенияОЛекарстве.КоличествоПотребительскихЕдиницВПотребительскойУпаковке);
		
	// Страна проихождения и производителя.
	ДобавитьСведенияОСтранеПроисхожденияИПроизводителя(УзелСведенийЛП, СведенияОТРУ);
	
	Если СведенияОЛекарстве.ВключенВЖНВЛП Тогда
		УзелЖНВЛП = ДобавитьУзелXML(УзелСведенийЛП, "ЖНВЛП", Ложь);
		ДобавитьУзелXML(УзелЖНВЛП, "ФактОтпЦена", Истина,
			СведенияОЛекарстве.ФактическаяОтпускнаяЦенаЖНВЛП);
		ДобавитьУзелXML(УзелЖНВЛП, "ЗарегПредОтпЦена", Истина,
			СведенияОЛекарстве.ПредельнаяОтпускнаяЦенаЖНВЛП);
		ДобавитьУзелXML(УзелЖНВЛП, "СуммРазмФактОптНадбРуб", Истина,
			СведенияОЛекарстве.СуммарныйРазмерОптовыхНадбавокЖНВЛП);
		ДобавитьУзелXML(УзелЖНВЛП, "СуммРазмФактОптНадбПроц", Истина,
			СведенияОЛекарстве.СуммарныйРазмерОптовыхНадбавокВПроцентахЖНВЛП);
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьСведенияОМестеПоставкиТовара(Узел, Данные)
	
	Для Каждого Место Из Данные.СведенияОМестахПоставкиТовара Цикл
		// Заполняется по данным НовыеСведенияОМестеПоставкиТоварнойПозиции()
		УзелМеста = ДобавитьУзелXML(Узел, "СведПоставкиТов", Ложь);
		ДобавитьУзелXML(УзелМеста, "ИдМестаПоставки", Истина, Место.Идентификатор);
		ДобавитьУзелXML(УзелМеста, "ПостКол", Истина, Место.ПоставляемоеКоличество);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеОТоварахВПриложениеКТитулуПродавцаУПД(Узел, СведенияОТоварах, ЭтоАвансоваяСчетФактура = Ложь)
	
	ТоварыРаботыУслуги = СведенияОТоварах.ТоварыРаботыУслуги;
	
	Если ТоварыРаботыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УзелСведенияОТоварах = ДобавитьУзелXML(Узел, "СведТов", Ложь);
	ДобавитьУзелXML(УзелСведенияОТоварах, "ВсегоОплСтТовУчНалВсего", Истина, СведенияОТоварах.СтоимостьТоваровСНалогом, Истина);
	ДобавитьУзелXML(УзелСведенияОТоварах, "ВсегоОплСумНал", Истина, СведенияОТоварах.ВсегоКОплатеСуммаНалога, Истина);
	ДобавитьУзелXML(УзелСведенияОТоварах, "НоминалКурсВал", Истина, СведенияОТоварах.НоминалКурсаВалюты, Истина);
	ДобавитьУзелXML(УзелСведенияОТоварах, "ОтрСпец", Истина, СведенияОТоварах.ОтраслеваяСпециализация, Истина);
	Если СведенияОТоварах.ОтраслеваяСпециализация = ОтраслеваяСпециализацияСтроительство() Тогда
		ДобавитьУзелXML(УзелСведенияОТоварах, "НаимОбСтр", Истина, СведенияОТоварах.НаименованиеОбъектаСтроительства);
	КонецЕсли;
	
	Для каждого ТРУ Из ТоварыРаботыУслуги Цикл
		УзелСведенийТРУ = ДобавитьУзелXML(УзелСведенияОТоварах, "СведТРУ", Ложь);
		Если ТРУ.ЭтоДетализированныеСведения Тогда
			// Детализированное описание ТРУ (указывается строка контракта и одна или несколько позиций из документа).
			УзелСведенийТРУДетали = ДобавитьУзелXML(УзелСведенийТРУ, "ДеталТРУ", Ложь);
			СведенияОРодителе = ТРУ.СведенияОРодительскойПозиции;
			УзелСведенияОРодителе = ДобавитьУзелXML(УзелСведенийТРУДетали, "СведРод", Ложь);
			ДобавитьУзелXML(УзелСведенияОРодителе, "ИдТРУ", Истина, СведенияОРодителе.Идентификатор, Истина);
			ДобавитьУзелXML(УзелСведенияОРодителе,
				"ТехИдТРУ",
				Истина,
				XMLЗначение(Тип("Число"), СведенияОРодителе.ТехническийИдентификатор),
				Истина);
			ДобавитьУзелXML(УзелСведенияОРодителе, "ВнешТехИдТРУ", Истина, СведенияОРодителе.ВнешнийТехническийИдентификатор, Истина);
			ДобавитьУзелXML(УзелСведенияОРодителе, "КодТов", Истина, СведенияОРодителе.Код);
			ДобавитьУзелXML(УзелСведенияОРодителе, "НаимТов", Истина, СведенияОРодителе.Наименование);
			ДобавитьУзелXML(УзелСведенияОРодителе, "ПрТовРаб", Истина, СведенияОРодителе.Вид);
			ДобавитьУзелXML(УзелСведенияОРодителе, "КодЕдИзм", Истина, СведенияОРодителе.КодЕдиницыИзмерения, Истина);
			ДобавитьУзелXML(УзелСведенияОРодителе, "НаимЕдИзм", Истина, СведенияОРодителе.НаименованиеЕдиницыИзмерения, Истина);
			ДобавитьУзелXML(УзелСведенияОРодителе, "ЦенаЕдИзм", Истина, СведенияОРодителе.ЦенаЗаЕдиницу, Истина);
			ДобавитьУзелXML(УзелСведенияОРодителе, "КолТов", Истина, СведенияОРодителе.Количество, Истина);
			ДобавитьУзелXML(УзелСведенияОРодителе, "СтТовБезНДС", Истина, СведенияОРодителе.СтоимостьБезНалогов);
			ДобавитьУзелXML(УзелСведенияОРодителе, "НалСт", Истина, СведенияОРодителе.НалоговаяСтавка);
			ДобавитьУзелXML(УзелСведенияОРодителе, "СтТовУчНал", Истина, СведенияОРодителе.СтоимостьСНалогами);
			// Данные об НДС.
			Если ЗначениеЗаполнено(СведенияОРодителе.СуммаНалога) И СведенияОРодителе.СуммаНалога > 0 Тогда
				УзелСуммаНалога = ДобавитьУзелXML(УзелСведенияОРодителе, "СумНал", Ложь);
				ДобавитьУзелXML(УзелСуммаНалога, "СумНал", Ложь, СведенияОРодителе.СуммаНалога);
			Иначе
				УзелСуммаНалога = ДобавитьУзелXML(УзелСведенияОРодителе, "СумНал", Ложь);
				ДобавитьУзелXML(УзелСуммаНалога, "БезНДС", Ложь, "без НДС");
			КонецЕсли;
			Если ЗначениеЗаполнено(СведенияОРодителе.СуммаАкциза) И СведенияОРодителе.СуммаАкциза > 0 Тогда
				УзелСуммаАкциза = ДобавитьУзелXML(УзелСведенияОРодителе, "Акциз", Ложь);
				ДобавитьУзелXML(УзелСуммаАкциза, "СумАкциз", Ложь, СведенияОРодителе.СуммаАкциза);
			Иначе
				УзелСуммаАкциза = ДобавитьУзелXML(УзелСведенияОРодителе, "Акциз", Ложь);
				ДобавитьУзелXML(УзелСуммаАкциза, "БезАкциз", Ложь, "без акциза");
			КонецЕсли;
			// Страна проихождения и производителя.
			ДобавитьСведенияОСтранеПроисхожденияИПроизводителя(УзелСведенияОРодителе, СведенияОРодителе);
			
			// Сведения о дочерних позициях.
			Для каждого ДочерняяПозиция Из ТРУ.СведенияОДочернихПозициях Цикл
				УзелДочернейПозиции = ДобавитьУзелXML(УзелСведенийТРУДетали, "СведДетал", Ложь);
				ДобавитьУзелXML(УзелДочернейПозиции, "НомСтр", Истина, ДочерняяПозиция.НомерСтрокиТаблицы);
				ДобавитьУзелXML(УзелДочернейПозиции, "ИдТРУ", Истина, ДочерняяПозиция.Идентификатор);
				ДобавитьУзелXML(УзелДочернейПозиции, "ЦенаСНДС", Истина, ДочерняяПозиция.ЦенаЗаЕдиницуСНДС);
				ДобавитьУзелXML(УзелДочернейПозиции,
					"ПрУлучшХаракт",
					Истина,
					ДочерняяПозиция.ПризнакПоставкиОбъектаЗакупкиСУлучшеннымиХарактеристиками,
					Истина);
				Если СведенияОТоварах.ОтраслеваяСпециализация = ОтраслеваяСпециализацияПриобретениеЖилыхПомещений() Тогда
					ДобавитьУзелXML(УзелДочернейПозиции,
						"СведЖилПом",
						Истина,
						ТРУ.СведенияОХарактеристикахЖилогоПомещения,
						Истина);
				КонецЕсли;	
				// Страна проихождения и производителя.
				ДобавитьСведенияОСтранеПроисхожденияИПроизводителя(
					УзелДочернейПозиции, ДочерняяПозиция);
				// Сведения о местах поставки товаров.
				ДобавитьСведенияОМестеПоставкиТовара(УзелДочернейПозиции, ДочерняяПозиция);
			КонецЦикла;
		Иначе
			// Недетализированное описание ТРУ.
			УзелСведенийТРУБезДеталей = ДобавитьУзелXML(УзелСведенийТРУ, "НедеталТРУ", Ложь);
			ДобавитьУзелXML(УзелСведенийТРУБезДеталей, "ИдТРУ", Истина, ТРУ.Идентификатор, Истина);
			ДобавитьУзелXML(УзелСведенийТРУБезДеталей,
				"ТехИдТРУ",
				Истина,
				ТРУ.ТехническийИдентификатор,
				Истина);
			ДобавитьУзелXML(УзелСведенийТРУБезДеталей, "ВнешТехИдТРУ", Истина, ТРУ.ВнешнийТехническийИдентификатор, Истина);
			ДобавитьУзелXML(УзелСведенийТРУБезДеталей, "НаимТовИсх", Истина, ТРУ.ИсходноеНаименование, Истина);
			
			// Лекарственный препарат.
			Если ТРУ.ЭтоЛекарственныйПрепарат Тогда
				
				ДобавитьДанныеОЛекарственномПрепаратеКТитулуПродавцаУПД(
					УзелСведенийТРУБезДеталей, ТРУ, ЭтоАвансоваяСчетФактура);
					
			Иначе
				
				// Не лекарственный ТРУ.
				УзелСведенийНеЛекарство = ДобавитьУзелXML(УзелСведенийТРУБезДеталей, "НеЛПСвед", Ложь);
				ДобавитьУзелXML(УзелСведенийНеЛекарство, "НомСтр", Истина, ТРУ.НомерСтрокиТаблицы);
				ДобавитьУзелXML(УзелСведенийНеЛекарство, "ОбРабУсл", Истина, ТРУ.ОбъемВТекстовомВыражении, Истина);
				ДобавитьУзелXML(УзелСведенийНеЛекарство,
					"ЦенаИзКонтСНДС",
					Истина,
					ТРУ.ЦенаИзКонтрактаСНДС,
					Истина);
				ДобавитьУзелXML(УзелСведенийНеЛекарство,
					"ПрУлучшХаракт",
					Истина,
					ТРУ.ПризнакПоставкиОбъектаЗакупкиСУлучшеннымиХарактеристиками,
					Истина);
					
				Если СведенияОТоварах.ОтраслеваяСпециализация = ОтраслеваяСпециализацияПриобретениеЖилыхПомещений() Тогда
					ДобавитьУзелXML(УзелСведенийНеЛекарство,
						"СведЖилПом",
						Истина,
						ТРУ.СведенияОХарактеристикахЖилогоПомещения,
						Истина);
				КонецЕсли;
					
				// Страна проихождения и производителя.
				ДобавитьСведенияОСтранеПроисхожденияИПроизводителя(УзелСведенийНеЛекарство, ТРУ);
				
				Если ТРУ.ОтраслеваяСпециализация = ОтраслеваяСпециализацияСтроительство() Тогда
					
					// Строительная специализация.
					ДобавитьДанныеОСтроительнойСпециализацииКТитулуПродавцаУПД(
						УзелСведенийНеЛекарство, ТРУ);
						
				КонецЕсли;
				
				// Сведения о местах поставки товаров.
				ДобавитьСведенияОМестеПоставкиТовара(УзелСведенийНеЛекарство, ТРУ);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеОМестахПоставкиВПриложенияКТитулуПродавца(ДеревоДанных, ДанныеПриложения)
	
	Если ДанныеПриложения.МестаПоставки.Количество() > 0 Тогда
		УзелМестаПоставки = ДобавитьУзелXML(ДеревоДанных, "СведМестаПоставки", Ложь);
		Для каждого Место Из ДанныеПриложения.МестаПоставки Цикл
			
			УзелМестоПоставки = ДобавитьУзелXML(УзелМестаПоставки, "СведМестоПоставки", Ложь);
			ДобавитьУзелXML(УзелМестоПоставки, "Место", Истина, Место.Место);
			ДобавитьУзелXML(УзелМестоПоставки, "ИдМестаПоставки", Истина, Место.Идентификатор);
			ДобавитьУзелXML(УзелМестоПоставки, "ИнфДляУчаст", Истина, Место.ИдентификаторУчастника);
			Если Место.Классификатор = МестоПоставкиПоКЛАДР()
				ИЛИ Место.Классификатор = МестоПоставкиПоОКСМ() Тогда
				
				УзелКЛАДР = ДобавитьУзелXML(УзелМестоПоставки, "ПоКЛАДР", Ложь);
				
				Если Место.Классификатор = МестоПоставкиПоКЛАДР() Тогда
					УзелКлассификатора = ДобавитьУзелXML(УзелКЛАДР, "КЛАДР", Ложь);
					МинимальнаяДлинаКода = 2;
					КоличествоНулейКодаРегиона = 9;
					Если СтрДлина(Место.Код) = МинимальнаяДлинаКода
						ИЛИ Прав(Место.Код, КоличествоНулейКодаРегиона) = "000000000" Тогда
						Если ЗначениеЗаполнено(Место.РайонИлиГород)
							ИЛИ ЗначениеЗаполнено(Место.НаселенныйПункт) Тогда
							// РДИК_ИК_1031. Блок «КЛАДР не используется для задания района/города и населенного пункта»
							// (ФайлУПДПрод/СведМестаПоставки/СведМестоПоставки/ПоКЛАДР/КЛАДР/НеКЛАДР) может быть
							// указан только в том случае, если код КЛАДР, заданный в атрибуте «Код» (ФайлУПДПрод/СведМестаПоставки/СведМестоПоставки/ПоКЛАДР/КЛАДР/@Код)
							// принадлежит к типу объекта «Регион». Некорректные данные указаны для кодов КЛАДР: 
							УзелНеКладр = ДобавитьУзелXML(УзелКлассификатора, "НеКЛАДР", Ложь);
							ДобавитьУзелXML(УзелНеКладр, "РайонГород", Истина, Место.РайонИлиГород, Истина);
							ДобавитьУзелXML(УзелНеКладр, "НаселенПункт", Истина, Место.НаселенныйПункт, Истина);
						КонецЕсли;
					КонецЕсли;
				Иначе
					УзелКлассификатора = ДобавитьУзелXML(УзелКЛАДР, "Страна", Ложь);
				КонецЕсли;
				
			Иначе
				
				УзелКлассификатора = ДобавитьУзелXML(УзелМестоПоставки, "ПоОКТМО", Ложь);
				ДобавитьУзелXML(УзелКлассификатора, "Адрес", Истина, Место.Адрес, Истина);
				
			КонецЕсли;
			
			ДобавитьУзелXML(УзелКлассификатора, "Код", Истина, Место.Код, , , , 0);
			ДобавитьУзелXML(УзелКлассификатора, "Наим", Истина, Место.Наименование , Истина, , , 0);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПространствоИменТранспортногоПакетаЕИС()
	
	Возврат "DP_PAKET_EIS_01_00";
	
КонецФункции

// Текст приложения к титулу продавца УПД.
// 
// Параметры:
//  ДанныеПриложения - Структура - см. НовыеДанныеПриложенияКТитулуПродавцаУПД
// 
// Возвращаемое значение:
//  Строка - Текст приложения к титулу продавца УПД
Функция ТекстПриложенияКТитулуПродавцаУПД(ДанныеПриложения)
	
	Если НЕ ЗначениеЗаполнено(ДанныеПриложения.ИдентификаторПриложения) Тогда
		ТекстОшибки = НСтр("ru='Не заполнено значение идентификатора приложения.'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеПриложения.ИдентификаторФайла) Тогда
		ТекстОшибки = НСтр("ru='Не заполнено значение идентификатора файла.'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	ДеревоДанных = СоздатьДеревоXML();
	ЗаписатьПолеВДерево(ДеревоДанных, ДанныеПриложения, "ИдентификаторПриложения");
	ДобавитьУзелXML(ДеревоДанных, "ИдФайл", Истина, ДанныеПриложения.ИдентификаторФайла);
	ДобавитьУзелXML(ДеревоДанных, "ВерсФорм", Истина, ДанныеПриложения.ВерсияФормата);
	// Требуется указание этого атрибута для успешной загрузки пакета.
	ДобавитьУзелXML(ДеревоДанных, "РукОрг", Истина, ДанныеПриложения.ПорядковыйНомерРуководителяОрганизации, Истина);
	ДобавитьУзелXML(ДеревоДанных, "ИдФайлИсх", Истина, ДанныеПриложения.ИдентификаторИсходногоФайла, Истина);
	ДобавитьУзелXML(ДеревоДанных, "xmlns", Истина, ПространствоИменТранспортногоПакетаЕИС());
	
	// Сведения о контракте.
	СведенияОКонтракте = ДанныеПриложения.СведенияОКонтракте;
	
	Если НЕ ЗначениеЗаполнено(СведенияОКонтракте.РеестровыйНомерКонтракта) Тогда
		ТекстОшибки = НСтр("ru='Не заполнено значение реестрового номера контракта.'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	УзелСведенияОКонтакте =
		ДобавитьУзелXML(ДеревоДанных, "СведКонт", Ложь);
	ДобавитьУзелXML(УзелСведенияОКонтакте, "РеестрНомКонт", Истина, СведенияОКонтракте.РеестровыйНомерКонтракта);
	ДобавитьУзелXML(УзелСведенияОКонтакте, "ИдВерсКонт",
		Истина,
		СведенияОКонтракте.ИдентификаторВерсииКонтракта);
	ДобавитьУзелXML(УзелСведенияОКонтакте, "ИдЭтапКонт",
		Истина,
		СведенияОКонтракте.ИдентификаторЭтапаКонтракта,
		Истина);
	ДобавитьУзелXML(УзелСведенияОКонтакте, "ТехИдЭтапКонт",
		Истина,
		СведенияОКонтракте.ТехническийИдентификаторЭтапаКонтракта,
		Истина);
	ДобавитьУзелXML(УзелСведенияОКонтакте, "ВнешТехИдЭтапКонт", Истина, СведенияОКонтракте.ВнешнийТехническийИдентификаторЭтапаКонтракта, Истина);
	ДобавитьУзелXML(УзелСведенияОКонтакте, "ИКЗ", Истина, СведенияОКонтракте.ИКЗ, Истина);
	
	// Сведения о поставщике.
	Если ЗначениеЗаполнено(ДанныеПриложения.НаименованиеОрганизацииПоставщика) Тогда
		УзелСведенияОПоставщике = ДобавитьУзелXML(ДеревоДанных, "СведПоставщик", Ложь);
		УзелЮЛ = ДобавитьУзелXML(УзелСведенияОПоставщике, "ЮЛ", Ложь);
		ДобавитьУзелXML(УзелЮЛ, "ФирмНаимОрг", Ложь, ДанныеПриложения.НаименованиеОрганизацииПоставщика);
	КонецЕсли;
	
	// Сведения о товарах.
	ДобавитьДанныеОТоварахВПриложениеКТитулуПродавцаУПД(ДеревоДанных, ДанныеПриложения.СведенияОТоварах);
	
	// Места поставки.
	ДобавитьДанныеОМестахПоставкиВПриложенияКТитулуПродавца(ДеревоДанных, ДанныеПриложения);

	Если ЗначениеЗаполнено(ДанныеПриложения.СведенияОбОбжалованииОтказаОПриемке) Тогда
		ДобавитьДанныеОбОбжалованииОтказаВПриложениеКТитулуПродавцаУПД(ДеревоДанных, ДанныеПриложения);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеПриложения.СведенияОСтроительстве) Тогда
		ДобавитьДанныеОСтроительствеВПриложениеКТитулуПродавцаУПД(ДеревоДанных, ДанныеПриложения);
	КонецЕсли;
	
	// Прикрепленные документы.
	Для каждого Вложение Из ДанныеПриложения.Вложения Цикл
		УзелВложения = ДобавитьУзелXML(ДеревоДанных, "Вложен", Ложь);
		ДобавитьУзелXML(УзелВложения, "КонтентИд", Истина, Вложение.Идентификатор, Истина);
		ДобавитьУзелXML(УзелВложения, "ВнешКонтентИд", Истина, Вложение.ВнешнийИдентификатор, Истина);
		ДобавитьУзелXML(УзелВложения, "ИмяФайл", Истина, Вложение.ИмяФайла);
		ДобавитьУзелXML(УзелВложения, "ХэшФайл", Истина, Вложение.ХэшФайла, Истина);
		ДобавитьУзелXML(УзелВложения, "РасширенФайл", Истина, Вложение.РасширениеФайла);
		ДобавитьУзелXML(УзелВложения, "ОписаниеФайл", Истина, Вложение.ОписаниеФайла, Истина);
		ДобавитьУзелXML(УзелВложения, "ДатаПрикреплен", Истина, Вложение.ДатаПрикрепления);
		ДобавитьУзелXML(УзелВложения, "Ссылк", Истина, Вложение.Ссылка, Истина);
		УзелВидаДокумента = ДобавитьУзелXML(УзелВложения, "ВидДок", Ложь);
		ДобавитьУзелXML(УзелВидаДокумента, "Код", Истина, Вложение.КодВидаДокумента);
		ДобавитьУзелXML(УзелВидаДокумента, "Наим", Истина, Вложение.НаименованиеВидаДокумента);
	КонецЦикла;
	
	ТекстПриложения = ВыгрузитьДеревоВXML(ДеревоДанных, "ФайлУПДПрод");
	
	Возврат ТекстПриложения;
	
КонецФункции

// см. НовыеСведенияОСтроительствеДляПриложенияУКД
Процедура ДобавитьДанныеОСтроительствеВПриложениеКТитулуПродавцаУКД(ДеревоДанных, ДанныеПриложения)
	
	ДанныеСтройки = ДанныеПриложения.СведенияОСтроительстве;
	Если НЕ ЗначениеЗаполнено(ДанныеСтройки) Тогда
		Возврат;
	КонецЕсли;
	
	УзелСтройка = ДобавитьУзелXML(ДеревоДанных, "СведСтройк", Ложь);
	
	ЗаписатьПолеВДерево(УзелСтройка, ДанныеСтройки, "УвеличениеСуммаНалогаПоСтавке10Процентов");
	ЗаписатьПолеВДерево(УзелСтройка, ДанныеСтройки, "УвеличениеСуммаНалогаПоСтавке20Процентов");
	ЗаписатьПолеВДерево(УзелСтройка, ДанныеСтройки, "УменьшениеСуммаНалогаПоСтавке10Процентов");
	ЗаписатьПолеВДерево(УзелСтройка, ДанныеСтройки, "УменьшениеСуммаНалогаПоСтавке20Процентов");
	
КонецПроцедуры

// см. НовыеСведенияОСтроительствеДляПриложенияУПД
Процедура ДобавитьДанныеОСтроительствеВПриложениеКТитулуПродавцаУПД(ДеревоДанных, ДанныеПриложения)
	
	ДанныеСтройки = ДанныеПриложения.СведенияОСтроительстве;
	Если НЕ ЗначениеЗаполнено(ДанныеСтройки) Тогда
		Возврат;
	КонецЕсли;
	
	УзелСтройка = ДобавитьУзелXML(ДеревоДанных, "СведСтройк", Ложь);
	
	ЗаписатьПолеВДерево(УзелСтройка, ДанныеСтройки, "СуммаНеОблагаемаяНалогом");
	ЗаписатьПолеВДерево(УзелСтройка, ДанныеСтройки, "СуммаНалогаПоСтавке10Процентов");
	ЗаписатьПолеВДерево(УзелСтройка, ДанныеСтройки, "СуммаНалогаПоСтавке20Процентов");
	ЗаписатьПолеВДерево(УзелСтройка, ДанныеСтройки, "ПроизводитьРасчетНДСВИтоговыхСтроках");
	ЗаписатьПолеВДерево(УзелСтройка, ДанныеСтройки, "ОкруглятьСтоимостьДоЦелыхЗначений");
	ЗаписатьПолеВДерево(УзелСтройка, ДанныеСтройки, "НаименованияСтолбцовТаблицы");
	
	ДанныеИнвестора = ДанныеСтройки.СведенияОбИнвесторе;
	Если ЗначениеЗаполнено(ДанныеИнвестора) Тогда
		УзелИнвестор = ДобавитьУзелXML(УзелСтройка, "СведИнвестор", Ложь);
		ЗаписатьПолеВДерево(УзелИнвестор, ДанныеИнвестора, "Наименование");
		ЗаписатьПолеВДерево(УзелИнвестор, ДанныеИнвестора, "ИНН");
		ЗаписатьПолеВДерево(УзелИнвестор, ДанныеИнвестора, "КПП");
	КонецЕсли;
	
КонецПроцедуры

// см. НовыеСведенияОбОбжалованииОтказаОПриемке
Процедура ДобавитьДанныеОбОбжалованииОтказаВПриложениеКТитулуПродавцаУПД(ДеревоДанных, ДанныеПриложения)
	
	ДанныеОбОбжалованииОтказа = ДанныеПриложения.СведенияОбОбжалованииОтказаОПриемке;
	Если НЕ ЗначениеЗаполнено(ДанныеОбОбжалованииОтказа) Тогда
		Возврат;
	КонецЕсли;
	
	УзелСведенийОбОтказе = ДобавитьУзелXML(ДеревоДанных, "ИтогОбжОтзакПриемТов", Ложь);
	
	ЗаписатьПолеВДерево(УзелСведенийОбОтказе, ДанныеОбОбжалованииОтказа, "ИдентификаторДокументаЯвляющегосяПредметомОбжалования");
	ЗаписатьПолеВДерево(УзелСведенийОбОтказе, ДанныеОбОбжалованииОтказа, "РеквизитыДокументаЯвляющегоПредметомОбжалования");
	ЗаписатьПолеВДерево(УзелСведенийОбОтказе, ДанныеОбОбжалованииОтказа, "ВидДокументаОбжалованияОтказаОПриемке");
	ЗаписатьПолеВДерево(УзелСведенийОбОтказе, ДанныеОбОбжалованииОтказа, "РеквизитыДокументаОбжалованияОтказаОПриемке");
	
КонецПроцедуры

// Текст приложения к титулу продавца УКД.
// 
// Параметры:
//  ДанныеПриложения - Структура - см. НовыеДанныеПриложенияКТитулуПродавцаУКД
// 
// Возвращаемое значение:
//  Строка - Текст приложения к титулу продавца УКД.
Функция ТекстПриложенияКТитулуПродавцаУКД(ДанныеПриложения)
	
	Если НЕ ЗначениеЗаполнено(ДанныеПриложения.ИдентификаторПриложения) Тогда
		ТекстОшибки = НСтр("ru='Не заполнено значение идентификатора приложения.'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеПриложения.ИдентификаторФайла) Тогда
		ТекстОшибки = НСтр("ru='Не заполнено значение идентификатора файла.'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	ДеревоДанных = СоздатьДеревоXML();
	ДобавитьУзелXML(ДеревоДанных, "ИдПрилож", Истина, ДанныеПриложения.ИдентификаторПриложения);
	ДобавитьУзелXML(ДеревоДанных, "ИдФайл", Истина, ДанныеПриложения.ИдентификаторФайла);
	ДобавитьУзелXML(ДеревоДанных, "ВерсФорм", Истина, ДанныеПриложения.ВерсияФормата);
	// Требуется указание этого атрибута для успешной загрузки пакета.
	ДобавитьУзелXML(ДеревоДанных, "РукОрг", Истина, ДанныеПриложения.ПорядковыйНомерРуководителяОрганизации, Истина);
	ДобавитьУзелXML(ДеревоДанных, "ИдФайлИсх", Истина, ДанныеПриложения.ИдентификаторИсходногоФайла, Истина);
	ДобавитьУзелXML(ДеревоДанных, "ПредлИзмСтоим", Истина,
		ДанныеПриложения.ПорядковыйНомерПодписантаПредлагающегоИзменитьСтоимостьУведомление, Истина);
	ДобавитьУзелXML(ДеревоДанных, "УведИзмСтоим", Истина,
		ДанныеПриложения.ПорядковыйНомерПодписантаПредлагающегоИзменитьСтоимостьПредложение, Истина);
	ДобавитьУзелXML(ДеревоДанных, "xmlns", Истина, ПространствоИменТранспортногоПакетаЕИС());
	
	// Сведения о контракте.
	СведенияОКонтракте = ДанныеПриложения.СведенияОКонтракте;
	
	Если НЕ ЗначениеЗаполнено(СведенияОКонтракте.РеестровыйНомерКонтракта) Тогда
		ТекстОшибки = НСтр("ru='Не заполнено значение реестрового номера контракта.'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СведенияОКонтракте.ИдентификаторВерсииКонтракта) Тогда
		ТекстОшибки = НСтр("ru='Не заполнено значение идентификатора версии контракта.'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	УзелСведенияОКонтакте =
		ДобавитьУзелXML(ДеревоДанных, "СведКонт", Ложь);
	ДобавитьУзелXML(УзелСведенияОКонтакте, "РеестрНомКонт", Истина, СведенияОКонтракте.РеестровыйНомерКонтракта);
	ДобавитьУзелXML(УзелСведенияОКонтакте, "ИдВерсКонт", Истина, СведенияОКонтракте.ИдентификаторВерсииКонтракта);
	ДобавитьУзелXML(УзелСведенияОКонтакте, "ИдЭтапКонт", Истина, СведенияОКонтракте.ИдентификаторЭтапаКонтракта, Истина);
	ДобавитьУзелXML(УзелСведенияОКонтакте, "ТехИдЭтапКонт", Истина, СведенияОКонтракте.ТехническийИдентификаторЭтапаКонтракта, Истина);
	ДобавитьУзелXML(УзелСведенияОКонтакте, "ВнешТехИдЭтапКонт", Истина, СведенияОКонтракте.ВнешнийТехническийИдентификаторЭтапаКонтракта, Истина);
	ДобавитьУзелXML(УзелСведенияОКонтакте, "ИКЗ", Истина, СведенияОКонтракте.ИКЗ, Истина);
	ДобавитьУзелXML(УзелСведенияОКонтакте, "НомерГосКонт", Истина, СведенияОКонтракте.НомерКонтракта);
	ДобавитьУзелXML(УзелСведенияОКонтакте, "ДатаГосКонт", Истина,
		Формат(СведенияОКонтракте.ДатаЗаключенияКонтракта, "ДФ=dd.MM.yyyy"));
	
	// Сведения о поставщике.
	Если ЗначениеЗаполнено(ДанныеПриложения.НаименованиеОрганизацииПоставщика) Тогда
		УзелСведенияОПоставщике = ДобавитьУзелXML(ДеревоДанных, "СведПоставщик", Ложь);
		УзелЮЛ = ДобавитьУзелXML(УзелСведенияОПоставщике, "ЮЛ", Ложь);
		ДобавитьУзелXML(УзелЮЛ, "ФирмНаимОрг", Ложь, ДанныеПриложения.НаименованиеОрганизацииПоставщика);
	КонецЕсли;
	
	// Сведения о товарах.
	ДобавитьДанныеОТоварахВПриложениеКТитулуПродавцаУКД(ДеревоДанных, ДанныеПриложения.СведенияОТоварах);
	
	// Сведения о строительстве.
	Если ЗначениеЗаполнено(ДанныеПриложения.СведенияОСтроительстве) Тогда
		ДобавитьДанныеОСтроительствеВПриложениеКТитулуПродавцаУКД(ДеревоДанных, ДанныеПриложения);
	КонецЕсли;
	
	// Прикрепленные документы.
	Для каждого Вложение Из ДанныеПриложения.Вложения Цикл
		УзелВложения = ДобавитьУзелXML(ДеревоДанных, "Вложен", Ложь);
		ДобавитьУзелXML(УзелВложения, "КонтентИд", Истина, Вложение.Идентификатор, Истина);
		ДобавитьУзелXML(УзелВложения, "ВнешКонтентИд", Истина, Вложение.ВнешнийИдентификатор, Истина);
		ДобавитьУзелXML(УзелВложения, "ИмяФайл", Истина, Вложение.ИмяФайла);
		ДобавитьУзелXML(УзелВложения, "ХэшФайл", Истина, Вложение.ХэшФайла, Истина);
		ДобавитьУзелXML(УзелВложения, "РасширенФайл", Истина, Вложение.РасширениеФайла);
		ДобавитьУзелXML(УзелВложения, "ОписаниеФайл", Истина, Вложение.ОписаниеФайла, Истина);
		ДобавитьУзелXML(УзелВложения, "ДатаПрикреплен", Истина, Вложение.ДатаПрикрепления);
		ДобавитьУзелXML(УзелВложения, "Ссылк", Истина, Вложение.Ссылка, Истина);
		УзелВидаДокумента = ДобавитьУзелXML(УзелВложения, "ВидДок", Ложь);
		ДобавитьУзелXML(УзелВидаДокумента, "Код", Истина, Вложение.КодВидаДокумента);
		ДобавитьУзелXML(УзелВидаДокумента, "Наим", Истина, Вложение.НаименованиеВидаДокумента);
	КонецЦикла;
	
	ТекстПриложения = ВыгрузитьДеревоВXML(ДеревоДанных, "ФайлУКДПрод");
	
	Возврат ТекстПриложения;
	
КонецФункции

Функция ЗначениеВидаДокументаОбжалованияОтказаОПриемкеДляПриложения(ВидДокументаОбжалованияОтказаОПриемке)
	
	ВидыДокументов = Новый Соответствие();
	
	// BSLLS:Typo-off
	ВидыДокументов.Вставить(
		Перечисления.ВидыДокументовОбжалованияОтказаОПриемке.ДосудебноеСогласие, "ДосудебнСогл");
	ВидыДокументов.Вставить(
		Перечисления.ВидыДокументовОбжалованияОтказаОПриемке.РешениеСуда, "РешСуда");
	// BSLLS:Typo-on
	
	Возврат ВидыДокументов[ВидДокументаОбжалованияОтказаОПриемке];
	
КонецФункции

#КонецОбласти

#Область ФормированиеПриложенияДляТитулаЗаказчика

Функция СформироватьДанныеПриложенияУПДЗаказчикаДляЕИС(
		ДеревоДанных, ИдентификаторФайла) Экспорт

	Результат = НовыйРезультатФормированияПриложения();
	
	ДанныеПриложения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДанныеЭлектронногоАктированияЕИС.ДанныеПриложения");

	
	ДанныеПриложения.ИдентификаторПриложения = ПрефиксИмениПриложенияЕИС() + ИдентификаторФайла;
	ДанныеПриложения.ИдентификаторФайла = ИдентификаторФайла;
	ДанныеПриложения.ВерсияФормата = ВерсияФормата(); 
	
	ТекстПриложения = ТекстПриложенияКТитулуЗаказчикаУПД(ДанныеПриложения);
	
	РезультатПроверки = ПроверитьНаСоответствиеСхеме(
		ТекстПриложения, ИмяТипаXDTOПриложениеУПДПокупателя());
	Если НЕ ПустаяСтрока(РезультатПроверки) Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка проверки приложения к УПД покупателя для ЕИС:'")
			+ Символы.ПС + РезультатПроверки;
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ИмяФайлаПриложения = ДанныеПриложения.ИдентификаторПриложения + ".xml";
	
	ЗаписатьОтладочнуюИнформацию(ИмяФайлаПриложения, ТекстПриложения);
	
	ТекстПриложения = УдалитьПространствоИменТранспортногоПакета(ТекстПриложения);
	
	Результат.ДвоичныеДанные =
		 ПолучитьДвоичныеДанныеИзСтроки(ТекстПриложения, КодировкаТекстаПриложенияДляЕИС());
	Результат.ИмяФайла = ИмяФайлаПриложения;
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

Функция ТекстПриложенияКТитулуЗаказчикаУПД(ДанныеПриложения)

	ДеревоДанных = СоздатьДеревоXML();
		
	// Заполнение дерева
	ЗаполнитьУзелДереваXMLПоСтруктуре(ДанныеПриложения, ДеревоДанных);
	
	ТекстПриложения = ВыгрузитьДеревоВXML(ДеревоДанных, "ФайлУПДПокуп");
	
	Возврат ТекстПриложения;
	
КонецФункции

Функция ТекстПриложенияКТитулуЗаказчикаУКД(ДанныеПриложения)

	ДеревоДанных = СоздатьДеревоXML();
		
	// Заполнение дерева
	ЗаполнитьУзелДереваXMLПоСтруктуре(ДанныеПриложения, ДеревоДанных);
	
	ТекстПриложения = ВыгрузитьДеревоВXML(ДеревоДанных, "ФайлУКДПокуп");
	
	Возврат ТекстПриложения;
	
КонецФункции

Функция НовыеСведенияТРУУПДЗаказчика(ДетализированныеСведения = Ложь) Экспорт

	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Если ДетализированныеСведения Тогда
		
		Результат.Вставить("СведенияОДетализированныхПозицияхТРУ"); 
		Тип = Новый ОписаниеТипов("Структура"); 
		Описание =	НСтр("ru = 'Сведения о детализированных позициях ТРУ'"); 
		Поле = НовоеПолеСтруктуры("СведенияОДетализированныхПозицияхТРУ", Неопределено,
			Тип,
			Описание,
			Истина,
			"ДеталТРУ",,
			"НовыеСведенияОДетализированныхПозицияхТРУ"); 
		ДобавитьПолеСтруктуры(Результат, Поле);
			
		Результат.СведенияОДетализированныхПозицияхТРУ = НовыеДетализированныеСведенияТРУУПДЗаказчика();
		
	Иначе
		Результат.Вставить("СведенияОНедетализированныхПозицияхТРУ"); 
		Тип = Новый ОписаниеТипов("Структура"); 
		Описание =	НСтр("ru = 'Сведения о позиции ТРУ'"); 
		Поле = НовоеПолеСтруктуры("СведенияОНедетализированныхПозицияхТРУ", Неопределено,
			Тип,
			Описание,
			Истина,
			"НедеталТРУ",,
			"НовыеСведенияОНедетализированныхПозицияхТРУ"); 
		ДобавитьПолеСтруктуры(Результат, Поле);
		
		Результат.СведенияОНедетализированныхПозицияхТРУ = НовыеНедетализированныеСведенияТРУУПДЗаказчика();
		
	КонецЕсли;

	Возврат Результат;
		
КонецФункции

Функция НовыеДетализированныеСведенияТРУУПДЗаказчика()
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("СведенияОРодительскомТРУ"); 
	Тип = Новый ОписаниеТипов("Структура"); 
	Описание =	НСтр("ru = 'Сведения о родительском товаре, работе, услуги (ТРУ), на основании которого детализированы ТРУ'"); 
	Поле = НовоеПолеСтруктуры("СведенияОРодительскомТРУ", Новый Структура,
		Тип,
		Описание,
		Истина,
		"СведРод",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	СведенияОРодительскомТРУ = Результат.СведенияОРодительскомТРУ;
	ДобавитьМетаданныеСтруктуры(СведенияОРодительскомТРУ);
	
	СведенияОРодительскомТРУ.Вставить("ИдентификаторТРУ"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'GUID товара, работы, услуги'"); 
	Поле = НовоеПолеСтруктуры("ИдентификаторТРУ", "",
		Тип,
		Описание,
		Ложь,
		"@ИдТРУ",,
		""); 
	ДобавитьПолеСтруктуры(СведенияОРодительскомТРУ, Поле);
	
	СведенияОРодительскомТРУ.Вставить("ТехническийИидентификаторПозицииТРУ"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(17, 2)); 
	Описание =	НСтр("ru = 'Технический идентификатор позиции ТРУ'"); 
	Поле = НовоеПолеСтруктуры("ТехническийИидентификаторПозицииТРУ", 0,
		Тип,
		Описание,
		Ложь,
		"@ТехИдТРУ",,
		""); 
	ДобавитьПолеСтруктуры(СведенияОРодительскомТРУ, Поле);
	
	СведенияОРодительскомТРУ.Вставить("ВнешнийТехническийИдентификаторПозицииТРУ"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Внешний технический идентификатор позиции ТРУ'"); 
	Поле = НовоеПолеСтруктуры("ВнешнийТехническийИдентификаторПозицииТРУ", "",
		Тип,
		Описание,
		Ложь,
		"@ВнешТехИдТРУ",,
		""); 
	ДобавитьПолеСтруктуры(СведенияОРодительскомТРУ, Поле);
	
	СведенияОРодительскомТРУ.Вставить("ПринятоеКоличествоТРУ"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(26, 11)); 
	Описание =	НСтр("ru = 'Количество ТРУ, фактически принятое заказчиком'"); 
	Поле = НовоеПолеСтруктуры("ПринятоеКоличествоТРУ", 0,
		Тип,
		Описание,
		Ложь,
		"@КолТовПринЗак",,
		""); 
	ДобавитьПолеСтруктуры(СведенияОРодительскомТРУ, Поле);
	
	СведенияОРодительскомТРУ.Вставить("ПринятыйОбъемРабот"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Объем работы, услуги, фактически принятый заказчиком, в текстовом выражении'"); 
	Поле = НовоеПолеСтруктуры("ПринятыйОбъемРабот", "",
		Тип,
		Описание,
		Ложь,
		"@ОбРабУслПринЗак",,
		""); 
	ДобавитьПолеСтруктуры(СведенияОРодительскомТРУ, Поле);
	
	СведенияОРодительскомТРУ.Вставить("СтоимостьСНалогом"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(19, 2)); 
	Описание =	НСтр("ru = 'Стоимость с налогом, всего, фактически принято заказчиком'"); 
	Поле = НовоеПолеСтруктуры("СтоимостьСНалогом", 0,
		Тип,
		Описание,
		Истина,
		"@СтТовУчНалПринЗак",,
		""); 
	ДобавитьПолеСтруктуры(СведенияОРодительскомТРУ, Поле);
	
	Результат.Вставить("СведенияОДетализированномТРУ"); 
	Тип = Новый ОписаниеТипов("Массив"); 
	Описание =	НСтр("ru = 'Сведения о детализированном товаре, работе, услуге'"); 
	Поле = НовоеПолеСтруктуры("СведенияОДетализированномТРУ", Новый Массив,
		Тип,
		Описание,
		Истина,
		"СведДетал",,
		"НовыеСведенияОДетализированномТРУУПДЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОДетализированномТРУУПДЗаказчика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("ИдентификаторПринятогоТРУ"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'GUID ТРУ, для которого заказчик указывает информацию о принятом количестве товара'"); 
	Поле = НовоеПолеСтруктуры("ИдентификаторПринятогоТРУ", "",
		Тип,
		Описание,
		Истина,
		"@ИдТРУпринЗак",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПризнакПринятияТРУ"); 
	Тип = Новый ОписаниеТипов("Булево"); 
	Описание =	НСтр("ru = 'Признак принятия ТРУ'"); 
	Поле = НовоеПолеСтруктуры("ПризнакПринятияТРУ", Ложь,
		Тип,
		Описание,
		Истина,
		"@ПризПринТРУ",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПринятоеКоличествоТРУ"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(26, 11)); 
	Описание =	НСтр("ru = 'Количество ТРУ, фактически принятое заказчиком'"); 
	Поле = НовоеПолеСтруктуры("ПринятоеКоличествоТРУ", 0,
		Тип,
		Описание,
		Ложь,
		"@КолТовПринЗак",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПринятыйОбъемРабот"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Объем работы, услуги, фактически принятый заказчиком, в текстовом выражении'"); 
	Поле = НовоеПолеСтруктуры("ПринятыйОбъемРабот", "",
		Тип,
		Описание,
		Ложь,
		"@ОбРабУслПринЗак",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("СтоимостьСНалогом"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(19, 2)); 
	Описание =	НСтр("ru = 'Стоимость с налогом, всего, фактически принято заказчиком'"); 
	Поле = НовоеПолеСтруктуры("СтоимостьСНалогом", 0,
		Тип,
		Описание,
		Истина,
		"@СтТовУчНалПринЗак",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПричинаОтказаОтПриемки"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Причина отказа от приемки'"); 
	Поле = НовоеПолеСтруктуры("ПричинаОтказаОтПриемки", "",
		Тип,
		Описание,
		Ложь,
		"@ПричОтказПрием",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
		
	Возврат Результат;
	
КонецФункции

Функция НовыеНедетализированныеСведенияТРУУПДЗаказчика()
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);

	Результат.Вставить("ИдентификаторПринятогоТРУ"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'GUID ТРУ, для которого заказчик указывает информацию о принятом количестве товара'"); 
	Поле = НовоеПолеСтруктуры("ИдентификаторПринятогоТРУ", "",
		Тип,
		Описание,
		Ложь,
		"@ИдТРУпринЗак",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ТехническийИидентификаторПозицииТРУ"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(17, 2)); 
	Описание =	НСтр("ru = 'Технический идентификатор позиции ТРУ," +
		" для которого заказчик указывает информацию о принятом количестве товара'"); 
	Поле = НовоеПолеСтруктуры("ТехническийИидентификаторПозицииТРУ", 0,
		Тип,
		Описание,
		Ложь,
		"@ТехИдТРУпринЗак",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ВнешнийТехническийИдентификаторПозицииТРУ"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Внешний технический идентификатор позиции ТРУ," + 
		" для которого заказчик указывает информацию о принятом количестве товара'"); 
	Поле = НовоеПолеСтруктуры("ВнешнийТехническийИдентификаторПозицииТРУ", "",
		Тип,
		Описание,
		Ложь,
		"@ВнешТехИдТРУпринЗак",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПризнакПринятияТРУ"); 
	Тип = Новый ОписаниеТипов("Булево"); 
	Описание =	НСтр("ru = 'Признак принятия ТРУ'"); 
	Поле = НовоеПолеСтруктуры("ПризнакПринятияТРУ", Ложь,
		Тип,
		Описание,
		Истина,
		"@ПризПринТРУ",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПринятоеКоличествоТРУ"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(26, 11)); 
	Описание =	НСтр("ru = 'Количество ТРУ, фактически принятое заказчиком'"); 
	Поле = НовоеПолеСтруктуры("ПринятоеКоличествоТРУ", 0,
		Тип,
		Описание,
		Ложь,
		"@КолТовПринЗак",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПринятоеКоличествоВПотребительскихЕдиницах"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(26, 11)); 
	Описание =	НСтр("ru = 'Количество в потребительских единицах измерения, фактически принятое заказчиком'"); 
	Поле = НовоеПолеСтруктуры("ПринятоеКоличествоВПотребительскихЕдиницах", 0,
		Тип,
		Описание,
		Ложь,
		"@КолТовПринЗакПотребЕд",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ИдентификаторЛекарственногоПрепарата"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Идентификатор лекарственного препарата, для которого заказчик указывает информацию о принятом количестве товара'"); 
	Поле = НовоеПолеСтруктуры("ИдентификаторЛекарственногоПрепарата", "",
		Тип,
		Описание,
		Ложь,
		"@ИдЛПпринЗак",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПринятыйОбъемРаботыУслуги"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Объем работы, услуги, фактически принятый заказчиком, в текстовом выражении'"); 
	Поле = НовоеПолеСтруктуры("ПринятыйОбъемРаботыУслуги", "",
		Тип,
		Описание,
		Ложь,
		"@ОбРабУслПринЗак",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("СтоимостьСНалогом"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(19, 2)); 
	Описание =	НСтр("ru = 'Стоимость с налогом, всего, фактически принято заказчиком'"); 
	Поле = НовоеПолеСтруктуры("СтоимостьСНалогом", 0,
		Тип,
		Описание,
		Истина,
		"@СтТовУчНалПринЗак",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПричинаОтказаОтПриемки"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Причина отказа от приемки'"); 
	Поле = НовоеПолеСтруктуры("ПричинаОтказаОтПриемки", "",
		Тип,
		Описание,
		Ложь,
		"@ПричОтказПрием",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ОтраслеваяСпециализация"); 
	Тип = Новый ОписаниеТипов("Структура"); 
	Описание =	НСтр("ru = 'Поля ТРУ, относящиеся к отраслевой специализации'"); 
	Поле = НовоеПолеСтруктуры("ОтраслеваяСпециализация", Неопределено,
		Тип,
		Описание,
		Ложь,
		"ОтрСпец",,
		"НовыеСведенияОтраслевойСпециализацииЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);	
		
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОтраслевойСпециализацииЗаказчика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);

	Результат.Вставить("ОтраслеваяСпециализацияСтроительство"); 
	Тип = Новый ОписаниеТипов("Структура"); 
	Описание =	НСтр("ru = 'Детализация полей ТРУ, относящихся к отраслевой специализации Строительство'"); 
	Поле = НовоеПолеСтруктуры("ОтраслеваяСпециализацияСтроительство", Новый Структура,
		Тип,
		Описание,
		Истина,
		"СтройДетал",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	ОтраслеваяСпециализацияСтроительство = Результат.ОтраслеваяСпециализацияСтроительство;
	ДобавитьМетаданныеСтруктуры(ОтраслеваяСпециализацияСтроительство);
	
	ОтраслеваяСпециализацияСтроительство.Вставить("РазделВидовРабот"); 
	Тип = Новый ОписаниеТипов("Массив"); 
	Описание =	НСтр("ru = 'Раздел видов работ'"); 
	Поле = НовоеПолеСтруктуры("РазделВидовРабот", Новый Массив,
		Тип,
		Описание,
		Ложь,
		"Раздел",,
		"НовыеСведенияРазделаВидовРаботУПДЗаказчика"); 
	ДобавитьПолеСтруктуры(ОтраслеваяСпециализацияСтроительство, Поле);
	
	ОтраслеваяСпециализацияСтроительство.Вставить("ВидРаботСтроительство"); 
	Тип = Новый ОписаниеТипов("Массив"); 
	Описание =	НСтр("ru = 'Конструктивное решение (вид работ) (УПД)'"); 
	Поле = НовоеПолеСтруктуры("ВидРаботСтроительство", Новый Массив,
		Тип,
		Описание,
		Ложь,
		"ВидРаб",,
		"НовыеСведенияВидРаботУПДЗаказчика"); 
	ДобавитьПолеСтруктуры(ОтраслеваяСпециализацияСтроительство, Поле);

	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияРазделаВидовРаботУПДЗаказчика() Экспорт

	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("ИдентификаторРаздела"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Идентификатор (GUID) раздела'"); 
	Поле = НовоеПолеСтруктуры("ИдентификаторРаздела", "",
		Тип,
		Описание,
		Истина,
		"@ИдРаздел",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("СтоимостьСНалогомРаздел"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(19, 2)); 
	Описание =	НСтр("ru = 'Стоимость с налогом, всего, фактически принято заказчиком'"); 
	Поле = НовоеПолеСтруктуры("СтоимостьСНалогомРаздел", 0,
		Тип,
		Описание,
		Истина,
		"@СтоимУчНалПринЗакРаздел",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ВидРаботРаздел"); 
	Тип = Новый ОписаниеТипов("Массив"); 
	Описание =	НСтр("ru = 'Конструктивное решение (вид работ) (УПД)'"); 
	Поле = НовоеПолеСтруктуры("ВидРаботРаздел", Новый Массив,
		Тип,
		Описание,
		Истина,
		"ВидРаб",,
		"НовыеСведенияВидРаботУПДЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияВидРаботУПДЗаказчика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("ИдентификаотрВидовРабот"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Идентификатор (GUID) конструктивного решения (вида работ)'"); 
	Поле = НовоеПолеСтруктуры("ИдентификаотрВидовРабот", "",
		Тип,
		Описание,
		Истина,
		"@ИдВидРаб",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПризнакПринятияТРУ"); 
	Тип = Новый ОписаниеТипов("Булево"); 
	Описание =	НСтр("ru = 'Признак принятия ТРУ'"); 
	Поле = НовоеПолеСтруктуры("ПризнакПринятияТРУ", Ложь,
		Тип,
		Описание,
		Истина,
		"@ПризПринВидРаб",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПринятоеТРУ"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(26, 11)); 
	Описание =	НСтр("ru = 'Количество ТРУ, фактически принятое заказчиком'"); 
	Поле = НовоеПолеСтруктуры("ПринятоеТРУ", 0,
		Тип,
		Описание,
		Истина,
		"@КолВидРабПринЗак",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПринятыйОбъемРабот"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Объем работы, фактически принятый заказчиком'"); 
	Поле = НовоеПолеСтруктуры("ПринятыйОбъемРабот", "",
		Тип,
		Описание,
		Ложь,
		"@ОбВидРабПринЗак",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("СтоимостьСНалогом"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(19, 2)); 
	Описание =	НСтр("ru = 'Стоимость с налогом, всего, фактически принято заказчиком'"); 
	Поле = НовоеПолеСтруктуры("СтоимостьСНалогом", 0,
		Тип,
		Описание,
		Истина,
		"@СтоимУчНалПринЗак",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ПричинаОтказаОтПриемки"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Причина отказа от приемки'"); 
	Поле = НовоеПолеСтруктуры("ПричинаОтказаОтПриемки", "",
		Тип,
		Описание,
		Ложь,
		"@ПричОтказПрием",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
		
	Возврат Результат;	
	
КонецФункции

Функция НовыеСведенияИнформацииОРешенииПриемочнойКомиссииЗаказчика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("ОснованиеСозданияПриемочнойКомиссии"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Основание создания приемочной комиссии'"); 
	Поле = НовоеПолеСтруктуры("ОснованиеСозданияПриемочнойКомисиии", "",
		Тип,
		Описание,
		Истина,
		"@Осн",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("КодРешенияПриемочнойКомиссии"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Код решения приемочной комиссии'"); 
	Поле = НовоеПолеСтруктуры("КодРешенияПриемочнойКомиссии", "",
		Тип,
		Описание,
		Ложь,
		"@КодРеш",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("РешениеПриемочнойКомиссии"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Решение приемочной комиссии'"); 
	Поле = НовоеПолеСтруктуры("РешениеПриемочнойКомиссии", "",
		Тип,
		Описание,
		Ложь,
		"@Реш",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("СведенияОЧленеПриемочнойКомиссии"); 
	Тип = Новый ОписаниеТипов("Массив"); 
	Описание =	НСтр("ru = 'Сведения о члене приемочной комиссии'"); 
	Поле = НовоеПолеСтруктуры("СведенияОЧленеПриемочнойКомиссии", Новый Массив,
		Тип,
		Описание,
		Ложь,
		"ЧленПриемКом",,
		"НовыеСведенияОЧленеПриемочнойКомиссииЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);

	Возврат Результат;
		
КонецФункции

Функция НовыеСведенияОЧленеПриемочнойКомиссииЗаказчика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("НомерПодписанта"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(19, 0)); 
	Описание =	НСтр("ru = 'Номер подписанта'"); 
	Поле = НовоеПолеСтруктуры("НомерПодписанта", 0,
		Тип,
		Описание,
		Истина,
		"@НомерПодпис",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("РольВПриемочнойКомиссии"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Роль в приемочной комиссии'"); 
	Поле = НовоеПолеСтруктуры("РольВПриемочнойКомиссии", "",
		Тип,
		Описание,
		Истина,
		"@Роль",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ОснованиеПолномочийЧленаПриемочнойКомиссии"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Основание полномочий члена приемочной комиссии'"); 
	Поле = НовоеПолеСтруктуры("ОснованиеПолномочийЧленаПриемочнойКомиссии", "",
		Тип,
		Описание,
		Истина,
		"@ОснПолн",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ИнформацияОРешенииЧленаПриемочнойКомиссии"); 
	Тип = Новый ОписаниеТипов("Структура"); 
	Описание =	НСтр("ru = 'Информация о решении члена приемочной комиссии'"); 
	Поле = НовоеПолеСтруктуры("ИнформацияОРешенииЧленаПриемочнойКомиссии", Новый Структура,
		Тип,
		Описание,
		Ложь,
		"СвРеш",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);

	ИнформацияОРешенииЧленаПриемочнойКомиссии = Результат.ИнформацияОРешенииЧленаПриемочнойКомиссии;
	ДобавитьМетаданныеСтруктуры(ИнформацияОРешенииЧленаПриемочнойКомиссии);
	
	ИнформацияОРешенииЧленаПриемочнойКомиссии.Вставить("КодРешенияЧленаПриемочнойКомиссии"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Код решения члена приемочной комиссии. 1 - нет замечаний, 2 - выявлены замечания.'"); 
	Поле = НовоеПолеСтруктуры("КодРешенияЧленаПриемочнойКомиссии", "",
		Тип,
		Описание,
		Истина,
		"@КодРеш",,
		""); 
	ДобавитьПолеСтруктуры(ИнформацияОРешенииЧленаПриемочнойКомиссии, Поле);
	
	ИнформацияОРешенииЧленаПриемочнойКомиссии.Вставить("РешениеЧленаПриемочнойКомиссии"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Решение члена приемочной комиссии'"); 
	Поле = НовоеПолеСтруктуры("РешениеЧленаПриемочнойКомиссии", "",
		Тип,
		Описание,
		Ложь,
		"@Реш",,
		""); 
	ДобавитьПолеСтруктуры(ИнформацияОРешенииЧленаПриемочнойКомиссии, Поле);

	Возврат Результат;
		
КонецФункции

Функция РешениеЧленаПриемочнойКомиссииЗаказчикаПоКоду(КодРешения) Экспорт
	
	Если КодРешения = 1 Тогда
		Возврат "замечания отсутствуют";
	ИначеЕсли КодРешения = 2 Тогда 
		Возврат "выявлены замечания";
	КонецЕсли;
	
КонецФункции

Функция НовыеСведенияОИныхУполномоченныхЛицахЗаказчика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("НомерПодписанта"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(19, 0)); 
	Описание =	НСтр("ru = 'Номер подписанта'"); 
	Поле = НовоеПолеСтруктуры("НомерПодписанта", 0,
		Тип,
		Описание,
		Ложь,
		"@НомерПодпис",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ВидУполномоченногоЛица"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Вид уполномоченного лица'"); 
	Поле = НовоеПолеСтруктуры("ВидУполномоченногоЛица", "",
		Тип,
		Описание,
		Ложь,
		"@ВидУполнЛица",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);

	Возврат Результат;
		
КонецФункции

Функция НовыеСведенияОПрочихНачисленияхЗаказчика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("ИнформацияОНачисленнойНеустойке"); 
	Тип = Новый ОписаниеТипов("Структура"); 
	Описание =	НСтр("ru = 'Информация о начисленной неустойке (штрафе, пени) и уменьшении суммы оплаты'"); 
	Поле = НовоеПолеСтруктуры("ИнформацияОНачисленнойНеустойке", Неопределено,
		Тип,
		Описание,
		Ложь,
		"ИнфНачислНеуст",,
		"НовыеСведенияОНачисленныхНеустойкахЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ИнформацияОНалогахИВзносах"); 
	Тип = Новый ОписаниеТипов("Структура"); 
	Описание =	НСтр("ru = 'Информация о налогах и взносах, уплачиваемых заказчиком за физическое лицо'"); 
	Поле = НовоеПолеСтруктуры("ИнформацияОНалогахИВзносах", Неопределено,
		Тип,
		Описание,
		Ложь,
		"ИнфНалогиВзносыУплЗак",,
		"НовыеСведенияОНалогахИВносахЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);

	Возврат Результат;
		
КонецФункции

Функция НовыеСведенияОНачисленныхНеустойкахЗаказчика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);

	Результат.Вставить("ТребованиеЗаказчикаОбУплатеНеустойки"); 
	Тип = Новый ОписаниеТипов("Массив"); 
	Описание =	НСтр("ru = 'Требование заказчика об уплате неустойки (штрафа, пени)'"); 
	Поле = НовоеПолеСтруктуры("ТребованиеЗаказчикаОбУплатеНеустойки", Новый Массив,
		Тип,
		Описание,
		Истина,
		"ТребЗакНеуст",,
		"НовыеСведенияОНачисленнойНеустойкеЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОНачисленнойНеустойкеЗаказчика() Экспорт	
	
	ТребованиеЗаказчикаОбУплатеНеустойки = Новый Структура();
	ДобавитьМетаданныеСтруктуры(ТребованиеЗаказчикаОбУплатеНеустойки);
	
	ТребованиеЗаказчикаОбУплатеНеустойки.Вставить("НаименованиеТребования"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Наименование требования'"); 
	Поле = НовоеПолеСтруктуры("НаименованиеТребования", "",
		Тип,
		Описание,
		Истина,
		"@НаимТреб",,
		""); 
	ДобавитьПолеСтруктуры(ТребованиеЗаказчикаОбУплатеНеустойки, Поле);
	
	ТребованиеЗаказчикаОбУплатеНеустойки.Вставить("НомерТребования"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Номер требования'"); 
	Поле = НовоеПолеСтруктуры("НомерТребования", "",
		Тип,
		Описание,
		Ложь,
		"@НомерТреб",,
		""); 
	ДобавитьПолеСтруктуры(ТребованиеЗаказчикаОбУплатеНеустойки, Поле);
	
	ТребованиеЗаказчикаОбУплатеНеустойки.Вставить("ДатаТребования"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Дата требования'"); 
	Поле = НовоеПолеСтруктуры("ДатаТребования", "",
		Тип,
		Описание,
		Истина,
		"@ДатаТреб",,
		""); 
	ДобавитьПолеСтруктуры(ТребованиеЗаказчикаОбУплатеНеустойки, Поле);
	
	ТребованиеЗаказчикаОбУплатеНеустойки.Вставить("ТипНеустойки"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Тип неустойки'"); 
	Поле = НовоеПолеСтруктуры("ТипНеустойки", "",
		Тип,
		Описание,
		Истина,
		"@ТипНеуст",,
		""); 
	ДобавитьПолеСтруктуры(ТребованиеЗаказчикаОбУплатеНеустойки, Поле);
	
	ТребованиеЗаказчикаОбУплатеНеустойки.Вставить("РазмерНеустойки"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(22, 2)); 
	Описание =	НСтр("ru = 'Размер неустойки'"); 
	Поле = НовоеПолеСтруктуры("РазмерНеустойки", 0,
		Тип,
		Описание,
		Истина,
		"@РазмерНеуст",,
		""); 
	ДобавитьПолеСтруктуры(ТребованиеЗаказчикаОбУплатеНеустойки, Поле);

	ТребованиеЗаказчикаОбУплатеНеустойки.Вставить("ПричинаНачисленияНеустойки"); 
	Тип = Новый ОписаниеТипов("Структура"); 
	Описание =	НСтр("ru = 'Причина начисления неустойки (штрафа, пени)'"); 
	Поле = НовоеПолеСтруктуры("ПричинаНачисленияНеустойки", Новый Структура,
		Тип,
		Описание,
		Ложь,
		"ПричНачислНеуст",,
		""); 
	ДобавитьПолеСтруктуры(ТребованиеЗаказчикаОбУплатеНеустойки, Поле);

	ПричинаНачисленияНеустойки = ТребованиеЗаказчикаОбУплатеНеустойки.ПричинаНачисленияНеустойки;	
	ДобавитьМетаданныеСтруктуры(ПричинаНачисленияНеустойки);
	
	ПричинаНачисленияНеустойки.Вставить("КодПричины"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Код причины'"); 
	Поле = НовоеПолеСтруктуры("КодПричины", "",
		Тип,
		Описание,
		Истина,
		"@Код",,
		""); 
	ДобавитьПолеСтруктуры(ПричинаНачисленияНеустойки, Поле);
	
	ПричинаНачисленияНеустойки.Вставить("НаименованиеПричины"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Наименование причины'"); 
	Поле = НовоеПолеСтруктуры("НаименованиеПричины", "",
		Тип,
		Описание,
		Ложь,
		"@Наим",,
		""); 
	ДобавитьПолеСтруктуры(ПричинаНачисленияНеустойки, Поле);

	Возврат ТребованиеЗаказчикаОбУплатеНеустойки;
	
КонецФункции

Функция ТипНеустойкиЗаказчикаШтраф() Экспорт
	
	Возврат "Штраф";
	
КонецФункции

Функция ТипНеустойкиЗаказчикаПеня() Экспорт
	
	Возврат "Пеня"

КонецФункции

Функция НовыеСведенияОНалогахИВносахЗаказчика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("ИнформацияОНалогеИВзносеЗаФизическоеЛицо"); 
	Тип = Новый ОписаниеТипов("Массив"); 
	Описание =	НСтр("ru = 'Информация о налоге и взносе, уплачиваемом заказчиком за физическое лицо'"); 
	Поле = НовоеПолеСтруктуры("ИнформацияОНалогеИВзносеЗаФизическоеЛицо", Новый Массив,
		Тип,
		Описание,
		Истина,
		"ИнфНалВзносУплЗак",,
		"НовыеСведенияОНалогеИВносеЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);

	Возврат Результат;

КонецФункции

Функция НовыеСведенияОНалогеИВносеЗаказчика() Экспорт
	
	ИнформацияОНалогеИВзносеЗаФизическоеЛицо = Новый Структура();
	ДобавитьМетаданныеСтруктуры(ИнформацияОНалогеИВзносеЗаФизическоеЛицо);

	ИнформацияОНалогеИВзносеЗаФизическоеЛицо.Вставить("Сумма"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(22, 2)); 
	Описание =	НСтр("ru = 'Сумма'"); 
	Поле = НовоеПолеСтруктуры("Сумма", 0,
		Тип,
		Описание,
		Истина,
		"@Сум",,
		""); 
	ДобавитьПолеСтруктуры(ИнформацияОНалогеИВзносеЗаФизическоеЛицо, Поле);
	
	ИнформацияОНалогеИВзносеЗаФизическоеЛицо.Вставить("ИнформацияОДругихНалогахВзносах"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Информация о других налогах/взносах'"); 
	Поле = НовоеПолеСтруктуры("ИнформацияОДругихНалогахВзносах", "",
		Тип,
		Описание,
		Ложь,
		"@ИнфДрНалВзнос",,
		""); 
	ДобавитьПолеСтруктуры(ИнформацияОНалогеИВзносеЗаФизическоеЛицо, Поле);
	
	ИнформацияОНалогеИВзносеЗаФизическоеЛицо.Вставить("НалогВзнос"); 
	Тип = Новый ОписаниеТипов("Структура"); 
	Описание =	НСтр("ru = 'Налог/взнос'"); 
	Поле = НовоеПолеСтруктуры("НалогВзнос", Новый Структура,
		Тип,
		Описание,
		Истина,
		"НалВзнос",,
		"НовыеНалогВзнос"); 
	ДобавитьПолеСтруктуры(ИнформацияОНалогеИВзносеЗаФизическоеЛицо, Поле);

	НалогВзнос = ИнформацияОНалогеИВзносеЗаФизическоеЛицо.НалогВзнос; 
	ДобавитьМетаданныеСтруктуры(НалогВзнос);

	НалогВзнос.Вставить("КодНалогаВзноса"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Код налога/взноса'"); 
	Поле = НовоеПолеСтруктуры("КодНалогаВзноса", "",
		Тип,
		Описание,
		Истина,
		"@Код",,
		""); 
	ДобавитьПолеСтруктуры(НалогВзнос, Поле);
	
	НалогВзнос.Вставить("НаименованиеНалогаВзноса"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Наименование налога/взноса'"); 
	Поле = НовоеПолеСтруктуры("НаименованиеНалогаВзноса", "",
		Тип,
		Описание,
		Ложь,
		"@Наим",,
		""); 
	ДобавитьПолеСтруктуры(НалогВзнос, Поле);
	
	Возврат ИнформацияОНалогеИВзносеЗаФизическоеЛицо;
	
КонецФункции

Функция НовыеСведенияОПрикрепленныхДокументахЗаказчика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);

	Результат.Вставить("УникальныйИдентификаторКонтента"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Уникальный идентификатор контента'"); 
	Поле = НовоеПолеСтруктуры("УникальныйИдентификаторКонтента", "",
		Тип,
		Описание,
		Ложь,
		"@КонтентИд",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);

	Результат.Вставить("ВнешнийУникальныйИдентификаторКонтента"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Внешний уникальный идентификатор контента '"); 
	Поле = НовоеПолеСтруктуры("ВнешнийУникальныйИдентификаторКонтента", "",
		Тип,
		Описание,
		Ложь,
		"@ВнешКонтентИд",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ИмяФайла"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Имя файла'"); 
	Поле = НовоеПолеСтруктуры("ИмяФайла", "",
		Тип,
		Описание,
		Истина,
		"@ИмяФайл",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ХэшФайла"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Хэш файла в hex представлении'"); 
	Поле = НовоеПолеСтруктуры("ХэшФайла", "",
		Тип,
		Описание,
		Ложь,
		"@ХэшФайл",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("РасширениеФайла"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Расширение файла'"); 
	Поле = НовоеПолеСтруктуры("РасширениеФайла", "",
		Тип,
		Описание,
		Истина,
		"@РасширенФайл",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);	
			
	Результат.Вставить("ОписаниеПрикрепляемогоДокумента"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Описание прикрепляемого документа'"); 
	Поле = НовоеПолеСтруктуры("ОписаниеПрикрепляемогоДокумента", "",
		Тип,
		Описание,
		Ложь,
		"@ОписаниеФайл",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);	
	
	Результат.Вставить("ДатаВремяПрикрепленияДокумента"); 
	Тип = Новый ОписаниеТипов("Дата"); 
	Описание =	НСтр("ru = 'Дата/время прикрепления документа'"); 
	Поле = НовоеПолеСтруктуры("ДатаВремяПрикрепленияДокумента", "",
		Тип,
		Описание,
		Истина,
		"@ДатаПрикреплен",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);	
	
	Результат.Вставить("СсылкаДляСкачиванияПрикрепленногоДокумента"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Ссылка для скачивания прикрепленного документа'"); 
	Поле = НовоеПолеСтруктуры("СсылкаДляСкачиванияПрикрепленногоДокумента", "",
		Тип,
		Описание,
		Ложь,
		"@Ссылк",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);		
	
	Результат.Вставить("СсылкаНаСправочникВидовДокументов"); 
	Тип = Новый ОписаниеТипов("Структура"); 
	Описание =	НСтр("ru = 'Ссылка на справочник видов документов'"); 
	Поле = НовоеПолеСтруктуры("СсылкаНаСправочникВидовДокументов", Новый Структура,
		Тип,
		Описание,
		Ложь,
		"ВидДок",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);					
	
	СсылкаНаСправочникВидовДокументов = Результат.СсылкаНаСправочникВидовДокументов;
	ДобавитьМетаданныеСтруктуры(СсылкаНаСправочникВидовДокументов);
		
	СсылкаНаСправочникВидовДокументов.Вставить("Код"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(22, 2)); 
	Описание =	НСтр("ru = 'Код'"); 
	Поле = НовоеПолеСтруктуры("Код", Неопределено,
		Тип,
		Описание,
		Истина,
		"@Код",,
		""); 
	ДобавитьПолеСтруктуры(СсылкаНаСправочникВидовДокументов, Поле);	

	СсылкаНаСправочникВидовДокументов.Вставить("Наименование"); 
	Тип = Новый ОписаниеТипов("Строка"); 
	Описание =	НСтр("ru = 'Наименование'"); 
	Поле = НовоеПолеСтруктуры("Наименование", "",
		Тип,
		Описание,
		Истина,
		"@Наим",,
		""); 
	ДобавитьПолеСтруктуры(СсылкаНаСправочникВидовДокументов, Поле);
			
	Возврат Результат;
	
КонецФункции

Функция СформироватьДанныеПриложенияУКДЗаказчикаДляЕИС(
		ДеревоДанных, ИдентификаторФайла) Экспорт

	Результат = НовыйРезультатФормированияПриложения();
	
	ДанныеПриложения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДанныеЭлектронногоАктированияЕИС.ДанныеПриложения");

	ДанныеПриложения.ИдентификаторПриложения = ПрефиксИмениПриложенияЕИС() + ИдентификаторФайла;
	ДанныеПриложения.ИдентификаторФайла = ИдентификаторФайла;
	ДанныеПриложения.ВерсияФормата = ВерсияФормата(); 
	
	ТекстПриложения = ТекстПриложенияКТитулуЗаказчикаУКД(ДанныеПриложения);
	
	РезультатПроверки = ПроверитьНаСоответствиеСхеме(
		ТекстПриложения, ИмяТипаXDTOПриложениеУКДПокупателя());
	Если НЕ ПустаяСтрока(РезультатПроверки) Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка проверки приложения к УКД покупателя для ЕИС:'")
			+ Символы.ПС + РезультатПроверки;
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ИмяФайлаПриложения = ДанныеПриложения.ИдентификаторПриложения + ".xml";
	
	ЗаписатьОтладочнуюИнформацию(ИмяФайлаПриложения, ТекстПриложения);
	
	ТекстПриложения = УдалитьПространствоИменТранспортногоПакета(ТекстПриложения);
	
	Результат.ДвоичныеДанные =
		 ПолучитьДвоичныеДанныеИзСтроки(ТекстПриложения, КодировкаТекстаПриложенияДляЕИС());
	Результат.ИмяФайла = ИмяФайлаПриложения;
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

Функция НовыеСведенияОПрочихНачисленияхУКДЗаказчика() Экспорт
	
	Результат = Новый Структура();
	ДобавитьМетаданныеСтруктуры(Результат);
	
	Результат.Вставить("ИтоговаяСуммаНеустоек"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(22, 2)); 
	Описание =	НСтр("ru = 'Итоговая сумма неустоек (штрафов, пени) с учетом корректировки'"); 
	Поле = НовоеПолеСтруктуры("ИтоговаяСуммаНеустоек", 0,
		Тип,
		Описание,
		Ложь,
		"@СумНеуст",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ИтоговаяСуммаОплаты"); 
	Тип = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(22, 2)); 
	Описание =	НСтр("ru = 'Итоговая сумма оплаты с учетом корректировки'"); 
	Поле = НовоеПолеСтруктуры("ИтоговаяСуммаОплаты", 0,
		Тип,
		Описание,
		Ложь,
		"@СумОпл",,
		""); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ИнформацияОНачисленнойНеустойке"); 
	Тип = Новый ОписаниеТипов("Массив"); 
	Описание =	НСтр("ru = 'Информация о начисленной неустойке (штрафе, пени) и уменьшении суммы оплаты'"); 
	Поле = НовоеПолеСтруктуры("ИнформацияОНачисленнойНеустойке", Неопределено,
		Тип,
		Описание,
		Ложь,
		"ИнфНачислНеуст",,
		"НовыеСведенияОНачисленнойНеустойкеЗаказчика"); 
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ТекстыЗапросов

Процедура ДобавитьПараметрыФильтраПоДатамИРеквизитамКонтрагента(Результат)
	
	// Обе даты должны быть заданы если используется фильтр по датам.
	// Начало временного интервала, в котором ведется поиск (включается).
	// Время передается в универсальном формате.
	Результат.Вставить("ДатаНачала", Неопределено);
	// Конец временного интервала, в котором ведется поиск (не включается).
	// Время передается в универсальном формате.
	Результат.Вставить("ДатаОкончания", Неопределено);
	
	// Сведения о заказчике или поставщике контракта (необязательные параметры).
	Результат.Вставить("ИНН", Неопределено);
	Результат.Вставить("КПП", Неопределено);
	
КонецПроцедуры

Функция ЗаголовокКонверта()
	
	Возврат "<soapenv:Envelope"
		+ " xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"""
		+ " xmlns:elac=""http://zakupki.gov.ru/eruz/ws/elacts"">";
	
КонецФункции

Функция ПараметрыЗапросаПолученияСпискаКонтрактов(РегистрационныйНомерЕРУЗ,
		НомерКонтракта = Неопределено)
	
	Результат = Новый Структура;
	
	Результат.Вставить("РегистрационныйНомерЕРУЗ", РегистрационныйНомерЕРУЗ);
	
	// Фильтр по реестровой записи контракта.
	// Номер реестровой записи контракта. Если указан, то фильтры по датам и данным заказчика не используются.
	Результат.Вставить("НомерКонтракта", НомерКонтракта);
	
	// Фильтр по датам и реквизитам контрагента. Используются если не указан номер контракта.
	// Добавляются поля: ДатаНачала, ДатаОкончания, ИНН, КПП
	ДобавитьПараметрыФильтраПоДатамИРеквизитамКонтрагента(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция НовыеПараметрыЗапросаПолученияСпискаОбъектов(ДляЗаказчика = Ложь)
	
	Результат = Новый Структура;
	
	Если НЕ ДляЗаказчика Тогда
		// Номер реестровой записи в ЕРУЗ.
		Результат.Вставить("РегистрационныйНомерЕРУЗ", "");
	Иначе
		// Параметры для типа organizationRef в теге sender.
		Результат.Вставить("ПараметрыОтправителя", Неопределено);
		// Параметры для типа organizationRef в теге customer.
		Результат.Вставить("ПараметрыЗаказчика", Неопределено);
	КонецЕсли;
	
	Результат.Вставить("ДляЗаказчика", ДляЗаказчика);
	
	// Виды документов (необязательный).
	Результат.Вставить("ВидыДокументов", Новый Массив);
	
	// Фильтр по датам и реквизитам контрагента.
	ДобавитьПараметрыФильтраПоДатамИРеквизитамКонтрагента(Результат);
	
	// Фильтр по внешнему ИД документа.
	// Внешний идентификатор УПД/УКД (титул продавца).
	Результат.Вставить("ВнешнийИдентификатор", Неопределено);
	
	// Фильтр по ИД документа в ЕИС.
	// Идентификатор объекта, присвоенный в ЕИС.
	Результат.Вставить("ИдентификаторОбъектаЕИС", Неопределено);
	
	// Фильтр по реестровой записи контракта.
	// Номер реестровой записи контракта. Если указан, то даты и данные заказчика не используются.
	Результат.Вставить("НомерКонтракта", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьИННКПП(ИНН, КПП)
	
	МаксимальнаяДлинаИНН = 10;
	Если СтрДлина(СокрЛП(ИНН)) > МаксимальнаяДлинаИНН Тогда
		ВызватьИсключение(НСтр("ru='Длина ИНН превышает 10 символов.'"));
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
		ВызватьИсключение(НСтр("ru='В ИНН содержатся недопустимые символы.'"));
	КонецЕсли;
	
	МаксимальнаяДлинаКПП = 9;
	Если СтрДлина(СокрЛП(КПП)) > МаксимальнаяДлинаКПП Тогда
		ВызватьИсключение(НСтр("ru='Длина КПП превышает 9 символов.'"));
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КПП) Тогда
		ВызватьИсключение(НСтр("ru='В КПП содержатся недопустимые символы.'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКодСПЗ(КодСПЗ)
	
	МаксимальнаяДлинаСПЗ = 11;
	ДлинаКода = СтрДлина(СокрЛП(КодСПЗ));
	Если ДлинаКода <> МаксимальнаяДлинаСПЗ Тогда
		Шаблон = НСтр("ru='Длина кода СПЗ не равна 11 символам. Передан код СПЗ %1.'");
		ОписаниеОшибки = СтрШаблон(Шаблон, КодСПЗ);
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодСПЗ) Тогда
		Шаблон = НСтр("ru='В коде СПЗ содержатся недопустимые символы. Передан код СПЗ %1.'");
		ОписаниеОшибки = СтрШаблон(Шаблон, КодСПЗ);
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ПустойКодСПЗ()
	
	Возврат "00000000000";
	
КонецФункции

Функция СведенияОЗаказчике(ИНН, КПП)
	
	ПроверитьИННКПП(ИНН, КПП);
	
	Шаблон =
		"
		|         <elac:customerInfo>
		|            <elac:INN>%1</elac:INN>
		|            <elac:KPP>%2</elac:KPP>
		|         </elac:customerInfo>";
	
	Сведения = СтрШаблон(Шаблон, ИНН, КПП);
	
	Возврат Сведения;
	
КонецФункции

Функция СведенияОбОрганизации(ДанныеОрганизации, Тег)
	
	КодПоСПЗ = ДанныеОрганизации.КодПоСПЗ;
	Если КодПоСПЗ = ПустойКодСПЗ()
		ИЛИ НЕ ЗначениеЗаполнено(КодПоСПЗ) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеОрганизации.КодПоСводномуРеестру) Тогда
				ВызватьИсключение(НСтр("ru='Не заполнен код организации по сводному реестру.'"));
			КонецЕсли;
			Шаблон =
			"            <elac:regNum>%1</elac:regNum>
			|            <elac:consRegistryNum>%2</elac:consRegistryNum>";
			КодПоСПЗ = ПустойКодСПЗ();
			Содержимое = СтрШаблон(Шаблон,
				КодПоСПЗ,
				ДанныеОрганизации.КодПоСводномуРеестру);
	Иначе
		ПроверитьКодСПЗ(КодПоСПЗ);
		Шаблон = "            <elac:regNum>%1</elac:regNum>";
		Содержимое = СтрШаблон(Шаблон, КодПоСПЗ);
	КонецЕсли;
	
	Шаблон =
		"         <elac:%1>
		|%2
		|         </elac:%1>";
	
	Возврат СтрШаблон(Шаблон, Тег, Содержимое);
	
КонецФункции

Функция ДанныеОтправителяИЗаказчика(ПараметрыОтправителя, ПараметрыЗаказчика)
	
	Если ПараметрыОтправителя = Неопределено Тогда
		ВызватьИсключение(НСтр("ru='Не пределены параметры поставщика.'"));
	КонецЕсли;
	
	Если ПараметрыЗаказчика = Неопределено Тогда
		ВызватьИсключение(НСтр("ru='Не пределены параметры заказчика.'"));
	КонецЕсли;
	
	ДанныеОтправителя = СведенияОбОрганизации(ПараметрыОтправителя, "sender");
	ДанныеЗаказчика = СведенияОбОрганизации(ПараметрыЗаказчика, "customer");
	
	Шаблон =
		"%1
		|%2";
	
	Возврат СтрШаблон(Шаблон, ДанныеОтправителя, ДанныеЗаказчика);
	
КонецФункции

Функция ВерсияПриложения()
	
	Версия = "";
	ЭлектронноеАктированиеЕИСПереопределяемый.ВерсияПриложения(Версия);
	Если НЕ ЗначениеЗаполнено(Версия) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не указана версия приложения для электронного актирования в ЕИС.'");
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	Возврат Версия;
	
КонецФункции

Функция ВерсияФормата()
	
	Возврат "1.07";
	
КонецФункции

#Область ТекстыЗапросаДляПоставщика

Функция ТекстЗапросаПолученияСпискаКонтрактовПоставщика(ПараметрыЗапроса)
	
	РегистрационныйНомерЕРУЗ = ПараметрыЗапроса.РегистрационныйНомерЕРУЗ;
	ДатаНачала = ПараметрыЗапроса.ДатаНачала;
	ДатаОкончания = ПараметрыЗапроса.ДатаОкончания;
	НомерКонтракта = ПараметрыЗапроса.НомерКонтракта;
	ИНН = ПараметрыЗапроса.ИНН;
	КПП = ПараметрыЗапроса.КПП;
	
	// Проверка входных параметров.
	Если НЕ ЗначениеЗаполнено(РегистрационныйНомерЕРУЗ) Тогда
		ВызватьИсключение(НСтр("ru='Не заполнен регистрационный номер поставщика в ЕРУЗ.'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерКонтракта) Тогда
		
		Если НЕ ЗначениеЗаполнено(ДатаНачала)
			ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
				ВызватьИсключение(НСтр("ru='Не заполнены даты, задающие интервал поиска контрактов.'"));
		КонецЕсли;
		
		// Дата указывавается в универсальном формате.
		Шаблон =
			"         <elac:fromDate>%1Z</elac:fromDate>
			|         <elac:toDate>%2Z</elac:toDate>";
		
		ПараметрыПоиска = СтрШаблон(Шаблон, XMLСтрока(ДатаНачала), XMLСтрока(ДатаОкончания));
		
		Если ЗначениеЗаполнено(ИНН) Тогда
			
			ПараметрыПоиска = ПараметрыПоиска + СведенияОЗаказчике(ИНН, КПП);
			
		КонецЕсли;
		
	Иначе
		
		Шаблон = "         <elac:contractRegNum>%1</elac:contractRegNum>";
		ПараметрыПоиска = СтрШаблон(Шаблон, НомерКонтракта);
		
	КонецЕсли;
	
	Шаблон = ЗаголовокКонверта() + "
		|   <soapenv:Header/>
		|   <soapenv:Body>
		|      <elac:lkpGetContractsListRequest>
		|         <elac:regNum>%1</elac:regNum>
		|%2
		|      </elac:lkpGetContractsListRequest>
		|   </soapenv:Body>
		|</soapenv:Envelope>";
		
	ТекстЗапроса = СтрШаблон(Шаблон, РегистрационныйНомерЕРУЗ, ПараметрыПоиска);

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПолученияОбъектаПоставщика(РегистрационныйНомерЕРУЗ, УИДДокумента, ВидДокумента)
	
	Шаблон = ЗаголовокКонверта() + "
		|   <soapenv:Header/>
		|   <soapenv:Body>
		|      <elac:lkpGetObjectInfoRequest>
		|         <elac:regNum>%1</elac:regNum>
		|         <elac:documentUid>%2</elac:documentUid>
		|         <elac:documentKind>%3</elac:documentKind>
		|      </elac:lkpGetObjectInfoRequest>
		|   </soapenv:Body>
		|</soapenv:Envelope>";
		
	ТекстЗапроса = СтрШаблон(Шаблон, РегистрационныйНомерЕРУЗ, УИДДокумента, ВидДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПолученияИнформацииОПоставщике(РегистрационныйНомерЕРУЗ)
	
	Шаблон = ЗаголовокКонверта() + "
		|   <soapenv:Header/>
		|   <soapenv:Body>
		|      <elac:lkpGetParticipantInfoRequest>
		|         <elac:regNum>%1</elac:regNum>
		|      </elac:lkpGetParticipantInfoRequest>
		|   </soapenv:Body>
		|</soapenv:Envelope>";
		
	ТекстЗапроса = СтрШаблон(Шаблон, РегистрационныйНомерЕРУЗ);

	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросовДляЗаказчика

Функция ТекстЗапросаПолученияСведенийОПодписантахЗаказчика(ПараметрыЗаказчика)
	
	Шаблон = ЗаголовокКонверта() + "
		|   <soapenv:Header/>
		|   <soapenv:Body>
		|      <elac:lkzGetSignersInfoRequest>
		|%1
		|      </elac:lkzGetSignersInfoRequest>
		|   </soapenv:Body>
		|</soapenv:Envelope>";
		
	СведенияОЗаказчике = СведенияОбОрганизации(ПараметрыЗаказчика, "sender");
	
	Возврат СтрШаблон(Шаблон, СведенияОЗаказчике);
	
КонецФункции

Функция ТекстЗапросаПолученияОбъектаЗаказчика(УИДДокумента,
		ВидДокумента,
		ПараметрыОтправителя,
		ПараметрыЗаказчика)
		
			
	Шаблон = ЗаголовокКонверта() + "
		|   <soapenv:Header/>
		|   <soapenv:Body>
		|      <elac:lkzGetObjectInfoRequest>
		|%1
		|         <elac:documentUid>%2</elac:documentUid>
		|         <elac:documentKind>%3</elac:documentKind>
		|      </elac:lkzGetObjectInfoRequest>
		|   </soapenv:Body>
		|</soapenv:Envelope>";
		
	ДанныеОтправителяИЗаказчика = ДанныеОтправителяИЗаказчика(
		ПараметрыОтправителя,
		ПараметрыЗаказчика);
		
	ТекстЗапроса = СтрШаблон(Шаблон,
		ДанныеОтправителяИЗаказчика,
		УИДДокумента,
		ВидДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросовОбщие

Функция СистемаЛичногоКабинетаПоставщика()
	
	Возврат "LKP";
	
КонецФункции

Функция СистемаЛичногоКабинетаЗаказчика()
	
	Возврат "RK";
	
КонецФункции

Функция ТекстЗапросаПолученияСпискаОбъектов(ПараметрыЗапроса)
		
	ДляЗаказчика = ПараметрыЗапроса.ДляЗаказчика;
	Если ДляЗаказчика Тогда
		РегистрационныйНомерЕРУЗ = "";
	Иначе
		РегистрационныйНомерЕРУЗ = ПараметрыЗапроса.РегистрационныйНомерЕРУЗ;
	КонецЕсли;
	
	ДатаНачала = ПараметрыЗапроса.ДатаНачала;
	ДатаОкончания = ПараметрыЗапроса.ДатаОкончания;
	НомерКонтракта = ПараметрыЗапроса.НомерКонтракта;
	ИНН = ПараметрыЗапроса.ИНН;
	КПП = ПараметрыЗапроса.КПП;
	ВнешнийИдентификатор = ПараметрыЗапроса.ВнешнийИдентификатор;
	ИдентификаторОбъектаЕИС = ПараметрыЗапроса.ИдентификаторОбъектаЕИС;
	
	// Проверка входных параметров.
	Если НЕ ДляЗаказчика
		И НЕ ЗначениеЗаполнено(РегистрационныйНомерЕРУЗ) Тогда
			ВызватьИсключение(НСтр("ru='Не заполнен регистрационный номер поставщика в ЕРУЗ.'"));
	КонецЕсли;
	
	// Формирование запроса.
	Если ДляЗаказчика Тогда
		ТегВложения = "lkzGetObjectListRequest";
		ДанныеОтправителяИЗаказчика = ДанныеОтправителяИЗаказчика(
			ПараметрыЗапроса.ПараметрыОтправителя,
			ПараметрыЗапроса.ПараметрыЗаказчика);
	Иначе
		ТегВложения = "lkpGetObjectListRequest";
		Шаблон = "         <elac:regNum>%1</elac:regNum>";
		ДанныеОтправителяИЗаказчика =
			СтрШаблон(Шаблон, РегистрационныйНомерЕРУЗ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерКонтракта) Тогда
		
		// Отбор по номеру контракта.
		Шаблон = "         <elac:contractRegNum>%1</elac:contractRegNum>";
		ПараметрыПоиска = СтрШаблон(Шаблон, НомерКонтракта);

	ИначеЕсли ЗначениеЗаполнено(ВнешнийИдентификатор) Тогда
		
		// Отбор по внешнему идентификатору документа.
		Шаблон = "         <elac:externalId>%1</elac:externalId>";
		ПараметрыПоиска = СтрШаблон(Шаблон, ВнешнийИдентификатор);
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторОбъектаЕИС) Тогда
		
		// Отбор по внутреннему идентификатору в ЕИС.
		Шаблон = "         <elac:objectId>%1</elac:objectId>";
		ПараметрыПоиска = СтрШаблон(Шаблон, ИдентификаторОбъектаЕИС);
		
	Иначе
		
		// Фильтр по датам и реквизитам заказчика.
		Если НЕ ЗначениеЗаполнено(ДатаНачала)
			ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
				ВызватьИсключение(НСтр("ru='Не заполнены даты, задающие интервал поиска контрактов.'"));
		КонецЕсли;
		
		// Предполагается, что время передается в универсальном формате.
		Шаблон =
			"         <elac:fromDate>%1Z</elac:fromDate>
			|         <elac:toDate>%2Z</elac:toDate>";
		
		ПараметрыПоиска = СтрШаблон(Шаблон, XMLСтрока(ДатаНачала), XMLСтрока(ДатаОкончания));
		
		Если ЗначениеЗаполнено(ИНН) Тогда
			
			ПараметрыПоиска = ПараметрыПоиска + СведенияОЗаказчике(ИНН, КПП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Шаблон = ЗаголовокКонверта() + "
		|   <soapenv:Header/>
		|   <soapenv:Body>
		|      <elac:%1>
		|%2
		|%3
		|      </elac:%1>
		|   </soapenv:Body>
		|</soapenv:Envelope>";
		
	ТекстЗапроса = СтрШаблон(Шаблон,
		ТегВложения,
		ДанныеОтправителяИЗаказчика,
		ПараметрыПоиска);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПолученияРезультатаОбработкиПакета(ИдентификаторПакета,
			ДатаФормированияПакета)
			
	ДеревоДанных = СоздатьДеревоXML();
	ДобавитьУзелXML(ДеревоДанных, "xmlns:soapenv", Истина, "http://schemas.xmlsoap.org/soap/envelope/");
	ДобавитьУзелXML(ДеревоДанных, "soapenv:Header", Ложь);
	
	// Формирование тела.
	Тело = ДобавитьУзелXML(ДеревоДанных, "soapenv:Body", Ложь);
	Запрос = ДобавитьУзелXML(Тело, "ФайлЗапросРезул", Ложь);
	// Идентификатор транспортного пакета.
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	ДобавитьУзелXML(Запрос, "ИдФайл", Истина, ИдентификаторЗапроса);
	// Cистема отправителя, получателя.
	ДобавитьУзелXML(Запрос, "СистОтпр", Истина, СистемаЛичногоКабинетаПоставщика(), Истина);
	ДобавитьУзелXML(Запрос, "СистПол", Истина, СистемаЛичногоКабинетаЗаказчика(), Истина);
	ДобавитьУзелXML(Запрос, "ДатаВрФормир", Истина, XMLСтрока(ДатаФормированияПакета));
	ДобавитьУзелXML(Запрос, "ВерсПрог", Истина, ВерсияПриложения());
	ДобавитьУзелXML(Запрос, "ВерсФорм", Истина, ВерсияФормата());
	
	Документ = ДобавитьУзелXML(Запрос, "Документ", Ложь);
	ДобавитьУзелXML(Документ, "ИдТрПакет", Истина, ИдентификаторПакета);
	
	ТекстЗапроса = ВыгрузитьДеревоВXML(ДеревоДанных, "soapenv:Envelope");
	Возврат ТекстЗапроса;
	
КонецФункции

// См. ДанныеДляОтправкиТранспортногоПакета()
Функция ТекстЗапросаОтправкиТранспортногоПакета(ДанныеДляОтправки)
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляОтправки.ИдентификаторПакета) Тогда
		ВызватьИсключение(НСтр("ru='Не задан идентификатор транспортного пакета.'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляОтправки.ДатаФормирования) Тогда
		ВызватьИсключение(НСтр("ru='Не указана дата формирования транспортного пакета.'"));
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДанныеДляОтправки.ТипПриложенногоДокумента) Тогда
		ВызватьИсключение(НСтр("ru='Не указан тип приложенного документа.'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляОтправки.ИдентификаторОтправителя) Тогда
		ВызватьИсключение(НСтр("ru='Не указан идентификатор отправителя документа.'"));
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДанныеДляОтправки.ИдентификаторПолучателя) Тогда
		ВызватьИсключение(НСтр("ru='Не указан идентификатор получателя документа.'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляОтправки.КонтентДокументаBase64) Тогда
		ВызватьИсключение(НСтр("ru='Документ не содержит данных.'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляОтправки.ИдентификаторФайла) Тогда
		ВызватьИсключение(НСтр("ru='Не указан идентификатор файла, к которому сформировано приложение.'"));
	КонецЕсли;
	
	ДеревоДанных = СоздатьДеревоXML();
	ДобавитьУзелXML(ДеревоДанных, "xmlns:soapenv", Истина, "http://schemas.xmlsoap.org/soap/envelope/");
	ДобавитьУзелXML(ДеревоДанных, "soapenv:Header", Ложь);
	
	// Формирование тела.
	Тело = ДобавитьУзелXML(ДеревоДанных, "soapenv:Body", Ложь);
	УзелПакета = ДобавитьУзелXML(Тело, "ФайлПакет", Ложь);
	ДобавитьУзелXML(УзелПакета, "ИдТрПакет", Истина, ДанныеДляОтправки.ИдентификаторПакета);
	ДобавитьУзелXML(УзелПакета, "СистОтпр", Истина, ДанныеДляОтправки.КодСистемыОтправителя, Истина);
	ДобавитьУзелXML(УзелПакета, "СистПол", Истина, ДанныеДляОтправки.КодСистемыПолучателя, Истина);
	ДобавитьУзелXML(УзелПакета, "ИдОбъект", Истина, ДанныеДляОтправки.ИдентификаторОбъекта, Истина);
	ДобавитьУзелXML(УзелПакета, "ВнешИд", Истина, ДанныеДляОтправки.ВнешнийИдентификатор, Истина);
	ДобавитьУзелXML(УзелПакета, "ИдФайл", Истина, ДанныеДляОтправки.ИдентификаторФайла);
	ДобавитьУзелXML(УзелПакета, "ИдПрилож", Истина, ДанныеДляОтправки.ИдентификаторПриложения, Истина);
	ДобавитьУзелXML(УзелПакета, "ДатаВрФормир", Истина, XMLСтрока(ДанныеДляОтправки.ДатаФормирования));
	ДобавитьУзелXML(УзелПакета, "ТипПрилож", Истина, ДанныеДляОтправки.ТипПриложенногоДокумента);
	ДобавитьУзелXML(УзелПакета, "ВерсФорм", Истина, ДанныеДляОтправки.ВерсияФормата);
	ДобавитьУзелXML(УзелПакета, "ИдОтпр", Истина, ДанныеДляОтправки.ИдентификаторОтправителя);
	ДобавитьУзелXML(УзелПакета, "ИдПол", Истина, ДанныеДляОтправки.ИдентификаторПолучателя);
	ДобавитьУзелXML(УзелПакета, "xmlns", Истина, ПространствоИменТранспортногоПакетаЕИС());
	
	Если ЗначениеЗаполнено(ДанныеДляОтправки.КонтентДокументаBase64) Тогда
		УзелДокумента = ДобавитьУзелXML(УзелПакета, "Документ", Ложь);
		ДобавитьУзелXML(УзелДокумента, "Контент", Ложь, ДанныеДляОтправки.КонтентДокументаBase64);
		Для каждого Подпись Из ДанныеДляОтправки.ПодписиДокумента Цикл
			УзелПодписи = ДобавитьУзелXML(УзелДокумента, "ПодписьДокумент", Ложь);
			ДобавитьУзелXML(УзелПодписи, "Подпись", Ложь, Подпись.Содержимое);
			ДобавитьУзелXML(УзелПодписи, "ОблПолн", Истина, Подпись.ОбластьПолномочий);
			ДобавитьУзелXML(УзелПодписи, "Статус", Истина, Подпись.Статус);
			ДобавитьУзелXML(УзелПодписи, "ОснПолн", Истина, Подпись.ОснованиеПолномочий);
			ДобавитьУзелXML(УзелПодписи, "ОснПолнОрг", Истина, Подпись.ОснованиеПолномочийОрганизации);
			Если Подпись.ВидПодписи = ВидПодписиФЛ() Тогда
				УзелПодписант = ДобавитьУзелXML(УзелПодписи, "ФЛ", Ложь);
				ДобавитьУзелXML(УзелПодписант, "ИННФЛ", Истина, Подпись.ИННФЛ, Истина);
				ДобавитьУзелXML(УзелПодписант, "ИныеСвед", Истина, Подпись.ИныеСведения, Истина);
				ФИО = ДобавитьУзелXML(УзелПодписант, "ФИО", Ложь);
				ДобавитьУзелXML(ФИО, "Фамилия", Истина, Подпись.Фамилия);
				ДобавитьУзелXML(ФИО, "Имя", Истина, Подпись.Имя);
				ДобавитьУзелXML(ФИО, "Отчество", Истина, Подпись.Отчество, Истина);
			ИначеЕсли Подпись.ВидПодписи = ВидПодписиЮЛ() Тогда
				УзелПодписант = ДобавитьУзелXML(УзелПодписи, "ФЛ", Ложь);
				ДобавитьУзелXML(УзелПодписант, "ИННЮЛ", Истина, Подпись.ИННЮЛ, Истина);
				ДобавитьУзелXML(УзелПодписант, "НаимОрг", Истина, Подпись.НаименованиеОрганизации, Истина);
				ДобавитьУзелXML(УзелПодписант, "Должн", Истина, Подпись.Должность, Истина);
				ДобавитьУзелXML(УзелПодписант, "ИныеСвед", Истина, Подпись.ИныеСведения, Истина);
				ФИО = ДобавитьУзелXML(УзелПодписант, "ФИО", Ложь);
				ДобавитьУзелXML(ФИО, "Фамилия", Истина, Подпись.Фамилия);
				ДобавитьУзелXML(ФИО, "Имя", Истина, Подпись.Имя);
				ДобавитьУзелXML(ФИО, "Отчество", Истина, Подпись.Отчество, Истина);
			ИначеЕсли Подпись.ВидПодписи = ВидПодписиИП() Тогда
				УзелПодписант = ДобавитьУзелXML(УзелПодписи, "ИП", Ложь);
				ДобавитьУзелXML(УзелПодписант, "ИННФЛ", Истина, Подпись.ИННФЛ, Истина);
				ФИО = ДобавитьУзелXML(УзелПодписант, "ФИО", Ложь);
				ДобавитьУзелXML(ФИО, "Фамилия", Истина, Подпись.Фамилия);
				ДобавитьУзелXML(ФИО, "Имя", Истина, Подпись.Имя);
				ДобавитьУзелXML(ФИО, "Отчество", Истина, Подпись.Отчество, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДляОтправки.ПриложениеBase64) Тогда
		УзелПриложения = ДобавитьУзелXML(УзелПакета, "Прилож", Ложь);
		ДобавитьУзелXML(УзелПриложения, "Контент", Ложь, ДанныеДляОтправки.ПриложениеBase64);
	КонецЕсли;
	
	// Вложения
	Для каждого Вложение Из ДанныеДляОтправки.Вложения Цикл
		Если НЕ ЗначениеЗаполнено(Вложение.ИмяФайла) Тогда
			ТекстОшибки = НСтр("ru='Не указано имя файла вложения.'");
			ВызватьИсключение(ТекстОшибки);
		КонецЕсли;
		УзелВложения = ДобавитьУзелXML(УзелПакета, "Вложен", Ложь);
		ДобавитьУзелXML(УзелВложения, "КонтентИд", Истина, Вложение.ИдентификаторКонтента, Истина);
		ДобавитьУзелXML(УзелВложения, "ВнешКонтентИд", Истина, Вложение.ВнешнийИдентификаторКонтента, Истина);
		ДобавитьУзелXML(УзелВложения, "ИмяФайл", Истина, Вложение.ИмяФайла);
		ДобавитьУзелXML(УзелВложения, "РазмерФайл", Истина, Вложение.РазмерФайла, Истина);
		Если Вложение.ВидВложения = ВидВложенияСсылка() Тогда
			ДобавитьУзелXML(УзелВложения, "Ссылк", Ложь, Вложение.Ссылка);
		ИначеЕсли Вложение.ВидВложения = ВидВложенияОтносительнаяСсылка() Тогда
			УзелСсылки = ДобавитьУзелXML(УзелВложения, "ОтносСсылка", Ложь);
			ДобавитьУзелXML(УзелСсылки, "КонтентИд", Ложь, Вложение.ИдентификаторКонтентаОтносительнойСсылки);
			ДобавитьУзелXML(УзелСсылки, "ТипФХ", Ложь, Вложение.ТипФайлогоХранилищаОтносительнойСсылки);
		ИначеЕсли Вложение.ВидВложения = ВидВложенияBase64() Тогда
			ДобавитьУзелXML(УзелВложения, "Контент", Ложь, Вложение.КонтентBase64);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = ВыгрузитьДеревоВXML(ДеревоДанных, "soapenv:Envelope");
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

Функция ЭтоТипДокументаАктирования(ТипДокумента)
	
	Возврат ТипДокумента = Перечисления.ТипыДокументовЭДО.КонтрактЕИС
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД;
	
КонецФункции

Процедура ЗаполнитьЮрЛицоПодписантаЕИС(Подписант, ПространствоИменСхемы, Ошибки, Данные)
	
	ЮЛ = ФорматыЭДО_ФНС.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", Данные.ИНН, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", Данные.Должность, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "ИныеСвед", Данные.НомерСтроки, Истина, Ошибки);
	ФИО = ФорматыЭДО_ФНС.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Данные.Фамилия, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Данные.Имя, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Данные.Отчество, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, Ошибки);
	
КонецПроцедуры

Функция ВидВложенияСсылка()
	
	Возврат "Ссылка";
	
КонецФункции

Функция ВидВложенияОтносительнаяСсылка()
	
	Возврат "ОтносСсылка";
	
КонецФункции

Функция ВидВложенияBase64()
	
	Возврат "Контент";
	
КонецФункции

Функция ВидПодписиФЛ()
	
	Возврат "ФЛ";
	
КонецФункции

Функция ВидПодписиИП()
	
	Возврат "ИП";
	
КонецФункции

Функция ВидПодписиЮЛ()
	
	Возврат "ЮЛ";
	
КонецФункции

Функция ЗаписатьОтладочнуюИнформацию(ИмяФайла, Буфер)
	
	Возврат Истина;
	
КонецФункции

Функция ИмяТипаXDTOТранспортныйПакет()
	
	Возврат "ФайлПакет";
	
КонецФункции

// Имя типа XDTO приложение УПД продавца.
// 
// Возвращаемое значение:
//  Строка - Имя типа XDTO приложение УПД продавца.
Функция ИмяТипаXDTOПриложениеУПДПродавца() Экспорт
	
	Возврат "ФайлУПДПрод";
	
КонецФункции

// Имя типа XDTO приложение УКД продавца.
// 
// Возвращаемое значение:
//  Строка - Имя типа XDTO приложение УКД продавца.
Функция ИмяТипаXDTOПриложениеУКДПродавца() Экспорт
	
	Возврат "ФайлУКДПрод";
	
КонецФункции

Функция ИмяТипаXDTOПриложениеУПДПокупателя()
	
	Возврат "ФайлУПДПокуп";
	
КонецФункции

Функция ИмяТипаXDTOПриложениеУКДПокупателя()
	
	Возврат "ФайлУКДПокуп";
	
КонецФункции

Функция ПространствоИменВерсииСхем()
	
	ПространстваВерсий = Новый Соответствие();
	ПространстваВерсий.Вставить("12.0", "DP_PAKET_EIS_01_00_12_0");
	
	ВерсияСхем = ВерсияСхемЕИС();
	
	Пространство = ПространстваВерсий[ВерсияСхем];
	Если НЕ ЗначениеЗаполнено(Пространство) Тогда
		Шаблон = НСтр("ru = 'Не удалось определить пространство имен версии схем %1 для актирования в ЕИС.'");
		ТекстОшибки = СтрШаблон(Шаблон, ВерсияСхем);
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	Возврат Пространство;
	
КонецФункции

Функция ПроверитьНаСоответствиеСхеме(СтрXML, ИмяТипа, СтартовыйУзел = "")
	
	Результат = "";
	ПространствоИмен = ПространствоИменВерсииСхем();
	ТипОбъекта = ФабрикаXDTO.Тип(ПространствоИмен, ИмяТипа);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СтрXML);
	Попытка
		Если ПустаяСтрока(СтартовыйУзел) Тогда
			ФабрикаXDTO.ПрочитатьXML(Чтение, ТипОбъекта);
		Иначе
			Пока Чтение.Прочитать() Цикл
				Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента
					И Чтение.Имя = СтартовыйУзел Тогда
						ФабрикаXDTO.ПрочитатьXML(Чтение, ТипОбъекта);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	Исключение
		Результат = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура ДобавитьОбщиеПоляПриложенияКТитулуПродавца(Результат)

	// Ссылка на документ основание электронного документа.
	Результат.Вставить("ДокументОснование");
	Результат.Вставить("Контрагент");
	Результат.Вставить("ДоговорКонтрагента");
	// Массив ошибок, возникших при заполнении приложения.
	Результат.Вставить("ОшибкиЗаполнения", Новый Массив);
	
	// Ссылка на государственный контракт.	
	ИмяСправочникаГосударственныеКонтракты = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("ГосударственныеКонтракты");
	Если Не ЗначениеЗаполнено(ИмяСправочникаГосударственныеКонтракты) Тогда
		ИмяСправочникаГосударственныеКонтракты = "ГосударственныеКонтрактыЕИС";
	КонецЕсли;
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрШаблон("Справочник.%1",
			ИмяСправочникаГосударственныеКонтракты));	
	
	Результат.Вставить("ГосударственныйКонтракт",
		МенеджерОбъекта.ПустаяСсылка());
	
	// Версия формата.
	Результат.Вставить("ВерсияФормата", ВерсияФормата());
	
	// Идентификаторы файлов.
	Результат.Вставить("ИдентификаторПриложения");
	Поле = НовоеПолеСтруктуры("ИдентификаторПриложения", "",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)),
		"Идентификатор приложения к документу. "
			+ "Заполняется идентификатором файла обмена, к которому сформировано приложение, "
			+ "с добавлением префикса ""PRIL_""",
		Истина,
		"@ИдПрилож");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	Результат.Вставить("ИдентификаторФайла");
	Поле = НовоеПолеСтруктуры("ИдентификаторФайла", "",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)),
		"Идентификатор файла, к которому сформировано приложение. "
			+ "Заполняется идентификатором файла обмена, к которому сформировано приложение.",
		Истина,
		"@ИдФайл");
	ДобавитьПолеСтруктуры(Результат, Поле);
		
	// Сведения о поставщике.
	Результат.Вставить("ПризнакИспользованияКППКрупнейшегоНалогоплательщика");
	Поле = НовоеПолеСтруктуры("ПризнакИспользованияКППКрупнейшегоНалогоплательщика", Ложь,
		Новый ОписаниеТипов("Булево"),
		"Признак использования КПП крупнейшего налогоплательщика."
			+ "Наличие данного признака означает, что в основном документе указан КПП крупнейшего налогоплательщика.",
		Ложь,
		"СведПоставщик/ЮЛ/@ПрКрКПП");
	ДобавитьПолеСтруктуры(Результат, Поле);
	Результат.Вставить("НаименованиеОрганизацииПоставщика");
	Поле = НовоеПолеСтруктуры("НаименованиеОрганизацииПоставщика", ,
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)),
		"Фирменное наименование организации поставщика.",
		Ложь,
		"СведПоставщик/ЮЛ/@ФирмНаимОрг");
	ДобавитьПолеСтруктуры(Результат, Поле);
	
	// Прикрепленные документы.
	// Вложен, Массив структур НовыеСведенияОВложенииТитулаПродавцаУПД().
	Результат.Вставить("Вложения", Новый Массив);
	
КонецПроцедуры

