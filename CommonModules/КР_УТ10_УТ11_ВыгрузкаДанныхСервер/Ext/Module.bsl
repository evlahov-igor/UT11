////////////////////////////////////////////////////
//// Объект ОбщийМодуль.КР_УТ10_УТ11_ВыгрузкаДанныхСервер
//// Предназначен для выгрузки данных в УТ10 посредством шины Rabbit
//// Создан: 05.09.2022 Марченко С.Н., КРОК

#Область ПрограммныйИнтерфейс

Функция ТочкаОбмена() Экспорт 
	Возврат "Trade11.Out";
КонецФункции	

Функция ДобавитьНастройкиВыгрузкиОбъектов(ПараметрыВыгрузки) Экспорт
	
	// << 11.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2257
	Если Не КР_ДополнительныеНастройкиПовтИсп.БазаЯвляетсяЦентральной() Тогда
		Возврат ПараметрыВыгрузки;	
	КонецЕсли;	
	// >> 11.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2257

	#Область Справочники
	
	МетаданныеСправочники = Метаданные.Справочники;
	
	// << 18.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-541
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ФизическиеЛица);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ЗоныДоставки);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ТранспортныеСредства);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КР_Маршруты);	
	// >> 18.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-541

	// << 03.11.2023 Петухов А.В., Фактор, #3226
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.ЗаказНаВнутреннееПотреблениеПрисоединенныеФайлы);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КР_ПересчетТоваровПрисоединенныеФайлы);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КР_ПриходныйКассовыйОрдерПрисоединенныеФайлы);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КР_РасходныйКассовыйОрдерПрисоединенныеФайлы);	
	// >> 03.11.2023 Петухов А.В., Фактор, #3226
	// << 07.12.2023 Петухов А.В., Фактор, #3450
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.НоменклатураПрисоединенныеФайлы);	
	// >> 07.12.2023 Петухов А.В., Фактор, #3450
	// << 05.03.2024 Петухов А.В., Фактор, #3876
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.КлассификаторТНВЭД);	
	// >> 05.03.2024 Петухов А.В., Фактор, #3876
	
	// --> Евлахов Игорь Николаевич (Начало) 07.10.2024
	// Задача #4537
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеСправочники.злТипыПоверхностейРасположенияТоваров);
	// <-- Евлахов Игорь Николаевич (Конец) 07.10.2024
	
	#КонецОбласти
	
	#Область Документы

	МетаданныеДокументы = Метаданные.Документы;

	// << 05.09.2022 Марченко С.Н., КРОК, JIRA№A2105505-416
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ЗаказКлиента);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ЗаказНаПеремещение);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ЗаявкаНаВозвратТоваровОтКлиента);
	// >> 05.09.2022 Марченко С.Н., КРОК, JIRA№A2105505-416

	// << 18.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-541
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ЗаданиеНаПеревозку);	
	// >> 18.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-541
	
	// << 24.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-830
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.РеализацияТоваровУслуг);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ВозвратТоваровОтКлиента);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.КорректировкаРеализации);	
	// >> 24.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-830
	
	// << 06.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1335
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.КР_УстановкаМестРазмещения);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.КР_УстановкаМинимальнойПрезентации);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.КР_УстановкаПриоритетовРазмеров);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ИзменениеАссортимента);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.УстановкаЦенНоменклатуры);	
	// >> 06.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1335
	
	// << 02.05.2023 Марченко С.Н., КРОК, JIRA№A2105505-1488
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ПеремещениеТоваров);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ОтчетОРозничныхПродажах);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.УпаковочныйЛист);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ПриходныйКассовыйОрдер);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.РасходныйКассовыйОрдер);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ОтборРазмещениеТоваров);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ТранспортнаяНакладная);	
	// >> 02.05.2023 Марченко С.Н., КРОК, JIRA№A2105505-1488
	
	// << 29.06.2023 Марченко С.Н., КРОК, JIRA№A2105505-1909
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ПоступлениеТоваровОтХранителя);
	// >> 29.06.2023 Марченко С.Н., КРОК, JIRA№A2105505-1909
	
	// << 20.07.2023 Марченко С.Н., КРОК, JIRA№A2105505-2003
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ПересчетТоваров);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ОприходованиеИзлишковТоваров);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.СписаниеНедостачТоваров);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ПересортицаТоваров);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ВнутреннееПотреблениеТоваров);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ЗаказНаВнутреннееПотребление);
	// >> 20.07.2023 Марченко С.Н., КРОК, JIRA№A2105505-2003

	// << 29.05.2024 Петухов А.В., Фактор, #4123
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ОтчетОСписанииТоваровУХранителя);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ОприходованиеИзлишковТоваровУХранителя);
	// >> 29.05.2024 Петухов А.В., Фактор, #4123
	
	// << 29.05.2024 Петухов А.В., Фактор, #4155
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ПриобретениеТоваровУслуг);
	// >> 29.05.2024 Петухов А.В., Фактор, #4155
	
	// << 31.05.2024 Петухов А.В., Фактор, #4162
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.ПриобретениеУслугПрочихАктивов);
	// >> 31.05.2024 Петухов А.В., Фактор, #4162

	// << 23.08.2024 Петухов А.В., Фактор, #4476
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.АктОРасхожденияхПослеПеремещения);
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеДокументы.АктОРасхожденияхПослеОтгрузки);
	// >> 23.08.2024 Петухов А.В., Фактор, #4476
	
	#КонецОбласти 
	
	#Область РегистрыСведений  
	
	МетаданныеРегистрыСведений = Метаданные.РегистрыСведений;
	
	// << 18.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-541
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеРегистрыСведений.ДокументыФизическихЛиц);	
	// >> 18.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-541
	
	// << 21.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1237
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеРегистрыСведений.КР_СведенияНоменклатурыПланирование);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеРегистрыСведений.КР_СведенияНоменклатурыТоварнаяАналитика);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеРегистрыСведений.ДополнительныеСведения);	
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеРегистрыСведений.КР_ИсторияИзмененийСезонаНоменклатуры);	
	// >> 21.02.2023 Марченко С.Н., КРОК, JIRA№A2105505-1237
	
	// << 13.04.2023 Марченко С.Н., КРОК, JIRA№A2105505-1537
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеРегистрыСведений.КР_ОшибкиПоискаДанныхИнтеграции);	
	// >> 13.04.2023 Марченко С.Н., КРОК, JIRA№A2105505-1537
	
	// --> Евлахов Игорь Николаевич (Начало) 28.12.2023
	// Задача #3516
	НастройкиВыгрузки(ПараметрыВыгрузки, МетаданныеРегистрыСведений.злПланыПродажПоМагазинам);	
	// <-- Евлахов Игорь Николаевич (Конец) 28.12.2023
	
	#КонецОбласти
	
	Возврат ПараметрыВыгрузки; 
	
КонецФункции

#Область УсловияВыгрузки

#Область Справочники  

Функция УсловиеВыгрузкиФизическиеЛицаВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("СправочникОбъект.ФизическиеЛица") Тогда 	
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "КР_ЭтоВодитель, ЭтоГруппа");		
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат Данные.КР_ЭтоВодитель = Истина 
		И Данные.ЭтоГруппа = Ложь; 
	
КонецФункции		

Функция УсловиеВыгрузкиЗоныДоставкиВыполняется(Источник) Экспорт 
	
	// Проверок нет. 
	// Если потребуется, модно взять за основу УсловиеВыгрузкиФизическиеЛицаВыполняется
	
	Возврат Истина; 
	
КонецФункции		

Функция УсловиеВыгрузкиТранспортныеСредстваВыполняется(Источник) Экспорт 
	
	// Проверок нет. 
	// Если потребуется, модно взять за основу УсловиеВыгрузкиФизическиеЛицаВыполняется
	
	Возврат Истина; 
	
КонецФункции		

Функция УсловиеВыгрузкиМаршрутыВыполняется(Источник) Экспорт 
	
	// Проверок нет. 
	// Если потребуется, модно взять за основу УсловиеВыгрузкиФизическиеЛицаВыполняется
	
	Возврат Истина; 
	
КонецФункции		

// << 03.11.2023 Петухов А.В., Фактор, #3226
Функция УсловиеВыгрузкиПрисоединенныеФайлыВыполняется(Источник) Экспорт 
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		Возврат Ложь;
	ИначеЕсли Источник.ДополнительныеСвойства.Свойство("КР_ДанныеФайла") Тогда
		Возврат Истина;
	Иначе
	// << 07.12.2023 Петухов А.В., Фактор, #3450
		//Возврат Ложь;
		Результат = Ложь;
		Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
			сткРеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, "Наименование,ПометкаУдаления");
			Результат = Ложь
				Или Источник.Наименование <> сткРеквизитыСсылки.Наименование
				Или Источник.ПометкаУдаления <> сткРеквизитыСсылки.ПометкаУдаления;
		КонецЕсли;
		Возврат Результат;
	// >> 07.12.2023 Петухов А.В., Фактор, #3450
	КонецЕсли;
	
КонецФункции		

// << 05.03.2024 Петухов А.В., Фактор, #3876
Функция УсловиеВыгрузкиКлассификаторТНВЭДВыполняется(Источник) Экспорт 
	
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("СправочникОбъект.КлассификаторТНВЭД") Тогда 	
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("СправочникСсылка.КлассификаторТНВЭД") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "ЭтоГруппа");		
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат (Данные.ЭтоГруппа = Ложь); 
	
КонецФункции		
// >> 05.03.2024 Петухов А.В., Фактор, #3876

// --> Евлахов Игорь Николаевич (Начало) 07.10.2024
// Задача #4537
Функция УсловиеВыгрузкиТипыПоверхностейРасположенияТоваровВыполняется(Источник) Экспорт 
	
	// Проверок нет. 
	// Если потребуется, можно взять за основу УсловиеВыгрузкиФизическиеЛицаВыполняется
	
	Возврат Истина; 
	
КонецФункции

#КонецОбласти

#Область Документы   

Функция УсловиеВыгрузкиЗаказКлиентаВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ЗаказКлиента") Тогда 	
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ЗаказКлиента") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "ХозяйственнаяОперация,Статус");		
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат Данные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И Данные.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению; 
	
КонецФункции		

Функция УсловиеВыгрузкиЗаказНаПеремещениеВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ЗаказНаПеремещение") Тогда 	
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		// --> Евлахов Игорь Николаевич (Начало) 09.09.2024
		// Задача #4655
		// Начало было
		//Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Статус");
		// Конец было
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Статус, злРегламентнаяПодсортировка");
		// Задача #4655
		// <-- Евлахов Игорь Николаевич (Конец) 09.09.2024		
		Данные.Вставить("Товары", Источник.Товары);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	// --> Евлахов Игорь Николаевич (Начало) 09.09.2024
	// Задача #4655 
	УсловияВыгрузкиВыполнились = Ложь;
	
	Если  Данные.злРегламентнаяПодсортировка <> Неопределено 
		И Данные.злРегламентнаяПодсортировка Тогда
		Возврат(УсловияВыгрузкиВыполнились);		
	КонецЕсли;
	
	УсловияВыгрузкиВыполнились = Данные.Статус = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению 
							   И ВсеТоварыВВариантаОбеспеченияОтгрузить(Данные);
							   
	// Начало было						   
	//Возврат Данные.Статус = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению 
	//	И ВсеТоварыВВариантаОбеспеченияОтгрузить(Данные); 
	// Конец было
	Возврат(УсловияВыгрузкиВыполнились);
	// Задача #4655
	// <-- Евлахов Игорь Николаевич (Конец) 09.09.2024
	
КонецФункции		

Функция УсловиеВыгрузкиЗаявкаНаВозвратТоваровОтКлиентаВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Тогда 	
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Статус");	
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
						
	Возврат Данные.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату; 
	
КонецФункции		

Функция УсловиеВыгрузкиЗаданиеНаПеревозкуВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ЗаданиеНаПеревозку") Тогда 	
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Статус");		
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ЗначениеЗаполнено(Данные.Статус) 
		И Данные.Статус <> Перечисления.СтатусыЗаданийНаПеревозку.Формируется; 
	
КонецФункции		

Функция УсловиеВыгрузкиРеализацияТоваровУслугВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен, КР_РозничнаяПродажа");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен
	    // A2105505-1787
		И Не ЗначениеЗаполнено(Данные.КР_РозничнаяПродажа) 
		//
		; 
	
КонецФункции		

Функция УсловиеВыгрузкиВозвратТоваровОтКлиентаВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен,КР_РозничныйВозврат");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен
		И Не ЗначениеЗаполнено(Данные.КР_РозничныйВозврат); 
	
КонецФункции		

Функция УсловиеВыгрузкиКорректировкаРеализацииВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.КорректировкаРеализации") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен,ДокументОснование");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	// Для корректировки нужно проверить
	//	не только текущий объект 
	//	но и основание на тип и уловие регистрации
	
	Если Не ДокументПроведен Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ДокументОснованиеТипЗнч = ТипЗнч(Данные.ДокументОснование);
	Если ДокументОснованиеТипЗнч = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
		Возврат УсловиеВыгрузкиРеализацияТоваровУслугВыполняется(Данные.ДокументОснование);
	ИначеЕсли ДокументОснованиеТипЗнч = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда 
		Возврат УсловиеВыгрузкиВозвратТоваровОтКлиентаВыполняется(Данные.ДокументОснование);
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции		

Функция УсловиеВыгрузкиУстановкаМестРазмещенияВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.КР_УстановкаМестРазмещения") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.КР_УстановкаМестРазмещения") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен; 
		
КонецФункции		

Функция УсловиеВыгрузкиУстановкаМинимальнойПрезентацииВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.КР_УстановкаМинимальнойПрезентации") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.КР_УстановкаМинимальнойПрезентации") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен; 
		
КонецФункции		

Функция УсловиеВыгрузкиУстановкаПриоритетовРазмеровВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.КР_УстановкаПриоритетовРазмеров") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.КР_УстановкаПриоритетовРазмеров") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен; 
		
КонецФункции		

Функция УсловиеВыгрузкиИзменениеАссортиментаВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ИзменениеАссортимента") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ИзменениеАссортимента") Тогда 
		// --> Евлахов Игорь Николаевич (Начало) 11.09.2024
		// Задача #4674
		// Начало было
		//Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен,ОбъектПланирования");
		//ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
		// Конец было
		Если ЗначениеЗаполнено(Источник) Тогда
			// Только если проверка выполняется записанного документа
			Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен,Этап");
			ДокументПроведен = Данные.Проведен;
		Иначе
			// Если передали пустую ссылку, нового объекта (не записанного в базу)
			Возврат(Ложь);
		КонецЕсли;		
		// Задача #4674
		// <-- Евлахов Игорь Николаевич (Конец) 11.09.2024		
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	// --> Евлахов Игорь Николаевич (Начало) 11.09.2024
	// Задача #4674 
	// Начало было
	//// A2105505-2310 Удалено условие на тип объекта ОбъектПланирования
	//Возврат ДокументПроведен;
	// Конец было
	
	// 1. Контроль
	Если Не ДокументПроведен Тогда
		Возврат(Ложь);	
	КонецЕсли;

	// 2. Контроль
	Если ЗначениеЗаполнено(Данные.Этап) Тогда
		ЗапрещенныеЭтапы = КР_ДополнительныеНастройкиПовтИсп.МассивЗначений("ЗапретВыгрузкиИзмененийАссортимента", Ложь);
				
		РезультатПоиска = ЗапрещенныеЭтапы.Найти(Данные.Этап);
		
		Если РезультатПоиска <> Неопределено Тогда
			Возврат(Ложь);	
		КонецЕсли;		
	Иначе
		Возврат(Ложь); 
	КонецЕсли;
	
	Возврат(Истина);
	// Задача #4674
	// <-- Евлахов Игорь Николаевич (Конец) 11.09.2024
		
КонецФункции		

Функция УсловиеВыгрузкиУстановкаЦенНоменклатурыВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.УстановкаЦенНоменклатуры") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен; 
		
КонецФункции		

Функция УсловиеВыгрузкиПеремещениеТоваровВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда  
		// A2105505-2321
		Если Не ЗначениеЗаполнено(Источник) Тогда 	
			Возврат Ложь;
		КонецЕсли;
		//
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен,СкладОтправитель,СкладПолучатель");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	ВидыСкладовРазбораРасхождений = Новый Массив;
	ВидыСкладовРазбораРасхождений.Добавить(Перечисления.КР_ВидыСкладов.СкладРазбораРасхожденийЦентральный);
	ВидыСкладовРазбораРасхождений.Добавить(Перечисления.КР_ВидыСкладов.СкладРазбораРасхожденийМагазинов); 
	
	Магазины = КР_ДополнительныеНастройкиПовтИсп.МассивЗначений("Магазины", Ложь);
	
	Если ВидыСкладовРазбораРасхождений.Найти(Данные.СкладОтправитель.КР_ВидСклада) <> Неопределено
		И Магазины.Найти(Данные.СкладПолучатель) = Неопределено Тогда 
		Возврат Ложь;	
	КонецЕсли;
	
	Если ВидыСкладовРазбораРасхождений.Найти(Данные.СкладПолучатель.КР_ВидСклада) <> Неопределено
		И Магазины.Найти(Данные.СкладОтправитель) = Неопределено Тогда 
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат ДокументПроведен; 
		
КонецФункции		

Функция УсловиеВыгрузкиОтчетОРозничныхПродажахВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен; 
		
КонецФункции		

Функция УсловиеВыгрузкиУпаковочныйЛистВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.УпаковочныйЛист") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.УпаковочныйЛист") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен; 
		
КонецФункции		

Функция УсловиеВыгрузкиПриходныйКассовыйОрдерВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен,КР_ПоступлениеВКассуККМ");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен
		И Данные.КР_ПоступлениеВКассуККМ <> Истина // A2105505-2181
		; 
		
КонецФункции		

Функция УсловиеВыгрузкиРасходныйКассовыйОрдерВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен,КР_ВозвратИзКассыККМ");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен
		И Данные.КР_ВозвратИзКассыККМ <> Истина // A2105505-2181
		; 
		
КонецФункции		

Функция УсловиеВыгрузкиОтборРазмещениеТоваровВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	// << 19.04.2024 Петухов А.В., Фактор, #4024
	//Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
	//	Данные = Источник;
	//	ДокументПроведен = Данные.Проведен;
	//ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ОтборРазмещениеТоваров") Тогда 	
	//	Данные = Источник;
	//	ДополнительныеСвойства = Источник.ДополнительныеСвойства;
	//	ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
	//		И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	//ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда 
	//	Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
	//	ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	//Иначе            
	//	ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
	//	ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	//КонецЕсли;   
	//
	//Возврат ДокументПроведен; 
		
	Результат = Ложь;
	
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		Результат = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ОтборРазмещениеТоваров") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		Если Данные.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение Тогда
			// --> Евлахов Игорь Николаевич (Начало) 29.07.2024
			// Задача #4445
			// Начало было
			//Результат = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			//	И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
			//	И Источник.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.КР_ТоварРазмещен;
			// Конец было
			ЕстьПустыеЯчейки = Ложь;
			ВидСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Склад, "КР_ВидСклада");
						
			Если  ЗначениеЗаполнено(Данные.Склад) 
				И ВидСклада = ПредопределенноеЗначение("Перечисление.КР_ВидыСкладов.Магазин") Тогда
							
				ПараметрыОтбора = Новый Структура();
				ПараметрыОтбора.Вставить("Ячейка", ПредопределенноеЗначение("Справочник.СкладскиеЯчейки.ПустаяСсылка"));
							
				СтрокиТаблицы = Данные.ТоварыРазмещение.НайтиСтроки(ПараметрыОтбора);
				
				// Проверка наличия строк с незаполненными ячейками 
				// таблица ТоварыРазмещение
				Если СтрокиТаблицы.Количество() > 0 Тогда
					ЕстьПустыеЯчейки = Истина;					
				КонецЕсли;	
			КонецЕсли;
			
			Результат = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
					И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
					И Источник.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.КР_ТоварРазмещен
					И Не ЕстьПустыеЯчейки;
			// Задача #4445
			// <-- Евлахов Игорь Николаевич (Конец) 29.07.2024
		Иначе
			Результат = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
				И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен,Статус,ВидОперации");		
		Если Данные.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение Тогда
			// --> Евлахов Игорь Николаевич (Начало) 29.07.2024
			// Задача #4445
			// Начало было
			//Результат = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен)
			//	И Данные.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.КР_ТоварРазмещен;
			// Конец было 
			ЕстьПустыеЯчейки = Ложь;
			ВидСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Склад, "КР_ВидСклада");
									
			Если  ЗначениеЗаполнено(Источник.Склад) 
				И ВидСклада = ПредопределенноеЗначение("Перечисление.КР_ВидыСкладов.Магазин") Тогда
											
				ПараметрыОтбора = Новый Структура();
				ПараметрыОтбора.Вставить("Ячейка", ПредопределенноеЗначение("Справочник.СкладскиеЯчейки.ПустаяСсылка"));
							
				СтрокиТаблицы = Источник.ТоварыРазмещение.НайтиСтроки(ПараметрыОтбора);
				
				// Проверка наличия строк с незаполненными ячейками 
				// таблица ТоварыРазмещение
				Если СтрокиТаблицы.Количество() > 0 Тогда
					ЕстьПустыеЯчейки = Истина;					
				КонецЕсли;			
			КонецЕсли;
			
			Результат = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен)
					И Данные.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.КР_ТоварРазмещен
					И Не ЕстьПустыеЯчейки;
			// Задача #4445
			// <-- Евлахов Игорь Николаевич (Конец) 29.07.2024
		Иначе
			Результат = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
		КонецЕсли;
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат Результат; 
	// >> 19.04.2024 Петухов А.В., Фактор, #4024
КонецФункции		

Функция УсловиеВыгрузкиТранспортнаяНакладнаяВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ТранспортнаяНакладная") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда
		// << 05.08.2024 Петухов А.В., Фактор, #4478
		//Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен,Дата,КР_Отправитель");
		// >> 05.08.2024 Петухов А.В., Фактор, #4478
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	// << 05.08.2024 Петухов А.В., Фактор, #4478
	//Возврат ДокументПроведен;
	Результат = Ложь;
	Если Истина
		И ДокументПроведен
		И ЗначениеЗаполнено(Данные.КР_Отправитель)
		И ТипЗнч(Данные.КР_Отправитель) = Тип("СправочникСсылка.Склады")
	Тогда
		Результат = ЭтоСкладУТ11(Данные.КР_Отправитель, Данные.Дата);
	КонецЕсли;
	
	Возврат Результат;
	// >> 05.08.2024 Петухов А.В., Фактор, #4478

КонецФункции		

Функция УсловиеВыгрузкиПоступлениеТоваровОтХранителяВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ПоступлениеТоваровОтХранителя") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ПоступлениеТоваровОтХранителя") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен; 

КонецФункции		

Функция УсловиеВыгрузкиПересчетТоваровВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ПересчетТоваров") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ПересчетТоваров") Тогда 
		// --> Евлахов Игорь Николаевич (Начало) 26.09.2024
		// Задача #4584
		// Начало было
		//Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
		//ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
		// Конец было
		Если ЗначениеЗаполнено(Источник) Тогда
			// Только если проверка выполняется записанного документа
			Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен, Статус");
			ДокументПроведен = Данные.Проведен;
		Иначе
			// Если передали пустую ссылку, нового объекта (не записанного в базу)
			Возврат(Ложь);
		КонецЕсли;
		// Задача #4584
		// <-- Евлахов Игорь Николаевич (Конец) 26.09.2024
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	// --> Евлахов Игорь Николаевич (Начало) 26.09.2024
	// Задача #4584
	// Начало было
	//Возврат ДокументПроведен;
	// Конец было
	
	// 1. Контроль
	Если Не ДокументПроведен Тогда
		Возврат(Ложь);	
	КонецЕсли;

	// 2. Контроль
	Если Не ЗначениеЗаполнено(Данные.Статус)
		ИЛИ Данные.Статус = Перечисления.СтатусыПересчетовТоваров.Подготовлено
		ИЛИ Данные.Статус = Перечисления.СтатусыПересчетовТоваров.ВРаботе
		ИЛИ Данные.Статус = Перечисления.СтатусыПересчетовТоваров.ВнесениеРезультатов Тогда		
		Возврат(Ложь);		
	КонецЕсли;
	
	Возврат(Истина);
	// Задача #4584
	// <-- Евлахов Игорь Николаевич (Конец) 26.09.2024  

КонецФункции		

Функция УсловиеВыгрузкиОприходованиеИзлишковТоваровВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ОприходованиеИзлишковТоваров") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен; 

КонецФункции		

Функция УсловиеВыгрузкиСписаниеНедостачТоваровВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.СписаниеНедостачТоваров") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен; 

КонецФункции		

Функция УсловиеВыгрузкиПересортицаТоваровВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ПересортицаТоваров") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ПересортицаТоваров") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен; 

КонецФункции		

Функция УсловиеВыгрузкиВнутреннееПотреблениеТоваровВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен; 

КонецФункции		

Функция УсловиеВыгрузкиЗаказНаВнутреннееПотреблениеВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ЗаказНаВнутреннееПотребление") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен; 

КонецФункции		

// << 29.05.2024 Петухов А.В., Фактор, #4123
Функция УсловиеВыгрузкиОтчетОСписанииТоваровУХранителяВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ОтчетОСписанииТоваровУХранителя") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ОтчетОСписанииТоваровУХранителя") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен; 

КонецФункции		

Функция УсловиеВыгрузкиОприходованиеИзлишковТоваровУХранителяВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ОприходованиеИзлишковТоваровУХранителя") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ОприходованиеИзлишковТоваровУХранителя") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен; 

КонецФункции		
// >> 29.05.2024 Петухов А.В., Фактор, #4123

// << 29.05.2024 Петухов А.В., Фактор, #4155
Функция УсловиеВыгрузкиПриобретениеТоваровУслугВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
		ПартнерЕКом = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Партнер, "злЭлектроннаяКоммерция");
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
		ПартнерЕКом = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Партнер, "злЭлектроннаяКоммерция");
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен, Партнер");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
		ПартнерЕКом = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Партнер, "злЭлектроннаяКоммерция");
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен И ПартнерЕКом; 

КонецФункции		
// >> 29.05.2024 Петухов А.В., Фактор, #4155

// << 31.05.2024 Петухов А.В., Фактор, #4162
Функция УсловиеВыгрузкиПриобретениеУслугПрочихАктивовВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
		ДокументПроведен = Данные.Проведен;
		ПартнерЕКом = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Партнер, "злЭлектроннаяКоммерция");
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.ПриобретениеУслугПрочихАктивов") Тогда 	
		Данные = Источник;
		ДополнительныеСвойства = Источник.ДополнительныеСвойства;
		ДокументПроведен = Источник.ДополнительныеСвойства.Свойство("РежимЗаписи")
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;		
		ПартнерЕКом = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Партнер, "злЭлектроннаяКоммерция");
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Проведен, Партнер");		
		ДокументПроведен = ?(Данные.Проведен = Неопределено, Ложь, Данные.Проведен);
		ПартнерЕКом = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Партнер, "злЭлектроннаяКоммерция");
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Возврат ДокументПроведен И ПартнерЕКом; 

КонецФункции		
// >> 31.05.2024 Петухов А.В., Фактор, #4162

// << 23.08.2024 Петухов А.В., Фактор, #4476
Функция УсловиеВыгрузкиАктОРасхожденияхПослеПеремещенияВыполняется(Источник) Экспорт 

	Результат = Ложь;
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.АктОРасхожденияхПослеПеремещения") Тогда 	
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "СкладОтправитель, СкладПолучатель, Статус");		
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Если Данные.Статус = Перечисления.СтатусыАктаОРасхождениях.Отработано Тогда
		СкладыЕКом = КР_ДополнительныеНастройкиПовтИсп.ПолучитьЗначениеДополнительнойНастройки(Справочники.КР_ДополнительныеНастройкиСистемы.СкладыECom).Значение;
		Если ЗначениеЗаполнено(Данные.СкладОтправитель) И Данные.СкладОтправитель.ПринадлежитЭлементу(СкладыЕКом) Тогда
			Результат = Истина;
		ИначеЕсли ЗначениеЗаполнено(Данные.СкладПолучатель) И Данные.СкладПолучатель.ПринадлежитЭлементу(СкладыЕКом) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат; 

КонецФункции		

Функция УсловиеВыгрузкиАктОРасхожденияхПослеОтгрузкиВыполняется(Источник) Экспорт 

	Результат = Ложь;
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДанныеФормыСтруктура") Тогда 
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("ДокументОбъект.АктОРасхожденияхПослеОтгрузки") Тогда 	
		Данные = Источник;
	ИначеЕсли ИсточникТип = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда 
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Статус,ХозяйственнаяОперация,Контрагент");		
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	Если Истина
		И Данные.Статус = Перечисления.СтатусыАктаОРасхождениях.Отработано
		И Данные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И ЗначениеЗаполнено(Данные.Контрагент)
	Тогда
		КонтрагентOzon = КР_ДополнительныеНастройкиПовтИсп.ПолучитьЗначениеДополнительнойНастройки(Справочники.КР_ДополнительныеНастройкиСистемы.Ozon).Значение;
		КонтрагентWB = КР_ДополнительныеНастройкиПовтИсп.ПолучитьЗначениеДополнительнойНастройки(Справочники.КР_ДополнительныеНастройкиСистемы.WB).Значение;
		КонтрагентLamoda = КР_ДополнительныеНастройкиПовтИсп.ПолучитьЗначениеДополнительнойНастройки(Справочники.КР_ДополнительныеНастройкиСистемы.Lamoda).Значение;
		Если Ложь
			Или Данные.Контрагент = КонтрагентOzon
			Или Данные.Контрагент = КонтрагентWB
			Или Данные.Контрагент = КонтрагентLamoda
		Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат; 

КонецФункции		
// >> 23.08.2024 Петухов А.В., Фактор, #4476

#КонецОбласти

#Область РегистрыСведений

Функция УсловиеВыгрузкиДокументыФизическихЛицВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);   
	// Для регистров реализововано только обращение к объекту набора записей
	// Если потребуется расширить на форму (ДанныеФормыСтруктура)   
	//	нужно реализовывать примерно как в УсловиеВыгрузкиФизическиеЛицаВыполняется
	Если ИсточникТип = Тип("РегистрСведенийНаборЗаписей.ДокументыФизическихЛиц") Тогда 	
		Данные = Источник;
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	ОтборФизлицо = Данные.Отбор.Физлицо.Значение; 
	
	Возврат ТипЗнч(ОтборФизлицо) = Тип("СправочникСсылка.ФизическиеЛица")
		И ОтборФизлицо.КР_ЭтоВодитель = Истина; 
	
КонецФункции		

Функция УсловиеВыгрузкиКР_СведенияНоменклатурыПланированиеВыполняется(Источник) Экспорт 
	
	// Нет условия регистрации.
	// Если потребуется, см. пример УсловиеВыгрузкиДокументыФизическихЛицВыполняется
	Возврат Истина; 
	
КонецФункции		

Функция УсловиеВыгрузкиКР_СведенияНоменклатурыТоварнаяАналитикаВыполняется(Источник) Экспорт 
	
	// Нет условия регистрации.
	// Если потребуется, см. пример УсловиеВыгрузкиДокументыФизическихЛицВыполняется
	Возврат Истина; 
	
КонецФункции		

Функция УсловиеВыгрузкиДополнительныеСведенияВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);   
	// Для регистров реализововано только обращение к объекту набора записей
	// Если потребуется расширить на форму (ДанныеФормыСтруктура)   
	//	нужно реализовывать примерно как в УсловиеВыгрузкиФизическиеЛицаВыполняется
	Если ИсточникТип = Тип("РегистрСведенийНаборЗаписей.ДополнительныеСведения") Тогда 	
		Данные = Источник;
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	ОтборОбъект = Данные.Отбор.Объект.Значение; 
	ОтборСвойство = Данные.Отбор.Свойство.Значение; 
	
	Возврат ТипЗнч(ОтборОбъект) = Тип("СправочникСсылка.Номенклатура")
		И ОтборСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.КР_ЛиквидностьНоменклатуры; 
	
КонецФункции		

Функция УсловиеВыгрузкиКР_ИсторияИзмененийСезонаНоменклатурыВыполняется(Источник) Экспорт 
	
	// Нет условия регистрации.
	// Если потребуется, см. пример УсловиеВыгрузкиДокументыФизическихЛицВыполняется
	Возврат Истина; 
	
КонецФункции		

Функция УсловиеВыгрузкиКР_ОшибкиПоискаДанныхИнтеграцииВыполняется(Источник) Экспорт 
	
	ИсточникТип = ТипЗнч(Источник);   
	// Для регистров реализововано только обращение к объекту набора записей
	// Если потребуется расширить на форму (ДанныеФормыСтруктура)   
	//	нужно реализовывать примерно как в УсловиеВыгрузкиФизическиеЛицаВыполняется
	Если ИсточникТип = Тип("РегистрСведенийНаборЗаписей.КР_ОшибкиПоискаДанныхИнтеграции") Тогда 	
		Данные = Источник;
	Иначе            
		ТекстСообщения = НСтр("ru = 'Не определена логика для типа источника ""%1""'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, ИсточникТип);
	КонецЕсли;   
	
	// Нас интересуют только данные где реквизит ИсходныеДанные заполнен
	// На момент реализации в наборе может быть только одна запись
	// Если запись не одна то ничего не делаем
	
	Возврат Источник.Количество() = 1
		И ЗначениеЗаполнено(Источник[0].ИсходныеДанные); 
	
КонецФункции		

// --> Евлахов Игорь Николаевич (Начало) 28.12.2023
// Задача #3516
Функция УсловиеВыгрузкиПланыПродажПоМагазинамВыполняется(Источник) Экспорт 
	
	// Нет условия регистрации.
	// Если потребуется, см. пример УсловиеВыгрузкиДокументыФизическихЛицВыполняется
	Возврат Истина; 
	
КонецФункции
// <-- Евлахов Игорь Николаевич (Конец) 28.12.2023

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиОбъектов

Функция НастройкиВыгрузки(ПараметрыВыгрузки, ОбъектМетаданные)
	
	ИмяОбъектаМетаданных = ОбъектМетаданные.Имя;
	
	ПолноеИмяОбъектаМетаданных = ОбъектМетаданные.ПолноеИмя();

	ШаблонПравилоРегистрации = "КР_УТ10_УТ11_ВыгрузкаДанныхСервер.ПРО_%1";
	ШаблонПравилоВыгрузки = "КР_УТ10_УТ11_ВыгрузкаДанныхСервер.ПВО_%1";
	
	СтрокаВыгрузки = ПараметрыВыгрузки.Добавить();
	СтрокаВыгрузки.ИмяМД = ПолноеИмяОбъектаМетаданных;
	СтрокаВыгрузки.ТочкаОбмена = ТочкаОбмена();
	СтрокаВыгрузки.МассивСообщений = Новый Массив;
	СтрокаВыгрузки.ДополнительныеПараметры = Новый Структура;
	СтрокаВыгрузки.ПравилоРегистрации = СтрШаблон(ШаблонПравилоРегистрации, ИмяОбъектаМетаданных);
	СтрокаВыгрузки.ПравилоВыгрузки = СтрШаблон(ШаблонПравилоВыгрузки, ИмяОбъектаМетаданных);
	
	Возврат СтрокаВыгрузки;
	
КонецФункции

#КонецОбласти

#Область ПравилаРегистрацииОбъектов

Процедура ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, ЭтоУдаление)
	
	// --> Евлахов Игорь Николаевич (Начало) 22.12.2023
	// Задача #3531
	Если НЕ КР_ОбменRabbitОбщиеМеханизмыПовтИсп.РегистрироватьДанныеТипа(ТипДанных, "CR_UT10_UT11") Тогда
		Возврат;
	КонецЕсли;
	// <-- Евлахов Игорь Николаевич (Конец) 22.12.2023
	
	СтруктураСообщения = КР_ОбменRabbitОбработкаСообщенийОбмена.ПолучитьСтруктуруСообщения();
	СтруктураСообщения.ТипДанных = ТипДанных;
	СтруктураСообщения.ЭтоУдаление = ЭтоУдаление;
	
	СтруктураСообщения.Маршрутизация = ТипДанных;
	
	ТекстШаблон = НСтр("ru='Инициировано сообщение для обмена %1'");
	ТекстСообщения = СтрШаблон(ТекстШаблон, ПараметрВыгрузки.ТочкаОбмена);
	КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СтруктураСообщения, ТекстСообщения);
	
	ПараметрВыгрузки.МассивСообщений.Добавить(СтруктураСообщения);
	
КонецПроцедуры

#Область Справочники

Процедура ПРО_ФизическиеЛица(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "IndividualObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиФизическиеЛицаВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиФизическиеЛицаВыполняется(Источник.Ссылка) Тогда 
		
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ЗоныДоставки(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "DeliveryZoneObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиЗоныДоставкиВыполняется(Источник);

	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиЗоныДоставкиВыполняется(Источник.Ссылка) Тогда 
		
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ТранспортныеСредства(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "VehicleObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиТранспортныеСредстваВыполняется(Источник);

	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиТранспортныеСредстваВыполняется(Источник.Ссылка) Тогда 
		
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_КР_Маршруты(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "RouteObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиМаршрутыВыполняется(Источник);

	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиМаршрутыВыполняется(Источник.Ссылка) Тогда 
		
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

// << 03.11.2023 Петухов А.В., Фактор, #3226
Процедура ПРО_ЗаказНаВнутреннееПотреблениеПрисоединенныеФайлы(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	// << 11.10.2024 Петухов А.В., Фактор, #4765
	// Выгружаем
	//// << 28.03.2024 Петухов А.В., Фактор, #3970
	////Пока не выгружаем
	//Возврат;
	//// >> 28.03.2024 Петухов А.В., Фактор, #3970
	// >> 11.10.2024 Петухов А.В., Фактор, #4765
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "AttachedFile";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиПрисоединенныеФайлыВыполняется(Источник);

	Если УсловиеРегистацииСоблюдено Тогда 
		
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_КР_ПересчетТоваровПрисоединенныеФайлы(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "AttachedFile";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиПрисоединенныеФайлыВыполняется(Источник);

	Если УсловиеРегистацииСоблюдено Тогда 
		
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_КР_ПриходныйКассовыйОрдерПрисоединенныеФайлы(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	// << 28.03.2024 Петухов А.В., Фактор, #3970
	//Пока не выгружаем
	Возврат;
	// >> 28.03.2024 Петухов А.В., Фактор, #3970
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "AttachedFile";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиПрисоединенныеФайлыВыполняется(Источник);

	Если УсловиеРегистацииСоблюдено Тогда 
		
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_КР_РасходныйКассовыйОрдерПрисоединенныеФайлы(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	// << 28.03.2024 Петухов А.В., Фактор, #3970
	//Пока не выгружаем
	Возврат;
	// >> 28.03.2024 Петухов А.В., Фактор, #3970
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "AttachedFile";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиПрисоединенныеФайлыВыполняется(Источник);

	Если УсловиеРегистацииСоблюдено Тогда 
		
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

// << 07.12.2023 Петухов А.В., Фактор, #3450
Процедура ПРО_НоменклатураПрисоединенныеФайлы(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "AttachedFile";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиПрисоединенныеФайлыВыполняется(Источник);

	Если УсловиеРегистацииСоблюдено Тогда 
		
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры
// >> 07.12.2023 Петухов А.В., Фактор, #3450

// << 05.03.2024 Петухов А.В., Фактор, #3876
Процедура ПРО_КлассификаторТНВЭД(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "ClassifierTNVEDObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиКлассификаторТНВЭДВыполняется(Источник);

	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиКлассификаторТНВЭДВыполняется(Источник.Ссылка) Тогда 
		
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры
// >> 05.03.2024 Петухов А.В., Фактор, #3876

// --> Евлахов Игорь Николаевич (Начало) 07.10.2024
// Задача #4537
Процедура ПРО_злТипыПоверхностейРасположенияТоваров(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "TypeSurfaceObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиТипыПоверхностейРасположенияТоваровВыполняется(Источник);

	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиТипыПоверхностейРасположенияТоваровВыполняется(Источник.Ссылка) Тогда 
		
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область Документы

Процедура ПРО_ЗаказКлиента(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен())
		Или ОбъектОбрабатывалсяИнтеграцией(Источник) //A2105505-1620 
		Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "ClientsOrderObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиЗаказКлиентаВыполняется(Источник); 
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиЗаказКлиентаВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ЗаказНаПеремещение(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен())
		Или ОбъектОбрабатывалсяИнтеграцией(Источник) //A2105505-1620 
		Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "GoodsRelocationOrderObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиЗаказНаПеремещениеВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиЗаказНаПеремещениеВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ЗаявкаНаВозвратТоваровОтКлиента(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "ReturnFromMarketplaceRequestObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиЗаявкаНаВозвратТоваровОтКлиентаВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиЗаявкаНаВозвратТоваровОтКлиентаВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ЗаданиеНаПеревозку(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "ShipmentOrderObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиЗаданиеНаПеревозкуВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиЗаданиеНаПеревозкуВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_РеализацияТоваровУслуг(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "RealizationObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиРеализацияТоваровУслугВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиРеализацияТоваровУслугВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ВозвратТоваровОтКлиента(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "ReturnGoodsFromCustomerObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиВозвратТоваровОтКлиентаВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиВозвратТоваровОтКлиентаВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_КорректировкаРеализации(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "RealizationAdjustmentObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиКорректировкаРеализацииВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиКорректировкаРеализацииВыполняется(Источник.Ссылка) Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_КР_УстановкаМестРазмещения(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "InstallationPlacementsObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиУстановкаМестРазмещенияВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиУстановкаМестРазмещенияВыполняется(Источник.Ссылка) Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_КР_УстановкаМинимальнойПрезентации(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "SettingMinimalPresentationObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиУстановкаМинимальнойПрезентацииВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиУстановкаМинимальнойПрезентацииВыполняется(Источник.Ссылка) Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_КР_УстановкаПриоритетовРазмеров(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "SettingSizePrioritiesObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиУстановкаПриоритетовРазмеровВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиУстановкаПриоритетовРазмеровВыполняется(Источник.Ссылка) Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ИзменениеАссортимента(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "ChangeAssortmentObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиИзменениеАссортиментаВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиИзменениеАссортиментаВыполняется(Источник.Ссылка) Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_УстановкаЦенНоменклатуры(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "SettingItemPricesObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиУстановкаЦенНоменклатурыВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиУстановкаЦенНоменклатурыВыполняется(Источник.Ссылка) Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ПеремещениеТоваров(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "GoodsRelocationObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиПеремещениеТоваровВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиПеремещениеТоваровВыполняется(Источник.Ссылка) Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ОтчетОРозничныхПродажах(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "RetailSalesReportObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиОтчетОРозничныхПродажахВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиОтчетОРозничныхПродажахВыполняется(Источник.Ссылка) Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_УпаковочныйЛист(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "BoxObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиУпаковочныйЛистВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиУпаковочныйЛистВыполняется(Источник.Ссылка) Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ПриходныйКассовыйОрдер(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "CashReceiptVoucherObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиПриходныйКассовыйОрдерВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиПриходныйКассовыйОрдерВыполняется(Источник.Ссылка) Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_РасходныйКассовыйОрдер(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "CashPaymentVoucherObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиРасходныйКассовыйОрдерВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиРасходныйКассовыйОрдерВыполняется(Источник.Ссылка) Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ОтборРазмещениеТоваров(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	// --> Евлахов Игорь Николаевич (Начало) 20.11.2023
	// Задача #3355
	// *//--> Евлахов Игорь Николаевич (Начало было)
	//ТипДанных = "GoodsPlacingObject";
	// *//<-- Евлахов Игорь Николаевич (Конец было)
	
	Если 	Источник.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение 
		ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение Тогда
		ТипДанных = "ListDocuments";
	Иначе
		ТипДанных = "GoodsPlacingObject";	
	КонецЕсли;
	// <-- Евлахов Игорь Николаевич (Конец) 20.11.2023
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиОтборРазмещениеТоваровВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиОтборРазмещениеТоваровВыполняется(Источник.Ссылка) Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ПРО_ТранспортнаяНакладная(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "WaybillObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиТранспортнаяНакладнаяВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиТранспортнаяНакладнаяВыполняется(Источник.Ссылка) Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ПоступлениеТоваровОтХранителя(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "ReturnFromMarketplaceObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиПоступлениеТоваровОтХранителяВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиПоступлениеТоваровОтХранителяВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ПересчетТоваров(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "InventoryCountSheetObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиПересчетТоваровВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиПересчетТоваровВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ОприходованиеИзлишковТоваров(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "InventorySurplusReсognitionObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиОприходованиеИзлишковТоваровВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиОприходованиеИзлишковТоваровВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_СписаниеНедостачТоваров(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "InventoryShortageWriteOffObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиСписаниеНедостачТоваровВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиСписаниеНедостачТоваровВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ПересортицаТоваров(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "GoodsRegradingObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиПересортицаТоваровВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиПересортицаТоваровВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ВнутреннееПотреблениеТоваров(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "InventoryShortageWriteOffObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиВнутреннееПотреблениеТоваровВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиВнутреннееПотреблениеТоваровВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ЗаказНаВнутреннееПотребление(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "InventoryWriteOffRequestObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиЗаказНаВнутреннееПотреблениеВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиЗаказНаВнутреннееПотреблениеВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

// << 29.05.2024 Петухов А.В., Фактор, #4123
Процедура ПРО_ОтчетОСписанииТоваровУХранителя(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "InventoryShortageWriteOffObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиОтчетОСписанииТоваровУХранителяВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиОтчетОСписанииТоваровУХранителяВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ОприходованиеИзлишковТоваровУХранителя(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "InventorySurplusReсognitionObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиОприходованиеИзлишковТоваровУХранителяВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиОприходованиеИзлишковТоваровУХранителяВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры
// >> 29.05.2024 Петухов А.В., Фактор, #4123

// << 29.05.2024 Петухов А.В., Фактор, #4155
Процедура ПРО_ПриобретениеТоваровУслуг(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "ReceiptGoodsServicesObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиПриобретениеТоваровУслугВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиПриобретениеТоваровУслугВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры
// >> 29.05.2024 Петухов А.В., Фактор, #4155

// << 31.05.2024 Петухов А.В., Фактор, #4162
Процедура ПРО_ПриобретениеУслугПрочихАктивов(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "ReceiptGoodsServicesObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиПриобретениеУслугПрочихАктивовВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиПриобретениеУслугПрочихАктивовВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры
// >> 31.05.2024 Петухов А.В., Фактор, #4162

// << 23.08.2024 Петухов А.В., Фактор, #4476
Процедура ПРО_АктОРасхожденияхПослеПеремещения(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "DiscrepancyActObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиАктОРасхожденияхПослеПеремещенияВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиАктОРасхожденияхПослеПеремещенияВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_АктОРасхожденияхПослеОтгрузки(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "DiscrepancyActObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиАктОРасхожденияхПослеОтгрузкиВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено
		Или УсловиеВыгрузкиАктОРасхожденияхПослеОтгрузкиВыполняется(Источник.Ссылка) Тогда 

		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры
// >> 23.08.2024 Петухов А.В., Фактор, #4476

#КонецОбласти

#Область РегистрыСведений

Процедура ПРО_ДокументыФизическихЛиц(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "IdentityPapersInfoRegObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиДокументыФизическихЛицВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_КР_СведенияНоменклатурыПланирование(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "NomenclatureInfoPlanningObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиКР_СведенияНоменклатурыПланированиеВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_КР_СведенияНоменклатурыТоварнаяАналитика(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "NomenclatureInfoAnalyticsObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиКР_СведенияНоменклатурыТоварнаяАналитикаВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_ДополнительныеСведения(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "LiquidityObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиДополнительныеСведенияВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_КР_ИсторияИзмененийСезонаНоменклатуры(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "ActualSeasonObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиКР_ИсторияИзмененийСезонаНоменклатурыВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПРО_КР_ОшибкиПоискаДанныхИнтеграции(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "DataRequestObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиКР_ОшибкиПоискаДанныхИнтеграцииВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры

// --> Евлахов Игорь Николаевич (Начало) 28.12.2023
// Задача #3516
Процедура ПРО_злПланыПродажПоМагазинам(Источник, Отказ, ПараметрВыгрузки) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство(
		КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТипДанных = "SalesPlansInfoRegObject";
	
	УсловиеРегистацииСоблюдено = УсловиеВыгрузкиПланыПродажПоМагазинамВыполняется(Источник);
	
	Если УсловиеРегистацииСоблюдено Тогда 
	
		ДобавитьПравилоРегистрации(Источник, Отказ, ПараметрВыгрузки, ТипДанных, Не УсловиеРегистацииСоблюдено); 
		
	КонецЕсли;	
	
КонецПроцедуры
// <-- Евлахов Игорь Николаевич (Конец) 28.12.2023

#КонецОбласти

#КонецОбласти

#Область ПравилаВыгрузкиОбъектов

#Область Справочники

Процедура ПВО_ФизическиеЛица(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ФизическиеЛица(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ЗоныДоставки(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ЗоныДоставки(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ТранспортныеСредства(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ТранспортныеСредства(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_КР_Маршруты(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_Маршруты(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
				
	КонецЦикла;
	
КонецПроцедуры

// << 03.11.2023 Петухов А.В., Фактор, #3226
Процедура ПВО_ЗаказНаВнутреннееПотреблениеПрисоединенныеФайлы(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ПрисоединенныеФайлы(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_КР_ПересчетТоваровПрисоединенныеФайлы(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ПрисоединенныеФайлы(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_КР_ПриходныйКассовыйОрдерПрисоединенныеФайлы(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ПрисоединенныеФайлы(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_КР_РасходныйКассовыйОрдерПрисоединенныеФайлы(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ПрисоединенныеФайлы(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
				
	КонецЦикла;
	
КонецПроцедуры

// << 07.12.2023 Петухов А.В., Фактор, #3450
Процедура ПВО_НоменклатураПрисоединенныеФайлы(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ПрисоединенныеФайлы(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
				
	КонецЦикла;
	
КонецПроцедуры
// >> 07.12.2023 Петухов А.В., Фактор, #3450

// << 05.03.2024 Петухов А.В., Фактор, #3876
Процедура ПВО_КлассификаторТНВЭД(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_КлассификаторТНВЭД(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
				
	КонецЦикла;
	
КонецПроцедуры
// >> 05.03.2024 Петухов А.В., Фактор, #3876

// --> Евлахов Игорь Николаевич (Начало) 07.10.2024
// Задача #4537
Процедура ПВО_злТипыПоверхностейРасположенияТоваров(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ТипыПоверхностейРасположенияТоваров(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
				
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Документы

Процедура ПВО_ЗаказКлиента(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ЗаказКлиента(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ЗаказНаПеремещение(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ЗаказНаПеремещение(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ЗаявкаНаВозвратТоваровОтКлиента(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ЗаявкаНаВозвратТоваровОтКлиента(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ЗаданиеНаПеревозку(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ЗаданиеНаПеревозку(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_РеализацияТоваровУслуг(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_РеализацияТоваровУслуг(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ВозвратТоваровОтКлиента(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ВозвратТоваровОтКлиента(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_КорректировкаРеализации(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_КорректировкаРеализации(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_КР_УстановкаМестРазмещения(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_УстановкаМестРазмещения(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_КР_УстановкаМинимальнойПрезентации(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_УстановкаМинимальнойПрезентации(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_КР_УстановкаПриоритетовРазмеров(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_УстановкаПриоритетовРазмеров(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ИзменениеАссортимента(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ИзменениеАссортимента(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_УстановкаЦенНоменклатуры(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_УстановкаЦенНоменклатуры(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ПеремещениеТоваров(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ПеремещениеТоваров(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ОтчетОРозничныхПродажах(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ОтчетОРозничныхПродажах(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_УпаковочныйЛист(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_УпаковочныйЛист(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ПриходныйКассовыйОрдер(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ПриходныйКассовыйОрдер(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_РасходныйКассовыйОрдер(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_РасходныйКассовыйОрдер(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ОтборРазмещениеТоваров(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ОтборРазмещениеТоваров(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ТранспортнаяНакладная(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ТранспортнаяНакладная(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ПоступлениеТоваровОтХранителя(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ПоступлениеТоваровОтХранителя(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ПересчетТоваров(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ПересчетТоваров(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ОприходованиеИзлишковТоваров(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ОприходованиеИзлишковТоваров(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_СписаниеНедостачТоваров(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_СписаниеНедостачТоваров(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ПересортицаТоваров(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ПересортицаТоваров(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ВнутреннееПотреблениеТоваров(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ВнутреннееПотреблениеТоваров(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ЗаказНаВнутреннееПотребление(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ЗаказНаВнутреннееПотребление(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

// << 29.05.2024 Петухов А.В., Фактор, #4123
Процедура ПВО_ОтчетОСписанииТоваровУХранителя(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ОтчетОСписанииТоваровУХранителя(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ОприходованиеИзлишковТоваровУХранителя(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ОприходованиеИзлишковТоваровУХранителя(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры
// >> 29.05.2024 Петухов А.В., Фактор, #4123

// << 29.05.2024 Петухов А.В., Фактор, #4155
Процедура ПВО_ПриобретениеТоваровУслуг(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ПриобретениеТоваровУслуг(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры
// >> 29.05.2024 Петухов А.В., Фактор, #4155

// << 31.05.2024 Петухов А.В., Фактор, #4162
Процедура ПВО_ПриобретениеУслугПрочихАктивов(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ПриобретениеУслугПрочихАктивов(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры
// >> 31.05.2024 Петухов А.В., Фактор, #4162

// << 23.08.2024 Петухов А.В., Фактор, #4476
Процедура ПВО_АктОРасхожденияхПослеПеремещения(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_АктОРасхожденияхПослеПеремещения(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_АктОРасхожденияхПослеОтгрузки(Источник, Отказ, СтруктураВыгрузки) Экспорт
	
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_АктОРасхожденияхПослеОтгрузки(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры
// >> 23.08.2024 Петухов А.В., Фактор, #4476

#КонецОбласти

#Область РегистрыСведений

Процедура ПВО_ДокументыФизическихЛиц(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ДокументыФизическихЛиц(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_КР_СведенияНоменклатурыПланирование(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_КР_СведенияНоменклатурыПланирование(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_КР_СведенияНоменклатурыТоварнаяАналитика(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_КР_СведенияНоменклатурыТоварнаяАналитика(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_ДополнительныеСведения(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_ДополнительныеСведения(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_КР_ИсторияИзмененийСезонаНоменклатуры(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_КР_ИсторияИзмененийСезонаНоменклатуры(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПВО_КР_ОшибкиПоискаДанныхИнтеграции(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_КР_ОшибкиПоискаДанныхИнтеграции(Источник[0], XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры

// --> Евлахов Игорь Николаевич (Начало) 28.12.2023
// Задача #3516
Процедура ПВО_злПланыПродажПоМагазинам(Источник, Отказ, СтруктураВыгрузки) Экспорт
	                 
	Для Каждого СообщениеОбмена Из СтруктураВыгрузки.МассивСообщений Цикл
		
		XDTOОбъект = Неопределено;
		ПКО_злПланыПродажПоМагазинам(Источник, XDTOОбъект, СообщениеОбмена);		
		СообщениеОбмена.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
		
		ТекстСообщения = НСтр("ru='Сформировано тело сообщения интеграции'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);

	КонецЦикла;
	
КонецПроцедуры
// <-- Евлахов Игорь Николаевич (Конец) 28.12.2023

#КонецОбласти

#КонецОбласти

#Область ПравилаКонвертацииОбъектов

Функция ПолучитьОбъектXDTO(ИмяОбъекта)
	
	URIПространстваИмен = "http://www.zollaintegration.croc.ut11_ut10.org";
	ТипОбъектаXDTO = ФабрикаXDTO.Тип(URIПространстваИмен, ИмяОбъекта);	
	ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъектаXDTO);	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ПКО_СсылкаВXDTO(
	Ссылка, XDTOЗначение, СообщениеОбмена, ДополнительныеПараметры = Неопределено) Экспорт 
	
	// Если пустое значение то метод не выполнил своего "предназначения"
	Если Не ЗначениеЗаполнено(Ссылка) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	// Опрелеляем тип ссылки
	СсылкаТип = ТипЗнч(Ссылка);
	
	// A2105505-1909
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	// Переопределяем тип если передан в доп параметрах
	Если ДополнительныеПараметры.Свойство("СсылкаТип") Тогда 
		СсылкаТип = ДополнительныеПараметры.СсылкаТип; 
	КонецЕсли;	
	//
	
	// Определим правило конвертации ссылки
	ПравилоКонвертацииСсылки = ПолучитьПравилоКонвертацииСсылки(СсылкаТип);
	Если ПравилоКонвертацииСсылки = Неопределено Тогда  
		
		// A2105505-1912
		// Вместо исключения генерирую информацию
		ТекстСообщения = НСтр("ru = 'КР_УТ10_УТ11_ВыгрузкаДанныхСервер.ПКО_СсылкаВXDTO:
		|Не определено правило конвертации типа объекта ""%1"" в XDTO'");  
		ТекстСообщения = СтрШаблон(ТекстСообщения, СсылкаТип);

	  	ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация(); 	
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог); 
		Возврат Ложь;  
		//
		
	КонецЕсли;	
	
	ИмяТипаXDTO = ПравилоКонвертацииСсылки.ИмяТипаXDTO;
	XDTOЗначение = ПолучитьОбъектXDTO(ИмяТипаXDTO);
	
	XDTOЗначение.Ref = XMLСтрока(Ссылка);                      
	
	// Для сложных типов поиска/выгрузки применяеются вызовы методы специализированных методов
	Если СтрНачинаетсяС(ПравилоКонвертацииСсылки.СоответствиеПолей, "ПравилоКонвертацииПолейСсылки") Тогда 
		ФрагментКода = "%1(Ссылка, XDTOЗначение, СообщениеОбмена)";
		ФрагментКода = СтрШаблон(ФрагментКода, ПравилоКонвертацииСсылки.СоответствиеПолей);
		Возврат Вычислить(ФрагментКода);
	КонецЕсли;
	
// << 05.02.2024 Петухов А.В., Фактор, #3628
	//СоответствиеПолей = СтрРазделить(ПравилоКонвертацииСсылки.СоответствиеПолей, ","); 
	СоответствиеПолей = СтрРазделить(ПравилоКонвертацииСсылки.СоответствиеПолей, ",", Ложь);
	Если СоответствиеПолей.Количество() > 0 Тогда
// >> 05.02.2024 Петухов А.В., Фактор, #3628
	ИменаРеквизитов = Новый Массив;
	ИменаПолейXDTO = Новый Массив;
	Для Каждого ОписаниеСоответствия Из СоответствиеПолей Цикл 
		ЗначенияСоотвествияПолей = СтрРазделить(ОписаниеСоответствия, "=");
		ИменаРеквизитов.Добавить(ЗначенияСоотвествияПолей[0]);
		ИменаПолейXDTO.Добавить(ЗначенияСоотвествияПолей[1]);
	КонецЦикла;	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	
	ИндексПоля = 0;
	Для Каждого ПолеXDTO Из ИменаПолейXDTO Цикл 
		XDTOЗначение[ПолеXDTO] = Реквизиты[ИменаРеквизитов[ИндексПоля]];
		ИндексПоля = ИндексПоля + 1;
	КонецЦикла;	              
// << 05.02.2024 Петухов А.В., Фактор, #3628
	КонецЕсли;
// >> 05.02.2024 Петухов А.В., Фактор, #3628
		
	Возврат Истина;		
			
КонецФункции

Функция ПКО_СсылкаВDocumentTypeRef(Ссылка, XDTOЗначение, СообщениеОбмена) Экспорт 
	
	// Если пустое значение то метод не выполнил своего "предназначения"
	Если Не ЗначениеЗаполнено(Ссылка) Тогда 
		Возврат Ложь;
	КонецЕсли;	

	XDTOЗначение = ПолучитьОбъектXDTO("DocumentTypeRef");
	XDTOЗначение.Ref = XMLСтрока(Ссылка);                      
	
	// Опрелеляем тип ссылки
	СсылкаТип = ТипЗнч(Ссылка);
	СсылкаМетаданные = Метаданные.НайтиПоТипу(СсылкаТип);
	XDTOЗначение.Ref = XMLСтрока(Ссылка);                      
	XDTOЗначение.Type = СсылкаМетаданные.ПолноеИмя();                      
			
	Возврат Истина;		
			
КонецФункции

#Область Справочники

Функция ПКО_ФизическиеЛица(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOСправочника(
		XDTOОбъект, Источник, СообщениеОбмена);

	XDTOОбъект.Group = Источник.ЭтоГруппа;
	ПКО_СсылкаВXDTO(Источник.Родитель, XDTOОбъект.Parent, СообщениеОбмена); 
	
	Если Не Источник.ЭтоГруппа Тогда 
		XDTOОбъект.Driver = Источник.КР_ЭтоВодитель;
		// << 10.01.2023 Федотов А.М., КРОК, Jira№A2105505-531
		XDTOОбъект.DriverForRetail = Источник.КР_ЭтоВодительРозницы;
		// >> 10.01.2023 Федотов А.М., КРОК, Jira№A2105505-531
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_ЗоныДоставки(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOСправочника(
		XDTOОбъект, Источник, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_ТранспортныеСредства(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOСправочника(
		XDTOОбъект, Источник, СообщениеОбмена);

	XDTOОбъект.LicPlate = Источник.Код;	
	XDTOОбъект.Manufacturer = Источник.Марка;	
	XDTOОбъект.CapacityTons = Источник.ГрузоподъемностьВТоннах;	
	XDTOОбъект.CapacitySqMtrs = Источник.ВместимостьВКубическихМетрах;	
	XDTOОбъект.TrailerManufacturer = Источник.Прицеп;	
	XDTOОбъект.TrailerLicPlate = Источник.ГосударственныйНомерПрицепа;	
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_Маршруты(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOСправочника(
		XDTOОбъект, Источник, СообщениеОбмена);

	ПКО_СсылкаВXDTO(Источник.ЗонаДоставки, XDTOОбъект.DeliveryZone, СообщениеОбмена);  
	XDTOОбъект.TariffType = XMLСтрока(Источник.ВидТарифа);	
	
	ПКО_StorehouseListObject(Источник.ПунктыМаршрута, XDTOОбъект.StorehouseList, СообщениеОбмена);
	
	Возврат Истина;
	
КонецФункции

// << 03.11.2023 Петухов А.В., Фактор, #3226
Функция ПКО_ПрисоединенныеФайлы(Источник, XDTOОбъект, СообщениеОбмена)

	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

 	XDTOОбъект.Ref = XMLСтрока(Источник.Ссылка);
 	XDTOОбъект.Name = СокрЛП(Источник.Описание);
	XDTOОбъект.DeletionMark = XMLСтрока(Источник.ПометкаУдаления);
	
	ОбъектТип = ТипЗнч(Источник.ВладелецФайла);
	
// << 07.12.2023 Петухов А.В., Фактор, #3450
	// XDTOОбъект.OwnerRef = XMLСтрока(Источник.ВладелецФайла);
	//Если ОбъектТип = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
	//	XDTOОбъект.OwnerType = "InventoryWriteOffRequestObject";
	//	сткРеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.ВладелецФайла,"Дата,Номер");
	// 	XDTOОбъект.OwnerDocDate = сткРеквизитыОбъекта.Дата;
	// 	XDTOОбъект.OwnerDocNum = СокрЛП(сткРеквизитыОбъекта.Номер);
	//ИначеЕсли ОбъектТип = Тип("ДокументСсылка.ПересчетТоваров") Тогда
	//	XDTOОбъект.OwnerType = "InventoryCountSheetObject";
	//	сткРеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.ВладелецФайла,"Дата,Номер");
	// 	XDTOОбъект.OwnerDocDate = сткРеквизитыОбъекта.Дата;
	// 	XDTOОбъект.OwnerDocNum = СокрЛП(сткРеквизитыОбъекта.Номер);
	//ИначеЕсли ОбъектТип = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
	//	XDTOОбъект.OwnerType = "CashReceiptVoucherObject";
	//	сткРеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.ВладелецФайла,"Дата,Номер");
	// 	XDTOОбъект.OwnerDocDate = сткРеквизитыОбъекта.Дата;
	// 	XDTOОбъект.OwnerDocNum = СокрЛП(сткРеквизитыОбъекта.Номер);
	//ИначеЕсли ОбъектТип = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
	//	XDTOОбъект.OwnerType = "CashPaymentVoucherObject";
	//	сткРеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.ВладелецФайла,"Дата,Номер");
	// 	XDTOОбъект.OwnerDocDate = сткРеквизитыОбъекта.Дата;
	// 	XDTOОбъект.OwnerDocNum = СокрЛП(сткРеквизитыОбъекта.Номер);
	//КонецЕсли;
	сткРеквизитыВладельца = Новый Структура;
	Если ОбъектТип = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		XDTOОбъект.OwnerType = "InventoryWriteOffRequestObject";
		сткРеквизитыВладельца.Вставить("Ref", XMLСтрока(Источник.ВладелецФайла));
		сткРеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.ВладелецФайла,"Дата,Номер");
		сткРеквизитыВладельца.Вставить("DocDate", сткРеквизитыОбъекта.Дата);
		сткРеквизитыВладельца.Вставить("DocNum", СокрЛП(сткРеквизитыОбъекта.Номер));
	ИначеЕсли ОбъектТип = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		XDTOОбъект.OwnerType = "InventoryCountSheetObject";
		сткРеквизитыВладельца.Вставить("Ref", XMLСтрока(Источник.ВладелецФайла));
		сткРеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.ВладелецФайла,"Дата,Номер");
		сткРеквизитыВладельца.Вставить("DocDate", сткРеквизитыОбъекта.Дата);
		сткРеквизитыВладельца.Вставить("DocNum", СокрЛП(сткРеквизитыОбъекта.Номер));
	ИначеЕсли ОбъектТип = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		XDTOОбъект.OwnerType = "CashReceiptVoucherObject";
		сткРеквизитыВладельца.Вставить("Ref", XMLСтрока(Источник.ВладелецФайла));
		сткРеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.ВладелецФайла,"Дата,Номер");
		сткРеквизитыВладельца.Вставить("DocDate", сткРеквизитыОбъекта.Дата);
		сткРеквизитыВладельца.Вставить("DocNum", СокрЛП(сткРеквизитыОбъекта.Номер));
	ИначеЕсли ОбъектТип = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		XDTOОбъект.OwnerType = "CashPaymentVoucherObject";
		сткРеквизитыВладельца.Вставить("Ref", XMLСтрока(Источник.ВладелецФайла));
		сткРеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.ВладелецФайла,"Дата,Номер");
		сткРеквизитыВладельца.Вставить("DocDate", сткРеквизитыОбъекта.Дата);
		сткРеквизитыВладельца.Вставить("DocNum", СокрЛП(сткРеквизитыОбъекта.Номер));
	ИначеЕсли ОбъектТип = Тип("СправочникСсылка.Номенклатура") Тогда
		XDTOОбъект.OwnerType = "Goods";
		сткРеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.ВладелецФайла,"Артикул");
		мсвЧастиАртикула = СтрРазделить(сткРеквизитыОбъекта.Артикул," ");
		Если мсвЧастиАртикула.Количество() = 2 Тогда
			сткРеквизитыВладельца.Вставить("Model", СокрЛП(мсвЧастиАртикула[0]));
			сткРеквизитыВладельца.Вставить("Color", СокрЛП(мсвЧастиАртикула[1]));
		Иначе
			сткРеквизитыВладельца.Вставить("Model", СокрЛП(сткРеквизитыОбъекта.Артикул));
			сткРеквизитыВладельца.Вставить("Color", "");
		КонецЕсли;
	КонецЕсли;
	XDTOОбъект.OwnerParams = КР_ФункцииРаботыJSON.КонвертироватьСтруктуруВJSONОбъект(сткРеквизитыВладельца);		
// >> 07.12.2023 Петухов А.В., Фактор, #3450
	
	Если СокрЛП(Источник.Расширение) = "" Тогда
		XDTOОбъект.FileName = СокрЛП(Источник.Наименование);
	Иначе
		XDTOОбъект.FileName = СтрШаблон("%1.%2",СокрЛП(Источник.Наименование),СокрЛП(Источник.Расширение));
	КонецЕсли;

	ДанныеФайла = Неопределено;
	Если Истина
		И Источник.ДополнительныеСвойства.Свойство("КР_ДанныеФайла",ДанныеФайла)
		И ДанныеФайла <> Неопределено
	Тогда
		ДвоичныеДанные = ДанныеФайла;
	Иначе
		ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Источник.Ссылка, Ложь);
	КонецЕсли;
	
	Если ДвоичныеДанные <> Неопределено Тогда
		XDTOОбъект.FileContent = ДвоичныеДанные;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// << 05.03.2024 Петухов А.В., Фактор, #3876
Функция ПКО_КлассификаторТНВЭД(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	XDTOОбъект.Ref = XMLСтрока(Источник.Ссылка);

	XDTOОбъект.Code = Источник.Код;	
	XDTOОбъект.Marking = Источник.КР_Маркируется;	
	XDTOОбъект.MarkingForStorehouse = Источник.злМаркировкаОстатков;	
	XDTOОбъект.MarkingForMarketplace = Источник.злМаркировкаДляМаркетплейсов;	
	XDTOОбъект.MarkingForRetail = Источник.злМаркировкаДляРозницы;	
	
	Возврат Истина;
	
КонецФункции
// >> 05.03.2024 Петухов А.В., Фактор, #3876

// --> Евлахов Игорь Николаевич (Начало) 07.10.2024
// Задача #4537
Функция ПКО_ТипыПоверхностейРасположенияТоваров(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOСправочника(XDTOОбъект, Источник, СообщениеОбмена);
		
	XDTOОбъект.Code = Источник.Код;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Документы

Функция ПКО_ЗаказКлиента(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена); 
	
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Контрагент, XDTOОбъект.Client, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Склад, XDTOОбъект.Storehouse, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Менеджер, XDTOОбъект.ResponsiblePerson, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена); 
	
	// --> Евлахов Игорь Николаевич (Начало) 21.02.2024
	// Задача #3573
	XDTOОбъект.Comment = Источник.Комментарий;
	// <-- Евлахов Игорь Николаевич (Конец) 21.02.2024
	
	ПКО_GoodsDetailedRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
	
	ПКО_DocumentEntriesObject(Источник, XDTOОбъект.DocumentEntries, СообщениеОбмена);	
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_ЗаказНаПеремещение(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена);
	
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.СкладОтправитель, XDTOОбъект.StorehousePick, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.СкладПолучатель, XDTOОбъект.StorehousePut, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Ответственный, XDTOОбъект.ResponsiblePerson, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена); 
	ПКО_СсылкаВXDTO(Источник.КР_Контейнер, XDTOОбъект.ShippingСontainer, СообщениеОбмена); 
// << 13.10.2023 Петухов А.В., Фактор, #3243
    XDTOОбъект.Comment = Источник.Комментарий;
// >> 13.10.2023 Петухов А.В., Фактор, #3243
	
	XDTOОбъект.DistributionBySets = Источник.КР_РаспределениеСетами;
	//A2105505-2350
	ВидСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.СкладОтправитель,"КР_ВидСклада");
	Если НЕ ВидСклада = Неопределено Тогда 
		XDTOОбъект.ReturnRequest = ?(ВидСклада = Перечисления.КР_ВидыСкладов.Магазин, Истина, Ложь);
	Иначе 
		XDTOОбъект.ReturnRequest = Ложь;
	КонецЕсли;
	//A2105505-2350
	//XDTOОбъект.ReturnRequest = Ложь;
	
	ПКО_GoodsDetailedRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_ЗаявкаНаВозвратТоваровОтКлиента(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена);
	
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);
	
	СкладМаркетплейса = Неопределено;
	Если ПолучитьСоответствиеСкладаПоМаркетплейсу(Источник.Контрагент, СкладМаркетплейса) Тогда 
		ПКО_СсылкаВXDTO(СкладМаркетплейса, XDTOОбъект.StorehousePick, СообщениеОбмена);
	КонецЕсли;	
	
	ПКО_СсылкаВXDTO(Источник.Склад, XDTOОбъект.StorehousePut, СообщениеОбмена);

	ПКО_СсылкаВXDTO(Источник.Автор, XDTOОбъект.ResponsiblePerson, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена); 
	
	ПКО_GoodsDetailedRowsObject(Источник.ВозвращаемыеТовары, XDTOОбъект.Goods, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_ЗаданиеНаПеревозку(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена); 
	
	ПКО_СсылкаВXDTO(Источник.КР_ЭкспедиторКонтрагент, XDTOОбъект.Expeditor, СообщениеОбмена);    
    XDTOОбъект.PlannedDepartureDate = Источник.ДатаВремяРейсаПланС;
	
	ПКО_RouteListObject(Источник.Маршрут, XDTOОбъект.RouteList, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_РеализацияТоваровУслуг(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена); 
	
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Контрагент, XDTOОбъект.Counterparty, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.КлиентКонтрагент, XDTOОбъект.Client, СообщениеОбмена);    
	
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Склад, XDTOОбъект.Storehouse, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Менеджер, XDTOОбъект.User, СообщениеОбмена);    
	
	XDTOОбъект.BusinessOperation = XMLСтрока(Источник.ХозяйственнаяОперация);
	XDTOОбъект.VATTaxation = XMLСтрока(Источник.НалогообложениеНДС);
    XDTOОбъект.AmountSales = Источник.СуммаДокумента;
	XDTOОбъект.PriceIncludesVAT = XMLСтрока(Источник.ЦенаВключаетНДС);
    XDTOОбъект.Comment = Источник.Комментарий;
	
	// --> Евлахов Игорь Николаевич (Начало) 10.07.2024
	// Задача #4320
	XDTOОбъект.UPD = XMLСтрока(Источник.злЗакрывающийДокументУПД);
	XDTOОбъект.UpdNumber = СокрЛП(Источник.злЗакрывающийДокументНомер);
	XDTOОбъект.SFNumber = СокрЛП(Источник.злЗакрывающийДокументНомерСчетФактуры);
	XDTOОбъект.UPDDate = XMLСтрока(Источник.злЗакрывающийДокументДата);
	// <-- Евлахов Игорь Николаевич (Конец) 10.07.2024
	
	// --> Евлахов Игорь Николаевич (Начало) 23.09.2024
	// Задача #4165
	НеСоздаватьОтчетКомиссионераВУТ10 = Ложь;	 
	ЗначениеРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Договор,"злНеСоздаватьОтчетКомиссионераВУТ10");
	
	Если ЗначениеРеквизита <> Неопределено Тогда
		НеСоздаватьОтчетКомиссионераВУТ10 = ЗначениеРеквизита;
	КонецЕсли;
	
	XDTOОбъект.DontCreateComissionAgentReport = XMLСтрока(НеСоздаватьОтчетКомиссионераВУТ10);
	// <-- Евлахов Игорь Николаевич (Конец) 23.09.2024
	
	ПКО_GoodsDetailedWithSumRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_ВозвратТоваровОтКлиента(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена); 
		
	ДокументРеализации = Источник.ДокументРеализации;
	
	// << 30.08.2024 Петухов А.В., Фактор, #4612
	//ДокументРеализации = Источник.ДокументРеализации;
	//
	////A2105505-2155
	//Если Не ЗначениеЗаполнено(ДокументРеализации) Тогда   
	//	
	//	НаибольшаяДатаДокумента = '00010101';
	//	Для Каждого СтрокаДанных Из Источник.Товары Цикл 
	//		
	//		// A2105505-2180
	//		Если Не ЗначениеЗаполнено(СтрокаДанных.ДокументРеализации) Тогда 
	//			Продолжить;
	//		КонецЕсли;	
	//		//
	//		
	//		ДатаРеализации = СтрокаДанных.ДокументРеализации.Дата;
	//		Если ДатаРеализации > НаибольшаяДатаДокумента Тогда 
	//			НаибольшаяДатаДокумента = ДатаРеализации;
	//			ДокументРеализации = СтрокаДанных.ДокументРеализации;
	//		КонецЕсли;	
	//		
	//	КонецЦикла;	
	//	
	//КонецЕсли;	
	////
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Проведен
		|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
		|	И РеализацияТоваровУслуг.Дата <= &МаксДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеализацияТоваровУслуг.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Контрагент", Источник.Контрагент);
	Запрос.УстановитьПараметр("МаксДата", Источник.Дата);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ДокументРеализации = Выборка.Ссылка;
	Иначе
		ТекстСообщения = НСтр("ru = 'КР_УТ10_УТ11_ВыгрузкаДанныхСервер.ПКО_ВозвратТоваровОтКлиента:
		|Не найдена реализация для возврата. Документ не будет выгружен.'");  
	  	ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Документы.ВозвратТоваровОтКлиента); 	
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог); 
	КонецЕсли;
	// >> 30.08.2024 Петухов А.В., Фактор, #4612
	
	ПКО_СсылкаВDocumentTypeRef(ДокументРеализации, XDTOОбъект.RefSales, СообщениеОбмена);    
	
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Контрагент, XDTOОбъект.Counterparty, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.КлиентКонтрагент, XDTOОбъект.Client, СообщениеОбмена);    
	
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Склад, XDTOОбъект.Storehouse, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Менеджер, XDTOОбъект.User, СообщениеОбмена);    
	
	XDTOОбъект.BusinessOperation = XMLСтрока(Источник.ХозяйственнаяОперация);
	XDTOОбъект.VATTaxation = XMLСтрока(Источник.НалогообложениеНДС);
    XDTOОбъект.AmountSales = Источник.СуммаДокумента;
	XDTOОбъект.PriceIncludesVAT = XMLСтрока(Источник.ЦенаВключаетНДС);
	XDTOОбъект.PaymentMethod = XMLСтрока(Источник.СпособКомпенсации);
	XDTOОбъект.Comment = Источник.Комментарий;
	
	ПКО_GoodsDetailedWithSumRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_КорректировкаРеализации(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена); 
	
	ПКО_СсылкаВDocumentTypeRef(Источник.ДокументОснование, XDTOОбъект.RefBase, СообщениеОбмена);    
	
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Контрагент, XDTOОбъект.Counterparty, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.КлиентКонтрагент, XDTOОбъект.Client, СообщениеОбмена);    
	
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Склад, XDTOОбъект.Storehouse, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Менеджер, XDTOОбъект.User, СообщениеОбмена);    
	
	XDTOОбъект.BusinessOperation = XMLСтрока(Источник.ХозяйственнаяОперация);
	XDTOОбъект.VATTaxation = XMLСтрока(Источник.НалогообложениеНДС);
    XDTOОбъект.AmountSales = Источник.СуммаДокумента;
	XDTOОбъект.PriceIncludesVAT = XMLСтрока(Источник.ЦенаВключаетНДС);
	XDTOОбъект.TypeAdjustment = XMLСтрока(Источник.ВидКорректировки);
	XDTOОбъект.Comment = Источник.Комментарий;
	
	ПКО_GoodsDetailedWithSumRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
	ПКО_RealizationAdjustmentDiscrepancyRowsObject(Источник.Расхождения, XDTOОбъект.Discrepancy, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_УстановкаМестРазмещения(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена); 
	
	ПКО_СсылкаВXDTO(Источник.Формат, XDTOОбъект.Format, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Ответственный, XDTOОбъект.User, СообщениеОбмена);    
	
	// A2105505-2310
	XDTOОбъект.StartDate = Источник.ДатаНачалаДействия;
	XDTOОбъект.EndDate = Источник.ДатаОкончанияДействия;
	//
	
	XDTOОбъект.Comment = Источник.Комментарий;
	
	ПКО_GoodsPlacementsRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_УстановкаМинимальнойПрезентации(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена); 
	
	ПКО_СсылкаВXDTO(Источник.Ответственный, XDTOОбъект.User, СообщениеОбмена);    
	XDTOОбъект.Comment = Источник.Комментарий;
	
	ПКО_GoodsMinimalPresentationRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_УстановкаПриоритетовРазмеров(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена); 
	
	ПКО_СсылкаВXDTO(Источник.Ответственный, XDTOОбъект.User, СообщениеОбмена);    
	XDTOОбъект.Comment = Источник.Комментарий;
	
	ПКО_GoodsSizePrioritiesRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_ИзменениеАссортимента(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена); 
		
	XDTOОбъект.Stage = XMLСтрока(Источник.Этап);
	
	// A2105505-2310 Изменения логики    
	Если ТипЗнч(Источник.ОбъектПланирования) = Тип("СправочникСсылка.Склады") Тогда 
		ПКО_СсылкаВXDTO(Источник.ОбъектПланирования, XDTOОбъект.Storehouse, СообщениеОбмена);  
	ИначеЕсли ТипЗнч(Источник.ОбъектПланирования) = Тип("СправочникСсылка.ФорматыМагазинов") Тогда
		ПКО_СсылкаВXDTO(Источник.ОбъектПланирования, XDTOОбъект.Format, СообщениеОбмена); 
	Иначе 
		// Ничего не делаем	
	КонецЕсли;	
	
	XDTOОбъект.UploadDate = Источник.КР_ДатаЗагрузки;
	//
	
	XDTOОбъект.CompleteDate = Источник.злДатаЗавершения;	// #3372.. Фомин Д.Ю. 30.11.2023.
	
	// A2105505-2399
	ПКО_СсылкаВXDTO(Источник.Ответственный, XDTOОбъект.User, СообщениеОбмена); 
	//
	
	ПКО_GoodsCharacteristicRowsObject(
		Источник.КР_ТоварыСХарактеристикой, XDTOОбъект.GoodsCharacteristic, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_УстановкаЦенНоменклатуры(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена); 
	
	ПКО_СсылкаВXDTO(Источник.Ответственный, XDTOОбъект.User, СообщениеОбмена);    
	XDTOОбъект.Comment = Источник.Комментарий;
	
	// --> Евлахов Игорь Николаевич (Начало) 17.10.2023
	// Задача #3270
	
	XDTOОбъект.NotPrintPrices = XMLСтрока(Источник.КР_НеПечататьСтарыеЦены);
	// <-- Евлахов Игорь Николаевич (Конец) 17.10.2023
	
	ПКО_SettingItemPricesGoods2_5RowsObject(
		Источник.Товары2_5, XDTOОбъект.Goods2_5, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_ПеремещениеТоваров(Источник, XDTOОбъект, СообщениеОбмена)
	
	// << 27.03.2024 Петухов А.В., Фактор, #3923
	// Если для документа задан КР_ИдентификаторСистемыИсточника, то требуется выгружать по этому идентификатору
	// и выполнять проверку проведения остальных перемещений с таким идентификатором
	мсвПеремещения = Новый Массив;
	мсвНепроведенные = Новый Массив;
	Если СокрЛП(Источник.КР_ИдентификаторСистемыИсточника) <> "" Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПеремещениеТоваров.Ссылка КАК Ссылка,
			|	ПеремещениеТоваров.Проведен КАК Проведен
			|ИЗ
			|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
			|ГДЕ
			|	ПеремещениеТоваров.КР_ИдентификаторСистемыИсточника = &КР_ИдентификаторСистемыИсточника
			|	И НЕ ПеремещениеТоваров.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("КР_ИдентификаторСистемыИсточника", Источник.КР_ИдентификаторСистемыИсточника);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			мсвПеремещения.Добавить(Выборка.Ссылка);
			Если Выборка.Проведен = Ложь Тогда
				мсвНепроведенные.Добавить(СтрШаблон("%1", Выборка.Ссылка));
			КонецЕсли;
		КонецЦикла;
		Если мсвНепроведенные.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'КР_УТ10_УТ11_ВыгрузкаДанныхСервер.ПКО_ПеремещениеТоваров:
			|Не все документы перемещения с динетификатором %1 проведены:%2%3%2Документ не будет выгружен.'");  
			ТекстСообщения = СтрШаблон(ТекстСообщения, Источник.КР_ИдентификаторСистемыИсточника, Символы.ПС,
				СтрСоединить(мсвНепроведенные, Символы.ПС));
		  	ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 	
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог); 
		КонецЕсли;
	КонецЕсли;
	// >> 27.03.2024 Петухов А.В., Фактор, #3923
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена); 
	// << 27.03.2024 Петухов А.В., Фактор, #3923
	Если СокрЛП(Источник.КР_ИдентификаторСистемыИсточника) <> "" Тогда
		XDTOОбъект.Ref = СокрЛП(Источник.КР_ИдентификаторСистемыИсточника);
		Если СокрЛП(Источник.КР_НомерВходящегоДокумента) <> "" Тогда
			XDTOОбъект.DocNum = СокрЛП(Источник.КР_НомерВходящегоДокумента);
		КонецЕсли;
	КонецЕсли;
	// >> 27.03.2024 Петухов А.В., Фактор, #3923
	
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.СкладОтправитель, XDTOОбъект.StorehousePick, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.СкладПолучатель, XDTOОбъект.StorehousePut, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена); 
	ПКО_СсылкаВXDTO(Источник.Ответственный, XDTOОбъект.ResponsiblePerson, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.ЗаказНаПеремещение, XDTOОбъект.GoodsRelocationOrder, СообщениеОбмена); 
// << 13.10.2023 Петухов А.В., Фактор, #3243
    XDTOОбъект.Comment = Источник.Комментарий;
// >> 13.10.2023 Петухов А.В., Фактор, #3243
	
	// << 06.05.2024 Петухов А.В., Фактор, #3938
	//// << 05.02.2024 Петухов А.В., Фактор, #3628
	////ПКО_GoodsDetailedRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
	//// << 27.03.2024 Петухов А.В., Фактор, #3923
	////ПКО_GoodsDetailedRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена, Истина);
	//Если мсвПеремещения.Количество() < 2 Тогда
	//	ПКО_GoodsDetailedRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена, Истина);
	//Иначе
	//	ПКО_GoodsDetailedRowsObjectОбъединеннаяТЧПеремещений(мсвПеремещения, XDTOОбъект.Goods, СообщениеОбмена, Истина);
	//КонецЕсли;
	//// >> 27.03.2024 Петухов А.В., Фактор, #3923
	//// >> 05.02.2024 Петухов А.В., Фактор, #3628
	ДопПараметры = Новый Структура("ВыполнятьПреобразованиеКоробов", Истина);
	Если мсвПеремещения.Количество() < 2 Тогда
		ПКО_GoodsDetailedRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена, ДопПараметры);
	Иначе
		ПКО_GoodsDetailedRowsObjectОбъединеннаяТЧПеремещений(мсвПеремещения, XDTOОбъект.Goods, СообщениеОбмена, ДопПараметры);
	КонецЕсли;
	// >> 06.05.2024 Петухов А.В., Фактор, #3938
	
	// A2105505-2223  
	XDTOОбъект.Shipment = Источник.СкладОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке
		Или Источник.СкладПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении; 
	//
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_ОтчетОРозничныхПродажах(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена);       
		
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена); 
	ПКО_СсылкаВXDTO(Источник.Склад, XDTOОбъект.Storehouse, СообщениеОбмена);
 	ПКО_СсылкаВXDTO(Источник.КассаККМ, XDTOОбъект.CashierKKM, СообщениеОбмена);
	
	ПКО_СсылкаВXDTO(Источник.Ответственный, XDTOОбъект.Responsible, СообщениеОбмена);

 	XDTOОбъект.PriceIncludesVAT = XMLСтрока(Источник.ЦенаВключаетНДС);
    XDTOОбъект.AmountSales = Источник.СуммаДокумента;	
    XDTOОбъект.Comment = Источник.Комментарий;

	// A2105505-2054
	XDTOОбъект.Closed = Источник.КР_Закрыт;
	//

// << 28.09.2023 Петухов А.В., Фактор, #3093
	КоличествоПосетителей = 0;
	РегистрыСведений.КР_ПосещаемостьМагазина.ЕстьПодсчетПосетителейНаДату(Источник.Склад, Источник.Дата, КоличествоПосетителей); 
	XDTOОбъект.CountCustomer = КоличествоПосетителей;
// >> 28.09.2023 Петухов А.В., Фактор, #3093
	
	ПКО_RetailSalesReportGoodsRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
	
	ПКО_RetailSalesReportPaymentsRowsObject(Источник, XDTOОбъект.Payments, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_УпаковочныйЛист(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена);       
		
	ЭтоИсходящийУпаковочныйЛист = (Источник.Вид = Перечисления.ВидыУпаковочныхЛистов.Исходящий);	
    XDTOОбъект.TypeOfBoxOutgoing = ЭтоИсходящийУпаковочныйЛист;
    XDTOОбъект.TypeFilling = XMLСтрока(Источник.КР_ТипНаполнения);

	// A2105505-2203
    XDTOОбъект.Barcode = Источник.КР_Штрихкод;	
	//
	
	ПКО_СсылкаВXDTO(Источник.КР_Партнер, XDTOОбъект.Client, СообщениеОбмена); 
	ПКО_СсылкаВXDTO(Источник.СкладУпаковки, XDTOОбъект.ShippingStorehouse, СообщениеОбмена);
 	ПКО_СсылкаВXDTO(Источник.Упаковал, XDTOОбъект.ResponsiblePerson, СообщениеОбмена);    
	
	// A2105505-2225
	ТипЗначенияДокументОснование = ТипЗнч(Источник.КР_ДокументОснование);
	Если ТипЗначенияДокументОснование = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		И Не ЭтоИсходящийУпаковочныйЛист Тогда 
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СсылкаТип", Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	 	ПКО_СсылкаВXDTO(Источник.КР_ДокументОснование, XDTOОбъект.ReceiptDocument, СообщениеОбмена,
			ДополнительныеПараметры);    

	ИначеЕсли ТипЗначенияДокументОснование = Тип("ДокументСсылка.ЗаказНаПеремещение")
		И ЭтоИсходящийУпаковочныйЛист Тогда 
		
	 	ПКО_СсылкаВXDTO(Источник.КР_ДокументОснование, XDTOОбъект.GoodsRelocationOrder, СообщениеОбмена);		
		
	Иначе 
		// Ничего не делаем
	КонецЕсли;	
	// 
	
	XDTOОбъект.Comment = Источник.Комментарий;
	
	ПКО_GoodsDetailedRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
			
	Возврат Истина;
	
КонецФункции

Функция ПКО_ПриходныйКассовыйОрдер(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена);       
		
	ПКО_СсылкаВXDTO(Источник.Касса, XDTOОбъект.Cashier, СообщениеОбмена); 
	ПКО_СсылкаВXDTO(Источник.КассаККМ, XDTOОбъект.CashierKKM, СообщениеОбмена); 
	ПКО_СсылкаВXDTO(Источник.СтатьяДвиженияДенежныхСредств, XDTOОбъект.CashFlowItem, СообщениеОбмена); 
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена); 
 	ПКО_СсылкаВXDTO(Источник.ПодотчетноеЛицо, XDTOОбъект.Individual, СообщениеОбмена);    
	
 	ПКО_СсылкаВXDTO(Источник.Автор, XDTOОбъект.User, СообщениеОбмена);    

	XDTOОбъект.TypeOperation = XMLСтрока(Источник.ХозяйственнаяОперация);
	XDTOОбъект.Amount = Источник.СуммаДокумента;    
	
	XDTOОбъект.Accepted = Источник.ПринятоОт;       
	XDTOОбъект.Basis = Источник.Основание;       
	XDTOОбъект.Application = Источник.Приложение;  
		
	XDTOОбъект.Comment = Источник.Комментарий;
	
	// --> Евлахов Игорь Николаевич (Начало) 19.12.2023
	// Задача #3517
	Если Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда		
		ДополнительныеПараметры = Новый Структура();
		
		ПКО_DecryptionPaymentRowObject(
					Источник.РасшифровкаПлатежа, 
					XDTOОбъект.DecryptionPayment, 
					СообщениеОбмена, 
					ДополнительныеПараметры);
		
		Если ДополнительныеПараметры.Свойство("СтавкаНДС") Тогда
			XDTOОбъект.VATRate = Строка(ДополнительныеПараметры.СтавкаНДС);			
		КонецЕсли;		
	КонецЕсли;
	// <-- Евлахов Игорь Николаевич (Конец) 19.12.2023
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_РасходныйКассовыйОрдер(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена);       
		
	ПКО_СсылкаВXDTO(Источник.БанковскийСчет, XDTOОбъект.BankAccount, СообщениеОбмена); 
	ПКО_СсылкаВXDTO(Источник.Касса, XDTOОбъект.Cashier, СообщениеОбмена); 
	ПКО_СсылкаВXDTO(Источник.КассаККМ, XDTOОбъект.CashierKKM, СообщениеОбмена); 
	ПКО_СсылкаВXDTO(Источник.СтатьяДвиженияДенежныхСредств, XDTOОбъект.CashFlowItem, СообщениеОбмена); 
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена); 
	
 	ПКО_СсылкаВXDTO(Источник.Автор, XDTOОбъект.User, СообщениеОбмена);    

	XDTOОбъект.TypeOperation = XMLСтрока(Источник.ХозяйственнаяОперация);
	XDTOОбъект.Amount = Источник.СуммаДокумента;   
	
	XDTOОбъект.Issue = Источник.Выдать;       
	XDTOОбъект.Basis = Источник.Основание;       
	XDTOОбъект.Application = Источник.Приложение;  
		
	XDTOОбъект.Comment = Источник.Комментарий;
			
	Возврат Истина;
	
КонецФункции

Функция ПКО_ОтборРазмещениеТоваров(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);
	
	// --> Евлахов Игорь Николаевич (Начало) 20.11.2023
	// Задача #3355
	Если  СообщениеОбмена.ТипДанных = "ListDocuments" 
		И Источник.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение Тогда		
		XDTOОбъект.Ref = XMLСтрока(Источник.Ссылка);
		XDTOОбъект.DeletionMark = Источник.ПометкаУдаления;
		XDTOОбъект.TypeOperation = "Перемещение";
		
		ПКО_ListDocumentsGoodsRelocationObjectRow("Перемещение",
												  Источник, 
												  XDTOОбъект.GoodsRelocationObject, 
												  СообщениеОбмена);
	// Задача #3356
	ИначеЕсли СообщениеОбмена.ТипДанных = "ListDocuments" 
			И Источник.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение Тогда		
		XDTOОбъект.Ref = XMLСтрока(Источник.Ссылка);
		XDTOОбъект.DeletionMark = Источник.ПометкаУдаления;
		XDTOОбъект.TypeOperation = "Размещение";
		
		ПКО_ListDocumentsGoodsIncomeOrderObjectRow(Источник, 
												   XDTOОбъект.GoodsIncomeOrderObject, 
												   СообщениеОбмена); 
												   
		ПКО_ListDocumentsGoodsRelocationObjectRow("Размещение",
												  Источник, 
												  XDTOОбъект.GoodsRelocationObject, 
												  СообщениеОбмена);
	// <-- Евлахов Игорь Николаевич (Конец) 20.11.2023
	Иначе	 	
		КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
			XDTOОбъект, Источник, СообщениеОбмена);       
			
		ПКО_СсылкаВXDTO(Источник.Склад, XDTOОбъект.Storehouse, СообщениеОбмена); 
		ПКО_СсылкаВXDTO(Источник.Помещение, XDTOОбъект.Premise, СообщениеОбмена); 
		ПКО_СсылкаВXDTO(Источник.ЗонаОтгрузки, XDTOОбъект.ShippingZone, СообщениеОбмена); 
		ПКО_СсылкаВXDTO(Источник.ЗонаПриемки, XDTOОбъект.IncomingZone, СообщениеОбмена);   
		
		Если ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда 
			ПКО_СсылкаВXDTO(Источник.Распоряжение, XDTOОбъект.GoodsRelocationOrder, СообщениеОбмена); 
		ИначеЕсли ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда 
			ПКО_СсылкаВXDTO(Источник.Распоряжение, XDTOОбъект.GoodsRelocation, СообщениеОбмена);
		Иначе     
			// Ничего не делаем. Заглушка для сонара 
		КонецЕсли;	
		
		ПКО_СсылкаВXDTO(Источник.КР_Короб, XDTOОбъект.Box, СообщениеОбмена); 
		
		ПКО_СсылкаВXDTO(Источник.Ответственный, XDTOОбъект.Responsible, СообщениеОбмена);    

		XDTOОбъект.TypeOperation = XMLСтрока(Источник.ВидОперации);  
		XDTOОбъект.Status = XMLСтрока(Источник.Статус);  
		XDTOОбъект.UseBox = Источник.КР_ИспользоватьКороб;  
		XDTOОбъект.WithoutOpening = Источник.КР_ПотоварнаяПриемкаБезВскрытияКороба;  
		XDTOОбъект.SourceIDs = Источник.КР_ИдентификаторСистемыИсточника;  
		
		XDTOОбъект.VolumeSelection = Источник.ОбъемОтбор;  
		XDTOОбъект.VolumePlacement = Источник.ОбъемРазмещение;  
		XDTOОбъект.WeightSelection = Источник.ВесОтбор;  
		XDTOОбъект.WeightPlacement = Источник.ВесРазмещение;  
		
		XDTOОбъект.Comment = Источник.Комментарий;
				
		ПКО_GoodsSelectionRowsObject(Источник.ТоварыОтбор, XDTOОбъект.GoodsSelection, СообщениеОбмена);

		ПКО_GoodsPlacementRowsObject(Источник.ТоварыРазмещение, XDTOОбъект.GoodsPlacement, СообщениеОбмена);		
	// --> Евлахов Игорь Николаевич (Начало) 20.11.2023
	// Задача #3355
	КонецЕсли;
    // <-- Евлахов Игорь Николаевич (Конец) 20.11.2023

	Возврат Истина;
	
КонецФункции

Функция ПКО_ТранспортнаяНакладная(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена);       
		
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена); 
	// << 15.03.2024 Петухов А.В., Фактор, #3892
	//ПКО_СсылкаВXDTO(Источник.КР_Отправитель, XDTOОбъект.StorehousePick, СообщениеОбмена); 
	//ПКО_СсылкаВXDTO(Источник.КР_Получатель, XDTOОбъект.StorehousePut, СообщениеОбмена); 
	Если ТипЗнч(Источник.КР_Отправитель) = Тип("СправочникСсылка.Склады") Тогда
		ПКО_СсылкаВXDTO(Источник.КР_Отправитель, XDTOОбъект.StorehousePick, СообщениеОбмена);
	ИначеЕсли ТипЗнч(Источник.КР_Отправитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		СкладОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.КР_Отправитель, "КР_Склад");
		ПКО_СсылкаВXDTO(СкладОтправитель, XDTOОбъект.StorehousePick, СообщениеОбмена);
	КонецЕсли;
	Если ТипЗнч(Источник.КР_Получатель) = Тип("СправочникСсылка.Склады") Тогда
		ПКО_СсылкаВXDTO(Источник.КР_Получатель, XDTOОбъект.StorehousePut, СообщениеОбмена); 
	ИначеЕсли ТипЗнч(Источник.КР_Получатель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		СкладПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.КР_Получатель, "КР_Склад");
		ПКО_СсылкаВXDTO(СкладПолучатель, XDTOОбъект.StorehousePut, СообщениеОбмена);
	КонецЕсли;
	// >> 15.03.2024 Петухов А.В., Фактор, #3892

	ПКО_СсылкаВXDTO(Источник.КР_Водитель, XDTOОбъект.Driver, СообщениеОбмена); 
	ПКО_СсылкаВXDTO(Источник.КР_ТранспортноеСредство, XDTOОбъект.Vehicle, СообщениеОбмена); 
	ПКО_СсылкаВXDTO(Источник.КР_Экспедитор, XDTOОбъект.Expeditor, СообщениеОбмена); 
	ПКО_СсылкаВXDTO(Источник.Перевозчик, XDTOОбъект.Transporter, СообщениеОбмена);    
	
	XDTOОбъект.ShipmentWeight = Источник.МассаБрутто; 
	XDTOОбъект.ShipmentWeight = Источник.МассаНетто; 
	XDTOОбъект.ShipmentVolume = Источник.КР_ОбъемГруза; 

	XDTOОбъект.BoxQuantity = Источник.КР_КоличествоКоробов; 
	XDTOОбъект.EstimatedCargoPrice = Источник.КР_ОценочнаяCтоимость;    
	
	XDTOОбъект.DeliveryDate = Источник.КР_ДатаДоставкиФакт;   
	
	XDTOОбъект.UseTransitStorehouse = Источник.КР_ЧерезЦС; 
	
	ДокументыОснования = Источник.ДокументыОснования;
	
	Если Не ЗначениеЗаполнено(ДокументыОснования)
		Или ДокументыОснования.Количество() > 1 Тогда 
		ТекстСообщения = НСтр("ru = 'Не удалось определить документ-основание'");
	  	ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 	
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог); 
		Возврат Ложь;
	КонецЕсли;
	
	ДокументОснование = ДокументыОснования[0].ДокументОснование;
	
	ПКО_СсылкаВXDTO(ДокументОснование, XDTOОбъект.GoodsRelocation, СообщениеОбмена);    
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_ПоступлениеТоваровОтХранителя(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена);
	
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);
	
	СкладМаркетплейса = Неопределено;
	Если ПолучитьСоответствиеСкладаПоМаркетплейсу(Источник.Контрагент, СкладМаркетплейса) Тогда 
		ПКО_СсылкаВXDTO(СкладМаркетплейса, XDTOОбъект.StorehousePick, СообщениеОбмена); 
	Иначе
		ТекстСообщения = НСтр("ru = 'Не найдено соответствие склада для маркетплейса ""%1""'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Источник.Контрагент);
	  	ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 	
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог); 
		Возврат Ложь;
	КонецЕсли;	
	
	ПКО_СсылкаВXDTO(Источник.Склад, XDTOОбъект.StorehousePut, СообщениеОбмена);

	ПКО_СсылкаВXDTO(Источник.Автор, XDTOОбъект.ResponsiblePerson, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена);   
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СсылкаТип", Тип("ДокументСсылка.ЗаказНаПеремещение"));
	ПКО_СсылкаВXDTO(Источник.Распоряжение, XDTOОбъект.GoodsRelocationOrder, СообщениеОбмена, 
		ДополнительныеПараметры);   
	
	ПКО_GoodsDetailedRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_ПересчетТоваров(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена);
	
	ПКО_СсылкаВXDTO(Источник.Склад, XDTOОбъект.Storehouse, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Ответственный, XDTOОбъект.ResponsiblePerson, СообщениеОбмена);
	
	XDTOОбъект.Comment = Источник.Комментарий;   
		
	ПКО_GoodsDetailedRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_ОприходованиеИзлишковТоваров(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена);
	
	ПКО_СсылкаВXDTO(Источник.ПересчетТоваров, XDTOОбъект.InventoryCountSheet, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Склад, XDTOОбъект.Storehouse, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Ответственный, XDTOОбъект.ResponsiblePerson, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена);   
	
	XDTOОбъект.Comment = Источник.Комментарий;   
		
	ПКО_GoodsDetailedRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_СписаниеНедостачТоваров(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена);
	
	ПКО_СсылкаВXDTO(Источник.ПересчетТоваров, XDTOОбъект.InventoryCountSheet, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Склад, XDTOОбъект.Storehouse, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Автор, XDTOОбъект.ResponsiblePerson, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена);   
	
	СтатьяРасходовСписаниеБрак = КР_ДополнительныеНастройкиПовтИсп.Значение("СтатьяРасходовСписаниеБрак");
	СтатьяРасходовДляСписанияНедостачТоваров = КР_ДополнительныеНастройкиПовтИсп.Значение("СтатьяРасходовДляСписанияНедостачТоваров");
	Если Источник.СтатьяРасходов = СтатьяРасходовСписаниеБрак Тогда 
		XDTOОбъект.DocOperationType = "Брак";
	ИначеЕсли Источник.СтатьяРасходов = СтатьяРасходовДляСписанияНедостачТоваров Тогда 
		XDTOОбъект.DocOperationType = "ПоРезультатамИнвентаризации"; 
	Иначе
		XDTOОбъект.DocOperationType = "Прочие"; 
	КонецЕсли;	
	
	XDTOОбъект.Comment = Источник.Комментарий;   
		
	ПКО_GoodsDetailedRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_ПересортицаТоваров(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена);
	
	ПКО_СсылкаВXDTO(Источник.ПересчетТоваров, XDTOОбъект.InventoryCountSheet, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Склад, XDTOОбъект.Storehouse, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Автор, XDTOОбъект.ResponsiblePerson, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена);   
		
	XDTOОбъект.Comment = Источник.Комментарий;   
		
	ПКО_GoodsRegradingRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_ВнутреннееПотреблениеТоваров(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена);
	
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Склад, XDTOОбъект.Storehouse, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Ответственный, XDTOОбъект.ResponsiblePerson, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена);   
	
	// Передача в эксплуатацию
	ПередачаВЭксплуатацию = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию;
	// Списание на расходы / активы 
	СписаниеТоваровПоТребованию = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;  
	
	Если Источник.ХозяйственнаяОперация = ПередачаВЭксплуатацию Тогда 
		XDTOОбъект.DocOperationType = "ФорменнаяОдежда";
	ИначеЕсли Источник.ХозяйственнаяОперация = СписаниеТоваровПоТребованию Тогда 
		XDTOОбъект.DocOperationType = "Брак"; 
	Иначе
		//  
	КонецЕсли;	
	
	XDTOОбъект.Comment = Источник.Комментарий;   
		
	// << 06.05.2024 Петухов А.В., Фактор, #3938
	//ПКО_GoodsDetailedRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
	ДопПараметры = Новый Структура();
	Если Источник.ХозяйственнаяОперация = ПередачаВЭксплуатацию Тогда
		ДопПараметры.Вставить("ТребуетсяВыгрузкаЗаказаНаВнутреннееПотребление", Истина);
	КонецЕсли;
	ПКО_GoodsDetailedRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена, ДопПараметры);
	// << 06.05.2024 Петухов А.В., Фактор, #3938
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_ЗаказНаВнутреннееПотребление(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена);
	
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Склад, XDTOОбъект.Storehouse, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Ответственный, XDTOОбъект.ResponsiblePerson, СообщениеОбмена);
	
	// --> Евлахов Игорь Николаевич (Начало) 01.03.2024
	// Задача #3099
	ПКО_СсылкаВXDTO(Источник.злОтветственныйЗаДокумент, XDTOОбъект.ResponsibleForDocument, СообщениеОбмена);
	// <-- Евлахов Игорь Николаевич (Конец) 01.03.2024
	
	// Передача в эксплуатацию
	ПередачаВЭксплуатацию = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию;
	// Списание на расходы / активы 
	СписаниеТоваровПоТребованию = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;  
	
	Если Источник.ХозяйственнаяОперация = ПередачаВЭксплуатацию Тогда 
		XDTOОбъект.DocOperationType = "ФорменнаяОдежда";
	ИначеЕсли Источник.ХозяйственнаяОперация = СписаниеТоваровПоТребованию Тогда 
		XDTOОбъект.DocOperationType = "Брак"; 
	Иначе
		//  
	КонецЕсли;	
	
	XDTOОбъект.Comment = Источник.Комментарий;   
		
	ПКО_GoodsDetailedRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

// --> Евлахов Игорь Николаевич (Начало) 27.11.2023
// Задача #3356
Процедура ПКО_ListDocumentsGoodsIncomeOrderObjectRow(Источник, XDTOОбъект, СообщениеОбмена)
	
	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("ListDocumentsGoodsIncomeOrderObjectRow");

	ДокументXDTO = ПолучитьОбъектXDTO("GoodsIncomeOrderObject");
		
	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
						ДокументXDTO, Источник, СообщениеОбмена);
		
	Результат = ПолучитьДанныеОтборРазмещениеТоваровОперацияРазмещение(Источник);
	
	ДанныеДокумента = Результат.ДанныеДокумента;
		
	ПКО_СсылкаВXDTO(ДанныеДокумента.СкладОтправитель, ДокументXDTO.StorehousePick, СообщениеОбмена);
	ПКО_СсылкаВXDTO(ДанныеДокумента.Склад, ДокументXDTO.StorehousePut, СообщениеОбмена);
    ПКО_СсылкаВXDTO(ДанныеДокумента.Ответственный, ДокументXDTO.ResponsiblePerson, СообщениеОбмена);
	ПКО_СсылкаВXDTO(ДанныеДокумента.Подразделение, ДокументXDTO.Department, СообщениеОбмена);
	ПКО_СсылкаВXDTO(ДанныеДокумента.Организация, ДокументXDTO.Organization, СообщениеОбмена);
	ПКО_СсылкаВXDTO(ДанныеДокумента.УпаковочныйЛист, ДокументXDTO.Box, СообщениеОбмена);
		
	ПКО_GoodsDetailedRowsObject(Результат.ТЗТовары, ДокументXDTO.Goods, СообщениеОбмена);
	
	XDTOОбъект.Row.Добавить(ДокументXDTO);
	
КонецПроцедуры

// Задача #3356
Процедура ПКО_ListDocumentsGoodsRelocationObjectRow(ВидОперации, Источник, XDTOОбъект, СообщениеОбмена)
	
	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("ListDocumentsGoodsRelocationObjectRow");
	
	// Генерация документов выполняется только в случае если документ проведен,
	// в противном случае пакет будет нести только данные, необходимые для отмены
	// проведения документов в базе Приемник.
	Если Не Источник.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = "Перемещение" Тогда
		ПКО_ПеремещениеListDocumentsGoodsRelocationObjectRow(Источник, XDTOОбъект, СообщениеОбмена);	
	ИначеЕсли ВидОперации = "Размещение" Тогда
		ПКО_РазмещениеListDocumentsGoodsRelocationObjectRow(Источник, XDTOОбъект, СообщениеОбмена);
	КонецЕсли;
	
КонецПроцедуры

// Задача #3356
Процедура ПКО_РазмещениеListDocumentsGoodsRelocationObjectRow(Источник, XDTOОбъект, СообщениеОбмена)
			
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ОтборРазмещениеТоваров.Склад КАК Склад,
	               |	ОтборРазмещениеТоваров.Дата КАК Дата,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(СкладскиеПомещения.КР_ТипСкладскогоПомещения, ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ТорговыйЗал)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)
	               |		ИНАЧЕ ОтборРазмещениеТоваровТоварыРазмещение.Ячейка
	               |	КОНЕЦ КАК ЯчейкаРазмещения,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Номенклатура КАК Номенклатура,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Характеристика КАК Характеристика,
	               |	СУММА(ОтборРазмещениеТоваровТоварыРазмещение.Количество) КАК Количество,
	               |	СкладскиеПомещения.КР_ТипСкладскогоПомещения КАК ТипСкладскогоПомещения,
	               |	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(СкладскиеПомещения.КР_ТипСкладскогоПомещения) КАК ВспомогательныйИдентификатор,
	               |	ОтборРазмещениеТоваров.Ответственный КАК Ответственный,
	               |	Склады.Подразделение КАК Подразделение,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(СкладскиеПомещения.КР_ТипСкладскогоПомещения, ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ТорговыйЗал)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ВТорговыйЗал,
	               |	СОКРП(ВЫРАЗИТЬ(ОтборРазмещениеТоваров.Комментарий КАК СТРОКА(1024))) КАК Комментарий
	               |ИЗ
	               |	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК ОтборРазмещениеТоваровТоварыРазмещение
	               |		ПО ОтборРазмещениеТоваров.Ссылка = ОтборРазмещениеТоваровТоварыРазмещение.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	               |		ПО (ОтборРазмещениеТоваровТоварыРазмещение.Ячейка = СкладскиеЯчейки.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеПомещения КАК СкладскиеПомещения
	               |		ПО (СкладскиеЯчейки.Помещение = СкладскиеПомещения.Ссылка)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	               |		ПО ОтборРазмещениеТоваров.Склад = Склады.Ссылка
	               |ГДЕ
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Ссылка = &Ссылка
	               |	И Склады.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Номенклатура,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Характеристика,
	               |	СкладскиеПомещения.КР_ТипСкладскогоПомещения,
	               |	ОтборРазмещениеТоваров.Склад,
	               |	ОтборРазмещениеТоваров.Дата,
	               |	ОтборРазмещениеТоваров.Ответственный,
	               |	Склады.Подразделение,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(СкладскиеПомещения.КР_ТипСкладскогоПомещения, ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ТорговыйЗал)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)
	               |		ИНАЧЕ ОтборРазмещениеТоваровТоварыРазмещение.Ячейка
	               |	КОНЕЦ,
	               |	СОКРП(ВЫРАЗИТЬ(ОтборРазмещениеТоваров.Комментарий КАК СТРОКА(1024)))
	               |ИТОГИ
	               |	МАКСИМУМ(Склад),
	               |	МАКСИМУМ(Дата),
	               |	МАКСИМУМ(ВспомогательныйИдентификатор),
	               |	МАКСИМУМ(Ответственный),
	               |	МАКСИМУМ(Подразделение),
	               |	МАКСИМУМ(Комментарий)
	               |ПО
	               |	ТипСкладскогоПомещения";
	
	#КонецОбласти
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	Результат = Запрос.Выполнить();

	// ВыборкаЯчейкиОтбора - каждая группировка по типу помещения, есть отдельный документ.
	ВыборкаПоПомещению = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
	ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	// Требуется таблица значений, для использования готовых процедур
	ТаблицаТовары = Новый ТаблицаЗначений;
		
	ТаблицаТовары.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	ТаблицаТовары.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10));
 
	//// Инициализация предопределенной ячейка Приход базы Приемник
	//// 
	//ПравилоКонвертацииСсылки = ПолучитьПравилоКонвертацииСсылки(Тип("СправочникСсылка.СкладскиеЯчейки"));

	//ИмяТипаXDTO = ПравилоКонвертацииСсылки.ИмяТипаXDTO;
	//ЯчекаПриходXDTO = ПолучитьОбъектXDTO(ИмяТипаXDTO);
	//
	//ЯчекаПриходXDTO.Ref = "e31287a3-b1fe-11e9-83d0-48df3705d1b8"; // Предопределенная ячейка Приход базы Приемник
	//ЯчекаПриходXDTO.Name = "Приход";
	
	Пока ВыборкаПоПомещению.Следующий() Цикл
		
		ДокументXDTO = ПолучитьОбъектXDTO("GoodsRelocationObject");
		
		ДокументXDTO.DeletionMark 			= Ложь;
		ДокументXDTO.Posted 				= Истина;
		ДокументXDTO.DocDate 				= ВыборкаПоПомещению.Дата;
		ДокументXDTO.ToTradingHall 			= ВыборкаПоПомещению.ВТорговыйЗал;
		ДокументXDTO.AuxiliaryIdentifier 	= СокрЛП(ВыборкаПоПомещению.ВспомогательныйИдентификатор);
		ДокументXDTO.Comment 				= СокрЛП(ВыборкаПоПомещению.Комментарий);
		
		
		ПКО_СсылкаВXDTO(ВыборкаПоПомещению.Склад, ДокументXDTO.StorehousePick, СообщениеОбмена);
		ПКО_СсылкаВXDTO(ВыборкаПоПомещению.Склад, ДокументXDTO.StorehousePut, СообщениеОбмена);
		ПКО_СсылкаВXDTO(ВыборкаПоПомещению.Ответственный, ДокументXDTO.ResponsiblePerson, СообщениеОбмена);
		ПКО_СсылкаВXDTO(ВыборкаПоПомещению.Подразделение, ДокументXDTO.Department, СообщениеОбмена);
		ПКО_СсылкаВXDTO(ОрганизацияПоУмолчанию, ДокументXDTO.Organization, СообщениеОбмена);		
		//ПКО_СсылкаВXDTO(ВыборкаЯчейкиОтбора.ЯчейкаШапки, ДокументXDTO.Cell, СообщениеОбмена);		
		
		Выборка = ВыборкаПоПомещению.Выбрать();
		
		ТаблицаТовары.Очистить();
		
		// Требуется организовать счетчик строк, т.к. в процедурах используется обращение через номер строки
		Сч = 1;
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрокаТаблицы = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, Выборка);
			НоваяСтрокаТаблицы.НомерСтроки = Сч;
			НоваяСтрокаТаблицы.Ячейка = Выборка.ЯчейкаРазмещения;					
			Сч = Сч + 1;	
		КонецЦикла;	
		
		ПКО_GoodsDetailedRowsObject(ТаблицаТовары, ДокументXDTO.Goods, СообщениеОбмена);
		
		//Если ВыборкаПоПомещению.ТипСкладскогоПомещения = Перечисления.КР_ТипыСкладскихПомещений.СкладМагазина Тогда
		//	ДокументXDTO.Cell = ЯчекаПриходXDTO;
		//ИначеЕсли ВыборкаПоПомещению.ТипСкладскогоПомещения = Перечисления.КР_ТипыСкладскихПомещений.ТорговыйЗал Тогда
		//	// Всем ячейкам в таблице требуется присвоить предопределенное значение (Ячейка Приход)
		//	Для каждого СтрокаXDTO Из ДокументXDTO.Goods.GoodsDetailedSingleRow Цикл
		//		СтрокаXDTO.Cell = ЯчекаПриходXDTO;			
		//	КонецЦикла;
		//КонецЕсли;
		
		// Заполняем список подготовленных документов
		XDTOОбъект.Row.Добавить(ДокументXDTO);
		
	КонецЦикла;		
	
КонецПроцедуры

// Задача #3355
Процедура ПКО_ПеремещениеListDocumentsGoodsRelocationObjectRow(Источник, XDTOОбъект, СообщениеОбмена)
	
	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("ListDocumentsGoodsRelocationObjectRow");
	
	// Генерация документов выполняется только в случае если документ проведен,
	// в противном случае пакет будет нести только данных, необходимые для отмены
	// проведения документов в базе Приемник.
	Если Не Источник.Проведен Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ОтборРазмещениеТоваровТоварыОтбор.Ссылка КАК Ссылка,
	               |	ОтборРазмещениеТоваровТоварыОтбор.Ячейка КАК ЯчейкаОтбора,
	               |	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура КАК Номенклатура,
	               |	ОтборРазмещениеТоваровТоварыОтбор.Характеристика КАК Характеристика,
	               |	ОтборРазмещениеТоваровТоварыОтбор.Назначение КАК Назначение,
	               |	ОтборРазмещениеТоваровТоварыОтбор.Серия КАК Серия,
	               |	СУММА(ОтборРазмещениеТоваровТоварыОтбор.Количество) КАК Количество
	               |ПОМЕСТИТЬ ВТОтбор
	               |ИЗ
	               |	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ОтборРазмещениеТоваровТоварыОтбор
	               |ГДЕ
	               |	ОтборРазмещениеТоваровТоварыОтбор.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтборРазмещениеТоваровТоварыОтбор.Ячейка,
	               |	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура,
	               |	ОтборРазмещениеТоваровТоварыОтбор.Характеристика,
	               |	ОтборРазмещениеТоваровТоварыОтбор.Назначение,
	               |	ОтборРазмещениеТоваровТоварыОтбор.Серия,
	               |	ОтборРазмещениеТоваровТоварыОтбор.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Ссылка КАК Ссылка,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Ячейка КАК ЯчейкаРазмещения,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Номенклатура КАК Номенклатура,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Характеристика КАК Характеристика,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Назначение КАК Назначение,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Серия КАК Серия,
	               |	СУММА(ОтборРазмещениеТоваровТоварыРазмещение.Количество) КАК Количество
	               |ПОМЕСТИТЬ ВТРазмещение
	               |ИЗ
	               |	Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК ОтборРазмещениеТоваровТоварыРазмещение
	               |ГДЕ
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Ячейка,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Номенклатура,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Характеристика,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Назначение,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Серия,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТОтбор.Ссылка КАК Ссылка,
	               |	ВТОтбор.ЯчейкаОтбора КАК ЯчейкаОтбора,
	               |	ВТОтбор.Номенклатура КАК Номенклатура,
	               |	ВТОтбор.Характеристика КАК Характеристика,
	               |	ВТОтбор.Назначение КАК Назначение,
	               |	ВТОтбор.Серия КАК Серия,
	               |	ЕСТЬNULL(СУММА(ВТОтбор1.Количество), 0) + ВТОтбор.Количество КАК ПорядокРаспределенияПо,
	               |	ЕСТЬNULL(СУММА(ВТОтбор1.Количество), 0) + 1 КАК ПорядокРаспределенияС,
	               |	ВТОтбор.Количество КАК Количество
	               |ПОМЕСТИТЬ ВТОтборПоПорядку
	               |ИЗ
	               |	ВТОтбор КАК ВТОтбор
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтбор КАК ВТОтбор1
	               |		ПО ВТОтбор.ЯчейкаОтбора > ВТОтбор1.ЯчейкаОтбора
	               |			И ВТОтбор.Номенклатура = ВТОтбор1.Номенклатура
	               |			И ВТОтбор.Характеристика = ВТОтбор1.Характеристика
	               |			И ВТОтбор.Назначение = ВТОтбор1.Назначение
	               |			И ВТОтбор.Серия = ВТОтбор1.Серия
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТОтбор.Количество,
	               |	ВТОтбор.ЯчейкаОтбора,
	               |	ВТОтбор.Номенклатура,
	               |	ВТОтбор.Характеристика,
	               |	ВТОтбор.Назначение,
	               |	ВТОтбор.Серия,
	               |	ВТОтбор.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТРазмещение.Ссылка КАК Ссылка,
	               |	ВТРазмещение.ЯчейкаРазмещения КАК ЯчейкаРазмещения,
	               |	ВТРазмещение.Номенклатура КАК Номенклатура,
	               |	ВТРазмещение.Характеристика КАК Характеристика,
	               |	ВТРазмещение.Назначение КАК Назначение,
	               |	ВТРазмещение.Серия КАК Серия,
	               |	ЕСТЬNULL(СУММА(ВТРазмещение1.Количество), 0) + ВТРазмещение.Количество КАК ПорядокРаспределенияПо,
	               |	ЕСТЬNULL(СУММА(ВТРазмещение1.Количество), 0) + 1 КАК ПорядокРаспределенияС,
	               |	ВТРазмещение.Количество КАК Количество
	               |ПОМЕСТИТЬ ВТРазмещениеПоПорядку
	               |ИЗ
	               |	ВТРазмещение КАК ВТРазмещение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмещение КАК ВТРазмещение1
	               |		ПО ВТРазмещение.ЯчейкаРазмещения > ВТРазмещение1.ЯчейкаРазмещения
	               |			И ВТРазмещение.Номенклатура = ВТРазмещение1.Номенклатура
	               |			И ВТРазмещение.Характеристика = ВТРазмещение1.Характеристика
	               |			И ВТРазмещение.Назначение = ВТРазмещение1.Назначение
	               |			И ВТРазмещение.Серия = ВТРазмещение1.Серия
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТРазмещение.ЯчейкаРазмещения,
	               |	ВТРазмещение.Количество,
	               |	ВТРазмещение.Номенклатура,
	               |	ВТРазмещение.Ссылка,
	               |	ВТРазмещение.Характеристика,
	               |	ВТРазмещение.Назначение,
	               |	ВТРазмещение.Серия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТОтборПоПорядку.ЯчейкаОтбора КАК ЯчейкаОтбора,
	               |	ВТРазмещениеПоПорядку.ЯчейкаРазмещения КАК ЯчейкаРазмещения,
	               |	ВТОтборПоПорядку.Номенклатура КАК Номенклатура,
	               |	ВТОтборПоПорядку.Характеристика КАК Характеристика,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВТРазмещениеПоПорядку.ПорядокРаспределенияПо < ВТОтборПоПорядку.ПорядокРаспределенияПо
	               |				ТОГДА ВТРазмещениеПоПорядку.ПорядокРаспределенияПо
	               |			ИНАЧЕ ВТОтборПоПорядку.ПорядокРаспределенияПо
	               |		КОНЕЦ - ВЫБОР
	               |			КОГДА ВТРазмещениеПоПорядку.ПорядокРаспределенияС > ВТОтборПоПорядку.ПорядокРаспределенияС
	               |				ТОГДА ВТРазмещениеПоПорядку.ПорядокРаспределенияС
	               |			ИНАЧЕ ВТОтборПоПорядку.ПорядокРаспределенияС
	               |		КОНЕЦ + 1) КАК Количество,
	               |	ВТОтборПоПорядку.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТРезультат
	               |ИЗ
	               |	ВТОтборПоПорядку КАК ВТОтборПоПорядку
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРазмещениеПоПорядку КАК ВТРазмещениеПоПорядку
	               |		ПО ВТОтборПоПорядку.ПорядокРаспределенияС <= ВТРазмещениеПоПорядку.ПорядокРаспределенияПо
	               |			И ВТОтборПоПорядку.ПорядокРаспределенияПо >= ВТРазмещениеПоПорядку.ПорядокРаспределенияС
	               |			И ВТОтборПоПорядку.Номенклатура = ВТРазмещениеПоПорядку.Номенклатура
	               |			И ВТОтборПоПорядку.Характеристика = ВТРазмещениеПоПорядку.Характеристика
	               |			И ВТОтборПоПорядку.Назначение = ВТРазмещениеПоПорядку.Назначение
	               |			И ВТОтборПоПорядку.Серия = ВТРазмещениеПоПорядку.Серия
	               |			И ВТОтборПоПорядку.Ссылка = ВТРазмещениеПоПорядку.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТОтборПоПорядку.ЯчейкаОтбора,
	               |	ВТОтборПоПорядку.Номенклатура,
	               |	ВТОтборПоПорядку.Характеристика,
	               |	ВТРазмещениеПоПорядку.ЯчейкаРазмещения,
	               |	ВТОтборПоПорядку.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТРезультат.ЯчейкаОтбора КАК Группировка,
	               |	ВТРезультат.ЯчейкаРазмещения КАК ЯчейкаТаблицы,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(СкладскиеПомещенияРазмещения.КР_ТипСкладскогоПомещения, ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ТорговыйЗал)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ЕСТЬNULL(СкладскиеПомещенияОтбора.КР_ТипСкладскогоПомещения, ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ТорговыйЗал)
	               |					ТОГДА ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)
	               |				ИНАЧЕ ВТРезультат.ЯчейкаОтбора
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ЯчейкаШапки,
	               |	ЛОЖЬ КАК ВТорговыйЗал,
	               |	ВТРезультат.Номенклатура КАК Номенклатура,
	               |	ВТРезультат.Характеристика КАК Характеристика,
	               |	ВТРезультат.Количество КАК Количество,
	               |	ВТРезультат.Ссылка КАК Ссылка,
	               |	ОтборРазмещениеТоваров.Дата КАК Дата,
	               |	ОтборРазмещениеТоваров.Склад КАК Склад,
	               |	ОтборРазмещениеТоваров.Ответственный КАК Ответственный,
	               |	Склады.Подразделение КАК Подразделение,
	               |	ЕСТЬNULL(СкладскиеПомещенияРазмещения.КР_ТипСкладскогоПомещения, ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ПустаяСсылка)) КАК ТипСкладскогоПомещенияРазмещения,
	               |	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВТРезультат.ЯчейкаОтбора) КАК ВспомогательныйИдентификатор
	               |ИЗ
	               |	ВТРезультат КАК ВТРезультат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
	               |		ПО ВТРезультат.Ссылка = ОтборРазмещениеТоваров.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	               |		ПО (ОтборРазмещениеТоваров.Склад = Склады.Ссылка)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиРазмещения
	               |		ПО ВТРезультат.ЯчейкаРазмещения = СкладскиеЯчейкиРазмещения.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкладскиеПомещения КАК СкладскиеПомещенияРазмещения
	               |		ПО (СкладскиеЯчейкиРазмещения.Помещение = СкладскиеПомещенияРазмещения.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиОтбора
	               |		ПО ВТРезультат.ЯчейкаОтбора = СкладскиеЯчейкиОтбора.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеПомещения КАК СкладскиеПомещенияОтбора
	               |		ПО (СкладскиеЯчейкиОтбора.Помещение = СкладскиеПомещенияОтбора.Ссылка)
	               |ГДЕ
	               |	СкладскиеПомещенияРазмещения.КР_ТипСкладскогоПомещения <> ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ТорговыйЗал)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТРезультат.ЯчейкаРазмещения,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(СкладскиеПомещенияОтбора.КР_ТипСкладскогоПомещения, ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ТорговыйЗал)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ЕСТЬNULL(СкладскиеПомещенияОтбора.КР_ТипСкладскогоПомещения, ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ТорговыйЗал)
	               |					ТОГДА ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)
	               |				ИНАЧЕ ВТРезультат.ЯчейкаОтбора
	               |			КОНЕЦ
	               |	КОНЕЦ,
	               |	ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка),
	               |	ИСТИНА,
	               |	ВТРезультат.Номенклатура,
	               |	ВТРезультат.Характеристика,
	               |	ВТРезультат.Количество,
	               |	ВТРезультат.Ссылка,
	               |	ОтборРазмещениеТоваров.Дата,
	               |	ОтборРазмещениеТоваров.Склад,
	               |	ОтборРазмещениеТоваров.Ответственный,
	               |	Склады.Подразделение,
	               |	ЕСТЬNULL(СкладскиеПомещенияРазмещения.КР_ТипСкладскогоПомещения, ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ПустаяСсылка)),
	               |	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(СкладскиеПомещенияРазмещения.КР_ТипСкладскогоПомещения)
	               |ИЗ
	               |	ВТРезультат КАК ВТРезультат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
	               |		ПО ВТРезультат.Ссылка = ОтборРазмещениеТоваров.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	               |		ПО (ОтборРазмещениеТоваров.Склад = Склады.Ссылка)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиРазмещения
	               |		ПО ВТРезультат.ЯчейкаРазмещения = СкладскиеЯчейкиРазмещения.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкладскиеПомещения КАК СкладскиеПомещенияРазмещения
	               |		ПО (СкладскиеЯчейкиРазмещения.Помещение = СкладскиеПомещенияРазмещения.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиОтбора
	               |		ПО ВТРезультат.ЯчейкаОтбора = СкладскиеЯчейкиОтбора.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеПомещения КАК СкладскиеПомещенияОтбора
	               |		ПО (СкладскиеЯчейкиОтбора.Помещение = СкладскиеПомещенияОтбора.Ссылка)
	               |ГДЕ
	               |	СкладскиеПомещенияРазмещения.КР_ТипСкладскогоПомещения = ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ТорговыйЗал)
	               |ИТОГИ
	               |	МАКСИМУМ(ЯчейкаШапки),
	               |	МАКСИМУМ(ВТорговыйЗал),
	               |	МАКСИМУМ(Дата),
	               |	МАКСИМУМ(Склад),
	               |	МАКСИМУМ(Ответственный),
	               |	МАКСИМУМ(Подразделение),
	               |	МАКСИМУМ(ВспомогательныйИдентификатор)
	               |ПО
	               |	Группировка";
	
	#КонецОбласти
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	Результат = Запрос.Выполнить();

	// ВыборкаПоГруппировкам - каждая группировка по ячейки, есть отдельный документ.
	ВыборкаПоГруппировкам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
	ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	// Требуется таблица значений, для использования готовых процедур
	ТаблицаТовары = Новый ТаблицаЗначений;
		
	ТаблицаТовары.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	ТаблицаТовары.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10));
		
	Пока ВыборкаПоГруппировкам.Следующий() Цикл
		
		ДокументXDTO = ПолучитьОбъектXDTO("GoodsRelocationObject");
		
		ДокументXDTO.DeletionMark 			= Ложь;
		ДокументXDTO.Posted 				= Истина;
		ДокументXDTO.DocDate 				= ВыборкаПоГруппировкам.Дата;
		ДокументXDTO.ToTradingHall 			= ВыборкаПоГруппировкам.ВТорговыйЗал;
		ДокументXDTO.AuxiliaryIdentifier 	= СокрЛП(ВыборкаПоГруппировкам.ВспомогательныйИдентификатор);
		
		ПКО_СсылкаВXDTO(ВыборкаПоГруппировкам.Склад, ДокументXDTO.StorehousePick, СообщениеОбмена);
		ПКО_СсылкаВXDTO(ВыборкаПоГруппировкам.Склад, ДокументXDTO.StorehousePut, СообщениеОбмена);
		ПКО_СсылкаВXDTO(ВыборкаПоГруппировкам.Ответственный, ДокументXDTO.ResponsiblePerson, СообщениеОбмена);
		ПКО_СсылкаВXDTO(ВыборкаПоГруппировкам.Подразделение, ДокументXDTO.Department, СообщениеОбмена);
		ПКО_СсылкаВXDTO(ОрганизацияПоУмолчанию, ДокументXDTO.Organization, СообщениеОбмена);		
		ПКО_СсылкаВXDTO(ВыборкаПоГруппировкам.ЯчейкаШапки, ДокументXDTO.Cell, СообщениеОбмена);		
		
		Выборка = ВыборкаПоГруппировкам.Выбрать();
		
		ТаблицаТовары.Очистить();
		
		// Требуется организовать счетчик строк, т.к. в процедурах используется обращение через номер строки
		Сч = 1;
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрокаТаблицы = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, Выборка);
			НоваяСтрокаТаблицы.НомерСтроки = Сч;
			НоваяСтрокаТаблицы.Ячейка = Выборка.ЯчейкаТаблицы;
			Сч = Сч + 1;	
		КонецЦикла;	
		
		ПКО_GoodsDetailedRowsObject(ТаблицаТовары, ДокументXDTO.Goods, СообщениеОбмена);
		
		// Заполняем список подготовленных документов
		XDTOОбъект.Row.Добавить(ДокументXDTO);
		
	КонецЦикла;		
	
КонецПроцедуры
// <-- Евлахов Игорь Николаевич (Конец) 27.11.2023

// << 29.05.2024 Петухов А.В., Фактор, #4123
Функция ПКО_ОтчетОСписанииТоваровУХранителя(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена);

	// Номер формируется в УТ10 для исключения коллизий
	XDTOОбъект.DocNum = "";
		
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);
	СкладХранителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Подразделение, "КР_Склад");
	ПКО_СсылкаВXDTO(СкладХранителя, XDTOОбъект.Storehouse, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Автор, XDTOОбъект.ResponsiblePerson, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена);   
	
	СтатьяРасходовСписаниеБрак = КР_ДополнительныеНастройкиПовтИсп.Значение("СтатьяРасходовСписаниеБрак");
	СтатьяРасходовДляСписанияНедостачТоваров = КР_ДополнительныеНастройкиПовтИсп.Значение("СтатьяРасходовДляСписанияНедостачТоваров");
	Если Источник.СтатьяРасходов = СтатьяРасходовСписаниеБрак Тогда 
		XDTOОбъект.DocOperationType = "Брак";
	ИначеЕсли Источник.СтатьяРасходов = СтатьяРасходовДляСписанияНедостачТоваров Тогда 
		XDTOОбъект.DocOperationType = "ПоРезультатамИнвентаризации"; 
	Иначе
		XDTOОбъект.DocOperationType = "Прочие"; 
	КонецЕсли;	
	
	XDTOОбъект.Comment = Источник.Комментарий;   
		
	ПКО_GoodsDetailedRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_ОприходованиеИзлишковТоваровУХранителя(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена);

	// Номер формируется в УТ10 для исключения коллизий
	XDTOОбъект.DocNum = "";
		
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);
	СкладХранителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Подразделение, "КР_Склад");
	ПКО_СсылкаВXDTO(СкладХранителя, XDTOОбъект.Storehouse, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Ответственный, XDTOОбъект.ResponsiblePerson, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена);   
	
	XDTOОбъект.Comment = Источник.Комментарий;   
		
	ПКО_GoodsDetailedRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции
// >> 29.05.2024 Петухов А.В., Фактор, #4123

// << 29.05.2024 Петухов А.В., Фактор, #4155
Функция ПКО_ПриобретениеТоваровУслуг(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена); 
	
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Склад, XDTOОбъект.Storehouse, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Контрагент, XDTOОбъект.Counterparty, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Договор, XDTOОбъект.CounterpartyAgreement, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Менеджер, XDTOОбъект.User, СообщениеОбмена);    
	XDTOОбъект.VATTaxation = XMLСтрока(Источник.НалогообложениеНДС);
    XDTOОбъект.DocSum = Источник.СуммаДокумента;
    XDTOОбъект.Comment = Источник.Комментарий;
	XDTOОбъект.PriceIncludesVAT = XMLСтрока(Источник.ЦенаВключаетНДС);
    XDTOОбъект.Repurchase = Источник.злОбратныйВыкуп;
	
	ПКО_GoodsDetailedWithSumRowsObject(Источник.Товары, XDTOОбъект.Goods, СообщениеОбмена);
    XDTOОбъект.Services = ПолучитьОбъектXDTO("ServicesDetailedRowsObject");
		
	Возврат Истина;
	
КонецФункции
// >> 29.05.2024 Петухов А.В., Фактор, #4155

// << 31.05.2024 Петухов А.В., Фактор, #4162
Функция ПКО_ПриобретениеУслугПрочихАктивов(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена); 
	
	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Подразделение, XDTOОбъект.Department, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Контрагент, XDTOОбъект.Counterparty, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Договор, XDTOОбъект.CounterpartyAgreement, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Менеджер, XDTOОбъект.User, СообщениеОбмена);    
	XDTOОбъект.VATTaxation = XMLСтрока(Источник.НалогообложениеНДС);
    XDTOОбъект.DocSum = Источник.СуммаДокумента;
    XDTOОбъект.Comment = Источник.Комментарий;
	XDTOОбъект.PriceIncludesVAT = XMLСтрока(Источник.ЦенаВключаетНДС);
    XDTOОбъект.Repurchase = XMLСтрока(Ложь);
	
    XDTOОбъект.Goods = ПолучитьОбъектXDTO("GoodsDetailedWithSumRowsObject");
	ПКО_ServicesDetailedRowsObject(Источник.Расходы, XDTOОбъект.Services, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции
// >> 31.05.2024 Петухов А.В., Фактор, #4162

// << 23.08.2024 Петухов А.В., Фактор, #4476
Функция ПКО_АктОРасхожденияхПослеПеремещения(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена); 

	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.СкладОтправитель, XDTOОбъект.StorehousePick, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.СкладПолучатель, XDTOОбъект.StorehousePut, СообщениеОбмена);
	ПКО_СсылкаВXDTO(Источник.Менеджер, XDTOОбъект.ResponsiblePerson, СообщениеОбмена);
    XDTOОбъект.Comment = Источник.Комментарий;
	
    XDTOОбъект.Goods = ПолучитьОбъектXDTO("GoodsDetailedRowsObject");
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ТребуетсяВыгрузкаДокументаОснования", "ДокументОснование");
	
	//Сворачиваем товары, иначе при загрузке в УТ10 возникают ошибки
	тбзТовары = Источник.Товары.Выгрузить(,"Номенклатура,Характеристика,Количество,ДокументОснование");
	тбзТовары.Свернуть("Номенклатура,Характеристика,ДокументОснование","Количество");
	тбзТовары.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	НомерСтроки = 1;
	Для Каждого Строка Из тбзТовары Цикл
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	ПКО_GoodsDetailedRowsObject(тбзТовары, XDTOОбъект.Goods, СообщениеОбмена, ДопПараметры);
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_АктОРасхожденияхПослеОтгрузки(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);

	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаполнитьОбщиеПоляXDTOДокумента(
		XDTOОбъект, Источник, СообщениеОбмена); 

	ПКО_СсылкаВXDTO(Источник.Организация, XDTOОбъект.Organization, СообщениеОбмена);    
	ПКО_СсылкаВXDTO(Источник.Менеджер, XDTOОбъект.ResponsiblePerson, СообщениеОбмена);
    XDTOОбъект.Comment = Источник.Комментарий;
	
    XDTOОбъект.Goods = ПолучитьОбъектXDTO("GoodsDetailedRowsObject");
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ТребуетсяВыгрузкаДокументаОснования", "Реализация");

	//Сворачиваем товары, иначе при загрузке в УТ10 возникают ошибки
	тбзТовары = Источник.Товары.Выгрузить(,"Номенклатура,Характеристика,Количество,Реализация");
	тбзТовары.Свернуть("Номенклатура,Характеристика,Реализация","Количество");
	тбзТовары.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	НомерСтроки = 1;
	Для Каждого Строка Из тбзТовары Цикл
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	ПКО_GoodsDetailedRowsObject(тбзТовары, XDTOОбъект.Goods, СообщениеОбмена, ДопПараметры);
		
	Возврат Истина;
	
КонецФункции
// >> 23.08.2024 Петухов А.В., Фактор, #4476

#КонецОбласти

#Область РегистрыСведений

// Выгружаются в качестве дижений, отбор по Источнику.ссылка
#Область ЗависимыеРегистры

Функция ПКО_ДвиженияРегистраШтрихкодыWb(Источник, XDTOОбъект, СообщениеОбмена)
	
    XDTOОбъект = ПолучитьОбъектXDTO("WBBarcodeInfoRegObject"); 
	
	XDTOОтбор = ПолучитьОбъектXDTO("WBBarcodeInfoRegSelectionObject");
	XDTOОбъект.WBBarcodeInfoRegSelection = XDTOОтбор;  
	
	ПКО_СсылкаВXDTO(Источник.Ссылка, XDTOОтбор.ClientOrder, СообщениеОбмена);
	
	XDTOЗаписи = ПолучитьОбъектXDTO("WBBarcodeInfoRegRecordSetObject");	
	XDTOОбъект.WBBarcodeInfoRegRecordSet = XDTOЗаписи;
		
	// Выполним запрос к данным
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КР_ШтрихкодыWb.ЗаявкаМагазина КАК ЗаявкаМагазина,
	|	КР_ШтрихкодыWb.ШтрихкодWb КАК Штрихкод,
	|	КР_ШтрихкодыWb.УпаковочныйЛист КАК УпаковочныйЛист
	|ИЗ
	|	РегистрСведений.КР_ШтрихкодыWb КАК КР_ШтрихкодыWb
	|ГДЕ
	|	КР_ШтрихкодыWb.ЗаявкаМагазина = &ЗаказКлиента"
	;
			
	Запрос = Новый Запрос(ТекстЗапроса);                      
	Запрос.УстановитьПараметр("ЗаказКлиента", Источник.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		СтрокаПакета = ПолучитьОбъектXDTO("WBBarcodeInfoRegRecordObject");
		ПКО_СсылкаВXDTO(ВыборкаДетальныеЗаписи.ЗаявкаМагазина, СтрокаПакета.ClientOrder, СообщениеОбмена);
		СтрокаПакета.WBBarcode = ВыборкаДетальныеЗаписи.Штрихкод;
		ПКО_СсылкаВXDTO(ВыборкаДетальныеЗаписи.УпаковочныйЛист, СтрокаПакета.Box, СообщениеОбмена);
		
		XDTOЗаписи.WBBarcodeInfoRegRecord.Добавить(СтрокаПакета);	
		
	КонецЦикла;	

	Возврат Истина;
	
КонецФункции

#КонецОбласти

// Выгружаются по подписке из наборов записей
#Область НезависимыеРегистры       

Функция ПКО_ДокументыФизическихЛиц(Источник, XDTOОбъект, СообщениеОбмена)

    XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных); 
	
	ИсточникОтбор = Источник.Отбор;
	
	// Установми отборы                              
	XDTOОбъект.IdentityPapersInfoRegSelection = ПолучитьОбъектXDTO("IdentityPapersInfoRegSelectionObject");
	XDTOОтбор = XDTOОбъект.IdentityPapersInfoRegSelection; 
	
	Период = ИсточникОтбор.Период.Значение;
	Физлицо = ИсточникОтбор.Физлицо.Значение;
	ВидДокумента = ИсточникОтбор.ВидДокумента.Значение.Наименование;
	
	XDTOОтбор.Period = Период;
	ПКО_СсылкаВXDTO(Физлицо, XDTOОтбор.Individual, СообщениеОбмена);
	XDTOОтбор.DocType = ВидДокумента;
	
	XDTOОбъект.IdentityPapersInfoInfoRegRecordSet = ПолучитьОбъектXDTO("IdentityPapersInfoRegRecordSetObject");
	
	Если СообщениеОбмена.ЭтоУдаление Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Запись Из Источник Цикл 
		
		СтрокаПакета = ПолучитьОбъектXDTO("IdentityPapersInfoInfoRegRecordObject");   
		СтрокаПакета.Period = Период;
		ПКО_СсылкаВXDTO(Физлицо, СтрокаПакета.Individual, СообщениеОбмена);
		СтрокаПакета.DocType = ВидДокумента;
		
		//
		СтрокаПакета.DocSeries = Запись.Серия;
		СтрокаПакета.DocNumber = Запись.Номер;
		СтрокаПакета.IssueDate = Запись.ДатаВыдачи;
		СтрокаПакета.ExpDate = Запись.СрокДействия;
		СтрокаПакета.IssueDept = Запись.КемВыдан;
		СтрокаПакета.IssueDeptID = Запись.КодПодразделения;
			
		XDTOОбъект.IdentityPapersInfoInfoRegRecordSet.IdentityPapersInfoInfoRegRecord.Add(СтрокаПакета);    
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_КР_СведенияНоменклатурыПланирование(Источник, XDTOОбъект, СообщениеОбмена)

    XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных); 
	
	ИсточникОтбор = Источник.Отбор;
	
	// Установми отборы                              
	XDTOОбъект.NomenclatureInfoPlanningSelection = ПолучитьОбъектXDTO("NomenclatureInfoPlanningSelectionObject");
	XDTOОтбор = XDTOОбъект.NomenclatureInfoPlanningSelection; 
	
	Артикул = ИсточникОтбор.Номенклатура.Значение.Артикул;
	XDTOОтбор.Article = Артикул;
	
	XDTOОбъект.NomenclatureInfoPlanningRecordSet = ПолучитьОбъектXDTO("NomenclatureInfoPlanningRecordSetObject");
	
	Если СообщениеОбмена.ЭтоУдаление Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Запись Из Источник Цикл 
		
		СтрокаПакета = ПолучитьОбъектXDTO("NomenclatureInfoPlanningRecordObject");   
		СтрокаПакета.Article = Артикул;
		
		//
		СтрокаПакета.Theme = Запись.Тема.Код;
		СтрокаПакета.Pendant = Запись.Подвеска.Код;
			
		XDTOОбъект.NomenclatureInfoPlanningRecordSet.NomenclatureInfoPlanningRecord.Add(СтрокаПакета);    
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_КР_СведенияНоменклатурыТоварнаяАналитика(Источник, XDTOОбъект, СообщениеОбмена)

    XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных); 
	
	ИсточникОтбор = Источник.Отбор;
	
	// Установми отборы                              
	XDTOОбъект.NomenclatureInfoAnalyticsSelection = ПолучитьОбъектXDTO("NomenclatureInfoAnalyticsSelectionObject");
	XDTOОтбор = XDTOОбъект.NomenclatureInfoAnalyticsSelection; 
	
	Артикул = ИсточникОтбор.Номенклатура.Значение.Артикул;
	XDTOОтбор.Article = Артикул;
	
	XDTOОбъект.NomenclatureInfoAnalyticsRecordSet = ПолучитьОбъектXDTO("NomenclatureInfoAnalyticsRecordSetObject");
	
	Если СообщениеОбмена.ЭтоУдаление Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Запись Из Источник Цикл 
		
		СтрокаПакета = ПолучитьОбъектXDTO("NomenclatureInfoAnalyticsRecordObject");   
		СтрокаПакета.Article = Артикул;
		
		//
		СтрокаПакета.LifeSpan = Запись.СрокЖизни;
		СтрокаПакета.ExposureTime = Запись.СрокЭкспозиции;
			
		XDTOОбъект.NomenclatureInfoAnalyticsRecordSet.NomenclatureInfoAnalyticsRecord.Add(СтрокаПакета);    
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_ДополнительныеСведения(Источник, XDTOОбъект, СообщениеОбмена)

    XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных); 
	
	ИсточникОтбор = Источник.Отбор;
	
	// Установми отборы                              
	XDTOОбъект.LiquiditySelection = ПолучитьОбъектXDTO("LiquiditySelectionObject");
	XDTOОтбор = XDTOОбъект.LiquiditySelection; 
	
	Артикул = ИсточникОтбор.Объект.Значение.Артикул;
	XDTOОтбор.Article = Артикул;
	
	XDTOОбъект.LiquidityRecordSet = ПолучитьОбъектXDTO("LiquidityRecordSetObject");
	
	Если СообщениеОбмена.ЭтоУдаление Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Запись Из Источник Цикл 
		
		СтрокаПакета = ПолучитьОбъектXDTO("LiquidityRecordObject");   
		СтрокаПакета.Article = Артикул;
		
		//
		СтрокаПакета.Liquidity = Строка(Запись.Значение);
			
		XDTOОбъект.LiquidityRecordSet.LiquidityRecord.Add(СтрокаПакета);    
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_КР_ИсторияИзмененийСезонаНоменклатуры(Источник, XDTOОбъект, СообщениеОбмена)

    XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных); 
	
	ИсточникОтбор = Источник.Отбор;
	
	// Установми отборы                              
	XDTOОбъект.ActualSeasonSelection = ПолучитьОбъектXDTO("ActualSeasonSelectionObject");
	XDTOОтбор = XDTOОбъект.ActualSeasonSelection; 
	
	Период = ИсточникОтбор.Период.Значение;
	Артикул = ИсточникОтбор.Номенклатура.Значение.Артикул;
	XDTOОтбор.Period = Период;
	XDTOОтбор.Article = Артикул;
	
	XDTOОбъект.ActualSeasonRecordSet = ПолучитьОбъектXDTO("ActualSeasonRecordSetObject");
	
	Если СообщениеОбмена.ЭтоУдаление Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Запись Из Источник Цикл 
		
		СтрокаПакета = ПолучитьОбъектXDTO("ActualSeasonRecordObject");   
		СтрокаПакета.Period = Период;
		СтрокаПакета.Article = Артикул;
		
		//
		СтрокаПакета.Season = Запись.Сезон.Наименование;

		// A2105505-2211
		ПКО_СсылкаВXDTO(Запись.Номенклатура.КоллекцияНоменклатуры, СтрокаПакета.Collection, СообщениеОбмена);
		//
		
		XDTOОбъект.ActualSeasonRecordSet.ActualSeasonRecord.Add(СтрокаПакета);    
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_КР_ОшибкиПоискаДанныхИнтеграции(Источник, XDTOОбъект, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных);
	
	XDTOОбъект.Sender = Источник.Отправитель.Наименование;   
	
	// A2105505-1606
	ФрагментТекстаTypeBoxRef = """#type"": ""BoxRef"""; 
	ФрагментТекстаNumber2 = """Number"": ""2"; 
	ФрагментТекстаNumber3 = """Number"": ""3"; 
		
	Если СтрНайти(Источник.ИсходныеДанные, ФрагментТекстаTypeBoxRef)
			И (
				СтрНайти(Источник.ИсходныеДанные, ФрагментТекстаNumber2)
				Или СтрНайти(Источник.ИсходныеДанные, ФрагментТекстаNumber3)   
			)
		Тогда   
		
		XDTOОбъект.Sender = "Logistics81";  
		
	Иначе	
		
		XDTOОбъект.Sender = "УТ10 ЦБ";  

	КонецЕсли;	
	//       
	
	// A2105505-1635
	ФрагментТекстаTypeContainerRef = """#type"": ""ContainerRef""";      
	Если СтрНайти(Источник.ИсходныеДанные, ФрагментТекстаTypeContainerRef)
		Тогда   
		
		XDTOОбъект.Sender = "Logistics81";  
		
	КонецЕсли;	
	//
	
	XDTOОбъект.PackageData = Источник.ИсходныеДанные; 
		
	Возврат Истина;
	
КонецФункции

// --> Евлахов Игорь Николаевич (Начало) 28.12.2023
// Задача #3516
Функция ПКО_злПланыПродажПоМагазинам(Источник, XDTOОбъект, СообщениеОбмена)

    XDTOОбъект = ПолучитьОбъектXDTO(СообщениеОбмена.ТипДанных); 
	
	ИсточникОтбор = Источник.Отбор;
	
	// Установим отборы                              
	XDTOОбъект.SalesPlansInfoRegSelection = ПолучитьОбъектXDTO("SalesPlansInfoRegSelectionObject");
	XDTOОтбор = XDTOОбъект.SalesPlansInfoRegSelection; 
	
	Период 	= ИсточникОтбор.Период.Значение;
	Склад 	= ИсточникОтбор.Магазин.Значение;
	
	XDTOОтбор.Period = Период;
	
	ПКО_СсылкаВXDTO(Склад, XDTOОтбор.Storehouse, СообщениеОбмена);
	
	XDTOОбъект.SalesPlansInfoRegRecordSet = ПолучитьОбъектXDTO("SalesPlansInfoRegRecordSetObject");
	
	Если СообщениеОбмена.ЭтоУдаление Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Запись Из Источник Цикл		
		СтрокаПакета = ПолучитьОбъектXDTO("SalesPlansInfoRegRecordObject");
		
		СтрокаПакета.Period  		= Период;
		СтрокаПакета.AmountSales 	= Запись.СуммаПродаж;
		
	   	ПКО_СсылкаВXDTO(Склад, СтрокаПакета.Storehouse, СообщениеОбмена);
		
		XDTOОбъект.SalesPlansInfoRegRecordSet.SalesPlansInfoRegRecord.Add(СтрокаПакета);		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
// <-- Евлахов Игорь Николаевич (Конец) 28.12.2023

#КонецОбласти  

#КонецОбласти

#Область ПрочиеОбъекты 

#Область ТабличныеЧасти
 
// << 06.05.2024 Петухов А.В., Фактор, #3938
//// << 05.02.2024 Петухов А.В., Фактор, #3628
////Функция ПКО_GoodsDetailedRowsObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена) 
//Функция ПКО_GoodsDetailedRowsObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена, ВыполнятьПреобразованиеКоробов = Ложь) 
//// >> 05.02.2024 Петухов А.В., Фактор, #3628
Функция ПКО_GoodsDetailedRowsObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена, ДополнительныеПараметры = Неопределено) 

	ВыполнятьПреобразованиеКоробов = Ложь;
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ВыполнятьПреобразованиеКоробов") Тогда
			ВыполнятьПреобразованиеКоробов = ДополнительныеПараметры.ВыполнятьПреобразованиеКоробов;
		КонецЕсли;
	Иначе
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
// >> 06.05.2024 Петухов А.В., Фактор, #3938
	
	// Конвертируем Номенклатуру/Характеристику в "Данные номенклатуры" пакетно   
	ДанныеНоменклатуры = ПКО_НоменклатураХарактеристикаПакетно(ТабличнаяЧасть, СообщениеОбмена);

// << 05.02.2024 Петухов А.В., Фактор, #3628
	// сооответствие преобразования коробов в ОтборРазмещениеТоваров
	Если ВыполнятьПреобразованиеКоробов Тогда
		соотДанныеКоробов = ДанныеКоробовПакетно(ТабличнаяЧасть);
	КонецЕсли;
// >> 05.02.2024 Петухов А.В., Фактор, #3628
	
	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("GoodsDetailedRowsObject");
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл 
		
		СтрокаДанныхНоменклатуры = ДанныеНоменклатуры[СтрокаДанных.НомерСтроки - 1];
		
		СтрокаПакета = ПолучитьОбъектXDTO("GoodsDetailedSingleRowObject");
		ЗаполнитьЗначенияСвойств(СтрокаПакета, СтрокаДанныхНоменклатуры);
		
		СтрокаПакета.Quantity = СтрокаДанных.Количество;  
		
		// << 20.07.2023 Марченко С.Н., КРОК, JIRA№A2105505-2003
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			СтрокаДанных, "КоличествоФакт") Тогда    
			СтрокаПакета.ActualQuantity = СтрокаДанных.КоличествоФакт;  
		КонецЕсли;	
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			СтрокаДанных, "Цена") Тогда    
			СтрокаПакета.Price = СтрокаДанных.Цена;  
		КонецЕсли;	
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			СтрокаДанных, "ФизическоеЛицо") Тогда    
			ПКО_СсылкаВXDTO(СтрокаДанных.ФизическоеЛицо, СтрокаПакета.Individual, СообщениеОбмена);
		КонецЕсли;	
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			СтрокаДанных, "ЗаказНаВнутреннееПотребление") Тогда   
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("СсылкаТип", Тип("ДокументСсылка.ЗаказНаПеремещение"));
			
			ПКО_СсылкаВXDTO(СтрокаДанных.ЗаказНаВнутреннееПотребление, СтрокаПакета.GoodsRelocationOrder, СообщениеОбмена,
				ДополнительныеПараметры);
				
		КонецЕсли;	
		// >> 20.07.2023 Марченко С.Н., КРОК, JIRA№A2105505-2003 
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			СтрокаДанных, "КР_Короб") Тогда    
// << 05.02.2024 Петухов А.В., Фактор, #3628
			//ПКО_СсылкаВXDTO(СтрокаДанных.КР_Короб, СтрокаПакета.Box, СообщениеОбмена);
			Если ВыполнятьПреобразованиеКоробов Тогда
				сткДанныеКороба = соотДанныеКоробов[СтрокаДанных.КР_Короб];
				Если сткДанныеКороба<>Неопределено Тогда
					ПКО_СсылкаВXDTO(сткДанныеКороба.Ссылка, СтрокаПакета.Box, СообщениеОбмена);
					СтрокаПакета.Box.Number = сткДанныеКороба.Код;
				КонецЕсли;
			Иначе
				ПКО_СсылкаВXDTO(СтрокаДанных.КР_Короб, СтрокаПакета.Box, СообщениеОбмена);
			КонецЕсли;
// >> 05.02.2024 Петухов А.В., Фактор, #3628
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			СтрокаДанных, "Короб") Тогда	
// << 05.02.2024 Петухов А.В., Фактор, #3628
			//ПКО_СсылкаВXDTO(СтрокаДанных.Короб, СтрокаПакета.Box, СообщениеОбмена);
			Если ВыполнятьПреобразованиеКоробов Тогда
				сткДанныеКороба = соотДанныеКоробов[СтрокаДанных.Короб];
				Если сткДанныеКороба<>Неопределено Тогда
					ПКО_СсылкаВXDTO(сткДанныеКороба.Ссылка, СтрокаПакета.Box, СообщениеОбмена);
					СтрокаПакета.Box.Number = сткДанныеКороба.Код;
				КонецЕсли;
			Иначе
				ПКО_СсылкаВXDTO(СтрокаДанных.Короб, СтрокаПакета.Box, СообщениеОбмена);
			КонецЕсли;
// >> 05.02.2024 Петухов А.В., Фактор, #3628
		КонецЕсли;
		
		// A2105505-1909
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			СтрокаДанных, "Распоряжение") Тогда   
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("СсылкаТип", Тип("ДокументСсылка.ЗаказНаПеремещение"));
			
			ПКО_СсылкаВXDTO(СтрокаДанных.Распоряжение, СтрокаПакета.GoodsRelocationOrder, СообщениеОбмена,
				ДополнительныеПараметры);
				
		КонецЕсли;	
		//
		
		// --> Евлахов Игорь Николаевич (Начало) 21.11.2023
		// Задача #3355
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			СтрокаДанных, "Ячейка") Тогда
			ПКО_СсылкаВXDTO(СтрокаДанных.Ячейка, СтрокаПакета.Cell, СообщениеОбмена);
		КонецЕсли;	
		// <-- Евлахов Игорь Николаевич (Конец) 21.11.2023
		
		// --> Евлахов Игорь Николаевич (Начало) 11.03.2024
		// Задача #3848
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			СтрокаДанных, "злДатаВыдачи") Тогда    
			СтрокаПакета.DateIssue = СтрокаДанных.злДатаВыдачи;  
		КонецЕсли;
		// <-- Евлахов Игорь Николаевич (Конец) 11.03.2024

		// << 06.05.2024 Петухов А.В., Фактор, #3938
		Если ДополнительныеПараметры.Свойство("ТребуетсяВыгрузкаЗаказаНаВнутреннееПотребление") Тогда
			ПКО_СсылкаВXDTO(СтрокаДанных.ЗаказНаВнутреннееПотребление, СтрокаПакета.GoodsRelocationOrder, СообщениеОбмена);
		КонецЕсли;
		// >> 06.05.2024 Петухов А.В., Фактор, #3938

		// << 23.08.2024 Петухов А.В., Фактор, #4476
		ИмяРеквизитаДокумента = Неопределено;
		Если ДополнительныеПараметры.Свойство("ТребуетсяВыгрузкаДокументаОснования", ИмяРеквизитаДокумента) Тогда
			ДополнительныеПараметрыТЧ = Новый Структура;
			ДополнительныеПараметрыТЧ.Вставить("СсылкаТип", Тип("ДокументСсылка.ЗаказНаПеремещение"));
			Если ЗначениеЗаполнено(СтрокаДанных[ИмяРеквизитаДокумента]) Тогда
				ПКО_СсылкаВXDTO(СтрокаДанных[ИмяРеквизитаДокумента], СтрокаПакета.GoodsRelocationOrder, СообщениеОбмена, ДополнительныеПараметрыТЧ);
				Если ТипЗнч(СтрокаДанных[ИмяРеквизитаДокумента]) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
					сткРеквизитыоснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДанных.ДокументОснование,"КР_ИдентификаторСистемыИсточника,КР_НомерВходящегоДокумента");
					Если СокрЛП(сткРеквизитыоснования.КР_ИдентификаторСистемыИсточника) <> "" Тогда
						СтрокаПакета.GoodsRelocationOrder.Ref = СокрЛП(сткРеквизитыоснования.КР_ИдентификаторСистемыИсточника);
						Если СокрЛП(сткРеквизитыоснования.КР_НомерВходящегоДокумента) <> "" Тогда
							СтрокаПакета.GoodsRelocationOrder.DocNum = СокрЛП(сткРеквизитыоснования.КР_НомерВходящегоДокумента);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// >> 23.08.2024 Петухов А.В., Фактор, #4476
		
		XDTOОбъект.GoodsDetailedSingleRow.Добавить(СтрокаПакета);	
		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции

// << 27.03.2024 Петухов А.В., Фактор, #3923
// << 06.05.2024 Петухов А.В., Фактор, #3938
//Функция ПКО_GoodsDetailedRowsObjectОбъединеннаяТЧПеремещений(мсвСсылки, XDTOОбъект, СообщениеОбмена, ВыполнятьПреобразованиеКоробов = Ложь) 
Функция ПКО_GoodsDetailedRowsObjectОбъединеннаяТЧПеремещений(мсвСсылки, XDTOОбъект, СообщениеОбмена, ДополнительныеПараметры) 
// >> 06.05.2024 Петухов А.В., Фактор, #3938
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки,
		|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ПеремещениеТоваровТовары.Характеристика КАК Характеристика,
		|	ПеремещениеТоваровТовары.Упаковка КАК Упаковка,
		|	ПеремещениеТоваровТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ПеремещениеТоваровТовары.Количество КАК Количество,
		|	ПеремещениеТоваровТовары.КодСтроки КАК КодСтроки,
		|	ПеремещениеТоваровТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	ПеремещениеТоваровТовары.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерийОтправитель,
		|	ПеремещениеТоваровТовары.СтатусУказанияСерийПолучатель КАК СтатусУказанияСерийПолучатель,
		|	ПеремещениеТоваровТовары.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
		|	ПеремещениеТоваровТовары.Сделка КАК Сделка,
		|	ПеремещениеТоваровТовары.Назначение КАК Назначение,
		|	ПеремещениеТоваровТовары.НазначениеОтправителя КАК НазначениеОтправителя,
		|	ПеремещениеТоваровТовары.Серия КАК Серия,
		|	ПеремещениеТоваровТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ПеремещениеТоваровТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПеремещениеТоваровТовары.КР_Короб КАК КР_Короб
		|ПОМЕСТИТЬ втТЧ
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|ГДЕ
		|	ПеремещениеТоваровТовары.Ссылка В(&Ссылки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТЧ.НомерСтроки КАК НомерСтроки,
		|	втТЧ.Номенклатура КАК Номенклатура,
		|	втТЧ.Характеристика КАК Характеристика,
		|	втТЧ.Упаковка КАК Упаковка,
		|	втТЧ.КоличествоУпаковок КАК КоличествоУпаковок,
		|	втТЧ.Количество КАК Количество,
		|	втТЧ.КодСтроки КАК КодСтроки,
		|	втТЧ.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	втТЧ.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерийОтправитель,
		|	втТЧ.СтатусУказанияСерийПолучатель КАК СтатусУказанияСерийПолучатель,
		|	втТЧ.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
		|	втТЧ.Сделка КАК Сделка,
		|	втТЧ.Назначение КАК Назначение,
		|	втТЧ.НазначениеОтправителя КАК НазначениеОтправителя,
		|	втТЧ.Серия КАК Серия,
		|	втТЧ.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	втТЧ.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	втТЧ.КР_Короб КАК КР_Короб
		|ИЗ
		|	втТЧ КАК втТЧ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылки", мсвСсылки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	тбзТЧ = РезультатЗапроса.Выгрузить();

	// << 06.05.2024 Петухов А.В., Фактор, #3938
	//Возврат ПКО_GoodsDetailedRowsObject(тбзТЧ, XDTOОбъект, СообщениеОбмена, ВыполнятьПреобразованиеКоробов)
	Возврат ПКО_GoodsDetailedRowsObject(тбзТЧ, XDTOОбъект, СообщениеОбмена, ДополнительныеПараметры)
	// >> 06.05.2024 Петухов А.В., Фактор, #3938
	
КонецФункции
// >> 27.03.2024 Петухов А.В., Фактор, #3923

Функция ПКО_RouteListObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена) 

    XDTOОбъект = ПолучитьОбъектXDTO("RouteListObject");	
	
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл 
		
		СтрокаПакета = ПолучитьОбъектXDTO("RouteListRowObject");
		
		ПКО_СсылкаВXDTO(СтрокаДанных.КР_Маршрут, СтрокаПакета.Route, СообщениеОбмена);
		ПКО_СсылкаВXDTO(СтрокаДанных.КР_Водитель, СтрокаПакета.Driver, СообщениеОбмена);
		ПКО_СсылкаВXDTO(СтрокаДанных.КР_ТранспортноеСредство, СтрокаПакета.Vehicle, СообщениеОбмена);
		ПКО_СсылкаВXDTO(СтрокаДанных.КР_Прицеп, СтрокаПакета.Trailer, СообщениеОбмена);
		ПКО_СсылкаВXDTO(СтрокаДанных.КР_Перевозчик, СтрокаПакета.Transporter, СообщениеОбмена);
		
		СтрокаПакета.OwnershipType = СтрокаДанных.КР_ТипВладенияТС.Код;
		
		XDTOОбъект.RouteListRow.Добавить(СтрокаПакета);	
		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции

Функция ПКО_StorehouseListObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена) 

    XDTOОбъект = ПолучитьОбъектXDTO("StorehouseListObject");	
	
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл 
		
		СтрокаПакета = ПолучитьОбъектXDTO("StorehouseListRowObject");
		
		ПКО_СсылкаВXDTO(СтрокаДанных.СкладМагазин, СтрокаПакета.Storehouse, СообщениеОбмена);
		СтрокаПакета.StorehouseAddress = СтрокаДанных.АдресМагазина;
		ПКО_СсылкаВXDTO(СтрокаДанных.Город, СтрокаПакета.City, СообщениеОбмена);
		
		XDTOОбъект.StorehouseListRow.Добавить(СтрокаПакета);	
		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции

Функция ПКО_GoodsDetailedWithSumRowsObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена) 
	
	// Конвертируем Номенклатуру/Характеристику в "Данные номенклатуры" пакетно   
	ДанныеНоменклатуры = ПКО_НоменклатураХарактеристикаПакетно(ТабличнаяЧасть, СообщениеОбмена);
	
	ТабличнаяЧастьМетаданные = Метаданные.НайтиПоТипу(Тип(ТабличнаяЧасть));
	ТабличнаяЧастьМетаданныеРеквизиты = ТабличнаяЧастьМетаданные.Реквизиты;
	
	ЕстьВидЦены = ТабличнаяЧастьМетаданныеРеквизиты.Найти("ВидЦены") <> Неопределено;
	ЕстьСуммыСкидки = ТабличнаяЧастьМетаданныеРеквизиты.Найти("СуммаРучнойСкидки") <> Неопределено
		И ТабличнаяЧастьМетаданныеРеквизиты.Найти("СуммаАвтоматическойСкидки") <> Неопределено;
	
	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("GoodsDetailedWithSumRowsObject");
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл 
		
		СтрокаДанныхНоменклатуры = ДанныеНоменклатуры[СтрокаДанных.НомерСтроки - 1];
		
		СтрокаПакета = ПолучитьОбъектXDTO("GoodsDetailedWithSumSingleRowObject");
		ЗаполнитьЗначенияСвойств(СтрокаПакета, СтрокаДанныхНоменклатуры);
		
		Если ЕстьВидЦены Тогда 
			ПКО_СсылкаВXDTO(СтрокаДанных.ВидЦены, СтрокаПакета.PriceType, СообщениеОбмена);
		КонецЕсли;
		
		СтрокаПакета.Price = СтрокаДанных.Цена;  
		СтрокаПакета.QuantitySales = СтрокаДанных.Количество;  
		СтрокаПакета.SumSales = СтрокаДанных.Сумма;  
		СтрокаПакета.SumSalesVAT = СтрокаДанных.СуммаСНДС; 
		Если ЕстьСуммыСкидки Тогда 
			СтрокаПакета.SumDiscount = СтрокаДанных.СуммаРучнойСкидки + СтрокаДанных.СуммаАвтоматическойСкидки;  
		КонецЕсли;	
		СтрокаПакета.SumVat = СтрокаДанных.СуммаНДС;  
		СтрокаПакета.VatRate = Строка(СтрокаДанных.СтавкаНДС);  
		
		XDTOОбъект.Row.Добавить(СтрокаПакета);	
		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции

Функция ПКО_RealizationAdjustmentDiscrepancyRowsObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена) 
	
	// Конвертируем Номенклатуру/Характеристику в "Данные номенклатуры" пакетно   
	ДанныеНоменклатуры = ПКО_НоменклатураХарактеристикаПакетно(ТабличнаяЧасть, СообщениеОбмена);

	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("RealizationAdjustmentDiscrepancyRowsObject");
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл 
		
		СтрокаДанныхНоменклатуры = ДанныеНоменклатуры[СтрокаДанных.НомерСтроки - 1];
		
		СтрокаПакета = ПолучитьОбъектXDTO("RealizationAdjustmentDiscrepancySingleRowObject");
		ЗаполнитьЗначенияСвойств(СтрокаПакета, СтрокаДанныхНоменклатуры);
		
		СтрокаПакета.Quantity = СтрокаДанных.Количество;  
		СтрокаПакета.SumAdjustment = СтрокаДанных.Сумма;  
		СтрокаПакета.SumAdjustmentVAT = СтрокаДанных.СуммаСНДС;  
		СтрокаПакета.SumVat = СтрокаДанных.СуммаНДС;  
		СтрокаПакета.VatRate = Строка(СтрокаДанных.СтавкаНДС);  
		СтрокаПакета.AccountingOption = XMLСтрока(СтрокаДанных.ВариантОтражения);  
		
		XDTOОбъект.Row.Добавить(СтрокаПакета);	
		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции

Функция ПКО_GoodsPlacementsRowsObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена) 
	
	// Конвертируем Номенклатуру в "Данные номенклатуры" пакетно   
	ДанныеНоменклатуры = ПКО_НоменклатураПакетно(ТабличнаяЧасть, СообщениеОбмена);

	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("GoodsPlacementsRowsObject");
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл 
		
		СтрокаДанныхНоменклатуры = ДанныеНоменклатуры[СтрокаДанных.НомерСтроки - 1];
		
		СтрокаПакета = ПолучитьОбъектXDTO("GoodsPlacementsSingleRowObject");
		ЗаполнитьЗначенияСвойств(СтрокаПакета, СтрокаДанныхНоменклатуры);
		
		СтрокаПакета.Placement = Строка(СтрокаДанных.МестаРазмещения);  
		
		XDTOОбъект.Row.Добавить(СтрокаПакета);	
		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции

Функция ПКО_GoodsMinimalPresentationRowsObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена) 
	
	// Конвертируем Номенклатуру/Характеристику в "Данные номенклатуры" пакетно   
	ДанныеНоменклатуры = ПКО_НоменклатураХарактеристикаПакетно(ТабличнаяЧасть, СообщениеОбмена);

	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("GoodsMinimalPresentationRowsObject");
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл 
		
		СтрокаДанныхНоменклатуры = ДанныеНоменклатуры[СтрокаДанных.НомерСтроки - 1];
		
		СтрокаПакета = ПолучитьОбъектXDTO("GoodsMinimalPresentationSingleRowsObject");
		ЗаполнитьЗначенияСвойств(СтрокаПакета, СтрокаДанныхНоменклатуры);
		
		ПКО_СсылкаВXDTO(СтрокаДанных.ФорматМагазина, СтрокаПакета.Format, СообщениеОбмена); 
		СтрокаПакета.Quantity = СтрокаДанных.МинПрезентация;  
		
		XDTOОбъект.Row.Добавить(СтрокаПакета);	
		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции

Функция ПКО_GoodsSizePrioritiesRowsObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена) 
	
	// Конвертируем Номенклатуру/Характеристику в "Данные номенклатуры" пакетно   
	ДанныеНоменклатуры = ПКО_НоменклатураХарактеристикаПакетно(ТабличнаяЧасть, СообщениеОбмена);

	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("GoodsSizePrioritiesRowsObject");
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл 
		
		СтрокаДанныхНоменклатуры = ДанныеНоменклатуры[СтрокаДанных.НомерСтроки - 1];
		
		СтрокаПакета = ПолучитьОбъектXDTO("GoodsSizePrioritiesSingleRowsObject");
		ЗаполнитьЗначенияСвойств(СтрокаПакета, СтрокаДанныхНоменклатуры);
		
		СтрокаПакета.Priority = СтрокаДанных.Приоритет;  
		
		XDTOОбъект.Row.Добавить(СтрокаПакета);	
		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции

Функция ПКО_GoodsCharacteristicRowsObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена) 
	
	// Конвертируем Номенклатуру/Характеристику в "Данные номенклатуры" пакетно   
	ДанныеНоменклатуры = ПКО_НоменклатураХарактеристикаПакетно(ТабличнаяЧасть, СообщениеОбмена);

	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("GoodsCharacteristicRowsObject");
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл 
		
		СтрокаДанныхНоменклатуры = ДанныеНоменклатуры[СтрокаДанных.НомерСтроки - 1];
		
		СтрокаПакета = ПолучитьОбъектXDTO("GoodsCharacteristicSingleRowsObject");
		ЗаполнитьЗначенияСвойств(СтрокаПакета, СтрокаДанныхНоменклатуры);
		
		СтрокаПакета.Role = XMLСтрока(СтрокаДанных.РольАссортимента);  
		СтрокаПакета.Norma = СтрокаДанных.НормаПотребления;
		
		XDTOОбъект.Row.Добавить(СтрокаПакета);	
		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции

Функция ПКО_SettingItemPricesGoods2_5RowsObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена) 
	
	// Конвертируем Номенклатуру в "Данные номенклатуры" пакетно   
	ДанныеНоменклатуры = ПКО_НоменклатураПакетно(ТабличнаяЧасть, СообщениеОбмена);

	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("SettingItemPricesGoods2_5RowsObject");
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл 
		
		СтрокаДанныхНоменклатуры = ДанныеНоменклатуры[СтрокаДанных.НомерСтроки - 1];
		
		СтрокаПакета = ПолучитьОбъектXDTO("SettingItemPricesGoods2_5SingleRowsObject");
		ЗаполнитьЗначенияСвойств(СтрокаПакета, СтрокаДанныхНоменклатуры);
		
		// Size - получаем из связанной характеристики номенклатуры  
		Характеристика = ПолучитьХарактеристикуНоменклатурыПоХарактеристикеЦО(
			СтрокаДанных.ХарактеристикаЦО);
		СтрокаПакета.Size = Характеристика.КР_Размер.Код;
		
		ПКО_СсылкаВXDTO(СтрокаДанных.ВидЦены, СтрокаПакета.PriceType, СообщениеОбмена);  
		СтрокаПакета.Price = СтрокаДанных.Цена;
		
		XDTOОбъект.Row.Добавить(СтрокаПакета);	
		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции

Функция ПКО_RetailSalesReportGoodsRowsObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена) 
	
	// Конвертируем Номенклатуру/Характеристику в "Данные номенклатуры" пакетно   
	ДанныеНоменклатуры = ПКО_НоменклатураХарактеристикаПакетно(ТабличнаяЧасть, СообщениеОбмена);

	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("RetailSalesReportGoodsRowsObject");
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл 
		
		СтрокаДанныхНоменклатуры = ДанныеНоменклатуры[СтрокаДанных.НомерСтроки - 1];
		
		СтрокаПакета = ПолучитьОбъектXDTO("RetailSalesReportGoodsSingleRowObject");
		ЗаполнитьЗначенияСвойств(СтрокаПакета, СтрокаДанныхНоменклатуры);
		
		ПКО_СсылкаВXDTO(СтрокаДанных.Продавец, СтрокаПакета.Salesman, СообщениеОбмена);
		
		СтрокаПакета.Price = СтрокаДанных.Цена;  
		СтрокаПакета.QuantitySales = СтрокаДанных.Количество;  
		СтрокаПакета.AmountSales = СтрокаДанных.Сумма;  
		СтрокаПакета.AmountDiscount = СтрокаДанных.СуммаРучнойСкидки;  
		СтрокаПакета.AmountVat = СтрокаДанных.СуммаНДС;  
		СтрокаПакета.VatRate = Строка(СтрокаДанных.СтавкаНДС);  
		
		СтрокаПакета.CheckNum = СтрокаДанных.КР_НомерЧека;  
		СтрокаПакета.CheckDate = СтрокаДанных.КР_ДатаЧека;  
		СтрокаПакета.NumberOnlineStoreOrder = СтрокаДанных.КР_НомерЗаказаИнтернетМагазина;  
		
		ПКО_СсылкаВDocumentTypeRef(СтрокаДанных.ДокументРеализации, СтрокаПакета.SalesDocument, СообщениеОбмена);
		
		// A2105505-2200
		СтрокаПакета.DiscountCard = СтрокаДанных.КР_КартаЛояльности;  
		//
		
		XDTOОбъект.Row.Добавить(СтрокаПакета);	
		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции

Функция ПКО_RetailSalesReportPaymentsRowsObject(Объект, XDTOОбъект, СообщениеОбмена) 
	
	ТаблицаОплат = Объект.ОплатаПлатежнымиКартами.Выгрузить( , 
		"ЭквайринговыйТерминал,КР_НомерЧека,Сумма");   
	ТаблицаОплат.Свернуть("ЭквайринговыйТерминал,КР_НомерЧека", "Сумма");
	
	// Формируем Список XDTO данными по оплатам картой
    XDTOОбъект = ПолучитьОбъектXDTO("RetailSalesReportPaymentsRowsObject");
	Для Каждого СтрокаДанных Из ТаблицаОплат Цикл 
		
		СтрокаПакета = ПолучитьОбъектXDTO("RetailSalesReportPaymentsSingleRowObject");
		
		УстановитьСтроковоеПредставлениеЭквайринговыйТерминала(
			СтрокаДанных.ЭквайринговыйТерминал, СтрокаПакета.PaymentType, СообщениеОбмена);
			
		СтрокаПакета.Amount = СтрокаДанных.Сумма;    
		СтрокаПакета.CheckNum = СтрокаДанных.КР_НомерЧека;    
		
		XDTOОбъект.Row.Добавить(СтрокаПакета);	
		
	КонецЦикла;	     
	
	// Расчитаем данными по оплате наличными
	// Для этого дополним суммами по номеру чека из ТЧ Товары но с противоположным знаком
	Для Каждого СтрокаДанных Из Объект.Товары Цикл 
		
		НоваяСтрока = ТаблицаОплат.Добавить();  
		НоваяСтрока.КР_НомерЧека = СтрокаДанных.КР_НомерЧека;
		НоваяСтрока.Сумма = -СтрокаДанных.Сумма;
		
	КонецЦикла;   
	
	// Свернем итоговую таблицу по номеру чека
	ТаблицаОплат.Свернуть("КР_НомерЧека", "Сумма");  
	
	// Дополним вывод "- СуммаИтог" по чеку
	Для Каждого СтрокаДанных Из ТаблицаОплат Цикл 
		
		Если СтрокаДанных.Сумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		СтрокаПакета = ПолучитьОбъектXDTO("RetailSalesReportPaymentsSingleRowObject");
		
		СтрокаПакета.PaymentType = "Наличные";
			
		СтрокаПакета.Amount = -СтрокаДанных.Сумма;    
		СтрокаПакета.CheckNum = СтрокаДанных.КР_НомерЧека;    
		
		XDTOОбъект.Row.Добавить(СтрокаПакета);	
		
	КонецЦикла;	     
	
	Возврат Истина;
	
КонецФункции
 
Функция ПКО_GoodsSelectionRowsObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена) 
	
	// Конвертируем Номенклатуру/Характеристику в "Данные номенклатуры" пакетно   
	ДанныеНоменклатуры = ПКО_НоменклатураХарактеристикаПакетно(ТабличнаяЧасть, СообщениеОбмена);
	
	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("GoodsSelectionRowsObject");
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл 
		
		СтрокаДанныхНоменклатуры = ДанныеНоменклатуры[СтрокаДанных.НомерСтроки - 1];
		
		СтрокаПакета = ПолучитьОбъектXDTO("GoodsSelectionSingleRowObject");
		ЗаполнитьЗначенияСвойств(СтрокаПакета, СтрокаДанныхНоменклатуры);
		
		ПКО_СсылкаВXDTO(СтрокаДанных.Ячейка, СтрокаПакета.Cell, СообщениеОбмена);    
		
		СтрокаПакета.Quantity = СтрокаДанных.Количество;  
		СтрокаПакета.QuantitySelection = СтрокаДанных.КоличествоОтобрано;  
		
		СтрокаПакета.Volume = СтрокаДанных.ОбъемУпаковки;  
		СтрокаПакета.Weight = СтрокаДанных.ВесУпаковки;  
		
		XDTOОбъект.Row.Добавить(СтрокаПакета);	
		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции
 
Функция ПКО_GoodsPlacementRowsObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена) 
	
	// Конвертируем Номенклатуру/Характеристику в "Данные номенклатуры" пакетно   
	ДанныеНоменклатуры = ПКО_НоменклатураХарактеристикаПакетно(ТабличнаяЧасть, СообщениеОбмена);
	
	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("GoodsPlacementRowsObject");
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл 
		
		СтрокаДанныхНоменклатуры = ДанныеНоменклатуры[СтрокаДанных.НомерСтроки - 1];
		
		СтрокаПакета = ПолучитьОбъектXDTO("GoodsPlacementSingleRowObject");
		ЗаполнитьЗначенияСвойств(СтрокаПакета, СтрокаДанныхНоменклатуры);
		
		ПКО_СсылкаВXDTO(СтрокаДанных.Ячейка, СтрокаПакета.Cell, СообщениеОбмена);    
		
		СтрокаПакета.Quantity = СтрокаДанных.Количество;  
		СтрокаПакета.QuantityPlacement = СтрокаДанных.КоличествоРазмещено;  
		
		СтрокаПакета.Volume = СтрокаДанных.ОбъемУпаковки;  
		СтрокаПакета.Weight = СтрокаДанных.ВесУпаковки;  
		
		XDTOОбъект.Row.Добавить(СтрокаПакета);	
		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции
 
Функция ПКО_GoodsRegradingRowsObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена) 
	
	// Конвертируем Номенклатуру/Характеристику в "Данные номенклатуры" пакетно   
	ДанныеНоменклатуры = ПКО_НоменклатураХарактеристикаПакетно(ТабличнаяЧасть, СообщениеОбмена); 

	ДополнительныеПараметры = ПараметрыКонвертацииНоменклатураХарактеристикаПакетно(
		"НоменклатураОприходование", "ХарактеристикаОприходование",
		"ModelRecieved", "ColorRecieved", "SizeRecieved");
	ДанныеНоменклатурыОприходование = ПКО_НоменклатураХарактеристикаПакетно(
		ТабличнаяЧасть, СообщениеОбмена, ДополнительныеПараметры); 
		
	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("GoodsRegradingRowsObject");
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл 
		
		СтрокаДанныхНоменклатуры = ДанныеНоменклатуры[СтрокаДанных.НомерСтроки - 1];
		СтрокаДанныхНоменклатурыОприходование = ДанныеНоменклатурыОприходование[СтрокаДанных.НомерСтроки - 1];
		
		СтрокаПакета = ПолучитьОбъектXDTO("GoodsRegradingSingleRowObject");
		ЗаполнитьЗначенияСвойств(СтрокаПакета, СтрокаДанныхНоменклатуры);
		ЗаполнитьЗначенияСвойств(СтрокаПакета, СтрокаДанныхНоменклатурыОприходование);
		
		СтрокаПакета.Quantity = СтрокаДанных.Количество;  
		
		XDTOОбъект.GoodsRegradingRow.Добавить(СтрокаПакета);	
		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции

// --> Евлахов Игорь Николаевич (Начало) 19.12.2023
// Задача #3517
Функция ПКО_DecryptionPaymentRowObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена, ДополнительныеПараметры = Неопределено) 
			
	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("DecryptionPaymentRowObject");
	
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл				
		Если ДополнительныеПараметры <> Неопределено Тогда
			ДополнительныеПараметры.Вставить("СтавкаНДС", СтрокаДанных.СтавкаНДС);
		КонецЕсли;
		
		СтрокаПакета = ПолучитьОбъектXDTO("DecryptionPayment");
				
		СтрокаПакета.Amount 	= СтрокаДанных.Сумма;  
		СтрокаПакета.VATAmount 	= СтрокаДанных.СуммаНДС;
		СтрокаПакета.VATRate	= Строка(СтрокаДанных.СтавкаНДС);		
		
		ПКО_СсылкаВXDTO(СтрокаДанных.СтатьяДвиженияДенежныхСредств, СтрокаПакета.CashFlowItem, СообщениеОбмена);
		
		XDTOОбъект.Row.Добавить(СтрокаПакета);		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции
// <-- Евлахов Игорь Николаевич (Конец) 19.12.2023

// << 31.05.2024 Петухов А.В., Фактор, #4162
Функция ПКО_ServicesDetailedRowsObject(ТабличнаяЧасть, XDTOОбъект, СообщениеОбмена) 
	
	// Формируем Список XDTO
    XDTOОбъект = ПолучитьОбъектXDTO("ServicesDetailedRowsObject");
	Для Каждого СтрокаДанных Из ТабличнаяЧасть Цикл 
		
		СтрокаПакета = ПолучитьОбъектXDTO("ServicesDetailedSingleRowObject");
		
		СтрокаПакета.Operation = СтрокаДанных.Содержание;  
		СтрокаПакета.Price = СтрокаДанных.Цена;  
		СтрокаПакета.Quantity = СтрокаДанных.Количество;  
		СтрокаПакета.VatRate = Строка(СтрокаДанных.СтавкаНДС);  
		СтрокаПакета.Sum = СтрокаДанных.Сумма;  
		СтрокаПакета.SumVat = СтрокаДанных.СуммаНДС;  
		
		XDTOОбъект.Row.Добавить(СтрокаПакета);	
		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции
// >> 31.05.2024 Петухов А.В., Фактор, #4162

#КонецОбласти

#Область Движения

Функция ПКО_DocumentEntriesObject(Источник, XDTOОбъект, СообщениеОбмена)

	XDTOОбъект = ПолучитьОбъектXDTO("DocumentEntriesObject");
	
	ИсточникТип = ТипЗнч(Источник);
	Если ИсточникТип = Тип("ДокументОбъект.ЗаказКлиента") Тогда 
		Возврат ПКО_ДвиженияРегистраШтрихкодыWb(Источник, XDTOОбъект.WBBarcodeInfoReg, СообщениеОбмена);
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
                                 
#Область ПрочиеМетоды  

Функция ПараметрыКонвертацииНоменклатураХарактеристикаПакетно(
	ИмяРеквизитаНоменклатура = "Номенклатура", 
	ИмяРеквизитаХарактеристика = "Характеристика", 
	ИмяСвойстваModel = "Model", 
	ИмяСвойстваColor = "Color", 
	ИмяСвойстваSize = "Size"
	)  
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаНоменклатура", ИмяРеквизитаНоменклатура);  
	ДополнительныеПараметры.Вставить("ИмяРеквизитаХарактеристика", ИмяРеквизитаХарактеристика);  
	ДополнительныеПараметры.Вставить("ИмяСвойстваModel", ИмяСвойстваModel);  
	ДополнительныеПараметры.Вставить("ИмяСвойстваColor", ИмяСвойстваColor);  
	ДополнительныеПараметры.Вставить("ИмяСвойстваSize", ИмяСвойстваSize);  
			
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ПКО_НоменклатураХарактеристикаПакетно(Источник, СообщениеОбмена, ДополнительныеПараметры = Неопределено)  
	
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = ПараметрыКонвертацииНоменклатураХарактеристикаПакетно();
	КонецЕсли;	
	
	// Выполним запрос к данным
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Т.НомерСтроки КАК ЧИСЛО(15, 0)) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Т.%ИмяРеквизитаНоменклатура% КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Т.%ИмяРеквизитаХарактеристика% КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&Источник КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(Т.Номенклатура.КР_Модель, &ПустаяСтрока) КАК Model,
	|	ЕСТЬNULL(Т.Номенклатура.КР_Цвет.Код, &ПустаяСтрока) КАК Color,
	|	ЕСТЬNULL(Т.Характеристика.КР_Размер.Код, &ПустаяСтрока) КАК Size
	|ИЗ
	|	Источник КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяРеквизитаНоменклатура%", ДополнительныеПараметры.ИмяРеквизитаНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяРеквизитаХарактеристика%", ДополнительныеПараметры.ИмяРеквизитаХарактеристика);
	
	Запрос = Новый Запрос(ТекстЗапроса);                      
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.УстановитьПараметр("ПустаяСтрока", ""); 
	
	Данные = Новый Массив;
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		СтрокаДанных = Новый Структура;
		СтрокаДанных.Вставить(ДополнительныеПараметры.ИмяСвойстваModel, ВыборкаДетальныеЗаписи.Model);
		СтрокаДанных.Вставить(ДополнительныеПараметры.ИмяСвойстваColor, ВыборкаДетальныеЗаписи.Color);
		СтрокаДанных.Вставить(ДополнительныеПараметры.ИмяСвойстваSize, ВыборкаДетальныеЗаписи.Size);
		
		Данные.Добавить(СтрокаДанных);
		
	КонецЦикла;	
			
	Возврат Данные;
	
КонецФункции

Функция ПКО_НоменклатураПакетно(Источник, СообщениеОбмена) 
	
	// Выполним запрос к данным
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Т.НомерСтроки КАК ЧИСЛО(15, 0)) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&Источник КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Т.Номенклатура.КР_Модель, &ПустаяСтрока) КАК Model,
	|	ЕСТЬNULL(Т.Номенклатура.КР_Цвет.Код, &ПустаяСтрока) КАК Color,
	|	Т.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Источник КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
			
	Запрос = Новый Запрос(ТекстЗапроса);                      
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.УстановитьПараметр("ПустаяСтрока", ""); 
	
	Данные = Новый Массив;
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		СтрокаДанных = Новый Структура("Model,Color");
		ЗаполнитьЗначенияСвойств(СтрокаДанных, ВыборкаДетальныеЗаписи);
		Данные.Добавить(СтрокаДанных);
		
	КонецЦикла;	
			
	Возврат Данные;
	
КонецФункции
// >> 05.02.2024 Петухов А.В., Фактор, #3628

Функция ВсеТоварыВВариантаОбеспеченияОтгрузить(Источник)
	
	ОтборСтрок = Новый Структура("Отменено", Ложь);
	КоличествоСтрокВсего = Источник.Товары.НайтиСтроки(ОтборСтрок).Количество();    
	
	ОтборСтрок.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить);
	КоличествоСтрокОтгрузить = Источник.Товары.НайтиСтроки(ОтборСтрок).Количество();
	
	// Скодки для лучшей читабельности кода
	Возврат (КоличествоСтрокОтгрузить = КоличествоСтрокВсего);
	
КонецФункции

Функция ПолучитьСоответствиеСкладаПоМаркетплейсу(Маркетплейс, Склад)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Склад КАК Склад
	|ИЗ
	|	РегистрСведений.КР_СоответствиеСкладовИМаркетплейсов КАК Т
	|ГДЕ
	|	Т.Маркетплейс = &Маркетплейс"
	);                                         
	
	Запрос.УстановитьПараметр("Маркетплейс", Маркетплейс); 
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Склад = ВыборкаДетальныеЗаписи.Склад;
	КонецЕсли;
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция ПолучитьХарактеристикуНоменклатурыПоХарактеристикеЦО(ХарактеристикаЦО)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК Т
	|ГДЕ
	|	Т.ХарактеристикаНоменклатурыДляЦенообразования = &ХарактеристикаЦО");  
	Запрос.УстановитьПараметр("ХарактеристикаЦО", ХарактеристикаЦО); 
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
КонецФункции

Процедура УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки, Тип, ИмяТипаXDTO, СоответствиеПолей)

	ПравилоКонвертацииСсылки = Новый Структура;
	ПравилоКонвертацииСсылки.Вставить("ИмяТипаXDTO", ИмяТипаXDTO);
	ПравилоКонвертацииСсылки.Вставить("СоответствиеПолей", СоответствиеПолей);   
	
	ПравилаКонвертацииСсылки[Тип] = ПравилоКонвертацииСсылки;
	
КонецПроцедуры

Функция ПолучитьПравилоКонвертацииСсылки(СсылкаТип)
	
	// Определим параметры конвертации ссылки
	ПравилаКонвертацииСсылки = Новый Соответствие;

	// Справочники
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.Организации"), "OrganizationRef", 
			"Наименование=Name,ИНН=INN,КПП=KPP");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.Партнеры"), "ClientRef", 
			"ПравилоКонвертацииПолейСсылкиПартнеры");
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.Контрагенты"), "ClientRef", 
			"ПравилоКонвертацииПолейСсылкиКонтрагенты");
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.ДоговорыКонтрагентов"), "ClientAgreementRef", 
			"ПравилоКонвертацииПолейСсылкиДоговорыКонтрагентов");
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.Склады"), "StorehouseRef", 
			"Наименование=Name");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.Пользователи"), "UserRef", 
			"Наименование=Name");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.СтруктураПредприятия"), "DepartmentRef", 
			"Наименование=Name"); 		
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.ФизическиеЛица"), "IndividualRef", 
			"Наименование=Name");	
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.ТранспортныеСредства"), "VehicleRef", 
			"Код=Name");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.КР_Маршруты"), "RouteRef", 
			"Наименование=Name");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.БизнесРегионы"), "CityRef", 
			"Наименование=Name");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.ЗоныДоставки"), "DeliveryZoneRef", 
			"Наименование=Name");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.Кассы"), "CashierRef", 
			"Наименование=Name");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.КассыККМ"), "CashierKKMRef", 
			"Наименование=Name");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.Валюты"), "CurrencyRef", 
			"Наименование=Name,Код=Code");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.ВидыЦен"), "PriceTypeRef", 
			"Наименование=Name");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.КР_Контейнеры"), "ContainerRef", 
			"Наименование=ContainerID");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.ФорматыМагазинов"), "FormatRef", 
			"Наименование=Name");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств"), "CashFlowItemRef", 
			"Наименование=Name");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"), "BankAccountRef", 
			"Наименование=Name");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.СкладскиеПомещения"), "PremiseRef", 
			"Наименование=Name");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.СкладскиеЯчейки"), "CellRef", 
			"Наименование=Name");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("СправочникСсылка.КоллекцииНоменклатуры"), "CollectionRef", 
			"Код=Name"); // A2105505-2528    
		
	// Документы
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("ДокументСсылка.ЗаказКлиента"), "ClientOrderRef", 
			"Дата=DocDate,Номер=DocNum");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("ДокументСсылка.ЗаказНаПеремещение"), "GoodsRelocationOrderRef", 
			"Дата=DocDate,Номер=DocNum");     
	// --> Евлахов Игорь Николаевич (Начало) 16.11.2023
	// Задача #3348
	// *//--> Евлахов Игорь Николаевич (Начало было)
	//УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
	//	Тип("ДокументСсылка.ПеремещениеТоваров"), "GoodsRelocationRef", 
	//		"Дата=DocDate,Номер=DocNum");   
	// *//<-- Евлахов Игорь Николаевич (Конец было)
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("ДокументСсылка.ПеремещениеТоваров"), "GoodsRelocationRef", 
			"ПравилоКонвертацииПолейСсылкиПеремещениеТоваров");
	// <-- Евлахов Игорь Николаевич (Конец) 16.11.2023
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("ДокументСсылка.РасходныйОрдерНаТовары"), "GoodsOutcomeOrderRef", 
			"Дата=DocDate,Номер=DocNum");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("ДокументСсылка.УпаковочныйЛист"), "BoxRef", 
			"Код=Number");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("ДокументСсылка.ЗаданиеНаПеревозку"), "ShipmentOrderRef", 
			"Дата=DocDate,Номер=DocNum");     
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("ДокументСсылка.ПриобретениеТоваровУслуг"), "ReceiptGoodsServicesRef", 
			"Дата=DocDate,Номер=DocNum");     	
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("ДокументСсылка.ПересчетТоваров"), "InventoryCountSheetRef", 
			"Дата=DocDate,Номер=DocNum");     
// << 05.02.2024 Петухов А.В., Фактор, #3628
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("ДокументСсылка.ОтборРазмещениеТоваров"), "BoxRef", 
			//"Номер=Number" // номер берётся из упаковочного листа
	);     
// >> 05.02.2024 Петухов А.В., Фактор, #3628
	// << 06.05.2024 Петухов А.В., Фактор, #3938
	// Используется только  при списании форменной одежды
	УстановитьПравилоКонвертацииСсылки(ПравилаКонвертацииСсылки,
		Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление"), "GoodsRelocationOrderRef", 
			"Дата=DocDate,Номер=DocNum");     	
	// >> 06.05.2024 Петухов А.В., Фактор, #3938
		
	Возврат ПравилаКонвертацииСсылки[СсылкаТип];

КонецФункции	

Функция ПравилоКонвертацииПолейСсылкиПартнеры(Ссылка, XDTOЗначение, СообщениеОбмена) 

	Контрагент = Неопределено;	
	Если УстановитьКонтрагентаПоПоПартнеру(Ссылка, Контрагент, СообщениеОбмена) Тогда 
		Возврат Ложь; 
	КонецЕсли;	
		
	Возврат ПравилоКонвертацииПолейСсылкиКонтрагенты(Контрагент, XDTOЗначение, СообщениеОбмена);
	
КонецФункции

Функция ПравилоКонвертацииПолейСсылкиКонтрагенты(Ссылка, XDTOЗначение, СообщениеОбмена) 
	
	ИменаРеквизитов = "Наименование,ЮрФизЛицо,ИНН,КПП,РегистрационныйНомер,КР_КодПоставщикаZolla";
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);  
	
	XDTOЗначение.Name = Реквизиты.Наименование;
	XDTOЗначение.Resident = (Реквизиты.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент);
	XDTOЗначение.INN = Реквизиты.ИНН;
	XDTOЗначение.KPP = Реквизиты.КПП;
	XDTOЗначение.RegistrationNumber = Реквизиты.РегистрационныйНомер;
	XDTOЗначение.Code = Реквизиты.КР_КодПоставщикаZolla;
	
	Возврат Истина;
	
КонецФункции
// <-- Евлахов Игорь Николаевич (Конец) 16.11.2023

Функция ПравилоКонвертацииПолейСсылкиДоговорыКонтрагентов(Ссылка, XDTOЗначение, СообщениеОбмена) 

	ИменаРеквизитов = "Контрагент,Номер"; 
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);  

	Если Не ПКО_СсылкаВXDTO(Реквизиты.Контрагент, XDTOЗначение.Client, СообщениеОбмена) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	XDTOЗначение.Number = Реквизиты.Номер;
	
	Возврат Истина;
	
КонецФункции

Функция УстановитьСтроковоеПредставлениеЭквайринговыйТерминала(Ссылка, Представление, СообщениеОбмена)
	
	Если Ссылка = КР_ДополнительныеНастройкиПовтИсп.Значение("ЭквайрингОплата") Тогда 
		Представление = "Платежная карта";	
	ИначеЕсли Ссылка = КР_ДополнительныеНастройкиПовтИсп.Значение("СбпОплата") Тогда 
		Представление = "Система быстрых платежей";	
	ИначеЕсли Ссылка = КР_ДополнительныеНастройкиПовтИсп.Значение("СервисПодели") Тогда 
		Представление = "Сервис ""Подели""";	
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось сформировать строковое представление для эквайрингового терминала ""%1""'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Ссылка);
	  	ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 	
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог); 
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

Функция УстановитьКонтрагентаПоПоПартнеру(Парнтер, Контрагент, СообщениеОбмена) 
	
	Если Не ЗначениеЗаполнено(Парнтер) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = &Партнер
	|	И НЕ Контрагенты.ПометкаУдаления");
	
    Запрос.УстановитьПараметр("Партнер", Парнтер);
	РезультатЗапроса = Запрос.Выполнить(); 
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	НайденоСсылок = ВыборкаДетальныеЗаписи.Количество();
	Если НайденоСсылок = 1 Тогда
		ВыборкаДетальныеЗаписи.Следующий();
		Контрагент = ВыборкаДетальныеЗаписи.Ссылка;
		Возврат Истина;
	ИначеЕсли НайденоСсылок > 1 Тогда	
		
		ТекстСообщения = НСтр("ru = 'Не удалось однозначно определить контрагента партнера ""%1"". "
			+ "Найдено %2 подчиненных контрагента(ов)'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Парнтер, НайденоСсылок);
			
	Иначе   
		
		ТекстСообщения = НСтр("ru = 'Не удалось определить контрагента партнера ""%1"". "
			+ "Не найдено ни одного не помеченного на удаление подчиненного контрагента'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Парнтер);
		
	КонецЕсли;	

  	ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 	
	КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог); 
	
	Возврат Ложь;
КонецФункции

Функция ОбъектОбрабатывалсяИнтеграцией(Источник)

	ИсточникМетаданные = Источник.Метаданные();
	
	// Обрабатываем только ссылочные объекты
	ЭтоСсылка = ОбщегоНазначения.ЭтоСправочник(ИсточникМетаданные)
		Или ОбщегоНазначения.ЭтоДокумент(ИсточникМетаданные)
		Или ОбщегоНазначения.ЭтоПланВидовХарактеристик(ИсточникМетаданные);	
		
	Если Не ЭтоСсылка
		Или Источник.ЭтоНовый()	Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	
	Ссылка = Источник.Ссылка;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.КлючСообщения КАК КлючСообщения
	|ИЗ
	|	РегистрСведений.КР_ОтметкиИнтеграционныхИзменений КАК Т
	|ГДЕ
	|	Т.СсылкаНаОбъект = &Ссылка");  
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// --> Евлахов Игорь Николаевич (Начало) 16.11.2023
// Задача #3348
Функция ПравилоКонвертацииПолейСсылкиПеремещениеТоваров(Ссылка, XDTOЗначение, СообщениеОбмена) 
	
	ИменаРеквизитов = "Дата,Номер,КР_ИдентификаторСистемыИсточника,КР_НомерВходящегоДокумента";
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);  
	
	НомерДокумента = Реквизиты.Номер;
		
	Если ЗначениеЗаполнено(Реквизиты.КР_НомерВходящегоДокумента) Тогда
		НомерДокумента = СокрЛП(Реквизиты.КР_НомерВходящегоДокумента);	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Реквизиты.КР_ИдентификаторСистемыИсточника) Тогда	
		Попытка
			// Проверка корректного набора символов (что нет пробелов, кириллицы и различных символов,
			// которые не относятся к уникальному идентификатору)
			// Если получится текстовую строку превратить в уникальный идентификатор
			// значит данные хранящиеся в реквизите КР_ИдентификаторСистемыИсточника корректные
			ИсточникGUID = СокрЛП(Реквизиты.КР_ИдентификаторСистемыИсточника);
			НовыйGUID = Новый УникальныйИдентификатор(ИсточникGUID);
			// Выполним подмену GUID, на значение указанное в реквизите КР_ИдентификаторСистемыИсточника
			XDTOЗначение.Ref = ИсточникGUID;	
		Исключение
		КонецПопытки;
	КонецЕсли;	
	
	XDTOЗначение.DocDate 	= Реквизиты.Дата;
	XDTOЗначение.DocNum 	= НомерДокумента;
	
	Возврат Истина;
	
КонецФункции
// <-- Евлахов Игорь Николаевич (Конец) 16.11.2023

// << 05.02.2024 Петухов А.В., Фактор, #3628
Функция ДанныеКоробовПакетно(ТабличнаяЧасть)
	// Возвращает соответствие коробам ТЧ документов ОтборРазмещениеТоваров. 
	
	Результат = Новый Соответствие;
	мсвКороба = Новый Массив;
	// << 27.03.2024 Петухов А.В., Фактор, #3923
	//тбзТабличнаяЧасть = ТабличнаяЧасть.Выгрузить();
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") Тогда
		тбзТабличнаяЧасть = ТабличнаяЧасть;
	Иначе
		тбзТабличнаяЧасть = ТабличнаяЧасть.Выгрузить();
	КонецЕсли;
	// >> 27.03.2024 Петухов А.В., Фактор, #3923
	Есть_Короб = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(тбзТабличнаяЧасть.Колонки, "Короб");
	Есть_КР_Короб = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(тбзТабличнаяЧасть.Колонки, "КР_Короб");
	Если Есть_Короб Или Есть_КР_Короб Тогда
		Для Каждого СтрокаТЧ Из тбзТабличнаяЧасть Цикл
			Если Есть_Короб Тогда
				Если Истина
					И ЗначениеЗаполнено(СтрокаТЧ.Короб)
					И мсвКороба.Найти(СтрокаТЧ.Короб) = Неопределено
				Тогда
					мсвКороба.Добавить(СтрокаТЧ.Короб);
				КонецЕсли;
			КонецЕсли;
			Если Есть_КР_Короб Тогда
				Если Истина
					И ЗначениеЗаполнено(СтрокаТЧ.КР_Короб)
					И мсвКороба.Найти(СтрокаТЧ.КР_Короб) = Неопределено
				Тогда
					мсвКороба.Добавить(СтрокаТЧ.КР_Короб);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если мсвКороба.Количество() > 0 Тогда
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ОтборРазмещениеТоваров.Ссылка КАК Ссылка,
				|	ОтборРазмещениеТоваров.КР_Короб КАК КР_Короб,
				|	ОтборРазмещениеТоваров.ПометкаУдаления КАК ПометкаУдаления,
				|	ОтборРазмещениеТоваров.Дата КАК Дата
				|ПОМЕСТИТЬ втДокументы
				|ИЗ
				|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
				|ГДЕ
				|	ОтборРазмещениеТоваров.КР_Короб В(&мсвКороба)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втДокументы.Ссылка КАК Ссылка,
				|	МИНИМУМ(втДокументы.ПометкаУдаления) КАК ПометкаУдаления
				|ПОМЕСТИТЬ втПометкаМин
				|ИЗ
				|	втДокументы КАК втДокументы
				|
				|СГРУППИРОВАТЬ ПО
				|	втДокументы.Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втДокументы.Ссылка КАК Ссылка,
				|	МАКСИМУМ(втДокументы.Дата) КАК Дата,
				|	втДокументы.ПометкаУдаления КАК ПометкаУдаления
				|ПОМЕСТИТЬ втДатаМакс
				|ИЗ
				|	втДокументы КАК втДокументы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПометкаМин КАК втПометкаМин
				|		ПО втДокументы.Ссылка = втПометкаМин.Ссылка
				|			И втДокументы.ПометкаУдаления = втПометкаМин.ПометкаУдаления
				|
				|СГРУППИРОВАТЬ ПО
				|	втДокументы.Ссылка,
				|	втДокументы.ПометкаУдаления
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втДокументы.Ссылка КАК Ссылка,
				|	втДокументы.КР_Короб КАК КР_Короб,
				|	УпаковочныйЛист.Код КАК Код
				|ИЗ
				|	втДатаМакс КАК втДатаМакс
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументы КАК втДокументы
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛист
				|			ПО втДокументы.КР_Короб = УпаковочныйЛист.Ссылка
				|		ПО втДатаМакс.Ссылка = втДокументы.Ссылка
				|			И втДатаМакс.Дата = втДокументы.Дата
				|			И втДатаМакс.ПометкаУдаления = втДокументы.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("мсвКороба", мсвКороба);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Результат.Вставить(Выборка.КР_Короб, Новый Структура("Ссылка,Код", Выборка.Ссылка, Выборка.Код));
			КонецЦикла;

		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// << 05.08.2024 Петухов А.В., Фактор, #4478
Функция ЭтоСкладУТ11(Склад, ДатаЗапроса)
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	злСкладыУТ11.ДатаНачалаРаботы КАК ДатаНачалаРаботы
		|ИЗ
		|	РегистрСведений.злСкладыУТ11 КАК злСкладыУТ11
		|ГДЕ
		|	злСкладыУТ11.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Выборка.ДатаНачалаРаботы <= ДатаЗапроса Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
// >> 05.08.2024 Петухов А.В., Фактор, #4478

#КонецОбласти

#Область ПроцедурыИФункцииПодготовкиДанных

// --> Евлахов Игорь Николаевич (Начало) 27.11.2023
// Задача #3356
Функция ПолучитьДанныеОтборРазмещениеТоваровОперацияРазмещение(Источник)

	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ОтборРазмещениеТоваров.Ссылка КАК Ссылка,
	               |	ОтборРазмещениеТоваров.ПометкаУдаления КАК ПометкаУдаления,
	               |	ОтборРазмещениеТоваров.Номер КАК Номер,
	               |	ОтборРазмещениеТоваров.Дата КАК Дата,
	               |	ОтборРазмещениеТоваров.Проведен КАК Проведен,
	               |	ОтборРазмещениеТоваров.Распоряжение КАК Распоряжение,
	               |	ОтборРазмещениеТоваров.Склад КАК Склад,
	               |	ВЫБОР
	               |		КОГДА ОтборРазмещениеТоваров.Распоряжение ССЫЛКА Документ.ЗаказНаПеремещение
	               |			ТОГДА ВЫРАЗИТЬ(ОтборРазмещениеТоваров.Распоряжение КАК Документ.ЗаказНаПеремещение).СкладОтправитель
	               |		КОГДА ОтборРазмещениеТоваров.Распоряжение ССЫЛКА Документ.ПеремещениеТоваров
	               |			ТОГДА ВЫРАЗИТЬ(ОтборРазмещениеТоваров.Распоряжение КАК Документ.ПеремещениеТоваров).СкладОтправитель
	               |		КОГДА ОтборРазмещениеТоваров.Распоряжение ССЫЛКА Документ.ЗаказКлиента
	               |			ТОГДА ВЫРАЗИТЬ(ОтборРазмещениеТоваров.Распоряжение КАК Документ.ЗаказКлиента).Склад
	               |		КОГДА ОтборРазмещениеТоваров.Распоряжение ССЫЛКА Документ.ОрдерНаПеремещениеТоваров
	               |			ТОГДА ВЫРАЗИТЬ(ОтборРазмещениеТоваров.Распоряжение КАК Документ.ОрдерНаПеремещениеТоваров).Склад
	               |		КОГДА ОтборРазмещениеТоваров.Распоряжение ССЫЛКА Документ.ПриобретениеТоваровУслуг
	               |			ТОГДА ВЫРАЗИТЬ(ОтборРазмещениеТоваров.Распоряжение КАК Документ.ПриобретениеТоваровУслуг).Склад
	               |		КОГДА ОтборРазмещениеТоваров.Распоряжение ССЫЛКА Документ.РасходныйОрдерНаТовары
	               |			ТОГДА ВЫРАЗИТЬ(ОтборРазмещениеТоваров.Распоряжение КАК Документ.РасходныйОрдерНаТовары).Склад
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	               |	КОНЕЦ КАК СкладОтправитель,
	               |	ОтборРазмещениеТоваров.Ответственный КАК Ответственный,
	               |	ЕСТЬNULL(СтруктураПредприятия.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	               |	ОтборРазмещениеТоваров.КР_Короб КАК УпаковочныйЛист
	               |ИЗ
	               |	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	               |		ПО ОтборРазмещениеТоваров.Склад = Склады.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |		ПО (Склады.Подразделение = СтруктураПредприятия.Ссылка)
	               |ГДЕ
	               |	ОтборРазмещениеТоваров.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Ссылка КАК Ссылка,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Номенклатура КАК Номенклатура,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Характеристика КАК Характеристика,
	               |	СУММА(ОтборРазмещениеТоваровТоварыРазмещение.Количество) КАК Количество,
	               |	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки
	               |ПОМЕСТИТЬ ВТТовары
	               |ИЗ
	               |	Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК ОтборРазмещениеТоваровТоварыРазмещение
	               |ГДЕ
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Ссылка,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Характеристика,
	               |	ОтборРазмещениеТоваровТоварыРазмещение.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.Ссылка КАК Ссылка,
	               |	ВТТовары.НомерСтроки КАК НомерСтроки,
	               |	ВТТовары.Номенклатура КАК Номенклатура,
	               |	ВТТовары.Характеристика КАК Характеристика,
	               |	ВТТовары.Количество КАК Количество
	               |ИЗ
	               |	ВТТовары КАК ВТТовары";
	
	#КонецОбласти
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументу = Результаты[0].Выбрать();
	ТЗТовары = Результаты[2].Выгрузить();
	
	ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	ДанныеДокумента = Новый Структура();
	
	Пока ВыборкаПоДокументу.Следующий() Цикл		
		ДанныеДокумента.Вставить("Организация", 		ОрганизацияПоУмолчанию);
		ДанныеДокумента.Вставить("СкладОтправитель", 	ВыборкаПоДокументу.СкладОтправитель);
		ДанныеДокумента.Вставить("Склад", 				ВыборкаПоДокументу.Склад);
		ДанныеДокумента.Вставить("Ответственный", 		ВыборкаПоДокументу.Ответственный);
		ДанныеДокумента.Вставить("Подразделение", 		ВыборкаПоДокументу.Подразделение);
		ДанныеДокумента.Вставить("УпаковочныйЛист", 	ВыборкаПоДокументу.УпаковочныйЛист);
		ДанныеДокумента.Вставить("Распоряжение", 		ВыборкаПоДокументу.Распоряжение);
	КонецЦикла;

	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ДанныеДокумента", ДанныеДокумента);
	СтруктураДанных.Вставить("ТЗТовары", ТЗТовары);
	
	Возврат(СтруктураДанных);
	
КонецФункции
// <-- Евлахов Игорь Николаевич (Конец) 27.11.2023

#КонецОбласти

#КонецОбласти
