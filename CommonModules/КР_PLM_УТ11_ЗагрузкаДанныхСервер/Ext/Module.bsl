
////////////////////////////////////////////////////
//// Объект ОбщийМодуль.КР_PLM_УТ11_ЗагрузкаДанныхСервер
//// Предназначен для загрузки данных из PLM
//// Создан: 22.09.2022 Маскаев П.Ю., КРОК, JIRA№ A2105505-489

#Область ПрограммныйИнтерфейс

Функция ДобавитьНастройкиЗагрузкиОбъектов(ПараметрыЗагрузки) Экспорт
	
	// КоллекцииНоменклатуры
	НастройкаЗагрузки(ПараметрыЗагрузки, "CollectionObject");
	
	// КР_Цвета
	НастройкаЗагрузки(ПараметрыЗагрузки, "ColourObject");

	// КР_Линии
	НастройкаЗагрузки(ПараметрыЗагрузки, "LineObject");
	
	// Номенклатура
	НастройкаЗагрузки(ПараметрыЗагрузки, "NomenclatureObject");
	
	// ВидыНоменклатуры
	НастройкаЗагрузки(ПараметрыЗагрузки, "ProductGroupObject");
	
	// КР_Сезоны
	НастройкаЗагрузки(ПараметрыЗагрузки, "SeasonObject");
	
	// << 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
	// ТоварныеКатегории
	НастройкаЗагрузки(ПараметрыЗагрузки, "ProductCategoryObject");
	
	// КР_ТипыТовара
	НастройкаЗагрузки(ПараметрыЗагрузки, "ProductTypeObject");
	
	// СертификатыНоменклатуры
	НастройкаЗагрузки(ПараметрыЗагрузки, "CertificateObject");
	// >> 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
	
	// << 22.06.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1859
	НастройкаЗагрузки(ПараметрыЗагрузки, "ManufacturerObject");
	// >> 22.06.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1859
	
	Возврат ПараметрыЗагрузки; 
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфес

#Область ПравилаЗагрузкиОбъектов

Процедура ПЗО_CollectionObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_СправочникОбъектКоллекцииСезоны(ПакетДанных, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_ColourObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_СправочникОбъектЦвета(ПакетДанных, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_LineObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_СправочникОбъектЛинии(ПакетДанных, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_NomenclatureObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	// Конвертация производится в транзакции для обеспечения целостности данных
	НачатьТранзакцию();
	Попытка
		Объект = Неопределено;
		Если ПКО_СправочникОбъектНоменклатура(ПакетДанных, Объект, СообщениеОбмена) Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'В процессе загрузки данных номенклатуры произошла исключительная ошибка:
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения,
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.Номенклатура));
	КонецПопытки;
	
КонецПроцедуры

Процедура ПЗО_ProductGroupObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	// Конвертация производится в транзакции для обеспечения целостности данных
	НачатьТранзакцию();
	Попытка
		Объект = Неопределено;
		Если ПКО_СправочникОбъектВидыНоменклатуры(ПакетДанных, Объект, СообщениеОбмена)
			И КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'В процессе загрузки данных вида номенклатуры произошла исключительная ошибка:
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения,
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.Номенклатура));
	КонецПопытки;
	
КонецПроцедуры

Процедура ПЗО_SeasonObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_СправочникОбъектСезоны(ПакетДанных, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// << 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
Процедура ПЗО_ProductCategoryObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_СправочникОбъектТоварныеКатегории(ПакетДанных, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // >> 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179

// << 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
Процедура ПЗО_ProductTypeObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_СправочникОбъектТипыТовара(ПакетДанных, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // >> 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179

// << 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
Процедура ПЗО_CertificateObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	// Конвертация в транзакции для обеспечения целостности данных
	НачатьТранзакцию();
	Попытка
		Объект = Неопределено;
		Если ПКО_СправочникОбъектСертификатыНоменклатуры(ПакетДанных, Объект, СообщениеОбмена)
			И КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'В процессе загрузки данных сертификата номенклатуры произошла исключительная ошибка:
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения,
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.СертификатыНоменклатуры));
	КонецПопытки;
	
КонецПроцедуры // >> 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179

// << 22.06.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1859
Процедура ПЗО_ManufacturerObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_СправочникПроизводители(ПакетДанных, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // >> 22.06.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1859

#КонецОбласти

#КонецОбласти

#Область ПравилаКонвертации

#Область Справочники

Процедура ПКО_СправочникСсылкаВидыНоменклатуры(ПакетДанных, КлючевыеРеквизиты, СообщениеОбмена, Отказ)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("КР_IDPLM", ПакетДанных.Ref);
	
	ВидНоменклатуры = НайтиСсылкуСправочникаДляЗагрузки("ВидыНоменклатуры", ПараметрыПоиска);
	
	Если ВидНоменклатуры.Ссылка = Неопределено Тогда
		ЗаписатьОшибкуПоискаВЛог(СообщениеОбмена,
			ПакетДанных.ProductGroupId, Метаданные.Справочники.ВидыНоменклатуры, Отказ);
	Иначе
		КлючевыеРеквизиты.ВидНоменклатуры = ВидНоменклатуры.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПКО_СправочникСсылкаКоллекцииНоменклатуры(ПакетДанных, КлючевыеРеквизиты, СообщениеОбмена)
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьПредупреждениеНетДанныхВЛог(
			СообщениеОбмена, Метаданные.Справочники.КоллекцииНоменклатуры);
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("КР_IDPLM", ПакетДанных.Ref);
	
	Коллекция = НайтиСсылкуСправочникаДляЗагрузки("КоллекцииНоменклатуры", ПараметрыПоиска);
	
	Если Коллекция.Ссылка = Неопределено Тогда
		ЗаписатьПредупреждениеПоискаВЛог(СообщениеОбмена,
			ПакетДанных.CollectionId, Метаданные.Справочники.КоллекцииНоменклатуры);
	Иначе
		КлючевыеРеквизиты.КоллекцияНоменклатуры = Коллекция.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПКО_СправочникСсылкаКонтрагенты(ПакетДанных, КлючевыеРеквизиты, СообщениеОбмена)
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьПредупреждениеНетДанныхВЛог(
			СообщениеОбмена, Метаданные.Справочники.Контрагенты);
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = КР_Демо_УТ11_ЗагрузкаДанныхСервер.ПараметрыПоискаСсылки();
	Если ЗначениеЗаполнено(ПакетДанных.ProviderId) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(
			Новый Структура("КР_КодПоставщикаZolla", ПакетДанных.ProviderId));
	КонецЕсли;
	
	Контрагент = КР_Демо_УТ11_ЗагрузкаДанныхСервер.СсылкаПоДаннымСинхронизации(
		Метаданные.Справочники.Контрагенты, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
	
	Если Не Контрагент = Неопределено Тогда
		КлючевыеРеквизиты.ПроизводительИмпортерКонтрагент = Контрагент;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПКО_СправочникСсылкаЛинии(ПакетДанных, КлючевыеРеквизиты, СообщениеОбмена)
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьПредупреждениеНетДанныхВЛог(
			СообщениеОбмена, Метаданные.Справочники.КР_Линии);
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("IDPLM", ПакетДанных.Ref);
	
	Линия = НайтиСсылкуСправочникаДляЗагрузки("КР_Линии", ПараметрыПоиска);
	
	Если Линия.Ссылка = Неопределено Тогда
		ЗаписатьПредупреждениеПоискаВЛог(СообщениеОбмена,
			ПакетДанных.LineId, Метаданные.Справочники.КР_Линии);
	Иначе
		КлючевыеРеквизиты.КР_Линия = Линия.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// << 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
Процедура ПКО_СправочникСсылкаТипыТовара(ПакетДанных, КлючевыеРеквизиты, СообщениеОбмена, Отказ)
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьПредупреждениеНетДанныхВЛог(
			СообщениеОбмена, Метаданные.Справочники.КР_ТипыТовара);
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("IDPLM", ПакетДанных.Ref);
	
	ТипТовара = НайтиСсылкуСправочникаДляЗагрузки("КР_ТипыТовара", ПараметрыПоиска);
	
	Если ТипТовара.Ссылка = Неопределено Тогда
		ЗаписатьОшибкуПоискаВЛог(СообщениеОбмена,
			ПакетДанных.Name, Метаданные.Справочники.КР_ТипыТовара, Отказ);
	Иначе
		КлючевыеРеквизиты.КР_ТипТовара = ТипТовара.Ссылка;
	КонецЕсли;
	
КонецПроцедуры // >> 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179

// << 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
Процедура ПКО_СправочникСсылкаТоварныеКатегории(ПакетДанных, КлючевыеРеквизиты, СообщениеОбмена, Отказ)
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьПредупреждениеНетДанныхВЛог(
			СообщениеОбмена, Метаданные.Справочники.ТоварныеКатегории);
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("КР_IDPLM", ПакетДанных.Ref);
	
	ТоварнаяКатегория = НайтиСсылкуСправочникаДляЗагрузки("ТоварныеКатегории", ПараметрыПоиска);
	
	Если ТоварнаяКатегория.Ссылка = Неопределено Тогда
		ЗаписатьОшибкуПоискаВЛог(СообщениеОбмена,
			ПакетДанных.Name, Метаданные.Справочники.ТоварныеКатегории, Отказ);
	Иначе
		КлючевыеРеквизиты.ТоварнаяКатегория = ТоварнаяКатегория.Ссылка;
	КонецЕсли;
	
КонецПроцедуры // >> 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179

Процедура ПКО_СправочникСсылкаЦвета(ПакетДанных, КлючевыеРеквизиты, СообщениеОбмена, Отказ)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("IDPLM", ПакетДанных.Ref);
	
	Цвет = НайтиСсылкуСправочникаДляЗагрузки("КР_Цвета", ПараметрыПоиска);
	
	Если Цвет.Ссылка = Неопределено Тогда
		ЗаписатьОшибкуПоискаВЛог(СообщениеОбмена,
			ПакетДанных.ColourId, Метаданные.Справочники.КР_Цвета, Отказ);
	Иначе
		КлючевыеРеквизиты.КР_Цвет = Цвет.Ссылка;
	КонецЕсли;
	
КонецПроцедуры


Функция ПКО_СправочникОбъектВидыНоменклатуры(ПакетДанных, Объект, СообщениеОбмена)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КР_IDPLM", ПакетДанных.Ref);
	СтруктураПоиска.Вставить("Код", ПакетДанных.ProductGroupId);
	ДанныеПоиска = НайтиСсылкуСправочникаДляЗагрузки("ВидыНоменклатуры", СтруктураПоиска);
	
	МетаданныеСтавкиНДС = Метаданные.Справочники.СтавкиНДС;
	Если Не ЗначениеЗаполнено(ПакетДанных.VAT) Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных для загрузки ставки НДС.'");
		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, 
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(МетаданныеСтавкиНДС));
		Возврат Ложь;
	КонецЕсли;
	
	СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию(ПакетДанных.VAT);
	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось найти ставку НДС по наименованию ""%1"".
			|Сообщение обмена не обработано.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПакетДанных.VAT);
		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, 
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_ОшибкаПоискаСсылки(МетаданныеСтавкиНДС));
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеПоиска.Ссылка = Неопределено Тогда
		Объект = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
	Иначе
		Объект = ДанныеПоиска.Ссылка.ПолучитьОбъект();
		Объект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	ЗаполнитьВидНоменклатурыПоДаннымСинхронизации(Объект, ПакетДанных);
	
	Если ДанныеПоиска.УказатьИД Тогда
		Объект.КР_IDPLM = ПакетДанных.Ref;
	КонецЕсли;
	
	Если Объект.СтавкаНДС <> СтавкаНДС И ДанныеПоиска.Ссылка <> Неопределено
		И Не ПерезаполнитьСтавкиНДСНоменклатуры(Объект.Ссылка, СтавкаНДС, СообщениеОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Объект.СтавкаНДС = СтавкаНДС;
	Объект.Наименование = ПакетДанных.ProductGroupName;
	Объект.Код = ПакетДанных.ProductGroupId;
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_СправочникОбъектКоллекцииСезоны(ПакетДанных, Объект, СообщениеОбмена)
	
	Сезон = НайтиСсылкуСправочникаДляЗагрузки("КР_Сезоны", Новый Структура("IDPLM", ПакетДанных.Season.Ref));
	Если Не ЗначениеЗаполнено(Сезон.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось найти элемент ""%1"" справочника ""Сезоны"".
			|Сообщение обмена не обработано.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПакетДанных.Season.SeasonName);
		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, 
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_ОшибкаПоискаСсылки(Метаданные.Справочники.КР_Сезоны));
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КР_IDPLM", ПакетДанных.Ref);
	СтруктураПоиска.Вставить("Код", ПакетДанных.CollectionId);
	ДанныеПоиска = НайтиСсылкуСправочникаДляЗагрузки("КоллекцииНоменклатуры", СтруктураПоиска);
	
	Если ДанныеПоиска.Ссылка = Неопределено Тогда
		Объект = Справочники.КоллекцииНоменклатуры.СоздатьЭлемент();
	Иначе
		Объект = ДанныеПоиска.Ссылка.ПолучитьОбъект();
		Объект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Если ДанныеПоиска.УказатьИД Тогда
		Объект.КР_IDPLM = ПакетДанных.Ref;
	КонецЕсли;
	
	Объект.Код = ПакетДанных.CollectionId;
	Объект.КР_Сезон = Сезон.Ссылка;
	Объект.КР_ВремяГодаКалендарное = ПКО_ПеречисленияСсылкаУниверсально(
		"КР_ВременаГодаКалендарные", ПакетДанных.CollectionTimeOfYear, СообщениеОбмена);
	
	Возврат Истина;

КонецФункции

Функция ПКО_СправочникОбъектЛинии(ПакетДанных, Объект, СообщениеОбмена)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("IDPLM", ПакетДанных.Ref);
	СтруктураПоиска.Вставить("Код", ПакетДанных.LineId);
	ДанныеПоиска = НайтиСсылкуСправочникаДляЗагрузки("КР_Линии", СтруктураПоиска);
	
	Если ДанныеПоиска.Ссылка = Неопределено Тогда
		Объект = Справочники.КР_Линии.СоздатьЭлемент();
	Иначе
		Объект = ДанныеПоиска.Ссылка.ПолучитьОбъект();
		Объект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Если ДанныеПоиска.УказатьИД Тогда
		Объект.IDPLM = ПакетДанных.Ref;
	КонецЕсли;
	
	Объект.Код = ПакетДанных.LineId;
	Объект.Наименование = ПакетДанных.LineName;
	Объект.Пол = ПКО_ПеречисленияСсылкаУниверсально("ПолФизическогоЛица", ПакетДанных.LineGender, СообщениеОбмена);
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_СправочникОбъектНоменклатура(ПакетДанных, Объект, СообщениеОбмена)
	
	Отказ = Ложь;
	КлючевыеРеквизиты = НайтиКлючевыеРеквизитыНоменклатурыПоДаннымЗагрузки(ПакетДанных, СообщениеОбмена, Отказ);
	Если Отказ Тогда
		// Все ошибки уже записаны
		Возврат Ложь;
	КонецЕсли;
	
	ШаблонНаименования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		КлючевыеРеквизиты.ВидНоменклатуры, "ШаблонНаименованияДляПечатиНоменклатуры");
	
	АртикулПоиска = СокрЛП(СтрШаблон(НСтр("ru = '%1 %2'"),
		ПакетДанных.Article, ПакетДанных.Colour.ColourId));
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("КР_IDPLM", ПакетДанных.Ref);
	ПараметрыПоиска.Вставить("Артикул", АртикулПоиска);
	Номенклатура = НайтиСсылкуСправочникаДляЗагрузки("Номенклатура", ПараметрыПоиска);
	
	Если Номенклатура.Ссылка = Неопределено Тогда
		Номенклатура.Ссылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор);
		Объект = Справочники.Номенклатура.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Номенклатура.Ссылка);
	Иначе
		Объект = Номенклатура.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если Номенклатура.УказатьИД Тогда
		Объект.КР_IDPLM = ПакетДанных.Ref;
	КонецЕсли;
	
	// << 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
	// Обязательно вызывать ПКО до заполнения КоллекцииНоменклатуры объекта
	Если Не ПКО_РегистрСведенийИсторияИзмененийСезонаНоменклатуры(
			ПакетДанных.Collection,
			Номенклатура.Ссылка,
			КлючевыеРеквизиты.КоллекцияНоменклатуры,
			СообщениеОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	// >> 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
	
	ЗаполнитьЗначенияСвойств(Объект, КлючевыеРеквизиты);
	Если Объект.ЭтоНовый() Тогда
		Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(Объект);
	КонецЕсли;
	ЗаполнитьНоменклатуруПоДаннымСинхронизации(Объект, ПакетДанных);      
	Объект.НаименованиеПолное = НоменклатураСервер.НаименованиеПоШаблону(ШаблонНаименования, Объект);
	
	Если Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПакетДанных.Size = Неопределено Тогда
		Для Каждого СтрокаРазмер Из ПакетДанных.Size.SizeSingleRow Цикл
			Если Не ПКО_СправочникСсылкаХарактеристикиНоменклатуры(
					СтрокаРазмер,
					Номенклатура.Ссылка,
					КлючевыеРеквизиты.ВидНоменклатуры,
					СообщениеОбмена) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_СправочникОбъектСезоны(ПакетДанных, Объект, СообщениеОбмена)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("IDPLM", ПакетДанных.Ref);
	СтруктураПоиска.Вставить("Код", ПакетДанных.SeasonNumber);
	ДанныеПоиска = НайтиСсылкуСправочникаДляЗагрузки("КР_Сезоны", СтруктураПоиска);
	
	Если ДанныеПоиска.Ссылка = Неопределено Тогда
		Объект = Справочники.КР_Сезоны.СоздатьЭлемент();
	Иначе
		Объект = ДанныеПоиска.Ссылка.ПолучитьОбъект();
		Объект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Если ДанныеПоиска.УказатьИД Тогда
		Объект.IDPLM = ПакетДанных.Ref;
	КонецЕсли;
	
	Объект.Код = ПакетДанных.SeasonNumber;
	Объект.Наименование = ПакетДанных.SeasonName;
	Объект.ТипСезона = ПКО_ПеречисленияСсылкаУниверсально("КР_ВременаГода", ПакетДанных.TypeOfSeason, СообщениеОбмена);
	
	Возврат Истина;
	
КонецФункции

// << 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
Функция ПКО_СправочникОбъектТипыТовара(ПакетДанных, Объект, СообщениеОбмена)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("IDPLM", ПакетДанных.Ref);
	СтруктураПоиска.Вставить("Наименование", ПакетДанных.Name);
	ДанныеПоиска = НайтиСсылкуСправочникаДляЗагрузки("КР_ТипыТовара", СтруктураПоиска);
	
	Если ДанныеПоиска.Ссылка = Неопределено Тогда
		Объект = Справочники.КР_ТипыТовара.СоздатьЭлемент();
	Иначе
		Объект = ДанныеПоиска.Ссылка.ПолучитьОбъект();
		Объект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Если ДанныеПоиска.УказатьИД Тогда
		Объект.IDPLM = ПакетДанных.Ref;
	КонецЕсли;
	
	Объект.Наименование = ПакетДанных.Name;
	
	Возврат Истина;
	
КонецФункции // >> 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179

// << 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
Функция ПКО_СправочникОбъектТоварныеКатегории(ПакетДанных, Объект, СообщениеОбмена)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КР_IDPLM", ПакетДанных.Ref);
	СтруктураПоиска.Вставить("Наименование", ПакетДанных.Name);
	ДанныеПоиска = НайтиСсылкуСправочникаДляЗагрузки("ТоварныеКатегории", СтруктураПоиска);
	
	Если ДанныеПоиска.Ссылка = Неопределено Тогда
		Объект = Справочники.ТоварныеКатегории.СоздатьЭлемент();
	Иначе
		Объект = ДанныеПоиска.Ссылка.ПолучитьОбъект();
		Объект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Если ДанныеПоиска.УказатьИД Тогда
		Объект.КР_IDPLM = ПакетДанных.Ref;
	КонецЕсли;
	
	Объект.Владелец = КР_ДополнительныеНастройкиПовтИсп.Значение("ВидНоменклатурыСОбщимиКатегориямиТоваров");
	Объект.Наименование = ПакетДанных.Name;
	
	Возврат Истина;
	
КонецФункции // >> 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179

// << 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
Функция ПКО_СправочникОбъектСертификатыНоменклатуры(ПакетДанных, Объект, СообщениеОбмена)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КР_IDPLM", ПакетДанных.Ref);
	ДанныеПоиска = НайтиСсылкуСправочникаДляЗагрузки("СертификатыНоменклатуры", СтруктураПоиска);
	
	Если ДанныеПоиска.Ссылка = Неопределено Тогда
		ДанныеПоиска.Ссылка = Справочники.СертификатыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор);
		Объект = Справочники.СертификатыНоменклатуры.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(ДанныеПоиска.Ссылка);
	Иначе
		Объект = ДанныеПоиска.Ссылка.ПолучитьОбъект();
		Объект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Если ДанныеПоиска.УказатьИД Тогда
		Объект.КР_IDPLM = ПакетДанных.Ref;
	КонецЕсли;
	
	ТипСертификатаВходящий = ВРег(СокрЛП(ПакетДанных.CertificateType));
	Если ТипСертификатаВходящий = "СЕРТИФИКАТ" Тогда
		Объект.ТипСертификата = НСтр("ru = 'Сертификат соответствия'");
	ИначеЕсли ТипСертификатаВходящий = "ДЕКЛАРАЦИЯ" Тогда
		Объект.ТипСертификата = НСтр("ru = 'Декларация о соответствии'");
	Иначе
		Объект.ТипСертификата = "";
	КонецЕсли;
	
	Объект.ДатаНачалаСрокаДействия = ПакетДанных.StartDate;
	Объект.ДатаОкончанияСрокаДействия = ПакетДанных.EndDate;
	Объект.ОрганВыдавшийДокумент = ПакетДанных.IssuingAuthority;
	Объект.Номер = ПакетДанных.Number;
	
	// #4617.. Фомин Д.Ю. 19.09.2024.
	//Объект.КР_Схема = ПакетДанных.Scheme;
	Если ЗначениеЗаполнено(ПакетДанных.Scheme) Тогда
		Объект.КР_Схема = ПакетДанных.Scheme;
	Иначе
		Если ПакетДанных.StartDate < Дата("20240101") Тогда
			Объект.КР_Схема = "-";
		Иначе	
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, "Поле ""Схема"" не заполнено.", 
					КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.СертификатыНоменклатуры));
		КонецЕсли;
	КонецЕсли;	
	// ..#4617
	
	Объект.Наименование = СтрШаблон(НСтр("ru = '%1 №%2'"), Объект.ТипСертификата, Объект.Номер);
	Объект.ПредставлениеСертификата = Объект.Наименование;
	Объект.Статус = Перечисления.СтатусыСертификатовНоменклатуры.Действующий;
	
	Если Объект.ЭтоНовый() И Не ПКО_РегистрСведенийОбластиДействияСертификатовНоменклатуры(ПакетДанных, ДанныеПоиска.Ссылка, СообщениеОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // >> 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179

Функция ПКО_СправочникОбъектЦвета(ПакетДанных, Объект, СообщениеОбмена)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("IDPLM", ПакетДанных.Ref);
	ДанныеПоиска = НайтиСсылкуСправочникаДляЗагрузки("КР_Цвета", СтруктураПоиска);
	
	Если ДанныеПоиска.Ссылка = Неопределено Тогда
		Объект = Справочники.КР_Цвета.СоздатьЭлемент();
	Иначе
		Объект = ДанныеПоиска.Ссылка.ПолучитьОбъект();
		Объект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Если ДанныеПоиска.УказатьИД Тогда
		Объект.IDPLM = ПакетДанных.Ref;
	КонецЕсли;
	
	Объект.Код = ПакетДанных.ColourId;
	Объект.Наименование = ПакетДанных.ColourName;
	
	Возврат Истина;
	
КонецФункции

// << 22.06.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1859
Функция ПКО_СправочникПроизводители(ПакетДанных, Объект, СообщениеОбмена)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КР_IDPLM", ПакетДанных.Ref);
	ДанныеПоиска = НайтиСсылкуСправочникаДляЗагрузки("Производители", СтруктураПоиска);
	
	// << 29.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2315
	//Если ДанныеПоиска.Ссылка = Неопределено Тогда
	//	// Если поиск по реквизиту IDPLM не нашел результат, то осуществим повторный поиск по наименованию
	//	СтруктураПоиска = Новый Структура;
	//	СтруктураПоиска.Вставить("Наименование", ПакетДанных.Name);
	//	ДанныеПоиска = НайтиСсылкуСправочникаДляЗагрузки("Производители", СтруктураПоиска);
	//КонецЕсли;
	// >> 29.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2315
	
	Если ДанныеПоиска.Ссылка = Неопределено Тогда
		Объект = Справочники.Производители.СоздатьЭлемент();
	Иначе
		Объект = ДанныеПоиска.Ссылка.ПолучитьОбъект();
		Объект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Объект.КР_IDPLM 				= ПакетДанных.Ref;
	Объект.Наименование 			= ПакетДанных.Name;
	Если ЗначениеЗаполнено(ПакетДанных.Address) Тогда
		Объект.КР_АдресПроизводителя 	= ПакетДанных.Address;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // >> 22.06.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1859

// << 22.06.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1859
Процедура ПКО_СправочникСсылкаПроизводители(ПакетДанных, КлючевыеРеквизиты, СообщениеОбмена, Отказ)
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьОшибкуПоискаВЛог(СообщениеОбмена,
			// A2105505-2247 Было ПакетДанных.Manufacturer
			ПакетДанных.Name, Метаданные.Справочники.Производители, Отказ);
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("КР_IDPLM", ПакетДанных.Ref);
	Производитель = НайтиСсылкуСправочникаДляЗагрузки("Производители", ПараметрыПоиска);
	
	Если Производитель.Ссылка = Неопределено Тогда
		ЗаписатьОшибкуПоискаВЛог(СообщениеОбмена,
			// A2105505-2247 Было ПакетДанных.Manufacturer
			ПакетДанных.Name, Метаданные.Справочники.Производители, Отказ);
	Иначе
		КлючевыеРеквизиты.Производитель = Производитель.Ссылка;
	КонецЕсли;
	
КонецПроцедуры // >> 22.06.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1859

#КонецОбласти

#Область Прочее

Функция ПКО_СправочникОбъектРазмеры(ПакетДанных, Объект, ВладелецРазмера, ТоварнаяГруппа, СообщениеОбмена)
	
	Если ПакетДанных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПолСсылка = ПКО_ПеречисленияСсылкаУниверсально("ПолФизическогоЛица", ПакетДанных.Gender, СообщениеОбмена);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", ПакетДанных.SizeName);
	Запрос.УстановитьПараметр("Пол", ПолСсылка);
	Запрос.УстановитьПараметр("ТоварнаяГруппа", ТоварнаяГруппа);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КР_Размеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КР_Размеры КАК КР_Размеры
	|ГДЕ
	|	КР_Размеры.Код = &Код
	|	И КР_Размеры.Пол = &Пол
	|	И КР_Размеры.ТоварнаяГруппа = &ТоварнаяГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		Объект = Справочники.КР_Размеры.СоздатьЭлемент();
	КонецЕсли;
	
	Объект.Код = ПакетДанных.SizeName;
	Объект.Пол = ПолСсылка;
	Объект.ТоварнаяГруппа = ТоварнаяГруппа;
	Объект.ПометкаУдаления = Ложь;
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_СправочникСсылкаХарактеристикиНоменклатуры(ПакетДанных, ВладелецХарактеристики, ТоварнаяГруппа, СообщениеОбмена)
	
	Если ПакетДанных = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Размер = Неопределено;
	Если Не ПКО_СправочникОбъектРазмеры(ПакетДанных, Размер, ВладелецХарактеристики, ТоварнаяГруппа, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Размер, СообщениеОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ХарактеристикаСсылка = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(
		ПакетДанных.SizeName, , , ВладелецХарактеристики);
	Если ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
		Объект = ХарактеристикаСсылка.ПолучитьОбъект();
		Объект.ПометкаУдаления = Ложь;
	Иначе
		ХарактеристикаСсылка = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор);
		Объект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(ХарактеристикаСсылка);
		Объект.Владелец = ВладелецХарактеристики;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПакетДанных.TNVED) Тогда
		КодТНВЭД = Справочники.КлассификаторТНВЭД.НайтиПоКоду(ПакетДанных.TNVED);
		Если КодТНВЭД.Пустая() Тогда
			ЗаписатьПредупреждениеПоискаВЛог(
				СообщениеОбмена, ПакетДанных.TNVED, Метаданные.Справочники.КлассификаторТНВЭД);
		КонецЕсли;
	Иначе
		ЗаписатьПредупреждениеНетДанныхВЛог(
			СообщениеОбмена, Метаданные.Справочники.КлассификаторТНВЭД);
	КонецЕсли;
	
	Объект.Наименование = ПакетДанных.SizeName;
	Объект.КР_КодТНВЭД = КодТНВЭД;
	Объект.ВидНоменклатуры = ТоварнаяГруппа;
	Объект.НаименованиеПолное = НоменклатураСервер.НаименованиеПоШаблону(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТоварнаяГруппа, "ШаблонНаименованияДляПечатиХарактеристики"),
		Объект);
	Объект.КР_Размер = Размер.Ссылка;
	Объект.КиЗГИСМGTIN = ПакетДанных.GTIN;		// #3976.. Фомин Д.Ю. 29.03.2024.
	
	// A2105505-2312  
	// Изменен порядок записи.
	// Сначала пишем справочник, затем регистр
	Если Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПКО_РегистрСведенийШтрихкодыНоменклатуры(ПакетДанных, ВладелецХарактеристики, ХарактеристикаСсылка, СообщениеОбмена);
	// 
	
КонецФункции

Функция ПКО_ПеречисленияСсылкаУниверсально(ИмяПеречисления, ЗначениеПеречисления, СообщениеОбмена)
	
	Результат = ПредопределенноеЗначение(СтрШаблон("Перечисление.%1.%2", ИмяПеречисления, ЗначениеПеречисления));
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ЗаписатьПредупреждениеПоискаВЛог(СообщениеОбмена,
			ЗначениеПеречисления, Метаданные.Перечисления[ИмяПеречисления]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПКО_РегистрСведенийШтрихкодыНоменклатуры(ПакетДанных, Номенклатура, Характеристика, СообщениеОбмена)
	
	Если ПакетДанных = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод");
	Запрос.УстановитьПараметр("Штрихкод", ПакетДанных.Barcode);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()
			И Не (Выборка.Номенклатура = Номенклатура
			И Выборка.Характеристика = Характеристика) Тогда
		ТекстСообщения = НСтр("ru = 'По штрихкоду ""%1"" данные в регистре не совпадают с загруженными.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПакетДанных.Barcode);
		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, 
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры));
		Возврат Ложь;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
	МассивШтрихкодов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Штрихкод");
	Если МассивШтрихкодов.Количество() > 1 Тогда
		ТекстСообщения = НСтр("ru = 'По номенклатуре ""%1 (%2)"" найдено более одного штрихкода.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Номенклатура, Характеристика);
		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, 
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры));
		Возврат Ложь;
	ИначеЕсли МассивШтрихкодов.Количество() = 1 Тогда
		// Удаляем запись, чтобы перезаполнить
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Штрихкод.Установить(МассивШтрихкодов[0]);
		Если Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.НаборЗаписейРегистраЗаписать(НаборЗаписей, СообщениеОбмена) Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		// Ничего не делаем
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Штрихкод.Установить(ПакетДанных.Barcode);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Штрихкод = ПакетДанных.Barcode;
	Запись.Номенклатура = Номенклатура;
	Запись.Характеристика = Характеристика;
	
	Возврат КР_ОбменRabbitОбщиеМеханизмыКонвертации.НаборЗаписейРегистраЗаписать(НаборЗаписей, СообщениеОбмена);
	
КонецФункции

// << 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
Функция ПКО_РегистрСведенийОбластиДействияСертификатовНоменклатуры(ПакетДанных, Сертификат, СообщениеОбмена)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Артикул", ПакетДанных.Article);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСправочника.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТаблицаСправочника.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаСправочника
	|ГДЕ
	|	ТаблицаСправочника.КР_Модель = &Артикул";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось найти элемент(ы) ""%1"" справочника ""%2"" по данным синхронизации
			|при создании записи РС ""Области действия сертификатов номенклатуры"". Сообщение обмена не обработано.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПакетДанных.Article, НСтр("ru = 'Номенклатура'"));
		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, 
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_ОшибкаПоискаСсылки(Метаданные.Справочники.Номенклатура));
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ОбластиДействияСертификатовНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидНоменклатуры.Установить(Выборка.ВидНоменклатуры);
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		НаборЗаписей.Отбор.СертификатНоменклатуры.Установить(Сертификат);
		
		Запись = НаборЗаписей.Добавить();
		Запись.ВидНоменклатуры = Выборка.ВидНоменклатуры;
		Запись.Номенклатура = Выборка.Номенклатура;
		Запись.СертификатНоменклатуры = Сертификат;
		
		Если Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.НаборЗаписейРегистраЗаписать(НаборЗаписей, СообщениеОбмена) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // >> 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179

// << 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
Функция ПКО_РегистрСведенийИсторияИзмененийСезонаНоменклатуры(ПакетДанных, НоменклатураСсылка, ТекущаяКоллекция, СообщениеОбмена)
	
	Если (ЗначениеЗаполнено(ТекущаяКоллекция)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяКоллекция, "Код") = ПакетДанных.CollectionId)
		Или Не ЗначениеЗаполнено(ТекущаяКоллекция) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// A2105505-1394
	Если Не ЗначениеЗаполнено(ТекущаяКоллекция) Тогда  
		Возврат Истина;
	КонецЕсли;
	//
	
	НовыйСезон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяКоллекция, "КР_Сезон");
	ПериодЗаписи = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СрезРегистра.Сезон КАК Сезон
	|ИЗ
	|	РегистрСведений.КР_ИсторияИзмененийСезонаНоменклатуры.СрезПоследних(&Период, Номенклатура = &Номенклатура) КАК СрезРегистра");
	Запрос.УстановитьПараметр("Период"      , ПериодЗаписи);
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()
		И Выборка.Сезон = НовыйСезон Тогда
		Возврат Истина;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.КР_ИсторияИзмененийСезонаНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ПериодЗаписи);
	НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураСсылка);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = ПериодЗаписи;
	Запись.Номенклатура = НоменклатураСсылка;
	Запись.Сезон = НовыйСезон;
		
	Возврат КР_ОбменRabbitОбщиеМеханизмыКонвертации.НаборЗаписейРегистраЗаписать(НаборЗаписей, СообщениеОбмена);
	
КонецФункции // >> 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиЗагрузкиОбъектов       

Функция НастройкаЗагрузки(ПараметрыЗагрузки, ТипДанных)
	
	ШаблонПравилаЗагрузки = "КР_PLM_УТ11_ЗагрузкаДанныхСервер.ПЗО_%1";
	
	СтрокаЗагрузки = ПараметрыЗагрузки.Добавить();
	СтрокаЗагрузки.ТипДанных = ТипДанных;
	СтрокаЗагрузки.Отправитель = ""; // любой
	СтрокаЗагрузки.ОчередьОбмена = ""; // любой
	СтрокаЗагрузки.ПравилоЗагрузки = СтрШаблон(ШаблонПравилаЗагрузки, ТипДанных);
	СтрокаЗагрузки.ДополнительныеПараметры = Новый Структура;
	
	Возврат СтрокаЗагрузки;
	
КонецФункции

#КонецОбласти

#Область Алгоритмы

Функция НайтиКлючевыеРеквизитыНоменклатурыПоДаннымЗагрузки(ПакетДанных, СообщениеОбмена, Отказ)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ВидНоменклатуры");
	СтруктураВозврата.Вставить("КР_Цвет");
	СтруктураВозврата.Вставить("КР_Линия");
	СтруктураВозврата.Вставить("КоллекцияНоменклатуры");
	СтруктураВозврата.Вставить("ПроизводительИмпортерКонтрагент");
	СтруктураВозврата.Вставить("ТоварнаяКатегория");
	
	ПКО_СправочникСсылкаВидыНоменклатуры(ПакетДанных.ProductGroup, СтруктураВозврата, СообщениеОбмена, Отказ);
	ПКО_СправочникСсылкаЦвета(ПакетДанных.Colour, СтруктураВозврата, СообщениеОбмена, Отказ);
	ПКО_СправочникСсылкаЛинии(ПакетДанных.Line, СтруктураВозврата, СообщениеОбмена);
	ПКО_СправочникСсылкаКоллекцииНоменклатуры(ПакетДанных.Collection, СтруктураВозврата, СообщениеОбмена);
	ПКО_СправочникСсылкаКонтрагенты(ПакетДанных.Provider, СтруктураВозврата, СообщениеОбмена);
	
	// << 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
	СтруктураВозврата.Вставить("ТоварнаяКатегория");
	СтруктураВозврата.Вставить("КР_ТипТовара");
	ПКО_СправочникСсылкаТоварныеКатегории(ПакетДанных.ProductCategory, СтруктураВозврата, СообщениеОбмена, Отказ);
	ПКО_СправочникСсылкаТипыТовара(ПакетДанных.ProductType, СтруктураВозврата, СообщениеОбмена, Отказ);
	// >> 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
	
	// << 22.06.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1859
	СтруктураВозврата.Вставить("Производитель");
	ПКО_СправочникСсылкаПроизводители(ПакетДанных.Manufacturer, СтруктураВозврата, СообщениеОбмена, Отказ);
	// >> 22.06.2023, Федоров Д.Е., КРОК, Jira№ A2105505-1859
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗаписатьПредупреждениеПоискаВЛог(СообщениеОбмена, ДанныеПоиска, МетаданныеПоиска)
	
	ТекстСообщения = НСтр("ru = 'Не удалось найти элемент ""%1"" справочника ""%2"" по данным синхронизации.'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, ДанныеПоиска, МетаданныеПоиска.Синоним);
	
	КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, 
		КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибкаПоискаСсылки(МетаданныеПоиска));
	
КонецПроцедуры

Процедура ЗаписатьОшибкуПоискаВЛог(СообщениеОбмена, ДанныеПоиска, МетаданныеПоиска, Отказ)
	
	Отказ = Истина;
	
	ТекстСообщения = НСтр("ru = 'Не удалось найти элемент ""%1"" справочника ""%2"" по данным синхронизации.
		|Сообщение обмена не обработано.'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, ДанныеПоиска, МетаданныеПоиска.Синоним);
	
	КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, 
		КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_ОшибкаПоискаСсылки(МетаданныеПоиска));
	
КонецПроцедуры

Процедура ЗаписатьПредупреждениеНетДанныхВЛог(СообщениеОбмена, МетаданныеПоиска)
	
	ТекстСообщения = НСтр("ru = '%1. Данные загрузки не определены.'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, МетаданныеПоиска.ПолноеИмя());
	
	КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, 
		КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибкаПоискаСсылки(МетаданныеПоиска));
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруПоДаннымСинхронизации(НоменклатураОбъект, ПакетДанных)
	
	ВесЧислительЗаполнен   = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПакетДанных, "AverageWeight")
		И ЗначениеЗаполнено(ПакетДанных.AverageWeight);
	ОбъемЧислительЗаполнен = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПакетДанных, "AverageVolume")
		И ЗначениеЗаполнено(ПакетДанных.AverageVolume);
		
	СкладскиеГруппыБезУпаковок =
		КР_ДополнительныеНастройкиПовтИсп.МассивЗначений("СкладскиеГруппыНоменклатурыБезУпаковок");
	Если СкладскиеГруппыБезУпаковок.Количество() Тогда
		// Прим. разработчика
		// Т.к. метод возвращает нефиксированный массив,
		// нет гарантии, что первый элемент в массиве является
		// первым элементом в списке значений доп.настройки
		НоменклатураОбъект.СкладскаяГруппа = СкладскиеГруппыБезУпаковок[0];
	КонецЕсли;
	
	// << 17.03.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1425
	НоменклатураОбъект.ВестиУчетПоГТД = Истина;
	Если ЗначениеЗаполнено(НоменклатураОбъект.ПроизводительИмпортерКонтрагент) Тогда
		СтранаКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			НоменклатураОбъект.ПроизводительИмпортерКонтрагент, "СтранаРегистрации");
		
		Если СтранаКонтрагента = Справочники.СтраныМира.Россия Тогда
			НоменклатураОбъект.ВестиУчетПоГТД = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтранаКонтрагента)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтранаКонтрагента, "УчастникЕАЭС") Тогда
			НоменклатураОбъект.ВестиУчетПоГТД = Ложь;
		КонецЕсли;
	Иначе
		НоменклатураОбъект.ВестиУчетПоГТД = Ложь;
	КонецЕсли;
	// >> 17.03.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1425
		
	НоменклатураОбъект.Качество                     = Перечисления.ГрадацииКачества.Новый;
	НоменклатураОбъект.Наименование                 = ПакетДанных.WorkingName;
	// << 27.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2530
	НоменклатураОбъект.Наименование 				= УдалитьНепечатныеСимволы(НоменклатураОбъект.Наименование);   
	// >> 27.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2530
	НоменклатураОбъект.Артикул                      = СокрЛП(СтрШаблон(НСтр("ru = '%1 %2'"),
														ПакетДанных.Article, ПакетДанных.Colour.ColourId));
	НоменклатураОбъект.КР_Модель                    = ПакетДанных.Article;
	НоменклатураОбъект.КР_НаименованиеПоСертификату = ПакетДанных.NameCert;
	НоменклатураОбъект.КР_НетВшивногоЯрлыка         = ПакетДанных.LousyLabel;
	НоменклатураОбъект.КР_ПечатьEAC                 = ПакетДанных.EAC;
	НоменклатураОбъект.КР_ПечатьРСТ                 = ПакетДанных.PCT;
	НоменклатураОбъект.КР_Мех                       = ПакетДанных.Fur;
	НоменклатураОбъект.КР_МехАнг                    = ПакетДанных.FurEng;
	НоменклатураОбъект.КР_СоставПодкладки           = ПакетДанных.LiningСomposition;
	НоменклатураОбъект.КР_СоставПодкладкиАнг        = ПакетДанных.LiningСompositionEng;
	НоменклатураОбъект.КР_СоставТкани               = ПакетДанных.FabriсСomposition;
	НоменклатураОбъект.КР_СоставТканиАнг            = ПакетДанных.FabriсСompositionEng;
	НоменклатураОбъект.КР_Утеплитель                = ПакетДанных.Insulation;
	НоменклатураОбъект.КР_УтеплительАнг             = ПакетДанных.InsulationEng;
	
	// << 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
	НоменклатураОбъект.КР_НаименованиеНаЦеннике     = ПакетДанных.NamePriceTag;
	НоменклатураОбъект.КР_ДатаЗаказа                = ПакетДанных.OrderDate;
	// >> 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
	
	// --> Евлахов Игорь Николаевич (Начало) 26.09.2024
	// Задача #4761
	НоменклатураОбъект.злПроизводительДляЦенника = ПакетДанных.ManufacturerPriceTag;
	НоменклатураОбъект.злАдресПроизводителяДляЦенника = ПакетДанных.ManufacturerAddressPriceTag;
	НоменклатураОбъект.злСертификационныйЦентрДляЦенника = ПакетДанных.CertificationCenterPriceTag;
	НоменклатураОбъект.злНомерСертификатаДляЦенника = ПакетДанных.CertificateNumberPriceTag;
	НоменклатураОбъект.злДатаСертификатаДляЦенника = ПакетДанных.DateCertificatePriceTag;
	НоменклатураОбъект.злСхемаДляЦенника = ПакетДанных.SchemePriceTag;
	НоменклатураОбъект.злРазмерДляАксессуаров = ПакетДанных.SizeForAccessories;
	// Задача #4761
	// <-- Евлахов Игорь Николаевич (Конец) 26.09.2024
	
	Если ВесЧислительЗаполнен Тогда
		НоменклатураОбъект.ВесИспользовать          = Истина;
		НоменклатураОбъект.ВесЕдиницаИзмерения      = Константы.ЕдиницаИзмеренияВеса.Получить();
		НоменклатураОбъект.ВесЧислитель             = ПакетДанных.AverageWeight;
		НоменклатураОбъект.ВесЗнаменатель           = 1;
	КонецЕсли;
	
	Если ОбъемЧислительЗаполнен Тогда
		НоменклатураОбъект.ОбъемИспользовать        = Истина;
		НоменклатураОбъект.ОбъемЕдиницаИзмерения    = Константы.ЕдиницаИзмеренияОбъема.Получить();
		НоменклатураОбъект.ОбъемЧислитель           = ПакетДанных.AverageVolume * 1000000;
		НоменклатураОбъект.ОбъемЗнаменатель         = 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидНоменклатурыПоДаннымСинхронизации(ОбъектСправочника, ПакетДанных)
	
	ОбъектСправочника.Заполнить(Неопределено);
	
	ОбъектСправочника.ВариантОформленияПродажи =
		Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	ОбъектСправочника.ВариантПредставленияНабораВПечатныхФормах =
		Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие;
	ОбъектСправочника.ВариантРасчетаЦеныНабора =
		Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих;
	ОбъектСправочника.ВестиУчетПоГТД = Ложь;
	ОбъектСправочника.ЗапретРедактированияНаименованияДляПечатиНоменклатуры = Истина;
	ОбъектСправочника.ЗапретРедактированияНаименованияДляПечатиХарактеристики = Истина;
	ОбъектСправочника.ИспользованиеХарактеристик =
		Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры;
	ОбъектСправочника.ИспользоватьНомерСерии = Ложь;
	ОбъектСправочника.ИспользоватьХарактеристики = Истина;
	ОбъектСправочника.ПолитикаУчетаСерий = Справочники.ПолитикиУчетаСерий.СерииНеИспользуются;
	ОбъектСправочника.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	ОбъектСправочника.ШаблонНаименованияДляПечатиНоменклатуры =
		НСтр("ru = '[Наименование] + "" Состав: "" + [КР_СоставТкани]'");
	ОбъектСправочника.ШаблонНаименованияДляПечатиКлючаЦен = НСтр("ru = '[Наименование]'"); 
	// << 01.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2550
	//ОбъектСправочника.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета;   
	// >> 01.12.2023 Марченко С.Н., КРОК, JIRA№A2105505-2550
	ОбъектСправочника.РазрезыЦенообразования = "Номенклатура, Характеристика";
	ОбъектСправочника.НастройкиКлючаЦенПоНоменклатуре = Перечисления.ВариантОтбораДляКлючаЦен.НеИспользовать;
	ОбъектСправочника.НастройкиКлючаЦенПоХарактеристике = Перечисления.ВариантОтбораДляКлючаЦен.Использовать;
	ОбъектСправочника.НастройкиКлючаЦенПоСерии = Перечисления.ВариантОтбораДляКлючаЦен.НеИспользовать;
	ОбъектСправочника.НастройкиКлючаЦенПоУпаковке = Перечисления.ВариантОтбораДляКлючаЦен.НеИспользовать;
	ОбъектСправочника.ШаблонНаименованияДляПечатиНоменклатурыИсторияПереходаНаНовыеФормулы = НСтр("ru = '[Наименование]'");
	ОбъектСправочника.ШаблонНаименованияДляПечатиХарактеристикиИсторияПереходаНаНовыеФормулы = НСтр("ru = '[Наименование]'");
	
	// << 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
	ОбъектСправочника.ВестиУчетСертификатовНоменклатуры = Истина;
	ОбъектСправочника.ВладелецТоварныхКатегорий =
		КР_ДополнительныеНастройкиПовтИсп.Значение("ВидНоменклатурыСОбщимиКатегориямиТоваров");
	ОбъектСправочника.ТоварныеКатегорииОбщиеСДругимВидомНоменклатуры = Истина;
	ОбъектСправочника.ШаблонЦенника = КР_ДополнительныеНастройкиПовтИсп.Значение("ШаблонЦенника");
	ОбъектСправочника.ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияКоличестваШтук.Получить();
	ОбъектСправочника.ЕдиницаДляОтчетов = ОбъектСправочника.ЕдиницаИзмерения;
	// >> 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
	
	ВсеРеквизиты      = ЗначениеНастроекПовтИсп.ВсеРеквизитыНоменклатуры(
														ОбъектСправочника.ТипНоменклатуры,
														ОбъектСправочника.ОсобенностьУчета,
														ОбъектСправочника.ИспользоватьХарактеристики,
														ОбъектСправочника.ИспользоватьСрокГодностиСерии);
	РеквизитыКонтроля = Справочники.ВидыНоменклатуры.КоллекцияРеквизитовДляКонтроля(ОбъектСправочника, "Номенклатура");
	РеквизитыОтбора   = Справочники.ВидыНоменклатуры.КоллекцияРеквизитовОтбора(ОбъектСправочника, "Номенклатура");
														
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"ЕдиницаДляОтчетов"           , Истина, Истина, Истина, Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_Модель"                   , Истина, Ложь  , Истина, Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_Цвет"                     , Истина, Ложь  , Истина, Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_Линия"                    , Истина, Ложь  , Истина, Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_НаименованиеПоСертификату", Ложь  , Ложь  , Истина, Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_НетВшивногоЯрлыка"        , Ложь  , Ложь  , Ложь  , Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_ПечатьEAC"                , Ложь  , Ложь  , Ложь  , Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_ПечатьРСТ"                , Ложь  , Ложь  , Ложь  , Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_Мех"                      , Ложь  , Ложь  , Истина, Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_МехАнг"                   , Ложь  , Ложь  , Истина, Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_СоставПодкладки"          , Ложь  , Ложь  , Истина, Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_СоставПодкладкиАнг"       , Ложь  , Ложь  , Истина, Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_СоставТкани"              , Ложь  , Ложь  , Истина, Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_СоставТканиАнг"           , Ложь  , Ложь  , Истина, Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_Утеплитель"               , Ложь  , Ложь  , Истина, Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_УтеплительАнг"            , Ложь  , Ложь  , Истина, Истина);
	
	// << 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_ТипТовара"                , Истина, Ложь  , Истина, Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"ТоварнаяКатегория"           , Истина, Ложь  , Истина, Истина);
	
	// Уникальность Артикула
	НастройкаАртикул = РеквизитыКонтроля.Найти("Артикул", "ИмяРеквизита");
	Если Не НастройкаАртикул = Неопределено Тогда
		НастройкаАртикул.Уникален = Истина;
	КонецЕсли;
	// >> 17.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1179
	
	ДобавитьРеквизитОтбораВидаНоменклатуры(ВсеРеквизиты, РеквизитыОтбора, "Артикул");
	ДобавитьРеквизитОтбораВидаНоменклатуры(ВсеРеквизиты, РеквизитыОтбора, "КР_Модель");
	ДобавитьРеквизитОтбораВидаНоменклатуры(ВсеРеквизиты, РеквизитыОтбора, "КР_Цвет");
	ДобавитьРеквизитОтбораВидаНоменклатуры(ВсеРеквизиты, РеквизитыОтбора, "КоллекцияНоменклатуры");
	ДобавитьРеквизитОтбораВидаНоменклатуры(ВсеРеквизиты, РеквизитыОтбора, "КР_Линия");
	ДобавитьРеквизитОтбораВидаНоменклатуры(ВсеРеквизиты, РеквизитыОтбора, "Производитель");
	
	
	ВсеРеквизиты      = ЗначениеНастроекПовтИсп.ВсеРеквизитыХарактеристикНоменклатуры(
														ОбъектСправочника.ТипНоменклатуры,
														ОбъектСправочника.ОсобенностьУчета);
	РеквизитыКонтроля = Справочники.ВидыНоменклатуры.КоллекцияРеквизитовДляКонтроля(
												ОбъектСправочника, "ХарактеристикиНоменклатуры");
	РеквизитыОтбора   = Справочники.ВидыНоменклатуры.КоллекцияРеквизитовОтбора(
												ОбъектСправочника, "ХарактеристикиНоменклатуры");
	
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"ВидНоменклатуры"   , Ложь  , Истина, Истина, Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_КодТНВЭД"       , Истина, Истина, Истина, Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"НаименованиеПолное", Ложь  , Ложь  , Истина, Истина);
	ДобавитьРеквизитКонтроляВидаНоменклатуры(ВсеРеквизиты, РеквизитыКонтроля,
		"КР_Размер"         , Истина, Ложь  , Истина, Истина);
	// << 02.02.2023 Федотов А.М., КРОК, Jira№A2105505-384
	// При открытии формы выбора характеристик выходит ошибка. 
	// Требуется доработка общего механизма для подобной настройки 
	//ДобавитьРеквизитОтбораВидаНоменклатуры(ВсеРеквизиты, РеквизитыОтбора, "КР_Размер");
	// >> 02.02.2023 Федотов А.М., КРОК, Jira№A2105505-384
	
КонецПроцедуры

Процедура ДобавитьРеквизитКонтроляВидаНоменклатуры(
		ВсеРеквизиты, РеквизитыКонтроля, ИмяРеквизита, Отображение,
		ДоступностьУникальности, ДоступностьЗаполнения, ДоступностьОтображения)
	
	нСтрока = РеквизитыКонтроля.Найти(ИмяРеквизита, "ИмяРеквизита");
	Если нСтрока = Неопределено Тогда
		нСтрока = РеквизитыКонтроля.Добавить();
	КонецЕсли;
	
	нСтрока.ИмяРеквизита = ИмяРеквизита;
	нСтрока.ПредставлениеРеквизита = ВсеРеквизиты[ИмяРеквизита].Представление;
	нСтрока.ЭтоДопРеквизит = Ложь;
	нСтрока.ОтображатьПриСоздании = Отображение;
	нСтрока.ДоступностьОтображатьПриСоздании = ДоступностьОтображения;
	нСтрока.ДоступностьЗаполнятьОбязательно = ДоступностьЗаполнения;
	нСтрока.ДоступностьУникален = ДоступностьУникальности;
	
КонецПроцедуры

Процедура ДобавитьРеквизитОтбораВидаНоменклатуры(ВсеРеквизиты, РеквизитыОтбора, ИмяРеквизита)
	
	нСтрока = РеквизитыОтбора.Найти(ИмяРеквизита, "ИмяРеквизита");
	Если нСтрока = Неопределено Тогда
		нСтрока = РеквизитыОтбора.Добавить();
	КонецЕсли;
	
	нСтрока.ИмяРеквизита = ИмяРеквизита;
	нСтрока.ПредставлениеРеквизита = ВсеРеквизиты[ИмяРеквизита].Представление;
	нСтрока.ЭтоДопРеквизит = Ложь;
	нСтрока.Используется = Истина;
	
КонецПроцедуры

Функция НайтиСсылкуСправочникаДляЗагрузки(ИмяСправочника, СтруктураПоиска)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ссылка", Неопределено);
	СтруктураВозврата.Вставить("УказатьИД", Истина);
	
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.Ссылка, %1 КАК УказатьИД
		|ИЗ
		|	Справочник.%2 КАК Таблица
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|	И Таблица.%3 = &%3";
	
	// Первый параметр структуры поиска всегда должен быть IDPLM
	// Если по первому параметру будет найдена ссылка, для такого
	// элемента справочника IDPLM перезаполняться не должен (флаг УказатьИД)
	МассивЗапросов = Новый Массив;
	ПервыйПараметр = Истина;
	Запрос = Новый Запрос;
	Для Каждого КлючЗначение Из СтруктураПоиска Цикл
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		
		ТекущийТекстЗапроса = СтрШаблон(ТекстЗапроса,
			?(ПервыйПараметр, "ЛОЖЬ", "ИСТИНА"),
			ИмяСправочника,
			КлючЗначение.Ключ);
		МассивЗапросов.Добавить(ТекущийТекстЗапроса);
		
		ПервыйПараметр = Ложь;
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(МассивЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПерезаполнитьСтавкиНДСНоменклатуры(ВидНоменклатуры, НоваяСтавкаНДС, СообщениеОбмена)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
	|	И НЕ Номенклатура.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоменклатураОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НоменклатураОбъект.СтавкаНДС = НоваяСтавкаНДС;
		Если Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(НоменклатураОбъект, СообщениеОбмена) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// << 27.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2530
Функция УдалитьНепечатныеСимволы(ИсходнаяСтрока)

	Результат = ИсходнаяСтрока;
	
	Результат = СтрЗаменить(Результат, Символы.ПС, " "); 
	Результат = СтрЗаменить(Результат, Символы.ВК, " "); 
	Результат = СтрЗаменить(Результат, "¶", " ");  
	
	// Удаляем двойные пробелы
	Пока СтрНайти(Результат, "  ") Цикл 
		Результат = СтрЗаменить(Результат, "  ", " ");  
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции // >> 27.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2530

#КонецОбласти

#КонецОбласти
