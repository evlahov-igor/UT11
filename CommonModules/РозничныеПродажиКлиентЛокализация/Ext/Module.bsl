
#Область ПрограммныйИнтерфейс

#Область ФискальныеОперации

// Запускает механизм проверки кодов маркировки средствами ККТ
// 
// Параметры:
//  ПозицииЧека - Массив - Позиции чека
//  ФормаВладелец - ФормаКлиентскогоПриложения - Форма владелец
//  ЗаголовокКнопкиИгнорировать - Строка, Неопределено - Заголовок кнопки игнорировать
//  ОповещениеОЗавершении - ОписаниеОповещения - Оповещение о завершении
//  ФормаПросмотра - ФормаКлиентскогоПриложения, Неопределено - Форма просмотра
Процедура ПроверитьКодМаркировкиСредствамиККТ(ПозицииЧека, ФормаВладелец, ЗаголовокКнопкиИгнорировать = Неопределено, ОповещениеОЗавершении, ФормаПросмотра = Неопределено) Экспорт
	
	//++ Локализация
	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ФормаВладелец);
	
	Если ФормаПросмотра <> Неопределено
		И МенеджерОборудованияВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(ФормаПросмотра.ОборудованиеККТ) Тогда
		ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ = Истина;
		ПараметрыСканирования.ККТФФД12ИСМП                   = ФормаПросмотра.ОборудованиеККТ;
	КонецЕсли;
	
	ДанныеДляПроверки = Новый Массив;
	
	Для Каждого ПозицияЧека Из ПозицииЧека Цикл
		
		Если НЕ ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ПозицияЧека, "РезультатРаспределенияВрем")
			ИЛИ ПозицияЧека.РезультатРаспределенияВрем = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементДанныхДляПроверки = ШтрихкодированиеИСМПКлиент.НовыйЭлементПроверкиСредствамиККТПоДаннымРаспределения(
			ПозицияЧека.РезультатРаспределенияВрем);
		
		ДанныеДляПроверки.Добавить(ЭлементДанныхДляПроверки);
		
	КонецЦикла;
	
	ПараметрыПроверкиКМСредствамиККТ = ШтрихкодированиеИСМПКлиент.ПараметрыНачалаПроверкиКодовМаркировкиСредствамиККТ();
	ПараметрыПроверкиКМСредствамиККТ.ОповещениеОЗавершении       = ОповещениеОЗавершении;
	ПараметрыПроверкиКМСредствамиККТ.ДанныеДляПроверки           = ДанныеДляПроверки;
	ПараметрыПроверкиКМСредствамиККТ.ПараметрыСканирования       = ПараметрыСканирования;
	ПараметрыПроверкиКМСредствамиККТ.ФормаОсновногоОбъекта       = ФормаВладелец;
	ПараметрыПроверкиКМСредствамиККТ.ФормаВспомогательная        = ФормаПросмотра;
	ПараметрыПроверкиКМСредствамиККТ.ЗаголовокКнопкиИгнорировать = ЗаголовокКнопкиИгнорировать;
	
	Объект = ФормаВладелец.Объект; // ДокументОбъект - 
	ДокументСсылка = Объект.Ссылка;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		
		ПараметрыПроверкиКМСредствамиККТ.ЭтоДокументОплаты = Истина;
	КонецЕсли;
	
	ШтрихкодированиеИСМПКлиент.НачатьПроверкуКодовМаркировкиСредствамиККТ(ПараметрыПроверкиКМСредствамиККТ);
	//-- Локализация
	
КонецПроцедуры

// Определяет, требуется ли проверка кодов маркировки средствами ККТ.
// 
// Параметры:
//  ПараметрыОперацииФискализацииЧека - Структура - Параметры операции фискализации чека
// 
// Возвращаемое значение:
//  Булево - Истина - требуется проверка кодов маркировки средствами ККТ
Функция ТребуетсяПроверкаКодовМаркировкиСредствамиККТ(ПараметрыОперацииФискализацииЧека) Экспорт
	
	ТребуетсяПроверкаКодовМаркировкиСредствамиККТ = Ложь;
	
	//++ Локализация
	ПозицииЧека = ПараметрыОперацииФискализацииЧека.ПозицииЧека;
	
	Для Каждого ПозицияЧека Из ПозицииЧека Цикл
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ПозицияЧека, "РезультатРаспределенияВрем")
			И ПозицияЧека.РезультатРаспределенияВрем <> Неопределено Тогда
			
			ТребуетсяПроверкаКодовМаркировкиСредствамиККТ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	//-- Локализация
	
	Возврат ТребуетсяПроверкаКодовМаркировкиСредствамиККТ;
	
КонецФункции

#КонецОбласти

#КонецОбласти