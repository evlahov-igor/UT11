///////////////////////////////////////////////
// БИБЛИОТЕКА МЕТОДОВ ПРОГРАММНОГО ИЗМЕНЕНИЯ ФОРМ

#Область ПрограммныйИнтерфейс

#Область МетодыПроверкиНаличияСущностиВОбъекте

Функция ЕстьРеквизитФормы(
	Форма, ИмяРеквизита, Путь = "", РеквизитФормы = Неопределено) Экспорт   
	
	МассивРеквизитов = Форма.ПолучитьРеквизиты(Путь);
	Для Каждого Реквизит Из МассивРеквизитов Цикл
		Если ВРег(Реквизит.Имя) = ВРег(ИмяРеквизита) Тогда    
			РеквизитФормы = Реквизит;
		    Возврат Истина;
		КонецЕсли;    
	КонецЦикла;

	Возврат Ложь;
			
КонецФункции

Функция ЕстьКомандаФормы(
	Форма, ИмяКоманды, КомандаФормы = Неопределено) Экспорт   
	
	Команда = Форма.Команды.Найти(ИмяКоманды);
	Если Команда <> Неопределено Тогда 
		КомандаФормы = Команда;
		Возврат Истина;
	Иначе 	
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЕстьЭлементФормы(
	Форма, ИмяЭлемента, ЭлементФормы = Неопределено) Экспорт   
	
	Элемент = Форма.Элементы.Найти(ИмяЭлемента);
	Если Элемент <> Неопределено Тогда 
		ЭлементФормы = Элемент;
		Возврат Истина;
	Иначе 	
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция ДобавитьРеквизитФормы(
	Форма, 
	ИмяРеквизита, 
	Знач ТипЗначения, 
	Путь = "", 
	Заголовок = "", 
	СохраняемыеДанные = Ложь
	) Экспорт   
	
	РеквизитФормы = Неопределено;
	Если ЕстьРеквизитФормы(Форма, ИмяРеквизита, Путь, РеквизитФормы) Тогда 
		Возврат РеквизитФормы;
	КонецЕсли;
	
	ТипЗначения = ПривестиСтроковыйТипЗначения(ТипЗначения);
	
	РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ТипЗначения, Путь, Заголовок, СохраняемыеДанные);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Возврат РеквизитФормы;
	
КонецФункции	

Функция ДобавитьКомандуФормы(
	Форма, ИмяКоманды, Заголовок, Действие = Неопределено) Экспорт   
	
	КомандаФормы = Неопределено;
	Если ЕстьКомандаФормы(Форма, ИмяКоманды, КомандаФормы) Тогда 
		Возврат КомандаФормы;
	КонецЕсли;
	
	КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);  
	КомандаФормы.Заголовок = Заголовок;
	
	Если Действие <> Неопределено Тогда 
		КомандаФормы.Действие = Действие;  
	Иначе
		КомандаФормы.Действие = ИмяКоманды;  
	КонецЕсли;	
	
	Возврат КомандаФормы;
	
КонецФункции

Функция ВставитьЭлементФормы(
	Форма, 
	Знач ОтображаемыйОбъект, 
	Знач Родитель = Неопределено, 
	Знач Элемент = Неопределено,
	Знач ТипЭлемента = Неопределено
	) Экспорт

	// Определим "параметры" отображаемого объекта
	// Если передали путь к данным реквизита, то найдем реквизит    
	ПутьКДанным = Неопределено;
	ИмяЭлемента = Неопределено; 
	ОтображаемыйОбъект = ОпределитьПараметрыОтображаемогоОбъектаФормы(
		Форма, ОтображаемыйОбъект, ПутьКДанным, ИмяЭлемента, ТипЭлемента);
	
	ПрефиксНаУдаление = "Объект"; 
	
	Если СтрНачинаетсяС(ВРег(ИмяЭлемента), ВРег(ПрефиксНаУдаление)) Тогда 
		ИмяЭлемента = Сред(ИмяЭлемента, СтрДлина(ПрефиксНаУдаление) + 1);
	КонецЕсли;
	
	ЭлементФормы = Неопределено;
	Если ЕстьЭлементФормы(Форма, ИмяЭлемента, ЭлементФормы) Тогда 
		Возврат ЭлементФормы;
	КонецЕсли; 
		
	// Если Родитель не заполнен, но заполнен Элемент
	//	то установим родителя из элемента (платформа этого не умеет)
	Если Родитель = Неопределено
		И Элемент <> Неопределено Тогда 
		Родитель = Элемент.Родитель;
	КонецЕсли;
	
	ЭлементФормы = Форма.Элементы.Вставить(ИмяЭлемента, ТипЭлемента, Родитель, Элемент);
   		
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементФормы, "ПутьКДанным") Тогда    		
		ЭлементФормы.ПутьКДанным = ПутьКДанным;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементФормы, "Вид") Тогда 
			ЭлементФормы.Вид = ПолучитьВидЭлемента(ОтображаемыйОбъект);
		КонецЕсли;	
	КонецЕсли;	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементФормы, "ИмяКоманды") Тогда 
		ЭлементФормы.ИмяКоманды = ПолучитьИмяКоманды(ОтображаемыйОбъект);
	КонецЕсли;	
			
	Возврат ЭлементФормы;
	
КонецФункции

Функция ВставитьГруппуФормы(
	Форма, 
	ИмяГруппы, 
	Родитель = Неопределено, 
	Элемент = Неопределено
	) Экспорт
	
	ТипЭлемента = Тип("ГруппаФормы");
	
	ЭлементФормы = Неопределено;
	Если ЕстьЭлементФормы(Форма, ИмяГруппы, ЭлементФормы) Тогда 
		Если ТипЗнч(ЭлементФормы) = ТипЭлемента Тогда
			Возврат ЭлементФормы;
		Иначе
			ТекстИсключения = НСтр("ru = 'Тип ""%1"" элемента формы ""%2"" не совпадает с ожидаемым ""%3"".'");
			ТекстИсключения = СтрШаблон(ТекстИсключения, ТипЗнч(ЭлементФормы), ИмяГруппы, ТипЭлемента);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЕсли;
	
	// Если Родитель не заполнен, но заполнен Элемент
	//	то установим родителя из элемента (платформа этого не умеет)
	Если Родитель = Неопределено
		И Элемент <> Неопределено Тогда 
		Родитель = Элемент.Родитель;
	КонецЕсли;
	
	ЭлементФормы = Форма.Элементы.Вставить(
		ИмяГруппы, ТипЭлемента, Родитель, Элемент);
	
	Возврат ЭлементФормы;
	
КонецФункции

Функция ВставитьДекорациюФормы(
	Форма,
	ИмяДекорации,
	Родитель = Неопределено,
	Элемент = Неопределено
	) Экспорт
	
	ТипЭлемента = Тип("ДекорацияФормы");
	
	ЭлементФормы = Неопределено;
	Если ЕстьЭлементФормы(Форма, ИмяДекорации, ЭлементФормы) Тогда 
		Если ТипЗнч(ЭлементФормы) = ТипЭлемента Тогда
			Возврат ЭлементФормы;
		Иначе
			ТекстИсключения = НСтр("ru = 'Тип ""%1"" элемента формы ""%2"" не совпадает с ожидаемым ""%3"".'");
			ТекстИсключения = СтрШаблон(ТекстИсключения, ТипЗнч(ЭлементФормы), ИмяДекорации, ТипЭлемента);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЕсли;
	
	// Если Родитель не заполнен, но заполнен Элемент
	//	то установим родителя из элемента (платформа этого не умеет)
	Если Родитель = Неопределено
		И Элемент <> Неопределено Тогда 
		Родитель = Элемент.Родитель;
	КонецЕсли;
	
	ЭлементФормы = Форма.Элементы.Вставить(
		ИмяДекорации, ТипЭлемента, Родитель, Элемент);
	
	Возврат ЭлементФормы;
	
КонецФункции

Функция ВставитьЭлементыФормы(
	Форма, 
	МассивОтображаемыйОбъект, 
	Родитель = Неопределено, 
	Элемент = Неопределено
	) Экспорт
	
	ЭлементыФормы = Новый Соответствие;
	
	// Обходим циклом и добавляем по одному
	// Если производится вставка элементов, 
	//	то обход должен выполняться в обратном порядке
	Если Элемент <> Неопределено Тогда 

		Для Итератор = -МассивОтображаемыйОбъект.Количество() + 1 По 0 Цикл  
			ЭлементМассива = МассивОтображаемыйОбъект[-Итератор];
			ЭлементыФормы[ЭлементМассива] = ВставитьЭлементФормы(Форма,
				ЭлементМассива, Родитель, Элемент);
		КонецЦикла;		
		
	Иначе

		Для Каждого ЭлементМассива Из МассивОтображаемыйОбъект Цикл 
			ЭлементыФормы[ЭлементМассива] = ВставитьЭлементФормы(Форма,
				ЭлементМассива, Родитель, Элемент);
		КонецЦикла;		
		
	КонецЕсли;
	
	Возврат ЭлементыФормы;
	
КонецФункции

#Область МетодыИзмененияСвойстЭлементовФорм

Процедура УстановитьСвойстваОбычнаяГруппаБезОтображения(ЭлементГруппыФормы, Группировка)     
	
	ЭлементГруппыФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементГруппыФормы.ОтображатьЗаголовок = Ложь;
	ЭлементГруппыФормы.Отображение = ОтображениеОбычнойГруппы.Нет;
	ЭлементГруппыФормы.Группировка = Группировка;
	
КонецПроцедуры

Процедура УстановитьСвойстваОбычнаяГруппаГоризонтальноБезОтображения(ЭлементГруппыФормы) Экспорт     
	
	УстановитьСвойстваОбычнаяГруппаБезОтображения(ЭлементГруппыФормы, 
		ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
		
КонецПроцедуры

// Процедура - Заблокировать элементы рекурсивно
//
// Параметры:
//  ЭлементРодитель								 - ЭлементФормы,Форма - Блокируемый элемент
//  ИсключенияБлокировкиЭлементов				 - Массив - Массив имен эелементов исключений
//  ИсходноеСостояниеЗаблокированныхЭлементов	 - Соответствие - Соответстве в которое будет
//		возвращени исходное состояние флагов элементов для последующего восстановления		
//      
// Требуется проверка на рефакторинг: Объединить ЗаблокироватьЭлементыРекурсивно И ЗаблокироватьЭлемент 
Процедура ЗаблокироватьЭлементыРекурсивно(ЭлементРодитель, ИсключенияБлокировкиЭлементов = Неопределено,
	ИсходноеСостояниеЗаблокированныхЭлементов = Неопределено) Экспорт 
	
	Если ИсключенияБлокировкиЭлементов = Неопределено Тогда 
		ИсключенияБлокировкиЭлементов = Новый Массив;
	КонецЕсли;   
		
	Если ТипЗнч(ЭлементРодитель) = Тип("ФормаКлиентскогоПриложения") Тогда   
		
		ЗаблокироватьЭлементыРекурсивно(ЭлементРодитель.КоманднаяПанель, ИсключенияБлокировкиЭлементов,
			ИсходноеСостояниеЗаблокированныхЭлементов);  
		
	ИначеЕсли ИсключенияБлокировкиЭлементов.Найти(ЭлементРодитель.Имя) <> Неопределено Тогда 
		Возврат;	
	КонецЕсли;	
	
	Для Каждого Элемент Из ЭлементРодитель.ПодчиненныеЭлементы Цикл    
		
		ЗаблокироватьЭлемент(Элемент, ИсключенияБлокировкиЭлементов, ИсходноеСостояниеЗаблокированныхЭлементов);
		
	КонецЦикла;	
	
КонецПроцедуры       

// Процедура - Заблокировать элемент
//
// Параметры:
//  Элемент										 - ЭлементФормы - Блокируемый элемент
//  ИсключенияБлокировкиЭлементов				 - Массив - Массив имен эелементов исключений
//  ИсходноеСостояниеЗаблокированныхЭлементов	 - Соответствие - Соответстве в которое будет
//		возвращени исходное состояние флагов элементов для последующего восстановления		
//
Процедура ЗаблокироватьЭлемент(Элемент, ИсключенияБлокировкиЭлементов = Неопределено, 
	ИсходноеСостояниеЗаблокированныхЭлементов = Неопределено) Экспорт  
	
	Если ИсключенияБлокировкиЭлементов = Неопределено Тогда 
		ИсключенияБлокировкиЭлементов = Новый Массив;
	КонецЕсли;   
	
	ЭлементТип = ТипЗнч(Элемент);

	Если ЭлементТип = Тип("ГруппаФормы") 
		И ИсключенияБлокировкиЭлементов.Найти(Элемент.Имя) = Неопределено Тогда   
		ЗаблокироватьЭлементыРекурсивно(Элемент, ИсключенияБлокировкиЭлементов, 
			ИсходноеСостояниеЗаблокированныхЭлементов);
	ИначеЕсли ЭлементТип = Тип("ТаблицаФормы") 
		И ИсключенияБлокировкиЭлементов.Найти(Элемент.Имя) = Неопределено Тогда   
			
		ЗаблокироватьЭлементыРекурсивно(Элемент.КоманднаяПанель, ИсключенияБлокировкиЭлементов,
			ИсходноеСостояниеЗаблокированныхЭлементов);
		
		ИзменитьИсходноеСостояниеЭлементаФормы(Элемент, "ИзменятьСоставСтрок", Ложь, ИсходноеСостояниеЗаблокированныхЭлементов);
		ИзменитьИсходноеСостояниеЭлементаФормы(Элемент, "ИзменятьПорядокСтрок", Ложь, ИсходноеСостояниеЗаблокированныхЭлементов);

		ЗаблокироватьЭлементыРекурсивно(Элемент, ИсключенияБлокировкиЭлементов,
			ИсходноеСостояниеЗаблокированныхЭлементов);   
					
	ИначеЕсли ЭлементТип = Тип("КнопкаФормы")
		Или ЭлементТип = Тип("ДополнениеЭлементаФормы") 
		Или ЭлементТип = Тип("ДекорацияФормы") 
		Тогда
		
		НовоеСостояние = Элемент.Доступность
			И ИсключенияБлокировкиЭлементов.Найти(Элемент.Имя) <> Неопределено;
		ИзменитьИсходноеСостояниеЭлементаФормы(Элемент, "Доступность", НовоеСостояние, ИсходноеСостояниеЗаблокированныхЭлементов);
			
	ИначеЕсли ЭлементТип = Тип("ПолеФормы")
		И Элемент.Вид = ВидПоляФормы.ПолеНадписи
		И Элемент.ПолучитьДействие("ОбработкаНавигационнойСсылки") <> "" Тогда  
		
		НовоеСостояние = Элемент.Доступность
			И ИсключенияБлокировкиЭлементов.Найти(Элемент.Имя) <> Неопределено;
		ИзменитьИсходноеСостояниеЭлементаФормы(Элемент, "Доступность", НовоеСостояние, ИсходноеСостояниеЗаблокированныхЭлементов);
			
	Иначе	

		НовоеСостояние = Элемент.ТолькоПросмотр
			Или ИсключенияБлокировкиЭлементов.Найти(Элемент.Имя) = Неопределено;
		ИзменитьИсходноеСостояниеЭлементаФормы(Элемент, "ТолькоПросмотр", НовоеСостояние, ИсходноеСостояниеЗаблокированныхЭлементов);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Разблокировать элементы
//
// Параметры:
//  Элементы									 - ЭлементыФормы - Форма.Элементы или массив элементов формы для разблокировки
//  ИсходноеСостояниеЗаблокированныхЭлементов	 - Соответствие - Ранее заполненное 
//		вызовом метода ЗаблокироватьЭлементыРекурсивно соответствие
//
Процедура РазблокироватьЭлементы(Элементы, ИсходноеСостояниеЗаблокированныхЭлементов) Экспорт  
	
	// Если нет исходного сотояния то нечего разблокировать
	Если Не ЗначениеЗаполнено(ИсходноеСостояниеЗаблокированныхЭлементов) Тогда 
		Возврат;
	КонецЕсли;
	
	// Получим все элементы с учетом подчиненных
	ВсеЭлементы = Новый Массив;
	Для Каждого Элемент Из Элементы Цикл 
		
		// Ищем наличие исходного состояния в кэше
		ИсходноеСостояние = ИсходноеСостояниеЗаблокированныхЭлементов[Элемент.Имя]; 
		// Если не нашли то ничего переходим к следующему
		Если ИсходноеСостояние = Неопределено Тогда 
			Продолжить;	
		КонецЕсли;
		
		// Обходим измененные свойства     
		Для Каждого КлючЗначение Из ИсходноеСостояние Цикл
			
			ИмяИзменяемогоСвойства = КлючЗначение.Ключ;
			СостояниеСвойства = КлючЗначение.Значение;
			
			// На твое успотрение: проверить текущее состояние с тем что мы выставляли   
			// Если изменено то сообщеть о изменении, возможно с учетом СообщатьОбИзменении параметра метода 
			//Если Элемент[ИмяИзменяемогоСвойства] <> СостояниеСвойства.Установлено Тогда 
			//	
			//КонецЕсли;
			
			Элемент[ИмяИзменяемогоСвойства] = СостояниеСвойства.ИсходноеЗначениеСвойства;
						
		КонецЦикла;	
		
		// Удаляем
		ИсходноеСостояниеЗаблокированныхЭлементов.Удалить(Элемент.Имя);
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти  

#Область ЭлементыРеквизитыГруппаИтого

// << 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
Процедура ДобавитьРекизитФормыКоличествоТоварыИтого(Форма) Экспорт
	
	РеквизитКоличество = КР_МетодыМодификацииФорм.ДобавитьРеквизитФормы(Форма, "КР_КоличествоТоварыИтого",
		ОбщегоНазначения.ОписаниеТипаЧисло(18, 3), , НСтр("ru='Количество'"));
		
КонецПроцедуры // >> 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469

// << 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
Процедура ДобавитьЭлементФормыКоличествоТоварыИтого(Форма, Владелец, СледующийЭлемент, ПутьКДанным = "") Экспорт
	
	Если ПутьКДанным = "" Тогда
		ПутьКДанным = "КР_КоличествоТоварыИтого"	
	КонецЕсли;
	
	ЭлементФормы = КР_МетодыМодификацииФорм.ВставитьЭлементФормы(Форма,
		ПутьКДанным, Владелец, СледующийЭлемент);
	ЭлементФормы.ТолькоПросмотр 		= Истина;
	ЭлементФормы.АвтоМаксимальнаяШирина = Ложь;
	ЭлементФормы.Ширина					= 10;
	ЭлементФормы.Заголовок				= НСтр("ru='Количество'");

КонецПроцедуры // >> 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469

// << 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469
Процедура ДобавитьЭлементФормыГруппаИтого(Форма, Владелец, СледующийЭлемент) Экспорт
	
	ГруппаФормы = КР_МетодыМодификацииФорм.ВставитьГруппуФормы(Форма,
		"КР_ГруппаИтого", Владелец, СледующийЭлемент);
	ГруппаФормы.Вид 								= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормы.Отображение 						= ОтображениеОбычнойГруппы.Нет;
	ГруппаФормы.Подсказка 							= НСтр("ru='Итоги'");
	ГруппаФормы.ГоризонтальноеПоложениеВГруппе		= ГоризонтальноеПоложениеЭлемента.Право;
	ГруппаФормы.ГоризонтальноеПоложениеПодчиненных	= ГоризонтальноеПоложениеЭлемента.Право;
	ГруппаФормы.ЦветФона							= ЦветаСтиля.ИтогиФон;
	ГруппаФормы.ОтображатьЗаголовок					= Ложь;
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ГруппаФормы.ЦветФона = Новый Цвет();
	КонецЕсли;
	
КонецПроцедуры // >> 29.03.2023, Федоров Д.Е., КРОК, JIRA№A2105505-1469

#КонецОбласти

#КонецОбласти

#Область СлужебныеМетоды

Процедура ИзменитьИсходноеСостояниеЭлементаФормы(Элемент, ИмяИзменяемогоСвойства, НовоеЗначениеСвойства, 
	ИсходноеСостояниеЗаблокированныхЭлементов)  
	
	ИсходноеЗначениеСвойства = Элемент[ИмяИзменяемогоСвойства];    
	Элемент[ИмяИзменяемогоСвойства] = НовоеЗначениеСвойства;

	// Если не требуется сохранять пред. состояние то выходим
	Если ИсходноеСостояниеЗаблокированныхЭлементов = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	// Ищем наличие исходного состояния в кэше
	ИсходноеСостояние = ИсходноеСостояниеЗаблокированныхЭлементов[Элемент.Имя]; 
	// Если не нашли то создаем
	Если ИсходноеСостояние = Неопределено Тогда 
	    ИсходноеСостояние = Новый Структура;
		ИсходноеСостояниеЗаблокированныхЭлементов[Элемент.Имя] = ИсходноеСостояние;
	КонецЕсли;
	
	// Если свойство элемента уже было установлено то ничего не делаем
	Если ИсходноеСостояние.Свойство(ИмяИзменяемогоСвойства) Тогда 
		Возврат;
	КонецЕсли;
	
	СостояниеСвойства = Новый Структура;
	СостояниеСвойства.Вставить("ИсходноеЗначениеСвойства", ИсходноеЗначениеСвойства);
	СостояниеСвойства.Вставить("Установлено", НовоеЗначениеСвойства);  
	
	ИсходноеСостояние.Вставить(ИмяИзменяемогоСвойства, СостояниеСвойства);
		
КонецПроцедуры	

Функция ПолучитьИмяКоманды(КомандаФормы)

	Если ТипЗнч(КомандаФормы) = Тип("КомандаФормы") Тогда 
		Возврат КомандаФормы.Имя;
	Иначе
		Возврат "";
	КонецЕсли;	
	
КонецФункции		

Функция ПолучитьТипЭлемента(РеквизитФормы)

	// Метод будет расширяться. 
	// На данный момент реализован не оптимально  
	ТипЗначения = РеквизитФормы.ТипЗначения;
	Если ТипЗначения.СодержитТип(Тип("ТаблицаЗначений"))
		Или ТипЗначения.СодержитТип(Тип("ДинамическийСписок"))
		// На рефакторинг: как определить что это табличная часть?  
		// Как вариант по косвенному признаку из метаданных-СтандартныеРеквизиты-НомерСтроки 
		// На данном этапе остановимся на простом варианте исходя из представления типа
		Или Найти(ТипЗначения, "табличная часть:")  
		Тогда 
		Возврат Тип("ТаблицаФормы");		
	Иначе	
		Возврат Тип("ПолеФормы");		
	КонецЕсли;
	
КонецФункции	

Функция ПривестиСтроковыйТипЗначения(ТипЗначения)

	Если ТипЗнч(ТипЗначения) = Тип("Строка") Тогда 
		Возврат Новый ОписаниеТипов(ТипЗначения);
	Иначе
		Возврат ТипЗначения;		
	КонецЕсли;
	
КонецФункции	

Функция ПолучитьПутьКДанным(РеквизитФормы)
	
	// Метод будет расширяться. 
	// На данный момент реализован не оптимально   
	
	Если ТипЗнч(РеквизитФормы) <> Тип("РеквизитФормы") Тогда 
		Возврат "";		
	КонецЕсли;
	
	ПутьКДанным = РеквизитФормы.Имя; 
	Если РеквизитФормы.Путь <> "" Тогда 
		ПутьКДанным = СтрШаблон("%1.%2", РеквизитФормы.Путь, ПутьКДанным);
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции	

Функция ПолучитьВидЭлемента(РеквизитФормы)
	
	// Метод будет расширяться. 
	// На данный момент реализован не оптимально   
	Если РеквизитФормы = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;	            
	
	// Если в описании типов один тип и этот тип "Булево"
	// 	то по умолчанию присвоем ему вид "ПолеФлажка"
	ТипыРеквизита = РеквизитФормы.ТипЗначения.Типы(); 
	Если ТипыРеквизита.Количество() = 1 
		И ТипыРеквизита[0] = Тип("Булево") Тогда 
		Возврат ВидПоляФормы.ПолеФлажка;
	Иначе	
		Возврат ВидПоляФормы.ПолеВвода;
	КонецЕсли;
			
КонецФункции	

Функция НайтиРеквизитФормыПоПутиКДанным(Форма, ПутьКДанным)

	// Для этого надо определить путь к родителю реквизита 
	ПозицияПоследнейТочки = СтрНайти(ПутьКДанным, ".", НаправлениеПоиска.СКонца);
	Если ЗначениеЗаполнено(ПозицияПоследнейТочки) Тогда 
		ПутьКРодителю = Лев(ПутьКДанным, ПозицияПоследнейТочки - 1); 
		ИмяРеквизита = Сред(ПутьКДанным, ПозицияПоследнейТочки + 1);
	Иначе
		ПутьКРодителю = "";     
		ИмяРеквизита = ПутьКДанным;
	КонецЕсли;	
	
	// Ищем реквизит 
	РеквизитФормы = Неопределено;
	Если Не ЕстьРеквизитФормы(Форма, ИмяРеквизита, ПутьКРодителю, РеквизитФормы) Тогда 
		
		ТекстИсключения = НСтр("ru = 'Не найден реквизит формы по пути к данным ""%1""'");  
		ТекстИсключения = СтрШаблон(ТекстИсключения, ПутьКДанным);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Возврат РеквизитФормы;
	
КонецФункции     

Функция ОпределитьПараметрыОтображаемогоОбъектаФормы(Форма, ОтображаемыйОбъект, ПутьКДанным, ИмяЭлемента, ТипЭлемента)   
	
	ТипЗначенияОтображаемыйОбъект = ТипЗнч(ОтображаемыйОбъект);
	Если ТипЗначенияОтображаемыйОбъект = Тип("КомандаФормы") Тогда 
		
		ИмяЭлемента = ОтображаемыйОбъект.Имя; 
		Если ТипЭлемента = Неопределено Тогда 
			ТипЭлемента = Тип("КнопкаФормы");   
		Иначе // ТипЗнч(ТипЭлемента) = Тип("Строка") 
			ТипЭлемента = Тип(ТипЭлемента);	   
		КонецЕсли;	
		
	ИначеЕсли ТипЗначенияОтображаемыйОбъект = Тип("Строка") 
		Или ТипЗначенияОтображаемыйОбъект = Тип("РеквизитФормы") Тогда 
		
		Если ТипЗначенияОтображаемыйОбъект = Тип("Строка") Тогда 		
			ОтображаемыйОбъект = НайтиРеквизитФормыПоПутиКДанным(Форма, ОтображаемыйОбъект);  
		КонецЕсли;	

		ПутьКДанным = ПолучитьПутьКДанным(ОтображаемыйОбъект);
		ИмяЭлемента = СтрЗаменить(ПутьКДанным, ".", ""); 
		Если ТипЭлемента = Неопределено Тогда 
			ТипЭлемента = ПолучитьТипЭлемента(ОтображаемыйОбъект);   
		Иначе // ТипЗнч(ТипЭлемента) = Тип("Строка") 
			ТипЭлемента = Тип(ТипЭлемента);	   
		КонецЕсли;	
			
	Иначе                      
		ТекстИсключения = НСтр("ru = 'Алгоритм добавления элемента формы для типа ""%1"" не определен'");  
		ТекстИсключения = СтрШаблон(ТекстИсключения, ТипЗначенияОтображаемыйОбъект);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;	
	
	Возврат	ОтображаемыйОбъект;

КонецФункции	

// << 12.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-615
// Механизм оставлен для истории, требуется глубокий рефакторинг для универсализации
Функция ПредставлениеТаблицыДинамическогоСписка(Знач ТекстЗапроса, ИмяТаблицы)
	
	ПредставлениеТаблицыЗапроса = "";
	
	ДлинаТекстаЗапроса = СтрДлина(ТекстЗапроса);
	СловоПоиска = ИмяТаблицы + " КАК";
	ДлинаСловаПоиска = СтрДлина(СловоПоиска);
	
	МассивСимволовПредставленияТаблицы = Новый Массив;
	
	ПозицияСловаПоиска = СтрНайти(ВРег(ТекстЗапроса), ВРег(СловоПоиска));
	Если ПозицияСловаПоиска = 0 Тогда
		Возврат ПредставлениеТаблицыЗапроса;
	КонецЕсли;
	
	СимволДоСловаПоиска    = Сред(ТекстЗапроса,ПозицияСловаПоиска - 1, 1);
	СимволПослеСловаПоиска = Сред(ТекстЗапроса,ПозицияСловаПоиска + ДлинаСловаПоиска, 1);
	Если Не ПустаяСтрока(СимволДоСловаПоиска) И Не ПустаяСтрока(СимволПослеСловаПоиска) Тогда
		Возврат ПредставлениеТаблицыЗапроса;
	КонецЕсли;
	
	НачальнаяПозиция = ПозицияСловаПоиска + ДлинаСловаПоиска;
	
	Для Индекс = НачальнаяПозиция По ДлинаТекстаЗапроса Цикл
		Символ = Сред(ТекстЗапроса, Индекс, 1);
		Если Не ПустаяСтрока(Символ) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Формирование имени таблицы.
	Для ИндексЗапроса = Индекс По ДлинаТекстаЗапроса Цикл 
		Символ = Сред(ТекстЗапроса, ИндексЗапроса, 1);
		Если ПустаяСтрока(Символ) Тогда
			Прервать;
		Иначе
			МассивСимволовПредставленияТаблицы.Добавить(Символ);
		КонецЕсли;
	КонецЦикла;
	
	ПредставлениеТаблицыЗапроса = СтрСоединить(МассивСимволовПредставленияТаблицы);
	
	Возврат ПредставлениеТаблицыЗапроса;
	
КонецФункции

#КонецОбласти

