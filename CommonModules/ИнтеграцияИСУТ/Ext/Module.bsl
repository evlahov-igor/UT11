// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

// Возвращяет список типа Перечисления.ВидыПродукцииИС содержащийся в ТЧ.
// 
// Параметры:
// 	Товары - ДанныеФормыКоллекция - ТЧ формы документа.
// Возвращаемое значение:
// 	СписокЗначений - список типа Перечисления.ВидыПродукцииИС содержащийся в ТЧ.
Функция ВидыПродукцииВТоварах(Товары) Экспорт
	
	Результат = Новый Массив;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	Номенклатура.ОсобенностьУчета КАК ОсобенностьУчета
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&Номенклатура)
	|	И Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)
	|	И Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка)
	|	И Не Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.ОсобенностьУчета
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидПродукции = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Выборка.ОсобенностьУчета);
		
		Если ВидПродукции <> Неопределено Тогда
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
				Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
					Результат.Добавить(ВидПродукции);
				КонецЕсли;
			Иначе
				Если ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции().Найти(ВидПродукции)<>Неопределено Тогда
					Результат.Добавить(ВидПродукции);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//Проверяет соответствие количества маркируемой продукции из ТЧ Товары к количеству акцизных марок ТЧ АкцизныеМарки
//
//Параметры:
//   Объект - ДокументОбъект - форма документа для проверки.
//   Отказ  - Булево - Отказ из вызывающего метода.
//   НаДату - Дата - дата для определения обязательности маркировки.
//          - Неопределено - на текущую дату сеанса.
//
Процедура ПроверитьЗаполнениеАкцизныхМарок(Объект, Отказ, НаДату = Неопределено) Экспорт
	
	Ошибки = Неопределено;
	
	ИмяТаблицыАкцизныеМарки = "АкцизныеМарки";
	ПолеТаблицыАкцизныеМарки = "АкцизнаяМарка";
	
	Если НЕ ОбщегоНазначенияУТ.ЕстьРеквизитТабЧастиОбъекта(ПолеТаблицыАкцизныеМарки, Объект.Ссылка.Метаданные(), ИмяТаблицыАкцизныеМарки) Тогда
		ИмяТаблицыАкцизныеМарки = "ШтрихкодыУпаковок";
		ПолеТаблицыАкцизныеМарки = "ШтрихкодУпаковки";
	КонецЕсли;
	
	ОсобенностьУчета = Новый Массив;
	Если НаДату = Неопределено Тогда
		Для Каждого ВидПродукции Из ИнтеграцияИСМП.ВидыПродукцииОбязательнойМаркировки() Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	Иначе
		Для Каждого ВидПродукции Из ИнтеграцияИСМПВызовСервера.УчитываемыеВидыМаркируемойПродукции(НаДату, Ложь) Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	
	Если Не ОсобенностьУчета.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросМаркируемыхТоваров = Новый Запрос;
	ЗапросМаркируемыхТоваров.УстановитьПараметр("Ссылка", Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	ЗапросМаркируемыхТоваров.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	
	ЗапросМаркируемыхТоваров.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Ссылка)
	|	И Номенклатура.ОсобенностьУчета В (&ОсобенностьУчета)";
	ПроверяемыеТовары = ЗапросМаркируемыхТоваров.Выполнить().Выгрузить();
	ПроверяемыеТовары.Индексы.Добавить("Ссылка");
	
	Если ОбщегоНазначенияУТ.ЕстьРеквизитТабЧастиОбъекта("ЧастичноеВыбытиеКоличество", Объект.Ссылка.Метаданные(), ИмяТаблицыАкцизныеМарки) Тогда
		
		ШтрихкодыУпаковок = Новый Массив();
		Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицыАкцизныеМарки] Цикл
			НовыйЭлемент = ШтрихкодированиеИСМП.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаТаблицы);
			НовыйЭлемент.ШтрихкодУпаковки = СтрокаТаблицы[ПолеТаблицыАкцизныеМарки];
			ШтрихкодыУпаковок.Добавить(НовыйЭлемент);
		КонецЦикла;
		
	Иначе
		ШтрихкодыУпаковок = Объект[ИмяТаблицыАкцизныеМарки].Выгрузить().ВыгрузитьКолонку(ПолеТаблицыАкцизныеМарки);
	КонецЕсли;
	
	МаркированныеТовары = ЭлектронноеВзаимодействиеИСМП.Содержимое(ШтрихкодыУпаковок);
	МаркированныеТовары.Индексы.Добавить("Номенклатура, Характеристика, Серия");
	
	ПараметрыУказанияСерий = Документы[Объект.Ссылка.Метаданные().Имя].ПараметрыУказанияСерий(Объект);
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		ПроверяемСтроку = ПроверяемыеТовары.Найти(СтрокаТовары.Номенклатура,"Ссылка");
		Если ПроверяемСтроку = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПроверитьСерииВТаблицеТовары =
			Не НоменклатураКлиентСервер.ВЭтомСтатусеСерииНеУказываются(СтрокаТовары.СтатусУказанияСерий, ПараметрыУказанияСерий)
			И НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(СтрокаТовары.СтатусУказанияСерий, ПараметрыУказанияСерий);
		ПроверитьСерииВТаблицеСерии =
			НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧСерии(СтрокаТовары.СтатусУказанияСерий, ПараметрыУказанияСерий);
		
		ОтборПоПолям = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(ПроверитьСерииВТаблицеТовары Или ПроверитьСерииВТаблицеСерии);
		
		ЗаполнитьЗначенияСвойств(ОтборПоПолям, СтрокаТовары);
		
		СтрокиАкцизныхМарок = МаркированныеТовары.НайтиСтроки(ОтборПоПолям);
		КоличествоМарок = 0;
		Для Каждого СтрокаМарка Из СтрокиАкцизныхМарок Цикл
			КоличествоМарок = КоличествоМарок + СтрокаМарка.Количество;
		КонецЦикла;
		
		Если ПроверитьСерииВТаблицеСерии Тогда
			СтрокиТоваров = Объект.Серии.НайтиСтроки(ОтборПоПолям);
		Иначе
			СтрокиТоваров = Объект.Товары.НайтиСтроки(ОтборПоПолям);
		КонецЕсли;
		КоличествоЕдиницТоваров = 0;
		Для Каждого СтрокаТовар Из СтрокиТоваров Цикл 
			КоличествоЕдиницТоваров = КоличествоЕдиницТоваров + СтрокаТовар.Количество;
		КонецЦикла;
		
		Если КоличествоМарок <> КоличествоЕдиницТоваров Тогда
			
			Если ПроверитьСерииВТаблицеТовары Или ПроверитьСерииВТаблицеСерии Тогда
				ПредставлениеНоменклатуры = ИнтеграцияИС.ПредставлениеНоменклатуры(СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика,, СтрокаТовары.Серия);
			Иначе
				ПредставлениеНоменклатуры = ИнтеграцияИС.ПредставлениеНоменклатуры(СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика);
			КонецЕсли;
			
			Шаблон = НСтр("ru = 'Для маркировки ""%1"" должно быть указано - %2 %4, а указано - %3 %4.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Шаблон,
				ПредставлениеНоменклатуры,
				КоличествоЕдиницТоваров,
				КоличествоМарок,
				ПроверяемСтроку.ЕдиницаИзмерения);
				
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Объект.Товары[%1].Номенклатура",
				ТекстОшибки,
				"",
				СтрокаТовары.НомерСтроки-1);

		КонецЕсли;
		
		ПроверяемыеТовары.Удалить(ПроверяемСтроку);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

Функция ШтрихкодыУпаковок(Источник) Экспорт
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	ТаблицаШтрихкодов.Колонки.Добавить("АлкогольнаяПродукция",         Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	ТаблицаШтрихкодов.Колонки.Добавить("Справка2",                     Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	ТаблицаШтрихкодов.Колонки.Добавить("ОрганизацияЕГАИС",             Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	
	Для Каждого СтрокаТЧ Из Источник.АкцизныеМарки Цикл
		
		НоваяСтрока = ТаблицаШтрихкодов.Добавить();
		НоваяСтрока.ШтрихкодУпаковки             = СтрокаТЧ.АкцизнаяМарка;
		НоваяСтрока.ШтрихкодРодительскойУпаковки = СтрокаТЧ.ШтрихкодУпаковки;
		
	КонецЦикла;
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ИсходныеДанные.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
		|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
		|	ИсходныеДанные.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
		|	ИсходныеДанные.Справка2                     КАК Справка2,
		|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
		|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременнойТаблицы = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременнойТаблицы;
	Запрос.УстановитьПараметр("ИсходныеДанные", ТаблицаШтрихкодов);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	ШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(
		РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать(), МенеджерВременнойТаблицы);
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Типизируем колонки таблицы МаркированныеТовары для передачи в запрос
// и добавляем колонку НомерСтроки.
Процедура ТипизироватьКолонкиМаркированныхТоваров(ТаблицаМаркированныхТоваров) Экспорт
	
	ТаблицаМаркированныхТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаМаркированныхТоваров.Колонки.Добавить("НоменклатураСсылка", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМаркированныхТоваров.Колонки.Добавить("ХарактеристикаСсылка", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаМаркированныхТоваров.Колонки.Добавить("СерияСсылка", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаМаркированныхТоваров.Колонки.Добавить("ШтрихкодСтрока", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаШтрихкодыУпаковок Из ТаблицаМаркированныхТоваров Цикл
		СтрокаШтрихкодыУпаковок.НомерСтроки          = ТаблицаМаркированныхТоваров.Индекс(СтрокаШтрихкодыУпаковок);
		СтрокаШтрихкодыУпаковок.НоменклатураСсылка   = СтрокаШтрихкодыУпаковок.Номенклатура;
		СтрокаШтрихкодыУпаковок.ХарактеристикаСсылка = СтрокаШтрихкодыУпаковок.Характеристика;
		СтрокаШтрихкодыУпаковок.СерияСсылка          = СтрокаШтрихкодыУпаковок.Серия;
		СтрокаШтрихкодыУпаковок.ШтрихкодСтрока       = СтрокаШтрихкодыУпаковок.Штрихкод;
	КонецЦикла;
	
	ТаблицаМаркированныхТоваров.Колонки.Удалить("Номенклатура");
	ТаблицаМаркированныхТоваров.Колонки.Удалить("Характеристика");
	ТаблицаМаркированныхТоваров.Колонки.Удалить("Серия");
	ТаблицаМаркированныхТоваров.Колонки.Удалить("Штрихкод");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ШтрихкодированиеИВидПродукции

Процедура ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса,
	ПутьКПолюНоменклатура = "Номенклатура",
	ЗаменяемыйПараметр = "&ОпределениеВидаПродукции") Экспорт
	
	ЕГАИСВключен = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	ВидыПродукцииИСМП = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	УсловияМаркируемойПродукции = Новый Массив;
	Если ЕГАИСВключен Тогда
		УсловияМаркируемойПродукции.Добавить("
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			И НЕ %1.АлкогольнаяПродукцияВоВскрытойТаре
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)");
	КонецЕсли;
	Для Каждого ВидПродукцииИСМП Из ВидыПродукцииИСМП Цикл
		Если ВидПродукцииИСМП = Перечисления.ВидыПродукцииИС.Табак Тогда 
			УсловияМаркируемойПродукции.Добавить("
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)");
		ИначеЕсли ВидПродукцииИСМП = Перечисления.ВидыПродукцииИС.Обувь Тогда 
			УсловияМаркируемойПродукции.Добавить("
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь)");
		Иначе
			УсловияМаркируемойПродукции.Добавить(СтрЗаменить("
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ИмяОсобенности)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ИмяОсобенности)", "ИмяОсобенности", XMLСтрока(ВидПродукцииИСМП)));
		КонецЕсли;
	КонецЦикла;
	Если УсловияМаркируемойПродукции.Количество() = 0 Тогда
		ОпределениеВидаПродукции = "ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)";
	Иначе
		УсловияМаркируемойПродукции.Вставить(0, "ВЫБОР");
		УсловияМаркируемойПродукции.Добавить("
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ");
		ОпределениеВидаПродукции = СтрСоединить(УсловияМаркируемойПродукции);
		ОпределениеВидаПродукции = СтрШаблон(ОпределениеВидаПродукции, ПутьКПолюНоменклатура);
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйПараметр, ОпределениеВидаПродукции);
	
КонецПроцедуры

Процедура ОпределитьШаблоныКодовМаркировкиСУЗТекстаЗапроса(ТекстЗапроса,
	ПутьКПолюНоменклатура = "Номенклатура",
	ЗаменяемыйПараметр = "&ОпределениеШаблонаКодаМаркировкиСУЗ") Экспорт
	
	ОпределениеШаблонаСУЗ = СтрШаблон("ВЫБОР
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленность)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИС)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Шины)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Шины)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Фотоаппараты)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Велосипеды)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляски)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Духи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Духи)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачкаGS1)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВода)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Антисептики)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Антисептики)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БАДы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДы)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияПачка)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Пиво)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПустаяСсылка)
	|	КОНЕЦ", ПутьКПолюНоменклатура);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйПараметр, ОпределениеШаблонаСУЗ);
	
КонецПроцедуры

Функция ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(ПутьКПолюНоменклатура) Экспорт
	
	ЗначенияОсобенностейУчета = Новый Массив();
	
	ЕГАИСВключен = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	
	Для Каждого ВидПродукции Из ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции() Цикл
		ОсобенностьУчета = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции);
		Если ОсобенностьУчета <> Неопределено Тогда
			ЗначенияОсобенностейУчета.Добавить(СтрШаблон("ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.%1)", XMLСтрока(ОсобенностьУчета)));
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕГАИСВключен И ЗначенияОсобенностейУчета.Количество() = 0 Тогда
		ПризнакМаркируемаяПродукция = "ЛОЖЬ";
	ИначеЕсли ЕГАИСВключен И ЗначенияОсобенностейУчета.Количество() = 0 Тогда
		ОпределениеШаблон = "
		|	(ЕСТЬNULL(%1.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
		|	И НЕ %1.АлкогольнаяПродукцияВоВскрытойТаре)";
		ПризнакМаркируемаяПродукция = СтрШаблон(ОпределениеШаблон, ПутьКПолюНоменклатура);
	ИначеЕсли Не ЕГАИСВключен Тогда
		ОпределениеШаблон = "
		|	ЕСТЬNULL(%1.ОсобенностьУчета, ЛОЖЬ) В (%2)";
		ПризнакМаркируемаяПродукция = СтрШаблон(ОпределениеШаблон, ПутьКПолюНоменклатура, СтрСоединить(ЗначенияОсобенностейУчета, ","));
	Иначе 
		ОпределениеШаблон = "
		|	(ЕСТЬNULL(%1.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
		|	И НЕ %1.АлкогольнаяПродукцияВоВскрытойТаре)
		|	ИЛИ ЕСТЬNULL(%1.ОсобенностьУчета, ЛОЖЬ) В (%2)";
		ПризнакМаркируемаяПродукция = СтрШаблон(ОпределениеШаблон, ПутьКПолюНоменклатура, СтрСоединить(ЗначенияОсобенностейУчета, ","));
	КонецЕсли;
	
	Возврат ПризнакМаркируемаяПродукция;
	
КонецФункции

Процедура ЗаполнитьДанныеПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN) Экспорт
	
	ПрефиксыВесовыхШтрихкодов = ЗначениеНастроекПовтИсп.ПолучитьПрефиксыВесовыхШтрихкодов();
	
	ШтрихкодыEAN                          = Новый Массив;
	ДополнительныеПредставленияШтрихкодов = Новый Соответствие;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодамEAN Цикл
		
		Представления = Новый Массив;
		ШтрихкодыEAN.Добавить(СтрокаДанных.ШтрихкодEAN);
		
		ШтрихкодДляПроверки = Новый Структура("Штрихкод, Количество", СтрокаДанных.ШтрихкодEAN, 1);
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ШтрихкодДляПроверки, ПрефиксыВесовыхШтрихкодов);
		
		// Это весовой штриход
		Если ШтрихкодДляПроверки.Штрихкод <> СтрокаДанных.ШтрихкодEAN Тогда
			Представления.Добавить(ШтрихкодДляПроверки.Штрихкод);
			ШтрихкодыEAN.Добавить(ШтрихкодДляПроверки.Штрихкод);
			СтрокаДанных.Количество = ШтрихкодДляПроверки.Количество;
			СтрокаДанных.Весовой = Истина;
		Иначе
			// В информационной базе может быть записан GTIN
			GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(СтрокаДанных.ШтрихкодEAN);
			Если GTIN <> СтрокаДанных.ШтрихкодEAN Тогда
				Представления.Добавить(GTIN);
				ШтрихкодыEAN.Добавить(GTIN);
			КонецЕсли;
			// В информационной базе может быть записан UPC
			Если Лев(СтрокаДанных.ШтрихкодEAN, 1) = "0"
				И СтрДлина(СтрокаДанных.ШтрихкодEAN) = 13 Тогда
				ДобавляемыйШтрихкод = Сред(СтрокаДанных.ШтрихкодEAN, 2);
				Если ДобавляемыйШтрихкод <> СтрокаДанных.ШтрихкодEAN Тогда
					Представления.Добавить(ДобавляемыйШтрихкод);
					ШтрихкодыEAN.Добавить(ДобавляемыйШтрихкод);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДополнительныеПредставленияШтрихкодов.Вставить(СтрокаДанных.ШтрихкодEAN, Представления);
		
	КонецЦикла;
	
	КэшированныеЗначения = Новый Структура("Штрихкоды", Новый Соответствие);
	РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(КэшированныеЗначения, ШтрихкодыEAN);
	
	СписокНоменклатуры = Новый Массив;
	
	Для Каждого КлючЗначение Из КэшированныеЗначения.Штрихкоды Цикл
		
		Если Не ЗначениеЗаполнено(КлючЗначение.Значение.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокНоменклатуры.Добавить(КлючЗначение.Значение.Номенклатура);
		
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	спрНоменклатура.Ссылка                       КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(спрНоменклатура.Ссылка)        КАК ПредставлениеНоменклатуры,
	|	&ОпределениеВидаПродукции                    КАК ВидПродукции,
	|	&ОпределениеПризнакаМаркируемаяПродукция     КАК МаркируемаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК спрНоменклатура
	|ГДЕ
	|	спрНоменклатура.Ссылка В(&СписокНоменклатуры)";
	
	ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса, "спрНоменклатура.Ссылка");
	
	ОпределениеМаркируемаяПродукция = ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("спрНоменклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	СведенияОНоменклатуре = Запрос.Выполнить().Выгрузить();
	СведенияОНоменклатуре.Индексы.Добавить("Номенклатура");
	
	ДанныеПоШтрихкодамРезультат = ДанныеПоШтрихкодамEAN.СкопироватьКолонки();
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодамEAN Цикл
		
		ШтрихкодыПоиска = ДополнительныеПредставленияШтрихкодов.Получить(СтрокаДанных.ШтрихкодEAN);
		Для Каждого ШтрихкодПоиска Из ШтрихкодыПоиска Цикл
			ДанныеПоШтрихкоду = КэшированныеЗначения.Штрихкоды.Получить(ШтрихкодПоиска);
			Если ДанныеПоШтрихкоду <> Неопределено И ЗначениеЗаполнено(ДанныеПоШтрихкоду.Номенклатура) Тогда
				
				НоваяСтрока = ДанныеПоШтрихкодамРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоШтрихкоду);
				Если ЗначениеЗаполнено(ДанныеПоШтрихкоду.Упаковка) Тогда
					НоваяСтрока.Количество = ДанныеПоШтрихкоду.Коэффициент;
				КонецЕсли;
				
				НоваяСтрока.ПредставлениеНоменклатуры = Строка(ДанныеПоШтрихкоду.Номенклатура);
				Сведения = СведенияОНоменклатуре.Найти(ДанныеПоШтрихкоду.Номенклатура);
				Если Сведения <> Неопределено Тогда
					НоваяСтрока.ВидПродукции         = Сведения.ВидПродукции;
					НоваяСтрока.МаркируемаяПродукция = Сведения.МаркируемаяПродукция;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(НоваяСтрока.Количество) Тогда
					НоваяСтрока.Количество  = СтрокаДанных.Количество;
				КонецЕсли;
				НоваяСтрока.ШтрихкодEAN = СтрокаДанных.ШтрихкодEAN;
				
			КонецЕсли;
		КонецЦикла;
		ДанныеПоШтрихкоду = КэшированныеЗначения.Штрихкоды.Получить(ВРег(СтрокаДанных.ШтрихкодEAN));
		Если ДанныеПоШтрихкоду = Неопределено Или Не ЗначениеЗаполнено(ДанныеПоШтрихкоду.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеПоШтрихкодамРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоШтрихкоду);
		Если ЗначениеЗаполнено(ДанныеПоШтрихкоду.Упаковка) Тогда
			НоваяСтрока.Количество = ДанныеПоШтрихкоду.Коэффициент;
		КонецЕсли;
		
		НоваяСтрока.ПредставлениеНоменклатуры = Строка(ДанныеПоШтрихкоду.Номенклатура);
		Сведения = СведенияОНоменклатуре.Найти(ДанныеПоШтрихкоду.Номенклатура);
		Если Сведения <> Неопределено Тогда
			НоваяСтрока.ВидПродукции         = Сведения.ВидПродукции;
			НоваяСтрока.МаркируемаяПродукция = Сведения.МаркируемаяПродукция;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НоваяСтрока.Количество) Тогда
			НоваяСтрока.Количество  = СтрокаДанных.Количество;
		КонецЕсли;
		НоваяСтрока.ШтрихкодEAN = СтрокаДанных.ШтрихкодEAN;
	
	КонецЦикла;
	
	ИменаКолонок = Новый Массив;
	Для Каждого Колонка Из ДанныеПоШтрихкодамРезультат.Колонки Цикл
		ИменаКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	ДанныеПоШтрихкодамРезультат.Свернуть(СтрСоединить(ИменаКолонок, ","));
	
	ДанныеПоШтрихкодамEAN = ДанныеПоШтрихкодамРезультат;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ИмяКолонкиЗаполнения = "Штрихкод") Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Таблица КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ШтрихкодыНоменклатуры.Номенклатура = Товары.Номенклатура
	|		И ШтрихкодыНоменклатуры.Характеристика = Товары.Характеристика
	|УПОРЯДОЧИТЬ ПО
	|	Штрихкод УБЫВ
	|ИТОГИ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика");
	
	Запрос.УстановитьПараметр("Таблица", ДанныеПоШтрихкодам);
	
	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
		ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			
			ВнешнийШтрихкод = "";
			ВнутреннийШтрихкод = "";
			Прочее = "";
			
			ВыборкаПоШтрихкодам = ВыборкаПоХарактеристикам.Выбрать();
			Пока ВыборкаПоШтрихкодам.Следующий() Цикл
				Если ШтрихкодированиеИСКлиентСервер.ЭтоEANИлиGTIN(ВыборкаПоШтрихкодам.Штрихкод) Тогда
					Если ШтрихкодированиеИСКлиентСервер.ЭтоВнутреннийШтрихкод(ВыборкаПоШтрихкодам.Штрихкод) Тогда
						ВнутреннийШтрихкод = ВыборкаПоШтрихкодам.Штрихкод;
					Иначе
						ВнешнийШтрихкод = ВыборкаПоШтрихкодам.Штрихкод;
						Прервать;
					КонецЕсли;
				Иначе
					Прочее = ВыборкаПоШтрихкодам.Штрихкод;
				КонецЕсли;
			КонецЦикла;
			
			ШтрихкодКЗаполнению = "";
			Если ЗначениеЗаполнено(ВнешнийШтрихкод) Тогда
				ШтрихкодКЗаполнению = ВнешнийШтрихкод;
			ИначеЕсли ЗначениеЗаполнено(ВнутреннийШтрихкод) Тогда
				ШтрихкодКЗаполнению = ВнутреннийШтрихкод;
			ИначеЕсли ЗначениеЗаполнено(Прочее) Тогда
				ШтрихкодКЗаполнению = Прочее;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ШтрихкодКЗаполнению) Тогда
				
				ПараметрыОтбора = Новый Структура(
					"Номенклатура, Характеристика",
					ВыборкаПоНоменклатуре.Номенклатура, ВыборкаПоХарактеристикам.Характеристика);
				
				СтрокиКЗаполнениюШтрихкода = ДанныеПоШтрихкодам.НайтиСтроки(ПараметрыОтбора);
				Для Каждого СтрокаТЧ Из СтрокиКЗаполнениюШтрихкода Цикл
					СтрокаТЧ[ИмяКолонкиЗаполнения] = ШтрихкодКЗаполнению;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Выделяет из переданного массива штрихкодов упаковок элементы, в составе которых
// (на любом уровне вложенности, в т.ч. частично) находится продукция требуемого вида.
//
// Параметры:
//   ШтрихкодыДляПроверки - Массив Из СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкоды упаковок для проверки.
//   ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС, ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид отбираемой продукции.
//
// Возвращаемое значение:
//   Массив - Массив Из СправочникСсылка.ШтрихкодыУпаковокТоваров - подходящие под виды продукции штрихкоды упаковок.
Функция ШтрихкодыСодержащиеВидыПродукции(Знач ШтрихкодыДляПроверки, Знач ВидыПродукции) Экспорт
	
	Если ВидыПродукции = Неопределено Тогда
		Возврат ШтрихкодыДляПроверки;
	КонецЕсли;
	
	РезультатПроверки = Новый Соответствие;
	Для Каждого ЭлементМассива Из ШтрихкодыДляПроверки Цикл
		РезультатПроверки.Вставить(ЭлементМассива, Ложь);
	КонецЦикла;
	
	ОсобенностиУчета = Новый Массив;
	Если ТипЗнч(ВидыПродукции) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		ОсобенностиУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидыПродукции));
	Иначе
		Для Каждого ВидПродукции Из ВидыПродукции Цикл
			ОсобенностиУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсобенностиУчета", ОсобенностиУчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Штрихкод,
	|	ЕСТЬNULL(ШтрихкодыУпаковок.Номенклатура.ОсобенностьУчета В (&ОсобенностиУчета), Ложь) КАК ПодходящаяПродукция
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ЕстьВложенныеШтрихкоды
	|		ПО ЕстьВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.Ссылка
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И ЕстьВложенныеШтрихкоды.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Родитель,
	|	ШтрихкодыУпаковок.Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)";
	
	
	КешВложенности = Новый Соответствие;
	
	ОбходТаблицы = Истина;
	
	Пока ОбходТаблицы Цикл
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыДляПроверки);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		СоставУпаковки = МассивРезультатов[0].Выбрать();
		ВложенныеЗаписи = МассивРезультатов[1].Выбрать();
		НуженОбходДочерних = ВложенныеЗаписи.Количество();
	
		Пока СоставУпаковки.Следующий() Цикл
			ИсходныйШтрихкод = КешВложенности.Получить(СоставУпаковки.Штрихкод);
			Если ИсходныйШтрихкод = Неопределено Тогда
				ИсходныйШтрихкод = СоставУпаковки.Штрихкод;
			КонецЕсли;
			
			РезультатПроверки[ИсходныйШтрихкод] = РезультатПроверки[ИсходныйШтрихкод] ИЛИ СоставУпаковки.ПодходящаяПродукция;
		КонецЦикла;
		
		Если НуженОбходДочерних Тогда
			ШтрихкодыДляПроверки = Новый Массив;
			Пока ВложенныеЗаписи.Следующий() Цикл
				ИсходныйШтрихкод = КешВложенности.Получить(ВложенныеЗаписи.Родитель);
				Если ИсходныйШтрихкод = Неопределено Тогда
					ИсходныйШтрихкод = ВложенныеЗаписи.Родитель;
				КонецЕсли;
				КешВложенности.Вставить(ВложенныеЗаписи.Штрихкод, ИсходныйШтрихкод);
				ШтрихкодыДляПроверки.Добавить(ВложенныеЗаписи.Штрихкод);
			КонецЦикла;
		Иначе
			ОбходТаблицы = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	Результат = Новый Массив;
	Для Каждого КлючИЗначение Из РезультатПроверки Цикл
		Если КлючИЗначение.Значение Тогда
			Результат.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура УдалитьСтрокиАкцизныхМарокПоВидуПродукции(АкцизныеМарки, ВидПродукции) Экспорт
	
	СписокАкцизныхМарокНаУдаление = ШтрихкодыСодержащиеВидыПродукции(АкцизныеМарки.Выгрузить().ВыгрузитьКолонку("АкцизнаяМарка"), ВидПродукции);
	
	Для Каждого АкцизнаяМарка Из СписокАкцизныхМарокНаУдаление Цикл
		
		УдаляемыеСтроки = АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", АкцизнаяМарка));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			АкцизныеМарки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьДанныеШтрихкодаДляОбщейФормы(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды) Экспорт

	Если ТипЗнч(Форма) <> Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Процедура СформироватьДанныеДокументаОснования(ПараметрыСканирования, ТаблицаДанных) Экспорт
	
	Если (ПараметрыСканирования.Свойство("ДокументЕГАИС")) Тогда
		ИнтеграцияЕГАИСУТ.СформироватьДанныеДокументаОснования(ПараметрыСканирования.ДокументОснование, 
			ПараметрыСканирования.ДокументЕГАИС, ТаблицаДанных);
	Иначе
		ИнтеграцияИСМПУТ.СформироватьТаблицуМаркируемойПродукцииДокумента(
			ПараметрыСканирования.ДокументОснование, ТаблицаДанных, ПараметрыСканирования.ДопустимыеВидыПродукции, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Получает GTIN для таблицы переданных товаров
//
// Параметры:
//  Товары - ТаблицаЗначений - таблица товаров с колонками
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура (маркируемый товар).
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры (маркируемого товара).
//  ИспользоватьХарактеристику - Булево - Ложь, если необходимо получить GTIN только по номенклатуре.
// Возвращаемое значение:
//   Соответствие - данные возможных GTIN:
//    * Ключ     - Строка    - GTIN всех товаров входящей таблицы
//    * Значение - Структура - пара (номенклатура,характеристика) к которой относится GTIN
//
Функция GTINМаркированныхТоваров(Товары, ИспользоватьХарактеристику = Истина) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Штрихкод    КАК Штрихкод,
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ИЗ
	|	Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Номенклатура
	|		И ВЫБОР
	|			КОГДА &ИспользоватьХарактеристику ТОГДА
	|				Товары.Характеристика = Штрихкоды.Характеристика
	|			ИНАЧЕ
	|				ИСТИНА
	|		КОНЕЦ");
	
	Запрос.УстановитьПараметр("ИспользоватьХарактеристику", ИспользоватьХарактеристику);
	Запрос.УстановитьПараметр("Товары",                     Товары);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(Выборка.Штрихкод) Тогда
			Результат.Вставить(Выборка.Штрихкод, 
				Новый Структура("Номенклатура,Характеристика", Выборка.Номенклатура, Выборка.Характеристика));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВводНаОсновании

// Возвращает данные перевозки из прикладного документа и связанных с ним объектов для использования в обработке
//   заполнения документов ГосИС.
//
// Параметры:
//   Основание             - ДокументСсылка - прикладной документ по которому заполняется исходящий документ ГосИС
//   ТранспортнаяНакладная - ДокументСсылка.ТранспортнаяНакладная, Неопределено - найденная оформленная транспортная накладная
//
// Возвращаемое значение:
//   Структура - реквизиты для заполнения исходящих документов ГосИС
//
Функция ДанныеПеревозки(Основание, ТранспортнаяНакладная) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТранспортноеСредство");
	Результат.Вставить("КурьерЭкспедитор");
	
	Результат.Вставить("АвтомобильГосударственныйНомер");
	Результат.Вставить("АвтомобильМарка");
	Результат.Вставить("АвтомобильТип");
	Результат.Вставить("АдресДоставки");
	Результат.Вставить("АдресПогрузки");
	Результат.Вставить("АдресДоставкиЗначенияПолей");
	Результат.Вставить("АдресПогрузкиЗначенияПолей");
	Результат.Вставить("ВидПеревозки");
	Результат.Вставить("Водитель");
	Результат.Вставить("ГосударственныйНомерПрицепа");
	Результат.Вставить("ЗаказчикПеревозки");
	Результат.Вставить("Перевозчик");
	Результат.Вставить("Прицеп");
	Результат.Вставить("ЗаданиеНаПеревозку");
	Результат.Вставить("Маршрут", Новый Массив);
	
	Если ЗначениеЗаполнено(ТранспортнаяНакладная) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ТранспортнаяНакладная);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТранспортнаяНакладная.ЗаданиеНаПеревозку                      КАК ЗаданиеНаПеревозку,
		|	ТранспортнаяНакладная.ЗаданиеНаПеревозку.ТранспортноеСредство КАК ТранспортноеСредство,
		|	ТранспортнаяНакладная.ЗаданиеНаПеревозку.КурьерЭкспедитор     КАК КурьерЭкспедитор,
		|	ТранспортнаяНакладная.АвтомобильГосударственныйНомер          КАК АвтомобильГосударственныйНомер,
		|	ТранспортнаяНакладная.АвтомобильМарка                         КАК АвтомобильМарка,
		|	ТранспортнаяНакладная.АвтомобильТип                           КАК АвтомобильТип,
		|	ТранспортнаяНакладная.АдресДоставки                           КАК АдресДоставки,
		|	ТранспортнаяНакладная.АдресДоставкиЗначенияПолей              КАК АдресДоставкиЗначенияПолей,
		|	ТранспортнаяНакладная.АдресПогрузки                           КАК АдресПогрузки,
		|	ТранспортнаяНакладная.АдресПогрузкиЗначенияПолей              КАК АдресПогрузкиЗначенияПолей,
		|	ТранспортнаяНакладная.ВидПеревозки                            КАК ВидПеревозки,
		|	ТранспортнаяНакладная.Водитель                                КАК Водитель,
		|	ТранспортнаяНакладная.ГосударственныйНомерПрицепа             КАК ГосударственныйНомерПрицепа,
		|	ТранспортнаяНакладная.ЗаказчикПеревозки                       КАК ЗаказчикПеревозки,
		|	ТранспортнаяНакладная.Перевозчик                              КАК Перевозчик,
		|	ТранспортнаяНакладная.Прицеп                                  КАК Прицеп
		|ИЗ
		|	Документ.ТранспортнаяНакладная КАК ТранспортнаяНакладная
		|ГДЕ
		|	ТранспортнаяНакладная.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Распоряжение", Основание);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Распоряжение КАК Распоряжение
		|ПОМЕСТИТЬ ВозможныеРаспоряжения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.ЗаказКлиента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Распоряжение
		|	И РеализацияТоваровУслуг.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслугТовары.ЗаказКлиента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Распоряжение
		|	И РеализацияТоваровУслугТовары.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|	И РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаданиеНаПеревозку.Ссылка                         КАК ЗаданиеНаПеревозку,
		|	ЗаданиеНаПеревозку.ТранспортноеСредство           КАК ТранспортноеСредство,
		|	ЗаданиеНаПеревозку.КурьерЭкспедитор               КАК КурьерЭкспедитор,
		|	ЗаданиеНаПеревозку.АвтомобильГосударственныйНомер КАК АвтомобильГосударственныйНомер,
		|	ЗаданиеНаПеревозку.АвтомобильМарка                КАК АвтомобильМарка,
		|	ЗаданиеНаПеревозку.АвтомобильТип                  КАК АвтомобильТип,
		|	ЗаданиеНаПеревозку.ВидПеревозки                   КАК ВидПеревозки,
		|	ЗаданиеНаПеревозку.Водитель                       КАК Водитель,
		|	ЗаданиеНаПеревозку.ГосударственныйНомерПрицепа    КАК ГосударственныйНомерПрицепа,
		|	ЗаданиеНаПеревозку.Перевозчик                     КАК Перевозчик,
		|	ЗаданиеНаПеревозку.Прицеп                         КАК Прицеп,
		|	ЗаданиеНаПеревозку.Дата                           КАК ДатаОтгрузки,
		|	ЗаданиеНаПеревозкуМаршрут.Адрес                   КАК АдресДоставки,
		|	ЗаданиеНаПеревозкуМаршрут.АдресЗначенияПолей      КАК АдресДоставкиЗначенияПолей
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
		|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = ЗаданиеНаПеревозку.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
		|		ПО ЗаданиеНаПеревозкуМаршрут.Ссылка = ЗаданиеНаПеревозкуРаспоряжения.Ссылка
		|		И ЗаданиеНаПеревозкуМаршрут.КлючСвязи = ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи
		|ГДЕ
		|	ЗаданиеНаПеревозку.Проведен
		|	И ЗаданиеНаПеревозкуРаспоряжения.Распоряжение В
		|		(ВЫБРАТЬ
		|			Распоряжение
		|		Из
		|			ВозможныеРаспоряжения)
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОтгрузки Убыв";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ЗаданиеНаПеревозку) Тогда
		
		Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", Результат.ЗаданиеНаПеревозку);
		Запрос.УстановитьПараметр("Распоряжение", Основание);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Маршрут.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ МаршрутДо
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Маршрут КАК Маршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК Распоряжения
		|		ПО Распоряжения.Ссылка = &ЗаданиеНаПеревозку
		|		И Распоряжения.Распоряжение = &Распоряжение
		|		И Распоряжения.КлючСвязи = Маршрут.КлючСвязи
		|ГДЕ
		|	Маршрут.Ссылка = &ЗаданиеНаПеревозку
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Маршрут.НомерСтроки        КАК НомерСтроки,
		|	Распоряжения.Распоряжение  КАК Распоряжение,
		|	Маршрут.Адрес              КАК ПредставлениеАдреса,
		|	Маршрут.АдресЗначенияПолей КАК АдресЗначенияПолей
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Маршрут КАК Маршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК Распоряжения
		|		ПО Распоряжения.Ссылка = &ЗаданиеНаПеревозку
		|		И Распоряжения.КлючСвязи = Маршрут.КлючСвязи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутДо КАК МаршрутДо
		|		ПО Маршрут.НомерСтроки < МаршрутДо.НомерСтроки
		|ГДЕ
		|	Маршрут.Ссылка = &ЗаданиеНаПеревозку
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ ПО
		|	НомерСтроки";
		ВыборкаМаршрут = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Результат.Маршрут = Новый Массив;
		Пока ВыборкаМаршрут.Следующий() Цикл
			ПунктМаршрута = Новый Структура;
			ПунктМаршрута.Вставить("ПредставлениеАдреса");
			ПунктМаршрута.Вставить("АдресЗначенияПолей");
			ПунктМаршрута.Вставить("Распоряжения", Новый Массив);
			ВыборкаРаспоряжения = ВыборкаМаршрут.Выбрать();
			Пока ВыборкаРаспоряжения.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ПунктМаршрута, ВыборкаРаспоряжения);
				ПунктМаршрута.Распоряжения.Добавить(ВыборкаРаспоряжения.Распоряжение);
			КонецЦикла;
			Результат.Маршрут.Добавить(ПунктМаршрута);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Номенклатура

//Для расходных документов проверяет статус указания серий в строках товаров соответствующий FEFO (5,6,25). Считается
//   что такой статус в одной из строк позволяет выполнить автозаполнение (справок №2 или записей складского журнала)
//   в документе ГосИС также по FEFO (истечению сроков годности).
//
//Параметры:
//   Основание - ДокументСсылка - проверяемый документ-основание
//
//Возвращаемое значение:
//   Булево - серии в документе-основании указываются по FEFO
//
Функция СерииУказываютсяПоFEFO(Основание) Экспорт
	
	Результат = Ложь;
	
	ИмяТабличнойЧасти = Неопределено;
	ИмяПоляСтатусУказанияСерий = "СтатусУказанияСерий";
	ТипОснование = ТипЗнч(Основание);
	Если ТипОснование = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров")
		Или ТипОснование = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
		Или ТипОснование = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипОснование = Тип("ДокументСсылка.ОрдерНаОтражениеНедостачТоваров")
		Или ТипОснование = Тип("ДокументСсылка.ОрдерНаОтражениеПересортицыТоваров")
		Или ТипОснование = Тип("ДокументСсылка.ОрдерНаОтражениеПорчиТоваров")
		Или ТипОснование = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		Или ТипОснование = Тип("ДокументСсылка.ПеремещениеТоваров")
		Или ТипОснование = Тип("ДокументСсылка.ПересортицаТоваров")
		Или ТипОснование = Тип("ДокументСсылка.ПорчаТоваров")
		Или ТипОснование = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипОснование = Тип("ДокументСсылка.СписаниеНедостачТоваров")
		Тогда
		ИмяТабличнойЧасти = ".Товары";
	ИначеЕсли ТипОснование = Тип("ДокументСсылка.РасходныйОрдерНаТовары")
		Тогда ИмяТабличнойЧасти = ".ТоварыПоРаспоряжениям";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		
		Запрос.Текст = СтрШаблон(
			"ВЫБРАТЬ Ссылка ИЗ Документ.%1%2 КАК Д ГДЕ Д.Ссылка = &Основание И (Д.%3 = 5 ИЛИ Д.%3 = 6 ИЛИ Д.%3 = 25)",
			Основание.Метаданные().Имя,
			ИмяТабличнойЧасти,
			ИмяПоляСтатусУказанияСерий);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Результат Тогда
		// Здесь 2 доступных поля Статус указания серий
		Если ТипОснование = Тип("ДокументСсылка.ПеремещениеТоваров")
			Тогда
			
			Запрос.Текст = СтрШаблон(
				"ВЫБРАТЬ Ссылка ИЗ Документ.%1%2 КАК Д ГДЕ Д.Ссылка = &Основание И (Д.%3 = 5 ИЛИ Д.%3 = 6 ИЛИ Д.%3 = 25)",
				Основание.Метаданные().Имя,
				ИмяТабличнойЧасти,
				"СтатусУказанияСерийОтправитель");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Результат = Истина;
			КонецЕсли;
		// Доступна серия в шапке
		ИначеЕсли ТипОснование = Тип("ДокументСсылка.СборкаТоваров") Тогда
			Запрос.Текст = СтрШаблон(
				"ВЫБРАТЬ Ссылка ИЗ Документ.СборкаТоваров КАК Д ГДЕ Д.Ссылка = &Основание И (Д.%1 = 5 ИЛИ Д.%1 = 6 ИЛИ Д.%1 = 25)",
				"СтатусУказанияСерий");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// См. НоменклатураЛокализация.ПараметрыКопированияДополнительныхДанных
//
Процедура ДополнитьПараметрыКопированияДополнительныхДанныхНоменклатуры(Объект,
	ПараметрыСоздания,
	ПараметрыКопированияДополнительныхДанных,
	СоответствияСкопированныхОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеНоменклатурыВЕТИС.Продукция КАК ПродукцияВЕТИС
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|ГДЕ
	|	СоответствиеНоменклатурыВЕТИС.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", ПараметрыСоздания.ИсточникКопирования);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса[0].Пустой() Тогда
		ПараметрыКопированияДополнительныхДанных.Добавить("КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС",
			НСтр("ru = 'Копировать связь с классификатором алкогольной продукции ЕГАИС'"),
			Истина);
	КонецЕсли;
		
	Если Не РезультатЗапроса[1].Пустой() Тогда 
		ПараметрыКопированияДополнительныхДанных.Добавить("КопироватьСвязьСКлассификаторомПродукцииВЕТИС",
			НСтр("ru = 'Копировать связь с классификатором продукции ВЕТИС'"),
			Истина);
	КонецЕсли;
	
КонецПроцедуры

// См. НоменклатураЛокализация.ЗаполнитьПоПараметрамСоздания
//
Процедура ЗаполнитьПоПараметрамСоздания(Объект, ПараметрыСоздания) Экспорт
	
	#Область ЕГАИС
	Если (ПараметрыСоздания.Свойство("ВидАлкогольнойПродукцииЕГАИС")
		И ЗначениеЗаполнено(ПараметрыСоздания.ВидАлкогольнойПродукцииЕГАИС)) Тогда
		
		Объект.ВидАлкогольнойПродукции = ПараметрыСоздания.ВидАлкогольнойПродукцииЕГАИС;
		
		Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
			|	ВидыНоменклатуры.ВидАлкогольнойПродукции = &ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукцииСовпадает
			|ИЗ
			|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
			|ГДЕ
			|	ВидыНоменклатуры.ОсобенностьУчета = &ОсобенностьУчета
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидАлкогольнойПродукцииСовпадает УБЫВ";
			Запрос.УстановитьПараметр("ВидАлкогольнойПродукции", Объект.ВидАлкогольнойПродукции);
			Если ПараметрыСоздания.МаркируемаяПродукцияЕГАИС = Ложь
				И ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(Перечисления.ВидыПродукцииИС.Пиво) Тогда
				Запрос.УстановитьПараметр("ОсобенностьУчета", Перечисления.ОсобенностиУчетаНоменклатуры.Пиво);
			Иначе
				Запрос.УстановитьПараметр("ОсобенностьУчета", Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция);
			КонецЕсли;
			ВидыНоменклатуры = Запрос.Выполнить().Выгрузить();
			
			Если ВидыНоменклатуры.Количество() > 0 Тогда
				
				Если ВидыНоменклатуры.Количество() = 1 Тогда
					// Один вид для алкогольной продукции - не важно, какой там указан вид алкогольной продукции по умолчанию: подставляем.
					Объект.ВидНоменклатуры = ВидыНоменклатуры[0].ВидНоменклатуры;
				ИначеЕсли ВидыНоменклатуры[0].ВидАлкогольнойПродукцииСовпадает
					И Не ВидыНоменклатуры[1].ВидАлкогольнойПродукцииСовпадает Тогда
					// Более одного вида для алкогольной продукции:
					// - Если в первом вид совпадает, а во втором нет - значит есть только один вид,
					//    в котором вид алкогольной продукции совпадает. Подставляем этот вид номенклатуры.
					// - Если в первом не совпадает, значит нет ни одного, с которым совпадает. Нечего подставлять. 
					// - Если совпадает и в первом, и во втором - значит есть более одного, с которым совпадет. Нечего подставлять.
					Объект.ВидНоменклатуры = ВидыНоменклатуры[0].ВидНоменклатуры;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование)
		И ПараметрыСоздания.Свойство("НаименованиеНоменклатурыЕГАИС")
		И Не ПустаяСтрока(ПараметрыСоздания.НаименованиеНоменклатурыЕГАИС) Тогда
		
		Объект.Наименование = ПараметрыСоздания.НаименованиеНоменклатурыЕГАИС;
		ПараметрыСозданияСтруктура = Новый Структура(ПараметрыСоздания);
		ПараметрыСозданияСтруктура.Наименование = ПараметрыСоздания.НаименованиеНоменклатурыЕГАИС;
		ПараметрыСоздания = Новый ФиксированнаяСтруктура(ПараметрыСозданияСтруктура);
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.НаименованиеПолное)
		И ПараметрыСоздания.Свойство("ПолноеНаименованиеНоменклатурыЕГАИС")
		И Не ПустаяСтрока(ПараметрыСоздания.ПолноеНаименованиеНоменклатурыЕГАИС) Тогда
		
		Объект.НаименованиеПолное = ПараметрыСоздания.ПолноеНаименованиеНоменклатурыЕГАИС;
		ПараметрыСозданияСтруктура = Новый Структура(ПараметрыСоздания);
		ПараметрыСозданияСтруктура.НаименованиеПолное = ПараметрыСоздания.ПолноеНаименованиеНоменклатурыЕГАИС;
		ПараметрыСоздания = Новый ФиксированнаяСтруктура(ПараметрыСозданияСтруктура);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ОбъемДАЛ) 
		И ПараметрыСоздания.Свойство("ОбъемЕГАИС")
		И ЗначениеЗаполнено(ПараметрыСоздания.ОбъемЕГАИС) Тогда
		
		Объект.ОбъемДАЛ = ПараметрыСоздания.ОбъемЕГАИС / 10;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Крепость) 
		И ПараметрыСоздания.Свойство("КрепостьЕГАИС")
		И ЗначениеЗаполнено(ПараметрыСоздания.КрепостьЕГАИС) Тогда
		
		Объект.Крепость = ПараметрыСоздания.КрепостьЕГАИС;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПроизводительИмпортерКонтрагент)
		И (ПараметрыСоздания.Свойство("ИмпортерЕГАИС")
		И ЗначениеЗаполнено(ПараметрыСоздания.ИмпортерЕГАИС)
		Или ПараметрыСоздания.Свойство("ИмпортерЕГАИС")
		И ЗначениеЗаполнено(ПараметрыСоздания.ПроизводительЕГАИС))Тогда
		
		Если ПараметрыСоздания.Свойство("ИмпортерЕГАИС")
			И ЗначениеЗаполнено(ПараметрыСоздания.ИмпортерЕГАИС) Тогда
			Объект.ИмпортнаяАлкогольнаяПродукция = Истина;
			Объект.ПроизводительИмпортерКонтрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ПараметрыСоздания.ИмпортерЕГАИС, "Контрагент");
		Иначе
			Объект.ИмпортнаяАлкогольнаяПродукция = Ложь;
			Объект.ПроизводительИмпортерКонтрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ПараметрыСоздания.ПроизводительЕГАИС, "Контрагент");
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВЕТИС
	
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры)
		И (ПараметрыСоздания.Свойство("НаименованиеВЕТИС")
		Или ПараметрыСоздания.Свойство("АртикулВЕТИС")
		Или ПараметрыСоздания.Свойство("ЕдиницаИзмеренияВЕТИС")) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ВидыНоменклатуры.Ссылка      КАК ВидНоменклатуры
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
		|	ИЛИ ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий()
			И Выборка.Количество() = 1 Тогда
			
			Объект.ВидНоменклатуры = Выборка.ВидНоменклатуры;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование)
		И ПараметрыСоздания.Свойство("НаименованиеВЕТИС")
		И Не ПустаяСтрока(ПараметрыСоздания.НаименованиеВЕТИС) Тогда
		
		Объект.Наименование = ПараметрыСоздания.НаименованиеВЕТИС;
		ПараметрыСозданияСтруктура = Новый Структура(ПараметрыСоздания);
		ПараметрыСозданияСтруктура.Наименование = ПараметрыСоздания.НаименованиеВЕТИС;
		ПараметрыСоздания = Новый ФиксированнаяСтруктура(ПараметрыСозданияСтруктура);
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Артикул)
		И ПараметрыСоздания.Свойство("АртикулВЕТИС")
		И Не ПустаяСтрока(ПараметрыСоздания.АртикулВЕТИС) Тогда
		
		Объект.Артикул = ПараметрыСоздания.АртикулВЕТИС;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) 
		И ПараметрыСоздания.Свойство("ЕдиницаИзмеренияВЕТИС")
		И ЗначениеЗаполнено(ПараметрыСоздания.ЕдиницаИзмеренияВЕТИС) Тогда
		
		Объект.ЕдиницаИзмерения = ПараметрыСоздания.ЕдиницаИзмеренияВЕТИС;
		
		ТипЕдиницы = "";
		ЭтоМернаяЕдиница = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения, ТипЕдиницы);
		
		Справочники.Номенклатура.ОтработатьЛогикуЗаполненияМеры(Объект, ЭтоМернаяЕдиница, ТипЕдиницы, ТипЕдиницы);
		
	КонецЕсли;
	
	#КонецОбласти

КонецПроцедуры

// См. НоменклатураЛокализация.СкопироватьДополнительныеДанные
//
Процедура СкопироватьДополнительныеДанные(Объект, ПараметрыСоздания, ПараметрыКопированияДополнительныхДанных, СоответствияСкопированныхОбъектов) Экспорт
	
	ПараметрКопирования = ПараметрыКопированияДополнительныхДанных.НайтиПоЗначению("КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС");
	Если ПараметрКопирования <> Неопределено
		И ПараметрКопирования.Пометка Тогда
		
		ИнтеграцияЕГАИСУТ.КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС(
			Объект,
			ПараметрыСоздания.ИсточникКопирования,
			СоответствияСкопированныхОбъектов);
	КонецЕсли;
		
	ПараметрКопирования = ПараметрыКопированияДополнительныхДанных.НайтиПоЗначению("КопироватьСвязьСКлассификаторомПродукцииВЕТИС");
	Если ПараметрКопирования <> Неопределено
		И ПараметрКопирования.Пометка Тогда
		
		ИнтеграцияВЕТИСУТ.КопироватьСвязьСКлассификаторомПродукцииВЕТИС(
			Объект,
			ПараметрыСоздания.ИсточникКопирования,
			СоответствияСкопированныхОбъектов);
		
	КонецЕсли;
	
КонецПроцедуры

#Область GTIN

// Дополняет массив текстов запроса получения GTIN для объединения.
//
// Параметры:
//  ТекущиеДанные         - ДанныеФормыЭлементКоллекции - Текущая строка формы.
//  Объект                - ДанныеФормыСтруктура        - Форма-владелец.
//  ПараметрыЗапроса      - Структура                   - Запрос, в который можно установить параметры.
//  МассивТекстовЗапросов - Массив из Строка            - Тексты запроса для объединеиня.
Процедура ДополнитьПараметрыЗапросаПриНачалеВыбораGTIN(ТекущиеДанные, Объект, ПараметрыЗапроса, МассивТекстовЗапросов) Экспорт
	
	МассивТекстовЗапросов.Добавить("ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура     = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Серии

Процедура ДополнитьПараметрыУказанияСерийФормыУточнениеСоставаУпаковкиИС(Параметры, Объект) Экспорт
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Параметры) = Тип("ФиксированнаяСтруктура") Тогда
		Параметры = Новый Структура(Параметры);
	КонецЕсли;
	Если Параметры.ИмяТЧТовары = "ПодобраннаяМаркируемаяПродукция" Тогда
		Параметры.ИмяТЧТовары = "Товары";
		Параметры.ИменаПолейДополнительные.Удалить(
			Параметры.ИменаПолейДополнительные.Найти("КоличествоПодобрано"));
	КонецЕсли;
	Параметры.ИмяИсточникаЗначенийВФормеОбъекта = "ТекущиеДанные";
	Параметры.ИмяТЧСерии  = Параметры.ИмяТЧТовары;
	Параметры.ИменаПолейДляОпределенияРаспоряжения = Новый Массив;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	НовыйРеквизит = Новый РеквизитФормы("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);

	НовыйРеквизит = Новый РеквизитФормы("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);

	НовыйРеквизит = Новый РеквизитФормы("Ссылка", Новый ОписаниеТипов, "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);

	НовыйРеквизит = Новый РеквизитФормы("НоменклатураОприходование", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);

	НовыйРеквизит = Новый РеквизитФормы("ХарактеристикаОприходование", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("СтатусУказанияСерийОтправитель", Новый ОписаниеТипов("Число"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("СтатусУказанияСерийПолучатель", Новый ОписаниеТипов("Число"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	Объект.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура ДополнитьПараметрыУказанияСерийФормыУточнениеДанныхИС(Параметры, Объект) Экспорт
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ОбщегоНазначения.СкопироватьРекурсивно(Параметры, Ложь);
	
	ИмяТЧ = "Товары";
	
	ДобавляемыеРеквизиты = Новый Массив;
	НовыйРеквизит = Новый РеквизитФормы("Получатель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СтатусУказанияСерийОтправитель", Новый ОписаниеТипов("Число"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СтатусУказанияСерийПолучатель", Новый ОписаниеТипов("Число"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	Объект.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Если Параметры.Свойство("ВыходныеИзделия") Тогда
		Параметры = Параметры.ВыходныеИзделия;
		ИмяТЧ = "ВыходныеИзделия";
		Объект.Получатель = Объект.Склад;
	КонецЕсли;
	
	Если Параметры.ИмяТЧТовары = "ПодобраннаяМаркируемаяПродукция" Тогда
		Параметры.ИмяТЧТовары = ИмяТЧ;
		Параметры.ИмяТЧСерии = ИмяТЧ;
		Параметры.ИменаПолейДополнительные.Удалить(
			Параметры.ИменаПолейДополнительные.Найти("КоличествоПодобрано"));
	КонецЕсли;
	Параметры.ТоварВШапке = Ложь;
	Параметры.ИмяТЧСерии  = Параметры.ИмяТЧТовары;
	Параметры.ИмяИсточникаЗначенийВФормеОбъекта = "ЭтаФорма";
	Если ЗначениеЗаполнено(Параметры.ИмяПоляСклад) Тогда
		Параметры.ИмяПоляСклад = "Склад";
	КонецЕсли;
	Параметры.ИменаПолейДляОпределенияРаспоряжения = Новый Массив;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтрокиТЧАкцизныеМаркиПодходящиеДляШтрихкодаУпаковки(ТЧАкцизныеМарки, Знач СтрокаДерева, СтрокиРезультат = Неопределено)
	
	Если СтрокиРезультат <> Неопределено Тогда
		Возврат СтрокиРезультат;
	КонецЕсли;
	
	Найденные = ТЧАкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", СтрокаДерева.ШтрихкодУпаковки));
	
	Если Найденные.Количество() > 0 Тогда
		СтрокиРезультат = Найденные;
		Возврат СтрокиРезультат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.Родитель) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат СтрокиТЧАкцизныеМаркиПодходящиеДляШтрихкодаУпаковки(ТЧАкцизныеМарки, СтрокаДерева.Родитель, СтрокиРезультат);
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияОтдельныхФормИГосИС

Функция ПроверитьМодификацияФормыВыполнена(Форма)
	
	Если Форма.ПараметрыИнтеграцииГосИС.Получить("Инициализация")<> Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
	ПараметрыИнтеграцииГосИС.Вставить("Инициализация", Истина);
	Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
	Возврат Ложь;
	
КонецФункции

#Область ПроверкаЗаполненияДокументов

// Локализация: встраивание команды проверки и подбора алкогольной продукции в форму проверки заполнения документов
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - общая форма "ПроверкаЗаполненияДокументов"
//
Процедура МодифицироватьИнициализироватьФормуПроверкиЗаполненияДокументов(Форма) Экспорт
	
	Если ПроверитьМодификацияФормыВыполнена(Форма) Тогда
		Возврат;
	КонецЕсли;
	
#Область Реквизиты
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы("АдресСоответствияАкцизныхМарок", Новый ОписаниеТипов("Строка"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("КодМаркировкиДляУточнения", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ТребуетсяПересчетМарокПослеУдаленияСтрок", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ДанныеВыбораПоМаркируемойПродукции", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("СохраненВыборПоМаркируемойПродукции", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ИспользоватьАкцизныеМарки", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("КонтролироватьСтатусыКодовМаркировкиВРознице", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ОрганизацияЕГАИС", Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	ПроверкаИПодборПродукцииИС.ДобавитьТаблицуШтрихкодовУпаковок(Форма, Новый Соответствие, ДобавляемыеРеквизиты);
	
	Таблица = Новый РеквизитФормы("АкцизныеМарки", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(Таблица);
	
	Колонка = Новый РеквизитФормы("ИдентификаторСтроки", Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип,"АкцизныеМарки");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("КодАкцизнойМарки", Метаданные.ОпределяемыеТипы.КодАкцизнойМарки.Тип, "АкцизныеМарки");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("АкцизнаяМарка", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"),"АкцизныеМарки");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"),"АкцизныеМарки");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Справка2", Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"),"АкцизныеМарки");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Количество",Новый ОписаниеТипов("Число"),"АкцизныеМарки");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	Колонка = Новый РеквизитФормы("МаркируемаяПродукция", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1)),"Товары");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("АлкогольнаяПродукция", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1)),"Товары");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("ИндексАкцизнойМарки", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1)),"Товары");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("КоличествоАкцизныхМарок", Новый ОписаниеТипов("Число"),"Товары");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("НоменклатураЕГАИС", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"),"Товары");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("СопоставлениеАлкогольнаяПродукция", Новый ОписаниеТипов("Строка"), "Товары");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	РеквизитыТаблицыТовары = Форма.ПолучитьРеквизиты("Товары");
	МассивИменРеквизитовТаблицыТовары = Новый Массив;
	Для Каждого РеквизитТаблицы Из РеквизитыТаблицыТовары Цикл
		МассивИменРеквизитовТаблицыТовары.Добавить(РеквизитТаблицы.Имя);
	КонецЦикла;
	СтрокаРеквизитовТаблицыТовары = СтрСоединить(МассивИменРеквизитовТаблицыТовары, ",");
	ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
	ПараметрыИнтеграцииГосИС.Вставить("Инициализация", СтрокаРеквизитовТаблицыТовары);
	Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
	
#КонецОбласти
	
	ЭлементыФормы = Форма.Элементы;
	
#Область Команды
	
	ИмяКомандыАкцизныеМарки = "ПроверитьАкцизныеМарки";
	КомандаФормы = Форма.Команды.Добавить(ИмяКомандыАкцизныеМарки);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КомандаФормы.Заголовок = НСтр("ru = 'Проверить акцизные марки'");
		
	Кнопка = ЭлементыФормы.Добавить(ИмяКомандыАкцизныеМарки, Тип("КнопкаФормы"), ЭлементыФормы.ГруппаКоманднаяПанель);
	Кнопка.ИмяКоманды            = ИмяКомандыАкцизныеМарки;
	Кнопка.ТолькоВоВсехДействиях = Ложь;
	Кнопка.Картинка              = БиблиотекаКартинок.МаркируемаяПродукцияШапка;
	Кнопка.Отображение           = ОтображениеКнопки.Картинка;
	
#КонецОбласти
	
#Область Элементы
	
	ПутьКРеквизиту = "Товары.НоменклатураЕГАИС";
	КолонкаИнтерфейса = Форма.Элементы.Вставить(
		"ТоварыНоменклатураЕГАИС",
		Тип("ПолеФормы"),
		ЭлементыФормы.Товары,
		ЭлементыФормы.Номенклатура);
	КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
	КолонкаИнтерфейса.Заголовок = НСтр("ru = 'Алкогольная продукция'");
	
	ПутьКРеквизиту = "Товары.ИндексАкцизнойМарки";
	КолонкаИнтерфейса = Форма.Элементы.Вставить(
		"ТоварыИндексАкцизнойМарки",
		Тип("ПолеФормы"),
		ЭлементыФормы.Товары,
		ЭлементыФормы.ТоварыИндексНабора);
	КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
	КолонкаИнтерфейса.Вид = ВидПоляФормы.ПолеКартинки;
	КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КолонкаИнтерфейса.КартинкаЗначений = БиблиотекаКартинок.МаркируемаяПродукцияТЧ;
	КолонкаИнтерфейса.КартинкаШапки = БиблиотекаКартинок.МаркируемаяПродукцияШапка;
	
#КонецОбласти
	
#Область Инициализация

	Форма.ИспользоватьАкцизныеМарки            = Форма.Параметры.ИспользоватьАкцизныеМарки;
	Форма.ОрганизацияЕГАИС                     = Форма.Параметры.ОрганизацияЕГАИС;
	
	Если Форма.ИспользоватьАкцизныеМарки Тогда
		ИнтеграцияЕГАИСУТ.АкцизныеМаркиЗаполнитьСлужебныеРеквизиты(Форма, "КоличествоФакт");
	КонецЕсли;
	
	Настройки = ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаЧека();
	Настройки.Объект = "";
	Настройки.Серии = "";
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, Настройки, Истина);
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, Настройки);
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);

#КонецОбласти
	
#Область Интерфейс
	
	ЭлементыФормы.ТоварыИндексАкцизнойМарки.Видимость = Форма.ИспользоватьАкцизныеМарки;
	ЭлементыФормы.ТоварыНоменклатураЕГАИС.Видимость = Форма.ИспользоватьАкцизныеМарки;
	ЭлементыФормы.ПроверитьАкцизныеМарки.Видимость       = Форма.ИспользоватьАкцизныеМарки;
	
#КонецОбласти
	
КонецПроцедуры

Функция РезультатСканированияАкцизныхМарокВФормеПроверкиЗаполненияДокументов(Форма) Экспорт
	
	// Создаем пустую таблицу Товаров
	ТаблицаТовары = Форма.ТоварыОтвязаноОтНабора.Выгрузить(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка())).СкопироватьКолонки();
	
	Для Каждого СтрокаТЧ Из Форма.ТоварыОтвязаноОтНабора Цикл
		НоваяСтрока = Форма.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ,,"КоличествоУпаковок,НоменклатураНабора, ХарактеристикаНабора, ИндексНабора");
		НоваяСтрока.КоличествоУпаковокФакт = СтрокаТЧ.КоличествоУпаковок;
		НоваяСтрока.КоличествоУпаковокФактИтог = СтрокаТЧ.КоличествоУпаковок;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Форма.Товары Цикл
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, , "КоличествоУпаковок");
	КонецЦикла;
	
	Форма.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТаблицаТовары, Форма.АдресВоВременномХранилище);
	
	ПараметрыЗакрытия = новый Структура;
	ПараметрыЗакрытия.Вставить("Товары",        Форма.АдресВоВременномХранилище);
	ПараметрыЗакрытия.Вставить("АкцизныеМарки", ПоместитьВоВременноеХранилище(Форма.АкцизныеМарки.Выгрузить()));
	
	Возврат ПараметрыЗакрытия;
	
КонецФункции

#КонецОбласти

#Область СправочникНастройкиРМК

Процедура МодифицироватьИнициализироватьФормуНастройкиРМК(Форма) Экспорт
	
	Если ПроверитьМодификацияФормыВыполнена(Форма) Тогда
		Возврат;
	КонецЕсли;
	
#Область Реквизиты
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы("ИдентификаторФСРАР", Новый ОписаниеТипов("Строка"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ИдентификаторФСРАР", Новый ОписаниеТипов("Строка"), "Объект.КассыККМ");
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ПараметрыПодключенияЕГАИС", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(31)));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ПараметрыПодключенияЕГАИС", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(31)), "Объект.КассыККМ");
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("СтатусПодключенияКЕГАИС", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(15)));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("СтатусПодключенияКЕГАИС", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(15)), "Объект.КассыККМ");
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ЧтениеНастройкиОбменаЕГАИС", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
#КонецОбласти
	
	ЭлементыФормы = Форма.Элементы;
	
#Область Команды
	
	ИмяКомандыПроверитьПодключение = "НастроитьПараметрыПодключенияЕГАИС";
	КомандаФормы = Форма.Команды.Добавить(ИмяКомандыПроверитьПодключение);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КомандаФормы.Заголовок = НСтр("ru = 'Настроить параметры подключения к ЕГАИС'");
		
	Кнопка = ЭлементыФормы.Добавить(ИмяКомандыПроверитьПодключение, Тип("КнопкаФормы"), ЭлементыФормы.КассыККМ.КоманднаяПанель);
	Кнопка.ИмяКоманды            = ИмяКомандыПроверитьПодключение;
	
#КонецОбласти
	
#Область Элементы
	
	ТекстСостояния = ЭлементыФормы.Добавить(
		"ДекорацияПараметрыПодключенияЕГАИС",
		Тип("ДекорацияФормы"),
		ЭлементыФормы.ГруппаОднаКассаККМ);
	ТекстСостояния.Вид = ВидДекорацииФормы.Надпись;
	
	ПутьКРеквизиту = "Объект.КассыККМ.ПараметрыПодключенияЕГАИС";
	КолонкаИнтерфейса = Форма.Элементы.Вставить(
		"КассыККМПараметрыПодключенияЕГАИС",
		Тип("ПолеФормы"),
		ЭлементыФормы.КассыККМ);
	КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
	КолонкаИнтерфейса.Заголовок = НСтр("ru = 'Параметры подключения к ЕГАИС'");
	
#КонецОбласти
	
#Область Инициализация
	
	Форма.ЧтениеНастройкиОбменаЕГАИС         = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаЕГАИС);
	РедактированиеНастройкиОбменаЕГАИС = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.НастройкиОбменаЕГАИС);
	ЗаполнитьПараметрыПодключенияЕГАИСВФормеСправочникаНастроекРМК(Форма);
	
#КонецОбласти
	
#Область Интерфейс
	
	Если Форма.ИспользоватьНесколькоКассККМ Тогда
		ЭлементыФормы.ДекорацияПараметрыПодключенияЕГАИС.Видимость = Ложь;
		ЭлементыФормы.НастроитьПараметрыПодключенияЕГАИС.Видимость = РедактированиеНастройкиОбменаЕГАИС;
	Иначе
		ЭлементыФормы.НастроитьПараметрыПодключенияЕГАИС.Видимость = Ложь;
		ЭлементыФормы.КассыККМПараметрыПодключенияЕГАИС.Видимость  = Ложь;
		ЭлементыФормы.ДекорацияПараметрыПодключенияЕГАИС.Видимость = РедактированиеНастройкиОбменаЕГАИС;
	КонецЕсли;
	
#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПодключенияЕГАИСВФормеСправочникаНастроекРМК(Форма) Экспорт
	
	Если Форма.ИспользоватьНесколькоКассККМ Тогда
		КассыККМ = Форма.Объект.КассыККМ.Выгрузить(,"КассаККМ").ВыгрузитьКолонку("КассаККМ");
	Иначе
		КассыККМ = Новый Массив;
		КассыККМ.Добавить(Форма.КассаККМ);
	КонецЕсли;
	
	ТаблицаПараметров = ТаблицаПараметровКассЕГАИС(Форма.Объект.РабочееМесто, КассыККМ);
	
	Если Форма.ИспользоватьНесколькоКассККМ Тогда
		Для Каждого ТекСтрока Из Форма.Объект.КассыККМ Цикл
			ЗаполнитьВСтрокеПараметрыПодключенияЕГАИС(ТаблицаПараметров, ТекСтрока);
		КонецЦикла;
	Иначе
		ЗаполнитьВСтрокеПараметрыПодключенияЕГАИС(ТаблицаПараметров, Форма);
		УстановитьЗаголовокПараметрыПодключенияЕГАИСВФормеСправочникаНастроекРМК(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПодключенияЕГАИСВСтрокеВФормеСправочникаНастроекРМК(Форма, ИдентификаторСтроки = Неопределено) Экспорт
	
	Если (ИдентификаторСтроки = Неопределено) Тогда
		ТекСтрока = Форма;
	Иначе
		ТекСтрока = Форма.Объект.КассыККМ.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	
	КассыККМ = ТекСтрока.КассаККМ;
	ТаблицаПараметров = ТаблицаПараметровКассЕГАИС(Форма.Объект.РабочееМесто, КассыККМ);
	
	ЗаполнитьВСтрокеПараметрыПодключенияЕГАИС(ТаблицаПараметров, ТекСтрока);
	
	Если ИдентификаторСтроки = Неопределено Или Не Форма.ИспользоватьНесколькоКассККМ Тогда
		УстановитьЗаголовокПараметрыПодключенияЕГАИСВФормеСправочникаНастроекРМК(Форма);
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаПараметровКассЕГАИС(РабочееМесто, КассыККМ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	ПараметрыПодключенияЕГАИС.ИдентификаторФСРАР КАК ИдентификаторФСРАР,
	|	ПараметрыПодключенияЕГАИС.АдресУТМ КАК АдресУТМ,
	|	ПараметрыПодключенияЕГАИС.ПортУТМ КАК ПортУТМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО КлассификаторОрганизацийЕГАИС.Контрагент = КассыККМ.Владелец
	|		И КлассификаторОрганизацийЕГАИС.ТорговыйОбъект = КассыККМ.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕГАИС КАК ПараметрыПодключенияЕГАИС
	|		ПО ПараметрыПодключенияЕГАИС.РабочееМесто = &РабочееМесто
	|		И ПараметрыПодключенияЕГАИС.ИдентификаторФСРАР = КлассификаторОрганизацийЕГАИС.Код
	|ГДЕ
	|	КассыККМ.Ссылка В (&КассыККМ)
	|	И КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)";
	
	Запрос.УстановитьПараметр("КассыККМ", КассыККМ);
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьВСтрокеПараметрыПодключенияЕГАИС(ТаблицаПараметров, ФормаСтрока)
	
	СтрокаПараметров = ТаблицаПараметров.Найти(ФормаСтрока.КассаККМ, "КассаККМ");
	Если СтрокаПараметров = Неопределено Тогда
		ФормаСтрока.ПараметрыПодключенияЕГАИС = НСтр("ru = '<не указываются>'");
		ФормаСтрока.СтатусПодключенияКЕгаис = "НеУказываются";
		ФормаСтрока.ИдентификаторФСРАР = Неопределено;
	ИначеЕсли ЗначениеЗаполнено(СтрокаПараметров.АдресУТМ) Тогда
		ФормаСтрока.ПараметрыПодключенияЕГАИС = "" + СтрокаПараметров.АдресУТМ + ":" + Формат(СтрокаПараметров.ПортУТМ, "ЧГ=0");
		ФормаСтрока.СтатусПодключенияКЕгаис = "Указываются";
		ФормаСтрока.ИдентификаторФСРАР = СтрокаПараметров.ИдентификаторФСРАР;
	Иначе
		ФормаСтрока.ПараметрыПодключенияЕГАИС = НСтр("ru = '<не настроены>'");
		ФормаСтрока.СтатусПодключенияКЕгаис = "Настроить";
		ФормаСтрока.ИдентификаторФСРАР = СтрокаПараметров.ИдентификаторФСРАР;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовокПараметрыПодключенияЕГАИСВФормеСправочникаНастроекРМК(Форма)
	
	СтрокаЗаголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Параметры подключения к ЕГАИС'"));
	Ссылка = "ПараметрыПодключенияКЕГАИС";
	Если Форма.СтатусПодключенияКЕГАИС = "Настроить" Тогда
		СтрокаСсылка = Новый ФорматированнаяСтрока(НСтр("ru = '<настроить>'"),,,,Ссылка);
	ИначеЕсли Форма.СтатусПодключенияКЕГАИС = "НеУказываются" Тогда
		СтрокаСсылка = Новый ФорматированнаяСтрока(Форма.ПараметрыПодключенияЕГАИС);
	Иначе
		СтрокаСсылка = Новый ФорматированнаяСтрока(Форма.ПараметрыПодключенияЕГАИС,,,,Ссылка);
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрокаЗаголовок);
	МассивСтрок.Добавить(": ");
	МассивСтрок.Добавить(СтрокаСсылка);
	
	Форма.Элементы.ДекорацияПараметрыПодключенияЕГАИС.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

#КонецОбласти

#Область ДокументЧекФормаДокумента

// Добавляет на форму чека (чека возврата) реквизиты ГосИС (упрощенный вариант: флаг использования акцизных марок и видимость колонки "Номенклатура ЕГАИС")
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - ФормаДокумента чека
//
Процедура МодифицироватьИнициализироватьФормуЧека(Форма) Экспорт
	
	Если ПроверитьМодификацияФормыВыполнена(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы = Форма.Элементы;
	
#Область Интерфейс
	
	ИспользоватьАкцизныеМарки = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
		Форма.Объект.Организация, Форма.Объект.Склад, Форма.Объект.Дата);
	ЭлементыФормы.ТоварыНоменклатураЕГАИС.Видимость = ИспользоватьАкцизныеМарки;
	
#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область ФормыРМК

// Добавляет на форму РМК (чека ККМ, чека на возврат) реквизиты ГосИС
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - ФормаДокументаРМК
//
Процедура МодифицироватьИнициализироватьФормуРМК(Форма) Экспорт
	
	Если ПроверитьМодификацияФормыВыполнена(Форма) Тогда
		ИнициализироватьФормуРМК(Форма,
			ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИспользуетсяРегистрацияРозничныхПродажВЕГАИС"),
			ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КонтролироватьСтатусыКодовМаркировкиВРозницеИСМП"));
		Возврат;
	КонецЕсли;
	
	ЕстьЕГАИС = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийАлкоВРознице");
	ЕстьИСМП  = ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции();
	
#Область Реквизиты
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы("АдресСоответствияАкцизныхМарок", Новый ОписаниеТипов("Строка"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("КодМаркировкиДляУточнения", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ИспользоватьАкцизныеМарки", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ТребуетсяПересчетМарокПослеУдаленияСтрок", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ДанныеВыбораПоМаркируемойПродукции", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("СохраненВыборПоМаркируемойПродукции", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Если ЕстьЕГАИС Или ЕстьИСМП Тогда
		ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
		ПроверкаИПодборПродукцииИС.ДобавитьТаблицуШтрихкодовУпаковок(Форма, ПараметрыИнтеграцииГосИС, ДобавляемыеРеквизиты);
		ПроверкаИПодборПродукцииИС.ДополнитьТаблицуТоваров(Форма, ПараметрыИнтеграцииГосИС, "Объект.Товары", ДобавляемыеРеквизиты);
		
		Если ЕстьИСМП Тогда
			Для Каждого ВидПродукцииИС Из ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции() Цикл
				ПараметрыИнтеграцииГосИС.Вставить(
					ВидПродукцииИС,
					ПроверкаИПодборПродукцииИСМП.ПараметрыИнтеграцииФормыПроверкиИПодбора(Форма, ВидПродукцииИС));
			КонецЦикла;
		КонецЕсли;
		
		Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
		
	КонецЕсли;
	
	Если ЕстьЕГАИС Тогда
		
		Реквизит = Новый РеквизитФормы("ИспользуетсяРегистрацияРозничныхПродажВЕГАИС", Новый ОписаниеТипов("Булево"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Колонка = Новый РеквизитФормы("СопоставлениеАлкогольнаяПродукция", Новый ОписаниеТипов("Строка"), "Объект.Товары");
		ДобавляемыеРеквизиты.Добавить(Колонка);
		
	КонецЕсли;
	
	Если ЕстьИСМП Тогда
		Реквизит = Новый РеквизитФормы("КонтролироватьСтатусыКодовМаркировкиВРознице", Новый ОписаниеТипов("Булево"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
#КонецОбласти
	
	ЭлементыФормы = Форма.Элементы;
	
#Область Команды
	
	ИмяКомандыАкцизныеМарки = "ПроверитьАкцизныеМарки";
	КомандаФормы = Форма.Команды.Добавить(ИмяКомандыАкцизныеМарки);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КомандаФормы.Заголовок = НСтр("ru = 'Акцизные
	                                   | марки'");
	КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	
	Кнопка = ЭлементыФормы.Добавить(ИмяКомандыАкцизныеМарки, Тип("КнопкаФормы"), ЭлементыФормы.ГруппаНижняяКоманднаяПанельКонтекстныеКоманды4);
	Кнопка.ИмяКоманды            = ИмяКомандыАкцизныеМарки;
	Кнопка.ТолькоВоВсехДействиях = Ложь;
	Кнопка.ЦветФона  = Новый Цвет(224, 224, 224);
	Кнопка.Ширина = 12;
	Кнопка.Высота = 3;
	Кнопка.ВысотаЗаголовка = 2;
	Кнопка.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.F2, Истина, Ложь, Истина);
	
#КонецОбласти
	
#Область Элементы
	
	ПутьКРеквизиту = "Объект.Товары.СтатусПроверкиГосИС";
	КолонкаИнтерфейса = Форма.Элементы.Вставить(
		"ТоварыСтатусПроверкиГосИС",
		Тип("ПолеФормы"),
		ЭлементыФормы.Товары,
		ЭлементыФормы.ТоварыИндексНабора);
	КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
	КолонкаИнтерфейса.Вид = ВидПоляФормы.ПолеКартинки;
	КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КолонкаИнтерфейса.КартинкаЗначений = БиблиотекаКартинок.МаркируемаяПродукцияТЧ;
	КолонкаИнтерфейса.КартинкаШапки = БиблиотекаКартинок.МаркируемаяПродукцияШапка;
	
	Если ЕстьЕГАИС Тогда
		
		ПутьКРеквизиту = "Объект.Товары.НоменклатураЕГАИС";
		КолонкаИнтерфейса = Форма.Элементы.Вставить(
			"ТоварыНоменклатураЕГАИС",
			Тип("ПолеФормы"),
			ЭлементыФормы.Товары,
			ЭлементыФормы.ТоварыГруппаНабор);
		КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
		КолонкаИнтерфейса.Вид = ВидПоляФормы.ПолеВвода;
		
	КонецЕсли;
	
#КонецОбласти
	
#Область Инициализация

	ИнициализироватьФормуРМК(Форма, ЕстьЕГАИС, ЕстьИСМП);
	
#КонецОбласти
	
#Область Интерфейс
	
	ЭлементыФормы.ТоварыСтатусПроверкиГосИС.Видимость = Форма.ИспользоватьАкцизныеМарки;
	ЭлементыФормы.ПроверитьАкцизныеМарки.Видимость    = Форма.ИспользоватьАкцизныеМарки;
	
	Если ЕстьЕГАИС Тогда
		
		Если Форма.ИспользоватьАкцизныеМарки Тогда
			
			ЭлементыФормы.ТоварыНоменклатураЕГАИС.Видимость = Истина;
			
			Элемент = Форма.УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы.ТоварыНоменклатураЕГАИС.Имя);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НоменклатураЕГАИС");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Товары.СопоставлениеАлкогольнаяПродукция"));
			
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти

КонецПроцедуры

Процедура ИнициализироватьФормуРМК(Форма, ЕстьЕГАИС, ЕстьИСМП)
	
	Если ЕстьИСМП Тогда
		Форма.КонтролироватьСтатусыКодовМаркировкиВРознице = ИнтеграцияИСМПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировкиВРознице();
		Форма.ИспользоватьАкцизныеМарки = Истина;
	КонецЕсли;
	
	Если ЕстьЕГАИС Тогда
		
		Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			Форма.Объект.ОрганизацияЕГАИС = ИнтеграцияЕГАИСУТ.ОрганизацияЕГАИСПоОрганизацииИСкладу(Форма.Объект.Организация, Форма.Объект.Склад);
		КонецЕсли;
		
		Форма.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
			Форма.Объект.Организация, Форма.Объект.Склад, ТекущаяДатаСеанса());
		
		Если Форма.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
			Форма.ИспользоватьАкцизныеМарки = Истина;
		КонецЕсли;
		
		ИнтеграцияЕГАИСУТ.ЗаполнитьАлкогольнуюПродукцию(Форма.Объект.Товары, Форма.Объект.Серии);
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(Форма, "НоменклатураПризнаки", СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Форма.Объект.Товары, СтруктураДействий);
	
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаЧека(), Истина);
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаЧека());
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокументовПроизводства

Процедура ДобавитьКомандуЗаполненияПоОтчетамПроизводственнойЛинии(Форма) Экспорт
	
	Если Форма.ПараметрыИнтеграцииГосИС.Получить("Инициализация")<> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
	ПараметрыИнтеграцииГосИС.Вставить("Инициализация", Истина);
	Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
	
	ЭлементыФормы = Форма.Элементы;
	
#Область Команды
	
	ИмяКомандыЗаполнитьПоДокументамМаркировки = "ЗаполнитьПоДокументамМаркировки";
	КомандаФормы = Форма.Команды.Добавить(ИмяКомандыЗаполнитьПоДокументамМаркировки);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КомандаФормы.Заголовок = НСтр("ru = 'Заполнить по документам маркировки'");
	КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	
	ИмяПодменюЗаполнить = "ТоварыЗаполнить";
	
	Кнопка = ЭлементыФормы.Добавить(ИмяКомандыЗаполнитьПоДокументамМаркировки, Тип("КнопкаФормы"), ЭлементыФормы[ИмяПодменюЗаполнить]);
	Кнопка.ИмяКоманды            = ИмяКомандыЗаполнитьПоДокументамМаркировки;
	Кнопка.ТолькоВоВсехДействиях = Истина;
	
#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
