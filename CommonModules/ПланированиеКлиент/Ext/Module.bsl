////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции планирования
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура изменения флага отмены строк плана
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма документа плана
//  Таблица				 - ТаблицаЗначений				 - Таблица в которой устанавливается флаг отмены строки
//  ИмяЭлементаТаблицы	 - Строка						 - Имя элемента формы таблицы
//  ОповещениеОЗакрытии	 - ОписаниеОповещения			 - Оповещение, выполняемое после закрытия.
//
Процедура ИзменитьФлагОтменыСтрокПлана(Форма, Таблица, ИмяЭлементаТаблицы, ОповещениеОЗакрытии = Неопределено) Экспорт 

	Элементы = Форма.Элементы;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ИмяЭлементаТаблицы", ИмяЭлементаТаблицы);
	ДополнительныеПараметры.Вставить("Таблица", Таблица);
	Если ОповещениеОЗакрытии <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеОЗакрытии", ОповещениеОЗакрытии);
	КонецЕсли; 
	
	Если Форма.Объект.КроссТаблица Тогда
		
		Если Элементы[ИмяЭлементаТаблицы].ВыделенныеСтроки.Количество() = 0 Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Выделите строки в списке'"));
			Возврат;
		КонецЕсли;
		
		АктивныеПериоды = Форма.Периоды.НайтиСтроки(Новый Структура("Активная", Истина)); // см. Планирование.ТаблицаПериоды
		Если АктивныеПериоды.Количество() = 0  Тогда
			Возврат;
		КонецЕсли;
		
		Если АктивныеПериоды.Количество() > 1  Тогда
			
			ВыбранПериод = Ложь;
			ТекущийЭлемент = Элементы[ИмяЭлементаТаблицы].ТекущийЭлемент; // ПолеФормы - 
			ТекущийЭлементИмя = ТекущийЭлемент.Имя;
			Если СтрНайти(ТекущийЭлементИмя, ИмяЭлементаТаблицы + "Количество_") > 0
				ИЛИ СтрНайти(ТекущийЭлементИмя, ИмяЭлементаТаблицы + "Комментарий_") > 0
				ИЛИ СтрНайти(ТекущийЭлементИмя, ИмяЭлементаТаблицы + "Цена_") > 0
				ИЛИ СтрНайти(ТекущийЭлементИмя, ИмяЭлементаТаблицы + "Сумма_") > 0 Тогда
				ВыбранПериод = Истина;
			КонецЕсли;
			
			Если ВыбранПериод Тогда
				Для каждого Период Из АктивныеПериоды Цикл
					Если ТекущийЭлементИмя = ИмяЭлементаТаблицы + "Количество_"+Период.ИмяКолонки
						ИЛИ ТекущийЭлементИмя = ИмяЭлементаТаблицы + "КартинкаКомментарий_"+Период.ИмяКолонки
						ИЛИ ТекущийЭлементИмя = ИмяЭлементаТаблицы + "Цена_"+Период.ИмяКолонки
						ИЛИ ТекущийЭлементИмя = ИмяЭлементаТаблицы + "Сумма_"+Период.ИмяКолонки Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Период = АктивныеПериоды[0];
			КонецЕсли; 
			
			Если Элементы[ИмяЭлементаТаблицы].ТекущиеДанные["Отменено_"+Период.ИмяКолонки] Тогда
				ТекстВопроса = НСтр("ru='Снять пометку отмены ячеек плана для всех периодов?'");
			Иначе
				ТекстВопроса = НСтр("ru='Установить пометку отмены ячеек плана для всех периодов?'");
			КонецЕсли; 
			
			ДополнительныеПараметры.Вставить("ИмяКолонки", Период.ИмяКолонки);
			ДополнительныеПараметры.Вставить("Отменено",   НЕ Элементы[ИмяЭлементаТаблицы].ТекущиеДанные["Отменено_"+Период.ИмяКолонки]);
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Да, для всех'"));
			Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Только'") + " " + Период.Заголовок);
			Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
			
			Оповещение = Новый ОписаниеОповещения("ИзменитьФлагОтменыСтрокПланаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
		Иначе
		
			Период = АктивныеПериоды[0];
			
			ДополнительныеПараметры.Вставить("ИмяКолонки", Период.ИмяКолонки);
			ДополнительныеПараметры.Вставить("Отменено",   НЕ Элементы[ИмяЭлементаТаблицы].ТекущиеДанные["Отменено_"+Период.ИмяКолонки]);
			ИзменитьФлагОтменыСтрокПланаЗавершение(КодВозвратаДиалога.Нет, ДополнительныеПараметры);
		
		КонецЕсли; 
	Иначе
		
		Если Элементы[ИмяЭлементаТаблицы].ВыделенныеСтроки.Количество() = 0 Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Выделите строки в списке'"));
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("Отменено", НЕ Элементы[ИмяЭлементаТаблицы].ТекущиеДанные.Отменено);
		ИзменитьФлагОтменыСтрокПланаЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли;

КонецПроцедуры

// Процедура - Показать вопрос при изменении сценария
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения				 - Форма документа плана
//  ОповещениеОЗакрытии	 - ОписаниеОповещения			 - Оповещение, выполняемое после закрытия.
Процедура ПоказатьВопросПриИзмененииСценария(Форма, ОповещениеОЗакрытии = Неопределено) Экспорт 
	
	Если ЗначениеЗаполнено(Форма["РеквизитыДоИзменения"].Сценарий) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		Если ОповещениеОЗакрытии <> Неопределено Тогда
			ДополнительныеПараметры.Вставить("ОповещениеОЗакрытии", ОповещениеОЗакрытии);
		КонецЕсли; 
		
		Оповещение = Новый ОписаниеОповещения(
			"ПоказатьВопросПриИзмененииСценарияЗавершение", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru='Сценарий изменен. Правило заполнения будет обновлено. Обновить?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Обновить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Отменить изменение сценария'"));
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
		
		
	ИначеЕсли ОповещениеОЗакрытии <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Показать вопрос при изменении вид плана
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения				 - Форма документа плана
//  ОповещениеОЗакрытии	 - ОписаниеОповещения			 - Оповещение, выполняемое после закрытия.
Процедура ПоказатьВопросПриИзмененииВидПлана(Форма, ОповещениеОЗакрытии = Неопределено) Экспорт 
	
	Если ЗначениеЗаполнено(Форма["РеквизитыДоИзменения"].Сценарий) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		Если ОповещениеОЗакрытии <> Неопределено Тогда
			ДополнительныеПараметры.Вставить("ОповещениеОЗакрытии", ОповещениеОЗакрытии);
		КонецЕсли; 
		
		Оповещение = Новый ОписаниеОповещения(
			"ПоказатьВопросПриИзмененииВидПланаЗавершение", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru='Вид плана изменен. Правило заполнения будет обновлено. Обновить?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Обновить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Отменить изменение вида плана'"));
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
		
		
	ИначеЕсли ОповещениеОЗакрытии <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Изменить формулу на процент
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма документа плана
//  Таблица				 - ТаблицаЗначений				 - Таблица в которой устанавливается формула
//  ИмяЭлементаТаблицы	 - Строка						 - Имя элемента формы таблицы
//  ОповещениеОЗакрытии	 - ОписаниеОповещения			 - Оповещение, выполняемое после закрытия.
//
Процедура ИзменитьФормулуНаПроцент(Форма, Таблица, ИмяЭлементаТаблицы, ОповещениеОЗакрытии = Неопределено) Экспорт 

	Элементы = Форма.Элементы;
	ВыделенныеСтроки = Элементы[ИмяЭлементаТаблицы].ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0  Тогда
	
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выделить строки в списке!'"));
		Возврат;
	
	КонецЕсли; 
	
	АктивныеПериоды = Форма.Периоды.НайтиСтроки(Новый Структура("Активная", Истина)); // см. Планирование.ТаблицаПериоды
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ИмяЭлементаТаблицы", ИмяЭлементаТаблицы);
	ДополнительныеПараметры.Вставить("Таблица", Таблица);
	Если ОповещениеОЗакрытии <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеОЗакрытии", ОповещениеОЗакрытии);
	КонецЕсли; 
	
	Если Форма.Объект.КроссТаблица И АктивныеПериоды.Количество() > 1 Тогда
		
		ТекущийЭлемент = Элементы[ИмяЭлементаТаблицы].ТекущийЭлемент; // ПолеФормы - 
		ТекущийЭлементИмя = ТекущийЭлемент.Имя;
		
		Если СтрНайти(ТекущийЭлементИмя, ИмяЭлементаТаблицы + "Количество_") = 0 Тогда
			Период = АктивныеПериоды[0];
		Иначе
			Для каждого Период Из АктивныеПериоды Цикл
				Если ТекущийЭлементИмя = ИмяЭлементаТаблицы + "Количество_"+Период.ИмяКолонки Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		 
		ТекстВопроса = НСтр("ru='Установить формулу для всех периодов?'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Да, для всех'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Только'") + " " + Период.Заголовок);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ДополнительныеПараметры.Вставить("ИмяКолонки",Период.ИмяКолонки);
		
		Оповещение = Новый ОписаниеОповещения("ВвестиПроцентИИзменитьФормулу", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
		
	ИначеЕсли Форма.Объект.КроссТаблица И АктивныеПериоды.Количество() = 1 Тогда
		
		Период = АктивныеПериоды[0];
		ДополнительныеПараметры.Вставить("ИмяКолонки",Период.ИмяКолонки);
		ВвестиПроцентИИзменитьФормулу(КодВозвратаДиалога.Нет, ДополнительныеПараметры);
		
	Иначе
		
		ВвестиПроцентИИзменитьФормулу(КодВозвратаДиалога.Нет, ДополнительныеПараметры);
	
	КонецЕсли; 

КонецПроцедуры

// Процедура - Округлить формулу
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма документа плана
//  Таблица				 - ТаблицаЗначений				 - Таблица в которой устанавливается формула
//  ИмяЭлементаТаблицы	 - Строка						 - Имя элемента формы таблицы
//  ОповещениеОЗакрытии	 - ОписаниеОповещения			 - Оповещение, выполняемое после закрытия.
//
Процедура ОкруглитьФормулу(Форма, Таблица, ИмяЭлементаТаблицы, ОповещениеОЗакрытии = Неопределено) Экспорт 

	Элементы = Форма.Элементы;
	ВыделенныеСтроки = Элементы[ИмяЭлементаТаблицы].ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0  Тогда
	
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выделить строки в списке!'"));
		Возврат;
	
	КонецЕсли; 
	
	АктивныеПериоды = Форма.Периоды.НайтиСтроки(Новый Структура("Активная", Истина)); // см. Планирование.ТаблицаПериоды
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ИмяЭлементаТаблицы", ИмяЭлементаТаблицы);
	ДополнительныеПараметры.Вставить("Таблица", Таблица);
	Если ОповещениеОЗакрытии <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеОЗакрытии", ОповещениеОЗакрытии);
	КонецЕсли; 
	
	Если Форма.Объект.КроссТаблица И АктивныеПериоды.Количество() > 1 Тогда
	
		ТекущийЭлемент = Элементы[ИмяЭлементаТаблицы].ТекущийЭлемент; // ПолеФормы - 
		ТекущийЭлементИмя = ТекущийЭлемент.Имя;
		
		Если СтрНайти(ТекущийЭлементИмя, ИмяЭлементаТаблицы + "Количество_") = 0 Тогда
			Период = АктивныеПериоды[0];
		Иначе
			Для каждого Период Из АктивныеПериоды Цикл
				Если ТекущийЭлементИмя = ИмяЭлементаТаблицы + "Количество_"+Период.ИмяКолонки Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		 
		ТекстВопроса = НСтр("ru='Установить формулу для всех периодов?'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Да, для всех'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Только'") + " " + Период.Заголовок);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ДополнительныеПараметры.Вставить("ИмяКолонки",Период.ИмяКолонки);
		
		Оповещение = Новый ОписаниеОповещения("ВыбратьТочностьОкругленияИИзменитьФормулу", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
		
	ИначеЕсли Форма.Объект.КроссТаблица И АктивныеПериоды.Количество() = 1 Тогда
		
		Период = АктивныеПериоды[0];
		ДополнительныеПараметры.Вставить("ИмяКолонки",Период.ИмяКолонки);
		ВыбратьТочностьОкругленияИИзменитьФормулу(КодВозвратаДиалога.Нет, ДополнительныеПараметры);
		
	Иначе
		
		ВыбратьТочностьОкругленияИИзменитьФормулу(КодВозвратаДиалога.Нет, ДополнительныеПараметры);
	
	КонецЕсли; 

КонецПроцедуры

// Процедура - При изменении периода плана
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма документа плана:
//    * Объект - ДокументОбъект.ПланЗакупок - 
// 	          - ДокументОбъект.ПланОстатков -
// 	          - ДокументОбъект.ПланПродаж -
// 	          - ДокументОбъект.ПланПродажПоКатегориям -
// 	          - ДокументОбъект.ПланПроизводства -
// 	          - ДокументОбъект.ПланСборкиРазборки -
//  ИмяКроссТаблицы		 - Строка						 - Имя элемента формы таблицы
//  ОповещениеОбновленияИнтерфейса	 - ОписаниеОповещения			 - Оповещение, выполняемое после закрытия.
Процедура ПриИзмененииПериодаПлана(Форма, Знач ИмяКроссТаблицы, ОповещениеОбновленияИнтерфейса) Экспорт 
	
	Объект = Форма.Объект;
	ТребуетсяПересчетОкончанияПериода = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПланОстатков");
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	ПланированиеКлиентСервер.УстановитьНачалоОкончаниеПериодаПлана(Объект.Периодичность, Объект.НачалоПериода, Объект.ОкончаниеПериода, ТекущаяДатаСеанса, , ТребуетсяПересчетОкончанияПериода);
	
	Если ПланированиеКлиентСервер.НеобходимоОбновитьИнтерфейс(Объект, Форма, "РеквизитыДоИзменения") Тогда
		
		КроссТаблица = Форма[ИмяКроссТаблицы];
		Если Объект.КроссТаблица
			И КроссТаблица.Количество() > 0
			И Форма.Периоды.НайтиСтроки(Новый Структура("Активная", Истина)).Количество() > 0 Тогда
			ЗадаватьВопрос = Ложь;
			
			Если Форма["РеквизитыДоИзменения"].НачалоПериода <> Объект.НачалоПериода 
				И Объект.НачалоПериода > Форма["РеквизитыДоИзменения"].НачалоПериода Тогда
				ЗадаватьВопрос = Истина;
			КонецЕсли; 
			
			Если Форма["РеквизитыДоИзменения"].ОкончаниеПериода <> Объект.ОкончаниеПериода 
				И Объект.ОкончаниеПериода < Форма["РеквизитыДоИзменения"].ОкончаниеПериода Тогда
				ЗадаватьВопрос = Истина;
			КонецЕсли;
			
			Если ЗадаватьВопрос Тогда
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Удалить периоды'"));
				Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Отменить изменение периода'"));
				ТекстВопроса = НСтр("ru='Изменение периода плана приведет к удалению данных в некоторых периодах. Удалить периоды?'");
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Форма", Форма);
				ДополнительныеПараметры.Вставить("ОповещениеОбновленияИнтерфейса", ОповещениеОбновленияИнтерфейса);
				Оповещение = Новый ОписаниеОповещения("ПриИзмененииПериодаПланаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				
				ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ОповещениеОбновленияИнтерфейса);
		
	КонецЕсли;
	
КонецПроцедуры

// Вычисление по формуле
//
// Параметры:
//  ИсходнаяФормула	 - Строка					 - Значение исходной формулы
//  ТекущиеДанные	 - ДанныеФормыЭлементКоллекции	 - Значение текущих данных табличной части
//  Периоды			 - ДанныеФормыКоллекция			 - Значения периодов
//  Период			 - ДанныеФормыЭлементКоллекции	 - Значение текущего периода из таблицы периодов
//  Представление	 - Строка						 - Значение пользовательского представления формулы.
//  СерверныйВызов - Булево
// 
// Возвращаемое значение:
//  Структура - Возвращает структуру с новыми параметрами представления формулы.
//
Функция ВычислитьПоФормуле(Знач ИсходнаяФормула, Знач ТекущиеДанные, Знач Периоды, Знач Период, Знач Представление = Неопределено, СерверныйВызов = Ложь) Экспорт
	
	РасчетнаяФормула = ИсходнаяФормула;
	ВыводитьПромежуточныеВычисления = Ложь;
	Постфикс = Неопределено;
	
	Параметры = Новый Структура();
	Параметры.Вставить("Период", Период);
	Параметры.Вставить("Периоды", Периоды);
	Параметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	Если Период <> Неопределено Тогда
		Постфикс = Период.ИмяКолонки;
	КонецЕсли;
	
	МассивОперандов = ПланированиеКлиентСервер.ОперандыТекстовойФормулы(РасчетнаяФормула);
	
	Для каждого Операнд Из МассивОперандов Цикл
		
		Если Постфикс <> Неопределено Тогда
			ИмяОперанда = Операнд + "_" + Постфикс;
		Иначе
			ИмяОперанда = Операнд;
		КонецЕсли;
		
		Если Не ТекущиеДанные.Свойство(ИмяОперанда) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеОперанда = ТекущиеДанные[ИмяОперанда];
		Если НЕ ВыводитьПромежуточныеВычисления Тогда
			ВыводитьПромежуточныеВычисления = НЕ ПустаяСтрока(СтрЗаменить(РасчетнаяФормула, "["+Операнд+"]", ""));
		КонецЕсли; 
		РасчетнаяФормула = СтрЗаменить(РасчетнаяФормула, "["+Операнд+"]", Формат(ЗначениеОперанда, "ЧРД=.; ЧН=0; ЧГ=0"));
		
	КонецЦикла;
	
	РасчетнаяФормула = ПланированиеКлиентСервер.ДобавитьПараметрыКФункциям(РасчетнаяФормула, "Параметры");
	
	Попытка
		РезультатВычисления = Формат(Вычислить(РасчетнаяФормула),"ЧЦ=15; ЧДЦ=3; ЧН=0");
	Исключение
		РезультатВычисления = 0;
	КонецПопытки;
	
	РасчетнаяФормула = ПланированиеКлиентСервер.УдалитьПараметрыВФункциях(РасчетнаяФормула, "Параметры");
	
	Если ЗначениеЗаполнено(ИсходнаяФормула) И ИсходнаяФормула <> ПланированиеКлиентСервер.ТекстУстановкиНовойФормулы() Тогда
		Вычисление = ИсходнаяФормула + ?(ВыводитьПромежуточныеВычисления, " = " + РасчетнаяФормула, "") + " = " + РезультатВычисления;
	Иначе
		Вычисление = ПланированиеКлиентСервер.ТекстУстановкиНовойФормулы();
	КонецЕсли;
	
	Если ИсходнаяФормула <> ПланированиеКлиентСервер.ТекстУстановкиНовойФормулы() Тогда
		Представление = ?(ЗначениеЗаполнено(Представление),Представление,ИсходнаяФормула);
	Иначе
		Представление = "";
	КонецЕсли;
	
	Возврат Новый Структура("Вычисление,Результат,Представление", Вычисление,РезультатВычисления,Представление);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ФункцииИзОбщегоМодуля() Экспорт
	
	Описания = РаботаСФормуламиКлиентСервер.ФункцииОбщегоМодуля();
	
	ОписаниеФункции = РаботаСФормуламиКлиентСервер.ОписаниеФункцииОбщегоМодуля();
	ОписаниеФункции.Идентификатор = "НомерТекущейКолонки";
	ОписаниеФункции.ПолныйПуть = "ПланированиеКлиентСервер.НомерТекущейКолонки";
	ОписаниеФункции.Представление = НСтр("ru = 'Номер текущей колонки'");
	ОписаниеФункции.КонструкцияДляВставки = "НомерТекущейКолонки()";
	ОписаниеФункции.Пояснение = НСтр("ru = 'Вычисление номера текущей колонки'");
	Описания.Добавить(ОписаниеФункции);
	
	ОписаниеФункции = РаботаСФормуламиКлиентСервер.ОписаниеФункцииОбщегоМодуля();
	ОписаниеФункции.Идентификатор = "ЗначениеКолонки";
	ОписаниеФункции.ПолныйПуть = "ПланированиеКлиентСервер.ЗначениеКолонки";
	ОписаниеФункции.Представление = НСтр("ru = 'Значение колонки'");
	ОписаниеФункции.КонструкцияДляВставки = "ЗначениеКолонки()";
	ОписаниеФункции.Пояснение = НСтр("ru = 'Вычисление значения колонки'");
	Описания.Добавить(ОписаниеФункции);
	
	Возврат Описания;
	
КонецФункции

// Параметры:
// 	Результат - Структура -
// 	ДополнительныеПараметры - Структура - состав:
// 	  * Форма - ФормаКлиентскогоПриложения - 
// 	ШаблонФормулы - Строка - Описание
Процедура ИзменитьФлагОтменыСтрокПланаЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяЭлементаТаблицы = ДополнительныеПараметры.ИмяЭлементаТаблицы;
	Элементы = Форма.Элементы;
	
	Если Форма.Объект.КроссТаблица Тогда
		
		ВыделенныеСтроки = Элементы[ИмяЭлементаТаблицы].ВыделенныеСтроки;
		
		Если Результат = КодВозвратаДиалога.Да Тогда
		
			АктивныеПериоды = Форма.Периоды.НайтиСтроки(Новый Структура("Активная", Истина));
			Если АктивныеПериоды.Количество() = 0  Тогда
				Возврат;
			КонецЕсли;
			
			Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
				
				СтрокаТЧ = ДополнительныеПараметры.Таблица.НайтиПоИдентификатору(ВыделеннаяСтрока);
				Для каждого Период Из АктивныеПериоды Цикл
					СтрокаТЧ["Отменено_"+Период.ИмяКолонки] = ДополнительныеПараметры.Отменено;
				КонецЦикла;
				
			КонецЦикла; 
			
		Иначе
		
			Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
				
				СтрокаТЧ = ДополнительныеПараметры.Таблица.НайтиПоИдентификатору(ВыделеннаяСтрока);
				СтрокаТЧ["Отменено_"+ДополнительныеПараметры.ИмяКолонки] = ДополнительныеПараметры.Отменено;
				
			КонецЦикла; 
		
		КонецЕсли; 
	
	Иначе
	
		ВыделенныеСтроки = Элементы[ИмяЭлементаТаблицы].ВыделенныеСтроки;
		Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
			СтрокаТЧ = ДополнительныеПараметры.Таблица.НайтиПоИдентификатору(ВыделеннаяСтрока);
			СтрокаТЧ.Отменено = ДополнительныеПараметры.Отменено;
		
		КонецЦикла; 
	
	КонецЕсли; 
	
	Если ДополнительныеПараметры.Свойство("ОповещениеОЗакрытии") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗакрытии, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьВопросПриИзмененииСценарияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ПланированиеКлиентСервер.ВосстановитьЗначенияИзПроверяемыхРеквизитов(
			ДополнительныеПараметры.Форма.Объект, 
			ДополнительныеПараметры.Форма, 
			"РеквизитыДоИзменения", 
			"Сценарий, ВидПлана");
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеОЗакрытии") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗакрытии, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьВопросПриИзмененииВидПланаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ПланированиеКлиентСервер.ВосстановитьЗначенияИзПроверяемыхРеквизитов(
			ДополнительныеПараметры.Форма.Объект, 
			ДополнительныеПараметры.Форма, 
			"РеквизитыДоИзменения", 
			"ВидПлана");
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеОЗакрытии") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗакрытии, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВвестиПроцентИИзменитьФормулу(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Вставить("ИмяКолонки", "ВсеПериоды");
	ИначеЕсли Результат <> КодВозвратаДиалога.Нет Тогда
		Если ДополнительныеПараметры.Свойство("ОповещениеОЗакрытии") Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗакрытии, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВвестиПроцентИИзменитьФормулуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВводЧисла(Оповещение, 0, НСтр("ru = 'Введите процент'"), 5, 2);
	
КонецПроцедуры

Процедура ВвестиПроцентИИзменитьФормулуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Процент = Формат(1 + Результат / 100 ,"ЧЦ=15; ЧДЦ=4; ЧРД=.");
	
	ШаблонФормулы = НСтр("ru = '(%ТекущаяФормула%) * %Процент%'");
	ШаблонФормулы = СтрЗаменить(ШаблонФормулы, "%Процент%", Процент);
	
	ИзменитьФормулуВыделенныхСтрокПоШаблону(Результат, ДополнительныеПараметры, ШаблонФормулы);
	
КонецПроцедуры

Процедура ВыбратьТочностьОкругленияИИзменитьФормулу(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Вставить("ИмяКолонки", "ВсеПериоды");
	ИначеЕсли Результат <> КодВозвратаДиалога.Нет Тогда
		Если ДополнительныеПараметры.Свойство("ОповещениеОЗакрытии") Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗакрытии, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СписокЗначений = Новый СписокЗначений();
	СписокЗначений.Добавить( 3, "0,001");
	СписокЗначений.Добавить( 2, "0,01");
	СписокЗначений.Добавить( 1, "0,1");
	СписокЗначений.Добавить( 0, "1");
	СписокЗначений.Добавить(-1, "10");
	СписокЗначений.Добавить(-2, "100");
	СписокЗначений.Добавить(-3, "1000");
	
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьТочностьОкругленияИИзменитьФормулуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	СписокЗначений.ПоказатьВыборЭлемента(Оповещение,НСтр("ru = 'Точность округления'"));
	
КонецПроцедуры

Процедура ВыбратьТочностьОкругленияИИзменитьФормулуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонФормулы = НСтр("ru = 'Окр((%ТекущаяФормула%), %ТочностьОкругления%)'");
	ШаблонФормулы = СтрЗаменить(ШаблонФормулы, "%ТочностьОкругления%", Результат.Значение);
	
	ИзменитьФормулуВыделенныхСтрокПоШаблону(Результат, ДополнительныеПараметры, ШаблонФормулы);
	
КонецПроцедуры

// Параметры:
// 	Результат - Структура -
// 	Параметры - Структура - состав:
// 	  * Форма - ФормаКлиентскогоПриложения - 
// 	ШаблонФормулы - Строка - Описание
Процедура ИзменитьФормулуВыделенныхСтрокПоШаблону(Результат, Параметры, ШаблонФормулы)
	
	Форма = Параметры.Форма;
	Элементы = Форма.Элементы;
	ИмяЭлементаТаблицы = Параметры.ИмяЭлементаТаблицы;
	Таблица = Параметры.Таблица;
	
	ВыделенныеСтроки = Элементы[ИмяЭлементаТаблицы].ВыделенныеСтроки;
	
	Если Форма.Объект.КроссТаблица Тогда
		
		ИмяКолонки = Параметры.ИмяКолонки;
		
		Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			
			Если ИмяКолонки = "ВсеПериоды" Тогда
				Периоды = Форма.Периоды.НайтиСтроки(Новый Структура("Активная", Истина));
			Иначе
				Периоды = Форма.Периоды.НайтиСтроки(Новый Структура("Активная, ИмяКолонки", Истина, ИмяКолонки))
			КонецЕсли;
			
			Для каждого Период Из Периоды Цикл
				
				СтрокаТЧ = Таблица.НайтиПоИдентификатору(ВыделеннаяСтрока);
				Если СтрокаТЧ.Свойство("Полуфабрикат")
					И СтрокаТЧ.Полуфабрикат Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТЧ["Формула_" + Период.ИмяКолонки]) Тогда
					СтрокаТЧ["Формула_" + Период.ИмяКолонки] = СтрЗаменить(ШаблонФормулы, "%ТекущаяФормула%", СтрокаТЧ["Формула_" + Период.ИмяКолонки]);
				Иначе
					СтрокаТЧ["Формула_" + Период.ИмяКолонки] = Формат(СтрокаТЧ["Количество_" + Период.ИмяКолонки], "ЧРД=.; ЧН=0; ЧГ=0");
					СтрокаТЧ["Формула_" + Период.ИмяКолонки] = СтрЗаменить(ШаблонФормулы, "%ТекущаяФормула%", СтрокаТЧ["Формула_" + Период.ИмяКолонки]);
				КонецЕсли; 
				РезультатВычисления = ВычислитьПоФормуле(СтрокаТЧ["Формула_" + Период.ИмяКолонки], СтрокаТЧ, Периоды, Период);
				СтрокаТЧ["ФормулаВычисление_" + Период.ИмяКолонки] = РезультатВычисления.Вычисление;
				СтрокаТЧ["Количество_" + Период.ИмяКолонки]= РезультатВычисления.Результат;
				СтрокаТЧ["Отклонение_" + Период.ИмяКолонки]= 0;
				
			КонецЦикла;
			
		КонецЦикла; 

	Иначе
		
		Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			
			СтрокаТЧ = Таблица.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если ЗначениеЗаполнено(СтрокаТЧ.Формула) Тогда
				СтрокаТЧ.Формула = СтрЗаменить(ШаблонФормулы, "%ТекущаяФормула%", СтрокаТЧ.Формула);
			Иначе
				СтрокаТЧ.Формула = Формат(СтрокаТЧ.КоличествоУпаковок, "ЧРД=.; ЧН=0; ЧГ=0");
				СтрокаТЧ.Формула = СтрЗаменить(ШаблонФормулы, "%ТекущаяФормула%", СтрокаТЧ.Формула);
			КонецЕсли; 
			РезультатВычисления = ВычислитьПоФормуле(СтрокаТЧ.Формула, СтрокаТЧ, Неопределено, Неопределено);
			СтрокаТЧ.ФормулаВычисление = РезультатВычисления.Вычисление;
			СтрокаТЧ.КоличествоУпаковок = РезультатВычисления.Результат;
			СтрокаТЧ.Отклонение = 0;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ОповещениеОЗакрытии") Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеОЗакрытии, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииПериодаПланаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
	
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОбновленияИнтерфейса);
	
	Иначе
	
		ПланированиеКлиентСервер.ВосстановитьЗначенияИзПроверяемыхРеквизитов(
			ДополнительныеПараметры.Форма.Объект, 
			ДополнительныеПараметры.Форма, 
			"РеквизитыДоИзменения", 
			"НачалоПериода, ОкончаниеПериода");
	
	КонецЕсли; 
	
КонецПроцедуры


// Описание
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
// 	ИмяСтраницыТовары - Строка -
// 	ИмяТчТовары - Строка -
// 	ИмяТчТоварыПоПериодам - Строка -
Процедура СпозиционироватьсяПоСтроке(Форма, ИмяСтраницыТовары, ИмяТчТовары, ИмяТчТоварыПоПериодам) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаПриОткрытии) Тогда
		Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы[ИмяСтраницыТовары];
		Если Форма.Объект.КроссТаблица Тогда
			СтрокиПоиска = Форма[ИмяТчТоварыПоПериодам].НайтиСтроки(Форма.ТекущаяСтрокаПриОткрытии);
			Если СтрокиПоиска.Количество()>0 Тогда
				ТоварыПоПериодам = Форма.Элементы[ИмяТчТоварыПоПериодам]; // ТаблицаФормы - 
				ТоварыПоПериодам.ТекущаяСтрока = СтрокиПоиска[0].ПолучитьИдентификатор();
			КонецЕсли;
		Иначе
			СтрокиПоиска = Форма.Объект[ИмяТчТовары].НайтиСтроки(Форма.ТекущаяСтрокаПриОткрытии);
			Если СтрокиПоиска.Количество()>0 Тогда
				Товары = Форма.Элементы[ИмяТчТоварыПоПериодам]; // ТаблицаФормы - 
				Товары.ТекущаяСтрока = СтрокиПоиска[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти