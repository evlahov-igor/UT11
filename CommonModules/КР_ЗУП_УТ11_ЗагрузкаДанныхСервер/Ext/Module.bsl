////////////////////////////////////////////////////
//// Объект ОбщийМодуль.КР_ЗУП_УТ11_ЗагрузкаДанныхСервер
//// Предназначен для загрузки данных из ЗУП
//// Создан: 29.09.2022 Маскаев П.Ю., КРОК, JIRA№ A2105505-570

#Область ПрограммныйИнтерфейс

Функция ДобавитьНастройкиЗагрузкиОбъектов(ПараметрыЗагрузки) Экспорт
	
	НастройкаЗагрузки(ПараметрыЗагрузки, "PersonObject");

	Возврат ПараметрыЗагрузки; 
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфес

#Область ПравилаЗагрузкиОбъектов

Процедура ПЗО_PersonObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	//// Конвертируем в объект
	//Объект = Неопределено;
	//Если Не ПКО_СправочникОбъектФизическиеЛица(ПакетДанных, Объект, СообщениеОбмена)
	//	Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Конвертируем в объект
	// Конвертация производится в транзакции для обеспечения целостности данных
	НачатьТранзакцию();
	Попытка
		Объект = Неопределено;
		Если ПКО_СправочникОбъектФизическиеЛица(ПакетДанных, Объект, СообщениеОбмена)
			И КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'В процессе загрузки данных физического лица произошла исключительная ошибка:
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения,
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.ФизическиеЛица));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПравилаКонвертации

#Область Справочники

Функция ПКО_СправочникОбъектФизическиеЛица(ПакетДанных, Объект, СообщениеОбмена)
	
	Ссылка = XMLЗначение(Тип("СправочникСсылка.ФизическиеЛица"), ПакетДанных.Ref);
	ЭтоНовый = Не ОбщегоНазначения.СсылкаСуществует(Ссылка);
	
	Если ЭтоНовый Тогда
		Если ПакетДанных.Group Тогда
			Объект = Справочники.ФизическиеЛица.СоздатьГруппу();
		Иначе
			Объект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		КонецЕсли;
		Объект.УстановитьСсылкуНового(Ссылка);
	Иначе
		Объект = Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Объект.Родитель = ПКО_СправочникСсылкаФизическиеЛицаРодитель(ПакетДанных, СообщениеОбмена);
	Объект.Наименование = ПакетДанных.Name;
	Объект.ПометкаУдаления = ПакетДанных.DeletionMark;
	Если Не Объект.ЭтоГруппа Тогда
		Объект.ДатаРождения = ПакетДанных.Birthday;
		Объект.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица." + ПакетДанных.Gender);
		Объект.КР_Подразделение = ПКО_СправочникСсылкаПодразделение(ПакетДанных, СообщениеОбмена);
		Объект.КР_Должность = ПакетДанных.Position;
		
		Если ВРег(ПакетДанных.Event) = "УВОЛЬНЕНИЕ" Тогда
			Объект.КР_Уволен = Истина;
		Иначе
			Объект.КР_Уволен = Ложь;
		КонецЕсли;

		// << 09.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2486 
		// Дублируем сознательно на случай если потребуется разделить ссылку и GUID
		// Реквизит используется для выгрузки в СБИС
		Объект.КР_ИдентификаторЗУП = ПакетДанных.Ref;
		// >> 09.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2486

		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПакетДанных, "FIOHistory")
				И Не ПКО_РегистрСведенийФИОФизическихЛиц(ПакетДанных.FIOHistory, Ссылка, СообщениеОбмена) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_СправочникСсылкаФизическиеЛицаРодитель(ПакетДанных, СообщениеОбмена)
	
	Если ПакетДанных.Parent = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ссылка = XMLЗначение(Тип("СправочникСсылка.ФизическиеЛица"), ПакетДанных.Parent.Ref);
	Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
		Возврат Ссылка;
	Иначе
		ТекстСообщения = НСтр("ru = 'Элемент справочника ""Физические лица"" ""%1""
			|при создании/редактировании элемента справочника ""Физические лица"" ""%2"" не найден'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПакетДанных.Parent.Name, ПакетДанных.Name);
		ТипОшибки = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибкаПоискаСсылки(
			Метаданные.Справочники.ФизическиеЛица);
		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПКО_СправочникСсылкаПодразделение(ПакетДанных, СообщениеОбмена)
	
	Если ПакетДанных.Department = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ссылка = XMLЗначение(Тип("СправочникСсылка.СтруктураПредприятия"), ПакетДанных.Department.Ref);
	Если Не ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
		Ссылка = Справочники.СтруктураПредприятия.НайтиПоКоду(ПакетДанных.Department.Code);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	Иначе
		ТекстСообщения = НСтр("ru = 'Элемент справочника ""Структура предприятия"" ""%1""
			|при создании/редактировании элемента справочника ""Физические лица"" ""%2"" не найден'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПакетДанных.Department.Name, ПакетДанных.Name);
		ТипОшибки = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибкаПоискаСсылки(
			Метаданные.Справочники.СтруктураПредприятия);
		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РегистрыСведений

Функция ПКО_РегистрСведенийФИОФизическихЛиц(ПакетДанных, ФизЛицо, СообщениеОбмена)
	
	Если ПакетДанных = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ПакетДанных.FIOHistorySingleRow Цикл
		
		НаборЗаписей = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(СтрокаДанных.Period);
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизЛицо);
		
		Запись = НаборЗаписей.Добавить();
		
		Запись.Период = СтрокаДанных.Period;
		Запись.ФизическоеЛицо = ФизЛицо;
		Запись.Фамилия = СтрокаДанных.Surname;
		Запись.Имя = СтрокаДанных.Name;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "Patronymic") Тогда
			Запись.Отчество = СтрокаДанных.Patronymic;
		КонецЕсли;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("НеФормироватьНаименование", Истина);
		
		Если Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.НаборЗаписейРегистраЗаписать(
				НаборЗаписей, СообщениеОбмена) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиЗагрузкиОбъектов       

Функция НастройкаЗагрузки(ПараметрыЗагрузки, ТипДанных)
	
	ШаблонПравилаЗагрузки = "КР_ЗУП_УТ11_ЗагрузкаДанныхСервер.ПЗО_%1";
	
	СтрокаЗагрузки = ПараметрыЗагрузки.Добавить();
	СтрокаЗагрузки.ТипДанных = ТипДанных;
	СтрокаЗагрузки.Отправитель = ""; // любой
	СтрокаЗагрузки.ОчередьОбмена = ""; // любой
	СтрокаЗагрузки.ПравилоЗагрузки = СтрШаблон(ШаблонПравилаЗагрузки, ТипДанных);
	СтрокаЗагрузки.ДополнительныеПараметры = Новый Структура;
	
	Возврат СтрокаЗагрузки;
	
КонецФункции

#КонецОбласти

#КонецОбласти
