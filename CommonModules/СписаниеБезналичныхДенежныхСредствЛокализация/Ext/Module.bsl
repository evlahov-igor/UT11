#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
	//++ Локализация
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		ЗарегистрироватьОплатуНДСПоСчетамФактурам(Объект, Истина);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	ФлагОбменСБанками = Ложь;
	ОшибкиЗаполнения = "";
	РасшифровкаБезРазбиения = Ложь;
	
	ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	
	Если ДополнительныеСвойства.Свойство("ОбменСБанками")
		И ДополнительныеСвойства.ОбменСБанками Тогда
		ФлагОбменСБанками = Истина;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("РасшифровкаБезРазбиения")
		И ДополнительныеСвойства.РасшифровкаБезРазбиения Тогда
		РасшифровкаБезРазбиения = Истина;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации);
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов, МассивРеквизитовОперации, МассивНепроверяемыхРеквизитов);
	
	МассивНепроверяемыхРеквизитов.Добавить("ВидПеречисленияВБюджет");
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		И Не Объект.НДФЛПоВедомостям Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Ведомость");
	КонецЕсли;
	
	
		МассивНепроверяемыхРеквизитов.Добавить("ТипПлатежаФЗ275");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорСЗаказчиком");
	
	Если Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.РаспоряжениеОбОбязательнойПродаже Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВходящегоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("НомерВходящегоДокумента");
	КонецЕсли;
	
	РеквизитыПлатежаВБюджет = Новый Массив;
	РеквизитыПлатежаВБюджет.Добавить("ВидПеречисленияВБюджет");
	РеквизитыПлатежаВБюджет.Добавить("ПеречислениеВБюджет");
	РеквизитыПлатежаВБюджет.Добавить("КодБК");
	РеквизитыПлатежаВБюджет.Добавить("КодОКАТО");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательДаты");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательНомера");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательОснования");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательПериода");
	РеквизитыПлатежаВБюджет.Добавить("СтатусСоставителя");
	
	РеквизитыДокумента = Объект.Метаданные().Реквизиты;
	
	ДатаНачалаПримененияПриказа126н = Константы.ДатаНачалаПримененияПриказа126н.Получить();
	Если ДатаНачалаПримененияПриказа126н <> '00010101' И Объект.Дата >= ДатаНачалаПримененияПриказа126н Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПоказательТипа");
	Иначе
		РеквизитыПлатежаВБюджет.Добавить("ПоказательТипа");
	КонецЕсли;
	
	Для каждого РеквизитПлатежаВБюджет Из РеквизитыПлатежаВБюджет Цикл
		МассивНепроверяемыхРеквизитов.Добавить(РеквизитПлатежаВБюджет);
		Если Объект.ПеречислениеВБюджет Тогда
			Если Не ЗначениеЗаполнено(Объект[РеквизитПлатежаВБюджет]) Тогда
				Реквизит = РеквизитыДокумента.Найти(РеквизитПлатежаВБюджет);
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено'"), Реквизит.Синоним);
				Если ФлагОбменСБанками Тогда
					ДенежныеСредстваСервер.ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ПеречислениеВБюджет Тогда
		ДенежныеСредстваСерверЛокализация.ПроверитьЗаполнениеНалоговыхРеквизитов(Объект, Отказ, МассивНепроверяемыхРеквизитов);
		ДенежныеСредстваСерверЛокализация.ПроверитьИННиКППНаСоответствие148н(Объект, Отказ);
	КонецЕсли;
	
	ДенежныеСредстваСерверЛокализация.ПроверитьЗаполнениеКодаВидаДохода(Объект,
																		Объект.ХозяйственнаяОперация,
																		Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	
	//++ Локализация
	Если ТипОснования = Тип("Структура")
		И ДанныеЗаполнения.Свойство("НесколькоЗаявокНаРасходованиеСредств") Тогда
		
		Если Не ДанныеЗаполнения.НесколькоЗаявокНаРасходованиеСредств
			И ТипЗнч(ДанныеЗаполнения.ДокументОснование[0]) = Тип("ДокументСсылка.УведомлениеОЗачисленииВалюты") Тогда
			
			ДенежныеСредстваСерверЛокализация.ЗаполнитьДокументПоУведомлениюОЗачисленииВалюты(
				ДанныеЗаполнения.ДокументОснование[0], Объект, ДанныеЗаполнения);
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда
		
		ЗаполнитьПоСчетуФактуреНалоговогоАгента(
			Объект,
			ДанныеЗаполнения,
			ДанныеЗаполнения);
			
	
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		
		ЗаполнитьПоЗаявлениюОВвозеТоваров(
			Объект,
			ДанныеЗаполнения,
			ДанныеЗаполнения);
			
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОперацияПоЯндексКассе") Тогда
		
		ЗаполнитьПоОперацииПоЯндексКассе(
			Объект,
			ДанныеЗаполнения,
			ДанныеЗаполнения);
			
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.УведомлениеОЗачисленииВалюты") Тогда
		
		ДенежныеСредстваСерверЛокализация.ЗаполнитьДокументПоУведомлениюОЗачисленииВалюты(
			ДанныеЗаполнения,
			Объект,
			ДанныеЗаполнения);
			
	ИначеЕсли ТипОснования = Тип("Массив") И ДанныеЗаполнения.Количество() > 0 Тогда
		
		ТипОснования = ТипЗнч(ДанныеЗаполнения[0]);
		
		Если ТипОснования = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда 
			
			ЗаполнитьПоСчетуФактуреНалоговогоАгента(
				Объект,
				ДанныеЗаполнения[0], 
				ДанныеЗаполнения);
				
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда 
				
			ЗаполнитьПоЗаявлениюОВвозеТоваров(
				Объект,
				ДанныеЗаполнения[0], 
				ДанныеЗаполнения);
				
		КонецЕсли;
		
	КонецЕсли;
	
	
	ИнициализироватьДокумент(Объект, ДанныеЗаполнения);
	
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	//++ Локализация
	ВыполнитьПроверкуВозвратовНеперечисленныхДенежныхСредств(Объект, Отказ);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//++ Локализация
	НеиспользуемыеРеквизиты = Новый Массив;
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации);
	
	Для каждого НеиспользуемыйРеквизит Из НеиспользуемыеРеквизиты Цикл
		УдаляемыйРеквизит = МассивРеквизитовОперации.Найти(НеиспользуемыйРеквизит);
		Если УдаляемыйРеквизит <> Неопределено Тогда
			МассивРеквизитовОперации.Удалить(УдаляемыйРеквизит);
		КонецЕсли;
	КонецЦикла;
	
	
	ПроверитьИзменениеТипаПлатежногоДокумента(Объект);
	
	Если Лев(Объект.ПоказательДаты, 1) = "0" И Сред(Объект.ПоказательДаты, 2, 2) = " ." Тогда
		Объект.ПоказательДаты = "0";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Объект.ПоказательДаты, ".", "")) Тогда
		Объект.ПоказательДаты = "";
	КонецЕсли;
	
	Если Объект.ПеречислениеВБюджет И Не ЗначениеЗаполнено(Объект.ИдентификаторПлатежа) Тогда
		Объект.ИдентификаторПлатежа = "0";
	КонецЕсли;
	
	Если Не Объект.ДополнительныеСвойства.Свойство("ОбменСБанками") Или Не Объект.ДополнительныеСвойства.ОбменСБанками Тогда
		Если Не (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств) Тогда
			Объект.КодВидаДохода = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Не Объект.ДополнительныеСвойства.Свойство("ОбменСБанками") Или Не Объект.ДополнительныеСвойства.ОбменСБанками Тогда
		Если Не (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) Тогда
			Объект.КодВыплат = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.РаспоряжениеОбОбязательнойПродаже
		И Не (ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Или ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента)) Тогда
		Объект.НомерВходящегоДокумента = СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер, Истина, Истина));
		Объект.ДатаВходящегоДокумента = Объект.Дата;
	КонецЕсли;
	
	
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	//++ Локализация
	Если ПроведениеДокументов.СвойстваДокумента(Объект).РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		ЗарегистрироватьОплатуНДСПоСчетамФактурам(Объект, Ложь);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки
//  Префикс - Строка - Префикс, который будет использован для генерации нового номера
//
Процедура ПриУстановкеНовогоНомера(Объект, СтандартнаяОбработка, Префикс) Экспорт
	
	Если Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение Тогда
		Префикс = НСтр("ru = 'П'");
	Иначе
		Префикс = "0";
	КонецЕсли;
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	//++ Локализация
	Если ДействуетФедеральныйЗакон345ФЗ(ОбъектКопирования.Дата) <> ДействуетФедеральныйЗакон345ФЗ(ТекущаяДатаСеанса()) Тогда
		Если ОбъектКопирования.ОчередностьПлатежа = 6 Тогда
			Объект.ОчередностьПлатежа = 5;
		Иначе
			Объект.ОчередностьПлатежа = 0;
		КонецЕсли;
	КонецЕсли;
	
	ДенежныеСредстваСерверЛокализация.ПриИзмененииПравилПлатежейВБюджет(Объект, ОбъектКопирования.Дата, ТекущаяДатаСеанса());
	
	Если Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение
		Или Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер
		Или Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер Тогда
		Объект.ПроведеноБанком = Истина;
		Объект.ДатаПроведенияБанком = ТекущаяДатаСеанса();
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  ВидФормы - Строка - Имя стандартной формы
//  Параметры - Структура - Параметры формы
//  ВыбраннаяФорма - Строка, Форма - Содержит имя открываемой формы или объект метаданных Форма
//  ДополнительнаяИнформация - Структура - Дополнительная информация открытия формы
//  СтандартнаяОбработка - Булево - Признак стандартной обработки
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	//-- Локализация
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	//++ Локализация
	Документы.СчетФактураНалоговыйАгент.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	//-- Локализация
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ Локализация
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	//++ Локализация
	// Платежное поручение
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ПлатежноеПоручение";
		КомандаПечати.Представление = НСтр("ru = 'Платежное поручение'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;
	
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	//++ Локализация
	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПлатежноеПоручение") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПлатежноеПоручение",
			НСтр("ru='Платежное поручение'"),
			СформироватьПлатежноеПоручение(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.СписаниеБезналичныхДенежныхСредств.ПФ_MXL_ПлатежноеПоручение_ru");
			
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

//++ Локализация
Функция СформироватьПлатежноеПоручение(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеБезналичныхДенежныхСредств_ПлатежноеПоручение";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеБезналичныхДенежныхСредств.ПФ_MXL_ПлатежноеПоручение_ru");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента
	|ПОМЕСТИТЬ БанковскиеСчетаКонтрагентовВрем
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ФормаОплатыБезналичная
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.БанковскийСчетПолучатель КАК БанковскийСчетКонтрагента
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.БанковскийСчетПолучатель КАК БанковскийСчетКонтрагента
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ФормаОплатыБезналичная
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.БанковскийСчет КАК БанковскийСчет
	|ПОМЕСТИТЬ БанковскиеСчетаОрганизацийВрем
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК Документ
	|ГДЕ
	|	Документ.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ФормаОплатыБезналичная
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.БанковскийСчетКасса КАК БанковскийСчет
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РаспределениеПоСчетам КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.Ссылка.ФормаОплатыБезналичная
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Владелец КАК Владелец,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.НаименованиеБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Наименование
	|	КОНЕЦ КАК НаименованиеБанка,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.БИКБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Код
	|	КОНЕЦ КАК БИК,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.КоррСчетБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.КоррСчет
	|	КОНЕЦ КАК КоррСчет,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.ГородБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Город
	|	КОНЕЦ КАК Город,
	|	БанковскиеСчета.ТекстКорреспондента КАК ТекстКорреспондента,
	|	БанковскиеСчета.ИННКорреспондента КАК ИННКорреспондента,
	|	БанковскиеСчета.КППКорреспондента КАК КППКорреспондента,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.БИКРКЦ.Наименование, """") КАК НаименованиеРКЦ
	|
	|ПОМЕСТИТЬ БанковскиеСчетаКонтрагентов
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
	|ГДЕ
	|	(БанковскиеСчета.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|		И БанковскиеСчета.БИКБанкаДляРасчетов = """"
	|		И БанковскиеСчета.СВИФТБанкаДляРасчетов = """")
	|	И БанковскиеСчета.Ссылка В (
	|		ВЫБРАТЬ
	|			БанковскиеСчета.БанковскийСчетКонтрагента
	|		ИЗ
	|			БанковскиеСчетаКонтрагентовВрем КАК БанковскиеСчета
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.Владелец,
	|	ВЫБОР
	|		КОГДА ИностранныйБанк ТОГДА
	|			БанковскиеСчета.СчетВБанкеДляРасчетов
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|					БанковскиеСчета.КоррСчетБанка
	|				ИНАЧЕ
	|					БанковскиеСчета.Банк.КоррСчет
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.НаименованиеБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Наименование
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.БИКБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Код
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.КоррСчетБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.ГородБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Город
	|	КОНЕЦ,
	|	БанковскиеСчета.ТекстКорреспондента,
	|	БанковскиеСчета.ИННКорреспондента,
	|	БанковскиеСчета.КППКорреспондента,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.БИКРКЦ.Наименование, """") КАК НаименованиеРКЦ
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
	|ГДЕ
	|	НЕ (БанковскиеСчета.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|		И БанковскиеСчета.БИКБанкаДляРасчетов = """"
	|		И БанковскиеСчета.СВИФТБанкаДляРасчетов = """")
	|	И БанковскиеСчета.Ссылка В (
	|		ВЫБРАТЬ
	|			БанковскиеСчета.БанковскийСчетКонтрагента
	|		ИЗ
	|			БанковскиеСчетаКонтрагентовВрем КАК БанковскиеСчета
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.Владелец,
	|	БанковскиеСчета.НомерСчета,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.НаименованиеБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Наименование
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.БИКБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Код
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.КоррСчетБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.КоррСчет
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.ГородБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Город
	|	КОНЕЦ,
	|	БанковскиеСчета.ТекстКорреспондента,
	|	"""",
	|	"""",
	|	""""
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|ГДЕ
	|	(БанковскиеСчета.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|		И БанковскиеСчета.БИКБанкаДляРасчетов = """"
	|		И БанковскиеСчета.СВИФТБанкаДляРасчетов = """")
	|	И БанковскиеСчета.Ссылка В (
	|		ВЫБРАТЬ
	|			БанковскиеСчета.БанковскийСчетКонтрагента
	|		ИЗ
	|			БанковскиеСчетаКонтрагентовВрем КАК БанковскиеСчета
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.Владелец,
	|	ВЫБОР
	|		КОГДА ИностранныйБанк ТОГДА
	|			БанковскиеСчета.СчетВБанкеДляРасчетов
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|					БанковскиеСчета.КоррСчетБанка
	|				ИНАЧЕ
	|					БанковскиеСчета.Банк.КоррСчет
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.НаименованиеБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Наименование
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.БИКБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Код
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.КоррСчетБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.ГородБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Город
	|	КОНЕЦ,
	|	БанковскиеСчета.ТекстКорреспондента,
	|	"""",
	|	"""",
	|	""""
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|ГДЕ
	|	НЕ (БанковскиеСчета.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|		И БанковскиеСчета.БИКБанкаДляРасчетов = """"
	|		И БанковскиеСчета.СВИФТБанкаДляРасчетов = """")
	|	И БанковскиеСчета.Ссылка В (
	|		ВЫБРАТЬ
	|			БанковскиеСчета.БанковскийСчетКонтрагента
	|		ИЗ
	|			БанковскиеСчетаКонтрагентовВрем КАК БанковскиеСчета
	|		)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Владелец КАК Владелец,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.НаименованиеБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Наименование
	|	КОНЕЦ КАК НаименованиеБанка,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.БИКБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Код
	|	КОНЕЦ КАК БИК,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.КоррСчетБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.КоррСчет
	|	КОНЕЦ КАК КоррСчет,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.ГородБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Город
	|	КОНЕЦ КАК Город
	|
	|ПОМЕСТИТЬ БанковскиеСчетаОрганизаций
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|ГДЕ
	|	(БанковскиеСчета.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|		И БанковскиеСчета.БИКБанкаДляРасчетов = """"
	|		И БанковскиеСчета.СВИФТБанкаДляРасчетов = """")
	|	И БанковскиеСчета.Ссылка В (
	|		ВЫБРАТЬ
	|			БанковскиеСчета.БанковскийСчет КАК БанковскийСчет
	|		ИЗ
	|			БанковскиеСчетаОрганизацийВрем КАК БанковскиеСчета
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.Владелец,
	|	ВЫБОР
	|		КОГДА ИностранныйБанк ТОГДА
	|			БанковскиеСчета.СчетВБанкеДляРасчетов
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|					БанковскиеСчета.КоррСчетБанка
	|				ИНАЧЕ
	|					БанковскиеСчета.Банк.КоррСчет
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.НаименованиеБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Наименование
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.БИКБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Код
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.КоррСчетБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.ГородБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Город
	|	КОНЕЦ
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|ГДЕ
	|	НЕ (БанковскиеСчета.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|		И БанковскиеСчета.БИКБанкаДляРасчетов = """"
	|		И БанковскиеСчета.СВИФТБанкаДляРасчетов = """")
	|	И БанковскиеСчета.Ссылка В (
	|		ВЫБРАТЬ
	|			БанковскиеСчета.БанковскийСчет КАК БанковскийСчет
	|		ИЗ
	|			БанковскиеСчетаОрганизацийВрем КАК БанковскиеСчета
	|		)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ДанныеДокумента.ИсправляемыйДокумент.Номер, ДанныеДокумента.Номер) КАК Номер,
	|	ЕСТЬNULL(ДанныеДокумента.ИсправляемыйДокумент.Дата, ДанныеДокумента.Дата) КАК ДатаДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК ПлательщикНаименование,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ИННПлательщика = """" ТОГДА
	|			ДанныеДокумента.Организация.ИНН
	|		ИНАЧЕ
	|			ДанныеДокумента.ИННПлательщика
	|	КОНЕЦ КАК ИННПлательщика,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КПППлательщика = """"
	|				И НЕ (ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств)
	|				И ДанныеДокумента.ИННПлательщика <> """") ТОГДА
	|			ДанныеДокумента.Организация.КПП
	|		ИНАЧЕ
	|			ДанныеДокумента.КПППлательщика
	|	КОНЕЦ КАК КПППлательщика,
	|	ДанныеДокумента.ТекстПлательщика КАК ТекстПлательщика,
	|	ДанныеДокумента.БанковскийСчет.ТекстКорреспондента КАК ТекстКорреспондента,
	|	
	|	БанковскиеСчетаКонтрагентов.Владелец.Наименование КАК ПолучательНаименование,
	|	БанковскиеСчетаКонтрагентов.Владелец.НаименованиеПолное КАК ПолучательНаименованиеПолное,
	|	БанковскиеСчетаКонтрагентов.Владелец.НаименованиеСокращенное КАК ПолучательНаименованиеСокращенное,
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Получатель,
	|	
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаКонтрагентов.ИННКорреспондента = """" ТОГДА
	|			БанковскиеСчетаКонтрагентов.Владелец.ИНН
	|		ИНАЧЕ
	|			БанковскиеСчетаКонтрагентов.ИННКорреспондента
	|	КОНЕЦ КАК ИННПолучателя,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаКонтрагентов.Ссылка ССЫЛКА Справочник.БанковскиеСчетаОрганизаций ТОГДА
	|			БанковскиеСчетаКонтрагентов.Владелец.КПП
	|		ИНАЧЕ ЕСТЬNULL(БанковскиеСчетаКонтрагентов.КППКорреспондента, """")
	|	КОНЕЦ КАК КПППолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.ТекстКорреспондента, """") КАК ТекстПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.НаименованиеРКЦ, """") КАК НаименованиеРКЦ,
	|
	|	ДанныеДокумента.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ДанныеДокумента.ВидПлатежа КАК ВидПлатежа,
	|	ДанныеДокумента.ОчередностьПлатежа КАК Очередность,
	|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ДанныеДокумента.КодБК КАК КодБК,
	|	ДанныеДокумента.КодОКАТО КАК КодОКАТО,
	|	ДанныеДокумента.ПоказательДаты КАК ПоказательДаты,
	|	ДанныеДокумента.ПоказательНомера КАК ПоказательНомера,
	|	ДанныеДокумента.ПоказательОснования КАК ПоказательОснования,
	|	ДанныеДокумента.ПоказательПериода КАК ПоказательПериода,
	|	ДанныеДокумента.КодВыплат КАК ПоказательТипа,
	|	ДанныеДокумента.СтатусСоставителя КАК СтатусСоставителя,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.ТипПлатежногоДокумента КАК ТипПлатежногоДокумента,
	|	ДанныеДокумента.КодВидаДохода КАК КодВидаДохода,
	|
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.НомерСчета, """") КАК НомерСчетаПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.НаименованиеБанка, """") КАК НаименованиеБанкаПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.БИК, """") КАК БИКБанкаПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.КоррСчет, """") КАК СчетБанкаПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.Город, """") КАК ГородБанкаПолучателя,
	|
	|	ДанныеДокумента.БанковскийСчет.ВариантВыводаМесяца КАК ВариантВыводаМесяца,
	|	ДанныеДокумента.БанковскийСчет.ВыводитьСуммуБезКопеек КАК ВыводитьСуммуБезКопеек,
	|	ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		ДанныеДокумента.БанковскийСчет.НаименованиеБанкаДляРасчетов
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет.БанкДляРасчетов.Наименование
	|	КОНЕЦ КАК БанкДляРасчетов,
	|	ДанныеДокумента.БанковскийСчет.НомерСчета КАК НомерСчета,
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка ТОГДА
	|		ДанныеДокумента.БанковскийСчет.НаименованиеБанка
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет.Банк.Наименование
	|	КОНЕЦ КАК Банк,
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка ТОГДА
	|		ДанныеДокумента.БанковскийСчет.ГородБанка
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет.Банк.Город
	|	КОНЕЦ КАК Город,
	|
	|	ЕСТЬNULL(БанковскиеСчетаОрганизаций.НомерСчета, """") КАК НомерСчетаПлательщика,
	|	ЕСТЬNULL(БанковскиеСчетаОрганизаций.НаименованиеБанка, """") КАК НаименованиеБанкаПлательщика,
	|	ЕСТЬNULL(БанковскиеСчетаОрганизаций.БИК, """") КАК БИКБанкаПлательщика,
	|	ЕСТЬNULL(БанковскиеСчетаОрганизаций.КоррСчет, """") КАК СчетБанкаПлательщика,
	|	ЕСТЬNULL(БанковскиеСчетаОрганизаций.Город, """") КАК ГородБанкаПлательщика
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|	ПО
	|		ДанныеДокумента.БанковскийСчетКонтрагента = БанковскиеСчетаКонтрагентов.Ссылка
	|		ИЛИ 
	|		(ДанныеДокумента.БанковскийСчетПолучатель = БанковскиеСчетаКонтрагентов.Ссылка
	|		И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты))
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = БанковскиеСчетаОрганизаций.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК ДатаДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК ПлательщикНаименование,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ИННПлательщика = """" ТОГДА
	|			ДанныеДокумента.Организация.ИНН
	|		ИНАЧЕ
	|			ДанныеДокумента.ИННПлательщика
	|	КОНЕЦ КАК ИННПлательщика,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КПППлательщика = """"
	|				И НЕ (ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств)
	|				И ДанныеДокумента.ИННПлательщика <> """") ТОГДА
	|			ДанныеДокумента.Организация.КПП
	|		ИНАЧЕ
	|			ДанныеДокумента.КПППлательщика
	|	КОНЕЦ КАК КПППлательщика,
	|	ДанныеДокумента.ТекстПлательщика КАК ТекстПлательщика,
	|	ЕстьNULL(Распределение.БанковскийСчетКасса.ТекстКорреспондента, ДанныеДокумента.БанковскийСчет.ТекстКорреспондента) КАК ТекстКорреспондента,
	|	
	|	БанковскиеСчетаКонтрагентов.Владелец.Наименование КАК ПолучательНаименование,
	|	БанковскиеСчетаКонтрагентов.Владелец.НаименованиеПолное КАК ПолучательНаименованиеПолное,
	|	БанковскиеСчетаКонтрагентов.Владелец.НаименованиеСокращенное КАК ПолучательНаименованиеСокращенное,
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Получатель,
	|	
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаКонтрагентов.ИННКорреспондента = """" ТОГДА
	|			БанковскиеСчетаКонтрагентов.Владелец.ИНН
	|		ИНАЧЕ
	|			БанковскиеСчетаКонтрагентов.ИННКорреспондента
	|	КОНЕЦ КАК ИННПолучателя,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаКонтрагентов.Ссылка ССЫЛКА Справочник.БанковскиеСчетаОрганизаций ТОГДА
	|			БанковскиеСчетаКонтрагентов.Владелец.КПП
	|		ИНАЧЕ ЕСТЬNULL(БанковскиеСчетаКонтрагентов.КППКорреспондента, """")
	|	КОНЕЦ КАК КПППолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.ТекстКорреспондента, """") КАК ТекстПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.НаименованиеРКЦ, """") КАК НаименованиеРКЦ,
	|
	|	ДанныеДокумента.НазначениеПлатежа КАК НазначениеПлатежа,
	|	"""" КАК ВидПлатежа,
	|	0 КАК Очередность,
	|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ДанныеДокумента.КодБК КАК КодБК,
	|	ДанныеДокумента.КодОКАТО КАК КодОКАТО,
	|	ДанныеДокумента.ПоказательДаты КАК ПоказательДаты,
	|	ДанныеДокумента.ПоказательНомера КАК ПоказательНомера,
	|	ДанныеДокумента.ПоказательОснования КАК ПоказательОснования,
	|	ДанныеДокумента.ПоказательПериода КАК ПоказательПериода,
	|	ДанныеДокумента.КодВыплат КАК ПоказательТипа,
	|	ДанныеДокумента.СтатусСоставителя КАК СтатусСоставителя,
	|	ЕстьNULL(Распределение.Сумма, ДанныеДокумента.СуммаДокумента) КАК СуммаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение) КАК ТипПлатежногоДокумента,
	|	ДанныеДокумента.КодВидаДохода КАК КодВидаДохода,
	|
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.НомерСчета, """") КАК НомерСчетаПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.НаименованиеБанка, """") КАК НаименованиеБанкаПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.БИК, """") КАК БИКБанкаПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.КоррСчет, """") КАК СчетБанкаПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.Город, """") КАК ГородБанкаПолучателя,
	|
	|	ЕСТЬNULL(ЕстьNULL(Распределение.БанковскийСчетКасса.ВариантВыводаМесяца, ДанныеДокумента.БанковскийСчет.ВариантВыводаМесяца), ЗНАЧЕНИЕ(Перечисление.ВариантыВыводаМесяцаВДатеДокумента.Числом)) КАК ВариантВыводаМесяца,
	|	ЕСТЬNULL(ЕстьNULL(Распределение.БанковскийСчетКасса.ВыводитьСуммуБезКопеек, ДанныеДокумента.БанковскийСчет.ВыводитьСуммуБезКопеек), ЛОЖЬ) КАК ВыводитьСуммуБезКопеек,
	|	ЕСТЬNULL(ЕстьNULL(Распределение.БанковскийСчетКасса.ВалютаДенежныхСредств, ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств), ДанныеДокумента.Валюта) КАК ВалютаДенежныхСредств,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		ДанныеДокумента.БанковскийСчет.НаименованиеБанкаДляРасчетов
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет.БанкДляРасчетов.Наименование
	|	КОНЕЦ КАК БанкДляРасчетов,
	|	ДанныеДокумента.БанковскийСчет.НомерСчета КАК НомерСчета,
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка ТОГДА
	|		ДанныеДокумента.БанковскийСчет.НаименованиеБанка
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет.Банк.Наименование
	|	КОНЕЦ КАК Банк,
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка ТОГДА
	|		ДанныеДокумента.БанковскийСчет.ГородБанка
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет.Банк.Город
	|	КОНЕЦ КАК Город,
	|
	|	ЕСТЬNULL(ЕстьNULL(БанковскиеСчетаОрганизацийРаспределение.НомерСчета, БанковскиеСчетаОрганизаций.НомерСчета), """") КАК НомерСчетаПлательщика,
	|	ЕСТЬNULL(ЕстьNULL(БанковскиеСчетаОрганизацийРаспределение.НаименованиеБанка, БанковскиеСчетаОрганизаций.НаименованиеБанка), """") КАК НаименованиеБанкаПлательщика,
	|	ЕСТЬNULL(ЕстьNULL(БанковскиеСчетаОрганизацийРаспределение.БИК, БанковскиеСчетаОрганизаций.БИК), """") КАК БИКБанкаПлательщика,
	|	ЕСТЬNULL(ЕстьNULL(БанковскиеСчетаОрганизацийРаспределение.КоррСчет, БанковскиеСчетаОрганизаций.КоррСчет), """") КАК СчетБанкаПлательщика,
	|	ЕСТЬNULL(ЕстьNULL(БанковскиеСчетаОрганизацийРаспределение.Город, БанковскиеСчетаОрганизаций.Город), """") КАК ГородБанкаПлательщика
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|	ПО
	|		ДанныеДокумента.БанковскийСчетКонтрагента = БанковскиеСчетаКонтрагентов.Ссылка
	|		ИЛИ (ДанныеДокумента.БанковскийСчетПолучатель = БанковскиеСчетаКонтрагентов.Ссылка
	|			И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты))
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = БанковскиеСчетаОрганизаций.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств.РаспределениеПоСчетам КАК Распределение
	|	ПО
	|		Распределение.Ссылка = ДанныеДокумента.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизацийРаспределение
	|	ПО
	|		Распределение.БанковскийСчетКасса = БанковскиеСчетаОрганизацийРаспределение.Ссылка
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.ФормаОплатыБезналичная
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер
	|";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеКонтрагентов = ДенежныеСредстваСервер.СведенияОКонтрагентахПоДокументам(МассивОбъектов);
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если Выборка.ТипПлатежногоДокумента <> Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Платежное поручение не формируется для типа документа: %1'"),
				Выборка.ТипПлатежногоДокумента);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				Выборка.Ссылка.ПолучитьОбъект(),
				"ТипПлатежногоДокумента",
				, // ПутьКДанным
				// Отказ
			);
		Иначе
		
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, Выборка.Ссылка);
			ОбластьМакета.Параметры.Заполнить(Выборка);
			
			// Заполним текст плательщика.
			Если Не ПустаяСтрока(Выборка.ТекстПлательщика) Тогда
				ТекстПлательщика = Выборка.ТекстПлательщика;
			Иначе
				Если Не ПустаяСтрока(Выборка.ТекстКорреспондента) Тогда
					ТекстПлательщика = Выборка.ТекстКорреспондента;
				Иначе
					ТекстПлательщика = Выборка.ПлательщикНаименование;
					Если ЗначениеЗаполнено(Выборка.БанкДляРасчетов) Тогда
						ТекстПлательщика = ТекстПлательщика
						+ " р/с " + СокрЛП(Выборка.НомерСчета)
						+ " в " + Строка(Выборка.Банк)
						+ " " + Выборка.Город;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ОбластьМакета.Параметры.ТекстПлательщика = ТекстПлательщика;
			
			Если ПустаяСтрока(ТекстПлательщика) Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У организации %1 не заполнено поле ""Сокращенное наименование""'"),
					Выборка.Организация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					Выборка.Организация.ПолучитьОбъект(),
					"НаименованиеСокращенное");
			КонецЕсли;
			
			// Заполним текст получателя.
			Если Не ПустаяСтрока(Выборка.ТекстПолучателя) Тогда
				ТекстПолучателя = Выборка.ТекстПолучателя;
			ИначеЕсли ТипЗнч(Выборка.Получатель) = Тип("СправочникСсылка.Организации") Тогда
				ТекстПолучателя = Выборка.ПолучательНаименованиеСокращенное;
			ИначеЕсли ТипЗнч(Выборка.Получатель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ТекстПолучателя = Выборка.ПолучательНаименование;
			Иначе
				ОтборНаименования = Новый Структура("Документ, Признак", Выборка.Ссылка, 0);
				СведенияОНаименовании = ДанныеКонтрагентов.НайтиСтроки(ОтборНаименования);
				ТекстПолучателя = ?(СведенияОНаименовании.Количество() > 0, 
									СведенияОНаименовании[0].ЗначениеРеквизита,
									Выборка.ПолучательНаименованиеПолное);
			КонецЕсли;
			ОбластьМакета.Параметры.ТекстПолучателя = ТекстПолучателя;
			
			Если ПустаяСтрока(ТекстПолучателя) И ЗначениеЗаполнено(Выборка.Получатель) Тогда
				Если ТипЗнч(Выборка.Получатель) = Тип("СправочникСсылка.Организации") Тогда
					ИмяПоля = "НаименованиеСокращенное";
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'У организации-получателя %1 не заполнено поле ""Сокращенное наименование""'"),
						Выборка.Получатель);
				ИначеЕсли ТипЗнч(Выборка.Получатель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
					ИмяПоля = "ФИО";
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'У физического лица %1 не заполнено поле ""ФИО""'"),
						Выборка.Получатель);
				Иначе
					ИмяПоля = "НаименованиеПолное";
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'У контрагента %1 не заполнено поле ""Сокращенное наименование""'"),
						Выборка.Получатель);
				КонецЕсли; 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					Выборка.Получатель.ПолучитьОбъект(),
					ИмяПоля);
			КонецЕсли;
			
			ОбластьМакета.Параметры.НаименованиеБанкаПлательщика =
				Выборка.НаименованиеБанкаПлательщика + " " + Выборка.ГородБанкаПлательщика;
			Если ЗначениеЗаполнено(Выборка.НаименованиеРКЦ) Тогда
				ОбластьМакета.Параметры.НаименованиеБанкаПолучателя =
					Выборка.НаименованиеРКЦ + "//" + Выборка.НаименованиеБанкаПолучателя + " " + Выборка.ГородБанкаПолучателя;
			Иначе
				ОбластьМакета.Параметры.НаименованиеБанкаПолучателя =
					Выборка.НаименованиеБанкаПолучателя + " " + Выборка.ГородБанкаПолучателя;
			КонецЕсли;
			
			// Заполним ИНН и КПП.
			ОбластьМакета.Параметры.ИННПлательщика = "ИНН " + ?(ПустаяСтрока(Выборка.ИННПлательщика), "0", Выборка.ИННПлательщика);
			ОбластьМакета.Параметры.КПППлательщика = "КПП " + ?(ПустаяСтрока(Выборка.КПППлательщика), "0", Выборка.КПППлательщика);
			ОбластьМакета.Параметры.ИННПолучателя = "ИНН " + ?(ПустаяСтрока(Выборка.ИННПолучателя), "0", Выборка.ИННПолучателя);
			
			ОтборКПП = Новый Структура("Документ, Признак", Выборка.Ссылка, 1);
			СведенияОКПП = ДанныеКонтрагентов.НайтиСтроки(ОтборКПП);
			КППКонтрагента = "0";
			
			Если СведенияОКПП.Количество() > 0 Тогда
				КППКонтрагента = ?(СведенияОКПП[0].ЗначениеРеквизита = "", "0", СведенияОКПП[0].ЗначениеРеквизита);
			КонецЕсли;
			
			ОбластьМакета.Параметры.КПППолучателя = "КПП " + ?(Выборка.КПППолучателя <> "", Выборка.КПППолучателя, КППКонтрагента);
			
			Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
				НомерДокументаДляПечати = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, // УдалитьПрефиксИнформационнойБазы
					Истина); // УдалитьПользовательскийПрефикс
				ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru='ПЛАТЕЖНОЕ ПОРУЧЕНИЕ №'", Метаданные.Языки.Русский.КодЯзыка) + " " + НомерДокументаДляПечати;
			Иначе
				ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru='ОБРАЗЕЦ ПЛАТЕЖНОГО ПОРУЧЕНИЯ'", Метаданные.Языки.Русский.КодЯзыка);
			КонецЕсли;
			ОбластьМакета.Параметры.СуммаЧислом = ФормированиеПечатныхФорм.СуммаПлатежногоДокумента(
				Выборка.СуммаДокумента,
				Выборка.ВыводитьСуммуБезКопеек);
			ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(
				Выборка.СуммаДокумента,
				Выборка.ВалютаДенежныхСредств,
				Выборка.ВыводитьСуммуБезКопеек);
			Если Выборка.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Прописью Тогда
				ФорматДаты = "ДЛФ=ДД'";
			Иначе
				ФорматДаты = "ДЛФ=D'";
			КонецЕсли;
			ОбластьМакета.Параметры.ДатаДокумента = Формат(Выборка.ДатаДокумента, ФорматДаты);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
				ТабличныйДокумент,
				НомерСтрокиНачало,
				ОбъектыПечати,
				Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции


// Возвращает строковое представление реквизитов платежного документа.
//
// Параметры:
//   ДатаПП - Дата - дата платежного поручения
//   НомерПП - Строка - номер платежного поручения.
//
// Возвращаемое значение:
//   Строка - строковое представление
//
Функция РеквизитыПлатежногоПорученияПоДатеНомеру(ДатаПП, НомерПП) Экспорт

	Возврат СтрШаблон(НСтр("ru='№ %1 от %2'", Метаданные.Языки.Русский.КодЯзыка), НомерПП, Формат(ДатаПП, "ДЛФ=D"));

КонецФункции

//-- Локализация
#КонецОбласти


#Область Фискализация

//++ Локализация

// Возвращает параметры операции фискализации чека для печати чека по документу
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документ, из которого печатается чек - содержит:
// 	* Объект - ДокументОбъект - Документ-объект, основной параметр формы.
// Возвращаемое значение:
// 	Структура - Структура параметров операции фискализации чека
Функция ОсновныеПараметрыОперации(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ОсновныеПараметрыОперации = ФормированиеФискальныхЧековСерверПереопределяемый.СтруктураОсновныхПараметровОперации();
	
	ОсновныеПараметрыОперации.ДокументСсылка       = Объект.Ссылка;
	ОсновныеПараметрыОперации.Организация          = Объект.Организация;
	ОсновныеПараметрыОперации.Контрагент           = Объект.Контрагент;
	ОсновныеПараметрыОперации.Партнер              = Форма.Партнер;
	ОсновныеПараметрыОперации.Валюта               = Объект.Валюта;
	ОсновныеПараметрыОперации.СуммаДокумента       = Объект.СуммаДокумента;
	
	ОсновныеПараметрыОперации.ИмяРеквизитаГиперссылкиНаФорме = "ФискальнаяОперацияСтатус";

	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ОсновныеПараметрыОперации.ИмяКомандыПробитияЧека = "ПробитьЧек";
	КонецЕсли;
	
	Возврат ОсновныеПараметрыОперации;
	
КонецФункции

// Определяет, разрешено ли пробитие фискального чека по документу
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документ, из которого печатается чек - содержит:
// 	* Объект - ДокументОбъект - Документ-объект, основной параметр формы.
// Возвращаемое значение:
// 	Булево - Истина, если разрешено пробитие чека
Функция РазрешеноПробитиеФискальныхЧековПоДокументу(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	РазрешеноПробитиеФискальныхЧековПоДокументу =
		(Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮрФизЛицо") = Перечисления.ЮрФизЛицо.ФизЛицо
		И Объект.ПроведеноБанком;
	
	Возврат РазрешеноПробитиеФискальныхЧековПоДокументу;
	
КонецФункции

// Формирует массив форматированных строк для формирования гиперссылки пробития фискального чека
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ-ссылка, по которому пробивается фискальный чек
// 	Форма - ФормаКлиентскогоПриложения - Форма документ, из которого печатается чек - содержит:
// 	* Объект - ДокументОбъект - Документ-объект, основной параметр формы.
// 	МассивПредставлений - Массив из ФорматированнаяСтрока - Массив форматированных строк для формирования гиперссылки
//    пробития фискального чека.
Процедура ОбновитьГиперссылкуПробитияФискальногоЧека(ДокументСсылка, Форма, МассивПредставлений) Экспорт
	
	ФискальнаяОперацияДанныеЖурнала = ФормированиеФискальныхЧековСервер.ДанныеПробитогоФискальногоЧекаПоДокументу(ДокументСсылка);
	
	Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
		
		НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
		ТекстСсылки = "ОткрытьЗаписьФискальнойОперации";
		
		ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
		
	ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
		
		Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.Организация) Тогда 
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, "ПробитьЧек");
		Иначе
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
		КонецЕсли;
		
	Иначе
		
		ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет виды фискальных чеков, доступных по документу
// 
// Параметры:
// 	ВидыЧеков - ТаблицаЗначений - Таблица значений, содержащая виды фискальных чеков, доступных по документу
// 	Операция - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция по документу
// 	ИмяКомандыПробитияЧека - Строка - Имя команды пробития чека
Процедура ЗаполнитьВидыФискальныхЧековПоДокументу(ВидыЧеков, Операция, ИмяКомандыПробитияЧека) Экспорт
	
	ТипРасчетовДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;
	Если Операция = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ТипРасчетовДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	КонецЕсли;
	
	ВидЧека = ВидыЧеков.Добавить();
	ВидЧека.ТипФискальногоДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек;
	ВидЧека.ТипРасчетаДенежнымиСредствами = ТипРасчетовДенежнымиСредствами;
	ВидЧека.ВидЧекаКоррекции = Неопределено;
	
	ВидЧека = ВидыЧеков.Добавить();
	ВидЧека.ТипФискальногоДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции;
	ВидЧека.ТипРасчетаДенежнымиСредствами = ТипРасчетовДенежнымиСредствами;
	ВидЧека.ВидЧекаКоррекции = Перечисления.ВидыЧековКоррекции.НеприменениеККТ;
	
КонецПроцедуры

// Определяет систему налогообложения по документу
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ для определения системы налогообложения
// Возвращаемое значение:
// 	ПеречислениеСсылка.ТипыСистемНалогообложенияККТ - Система налогообложения по документу
Функция СистемаНалогообложенияПоДокументу(ДокументСсылка) Экспорт
	
	РасшифровкаПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "РасшифровкаПлатежа").Выгрузить();
	
	МассивОбъектовРасчетов = РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов");
	МассивОбъектовРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОбъектовРасчетов, "НалогообложениеНДС");
	
	НалогообложениеНДСПоОбъектамРасчетов = Новый Массив();
	Для Каждого ОбъектРасчетов Из МассивОбъектовРасчетов Цикл
		
		Если ЗначениеЗаполнено(ОбъектРасчетов.Значение.НалогообложениеНДС) Тогда
			Если НалогообложениеНДСПоОбъектамРасчетов.Найти(ОбъектРасчетов.Значение.НалогообложениеНДС) = Неопределено Тогда
				НалогообложениеНДСПоОбъектамРасчетов.Добавить(ОбъектРасчетов.Значение.НалогообложениеНДС);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СистемаНалогообложения = Неопределено;
	Если НалогообложениеНДСПоОбъектамРасчетов.Количество() = 1 Тогда
		Если НалогообложениеНДСПоОбъектамРасчетов[0] = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту Тогда
			СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.Патент;
		ИначеЕсли НалогообложениеНДСПоОбъектамРасчетов[0] = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
		КонецЕсли;
	КонецЕсли;
	
	Если СистемаНалогообложения = Неопределено Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Организация");
		СистемаНалогообложения = РозничныеПродажиЛокализация.СистемаНалогообложенияФискальнойОперации(РеквизитыДокумента.Организация);
	КонецЕсли;
	
	Возврат СистемаНалогообложения;
	
КонецФункции

// Возвращает наименование клиента, кто внес или получил денежные средства в качестве аванса
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ для определения системы налогообложения
// Возвращаемое значение:
// 	Строка - Наименование клиента платежа-аванса
Функция КлиентАвансовогоПлатежаНаименование(ДокументСсылка) Экспорт
	
	Клиент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Контрагент");
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Клиент, "НаименованиеПолное");
	
КонецФункции

//-- Локализация

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

//++ Локализация
//-- Локализация

Функция ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам() Экспорт
	
	//++ Локализация
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСФилиалами) КАК Статья,
	|	Организации.Ссылка КАК Аналитика,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|
	|	ДанныеДокумента.ИдентификаторДокумента КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДанныеДокумента.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|		 И ДанныеДокумента.РегистрацияВНалоговомОргане = Организации.РегистрацияВНалоговомОргане
	|		 И ДанныеДокумента.Организация <> Организации.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И &ПроведеноБанком
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ДанныеДокумента.ТипНалога КАК Аналитика,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит) КАК ДебетКредит,
	|
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|
	|	ДанныеДокумента.ИдентификаторДокумента КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДанныеДокумента.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|		 И ДанныеДокумента.РегистрацияВНалоговомОргане = Организации.РегистрацияВНалоговомОргане
	|		 И ДанныеДокумента.Организация <> Организации.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И &ПроведеноБанком
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	Организации.Ссылка КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСФилиалами) КАК Статья,
	|	&Организация КАК Аналитика,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит) КАК ДебетКредит,
	|
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|
	|	ДанныеДокумента.ИдентификаторДокумента КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДанныеДокумента.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|		 И ДанныеДокумента.РегистрацияВНалоговомОргане = Организации.РегистрацияВНалоговомОргане
	|		 И ДанныеДокумента.Организация <> Организации.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И &ПроведеноБанком
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	Организации.Ссылка КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ДанныеДокумента.ТипНалога КАК Аналитика,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|
	|	ДанныеДокумента.ИдентификаторДокумента КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДанныеДокумента.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|		 И ДанныеДокумента.РегистрацияВНалоговомОргане = Организации.РегистрацияВНалоговомОргане
	|		 И ДанныеДокумента.Организация <> Организации.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И &ПроведеноБанком";
	
	Возврат ТекстЗапроса;
	
	//-- Локализация
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеНаОсновании

//++ Локализация
Процедура ЗаполнитьПоСчетуФактуреНалоговогоАгента(Объект, Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.СуммаНДС КАК СуммаНДС,
	|	ДанныеДокумента.Валюта,
	|	&Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.СчетФактураНалоговыйАгент КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&Ссылки)
	|");
	Запрос.УстановитьПараметр("Ссылки", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ВалютаВзаиморасчетов = Выборка.Валюта;
		НоваяСтрока.Сумма = Выборка.СуммаНДС;
		НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаНДС;
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявлениюОВвозеТоваров(Объект, Знач ДокументОснование, ДанныеЗаполнения)
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация    КАК Организация,
	|	&ТекущаяДата                   КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаНДС,
	|	&Ссылка                        КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&Ссылки)
	|");
	Запрос.УстановитьПараметр("Ссылки", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
		НоваяСтрока.Сумма = Выборка.СуммаНДС;
		НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаНДС;
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

Процедура ЗаполнитьПоОперацииПоЯндексКассе(Объект, Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	&ТекущаяДата КАК Дата,
	                      |	ДанныеДокумента.ИдентификаторТранзакции КАК ИдентификаторТранзакции,
	                      |
	                      |	ДанныеДокумента.Организация КАК Организация,
	                      |	ДанныеДокумента.Подразделение КАК Подразделение,
	                      |
	                      |	ДанныеДокумента.Эквайер.Партнер КАК Партнер,
	                      |	ДанныеДокумента.Эквайер КАК Контрагент,
	                      |	ДанныеДокумента.Эквайер.Наименование КАК КонтрагентНаименование,
	                      |	ДанныеДокумента.Эквайер.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	                      |
	                      |	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	                      |	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	                      |	ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
	                      |	ДанныеДокумента.СуммаДокумента КАК Сумма,
	                      |
	                      |	ДанныеДокумента.СтатьяРасходов КАК СтатьяРасходов,
	                      |	ДанныеДокумента.АналитикаРасходов КАК АналитикаРасходов,
	                      |	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	                      |
	                      |	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
	                      |	&Ссылка КАК ДокументОснование
	                      |
	                      |ИЗ
	                      |	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	                      |ГДЕ
	                      |	ДанныеДокумента.Ссылка = &Ссылка
	                      |	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	
	Если ДанныеЗаполнения.ДокументОснование = Неопределено Тогда 
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не требуется вводить Заявку на расходование денежных средств на основании документа %1, поскольку ввод доступен только на основании операций Поступления оплаты от клиента'"),
		ДокументОснование);
		ВызватьИсключение Текст;
	КонецЕсли;	
	
	ДанныеЗаполнения.Вставить("НазначениеПлатежа",
		 СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			 НСтр("ru = 'Возврат средств по договору %1 по переводу № %2 пользователя № %3, без НДС'"),
			 НСтр("ru = '<номер и дата Договора с Яндексом>'"),
			 Формат(ДанныеЗаполнения.ИдентификаторТранзакции, "ЧГ="),
			 НСтр("ru = '<номер, присвоенный Плательщику Оператором>'")));
	
	НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	НоваяСтрока.ВалютаВзаиморасчетов 	= Выборка.ВалютаВзаиморасчетов;
	НоваяСтрока.Сумма 					= Выборка.Сумма;
	НоваяСтрока.СуммаВзаиморасчетов 	= Выборка.Сумма;
	НоваяСтрока.Партнер 				= Выборка.Партнер;
	НоваяСтрока.СтатьяРасходов 			= Выборка.СтатьяРасходов; 
	НоваяСтрока.АналитикаРасходов 		= Выборка.АналитикаРасходов; 
	НоваяСтрока.СтавкаНДС 				= Справочники.СтавкиНДС.БезНДС;
	НоваяСтрока.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры


Процедура ИнициализироватьДокумент(Объект, ДанныеЗаполнения = Неопределено)
	
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		Или Не ДанныеЗаполнения.Свойство("ОчередностьПлатежа")
		Или Не ЗначениеЗаполнено(ДанныеЗаполнения.ОчередностьПлатежа) Тогда
		
		Если ДействуетФедеральныйЗакон345ФЗ(Объект.Дата) Тогда
			Объект.ОчередностьПлатежа = 5;
		Иначе
			Объект.ОчередностьПлатежа = 6;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация") Тогда
		Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
			ДанныеЗаполнения.Вставить("ПеречислениеВБюджет", Истина);
		ИначеЕсли ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
			ДанныеЗаполнения.Вставить("ПеречислениеВБюджет", Истина);
			ДанныеЗаполнения.Вставить("ВидПеречисленияВБюджет", Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж);
			Если Не ЗначениеЗаполнено(Объект.СтатусСоставителя) Тогда
				ДанныеЗаполнения.Вставить("СтатусСоставителя", "06");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.ПоказательОснования) Тогда
				Если Не ДанныеЗаполнения.Свойство("ПоказательОснования")
					ИЛИ (ДанныеЗаполнения.Свойство("ПоказательОснования")
					И Не ЗначениеЗаполнено(ДанныеЗаполнения.ПоказательОснования)) Тогда
						ДанныеЗаполнения.Вставить("ПоказательОснования", "ДЕ");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ХозяйственнаяОперация")
			И НЕ ЗначениеЗаполнено (Объект.ХозяйственнаяОперация)Тогда
			Объект.ХозяйственнаяОперация = ДанныеЗаполнения.ХозяйственнаяОперация;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("БанковскийСчет")
			И НЕ ЗначениеЗаполнено (Объект.БанковскийСчет)Тогда
			Объект.БанковскийСчет = ДанныеЗаполнения.БанковскийСчет;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Организация")
			И НЕ ЗначениеЗаполнено (Объект.Организация)Тогда
			Объект.Организация = ДанныеЗаполнения.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		РеквизитыПлательщика = ДенежныеСредстваСерверЛокализация.РеквизитыПлательщика(Объект);
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("ИННПлательщика") Тогда
			Объект.ИННПлательщика = РеквизитыПлательщика.ИННПлательщика;
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("КПППлательщика") Тогда
			Объект.КПППлательщика = РеквизитыПлательщика.КПППлательщика;
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("ТекстПлательщика") Тогда
			Объект.ТекстПлательщика = РеквизитыПлательщика.ТекстПлательщика;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация")
		И Не ДанныеЗаполнения.Свойство("ТипПлатежногоДокумента") Тогда
		
		Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств Тогда
			
			ДанныеЗаполнения.Вставить("ТипПлатежногоДокумента", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
			ДанныеЗаполнения.Вставить("ПроведеноБанком", Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//-- Локализация
#КонецОбласти

#Область Прочее

Процедура ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра, ИсточникиДанных) Экспорт
	
	//++ Локализация
	Если ИмяРегистра = "ЛимитыРасходаДенежныхСредств" Тогда
		ИсточникиДанных.Вставить("РасшифровкаПлатежа.Ведомость");
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

//++ Локализация

// Определяет свойства полей формы в зависимости от данных
//
// Возвращаемое значение:
//    ТаблицаЗначений - таблица с колонками Поля, Условие, Свойства.
//
Процедура ЗаполнитьНастройкиПолейФормы(Настройки) Экспорт
	
	Финансы = ФинансоваяОтчетностьСервер;
	
	#Область Шапка
	// ТипНалога
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ТипНалога");
	Элемент.Поля.Добавить("ЗаполнитьПоПредыдущемуПлатежу");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Элемент.Свойства.Вставить("Видимость");
	
	//
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПодобратьСчетаФактуры");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ОплатаНДСВБюджетПоОтдельнымОперациям", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	
	// НадписьРеквизитыПлательщика
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НадписьРеквизитыПлательщика");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	Финансы.НовыйОтбор(Элемент.Условие, "ТипПлатежногоДокумента", Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
	Элемент.Свойства.Вставить("Видимость");
	
	// УведомлениеОЗачисленииВалюты
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("УведомлениеОЗачисленииВалюты");
	Финансы.НовыйОтбор(Элемент.Условие, "ТипПлатежногоДокумента", Перечисления.ТипыПлатежныхДокументов.РаспоряжениеОбОбязательнойПродаже);
	Элемент.Свойства.Вставить("Видимость");
	
	// СПАРК
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГруппаИндексыСПАРКРиски");
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаЗаймов);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	
	Финансы.НовыйОтбор(Элемент.Условие, "ТипПлатежногоДокумента", Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользованиеСПАРКРазрешено", Истина);
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти
	
	#Область Реквизиты
	// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	Элемент.Поля.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаИ1 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ1, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(ГруппаИ1, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Ложь);
	
	ГруппаИ1 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ1, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	Финансы.НовыйОтбор(ГруппаИ1, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	Элемент.Поля.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьСинхронизациюДанных", Ложь);
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	Элемент.Свойства.Вставить("ОтметкаНезаполненного", Ложь);
	
	// ПеречислениеВБюджет
	ОтборОперацийПеречисленияВБюджет = Новый ОтборКомпоновкиДанных();
	ГруппаИли = Финансы.НовыйОтбор(ОтборОперацийПеречисленияВБюджет,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПеречислениеВБюджет");
	Элемент.Поля.Добавить("Декорация1");
	Финансы.СкопироватьОтбор(ОтборОперацийПеречисленияВБюджет, Элемент.Условие);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НадписьРеквизитыПлатежаВБюджет");
	Финансы.СкопироватьОтбор(ОтборОперацийПеречисленияВБюджет, Элемент.Условие);
	Финансы.НовыйОтбор(Элемент.Условие, "ПеречислениеВБюджет", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	// УИП
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ИдентификаторПлатежа");
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'УИП'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ИдентификаторПлатежа");
	Финансы.СкопироватьОтбор(ОтборОперацийПеречисленияВБюджет, Элемент.Условие);
	Финансы.НовыйОтбор(Элемент.Условие, "ПеречислениеВБюджет", Истина);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'УИН'"));
	
	// Код вида дохода
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КодВидаДохода");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ДействуетУказание2019_5286У", Истина);
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	Элемент.Свойства.Вставить("Видимость");
	
	// Код выплат
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КодВыплат");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	Элемент.Свойства.Вставить("Видимость");
	
	// Рублевый платеж
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ИдентификаторПлатежа");
	Элемент.Поля.Добавить("ВидПлатежа");
	Элемент.Поля.Добавить("ОчередностьПлатежа");
	Элемент.Поля.Добавить("КодВидаДохода");
	Элемент.Поля.Добавить("КодВыплат");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйПлатеж", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	// СтраницаВалютныйКонтроль
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтраницаВалютныйКонтроль");
	Элемент.Поля.Добавить("НадписьФайлыДляПередачиВБанк");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйКонтроль", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьВалютныеПлатежи", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КодВалютнойОперации");
	Элемент.Поля.Добавить("КодВалютнойОперацииНаименованиеПолное");
	Элемент.Поля.Добавить("ИнформацияДляВалютногоКонтроля");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйКонтроль", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьВалютныеПлатежи", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ЭтоТранзитныйСчет", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	// НДФЛПоВедомостям
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НДФЛПоВедомостям");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ТипНалога", Перечисления.ТипыНалогов.НДФЛ);
	Финансы.НовыйОтбор(ГруппаИли, "ТипНалога", Перечисления.ТипыНалогов.НДФЛСПревышения);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплаты", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	// КодВалютнойОперацииНаименованиеПолное
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КодВалютнойОперацииНаименованиеПолное");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.КодВалютнойОперацииЗаполнен", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйКонтроль", Истина);
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти
	
	
	#Область РасшифровкаПлатежа
	// Ведомость
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.Ведомость");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияВедомость");
	
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплаты", Истина);
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ГруппаИли1 = Финансы.НовыйОтбор(ГруппаИ,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли1, "ТипНалога", Перечисления.ТипыНалогов.НДФЛ);
	Финансы.НовыйОтбор(ГруппаИли1, "ТипНалога", Перечисления.ТипыНалогов.НДФЛСПревышения);

	Финансы.НовыйОтбор(ГруппаИ, "НДФЛПоВедомостям", Истина);
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти
	
	#Область Команды
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ФормаВыгрузитьФайлДляОбменаСБанком");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьЗаявкиНаРасходованиеДенежныхСредств", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплаты", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЗаполнитьОстаткамиНевыданныхСуммСотруднику");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти
	
КонецПроцедуры

// Подбирает последний платеж в бюджет по указанному контрагенту с указанной хозоперацией
// и заполняет реквизиты платежа.
//
// Параметры:
//    Объект - ДанныеФормыКоллекция - Данные документа
//    ИсключаяРеквизиты - Строка - Список имен реквизитов, разделенный запятыми, которые необходимо исключить из заполнения.
//
// Возвращаемое значение:
//    Структура, Неопределено - реквизиты платежа (для получения реквизитов, отсутствующих у объекта), либо Неопределено.
//
Функция ПодобратьРеквизитыПлатежаВБюджет(Объект, ИсключаяРеквизиты = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация)
		Или Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписаниеБезналичныхДенежныхСредств.ВидПлатежа,
	|	СписаниеБезналичныхДенежныхСредств.ОчередностьПлатежа,
	|	СписаниеБезналичныхДенежныхСредств.ВидПеречисленияВБюджет,
	|	СписаниеБезналичныхДенежныхСредств.СтатусСоставителя,
	|	СписаниеБезналичныхДенежныхСредств.КодБК,
	|	СписаниеБезналичныхДенежныхСредств.КодОКАТО,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательОснования,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательТипа,
	|	ВЫБОР КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне) ТОГДА
	|		СписаниеБезналичныхДенежныхСредств.ПоказательПериода
	|	КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств) ТОГДА
	|		0
	|	ИНАЧЕ """"
	|	КОНЕЦ КАК ПоказательПериода,
	|	ВЫБОР КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств) ТОГДА
	|		0
	|	ИНАЧЕ """"
	|	КОНЕЦ КАК ПоказательНомера,
	|	ВЫБОР КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств) ТОГДА
	|		0
	|	ИНАЧЕ """"
	|	КОНЕЦ КАК ПоказательДаты,
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента,
	|	СписаниеРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	ВЫБОР КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ СписаниеРасшифровкаПлатежа.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	СписаниеБезналичныхДенежныхСредств.ТипНалога КАК ТипНалога,
	|	СписаниеРасшифровкаПлатежа.АналитикаРасходов КАК АналитикаРасходов,
	|	СписаниеРасшифровкаПлатежа.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	СписаниеРасшифровкаПлатежа.Подразделение
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК СписаниеРасшифровкаПлатежа
	|	ПО
	|		СписаниеРасшифровкаПлатежа.Ссылка = СписаниеБезналичныхДенежныхСредств.Ссылка
	|	
	|ГДЕ
	|	СписаниеБезналичныхДенежныхСредств.Проведен
	|	И СписаниеБезналичныхДенежныхСредств.ПеречислениеВБюджет
	|	И СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И СписаниеБезналичныхДенежныхСредств.Контрагент = &Контрагент
	|	И СписаниеБезналичныхДенежныхСредств.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеБезналичныхДенежныхСредств.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Объект.ПеречислениеВБюджет = Истина;
		
		Если ЗначениеЗаполнено(ИсключаяРеквизиты) Тогда
			ИсключаяРеквизиты = ИсключаяРеквизиты + ", СтатьяРасходов, АналитикаРасходов, Подразделение";
		Иначе
			ИсключаяРеквизиты = "СтатьяРасходов, АналитикаРасходов, Подразделение";
		КонецЕсли;
		
		РеквизитыПлатежа = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат.Выгрузить()[0]);
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыПлатежа,, ИсключаяРеквизиты);

		
		Если Не Объект.РасшифровкаПлатежа.Количество() Тогда
			Объект.РасшифровкаПлатежа.Добавить();
		КонецЕсли;
		
		Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
			ЗаполнитьЗначенияСвойств(Объект.РасшифровкаПлатежа[0], РеквизитыПлатежа,
				"СтатьяРасходов, АналитикаРасходов, АналитикаАктивовПассивов, Подразделение");
		КонецЕсли;
		
		Если Не СтрНайти(ИсключаяРеквизиты, "СтатьяДвиженияДенежныхСредств") Тогда
			ЗаполнитьЗначенияСвойств(Объект.РасшифровкаПлатежа[0], РеквизитыПлатежа, "СтатьяДвиженияДенежныхСредств");
		КонецЕсли;
		
		
		Возврат РеквизитыПлатежа;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ДействуетФедеральныйЗакон345ФЗ(Период) Экспорт
	
	// Федеральный закон от 2 декабря 2013 г. N 345-ФЗ "О внесении изменения в статью 855 части второй Гражданского кодекса
	// Российской Федерации". Уточнена очередность списания денежных средств со счетов.
	
	ДатаВступленияВСилу = '20131214';
	
	Возврат Период >= ДатаВступленияВСилу Или (Период = '00010101' И ТекущаяДатаСеанса() >= ДатаВступленияВСилу);
	
КонецФункции

// Функция получает реквизиты документа для обмена с конфигурацией "Бухгалтерия предприятия".
//
// Параметры:
//	ДокументСсылка - ДокументСсылка - Документ, для которого необходимо получить реквизиты.
//
// Возвращаемое значение:
//	Структура - Структура реквизитов документа.
//
Функция РеквизитыДокументаДляОбменаСБухгалтерией(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет КАК КорреспондирующийСчет,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет <> """"
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.СтатьяРасходов.КорреспондирующийСчет КАК КорреспондирующийСчет,
	|	ДанныеДокумента.СтатьяРасходов КАК СтатьяРасходов
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СтатьяРасходов.КорреспондирующийСчет <> """"
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация =
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеРасходы)
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.НомерСтроки
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		КорреспондирующийСчет = Выборка.КорреспондирующийСчет;
		ХозяйственнаяОперация = Выборка.ХозяйственнаяОперация;
	Иначе
		КорреспондирующийСчет = "";
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = МассивРезультатов[1].Выбрать();
	Если Выборка.Следующий() Тогда
		КорреспондирующийСчет = Выборка.КорреспондирующийСчет;
		СтатьяРасходов = Выборка.СтатьяРасходов;
	Иначе
		СтатьяРасходов = Неопределено;
	КонецЕсли;
	
	ВидОперации = "ПрочееСписание";
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
		
		Если СтрНайти(КорреспондирующийСчет, "70") <> 0 Тогда
			ВидОперации = "ПеречислениеЗП";	
		КонецЕсли;
	
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств Тогда
		
		Если СтрНайти(КорреспондирующийСчет, "66") <> 0
		 ИЛИ СтрНайти(КорреспондирующийСчет, "67") <> 0 Тогда
			ВидОперации = "РасчетыПоКредитамИЗаймам";
			
		ИначеЕсли СтрНайти(КорреспондирующийСчет, "76") <> 0
		 ИЛИ СтрНайти(КорреспондирующийСчет, "60") <> 0
		 ИЛИ СтрНайти(КорреспондирующийСчет, "62") <> 0 Тогда
			ВидОперации = "ПрочиеРасчетыСКонтрагентами";
			
		ИначеЕсли СтрНайти(КорреспондирующийСчет, "70") <> 0 Тогда
			ВидОперации = "ПеречислениеЗП";	
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("ВидОперации, Счет, СтатьяРасходов",
		ВидОперации,
		КорреспондирующийСчет,
		СтатьяРасходов);
	
	Возврат СтруктураРеквизитов;
		
КонецФункции

// Процедура заполняет массивы реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Выбранная хозяйственная операция
//	МассивВсехРеквизитов - Массив - Массив всех имен реквизитов, зависимых от хозяйственной операции
//	МассивРеквизитовОперации - Массив - Массив имен реквизитов, используемых в выбранной хозяйственной операции.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации)
	
	ХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	ПеречислениеВБюджет = Объект.ПеречислениеВБюджет;
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("ВидПеречисленияВБюджет");
	МассивВсехРеквизитов.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	МассивВсехРеквизитов.Добавить("ИдентификаторПлатежа");
	МассивВсехРеквизитов.Добавить("КодБК");
	МассивВсехРеквизитов.Добавить("КодОКАТО");
	МассивВсехРеквизитов.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	МассивВсехРеквизитов.Добавить("ПеречислениеВБюджет");
	МассивВсехРеквизитов.Добавить("ПлатежиПо275ФЗ");
	МассивВсехРеквизитов.Добавить("ПоказательДаты");
	МассивВсехРеквизитов.Добавить("ПоказательНомера");
	МассивВсехРеквизитов.Добавить("ПоказательОснования");
	МассивВсехРеквизитов.Добавить("ПоказательПериода");
	МассивВсехРеквизитов.Добавить("ПоказательТипа");
	МассивВсехРеквизитов.Добавить("РегистрацияВНалоговомОргане");
	МассивВсехРеквизитов.Добавить("СтатусСоставителя");
	МассивВсехРеквизитов.Добавить("ТипНалога");
	МассивВсехРеквизитов.Добавить("ИННПлательщика");
	МассивВсехРеквизитов.Добавить("КПППлательщика");
	МассивВсехРеквизитов.Добавить("ТекстПлательщика");
	
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Ведомость");
	
	МассивРеквизитовОперации = Новый Массив;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
	
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("ИННПлательщика");
		МассивРеквизитовОперации.Добавить("КПППлательщика");
		МассивРеквизитовОперации.Добавить("ТекстПлательщика");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РегистрацияВНалоговомОргане");
		МассивРеквизитовОперации.Добавить("ИННПлательщика");
		МассивРеквизитовОперации.Добавить("КПППлательщика");
		МассивРеквизитовОперации.Добавить("ТекстПлательщика");
		МассивРеквизитовОперации.Добавить("ТипНалога");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Ведомость");
		Иначе
			МассивРеквизитовОперации.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			МассивРеквизитовОперации.Добавить("НомерВедомостиНаВыплатуЗарплаты");
		КонецЕсли;
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Ведомость");
		Иначе
			МассивРеквизитовОперации.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			МассивРеквизитовОперации.Добавить("НомерВедомостиНаВыплатуЗарплаты");
		КонецЕсли;
		
	КонецЕсли;
	
	ДопускаетсяПеречислениеВБюджет =
		(ДенежныеСредстваСерверЛокализация.МассивОперацийПеречисленияВБюджет().Найти(ХозяйственнаяОперация) <> Неопределено);
	
	Если ДопускаетсяПеречислениеВБюджет Тогда
		МассивРеквизитовОперации.Добавить("ПеречислениеВБюджет");
	КонецЕсли;
	
	Если ДопускаетсяПеречислениеВБюджет И (ПеречислениеВБюджет = Неопределено Или ПеречислениеВБюджет) Тогда
		МассивРеквизитовОперации.Добавить("ВидПеречисленияВБюджет");
		МассивРеквизитовОперации.Добавить("КодБК");
		МассивРеквизитовОперации.Добавить("КодОКАТО");
		МассивРеквизитовОперации.Добавить("ПоказательДаты");
		МассивРеквизитовОперации.Добавить("ПоказательНомера");
		МассивРеквизитовОперации.Добавить("ПоказательОснования");
		МассивРеквизитовОперации.Добавить("ПоказательПериода");
		МассивРеквизитовОперации.Добавить("ПоказательТипа");
		МассивРеквизитовОперации.Добавить("СтатусСоставителя");
	КонецЕсли;
	
КонецПроцедуры


Процедура ПроверитьИзменениеТипаПлатежногоДокумента(Объект)
	
	Если Не Объект.ЭтоНовый() Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДанныеДокумента.ТипПлатежногоДокумента КАК ТипПлатежногоДокумента
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|");
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ТипПлатежногоДокумента <> Объект.ТипПлатежногоДокумента Тогда
				Объект.Номер = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПроверкуВозвратовНеперечисленныхДенежныхСредств(Объект, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""1"" КАК Результат
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК Поступления
	|ГДЕ
	|	Поступления.Проведен
	|	И Поступления.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратНеперечисленныхДС)
	|	И Поступления.ДокументВыдачи = &Списание";
	
	Запрос.УстановитьПараметр("Списание", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'По документу уже введено поступление денежных средств с операцией ""Возврат неперечисленной зарплаты""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОплатуНДСПоСчетамФактурам(Объект, Проведен)
	
	СчетаФактуры = УчетНДСРФ.НоваяТаблицаСчетовФактур();
	Если СчетаФактуры.Количество() = 0 Тогда
		СтрокаСчетаФактуры = СчетаФактуры.Добавить();
		СтрокаСчетаФактуры.СчетФактура = Объект.ДокументОснование;
		СтрокаСчетаФактуры.СуммаОплаты = Объект.СуммаДокумента;
	КонецЕсли;
	
	РеквизитыДокументаОплаты = Новый Структура();
	РеквизитыДокументаОплаты.Вставить("ДатаПеречисленияВБюджет", Объект.ДатаПроведенияБанком);
	РеквизитыДокументаОплаты.Вставить("НомерДокумента",          Объект.НомерВходящегоДокумента);
	РеквизитыДокументаОплаты.Вставить("ДатаДокумента",           Объект.ДатаВходящегоДокумента);
	РеквизитыДокументаОплаты.Вставить("ТипНалога",               Объект.ТипНалога);
	
	УчетНДСРФ.ЗарегистрироватьОплатуНДСПоСчетамФактурам(СчетаФактуры, Объект.Ссылка, РеквизитыДокументаОплаты, Проведен);
	
КонецПроцедуры

//-- Локализация
#КонецОбласти

//++ Локализация
//-- Локализация

#КонецОбласти
