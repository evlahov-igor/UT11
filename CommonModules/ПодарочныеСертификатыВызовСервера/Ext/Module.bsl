
#Область ПрограммныйИнтерфейс

// Возвращает структуру с данными подарочного сертификата.
//
// Параметры:
//  ПодарочныйСертификат - СправочникСсылка.ПодарочныеСертификаты - Подарочный сертификат.
//  ВидПодарочногоСертификата - СправочникСсылка.ВидыПодарочныхСертификатов - Вид подарочного сертификата.
//
// Возвращаемое значение:
//  Структура - см. ПодарочныеСертификатыВызовСервера.ИнициализироватьОписаниеПодарочногоСертификата
//
Функция ПолучитьДанныеПодарочногоСертификата(ПодарочныйСертификат, ВидПодарочногоСертификата = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураДанныхКарты = ИнициализироватьОписаниеПодарочногоСертификата();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодарочныеСертификаты.Ссылка                                КАК Ссылка,
	|	ПодарочныеСертификаты.Наименование                          КАК Наименование,
	|	ПодарочныеСертификаты.МагнитныйКод                          КАК МагнитныйКод,
	|	ПодарочныеСертификаты.Штрихкод                              КАК Штрихкод,
	|	ПодарочныеСертификаты.Код                                   КАК СерийныйНомер,
	|	ЕСТЬNULL(ИсторияПодарочныхСертификатов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован)) КАК Статус,
	|	ЕСТЬNULL(ОстаткиДенежныхСредствНаПодарочныхСертификатах.СуммаОстаток, 0)                                           КАК Остаток,
	|	
	|	ПодарочныеСертификаты.Владелец                              КАК ВидПодарочногоСертификата,
	|	ПодарочныеСертификаты.Владелец.ПериодДействия               КАК ПериодДействия,
	|	ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия   КАК КоличествоПериодовДействия,
	|	ПодарочныеСертификаты.Владелец.Номинал                      КАК Номинал,
	|	ПодарочныеСертификаты.Владелец.Валюта                       КАК Валюта,
	|	ПодарочныеСертификаты.Владелец.ТипКарты                     КАК ТипКарты,
	|	ПодарочныеСертификаты.Владелец.СегментНоменклатуры          КАК СегментНоменклатуры,
	|
	|	ЕСТЬNULL(АктивацияПодарочныхСертификатов.Период, ДатаВремя(1,1,1)) КАК ДатаНачалаДействия,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ДЕНЬ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, НЕДЕЛЯ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, МЕСЯЦ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, КВАРТАЛ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ГОД, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ДЕКАДА, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ПОЛУГОДИЕ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		ИНАЧЕ АктивацияПодарочныхСертификатов.Период
	|	КОНЕЦ, ДатаВремя(1,1,1)) КАК ДатаОкончанияДействия
	|ИЗ
	|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних(&ТекущаяДата, ПодарочныйСертификат = &Ссылка) КАК ИсторияПодарочныхСертификатов
	|		ПО ИсторияПодарочныхСертификатов.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&ТекущаяДата, ПодарочныйСертификат = &Ссылка) КАК ОстаткиДенежныхСредствНаПодарочныхСертификатах
	|		ПО ОстаткиДенежныхСредствНаПодарочныхСертификатах.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов КАК АктивацияПодарочныхСертификатов
	|		ПО ПодарочныеСертификаты.Ссылка = АктивацияПодарочныхСертификатов.ПодарочныйСертификат
	|			И (АктивацияПодарочныхСертификатов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован))
	|ГДЕ
	|	ПодарочныеСертификаты.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)     КАК Ссылка,
	|	""""                                                        КАК Наименование,
	|	""""                                                        КАК МагнитныйКод,
	|	""""                                                        КАК Штрихкод,
	|	""""                                                        КАК СерийныйНомер,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован) КАК Статус,
	|	0                                                                  КАК Остаток,
	|	
	|	ВидыПодарочныхСертификатов.Ссылка                       КАК ВидПодарочногоСертификата,
	|	ВидыПодарочныхСертификатов.ПериодДействия               КАК ПериодДействия,
	|	ВидыПодарочныхСертификатов.КоличествоПериодовДействия   КАК КоличествоПериодовДействия,
	|	ВидыПодарочныхСертификатов.Номинал                      КАК Номинал,
	|	ВидыПодарочныхСертификатов.Валюта                       КАК Валюта,
	|	ВидыПодарочныхСертификатов.ТипКарты                     КАК ТипКарты,
	|	ВидыПодарочныхСертификатов.СегментНоменклатуры          КАК СегментНоменклатуры,
	|
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаНачалаДействия,
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаОкончанияДействия
	|ИЗ
	|	Справочник.ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов
	|ГДЕ
	|	ВидыПодарочныхСертификатов.Ссылка = &ВидПодарочногоСертификата
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ПодарочныйСертификат);
	Запрос.УстановитьПараметр("ВидПодарочногоСертификата", ВидПодарочногоСертификата);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанныхКарты, Выборка);
	КонецЕсли;
	
	Возврат СтруктураДанныхКарты;
	
КонецФункции

// Функция возвращает пустую структуру данных подарочного сертификата.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Ссылка - СправочникСсылка.ПодарочныеСертификаты - Подарочный сертификат.
//   * Штрихкод - Строка - Штрихкод.
//   * МагнитныйКод - Строка - Магнитный код.
//   * СерийныйНомер - Строка - Серийный номер.
//   * ВидПодарочногоСертификата - СправочникСсылка.ВидыПодарочныхСертификатов - Вид подарочного сертификата.
//   * Наименование - Строка - Наименование подарочного сертификата.
//   * ТипКарты - ПеречислениеСсылка.ТипыКарт - Тип карты.
//   * Статус - ПеречислениеСсылка.СтатусыПодарочныхСертификатов - Статус подарочного сертификата.
//   * Номинал - Число - Номинал подарочного сертификата.
//   * Остаток - Число - Остаток номинала подарочного сертификата.
//   * Валюта - СправочникСсылка.Валюты - Валюта подарочного сертификата.
//   * СегментНоменклатуры - СправочникСсылка.СегментыНоменклатуры - Сегмент номенклатуры подарочного сертификата.
//   * ПериодДействия - ПеречислениеСсылка.Периодичность - Период действия подарочного сертификата.
//   * КоличествоПериодовДействия - Число - Количество периодов действия.
//   * ДатаНачалаДействия - Дата - Дата начала действия.
//   * ДатаОкончанияДействия - Дата - Дата окончания действия.
//
Функция ИнициализироватьОписаниеПодарочногоСертификата() Экспорт
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("Ссылка");
	СтруктураДанных.Вставить("Штрихкод");
	СтруктураДанных.Вставить("МагнитныйКод");
	СтруктураДанных.Вставить("СерийныйНомер");
	СтруктураДанных.Вставить("ВидПодарочногоСертификата");
	СтруктураДанных.Вставить("Наименование");
	СтруктураДанных.Вставить("ТипКарты");
	СтруктураДанных.Вставить("Статус");
	СтруктураДанных.Вставить("Номинал");
	СтруктураДанных.Вставить("Остаток");
	СтруктураДанных.Вставить("Валюта");
	СтруктураДанных.Вставить("СегментНоменклатуры");
	СтруктураДанных.Вставить("ПериодДействия");
	СтруктураДанных.Вставить("КоличествоПериодовДействия");
	СтруктураДанных.Вставить("ДатаНачалаДействия");
	СтруктураДанных.Вставить("ДатаОкончанияДействия");
	
	Возврат СтруктураДанных;
	
КонецФункции

// Процедура записывает в базу данных подарочный сертификат на основании
// передаваемых данных о коде и виде сертификата.
//
// Параметры:
//  ВидПодарочногоСертификата - СправочникСсылка.ВидыПодарочныхСертификатов - Вид подарочного сертификата.
//  ТипКода - ПеречислениеСсылка.ТипыКодовКарт - Тип кода карты.
//  МагнитныйКод - Строка - Магнитный код.
//  Штрихкод - Строка - Штрихкод.
//
// Возвращаемое значение:
//  СправочникСсылка.ПодарочныеСертификаты - Зарегистрированный подарочный сертификат.
//
Функция ЗарегистрироватьПодарочныйСертификатУпрощенно(ВидПодарочногоСертификата, ТипКода, МагнитныйКод, Штрихкод) Экспорт
	
	СтруктураДанныхПодарочногоСертификата = ИнициализироватьОписаниеПодарочногоСертификата();
	СтруктураДанныхПодарочногоСертификата.ВидПодарочногоСертификата = ВидПодарочногоСертификата;
	Если ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.МагнитныйКод") Тогда
		СтруктураДанныхПодарочногоСертификата.МагнитныйКод = МагнитныйКод;
	ИначеЕсли ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод") Тогда
		СтруктураДанныхПодарочногоСертификата.Штрихкод = Штрихкод;
	КонецЕсли;
	
	Возврат ПодарочныеСертификатыСервер.ЗарегистрироватьПодарочныйСертификат(СтруктураДанныхПодарочногоСертификата);
	
КонецФункции

// Процедура записывает в базу данных подарочный сертификат на основании
// передаваемых данных о сертификате.
//
// Параметры:
//  СтруктураДанныхПодарочногоСертификата - см. ПодарочныеСертификатыВызовСервера.ИнициализироватьОписаниеПодарочногоСертификата
//
// Возвращаемое значение:
//  СправочникСсылка.ПодарочныеСертификаты - Зарегистрированный подарочный сертифика.
//
Функция ЗарегистрироватьПодарочныйСертификат(СтруктураДанныхПодарочногоСертификата) Экспорт
	
	Возврат ПодарочныеСертификатыСервер.ЗарегистрироватьПодарочныйСертификат(СтруктураДанныхПодарочногоСертификата);
	
КонецФункции

// Функция выполняет поиск подарочных сертификатов по коду.
//
// Параметры:
//  Форма - Форма - форма из которой произошло считывание.
//  Данные - Строка - считанный код.
//  ТипКодаКарты - ПеречислениеСсылка.ТипыКодовКарт - тип считанного кода.
//  Предобработка - Булево - необходимость специальной обработки входных данных (в случае использования считывателя
//                           магнитных карт).
//
// Возвращаемое значение:
//  Массив - Найденные подарочные сертификаты.
//
Функция ОбработатьПолученныйКодНаСервере(Данные, ТипКодаКарты, Предобработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныеПодарочныеСертификаты = Новый Массив;
	
	Если ТипКодаКарты = Перечисления.ТипыКодовКарт.МагнитныйКод Тогда
		Если Предобработка Тогда
			ТаблицаПодарочныеСертификаты = НайтиПодарочныеСертификатыПоДаннымСоСчитывателяМагнитныхКарт(Данные);
		Иначе
			ТаблицаПодарочныеСертификаты = НайтиПодарочныеСертификатыПоМагнитномуКоду(Данные);
		КонецЕсли;
	Иначе
		ТаблицаПодарочныеСертификаты = НайтиПодарочныеСертификатыПоШтрихкоду(Данные);
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТаблицаПодарочныеСертификаты.ЗарегистрированныеПодарочныеСертификаты Цикл
		
		НоваяСтрока = ИнициализироватьОписаниеПодарочногоСертификата();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		Если СтрокаТЧ.Статус <> Перечисления.СтатусыПодарочныхСертификатов.НеАктивирован Тогда 
			НоваяСтрока.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1, Статус: %2, Остаток: %3 %4'"), Строка(СтрокаТЧ.ВидПодарочногоСертификата), СтрокаТЧ.Статус, СтрокаТЧ.Остаток, СтрокаТЧ.Валюта);
		Иначе
			НоваяСтрока.Наименование = Строка(СтрокаТЧ.ВидПодарочногоСертификата);
		КонецЕсли;
		
		НайденныеПодарочныеСертификаты.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ТаблицаПодарочныеСертификаты.НеЗарегистрированныеПодарочныеСертификаты Цикл
		
		НоваяСтрока = ИнициализироватьОписаниеПодарочногоСертификата();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.Наименование = Строка(СтрокаТЧ.ВидПодарочногоСертификата);
		
		НайденныеПодарочныеСертификаты.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат НайденныеПодарочныеСертификаты;
	
КонецФункции

// Возвращает остаток средств на подарочном сертификате
// в валюте сертификата.
//
// Параметры:
//  ПодарочныйСертификат - СправочникСсылка.ПодарочныеСертификаты - Подарочный сертификат.
//  Дата                 - Дата - Дата на которую требуется получить остаток.
//
// Возвращаемое значение:
//  Число - Остаток средств на подарочном сертификате.
//
Функция ОстатокПодарочногоСертификата(ПодарочныйСертификат, Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК Остаток
	|ИЗ
	|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&Дата, ПодарочныйСертификат = &Ссылка) КАК ПодарочныеСертификатыОстатки
	|		ПО ПодарочныеСертификатыОстатки.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка
	|	
	|ГДЕ
	|	ПодарочныеСертификаты.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ПодарочныйСертификат);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Остаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#Область ПоискПодарочныхСертификатов

// Функция выполняет поиск подарочных сертификатов по данным, полученным из считывателя
// магнитных карт.
//
// Параметры:
//  Данные - Массив - Данные, полученные из считывателя магнитных карт.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ЗарегистрированныеПодарочныеСертификаты - Массив из см. ИнициализироватьОписаниеПодарочногоСертификата
//   * НеЗарегистрированныеПодарочныеСертификаты - Массив из см. ИнициализироватьОписаниеПодарочногоСертификата
//
Функция НайтиПодарочныеСертификатыПоДаннымСоСчитывателяМагнитныхКарт(Данные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗарегистрированныеПодарочныеСертификаты = Новый Массив;
	НеЗарегистрированныеПодарочныеСертификаты = Новый Массив;
	
	РасшифрованныеДанные = Данные[1][3];
	Если РасшифрованныеДанные <> Неопределено Тогда
		Для Каждого Структура Из РасшифрованныеДанные Цикл
			
			ШаблонМагнитнойКарты = Структура.Шаблон;
			КодКарты             = Данные[0];
			Для Каждого ДанныеПоля Из Структура.ДанныеДорожек Цикл
				Если ДанныеПоля.Поле = Перечисления.ПоляШаблоновМагнитныхКарт.Код Тогда
					КодКарты = ДанныеПоля.ЗначениеПоля;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ШаблоныКодовПодарочныхСертификатов.Ссылка                            КАК Ссылка,
			|	ШаблоныКодовПодарочныхСертификатов.Ссылка.ПериодДействия             КАК ПериодДействия,
			|	ШаблоныКодовПодарочныхСертификатов.Ссылка.КоличествоПериодовДействия КАК КоличествоПериодовДействия,
			|	ШаблоныКодовПодарочныхСертификатов.Ссылка.Номинал                    КАК Номинал,
			|	ШаблоныКодовПодарочныхСертификатов.Ссылка.Валюта                     КАК Валюта,
			|	ШаблоныКодовПодарочныхСертификатов.Ссылка.ТипКарты                   КАК ТипКарты,
			|	ШаблоныКодовПодарочныхСертификатов.Ссылка.СегментНоменклатуры        КАК СегментНоменклатуры
			|ПОМЕСТИТЬ ВидыПодарочныхСертификатов
			|ИЗ
			|	Справочник.ВидыПодарочныхСертификатов.ШаблоныКодовПодарочныхСертификатов КАК ШаблоныКодовПодарочныхСертификатов
			|ГДЕ
			|	ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаМагнитногоКода  <= &КодКарты
			|	И ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаМагнитногоКода >= &КодКарты
			|	И ШаблоныКодовПодарочныхСертификатов.ДлинаМагнитногоКода           = &ДлинаКода
			|	И ШаблоныКодовПодарочныхСертификатов.ШаблонМагнитнойКарты          = &ШаблонМагнитнойКарты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПодарочныеСертификаты.Ссылка                КАК Ссылка,
			|	ПодарочныеСертификаты.Наименование          КАК Наименование,
			|	ПодарочныеСертификаты.МагнитныйКод          КАК МагнитныйКод,
			|	ПодарочныеСертификаты.Штрихкод              КАК Штрихкод,
			|	ПодарочныеСертификаты.Код                   КАК СерийныйНомер,
			|	ЕСТЬNULL(ИсторияПодарочныхСертификатов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован)) КАК Статус,
			|	ЕСТЬNULL(ОстаткиДенежныхСредствНаПодарочныхСертификатах.СуммаОстаток, 0)                                           КАК Остаток,
			|	
			|	ВидыПодарочныхСертификатов.Ссылка                            КАК ВидПодарочногоСертификата,
			|	ВидыПодарочныхСертификатов.ПериодДействия                    КАК ПериодДействия,
			|	ВидыПодарочныхСертификатов.КоличествоПериодовДействия        КАК КоличествоПериодовДействия,
			|	ВидыПодарочныхСертификатов.Номинал                           КАК Номинал,
			|	ВидыПодарочныхСертификатов.Валюта                            КАК Валюта,
			|	ВидыПодарочныхСертификатов.ТипКарты                          КАК ТипКарты,
			|	ВидыПодарочныхСертификатов.СегментНоменклатуры               КАК СегментНоменклатуры,
			|	
			|	ЕСТЬNULL(АктивацияПодарочныхСертификатов.Период, ДатаВремя(1,1,1)) КАК ДатаНачалаДействия,
			|	ЕСТЬNULL(ВЫБОР
			|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
			|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ДЕНЬ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
			|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
			|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, НЕДЕЛЯ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
			|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
			|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, МЕСЯЦ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
			|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
			|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, КВАРТАЛ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
			|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
			|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ГОД, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
			|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
			|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ДЕКАДА, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
			|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
			|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ПОЛУГОДИЕ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
			|		ИНАЧЕ АктивацияПодарочныхСертификатов.Период
			|	КОНЕЦ, ДатаВремя(1,1,1)) КАК ДатаОкончанияДействия
			|	
			|ПОМЕСТИТЬ ПодарочныеСертификаты
			|ИЗ
			|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыПодарочныхСертификатов
			|		ПО ВидыПодарочныхСертификатов.Ссылка = ПодарочныеСертификаты.Владелец
			|		 И ПодарочныеСертификаты.МагнитныйКод = &КодКарты
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних(&ТекущаяДата) КАК ИсторияПодарочныхСертификатов
			|		ПО ИсторияПодарочныхСертификатов.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка
			|	
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&ТекущаяДата) КАК ОстаткиДенежныхСредствНаПодарочныхСертификатах
			|		ПО ОстаткиДенежныхСредствНаПодарочныхСертификатах.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов КАК АктивацияПодарочныхСертификатов
			|		ПО ПодарочныеСертификаты.Ссылка = АктивацияПодарочныхСертификатов.ПодарочныйСертификат
			|			И (АктивацияПодарочныхСертификатов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	1                                           КАК Порядок,
			|	ПодарочныеСертификаты.Ссылка                КАК Ссылка,
			|	ПодарочныеСертификаты.Наименование          КАК Наименование,
			|	ПодарочныеСертификаты.МагнитныйКод          КАК МагнитныйКод,
			|	ПодарочныеСертификаты.Штрихкод              КАК Штрихкод,
			
			|	ПодарочныеСертификаты.СерийныйНомер         КАК СерийныйНомер,
			|	ПодарочныеСертификаты.ДатаНачалаДействия    КАК ДатаНачалаДействия,
			|	ПодарочныеСертификаты.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
			|	ПодарочныеСертификаты.Статус                КАК Статус,
			|	ПодарочныеСертификаты.Остаток               КАК Остаток,
			|	
			|	ПодарочныеСертификаты.ВидПодарочногоСертификата         КАК ВидПодарочногоСертификата,
			|	ПодарочныеСертификаты.ПериодДействия                    КАК ПериодДействия,
			|	ПодарочныеСертификаты.КоличествоПериодовДействия        КАК КоличествоПериодовДействия,
			|	ПодарочныеСертификаты.Номинал                           КАК Номинал,
			|	ПодарочныеСертификаты.Валюта                            КАК Валюта,
			|	ПодарочныеСертификаты.ТипКарты                          КАК ТипКарты,
			|	ПодарочныеСертификаты.СегментНоменклатуры               КАК СегментНоменклатуры
			|ИЗ
			|	ПодарочныеСертификаты
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	2                                                         КАК Порядок,
			|	ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)   КАК Ссылка,
			|	Неопределено                                              КАК Наименование,
			|	&КодКарты                                                 КАК МагнитныйКод,
			|	""""                                                      КАК Штрихкод,
			|	Неопределено                                                      КАК СерийныйНомер,
			|	Неопределено                                                      КАК ДатаНачалаДействия,
			|	Неопределено                                                      КАК ДатаОкончанияДействия,
			|	ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.ПустаяСсылка) КАК Статус,
			|	0                                                                 КАК Остаток,
			|	
			|	ВидыПодарочныхСертификатов.Ссылка                            КАК ВидПодарочногоСертификата,
			|	ВидыПодарочныхСертификатов.ПериодДействия                    КАК ПериодДействия,
			|	ВидыПодарочныхСертификатов.КоличествоПериодовДействия        КАК КоличествоПериодовДействия,
			|	ВидыПодарочныхСертификатов.Номинал                           КАК Номинал,
			|	ВидыПодарочныхСертификатов.Валюта                            КАК Валюта,
			|	ВидыПодарочныхСертификатов.ТипКарты                          КАК ТипКарты,
			|	ВидыПодарочныхСертификатов.СегментНоменклатуры               КАК СегментНоменклатуры
			|ИЗ
			|	ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов
			|ГДЕ
			|	(НЕ ВидыПодарочныхСертификатов.Ссылка В
			|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					Т.ВидПодарочногоСертификата
			|				ИЗ
			|					ПодарочныеСертификаты КАК Т))
			|УПОРЯДОЧИТЬ ПО
			|	Порядок ВОЗР
			|");
			
			Запрос.УстановитьПараметр("ШаблонМагнитнойКарты", ШаблонМагнитнойКарты);
			Запрос.УстановитьПараметр("КодКарты",             КодКарты);
			Запрос.УстановитьПараметр("ДлинаКода",            СтрДлина(КодКарты));
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
			
				Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
					НоваяСтрока = ИнициализироватьОписаниеПодарочногоСертификата();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					ЗарегистрированныеПодарочныеСертификаты.Добавить(НоваяСтрока);
				Иначе
					НоваяСтрока = ИнициализироватьОписаниеПодарочногоСертификата();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НеЗарегистрированныеПодарочныеСертификаты.Добавить(НоваяСтрока);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура("ЗарегистрированныеПодарочныеСертификаты, НеЗарегистрированныеПодарочныеСертификаты");
	ВозвращаемоеЗначение.ЗарегистрированныеПодарочныеСертификаты   = ЗарегистрированныеПодарочныеСертификаты;
	ВозвращаемоеЗначение.НеЗарегистрированныеПодарочныеСертификаты = НеЗарегистрированныеПодарочныеСертификаты;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция выполняет поиск подарочных сертификатов по штрихкоду.
//
// Параметры
//  Штрихкод - Строка - Штрихкод.
//
// Возвращаемое значение:
//  см. ПодарочныеСертификатыСервер.НайтиПодарочныеСертификаты
//
Функция НайтиПодарочныеСертификатыПоШтрихкоду(Штрихкод) Экспорт
	
	Возврат ПодарочныеСертификатыСервер.НайтиПодарочныеСертификаты(Штрихкод, Перечисления.ТипыКодовКарт.Штрихкод);
	
КонецФункции

// Функция выполняет поиск подарочных сертификатов по магнитному коду.
//
// Параметры:
//  МагнитныйКод - Строка - Магнитный код.
//
// Возвращаемое значение:
// 	см. ПодарочныеСертификатыСервер.НайтиПодарочныеСертификаты
//
Функция НайтиПодарочныеСертификатыПоМагнитномуКоду(МагнитныйКод) Экспорт
	
	Возврат ПодарочныеСертификатыСервер.НайтиПодарочныеСертификаты(МагнитныйКод, Перечисления.ТипыКодовКарт.МагнитныйКод);
	
КонецФункции

#КонецОбласти

#КонецОбласти
