////////////////////////////////////////////////////////////////////////////////
// Модуль "Обеспечение в документах (Сервер)", содержит процедуры и функции
// обслуживающие работу механизма резервирования и обеспечения потребностей в документах на сервере.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Если не запущено фоновое задание распределения запасов то запускает его.
Процедура ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов() Экспорт

	Если РаспределениеЗапасов.БлокироватьРаспределениеЗапасов() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", Метаданные.РегламентныеЗадания.РаспределениеЗапасов.Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ТекущиеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если ТекущиеФоновыеЗадания.Количество() = 0 Тогда
		
		Попытка
			ФоновыеЗадания.Выполнить(
				"РаспределениеЗапасов.ВыполнитьРаспределениеВФоне",
				Новый Массив(),
				Метаданные.РегламентныеЗадания.РаспределениеЗапасов.Ключ,
				НСтр("ru = 'Выполняется распределение запасов'"));
		Исключение
			// Если задание уже запущено.
		КонецПопытки
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет склад и дату отгрузки если в строках заказа установили вариант обеспечения ПередаРанее.
//  Параметры:
//   Изменения - ТаблицаЗначений - таблица с изменениями после заполнения варианта обеспечения.
//
Процедура ЗаполнитьСкладИДатуОтгрузкиПриИзмененииПереданРанее(Изменения) Экспорт
	
	НайденныеСтроки = Изменения.НайтиСтроки(Новый Структура("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.ПереданРанее));
	Для Каждого Элемент Из НайденныеСтроки Цикл
		Элемент.Строка.Склад = Справочники.Склады.ПустаяСсылка();
		Элемент.Строка.ДатаОтгрузки = '00010101';
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Ссылка - ЛюбаяСсылка - Ссылка на заказ, в который встроены команды создания корректировки назначения
//  ДополнительныеПараметры - Структура - Струкура с полями:
//  * ИдентификаторВХранилище - Строка - Уникальный идентификатор, чтобы поместить товары документа в хранилище
//  * ЭтоСнятиеРезерва - Булево - Истина, если данные нужно получить для операции снятия резерва, Ложь, если для операции резервирования
//  Возвращаемое значение:
//   Структура - Данные документа, необходмые для выполнения команды создания корректировки назначения
Функция ДанныеДокументаДляСозданияКорректировкиНазначения(Ссылка, ДополнительныеПараметры) Экспорт
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	Возврат МенеджерДокумента.ДанныеДокументаДляСозданияКорректировкиНазначения(Ссылка, ДополнительныеПараметры);
КонецФункции

Функция ВыполнитьДействиеДляНесколькихТиповЗаказов(Параметры) Экспорт
	
	ПараметрыПроцедуры = Новый Структура();
	
	ПараметрыПроцедуры.Вставить("КодДействия", Параметры.КодДействия);
	ПараметрыЗаполнения0 = Неопределено;
	Если Параметры.НуженВопрос Тогда
		ПараметрыЗаполнения0 = Новый Структура();
		ПараметрыЗаполнения0.Вставить("СнятьФлагОтгружатьОднойДатой", Параметры.СнятьФлагОтгружатьОднойДатой);
		ПараметрыЗаполнения0.Вставить("ЗаполнитьДатуОтгрузкиОднойДатой", Параметры.ЗаполнитьДатуОтгрузкиОднойДатой);
	КонецЕсли;
	ПараметрыПроцедуры.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения0);
	
	ПараметрыПроцедуры.Вставить("Заказы", Параметры.ПараметрыВыполнения[0].Заказы);
	ПараметрыПроцедуры.Вставить("ПараметрыВстраивания", Параметры.ПараметрыВыполнения[0].ПараметрыВстраивания);
	
	РезультатВыполненияДействий = ВыполнитьДействиеДляЗаказовПослеВопроса(ПараметрыПроцедуры);
	
	ПараметрыПроцедуры.Вставить("КодДействия", Параметры.КодДействия);
	ПараметрыЗаполнения1 = Неопределено;
	Если Параметры.НуженВопрос Тогда
		ПараметрыЗаполнения1 = Новый Структура();
		ПараметрыЗаполнения1.Вставить("СнятьФлагОтгружатьОднойДатой", Параметры.СнятьФлагОтгружатьОднойДатой);
		ПараметрыЗаполнения1.Вставить("ЗаполнитьДатуОтгрузкиОднойДатой", Параметры.ЗаполнитьДатуОтгрузкиОднойДатой);
	КонецЕсли;
	ПараметрыПроцедуры.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения1);
	
	ПараметрыПроцедуры.Вставить("Заказы", Параметры.ПараметрыВыполнения[1].Заказы);
	ПараметрыПроцедуры.Вставить("ПараметрыВстраивания", Параметры.ПараметрыВыполнения[1].ПараметрыВстраивания);
	
	РезультатВыполненияДействийТекущий = ВыполнитьДействиеДляЗаказовПослеВопроса(ПараметрыПроцедуры);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатВыполненияДействий.СписокОшибок,
		РезультатВыполненияДействийТекущий.СписокОшибок);
	РезультатВыполненияДействий.КоличествоОбработано = РезультатВыполненияДействий.КоличествоОбработано
		+ РезультатВыполненияДействийТекущий.КоличествоОбработано;
	Возврат РезультатВыполненияДействий;
	
КонецФункции

// Дополняет структуру результата выполнения действий обеспечения в списке , используется если список обрабатывается
// порциями.
//
// Параметры:
//  Приемник - см. ОбеспечениеВДокументахВызовСервера.ВыполнитьДействиеВСпискеЗаказов
//  Источник - см. ОбеспечениеВДокументахВызовСервера.ВыполнитьДействиеВСпискеЗаказов
//
Процедура ДополнитьРезультатыВыполненияДействийВСпискеЗаказов(Приемник, Источник) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Приемник.СписокОшибок, Источник.СписокОшибок);
	Приемник.КоличествоОбработано = Приемник.КоличествоОбработано + Источник.КоличествоОбработано;
	
КонецПроцедуры

// Обработчик команды заполнения флага "Обособленно" в форме заказа на отгрузку.
//
// Параметры:
//  КодДействия - Строка - код выполняемого действия:
//                         "ФЛАГ_ОБОСОБЛЕННО", "ФЛАГ_НЕОБОСОБЛЕННО", "ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ",
//                         "ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ", "ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ", "ДЕЙСТВИЕ_ОТГРУЗИТЬ".
//  Форма - ФормаКлиентскогоПриложения - форма в табличной части которой нужно выполнить команду.
//  ВыделенныеСтроки - Массив - содержит идентификаторы строк коллекции для выполнения действия.
//  ПропускатьОтгрузить - Булево - Истина, если в стоках с действием "Отгрузить" команду выполнять не нужно.
// 
// Возвращаемое значение:
//  Структура - структура содержащая таблицу изменений.
//
Функция УстановитьДействиеОбособленно(КодДействия, Форма, ВыделенныеСтроки, ПропускатьОтгрузить = Истина) Экспорт
	
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	КоллекцияНаФорме = ОбеспечениеВДокументахКлиентСервер.КоллекцияНаФорме(Форма, ПараметрыВстраивания);
	
	ТаблицаИзменений = Новый ТаблицаЗначений();
	ТаблицаИзменений.Колонки.Добавить("Идентификатор");
	ТаблицаИзменений.Колонки.Добавить("Строка");
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		Строка = КоллекцияНаФорме.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если КодДействия = "ФЛАГ_ОБОСОБЛЕННО" Тогда
			
			Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара
					Или Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
					Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить И ПропускатьОтгрузить Тогда
						
						Продолжить;
						
			КонецЕсли;
			Строка.Обособленно = Истина;
			Строка.ВариантОбеспечения = ОбеспечениеВДокументахКлиентСервер.ОбособленноПриИзменении(
				Строка.Обособленно,
				Строка.ВариантОбеспечения,
				Строка.ТипНоменклатуры);
			
			НоваяСтрока = ТаблицаИзменений.Добавить();
			НоваяСтрока.Строка = Строка;
			НоваяСтрока.Идентификатор = Строка.ПолучитьИдентификатор();
			
		ИначеЕсли КодДействия = "ФЛАГ_НЕОБОСОБЛЕННО" Тогда
			
			Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить И ПропускатьОтгрузить Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Строка.Обособленно = Ложь;
			Строка.ВариантОбеспечения = ОбеспечениеВДокументахКлиентСервер.ОбособленноПриИзменении(
				Строка.Обособленно,
				Строка.ВариантОбеспечения,
				Строка.ТипНоменклатуры);
			
			НоваяСтрока = ТаблицаИзменений.Добавить();
			НоваяСтрока.Строка = Строка;
			НоваяСтрока.Идентификатор = Строка.ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура("ТаблицаИзменений", ТаблицаИзменений);
	Возврат Результат;
	
КонецФункции

// Конструктор структуры результата установки действий в заказе
// 
// Возвращаемое значение:
//  Структура - структура с полями
//   * АдресИзменений - Строка - адрес изменений для переноса в табличную часть.
//   * ЗадаватьВопросОЗаполненииЦелымиУпаковками - Булево - признак необходимости задать вопрос об отгрузке целыми
//                                                          либо дробными упаковками.
//   * СнятьФлагОтгружатьОднойДатой - Булево - необходимость снять флаг Отгружать одной датой, исходя из изменений.
//   * СнятьФлагОтгружатьОднойДатойЦелымиУпаковками - Булево - необходимость снять флаг Отгружать одной датой,
//                                                             исходя из изменений при заполнении целыми упаковками.
//   * ЗаполнитьДатуОтгрузкиОднойДатой - Булево - признак необходимости заполнить дату отгрузки в шапке заказа.
//   * ЗаполнитьДатуОтгрузкиОднойДатойЦелымиУпаковками - Булево - признак необходимости заполнить дату отгрузки в 
//                                                                шапке заказа при заполнении целыми упаковками.
//   * ДатаОтгрузкиВсехСтрокОднойДатой - Дата - дата отгрузки из шапки заказа, если таковая имеется.
//   * ДатаОтгрузкиЗаполненныхСтрок  - Дата - дата отгрузки измененных строк.
//
Функция ОбеспечениеУстановитьДействиеСтруктураРезультата() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("АдресИзменений",                                  Неопределено);
	Результат.Вставить("ЗадаватьВопросОЗаполненииЦелымиУпаковками",       Ложь);
	Результат.Вставить("СнятьФлагОтгружатьОднойДатой",                    Ложь);
	Результат.Вставить("СнятьФлагОтгружатьОднойДатойЦелымиУпаковками",    Ложь);
	Результат.Вставить("ЗаполнитьДатуОтгрузкиОднойДатой",                 Ложь);
	Результат.Вставить("ЗаполнитьДатуОтгрузкиОднойДатойЦелымиУпаковками", Ложь);
	Результат.Вставить("ДатаОтгрузкиВсехСтрокОднойДатой",                 Неопределено);
	Результат.Вставить("ДатаОтгрузкиЗаполненныхСтрок",                    Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Обработчик команды установки действия в форме заказа на отгрузку.
//
// Параметры:
//  КодДействия - Строка - код выполняемого действия:
//                         "ФЛАГ_ОБОСОБЛЕННО", "ФЛАГ_НЕОБОСОБЛЕННО", "ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ",
//                         "ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ", "ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ", "ДЕЙСТВИЕ_ОТГРУЗИТЬ",
//                         "ДЕЙСТВИЕ_ПЕРЕДАНРАНЕЕ".
//  Форма - ФормаКлиентскогоПриложения - форма в табличной части которой нужно выполнить команду.
//  ВыделенныеСтроки - Массив - содержит идентификаторы строк коллекции для выполнения действия.
//
// Возвращаемое значение:
//  см. ОбеспечениеУстановитьДействиеСтруктураРезультата
//
Функция УстановитьДействие(КодДействия, Форма, ВыделенныеСтроки) Экспорт
	
	Изменения = ИзмененияДляУстановкиДействий(КодДействия, Форма, ВыделенныеСтроки);
	
	Результат = ОбеспечениеУстановитьДействиеСтруктураРезультата();
	Результат.Вставить("ТаблицаИзменений", Неопределено);
	
	НужноЗадатьВопрос = Изменения.ТаблицаИзмененийЦелымиУпаковками <> Неопределено
		Или Изменения.СнятьФлагОтгружатьОднойДатой;
	
	Если Не НужноЗадатьВопрос Тогда
		
		УстановитьДействияИзТаблицы(Форма, Изменения.ТаблицаИзменений);
		Результат.ТаблицаИзменений = Изменения.ТаблицаИзменений;
		Результат.ЗаполнитьДатуОтгрузкиОднойДатой = Изменения.ЗаполнитьДатуОтгрузкиОднойДатой;
		
	Иначе
		
		АдресИзменений = ПоместитьВоВременноеХранилище(Изменения, Форма.УникальныйИдентификатор);
		Результат.АдресИзменений = АдресИзменений;
		Результат.ЗадаватьВопросОЗаполненииЦелымиУпаковками = Изменения.ТаблицаИзмененийЦелымиУпаковками <> Неопределено;
		ЗаполнитьЗначенияСвойств(Результат, Изменения,
			"СнятьФлагОтгружатьОднойДатой,
			|СнятьФлагОтгружатьОднойДатойЦелымиУпаковками,
			|ЗаполнитьДатуОтгрузкиОднойДатой,
			|ЗаполнитьДатуОтгрузкиОднойДатойЦелымиУпаковками,
			|ДатаОтгрузкиВсехСтрокОднойДатой,
			|ДатаОтгрузкиЗаполненныхСтрок");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработчик команды установки действия в форме заказа на отгрузку.
//
// Параметры:
//  Ответ - Строка - условное обозначение выбора пользователя при ответе на вопросы при заполнении обеспечения
//                   "ДРОБНЫМИ_УПАКОВКАМИ", "ОТГРУЖАТЬ_ЧАСТЯМИ_ДРОБНЫМИ_УПАКОВКАМИ", "ОТГРУЖАТЬ_ОДНОЙДАТОЙ_ДРОБНЫМИ_УПАКОВКАМИ"
//                   "ЦЕЛЫМИ_УПАКОВКАМИ", "ОТГРУЖАТЬ_ЧАСТЯМИ_ЦЕЛЫМИ_УПАКОВКАМИ", "ОТГРУЖАТЬ_ОДНОЙДАТОЙ_ЦЕЛЫМИ_УПАКОВКАМИ"
//  Результат - см. ОбеспечениеУстановитьДействиеСтруктураРезультата
//  Форма - ФормаКлиентскогоПриложения - форма в табличной части которой нужно выполнить команду заполнения варианта обеспечения.
//
// Возвращаемое значение:
//  см. ОбеспечениеУстановитьДействиеСтруктураРезультата
//
Функция УстановитьДействиеПослеВопроса(Ответ, Результат, Форма) Экспорт
	
	Изменения = ПолучитьИзВременногоХранилища(Результат.АдресИзменений);
	
	УдалитьИзВременногоХранилища(Результат.АдресИзменений);
	
	ТаблицаИзменений = Неопределено;
	Если Ответ = "ДРОБНЫМИ_УПАКОВКАМИ"
			Или Ответ = "ОТГРУЖАТЬ_ЧАСТЯМИ_ДРОБНЫМИ_УПАКОВКАМИ"
			Или Ответ = "ОТГРУЖАТЬ_ОДНОЙДАТОЙ_ДРОБНЫМИ_УПАКОВКАМИ" Тогда
		ТаблицаИзменений = Изменения.ТаблицаИзменений;
	Иначе
		ТаблицаИзменений = Изменения.ТаблицаИзмененийЦелымиУпаковками;
	КонецЕсли;
	
	УстановитьДействияИзТаблицы(Форма, ТаблицаИзменений);
	
	СнятьФлагОтгружатьОднойДатой = Ответ = "ОТГРУЖАТЬ_ЧАСТЯМИ_ДРОБНЫМИ_УПАКОВКАМИ"
		Или Ответ = "ОТГРУЖАТЬ_ЧАСТЯМИ_ЦЕЛЫМИ_УПАКОВКАМИ";
		
	ЗаполнитьДатуОтгрузкиОднойДатой = Результат.ЗаполнитьДатуОтгрузкиОднойДатой;
	Если Ответ = "ЦЕЛЫМИ_УПАКОВКАМИ" Или Ответ = "ОТГРУЖАТЬ_ЧАСТЯМИ_ЦЕЛЫМИ_УПАКОВКАМИ" Тогда
		ЗаполнитьДатуОтгрузкиОднойДатой = Результат.ЗаполнитьДатуОтгрузкиОднойДатойЦелымиУпаковками;
	КонецЕсли;
	ЗаполнитьДатуОтгрузкиОднойДатой = ЗаполнитьДатуОтгрузкиОднойДатой
		ИЛИ Ответ = "ОТГРУЖАТЬ_ОДНОЙДАТОЙ_ДРОБНЫМИ_УПАКОВКАМИ"
		ИЛИ Ответ = "ОТГРУЖАТЬ_ОДНОЙДАТОЙ_ЦЕЛЫМИ_УПАКОВКАМИ";
		
		
	СтруктураРезультата = Новый Структура();
	СтруктураРезультата.Вставить("ТаблицаИзменений",                ТаблицаИзменений);
	СтруктураРезультата.Вставить("СнятьФлагОтгружатьОднойДатой",    СнятьФлагОтгружатьОднойДатой);
	СтруктураРезультата.Вставить("ЗаполнитьДатуОтгрузкиОднойДатой", ЗаполнитьДатуОтгрузкиОднойДатой);
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Вызывается из обработчика получения данных выбора перечисления "Варианты обеспечения".
// Предназначена для получения необходимых данных на сервере.
//
// Параметры:
//  Параметры - Структура - структура параметров для получения серверных данных.
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения номенклатуры в строке.
//   * ТребуетсяУказаниеСерийВСтроке - Булево - необходимость указания серий для номенклатуры и склада заказа.
//   * ДопустимоеОтклонение - Число - допустимое отклонение мерных единиц измерения, если номенклатура мерная.
//   * КоэффициентУпаковки - Число - коэффициент упаковки указанной в строке.
//
Функция ОбработкаПолученияДанныхВыбораВариантаОбеспечения(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Номенклатура, "ЕдиницаИзмерения");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Параметры.Номенклатура);
	Запрос.УстановитьПараметр("Склад",        Параметры.Склад);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА КАК ТребуетсяУказаниеСерийВСтроке
		|ИЗ
		|	Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
		|ГДЕ
		|	ПолитикиУчетаСерий.Склад = &Склад
		|		И ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
		|		И (ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
		|			ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки)";
	
	ТребуетсяУказаниеСерийВСтроке = Не Запрос.Выполнить().Пустой();
	
	ДопустимоеОтклонение = Константы.ДопустимоеОтклонениеПриОкругленииКоличества.Получить();
	ЭтоМернаяЕдиница = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Параметры.Упаковка, "");
	КоэффициентУпаковки = 1;
	Если ЗначениеЗаполнено(Параметры.Упаковка) Тогда
		КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
			Параметры.Упаковка,
			Параметры.Номенклатура);
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	Результат.Вставить("ТребуетсяУказаниеСерийВСтроке", ТребуетсяУказаниеСерийВСтроке);
	Результат.Вставить("ДопустимоеОтклонение", ДопустимоеОтклонение * ?(ЭтоМернаяЕдиница, 1, 0));
	Результат.Вставить("КоэффициентУпаковки", 1 / КоэффициентУпаковки);
	
	Возврат Результат;
	
КонецФункции

// Обработчик изменения варианта обеспечения в строке заказа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  ТекущаяСтрока - Число - идентификатор строки документа.
//  
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица изменений для переноса в документ.
//
Функция ВариантОбеспеченияПриИзменении(Форма, ТекущаяСтрока) Экспорт
	
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	КоллекцияНаФорме = ОбеспечениеВДокументахКлиентСервер.КоллекцияНаФорме(Форма, ПараметрыВстраивания);
	
	ТекущиеДанные = КоллекцияНаФорме.НайтиПоИдентификатору(ТекущаяСтрока);
	ВариантОбеспеченияВыбранноеЗначение = ПараметрыВстраивания.СлужебныеПараметры.ВариантОбеспеченияВыбранноеЗначение;
	
	ТаблицаИзменений = Новый ТаблицаЗначений();
	ТаблицаИзменений.Колонки.Добавить("Идентификатор");
	ТаблицаИзменений.Колонки.Добавить("Строка");
	ТаблицаИзменений.Колонки.Добавить("ВариантОбеспечения");
	
	НоваяСтрока = ТаблицаИзменений.Добавить();
	НоваяСтрока.Идентификатор = ТекущаяСтрока;
	НоваяСтрока.ВариантОбеспечения = ВариантОбеспеченияВыбранноеЗначение.ВариантОбеспечения;
	
	Если ВариантОбеспеченияВыбранноеЗначение.РазбитьСтроку Тогда
		
		ТаблицаИзменений.Колонки.Добавить("КоличествоУпаковок");
		
		КоличествоУпаковок = ТекущиеДанные.КоличествоУпаковок - ТекущиеДанные.Доступно;
		
		НоваяСтрока.КоличествоУпаковок = ТекущиеДанные.Доступно;
		
		НоваяСтрока = ТаблицаИзменений.Добавить();
		НоваяСтрока.Идентификатор = ТекущаяСтрока;
		НоваяСтрока.ВариантОбеспечения = ПараметрыВстраивания.СлужебныеПараметры.ВариантОбеспеченияДоИзменения;
		НоваяСтрока.КоличествоУпаковок = КоличествоУпаковок;
		
	КонецЕсли;
	УстановитьДействияИзТаблицы(Форма, ТаблицаИзменений);
	ПараметрыВстраивания.СлужебныеПараметры.ВариантОбеспеченияВыбранноеЗначение = Неопределено;
	
	Возврат ТаблицаИзменений;
	
КонецФункции

// Пересчитывает количество единиц, исходя из количества упаковок в переданной таблице, содержащей ссылки на строки
// таблицы в которых необходимо выполнить пересчет.
// 
// Параметры:
//  Изменения - ТаблицаЗначений -
//   * Строка - ДанныеФормыЭлементКоллекции - строка табличной части, в которой нужно выполнить пересчет.
//
Процедура ПересчитатьКоличествоЕдиниц(Изменения) Экспорт
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоЕдиниц");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	Для Каждого Изменение Из Изменения Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Изменение.Строка, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик команды установки действия в форме заказа на отгрузку без переноса результата в документ.
//
// Параметры:
//  КодДействия - Строка - код выполняемого действия:
//                         "ФЛАГ_ОБОСОБЛЕННО", "ФЛАГ_НЕОБОСОБЛЕННО", "ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ",
//                         "ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ", "ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ", "ДЕЙСТВИЕ_ОТГРУЗИТЬ".
//  Форма - ФормаКлиентскогоПриложения - форма в табличной части которой нужно выполнить команду.
//  ВыделенныеСтроки - Массив - содержит идентификаторы строк коллекции для выполнения действия.
//
// Возвращаемое значение:
//  Структура - структура содержащая таблицы для заполнения варианта обеспечения в строках а также поля,
//              необходимые для дальнейшей обработки и принятия решения об отгрузке одной или разными датами.
//
Функция ИзмененияДляУстановкиДействий(КодДействия, Форма, ВыделенныеСтроки) Экспорт
	
	// Инициализация параметров и текста запроса, получение временной таблицы данных документа
	// для операции отражения и временной таблицы отражения.
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	Таблицы = ПолучитьИзВременногоХранилища(ПараметрыВстраивания.СлужебныеПараметры.АдресТаблицыДанныхФормы);
	ЗаполнитьТаблицыИзДанныхФормы(Таблицы, Форма, Неопределено);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДобавитьВременнуюТаблицуДанныхДокумента(Запрос.МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания);
	ДобавитьВременнуюТаблицуДанныхДокументаДляВыделенныхСтрок(Запрос, ВыделенныеСтроки);
	МассивТекстов = Новый Массив();
	Текст = ВременнаяТаблицаДвиженийДокумента();
	МассивТекстов.Добавить(Текст);
	Текст = СтрЗаменить(Текст, "ВременнаяТаблицаДанныхДокумента", "ВременнаяТаблицаДанныхДокументаДляВыделенныхСтрок");
	Текст = СтрЗаменить(Текст, "ВременнаяТаблицаДвиженийДокумента", "ВременнаяТаблицаДвиженийДокументаДляВыделенныхСтрок");
	МассивТекстов.Добавить(Текст);
	Запрос.Текст = СтрСоединить(МассивТекстов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("Ссылка", Неопределено);
	Запрос.УстановитьПараметр("СсылкаНовогоНазначения", Справочники.Назначения.ПолучитьСсылку());
	Запрос.Выполнить();
	
	ТаблицаОформлено = ТаблицаОформлено(
		Запрос,
		РегистрыНакопления[ПараметрыВстраивания.ИмяРегистраОформленияОтгрузки],
		"ВременнаяТаблицаДанныхДокументаДляВыделенныхСтрок",
		"ВременнаяТаблицаДанныхДокумента");
		
	СкладыГруппы = СкладыГруппы(Запрос, Ложь);
	
	КорректировкаДвижений = ?(ПараметрыВстраивания.АдресКорректировкиДвижений = Неопределено,
		Неопределено,
		ПолучитьИзВременногоХранилища(Форма[ПараметрыВстраивания.АдресКорректировкиДвижений]));
	ДобавитьВременныеТаблицыДляПолученияОстатков(Запрос, Ложь, ТаблицаОформлено, КорректировкаДвижений, Ложь);
	ОстаткиСклада = ОстаткиДляУстановкиДействий(Запрос, СкладыГруппы);
	ОстаткиСкладаЦелымиУпаковками = ОстаткиСклада.Скопировать();
	
	Текст =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура                    КАК Номенклатура,
		|	Таблица.Номенклатура.ТипНоменклатуры    КАК ТипНоменклатуры,
		|	Таблица.Характеристика                  КАК Характеристика,
		|	Таблица.Склад                           КАК Склад,
		|	Таблица.ЗаказНаОтгрузку                 КАК ЗаказНаОтгрузку,
		|	Таблица.КодСтроки                       КАК КодСтроки,
		|	Таблица.Обособленно                     КАК Обособленно,
		|	Таблица.ДатаОтгрузкиВсехСтрокОднойДатой КАК ДатаОтгрузкиВсехСтрокОднойДатой,
		|	Таблица.ВариантОбеспечения              КАК ВариантОбеспечения,
		|	Таблица.КоличествоУпаковок              КАК КоличествоУпаковок,
		|	Таблица.Количество                      КАК Количество,
		|	Таблица.НомерСтроки                     КАК ЭлементКоллекции,
		|	
		|	ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|				Таблица.Назначение
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	
		|	ЕСТЬNULL((Таблица.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИЛИ ЕСТЬNULL(НастройкаХарактеристика.КонтролироватьСвободныеОстатки,
		|				ЕСТЬNULL(НастройкаНоменклатура.КонтролироватьСвободныеОстатки,
		|				ЕСТЬNULL(НастройкаСклад.КонтролироватьСвободныеОстатки, ЛОЖЬ))))
		|			И НЕ Таблица.Номенклатура.ТипНоменклатуры В(
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)), ИСТИНА)
		|		И ТаблицаИзменений.Номенклатура ЕСТЬ NULL КАК КонтролироватьСвободныеОстатки
		|ИЗ
		|	ВременнаяТаблицаДанныхДокументаДляВыделенныхСтрок КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаХарактеристика
		|		ПО НастройкаХарактеристика.Склад          = Таблица.Склад
		|		 И НастройкаХарактеристика.Номенклатура   = Таблица.Номенклатура
		|		 И НастройкаХарактеристика.Характеристика = Таблица.Характеристика
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаНоменклатура
		|		ПО НастройкаНоменклатура.Склад        = Таблица.Склад
		|		 И НастройкаНоменклатура.Номенклатура = Таблица.Номенклатура
		|		 И НастройкаНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И НастройкаХарактеристика.Склад ЕСТЬ NULL
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаСклад
		|		ПО НастройкаСклад.Склад          = Таблица.Склад
		|		 И НастройкаСклад.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		 И НастройкаСклад.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И НастройкаХарактеристика.Склад ЕСТЬ NULL
		|		 И НастройкаНоменклатура.Склад ЕСТЬ NULL
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИзмененийПереопределяемый КАК ТаблицаИзменений
		|		ПО ТаблицаИзменений.Номенклатура = Таблица.Номенклатура
		|		 И ТаблицаИзменений.Характеристика = Таблица.Характеристика
		|		 И ТаблицаИзменений.Склад = Таблица.Склад
		|		 И ТаблицаИзменений.Назначение
		|			= ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|						Таблица.Назначение
		|					ИНАЧЕ
		|						ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|				КОНЕЦ
		|		 И ТаблицаИзменений.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПустаяСсылка)
		|		 И ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
		|ГДЕ
		|	НЕ Таблица.Отменено";
	
	Тексты = Новый Массив();
	
	ЕстьДанныеДляОбработки = ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, "РегистрСведений.РаспределениеЗапасов");
	Если Не ЕстьДанныеДляОбработки Тогда
		
		ТекстФиктивнойТаблицы =
			"ВЫБРАТЬ
			|	NULL КАК Номенклатура,
			|	NULL КАК Характеристика,
			|	NULL КАК Склад,
			|	NULL КАК Назначение,
			|	NULL КАК Состояние,
			|	ЗНАЧЕНИЕ(ПланОбмена.ОбновлениеИнформационнойБазы.ПустаяСсылка) КАК Узел
			|ПОМЕСТИТЬ ТаблицаИзмененийПереопределяемый
			|ГДЕ
			|	ЛОЖЬ";
			
		Тексты.Добавить(ТекстФиктивнойТаблицы);
		
	Иначе
		Текст = СтрЗаменить(Текст, "ТаблицаИзмененийПереопределяемый", "РегистрСведений.РаспределениеЗапасов.Изменения");
	КонецЕсли;
	Тексты.Добавить(Текст);
	
	Запрос.Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ДанныеСтрок = Запрос.Выполнить().Выгрузить();
	
	КоллекцияНаФорме = ОбеспечениеВДокументахКлиентСервер.КоллекцияНаФорме(Форма, ПараметрыВстраивания);
	КоэффициентыУпаковок = КоэффициентыУпаковок(ДанныеСтрок, КоллекцияНаФорме);
	
	ДанныеУчета = Новый Структура("ОстаткиСклада,ТаблицаОформлено", ОстаткиСклада,ТаблицаОформлено);
	ТаблицаИзменений = ТаблицаДляУстановкиДействий(
		КодДействия,
		Ложь,
		КоллекцияНаФорме,
		ВыделенныеСтроки,
		ДанныеСтрок,
		КоэффициентыУпаковок,
		ДанныеУчета);
		
	Результат = Новый Структура();
	Результат.Вставить("ТаблицаИзменений",                                ТаблицаИзменений);
	Результат.Вставить("СнятьФлагОтгружатьОднойДатой",                    Ложь);
	Результат.Вставить("ТаблицаИзмененийЦелымиУпаковками",                Неопределено);
	Результат.Вставить("СнятьФлагОтгружатьОднойДатойЦелымиУпаковками",    Ложь);
	Результат.Вставить("ЗаполнитьДатуОтгрузкиОднойДатой",                 Ложь);
	Результат.Вставить("ЗаполнитьДатуОтгрузкиОднойДатойЦелымиУпаковками", Ложь);
	Результат.Вставить("ДатаОтгрузкиВсехСтрокОднойДатой",                 Неопределено);
	Результат.Вставить("ДатаОтгрузкиЗаполненныхСтрок",                    Неопределено);
	
	Если ДанныеСтрок.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК ВсегоЗаписей
		|ИЗ
		|	ВременнаяТаблицаДанныхДокумента КАК Таблица
		|ГДЕ
		|	НЕ Таблица.Отменено";
	Выборка = Запрос.Выполнить().Выбрать();
	ВсегоСтрокВДокументе = 0;
	Если Выборка.Следующий() Тогда
		ВсегоСтрокВДокументе = Выборка.ВсегоЗаписей;
	КонецЕсли;
	
	ЗаполнениеДляВсехСтрок = ДанныеСтрок.Количество() = ВсегоСтрокВДокументе;
	ЕстьРазбиениеСтрок     = ВыделенныеСтроки.Количество() <> ТаблицаИзменений.Количество();
	ЗаполнениеДатыОтгрузки = КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ";
	
	Если ЗаполнениеДатыОтгрузки Тогда
		
		Результат.ДатаОтгрузкиВсехСтрокОднойДатой = ДанныеСтрок[0].ДатаОтгрузкиВсехСтрокОднойДатой;
		Результат.ДатаОтгрузкиЗаполненныхСтрок = НачалоДня(ТекущаяДатаСеанса());
		Если ЗаполнениеДляВсехСтрок И Не ЕстьРазбиениеСтрок Тогда
			
			Результат.ЗаполнитьДатуОтгрузкиОднойДатой = ДанныеСтрок.Количество() > 0
				И ДанныеСтрок[0].ДатаОтгрузкиВсехСтрокОднойДатой <> Неопределено
				И ДанныеСтрок[0].ДатаОтгрузкиВсехСтрокОднойДатой < НачалоДня(ТекущаяДатаСеанса());
			
		Иначе
			
			Результат.СнятьФлагОтгружатьОднойДатой
				= ВТаблицеИзмененийЕстьОтгрузкаИДатаОтгрузкиВсехСтрокОднойДатойПросрочена(
					ТаблицаИзменений,
					ДанныеСтрок)
					И ПараметрыВстраивания.ВыражениеДляВопросаПриВыполненииДействияВСпискеЗаказов <> "НЕОПРЕДЕЛЕНО";
					
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеСтрок.Индексы.Добавить("ЭлементКоллекции");
	Если ВТаблицеИзмененийЕстьДробныеУпаковки(ТаблицаИзменений, КоэффициентыУпаковок, ДанныеСтрок) Тогда
		
		ДанныеУчета = Новый Структура("ОстаткиСклада,ТаблицаОформлено", ОстаткиСкладаЦелымиУпаковками,ТаблицаОформлено);
		ТаблицаИзменений = ТаблицаДляУстановкиДействий(
			КодДействия,
			Истина,
			КоллекцияНаФорме,
			ВыделенныеСтроки,
			ДанныеСтрок,
			КоэффициентыУпаковок,
			ДанныеУчета);
			
		Результат.ТаблицаИзмененийЦелымиУпаковками = ТаблицаИзменений;
		
		Если ЗаполнениеДатыОтгрузки Тогда
			
			Если ЗаполнениеДляВсехСтрок И Не ЕстьРазбиениеСтрок Тогда
				
				Результат.ЗаполнитьДатуОтгрузкиОднойДатойЦелымиУпаковками = ДанныеСтрок.Количество() > 0
					И ДанныеСтрок[0].ДатаОтгрузкиВсехСтрокОднойДатой <> Неопределено
					И ДанныеСтрок[0].ДатаОтгрузкиВсехСтрокОднойДатой < НачалоДня(ТекущаяДатаСеанса());
				
			Иначе
				
				Результат.СнятьФлагОтгружатьОднойДатойЦелымиУпаковками
					= ВТаблицеИзмененийЕстьОтгрузкаИДатаОтгрузкиВсехСтрокОднойДатойПросрочена(
						ТаблицаИзменений,
						ДанныеСтрок)
						И ПараметрыВстраивания.ВыражениеДляВопросаПриВыполненииДействияВСпискеЗаказов <> "НЕОПРЕДЕЛЕНО"						
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработчик выбора в поле "Действие" в табличной части заказа на отгрузку.
// 
// Параметры:
//  ВыбранноеЗначение - Структура - структура, содержащая таблицу:
//    * ПодобранныеТовары - ТаблицаЗначений - таблица для переноса в документ.
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  ТекущаяСтрока - Число - идентификатор строки табличной части заказа для которой указывают вариант обеспечения, серию или склад.
//  ЗаполняемыеПоля - Строка - поля в табличной части заказа перечисленные через запятую, которые нужно заполнить из таблицы подобранных товаров.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица содержащая ссылки на строки табличной части заказа в которые были перенесены данные.
//
Функция ПриВыбореСклада(ВыбранноеЗначение, Форма, ТекущаяСтрока, ЗаполняемыеПоля) Экспорт
	
	МассивПолей = СтрРазделить(ЗаполняемыеПоля, ",");
	
	ТаблицаИзменений = Новый ТаблицаЗначений();
	
	Для Каждого Поле Из МассивПолей Цикл
		ТаблицаИзменений.Колонки.Добавить(Поле);
	КонецЦикла;
	ТаблицаИзменений.Колонки.Добавить("Идентификатор");
	ТаблицаИзменений.Колонки.Добавить("Строка");
	
	Для Каждого Строка Из ВыбранноеЗначение.ПодобранныеТовары Цикл
		
		НоваяСтрока = ТаблицаИзменений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Идентификатор = ТекущаяСтрока;
		
	КонецЦикла;
	
	УстановитьДействияИзТаблицы(Форма, ТаблицаИзменений);
	Возврат ТаблицаИзменений;
	
КонецФункции

// Формирует параметры для передачи в форму выбора складов и серий в строке заказа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  ТекущаяСтрока - Число - идентификатор строки табличной части заказа для которой указывают вариант обеспечения, серию или склад.
//  Режим - Строка - режим выполнения команды.
//
// Возвращаемое значение:
//  Структура - см. ОбеспечениеВДокументахКлиентСервер.ПараметрыФормыЗапросаКоличестваИСерий
//
Функция ПараметрыВыбораОбеспечения(Форма, ТекущаяСтрока, Режим) Экспорт
	
	// Инициализация параметров и текста запроса, получение временной таблицы данных документа
	// для операции отражения и временной таблицы отражения.
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	Таблицы = ПолучитьИзВременногоХранилища(ПараметрыВстраивания.СлужебныеПараметры.АдресТаблицыДанныхФормы);
	ЗаполнитьТаблицыИзДанныхФормы(Таблицы, Форма, Неопределено);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДобавитьВременнуюТаблицуДанныхДокумента(Запрос.МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания);
	НомераСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущаяСтрока);
	ДобавитьВременнуюТаблицуДанныхДокументаДляВыделенныхСтрок(Запрос, НомераСтрок);
	МассивТекстов = Новый Массив();
	Текст = ВременнаяТаблицаДвиженийДокумента();
	МассивТекстов.Добавить(Текст);
	Текст = СтрЗаменить(Текст, "ВременнаяТаблицаДанныхДокумента", "ВременнаяТаблицаДанныхДокументаДляВыделенныхСтрок");
	Текст = СтрЗаменить(Текст, "ВременнаяТаблицаДвиженийДокумента", "ВременнаяТаблицаДвиженийДокументаДляВыделенныхСтрок");
	МассивТекстов.Добавить(Текст);
	Запрос.Текст = СтрСоединить(МассивТекстов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("Ссылка", Неопределено);
	Запрос.УстановитьПараметр("СсылкаНовогоНазначения", Справочники.Назначения.ПолучитьСсылку());
	Запрос.Выполнить();
	
	ТаблицаОформлено = ТаблицаОформлено(
		Запрос,
		РегистрыНакопления[ПараметрыВстраивания.ИмяРегистраОформленияОтгрузки],
		"ВременнаяТаблицаДанныхДокументаДляВыделенныхСтрок",
		"ВременнаяТаблицаДанныхДокумента");
	
	КоличествоОформлено = ?(ТаблицаОформлено.Количество() > 0, ТаблицаОформлено[0].Количество, 0);
	
	СкладыГруппы = СкладыГруппы(Запрос, Истина);
	Если Режим = ОбеспечениеВДокументахКлиентСервер.РежимПодборСерий() Тогда
		СкладыГруппы = Неопределено;
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Назначение                                     КАК Назначение,
		|	Таблица.Номенклатура                                   КАК Номенклатура,
		|	Таблица.Характеристика                                 КАК Характеристика,
		|	Таблица.Склад                                          КАК Склад,
		|	Таблица.ВариантОбеспечения                             КАК ВариантОбеспечения,
		|	Таблица.Обособленно                                    КАК Обособленно,
		|	Таблица.КоличествоУпаковок                             КАК Количество,
		|	Таблица.Упаковка                                       КАК Упаковка,
		|	Таблица.Регистратор                                    КАК Регистратор,
		|	Таблица.Серия                                          КАК Серия,
		|	Таблица.ГруппаСкладов                                  КАК ГруппаСкладов,
		|	Таблица.Номенклатура.ТипНоменклатуры                   КАК ТипНоменклатуры,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
		|	Таблица.ДатаОтгрузкиВсехСтрокОднойДатой                КАК ДатаОтгрузкиВсехСтрокОднойДатой
		|ИЗ
		|	ВременнаяТаблицаДанныхДокументаДляВыделенныхСтрок КАК Таблица
		|;
		|
		|//////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.ЗаказНаОтгрузку КАК Ссылка
		|ИЗ
		|	ВременнаяТаблицаДанныхДокумента КАК Таблица";
	
	Пакет = Запрос.ВыполнитьПакет();
	ДанныеСтрок = Пакет[0].Выгрузить();
	
	КоэффициентУпаковки = 1;
	Если ЗначениеЗаполнено(ДанныеСтрок[0].Упаковка) Тогда
		
		КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
			ДанныеСтрок[0].Упаковка,
			ДанныеСтрок[0].Номенклатура);
			
	КонецЕсли;
	
	КорректировкаДвижений = ?(ПараметрыВстраивания.АдресКорректировкиДвижений = Неопределено,
		Неопределено,
		ПолучитьИзВременногоХранилища(Форма[ПараметрыВстраивания.АдресКорректировкиДвижений]));
	ДобавитьВременныеТаблицыДляПолученияОстатков(Запрос, Истина, ТаблицаОформлено, КорректировкаДвижений, Истина);
	ОстаткиСкладаИГрафика = ОстаткиДляПодбораСкладов(Запрос, СкладыГруппы, КоэффициентУпаковки);
	ОстаткиСкладаИГрафика.Сортировать("Номенклатура,Характеристика,Склад,Назначение", Новый СравнениеЗначений());
	
	Если Не ЗначениеЗаполнено(ДанныеСтрок[0].Склад) Тогда
		НоваяСтрока = ОстаткиСкладаИГрафика.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрок[0]);
		НоваяСтрока.Обособленно = Ложь;
		НоваяСтрока.ЭтоСкладВыбраннойГруппы = Истина;
		НоваяСтрока.ПроверятьДоступность = Истина;
		НоваяСтрока = ОстаткиСкладаИГрафика.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрок[0]);
		НоваяСтрока.Обособленно = Истина;
		НоваяСтрока.ЭтоСкладВыбраннойГруппы = Истина;
		НоваяСтрока.ПроверятьДоступность = Истина;
	КонецЕсли;
	
	АдресДоступныеОстатки = ПоместитьВоВременноеХранилище(ОстаткиСкладаИГрафика, Форма.УникальныйИдентификатор);
	
	ПараметрыФормы = ОбеспечениеВДокументахКлиентСервер.ПараметрыФормыЗапросаКоличестваИСерий();
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДанныеСтрок[0]);
	
	ПараметрыФормы.ТолькоПросмотр                   = Режим = ОбеспечениеВДокументахКлиентСервер.РежимПросмотрДоступности(); // выбор в колонке доступно в заказах
	ПараметрыФормы.Режим                            = Режим;
	ПараметрыФормы.ПодборСкладов                    = Истина;
	ПараметрыФормы.АдресДоступныеОстатки            = АдресДоступныеОстатки;
	ПараметрыФормы.ДопустимыеНеобособленныеДействия = ОбеспечениеВДокументахКлиентСервер.ВсеДействия();
	ПараметрыФормы.ДопустимыеОбособленныеДействия   = ОбеспечениеВДокументахКлиентСервер.ВсеДействия();
	ПараметрыФормы.СкладПоДокументу                 = ДанныеСтрок[0].Склад;
	ПараметрыФормы.Склад                            = ДанныеСтрок[0].ГруппаСкладов;
	ПараметрыФормы.ВариантОбеспеченияПоДокументу    = ДанныеСтрок[0].ВариантОбеспечения;
	ПараметрыФормы.ВариантОбеспеченияДоИзменения    = ДанныеСтрок[0].ВариантОбеспечения;
	ПараметрыФормы.ОбособленноПоДокументу           = ДанныеСтрок[0].Обособленно;
	ПараметрыФормы.КоличествоПоДокументу            = ДанныеСтрок[0].Количество;
	ПараметрыФормы.Регистратор                      = ДанныеСтрок[0].Регистратор;
	ПараметрыФормы.Серия                            = ДанныеСтрок[0].Серия;
	ПараметрыФормы.КоличествоОформлено              = КоличествоОформлено / КоэффициентУпаковки;
	ПараметрыФормы.ЗаказыНаОтгрузку.ЗагрузитьЗначения(Пакет[1].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	ПараметрыФормы.ПодборСерий = Истина;
	ПараметрыФормы.АдресТаблицыПодобраноРанее = АдресТаблицыПодобраноРанее(Запрос, Форма.УникальныйИдентификатор);
	
	ПараметрыФормы.Вставить("ЗаполняемыеПоля");
	Если Режим = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия() Тогда
		ПараметрыФормы.ЗаполняемыеПоля = "КоличествоУпаковок,ВариантОбеспечения,Обособленно,Склад,Серия";
	ИначеЕсли Режим = ОбеспечениеВДокументахКлиентСервер.РежимПодборСерий() Тогда
		ПараметрыФормы.ВыборСерии = Истина;
		ПараметрыФормы.ЗаполняемыеПоля = "КоличествоУпаковок,Серия";
	ИначеЕсли Режим = ОбеспечениеВДокументахКлиентСервер.РежимПодборСкладов() Тогда
		ПараметрыФормы.ЗаполняемыеПоля = "КоличествоУпаковок,Склад,Серия";
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ДатаОтгрузкиВсехСтрокОднойДатой", ДанныеСтрок[0].ДатаОтгрузкиВсехСтрокОднойДатой);
	ПараметрыФормы.Вставить("ДатаОтгрузкиНовыхСтрок", НачалоДня(ТекущаяДатаСеанса()));
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Формирует данные измененного объекта для общей формы состояния обеспечения.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма из которой нужно открыть форму состояния обеспечения.
// 
// Возвращаемое значение:
//  Строка - адрес данных заказа во временном хранилище.
//
Функция АдресТаблицыДвиженийВХранилище(Форма) Экспорт
	
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	Таблицы = ПолучитьИзВременногоХранилища(ПараметрыВстраивания.СлужебныеПараметры.АдресТаблицыДанныхФормы);
	ЗаполнитьТаблицыИзДанныхФормы(Таблицы, Форма, Неопределено);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДобавитьВременнуюТаблицуДанныхДокумента(Запрос.МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания);
	Запрос.Текст = ВременнаяТаблицаДвиженийДокумента(Истина);
	Запрос.УстановитьПараметр("Ссылка", Неопределено);
	Запрос.УстановитьПараметр("СсылкаНовогоНазначения", Справочники.Назначения.ПолучитьСсылку());
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДвиженияПриЗаписи.Номенклатура         КАК Номенклатура,
		|	ДвиженияПриЗаписи.Характеристика       КАК Характеристика,
		|	ДвиженияПриЗаписи.Склад                КАК Склад,
		|	ДвиженияПриЗаписи.Назначение           КАК Назначение,
		|	ДвиженияПриЗаписи.ЗаказНаОтгрузку      КАК ЗаказНаОтгрузку,
		|	ДвиженияПриЗаписи.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
		|	СУММА(ДвиженияПриЗаписи.Отгрузить)     КАК Отгрузить,
		|	СУММА(ДвиженияПриЗаписи.Резервировать) КАК Резервировать,
		|	СУММА(ДвиженияПриЗаписи.РезервироватьПоМереПоступления) КАК РезервироватьПоМереПоступления,
		|	СУММА(ДвиженияПриЗаписи.КОбеспечениюБезРезерва) КАК КОбеспечениюБезРезерва,
		|	СУММА(ДвиженияПриЗаписи.НеОбеспечивать) КАК НеОбеспечивать,
		|	ЛОЖЬ                                   КАК ИгнорироватьРезервыПриКонтролеОстатков
		|ИЗ
		|	ВременнаяТаблицаДвиженийДокумента КАК ДвиженияПриЗаписи
		|СГРУППИРОВАТЬ ПО
		|	ДвиженияПриЗаписи.Номенклатура,
		|	ДвиженияПриЗаписи.Характеристика,
		|	ДвиженияПриЗаписи.Склад,
		|	ДвиженияПриЗаписи.Назначение,
		|	ДвиженияПриЗаписи.ЗаказНаОтгрузку,
		|	ДвиженияПриЗаписи.ЖелаемаяДатаОтгрузки
		|;
		|
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	Таблица.Приоритет КАК Приоритет,
		|	Таблица.ДатаДокумента КАК ДатаДокумента
		|ИЗ
		|	ВременнаяТаблицаДанныхДокумента КАК Таблица";
	Пакет = Запрос.ВыполнитьПакет();
	
	Данные = Новый Структура();
	Данные.Вставить("ТаблицаДвижений", Пакет[0].Выгрузить());
	Данные.Вставить("ТаблицаИмитацияРеестра", Пакет[1].Выгрузить());
	АдресТаблицыДвижений = ПоместитьВоВременноеХранилище(Данные, Форма.УникальныйИдентификатор);
	
	Возврат АдресТаблицыДвижений;
	
КонецФункции

////////////////////////////////////////////////////////////
// Особые случаи использования, вызов функций ядра напрямую.

// Устанавливает действия в табличную часть заказа исходя из переданной таблицы изменений.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  ТаблицаИзменений - см. ТаблицаДляУстановкиДействий
//
Процедура УстановитьДействияИзТаблицы(Форма, ТаблицаИзменений) Экспорт
	
	Коллекция = ?(ТипЗНЧ(Форма) = Тип("ФормаКлиентскогоПриложения"),
		ОбеспечениеВДокументахКлиентСервер.КоллекцияНаФорме(Форма, Форма.ДоступныеОстаткиПараметрыВстраивания),
		Форма);
	
	Идентификатор = Неопределено;
	ЭтоДанныеФормыКоллекция = ТипЗнч(Коллекция) = Тип("ДанныеФормыКоллекция");
	ДобавленоСтрок = 0;
	Для Индекс = 0 По ТаблицаИзменений.Количество() - 1 Цикл
		
		СтрокаОбеспечения = ТаблицаИзменений[Индекс];
		
		// Выбор существующей, либо добавление новой строки.
		Если Идентификатор <> СтрокаОбеспечения.Идентификатор Тогда
			
			Идентификатор = СтрокаОбеспечения.Идентификатор;
			Если ЭтоДанныеФормыКоллекция Тогда
				СтрокаТовары = Коллекция.НайтиПоИдентификатору(Идентификатор);
			Иначе
				СтрокаТовары = Коллекция[Идентификатор - 1 + ДобавленоСтрок];
			КонецЕсли;
			СтрокаОбеспечения.Строка = СтрокаТовары;
			
		Иначе
			
			ДобавленоСтрок = ДобавленоСтрок + 1;
			НоваяСтрока = Коллекция.Вставить(Коллекция.Индекс(СтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			НоваяСтрока.КодСтроки = 0;
			СтрокаОбеспечения.Строка = НоваяСтрока;
			СтрокаТовары = НоваяСтрока;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаОбеспечения);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обслуживающие формы документов

// Обработчик при создании на сервере для форм заказов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  ПараметрыВстраивания - см. ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания
//
Процедура ДоступныеОстаткиПриСозданииНаСервере(Форма, ПараметрыВстраивания) Экспорт
	
	ЗаполнитьПараметрыВстраивания(Форма, ПараметрыВстраивания);
	
	ЭлементДоступно = Форма.Элементы[ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы.Доступно];
	ЭлементДоступно.АвтоМаксимальнаяШирина = Ложь;
	ЭлементДоступно.МаксимальнаяШирина     = 8;
	ЭлементДоступно.Формат                 = "ЧДЦ=3; ЧН=0,000";
	ЭлементДоступно.ТолькоПросмотр         = Истина;
	ЭлементДоступно.ЦветТекста             = ЦветаСтиля.ТекстИнформационнойНадписи;
	
	ЭлементВариантОбеспечения = Форма.Элементы[ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы.ВариантОбеспечения];

	Связи = ПараметрыВстраивания.СвязиПараметровВыбораВариантаОбеспечения;
	НовыйМассив = Новый Массив();
	Для Каждого Свойство Из Связи Цикл
		Если Свойство.Значение <> Неопределено И Свойство.Значение <> Истина Тогда
			НоваяСвязь = Новый СвязьПараметраВыбора(
				Свойство.Ключ,
				Свойство.Значение,
				РежимИзмененияСвязанногоЗначения.НеИзменять);
			НовыйМассив.Добавить(НоваяСвязь);
		КонецЕсли;
	КонецЦикла;
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	ЭлементВариантОбеспечения.СвязиПараметровВыбора = НовыеСвязи;
	
	НовыйМассив = Новый Массив();
	Для Каждого Свойство Из Связи Цикл
		Если Свойство.Значение = Истина Тогда
			НовыйПараметр = Новый ПараметрВыбора(
				Свойство.Ключ,
				Свойство.Значение);
			НовыйМассив.Добавить(НовыйПараметр);
		КонецЕсли;
	КонецЦикла;
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	ЭлементВариантОбеспечения.ПараметрыВыбора = НовыеПараметры;
	
	Если Не Форма.ДоступныеОстаткиПараметрыВстраивания.Свойство("АдресОстатков") Тогда
		ДоступныеОстаткиПриЧтенииНаСервере(Форма, Форма.ДоступныеОстаткиПараметрыВстраивания);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик при чтении на сервере для форм заказов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  ПараметрыВстраивания - см. ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания
//
Процедура ДоступныеОстаткиПриЧтенииНаСервере(Форма, ПараметрыВстраивания) Экспорт
	
	ЗаполнитьПараметрыВстраивания(Форма, ПараметрыВстраивания);
	ПараметрыЗаполнения = ДоступныеОстаткиПараметрыЗаполнения();
	ПараметрыЗаполнения.ПолучатьОстаткиИзКэша = Ложь;
	ДоступныеОстаткиПерезаполнить(Форма, ПараметрыЗаполнения);
	
КонецПроцедуры

// Обработчик после записи на сервере для форм заказов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//
Процедура ПослеЗаписиНаСервере(Форма) Экспорт
	
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	Таблицы = ПолучитьИзВременногоХранилища(ПараметрыВстраивания.СлужебныеПараметры.АдресТаблицыДанныхФормы);
	ЗаполнитьТаблицыИзДанныхФормы(Таблицы, Форма, Неопределено);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДобавитьВременнуюТаблицуДанныхДокумента(Запрос.МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку
		|ИЗ
		|	ВременнаяТаблицаДанныхДокумента КАК Таблица
		|ГДЕ
		|	ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьЗаписи
		|		ИЗ
		|			РегистрСведений.ЗаданияКРаспределениюЗапасов КАК Задания
		|		ГДЕ
		|			Задания.ЗаказНаОтгрузку = Таблица.ЗаказНаОтгрузку)";
	
	УстановитьПривилегированныйРежим(Истина);
	Заказы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказНаОтгрузку");
	УстановитьПривилегированныйРежим(Ложь);
	НуженОбработчикОбновленияДоступности = Заказы.Количество() > 0;
	СлужебныеПараметры = Форма.ДоступныеОстаткиПараметрыВстраивания.СлужебныеПараметры;
	СлужебныеПараметры.НуженОбработчикОбновленияДоступности = НуженОбработчикОбновленияДоступности;
	СлужебныеПараметры.ЗаказыДляОбновленияДоступности = Заказы;
	СлужебныеПараметры.ИнтервалЗапускаОбработчика = 1;
	ПараметрыЗаполнения = ДоступныеОстаткиПараметрыЗаполнения();
	ПараметрыЗаполнения.ПолучатьОстаткиИзКэша = НуженОбработчикОбновленияДоступности;
	ДоступныеОстаткиПерезаполнить(Форма, ПараметрыЗаполнения);
	
	Если НуженОбработчикОбновленияДоступности Тогда
		
		ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет колонку "Доступно" в табличной части товаров заказа после записи заказа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//
Процедура ОбновитьДоступностьПослеЗаписи(Форма) Экспорт
	
	ПараметрыЗаполнения = ДоступныеОстаткиПараметрыЗаполнения();
	ПараметрыЗаполнения.ПолучатьОстаткиИзКэша = Ложь;
	ДоступныеОстаткиПерезаполнить(Форма, ПараметрыЗаполнения);
	
КонецПроцедуры

// Обновляет колонку "Доступно" в табличной части товаров заказа при изменении реквизитов документа влияющих на эту колонку.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//
Процедура ПриИзмененииРеквизитаДокумента(Форма) Экспорт
	
	ОбновитьКолонкуДоступно(Форма);
	
КонецПроцедуры

// Устанавливает условное оформление колонки "Доступно" в форме заказа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//
Процедура ДоступныеОстаткиДобавитьОформлениеКолонкиДоступно(Форма) Экспорт
	
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	// Текст запрещенной ячейки, если на складе запасы перераспределяются.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы.Доступно);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
		ПараметрыВстраивания.УсловноеОформление.ПутиКДанным.ПерераспределятьЗапасы);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Скрытие колонки, если действие не "Резервировать по мере поступления", не "К обеспечению" и не "Не обеспечивать".
	СписокВариантов = Новый СписокЗначений();
	СписокВариантов.Добавить(Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления);
	СписокВариантов.Добавить(Перечисления.ВариантыОбеспечения.КОбеспечению);
	СписокВариантов.Добавить(Перечисления.ВариантыОбеспечения.НеТребуется);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы.Доступно);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
		Форма.Элементы[ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы.ВариантОбеспечения].ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОбеспечения.НеТребуется;
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
		ПараметрыВстраивания.УсловноеОформление.ПутиКДанным.ТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Услуга;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Скрытие колонки, если действие "Не обеспечивать" и номенклатура не тара.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы.Доступно);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
		Форма.Элементы[ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы.ВариантОбеспечения].ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокВариантов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Скрытие колонки, если строка отменена.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы.Доступно);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
		ПараметрыВстраивания.УсловноеОформление.ПутиКДанным.ЗапретРедактирования);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Запрет редактирования полей.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы.ВариантОбеспечения);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы.Серия);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы.Обособленно);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы.Склад);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
		ПараметрыВстраивания.УсловноеОформление.ПутиКДанным.ЗапретРедактирования);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
КонецПроцедуры

// Конструктор структуры параметров встраивания обеспечения в документ.
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * ИмяОбъекта - Строка - полное имя объекта.
//   * ИмяТаблицы - Строка - имя таблицы товаров документа.
//   * ИмяРегистраОформленияОтгрузки - Строка - имя регистра, в котором хранится информация об оформленном количестве по заказу
//   * ИмяТаблицыФормы - Строка - Имя табличной части формы заказа
//   * УсловноеОформление - Структура - структура с полями:
//      ** ЭлементыФормы - Структура - структура с полями:
//        *** ВариантОбеспечения - Строка - имя элемента в форме связанного с одноименным реквизитом формы.
//        *** Доступно - Строка - имя элемента в форме связанного с одноименным реквизитом формы.
//        *** Серия - Строка - имя элемента в форме связанного с одноименным реквизитом формы.
//        *** Обособленно - Строка - имя элемента в форме связанного с одноименным реквизитом формы.
//        *** Склад - Строка - имя элемента в форме связанного с одноименным реквизитом формы.
//       ** ПутиКДанным - Структура - структура с полями:
//        *** ПерераспределятьЗапасы - Строка - путь к реквизиту списка товары в котором хранится признак перераспределения запасов в строке.
//        *** ЗапретРедактирования - Строка - путь к реквизиту списка товары в котором хранится признак запрета редактирования в строке.
//   * РеквизитДоступно - Структура - структура с полями:
//    ** ИмяЭлемента - Строка - имя элемента "Доступно".
//   * РеквизитПерераспределятьЗапасы - Структура - cтруктура с полями:
//    ** ПутьКДанным - Строка - путь к данным реквизита перераспределения запасов.
//   * РеквизитВариантОбеспечения - Структура - cтруктура с полями:
//    ** ИмяЭлемента - Строка - имя элемента "ВариантОбеспечения".
//   * ОписаниеПолученияДанныхДокумента - Строка - текст запроса временной таблицы данных документа.
//   * АдресКорректировкиДвижений - Строка - имя реквизита для хранения адреса корректировки движений документа.
//   * ШаблонСериализацииДанныхФормы - Структура - содержит имена таблиц используемых в описании получения данных объекта и путь к данным этих таблиц на форме.
//   * ПоляСвязиТабличныхЧастей - Структура - поля связи таблиц, для извлечения данных из формы документа.
//   * ВыражениеДляВопросаПриВыполненииДействияВСпискеЗаказов - Строка - строка для подстановки в запрос.
//   * СвязиПараметровВыбораВариантаОбеспечения - Структура - структура с полями:
//    ** Доступно - Строка - Имя соответствующего поля на форме.
//    ** КоличествоУпаковок - Строка - Имя соответствующего поля на форме.
//    ** Количество - Строка - Имя соответствующего поля на форме.
//    ** ОтгружатьЕслиДоступно - Строка - Имя соответствующего поля на форме.
//    ** Обособленно - Строка - Имя соответствующего поля на форме.
//    ** ТипНоменклатуры - Строка - Имя соответствующего поля на форме.
//    ** Упаковка - Строка - Имя соответствующего поля на форме.
//    ** Номенклатура - Строка - Имя соответствующего поля на форме.
//    ** ВариантОбеспечения - Строка - Имя соответствующего поля на форме.
//    ** Склад - Строка - Имя соответствующего поля на форме.
//    ** НесколькоСкладов - Строка - Имя соответствующего поля на форме.
//   * ИменаЭлементов - Структура - структура с полями:
//    ** СтраницыГиперссылкаСостояниеОбеспечения - Строка - имя соотвествующего поля на форме.
//    ** СтраницаГиперссылкаСостояниеОбеспечения - Строка - имя соотвествующего поля на форме.
//    ** ГиперссылкаСостояниеОбеспечения - Строка - имя соотвествующего поля на форме.
//    ** СтраницаГиперссылкаСостояниеОбеспеченияОтгружается - Строка - имя соотвествующего поля на форме.
//    ** ГиперссылкаСостояниеОбеспеченияОтгружается - Строка - имя соотвествующего поля на форме.
//    ** СтраницаГиперссылкаСостояниеОбеспеченияПроблема - Строка - имя соотвествующего поля на форме.
//    ** ГиперссылкаСостояниеОбеспеченияПроблема - Строка - имя соотвествующего поля на форме.
Функция ДоступныеОстаткиПараметрыВстраивания() Экспорт
	
	ПараметрыВстраивания = Новый Структура();
	
	ПараметрыВстраивания.Вставить("ИмяОбъекта");
	ПараметрыВстраивания.Вставить("ИмяТаблицы");
	ПараметрыВстраивания.Вставить("ИмяРегистраОформленияОтгрузки");
	ПараметрыВстраивания.Вставить("ИмяТаблицыФормы");
	
	ПараметрыВстраивания.Вставить("УсловноеОформление", Новый Структура());
	ПараметрыВстраивания.УсловноеОформление.Вставить("ЭлементыФормы",
		Новый Структура(
			"ВариантОбеспечения,
			|Доступно,
			|Серия,
			|Обособленно,
			|Склад"));
	ПараметрыВстраивания.УсловноеОформление.Вставить("ПутиКДанным",
		Новый Структура(
			"ПерераспределятьЗапасы,ЗапретРедактирования,ТипНоменклатуры"));

	ПараметрыВстраивания.Вставить("РеквизитДоступно",               Новый Структура("ИмяЭлемента"));
	ПараметрыВстраивания.Вставить("РеквизитПерераспределятьЗапасы", Новый Структура("ПутьКДанным"));
	ПараметрыВстраивания.Вставить("РеквизитВариантОбеспечения",     Новый Структура("ИмяЭлемента"));
	
	ПараметрыВстраивания.Вставить("ОписаниеПолученияДанныхДокумента");
	ПараметрыВстраивания.Вставить("АдресКорректировкиДвижений");
	ПараметрыВстраивания.Вставить("ШаблонСериализацииДанныхФормы",  Новый Структура());
	ПараметрыВстраивания.Вставить("ПоляСвязиТабличныхЧастей",       Новый Структура());
	
	ПараметрыВстраивания.Вставить("ВыражениеДляВопросаПриВыполненииДействияВСпискеЗаказов",
		"ВЫБОР КОГДА Таблица.НеОтгружатьЧастями ТОГДА
		|			Таблица.ДатаОтгрузки
		|		ИНАЧЕ
		|			НЕОПРЕДЕЛЕНО
		|	КОНЕЦ");
	
	ПараметрыВстраивания.Вставить("СвязиПараметровВыбораВариантаОбеспечения",
		Новый Структура(
			"Доступно,
			|КоличествоУпаковок,
			|Количество,
			|ОтгружатьЕслиДоступно,
			|Обособленно,
			|ТипНоменклатуры,
			|Упаковка,
			|Номенклатура,
			|ВариантОбеспечения,
			|Склад,
			|НесколькоСкладов"));
		
	ИменаЭлементов = Новый Структура();
	ИменаЭлементов.Вставить("СтраницыГиперссылкаСостояниеОбеспечения", "СтраницыГиперссылкаСостояниеОбеспечения");
	ИменаЭлементов.Вставить("СтраницаГиперссылкаСостояниеОбеспечения", "СтраницаГиперссылкаСостояниеОбеспечения");
	ИменаЭлементов.Вставить("ГиперссылкаСостояниеОбеспечения", "ГиперссылкаСостояниеОбеспечения");
	ИменаЭлементов.Вставить("СтраницаГиперссылкаСостояниеОбеспеченияОтгружается", "СтраницаГиперссылкаСостояниеОбеспеченияОтгружается");
	ИменаЭлементов.Вставить("ГиперссылкаСостояниеОбеспеченияОтгружается", "ГиперссылкаСостояниеОбеспеченияОтгружается");
	ИменаЭлементов.Вставить("СтраницаГиперссылкаСостояниеОбеспеченияПроблема", "СтраницаГиперссылкаСостояниеОбеспеченияПроблема");
	ИменаЭлементов.Вставить("ГиперссылкаСостояниеОбеспеченияПроблема", "ГиперссылкаСостояниеОбеспеченияПроблема");
	ИменаЭлементов.Вставить("СтраницаГиперссылкаСостояниеОбеспеченияСЗаголовком", "СтраницаГиперссылкаСостояниеОбеспеченияСЗаголовком");
	ИменаЭлементов.Вставить("ГиперссылкаСостояниеОбеспеченияСЗаголовком", "ГиперссылкаСостояниеОбеспеченияСЗаголовком");
	
	ПараметрыВстраивания.Вставить("ИменаЭлементов", ИменаЭлементов);
	
	Возврат ПараметрыВстраивания;
	
КонецФункции

// Обновляет колонку "Доступно" в формах заказов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//
Процедура ОбновитьКолонкуДоступно(Форма) Экспорт
	
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	Таблицы = ПолучитьИзВременногоХранилища(ПараметрыВстраивания.СлужебныеПараметры.АдресТаблицыДанныхФормы);
	ЗаполнитьТаблицыИзДанныхФормы(Таблицы, Форма, Неопределено);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДобавитьВременнуюТаблицуДанныхДокумента(Запрос.МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания);
	
	ТаблицаИзменений = ВыгрузитьТаблицуИзмененийДокумента(Запрос.МенеджерВременныхТаблиц, Форма);
	
	АдресОстатков = Форма.ДоступныеОстаткиПараметрыВстраивания.АдресОстатков;
	Остатки = ПолучитьИзВременногоХранилища(АдресОстатков);
	Остатки.ИзмененияПоДокументу = ТаблицаИзменений;
	ПоместитьВоВременноеХранилище(Остатки, АдресОстатков);
	
	ДоступныеОстаткиПерезаполнить(Форма);
	
КонецПроцедуры

// Заполнение служебных реквизитов табличной части и шапки формы,
// необходимых для условного оформления.
// Заполняемые реквизиты формы:
//  Форма.ДатаОтгрузкиОбязательна
//  Форма.СкладОбязателен
//  СтрокаКоллекции.ДатаОтгрузкиОбязательна
//  СтрокаКоллекции.СкладОбязателен
// Событие обработки табличных частей:
//  "ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения".
// 
// Параметры:
//  ПараметрыДокумента - Структура - данные формы:
//   * Коллекция - ДанныеФормыКоллекция - таблица формы, связанная с заказом на отгрузку
//   * Объект    - ДанныеФормыСтруктура - объект формы связанный с заказом на отгрузку,
//                                        в том числе поле "Ссылка" для определения типа заказа на отгрузку.
Процедура ЗаполнитьСлужебныеРеквизитыФормыДокумента(ПараметрыДокумента) Экспорт
	
	Форма = ПараметрыДокумента.Форма;
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	Таблицы = ПолучитьИзВременногоХранилища(ПараметрыВстраивания.СлужебныеПараметры.АдресТаблицыДанныхФормы);
	ЗаполнитьТаблицыИзДанныхФормы(Таблицы, Форма, Неопределено);
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ДобавитьВременнуюТаблицуДанныхДокумента(Запрос.МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания);
	
	Запрос.УстановитьПараметр("ТолькоОшибки", Ложь);
	Таблица = ТаблицаОбязательностиЗаполненияПоВременнойТаблицеДанныхДокумента(Запрос);
	
	Коллекция = ПараметрыДокумента.Коллекция;
	Для Каждого Строка Из Таблица Цикл
		ЗаполнитьЗначенияСвойств(
			Коллекция.НайтиПоИдентификатору(Строка.НомерСтроки),
			Строка,
			"СкладОбязателен,ДатаОтгрузкиОбязательна");
	КонецЦикла;
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(
		Коллекция,
		ПараметрыДокумента.Форма.ДатаОтгрузкиОбязательна,
		ПараметрыДокумента.Форма.СкладОбязателен);
	
КонецПроцедуры

// Актуализирует дату отгрузки в шапке и табличной части после заполнения обеспечения в заказе.
//
// Параметры:
//  ПараметрыЗаполнения - см. ОбеспечениеВДокументахКлиент.ПараметрыОбработкиДатОтгрузкиПослеЗаполненияОбеспечения
//  НеОтгружатьЧастями - Булево - признак "Не отгружать частями" документа.
//  ДатаОтгрузки - Дата - дата отгрузки из шапки документа.
//  Товары - ДанныеФормыКоллекция - табличная часть документа.
//  ИмяПоля - Строка - имя поля даты отгрузки в табличной части заказа.
//  ЕстьПереданРанее - Булево - в табличной части могут быть строки с действием ПереданРанее, надо очищать дату отгрузки для них.
// Возвращаемое значение:
//  Булево - Истина, если есть изменения даты отгрузки
Функция АктуализироватьДатуОтгрузки(ПараметрыЗаполнения, НеОтгружатьЧастями, ДатаОтгрузки, Товары, ИмяПоля, ЕстьПереданРанее = Ложь) Экспорт
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.СнятьФлагОтгружатьОднойДатой Тогда
		
		НеОтгружатьЧастями = Ложь;
		Для Каждого Строка Из Товары Цикл
			Если ЕстьПереданРанее И Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ПереданРанее Тогда
				Строка[ИмяПоля] = '00010101';
			Иначе
				Строка[ИмяПоля] = ДатаОтгрузки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьДатуОтгрузкиОднойДатой Тогда
		
		ДатаОтгрузки = НачалоДня(ТекущаяДатаСеанса());
		Для Каждого Строка Из Товары Цикл
			Если ЕстьПереданРанее И Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ПереданРанее Тогда
				Строка[ИмяПоля] = '00010101';
			Иначе
				Строка[ИмяПоля] = ДатаОтгрузки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения.ЗаполнитьДатуОтгрузкиОднойДатой;
	
КонецФункции

// Заполнение даты отгрузки в заказе, если дата отгрузки не заполнена или в прошлом.
// 
// Параметры:
//  Изменения                      - Массив         - массив строк табличной части документа в которой нужно выполнить действие.
//  ИмяПоля                        - Строка         - имя поля даты отгрузки в табличной части.
//  ОтгружатьОднойДатой            - Булево         - признак, что заказ отгружается одной датой.
//  ДатаОтгрузки                   - Дата           - дата отгрузки одной датой, указанная в шапке документа.
// Возвращаемое значение:
//  Булево - Истина, если даты отгрузки изменились
Функция ПроверитьЗаполнитьДатуОтгрузкиДляСтрокОтгрузить(Изменения, ИмяПоля, ОтгружатьОднойДатой, ДатаОтгрузки = Неопределено) Экспорт
	
	ВариантОтгрузить     = Перечисления.ВариантыОбеспечения.Отгрузить;
	
	ЗначениеЗаполнения = ?(ОтгружатьОднойДатой, ДатаОтгрузки, НачалоДня(ТекущаяДатаСеанса()));
	
	ДатаОтгрузкиПоменялась = Ложь;
	Для Каждого Строка Из Изменения Цикл
		
		НужноЗаполнить = ОтгружатьОднойДатой
			Или Строка.ВариантОбеспечения = ВариантОтгрузить;
			
		Если НужноЗаполнить Тогда
			Строка[ИмяПоля] = ЗначениеЗаполнения;
			ДатаОтгрузкиПоменялась = Истина;
		КонецЕсли;
		
	КонецЦикла;
	Возврат ДатаОтгрузкиПоменялась;
	
КонецФункции

// Рассчитывает дату отгрузки строки заказа после подбора товаров.
//
// Параметры:
//  ДатаОтгрузки - Дата - дата отгрузки из шапки документа.
//  ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения - вариант обеспечения в строке.
//  НачалоДня - Строка - начало текущего дня.
//
//  Возвращаемое значение:
//   Дата - дата отгрузки.
//
Функция ДатаОтгрузкиОбработкаВыбораПодбор(ДатаОтгрузки, ВариантОбеспечения, НачалоДня) Экспорт
	
	ЗначениеЗаполнения = ДатаОтгрузки;
	
	Если Не ЗначениеЗаполнено(ЗначениеЗаполнения) Тогда
		
		Если ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
				
				ЗначениеЗаполнения = НачалоДня;
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеЗаполнения;
	
КонецФункции

// Актуализирует дату отгрузки в шапке после заполнения обеспечения в заказе.
//
// Параметры:
//  ОтгружатьОднойДатой - Булево - признак "Не отгружать частями" документа.
//  ДатаОтгрузки - Дата - дата отгрузки из шапки документа.
//  Коллекция - ДанныеФормыКоллекция - табличная часть документа.
//  ИмяПоля - Строка - имя поля даты отгрузки в табличной части заказа.
//
Процедура АктуализироватьДатуОтгрузкиОднойДатой(ОтгружатьОднойДатой, ДатаОтгрузки, Коллекция, ИмяПоля) Экспорт
	
	Если ОтгружатьОднойДатой Тогда
		
		МаксимальноеЗначение = '00010101';
		Для Каждого Строка Из Коллекция Цикл
			Если Строка[ИмяПоля] > МаксимальноеЗначение Тогда
				МаксимальноеЗначение = Строка[ИмяПоля];
			КонецЕсли;
		КонецЦикла;
		
		ДатаОтгрузки = Макс(МаксимальноеЗначение, ДатаОтгрузки);
		
		Для Каждого Строка Из Коллекция Цикл
			Строка[ИмяПоля] = ДатаОтгрузки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет на форму условное оформление элемента (отметку незаполненного), исходя из значения статуса документа
// по следующему правилу: если реквизит не заполнен и статус не входит в некоторый перечень статусов,то пометка
// выставляется иначе снимается.
//
// Параметры:
//   УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление формы.
//   ИмяЭлемента - Строка - имя элемента для условного оформления.
//   ИмяРеквизита - Произвольный - Реквизит формы, связанный с элементом формы.
//   ИмяТЧ - Строка - имя табличной части, если требуется оформлять поле таблицы формы.
//   СтатусЧерновик - Массив - перечень статусов.
//
Процедура УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление, ИмяЭлемента, ИмяРеквизита, ИмяТЧ, СтатусЧерновик) Экспорт
	
	ПутьКРеквизиту = "Объект.Товары.ИмяРеквизита";
	ПутьКРеквизиту = СтрЗаменить(ПутьКРеквизиту, "Товары", ИмяТЧ + ".");
	
	Подстановка = ?(ИмяТЧ = "", "", ИмяТЧ + ".");
	ПутьКРеквизиту = "Объект.Товары.ИмяРеквизита";
	ПутьКРеквизиту = СтрЗаменить(ПутьКРеквизиту, "Товары.", Подстановка);
	ПутьКРеквизиту = СтрЗаменить(ПутьКРеквизиту, "ИмяРеквизита", ИмяРеквизита);
	
	// Установка отметки.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКРеквизиту);
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	Отбор.ПравоеЗначение = СтатусЧерновик;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Снятие отметки.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.ПравоеЗначение = СтатусЧерновик;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Снятие отметки.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКРеквизиту);
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

// Заполнение даты отгрузки в табличной части заказа
// Определяет максимальное значение поля в колонке коллекции значений.
//
// Параметры:
//  Коллекция - ДанныеФормыКоллекция - Коллекция, в которой необходимо заполнить поле.
//  ИмяПоля - Строка - имя колонки для поиска.
//  НачальноеЗначение - Число - начальное значение, относительно которого искать макс. значение.
//
// Возвращаемое значение:
//  Число - Максимальное значение поля.
//
Функция МаксимальноеЗначениеВКоллекции(Коллекция, ИмяПоля, НачальноеЗначение) Экспорт

	МаксимальноеЗначение = НачальноеЗначение;
	Для Каждого Строка Из Коллекция Цикл

		Если Строка[ИмяПоля] > МаксимальноеЗначение Тогда
			МаксимальноеЗначение = Строка[ИмяПоля];
		КонецЕсли;

	КонецЦикла;

	Возврат МаксимальноеЗначение;

КонецФункции

// Заполнение даты отгрузки в табличной части заказа
// Заполняет значение поля в строках коллекции значений.
//
// Параметры:
//  Коллекция - ДанныеФормыКоллекция - Коллекция, в которой необходимо заполнить поле.
//  ИмяПоля - Строка - имя колонки, которую необходимо заполнить.
//  ЗначениеЗаполнения - ЛюбаяСсылка, Число, Дата, Булево - Значение для заполнения.
//  ВыделенныеСтроки - Массив - строки, в которых необходимо заполнить значение.
//
Процедура ЗаполнитьРеквизитВКоллекции(Коллекция, ИмяПоля, ЗначениеЗаполнения, ВыделенныеСтроки = Неопределено) Экспорт

	Если ВыделенныеСтроки = Неопределено Тогда

		Для Каждого СтрокаТаблицы Из Коллекция Цикл
			СтрокаТаблицы[ИмяПоля] = ЗначениеЗаполнения;
		КонецЦикла;

	Иначе

		Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
			СтрокаТаблицы = Коллекция.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТаблицы[ИмяПоля] = ЗначениеЗаполнения;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Возвращает текст "Обработано строк".
// 
// Параметры:
//   Количество - Число - количество отработанных строк.
//
// Возвращаемое значение:
//   Строка - текст "Обработано строк: количество".
//
Функция ТекстОбработаноСтрок(Количество) Экспорт
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обработано строк: %1'"), Количество);
КонецФункции

// Возвращает текст "Желаемая дата отгрузки".
// 
// Возвращаемое значение:
//   Строка - текст "Желаемая дата отгрузки".
//
Функция ПодсказкаДатаОтгрузки() Экспорт
	Возврат НСтр("ru ='Желаемая дата отгрузки'");
КонецФункции

// Добавляет условное оформление элемента связанного с флагом "Обособленно" в заказе.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление формы.
//  ЭлементФормыОбособленно - ПолеФормы - элемент формы связанный с признаком "Обособленно".
//  ПутьДанныхВариантОбеспечения - Строка - путь к данным поля "Вариант обеспечения".
//  ПутьДанныхТипНоменклатуры  - Строка - путь к данным к полю "Тип номенклатуры".
//
Процедура УстановитьУсловноеОформлениеОбособленно(УсловноеОформление, ЭлементФормыОбособленно, ПутьДанныхВариантОбеспечения, ПутьДанныхТипНоменклатуры) Экспорт
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормыОбособленно.Имя);
	
	СписокТиповНоменклатуры = Новый СписокЗначений();
	СписокТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	СписокТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьДанныхТипНоменклатуры);
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.ПравоеЗначение = СписокТиповНоменклатуры;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормыОбособленно.Имя);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьДанныхВариантОбеспечения);
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Перечисления.ВариантыОбеспечения.Отгрузить;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Проверяет наличие у пользователя права просмотра гиперссылки состояния обеспечения в заказе
//
// Возвращаемое значение:
//  Булево  - Истина если право есть, Ложь - в противном случае.
//
Функция ЕстьПравоПросмотраГиперссылкиСостоянияОбеспечения() Экспорт
	
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.СостояниеОбеспеченияЗаказов);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обслуживающие формы списков документов

// Выполняет действие по заполнению обеспечения в заказе из списка заказов.
//
// Параметры:
//  Заказы - Массив из ЛюбаяСсылка - заказы выделенные в списке для выполнения действий обеспечения.
//  КодДействия - Строка - условное обозначение команды "ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ" или "ДЕЙСТВИЕ_ОТГРУЗИТЬ"
//                         или "ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ" или "ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ".
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы, в хранилище которой будет
//                                                       помещен результат выполнения в фоне.
//  ПараметрыВстраиванияВходящие - см. ДоступныеОстаткиПараметрыВстраивания
//
// Возвращаемое значение:
//  Структура - результат выполнения действий над заказами.
//
Функция ВыполнитьДействиеДляЗаказов(Заказы, КодДействия, УникальныйИдентификатор, ПараметрыВстраиванияВходящие) Экспорт
	
	ПараметрыВстраивания = ПараметрыВстраиванияВходящие;
	Если Заказы.Количество() > 0 Тогда
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Заказы[0]);
		Если ПараметрыВстраивания = Неопределено Тогда
			ПараметрыВстраивания = МенеджерДокумента.ДоступныеОстаткиПараметрыВстраивания();
		КонецЕсли;
	КонецЕсли;
	
	Параметры = Новый Структура("Заказы,КодДействия", Заказы,КодДействия);
	ПараметрыЗаполнения = Неопределено;
	
	Если КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ" И Заказы.Количество() > 0 Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("НуженВопрос", НуженВопросОбОтгрузкеОднойДатой(ПараметрыВстраивания, Заказы));
		ДатаОтгрузкиНовыхСтрок = НачалоДня(ТекущаяДатаСеанса());
		Результат.Вставить("ДатаОтгрузкиНовыхСтрок", ДатаОтгрузкиНовыхСтрок);
		
		Если Не Результат.НуженВопрос Тогда
			
			Параметры.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
			Параметры.Вставить("ПараметрыВстраивания", ПараметрыВстраивания);
			Результат = ВыполнитьДействиеДляЗаказовПослеВопросаФоновымЗаданием(Параметры, УникальныйИдентификатор);
			
		Иначе
			Результат.Вставить("ПараметрыВстраивания", ПараметрыВстраивания);
		КонецЕсли;
		
	Иначе
		
		Параметры.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
		Параметры.Вставить("ПараметрыВстраивания", ПараметрыВстраивания);
		Результат = ВыполнитьДействиеДляЗаказовПослеВопросаФоновымЗаданием(Параметры, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет действие по заполнению обеспечения в заказе из списка заказов после задания вопроса об отгрузке одной датой.
//
// Параметры:
//  Параметры - Структура - структура параметров:
//   * КодДействия - Строка - условное обозначение команды "ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ" или "ДЕЙСТВИЕ_ОТГРУЗИТЬ"
//                   или "ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ" или "ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ"
//   * ПараметрыЗаполнения - Структура - структура параметров:
//     ** СнятьФлагОтгружатьОднойДатой - Булево - результат ответа на вопрос об отгрузке одной датой.
//     ** ЗаполнитьДатуОтгрузкиОднойДатой - Булево - результат ответа на вопрос об отгрузке одной датой.
//   * Заказы - Массив из ЛюбаяСсылка - заказы для установки действия.
//   * ПараметрыВстраивания - см. ДоступныеОстаткиПараметрыВстраивания
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * СписокОшибок - Массив - массив содержащий тексты ошибок обработки документов.
//   * КоличествоОбработано - Число - количество обработанных документов.
//
Функция ВыполнитьДействиеДляЗаказовПослеВопроса(Параметры) Экспорт
	
	Заказы = Параметры.Заказы;
	ПараметрыВстраивания = Параметры.ПараметрыВстраивания;
	Если ПараметрыВстраивания = Неопределено И Заказы.Количество() > 0 Тогда
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Заказы[0]);
		ПараметрыВстраивания = МенеджерОбъекта.ДоступныеОстаткиПараметрыВстраивания();
		
	КонецЕсли;
	КодДействия = Параметры.КодДействия;
	ПараметрыЗаполнения = Параметры.ПараметрыЗаполнения;
	Результат = Новый Структура("СписокОшибок,КоличествоОбработано", Новый Массив);
	
	Для Каждого Ссылка Из Заказы Цикл
		
		ТекстОшибки = "";
		
		НачатьТранзакцию();
		Попытка
			
			ТекстОшибки = НСтр("ru = 'Не удалось заблокировать объект, возможно он редактируется. Для %1 установка действия не выполнена.'");
			
			ЗаблокироватьДанныеДляРедактирования(Ссылка);
			
			Блокировка = Новый БлокировкаДанных();
			
			ЭлементБлокировки = Блокировка.Добавить(Ссылка.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ТекстОшибки = НСтр("ru = 'Не удалось установить блокировку объекта. Для %1 установка действия не выполнена.'");
			
			Блокировка.Заблокировать();
			
			ТекстОшибки = НСтр("ru = 'Не удалось обработать объект. Для %1 установка действия не выполнена.'");
			
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			Если ДокументОбъект.Проведен Тогда
				
				ТаблицаИзменений = ЗаполнитьВариантОбеспеченияПоОстаткамДляВыделенныхСтрокОбъекта(
					ДокументОбъект,
					КодДействия,
					ПараметрыЗаполнения,
					Неопределено,
					ПараметрыВстраивания);
				
				Если КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ" И ТаблицаИзменений.Количество() > 0 Тогда
					
					ВопросБылЗадан = ПараметрыЗаполнения <> Неопределено;
					НуженВопрос = ПараметрыВстраивания.ВыражениеДляВопросаПриВыполненииДействияВСпискеЗаказов <> "НЕОПРЕДЕЛЕНО"
						И НуженВопросОбОтгрузкеОднойДатой(ПараметрыВстраивания, Ссылка);
					
					Если ВопросБылЗадан <> НуженВопрос Тогда
						Текст = НСтр("ru = 'Ошибка заполнения действия в списке документов. Изменились данные документов.'");
						ВызватьИсключение Текст;
					КонецЕсли;
						
				КонецЕсли;
				
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
				
				ТекстОшибки = НСтр("ru = 'Не удалось записать/провести объект. Для %1 установка действия не выполнена.'");
				
				Если ДокументОбъект.ПроверитьЗаполнение() Тогда
					ДокументОбъект.Записать(РежимЗаписи);
				Иначе
					
					Результат.СписокОшибок.Добавить(Новый Структура("Текст,Ссылка", СтрШаблон(ТекстОшибки, Ссылка), Ссылка));
					
					Для Каждого ТекОшибка Из ПолучитьСообщенияПользователю(Истина) Цикл
						
						Ошибка = Новый Структура;
						Ошибка.Вставить("Ссылка", Ссылка);
						Ошибка.Вставить("Текст",  ТекОшибка.Текст);
						Ошибка.Вставить("Поле",   ТекОшибка.Поле);
						Ошибка.Вставить("ПутьКДанным", ТекОшибка.ПутьКДанным);
						
						Результат.СписокОшибок.Добавить(Ошибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				ТекстОшибки = НСтр("ru = 'Документ %1 не проведен и не будет обработан.'");
				Результат.СписокОшибок.Добавить(Новый Структура("Текст,Ссылка", СтрШаблон(ТекстОшибки, Ссылка), Ссылка));
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
			ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Заполнение действий в заказе'");
			ПараметрыЖурнала.Метаданные    = Ссылка.Метаданные();
			ПараметрыЖурнала.Данные        = Ссылка;
			ОбщегоНазначенияУТ.ЗаписатьВЖурналСообщитьПользователю(
				ПараметрыЖурнала,
				УровеньЖурналаРегистрации.Информация,
				НСтр("ru = 'Заполнение действий в заказе'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Результат.СписокОшибок.Добавить(Новый Структура("Текст,Ссылка", СтрШаблон(ТекстОшибки, Ссылка), Ссылка));
			
		КонецПопытки;
		
	КонецЦикла;
	Результат.КоличествоОбработано = Заказы.Количество() - Результат.СписокОшибок.Количество();
	
	Возврат Результат;
	
КонецФункции

// Выполняет действие по заполнению обеспечения в заказе из списка заказов после задания вопроса об отгрузке одной датой.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЗаказКлиента, ДокументОбъект.ЗаказНаПеремещение - обрабатываемый документ, любой заказ.
//  КодДействия - Строка - условное обозначение варианта обеспечения "ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ" или "ДЕЙСТВИЕ_ОТГРУЗИТЬ"
//                           или "ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ" или "ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ".
//  ПараметрыЗаполнения - Структура - структура параметров:
//   * СнятьФлагОтгружатьОднойДатой - Булево - результат ответа на вопрос об отгрузке одной датой.
//   * ЗаполнитьДатуОтгрузкиОднойДатой - Булево - результат ответа на вопрос об отгрузке одной датой.
//  Строки - Массив - массив содержащий строки, которые необходимо обработать в документе.
//  ПараметрыВстраивания - см. ДоступныеОстаткиПараметрыВстраивания
//  ДополнительныеПараметры - Структура - доолнительние параметры используемые для получения остатков.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. ТаблицаДляУстановкиДействий
//  
Функция ЗаполнитьВариантОбеспеченияПоОстаткамДляВыделенныхСтрокОбъекта(ДокументОбъект, КодДействия, ПараметрыЗаполнения, Строки = Неопределено, ПараметрыВстраивания = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
	
	Если ПараметрыВстраивания = Неопределено Тогда
		ПараметрыВстраивания = МенеджерОбъекта.ДоступныеОстаткиПараметрыВстраивания();
	КонецЕсли;
	
	СлужебныеПараметры = Новый Структура("ЭтоДокумент", Истина);
	ПараметрыВстраивания.Вставить("СлужебныеПараметры", СлужебныеПараметры);
	
	Таблицы = Новый Соответствие();
	ВставитьТаблицы(Таблицы, ПараметрыВстраивания.ШаблонСериализацииДанныхФормы, "");
	ЗаполнитьИменаТаблицВСоотвествии(ПараметрыВстраивания, Таблицы);
	
	ТекстЗапроса = ТекстЗапросаВременнаяТаблицаДанныхДокумента(ПараметрыВстраивания, Таблицы);
	СлужебныеПараметры.Вставить("ТекстЗапросаВременнаяТаблицаДанныхДокумента", ТекстЗапроса);
	
	ЗаполнитьТаблицыИзОбъекта(Таблицы, Новый Структура("Объект", ДокументОбъект));
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДобавитьВременнуюТаблицуДанныхДокумента(Запрос.МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания);
	
	ТаблицаОформлено = ТаблицаОформлено(
		Запрос,
		РегистрыНакопления[ПараметрыВстраивания.ИмяРегистраОформленияОтгрузки],
		"ВременнаяТаблицаДанныхДокумента",
		"ВременнаяТаблицаДанныхДокумента");
	
	ОстаткиСклада = ОстаткиДляЗаписанногоДокумента(Запрос.МенеджерВременныхТаблиц, ДополнительныеПараметры);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура                 КАК Номенклатура,
		|	Таблица.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	Таблица.Характеристика               КАК Характеристика,
		|	Таблица.Склад                        КАК Склад,
		|	Таблица.ЗаказНаОтгрузку              КАК ЗаказНаОтгрузку,
		|	Таблица.КодСтроки                    КАК КодСтроки,
		|	Таблица.Обособленно                  КАК Обособленно,
		|	ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|				Таблица.Назначение
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ                            КАК Назначение,
		|	Таблица.ВариантОбеспечения           КАК ВариантОбеспечения,
		|	Таблица.Упаковка                     КАК Упаковка,
		|	Таблица.КоличествоУпаковок           КАК КоличествоУпаковок,
		|	Таблица.Количество                   КАК Количество,
		|	Таблица.НомерСтроки                  КАК ЭлементКоллекции,
		|	
		|	ЕСТЬNULL((Таблица.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИЛИ ЕСТЬNULL(НастройкаХарактеристика.КонтролироватьСвободныеОстатки,
		|				ЕСТЬNULL(НастройкаНоменклатура.КонтролироватьСвободныеОстатки,
		|				ЕСТЬNULL(НастройкаСклад.КонтролироватьСвободныеОстатки, ЛОЖЬ))))
		|			И НЕ Таблица.Номенклатура.ТипНоменклатуры В(
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)), ИСТИНА) КАК КонтролироватьСвободныеОстатки,
		|	Таблица.ДатаОтгрузкиВсехСтрокОднойДатой КАК ДатаОтгрузкиВсехСтрокОднойДатой
		|ИЗ
		|	ВременнаяТаблицаДанныхДокумента КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаХарактеристика
		|		ПО НастройкаХарактеристика.Склад          = Таблица.Склад
		|		 И НастройкаХарактеристика.Номенклатура   = Таблица.Номенклатура
		|		 И НастройкаХарактеристика.Характеристика = Таблица.Характеристика
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаНоменклатура
		|		ПО НастройкаНоменклатура.Склад        = Таблица.Склад
		|		 И НастройкаНоменклатура.Номенклатура = Таблица.Номенклатура
		|		 И НастройкаНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И НастройкаХарактеристика.Склад ЕСТЬ NULL
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаСклад
		|		ПО НастройкаСклад.Склад          = Таблица.Склад
		|		 И НастройкаСклад.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		 И НастройкаСклад.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И НастройкаХарактеристика.Склад ЕСТЬ NULL
		|		 И НастройкаНоменклатура.Склад ЕСТЬ NULL
		|ГДЕ
		|	НЕ Таблица.Отменено
		|		И НЕ Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПереданРанее)";
	ДанныеСтрок = Запрос.Выполнить().Выгрузить();
	
	МассивПутей = СтрРазделить(ПараметрыВстраивания.ИмяТаблицы, ".");
	ИмяТабличнойЧасти = "";
	Если МассивПутей.Количество() = 3 Тогда
		ИмяТабличнойЧасти = МассивПутей[2];
	КонецЕсли;
	Если ИмяТабличнойЧасти = "" Тогда
		Коллекция = ДанныеСтрок.Скопировать();
		Коллекция.Колонки.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
		Коллекция[0].ИдентификаторСтроки = 1;
		ИдентификаторыСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(1);
	Иначе
		Коллекция = ДокументОбъект[ИмяТабличнойЧасти];
		ИдентификаторыСтрок = ДокументОбъект[ИмяТабличнойЧасти].Выгрузить(Строки, "НомерСтроки").ВыгрузитьКолонку("НомерСтроки");
	КонецЕсли;
	
	КоэффициентыУпаковок = КоэффициентыУпаковок(Коллекция, Неопределено);
	ДанныеУчета = Новый Структура("ОстаткиСклада,ТаблицаОформлено", ОстаткиСклада,ТаблицаОформлено);
	ТаблицаИзменений = ТаблицаДляУстановкиДействий(
		КодДействия,
		Ложь,
		Коллекция,
		ИдентификаторыСтрок,
		ДанныеСтрок,
		КоэффициентыУпаковок,
		ДанныеУчета);
		
	Если ИмяТабличнойЧасти = "" Тогда
		Если ТаблицаИзменений.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ТаблицаИзменений[0], "ВариантОбеспечения");
		КонецЕсли;
	Иначе
		УстановитьДействияИзТаблицы(ДокументОбъект[ИмяТабличнойЧасти], ТаблицаИзменений);
	КонецЕсли;
	
	Режим = ОбеспечениеВДокументахКлиентСервер.РежимЗаполнениеДействияИзСписка();
	
	ПараметрыЗаполненияТекущие = Неопределено;
	Если КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ" И ТаблицаИзменений.Количество() > 0 И ДанныеСтрок.Количество() > 0 Тогда
		Если ДанныеСтрок[0].ДатаОтгрузкиВсехСтрокОднойДатой <> Неопределено
			И ДанныеСтрок[0].ДатаОтгрузкиВсехСтрокОднойДатой < НачалоДня(ТекущаяДатаСеанса()) Тогда
			
			Если ПараметрыЗаполнения <> Неопределено Тогда
				ПараметрыЗаполненияТекущие = Новый Структура(Новый ФиксированнаяСтруктура(ПараметрыЗаполнения));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

		МенеджерОбъекта.ПослеЗаполненияОбеспечения(ДокументОбъект, ТаблицаИзменений, Режим, ПараметрыЗаполненияТекущие);
	
	Возврат ТаблицаИзменений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обслуживающие модули объектов документа

// Проверяет заполнение документа для проведения по регистрам обеспечения.
//
// Параметры:
//  Объект - ДокументОбъект - проверяемый документ.
//  ПараметрыВстраивания - см. ДоступныеОстаткиПараметрыВстраивания.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица ошибок заполнения документа.
//
Функция ТаблицаОшибокЗаполнения(Объект, ПараметрыВстраивания) Экспорт
	
	СлужебныеПараметры = Новый Структура("ЭтоДокумент", Истина);
	ПараметрыВстраивания.Вставить("СлужебныеПараметры", СлужебныеПараметры);
	
	Таблицы = Новый Соответствие();
	ВставитьТаблицы(Таблицы, ПараметрыВстраивания.ШаблонСериализацииДанныхФормы, "");
	ЗаполнитьИменаТаблицВСоотвествии(ПараметрыВстраивания, Таблицы);
	
	ТекстЗапроса = ТекстЗапросаВременнаяТаблицаДанныхДокумента(ПараметрыВстраивания, Таблицы);
	СлужебныеПараметры.Вставить("ТекстЗапросаВременнаяТаблицаДанныхДокумента", ТекстЗапроса);
	
	ЗаполнитьТаблицыИзОбъекта(Таблицы, Новый Структура("Объект", Объект));
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДобавитьВременнуюТаблицуДанныхДокумента(Запрос.МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания);
	
	Запрос.УстановитьПараметр("ТолькоОшибки", Истина);
	Таблица = ТаблицаОбязательностиЗаполненияПоВременнойТаблицеДанныхДокумента(Запрос);
	
	Возврат Таблица;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обсуживающие возможность создания накладной по заказу.

// Возвращает текст ошибки контроля остатков.
//
// Возвращаемое значение:
//  Строка - текст ошибок контроля остатков.
//
Функция ТекстОшибкиНетТоваровДоступныхДляОтгрузки() Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда

		ТекстОшибки = НСтр("ru='Нет товаров, доступных для отгрузки. Для начала процесса отгрузки необходимо указать действие
		                       |""Отгрузить"" или ""Отгрузить обособленно"" для одной или нескольких позиций номенклатуры заказа.'");

	Иначе

		ТекстОшибки = НСтр("ru='Нет товаров, доступных для отгрузки. Для начала процесса отгрузки необходимо
		                       |указать действие ""Отгрузить"" для одной или нескольких позиций номенклатуры заказа.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обсуживающие вызов общей формы "Состояние обеспечения заказов" в документах

// В форме заказа проверяет что документ проведен.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - ссылка на заказ.
//
// Возвращаемое значение:
//  Булево - Истина, если документ проведен, Ложь - в противном случае
//
Функция ГиперссылкаСостояниеОбеспеченияНажатиеДокументПроведен(Ссылка) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Проведен") = Истина;
	
КонецФункции

// Настраивает элементы формы связанные с гиперссылками состояния обеспечения.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма заказа.
//  
//
Процедура НастроитьГиперссылкиСостояниеОбеспечения(Форма) Экспорт
	
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	Если ПараметрыВстраивания.СлужебныеПараметры.НуженОбработчикОбновленияДоступности Тогда
		Возврат;
	КонецЕсли;
	Таблицы = ПолучитьИзВременногоХранилища(ПараметрыВстраивания.СлужебныеПараметры.АдресТаблицыДанныхФормы);
	ЗаполнитьТаблицыИзДанныхФормы(Таблицы, Форма, Неопределено);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ДобавитьВременнуюТаблицуДанныхДокумента(Запрос.МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ГотовКОбеспечению
		|ИЗ
		|	ВременнаяТаблицаДанныхДокумента КАК Таблица
		|ГДЕ
		|	Таблица.ГотовКОбеспечению И НЕ Таблица.Отменено";
	ГотовКОбеспечению = Не Запрос.Выполнить().Пустой();
	ПараметрыВстраивания.СлужебныеПараметры.ГотовКОбеспечению = ГотовКОбеспечению;
	
	Объект = Форма.Объект; // ДокументОбъект
	СвойстваГиперссылки = СвойстваГиперссылкиСостояниеОбеспечения(
		Ложь,
		Объект.Ссылка,
		ГотовКОбеспечению);
	
	Элементы = Форма.Элементы;
	ИменаЭлементов = ПараметрыВстраивания.ИменаЭлементов;
	Элементы[ИменаЭлементов["СтраницыГиперссылкаСостояниеОбеспечения"]].ТекущаяСтраница
		= Элементы[ИменаЭлементов[СвойстваГиперссылки.ИмяСтраницы]];
	Элементы[ИменаЭлементов[СвойстваГиперссылки.ИмяГиперссылки]].Заголовок = СвойстваГиперссылки.Заголовок;
	
КонецПроцедуры

// Свойства для формирования надписи состояния обеспечения в форме заказа.
//
// Параметры:
//  Модифицированность - Булево - признак, что заказ модифицирован в форме.
//  Ссылка - ЛюбаяСсылка - ссылка на заказ.
//  ГотовКОбеспечению - Булево - признак, что документ имеет надлежащий статус, чтобы считаться обеспеичваемым.
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * Заголовок - Строка - текст отображаемый в заголовке гиперссылки.
//   * ИмяСтраницы - Строка - имя страницы формы заказа на которой нужная гиперссылка.
//   * ИмяГиперссылки - Строка - имя элемента формы отображаемой гиперссылки.
//
Функция СвойстваГиперссылкиСостояниеОбеспечения(Модифицированность, Ссылка, ГотовКОбеспечению) Экспорт
	
	СвойстваГиперссылки = Новый Структура("Заголовок,ИмяСтраницы,ИмяГиперссылки");
	Если Модифицированность Или Ссылка.Пустая() Или Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Проведен") Тогда
		
		СвойстваГиперссылки.Заголовок      = НСтр("ru = 'Состояние обеспечения'");
		СвойстваГиперссылки.ИмяСтраницы    = "СтраницаГиперссылкаСостояниеОбеспечения";
		СвойстваГиперссылки.ИмяГиперссылки = "ГиперссылкаСостояниеОбеспечения";
		
	Иначе
		
		ТекстИПараметры = ТекстИПараметрыЗапросаОбеспеченияЗаказовНаОтгрузку("ВременнаяТаблица");
		ТекстИПараметры.Параметры.НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
		ТекстИПараметры.Параметры.ЗаказыНаОтгрузку = Ссылка;
		
		Запрос = Новый Запрос(ТекстИПараметры.Текст);
		Для Каждого Свойство Из ТекстИПараметры.Параметры Цикл
			Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
		КонецЦикла;
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		Таблица = Запрос.МенеджерВременныхТаблиц.Таблицы["ВременнаяТаблица"].ПолучитьДанные().Выгрузить();
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		
		Если Таблица.Количество() = 0 Тогда
			
			Если Не ГотовКОбеспечению Тогда
				СвойстваГиперссылки.Заголовок      = НСтр("ru = 'Состояние обеспечения'");
				СвойстваГиперссылки.ИмяСтраницы    = "СтраницаГиперссылкаСостояниеОбеспеченияСЗаголовком";
				СвойстваГиперссылки.ИмяГиперссылки = "ГиперссылкаСостояниеОбеспеченияСЗаголовком";
			Иначе
				СвойстваГиперссылки.Заголовок      = НСтр("ru = 'Отгружается/Отгружено'");
				СвойстваГиперссылки.ИмяСтраницы    = "СтраницаГиперссылкаСостояниеОбеспеченияОтгружается";
				СвойстваГиперссылки.ИмяГиперссылки = "ГиперссылкаСостояниеОбеспеченияОтгружается";
			КонецЕсли;
			
		ИначеЕсли Таблица[0].РезервПревышаетОстатки Тогда
			
			СвойстваГиперссылки.Заголовок      = НСтр("ru = 'Резерв превышает остаток на складе'");
			СвойстваГиперссылки.ИмяСтраницы    = "СтраницаГиперссылкаСостояниеОбеспеченияПроблема";
			СвойстваГиперссылки.ИмяГиперссылки = "ГиперссылкаСостояниеОбеспеченияПроблема";
			
		ИначеЕсли Таблица[0].МожноОтгрузитьСейчас Тогда
			
			СвойстваГиперссылки.Заголовок      = НСтр("ru = 'Можно отгрузить сейчас'");
			СвойстваГиперссылки.ИмяСтраницы    = "СтраницаГиперссылкаСостояниеОбеспеченияСЗаголовком";
			СвойстваГиперссылки.ИмяГиперссылки = "ГиперссылкаСостояниеОбеспеченияСЗаголовком";
			
		ИначеЕсли Таблица[0].ДатаОтгрузкиНеИсполнима Тогда
			
			СвойстваГиперссылки.Заголовок      = НСтр("ru = 'Дата отгрузки не исполнима'");
			СвойстваГиперссылки.ИмяСтраницы    = "СтраницаГиперссылкаСостояниеОбеспеченияПроблема";
			СвойстваГиперссылки.ИмяГиперссылки = "ГиперссылкаСостояниеОбеспеченияПроблема";
			
		ИначеЕсли ЗначениеЗаполнено(Таблица[0].ВозможнаяДатаОтгрузки) Тогда
			
			ШаблонЗаголовка = НСтр("ru = 'Возможная дата отгрузки: %ВозможнаяДатаОтгрузки%'");
			ДатаТекст = Формат(Таблица[0].ВозможнаяДатаОтгрузки, "ДЛФ=D");
			СвойстваГиперссылки.Заголовок      = СтрЗаменить(ШаблонЗаголовка, "%ВозможнаяДатаОтгрузки%", ДатаТекст);
			СвойстваГиперссылки.ИмяСтраницы    = "СтраницаГиперссылкаСостояниеОбеспеченияСЗаголовком";
			СвойстваГиперссылки.ИмяГиперссылки = "ГиперссылкаСостояниеОбеспеченияСЗаголовком";
			
		Иначе
			
			СвойстваГиперссылки.Заголовок      = НСтр("ru = 'Плановая дата обеспечения не определена'");
			СвойстваГиперссылки.ИмяСтраницы    = "СтраницаГиперссылкаСостояниеОбеспеченияСЗаголовком";
			СвойстваГиперссылки.ИмяГиперссылки = "ГиперссылкаСостояниеОбеспеченияСЗаголовком";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СвойстваГиперссылки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обслуживающие получение остатков в форме Обработка.ЗапросКоличестваИСерий.Форма".

// Возвращает текст запроса о доступных остатках в разрезе дат для вывода информации в подбор.
// 
// Параметры:
//   ЕстьХарактеристика         - Булево               - признак наличия характеристик.
//   СоставРазделовЗапроса      - Массив, Неопределено - разделы запроса.
//
// Возвращаемое значение:
//   Строка - текст запроса доступных остатков.
//
Функция ТекстЗапросаДоступныхОстатковПоДатамДляПодбора(ЕстьХарактеристика, СоставРазделовЗапроса) Экспорт
	
	Если СоставРазделовЗапроса = Неопределено Тогда
		СоставРазделовЗапроса = Новый Массив();
	КонецЕсли;
	
	СоставРазделовЗапроса.Добавить("ПланируемыеОстатки");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РаспределениеЗапасов.Склад                        КАК Склад,
		|	МАКСИМУМ(РаспределениеЗапасов.Склад.Наименование) КАК СкладНаименование,
		|	РаспределениеЗапасов.ДатаПоступления              КАК Период,
		|	СУММА(РаспределениеЗапасов.ВНаличии)              КАК ВНаличии,
		|	СУММА(РаспределениеЗапасов.Свободно)              КАК Свободно,
		|	ВЫБОР КОГДА РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе) ТОГДА
		|			0
		|			ИНАЧЕ
		|			1
		|		КОНЕЦ КАК Состояние
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|ГДЕ
		|	РаспределениеЗапасов.Состояние В(
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление))
		|		И РаспределениеЗапасов.Номенклатура   = &Номенклатура
		|		И РаспределениеЗапасов.Характеристика = &Характеристика
		|		И РаспределениеЗапасов.Назначение     = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И РаспределениеЗапасов.Склад В(&Склады)
		|СГРУППИРОВАТЬ ПО
		|	РаспределениеЗапасов.Склад,
		|	РаспределениеЗапасов.Состояние,
		|	РаспределениеЗапасов.ДатаПоступления
		|УПОРЯДОЧИТЬ ПО
		|	СкладНаименование,
		|	Склад,
		|	Состояние,
		|	Период";
	
	Если Не ЕстьХарактеристика Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Характеристика", "РаспределениеЗапасов.Характеристика");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обсуживающие подбор товаров в документы.

// Возвращает дату отгрузки установленную в шапке документа, если таковая в документе есть.
//
// Параметры:
//   ПараметрыДокумента - Структура - структура с полями:
//    * ДоступныеОстаткиПараметрыДокумента - см. ДоступныеОстаткиПараметрыВстраивания
//
// Возвращаемое значение:
//  Дата, Неопределено - дата отгрузки из шапки документа.
//
Функция ДатаОтгрузкиВсехСтрокОднойДатой(ПараметрыДокумента) Экспорт
	
	ДатаОтгрузкиВсехСтрокОднойДатой = Неопределено;
	Если ПараметрыДокумента <> Неопределено Тогда
		
		ПараметрыВстраивания = ПараметрыДокумента.ПараметрыВстраивания;
		Если ПараметрыВстраивания <> Неопределено Тогда
			
			Таблицы = ПолучитьИзВременногоХранилища(ПараметрыВстраивания.СлужебныеПараметры.АдресТаблицыДанныхФормы);
			ЗаполнитьТаблицыИзСериализованногоОбъекта(
				Таблицы,
				ПараметрыДокумента.ДанныеПрограммногоОбъекта,
				ПараметрыВстраивания,
				Новый Структура());
			
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
			ДобавитьВременнуюТаблицуДанныхДокумента(МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания);
			
			Запрос = Новый Запрос();
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	Таблица.ДатаОтгрузкиВсехСтрокОднойДатой КАК ДатаОтгрузкиВсехСтрокОднойДатой
				|ИЗ
				|	ВременнаяТаблицаДанныхДокумента КАК Таблица";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДатаОтгрузкиВсехСтрокОднойДатой = Выборка.ДатаОтгрузкиВсехСтрокОднойДатой;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДатаОтгрузкиВсехСтрокОднойДатой;
	
КонецФункции

// Получение распределения запасов в контексте редактируемого документа.
//
// Параметры:
//  Форма          - Структура, ФормаКлиентскогоПриложения - Форма документа.
//  ОтборСостояний - Массив из ПеречислениеСсылка.РаспределениеЗапасовСостояния - передается если необходимо получать
//                                                                                не все состояния а только некоторые.
//                 - Неопределено - если нужно получать все состояния.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица распределения запасов для редактируемого документа.
//                     Структура таблицы соответствует структуре регистра "Распределение запасов".
//                     В таблице присутствуют только товары, склад, назначение указанные в объекте (передается в параметре Форма).
//                     Для этих товаров в таблице присутствуют Состояния свободного остатка:
//                     "ОстатокНаСкладе", "ОжидаемоеПоступление", "ПоступлениеНеподтвержденное".
//                     Для этих товаров в таблице также присутствует информация о резервах заказов в контексте объекта (те заказы которые указаны в параметре Объект)
//                     а именно Состояния: "ВРезерве" (в документе указано действие "Резервировать"),
//                     "ОбеспеченНаСкладе" (в документе указано действие "К обеспечению"),
//                     "ОбеспеченКДате" (в документе указано действие "К обеспечению"),
//                     "Обеспечить" (в документе указано действие "К обеспечению"),
//                     "НеОбеспечивать" (в документе указано действие "Не обеспечивать").
//
Функция РаспределениеЗапасовДляРедактируемогоДокумента(Форма, ОтборСостояний = Неопределено) Экспорт
	
	Модифицированность = Форма.Модифицированность;
	Если ОтборСостояний = Неопределено Тогда
		
		ОтборСостояний = Новый Массив();
		ОтборСостояний.Добавить(Перечисления.РаспределениеЗапасовСостояния.НеОбеспечивать);
		ОтборСостояний.Добавить(Перечисления.РаспределениеЗапасовСостояния.Обеспечить);
		ОтборСостояний.Добавить(Перечисления.РаспределениеЗапасовСостояния.ВРезерве);
		ОтборСостояний.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе);
		ОтборСостояний.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу);
		ОтборСостояний.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОбеспеченКДате);
		ОтборСостояний.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОстатокНаСкладе);
		ОтборСостояний.Добавить(Перечисления.РаспределениеЗапасовСостояния.ПоступлениеНеПодтвержденное);
		ОтборСостояний.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОжидаемоеПоступление);
		
	КонецЕсли;
	
	Результат = Неопределено;
	
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	Таблицы = ПолучитьИзВременногоХранилища(ПараметрыВстраивания.СлужебныеПараметры.АдресТаблицыДанныхФормы);
	ЗаполнитьТаблицыИзДанныхФормы(Таблицы, Форма, Неопределено);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ДобавитьВременнуюТаблицуДанныхДокумента(Запрос.МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания);
	Запрос.Текст = ВременнаяТаблицаДвиженийДокумента();
	Запрос.УстановитьПараметр("Ссылка", Неопределено);
	Запрос.УстановитьПараметр("СсылкаНовогоНазначения", Справочники.Назначения.ПолучитьСсылку());
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.ЗаказНаОтгрузку КАК Заказ
		|ИЗ
		|	ВременнаяТаблицаДвиженийДокумента КАК Таблица";
	
	Запрос.УстановитьПараметр("ОтборСостояний", ОтборСостояний);
	
	Заказы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заказ");
	Заказы.Добавить(Неопределено); // чтобы получать записи о свободных остатках.
	ОбъектФормы = Форма.Объект; // ДокументОбъект
	Заказы.Добавить(ОбъектФормы.Ссылка); // для этапов перерабатываемых на стороне.
	Запрос.УстановитьПараметр("Заказы", Заказы);
	
	Если Модифицированность Тогда
		
		ТаблицаДвижений = МенеджерВременныхТаблиц.Таблицы["ВременнаяТаблицаДвиженийДокумента"].ПолучитьДанные().Выгрузить();
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Таблица.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
			|	Таблица.Приоритет КАК Приоритет,
			|	Таблица.ДатаДокумента КАК ДатаДокумента
			|ИЗ
			|	ВременнаяТаблицаДанныхДокумента КАК Таблица";
		ТаблицаИмитацияРеестра = Запрос.Выполнить().Выгрузить();
		РаспределениеЗапасовДвижения.ДобавитьКолонкиРегистра(ТаблицаДвижений);
		РаспределениеЗапасов.СостояниеСУчетомОтраженияИзменений(
			Заказы,
			ТаблицаДвижений,
			МенеджерВременныхТаблиц,
			ТаблицаИмитацияРеестра);
			
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Записи.Номенклатура            КАК Номенклатура,
			|	Записи.Характеристика          КАК Характеристика,
			|	Записи.Склад                   КАК Склад,
			|	Записи.Назначение              КАК Назначение,
			|	Записи.Состояние               КАК Состояние,
			|	Записи.ЗаказНаОтгрузку         КАК ЗаказНаОтгрузку,
			|	Записи.ЖелаемаяДатаОтгрузки    КАК ЖелаемаяДатаОтгрузки,
			|	Записи.ЗаказНаПоступление      КАК ЗаказНаПоступление,
			|	Записи.ДатаПоступления         КАК ДатаПоступления,
			|	ВЫБОР КОГДА Состояние В(
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.НеОбеспечивать),
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить)) ТОГДА
			|					
			|					Записи.НеОбеспечено
			|					
			|			КОГДА Состояние В(
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве),
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе),
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате)) ТОГДА
			|					
			|					Записи.Зарезервировано + Записи.Обеспечено
			|					
			|			КОГДА Состояние В(
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе),
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПоступлениеНеПодтвержденное),
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление)) ТОГДА
			|					
			|					Записи.Свободно
			|					
			|		КОНЕЦ КАК Количество
			|ИЗ
			|	ИмитацияОтражения КАК Записи
			|ГДЕ
			|	Записи.Состояние В(&ОтборСостояний)
			|		И Записи.ЗаказНаОтгрузку В(&Заказы)";
			
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Заказы.Номенклатура   КАК Номенклатура,
			|	Заказы.Характеристика КАК Характеристика,
			|	Заказы.Склад          КАК Склад,
			|	Заказы.Назначение     КАК Назначение
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	РегистрСведений.РаспределениеЗапасов КАК Заказы
			|ГДЕ
			|	Заказы.ЗаказНаОтгрузку В(&Заказы)
			|		И Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
			|
			|;
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Записи.Номенклатура            КАК Номенклатура,
			|	Записи.Характеристика          КАК Характеристика,
			|	Записи.Склад                   КАК Склад,
			|	Записи.Назначение              КАК Назначение,
			|	Записи.Состояние               КАК Состояние,
			|	Записи.ЗаказНаОтгрузку         КАК ЗаказНаОтгрузку,
			|	Записи.ЖелаемаяДатаОтгрузки    КАК ЖелаемаяДатаОтгрузки,
			|	Записи.ЗаказНаПоступление      КАК ЗаказНаПоступление,
			|	Записи.ДатаПоступления         КАК ДатаПоступления,
			|	ВЫБОР КОГДА Состояние В(
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.НеОбеспечивать),
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить)) ТОГДА
			|					
			|					Записи.НеОбеспечено
			|					
			|			КОГДА Состояние В(
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве),
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе),
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате)) ТОГДА
			|					
			|					Записи.Зарезервировано + Записи.Обеспечено
			|					
			|			КОГДА Состояние В(
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе),
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПоступлениеНеПодтвержденное),
			|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление)) ТОГДА
			|					
			|					Записи.Свободно
			|					
			|		КОНЕЦ КАК Количество
			|ИЗ
			|	Товары КАК Товары
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК Записи
			|		ПО Записи.Номенклатура   = Товары.Номенклатура
			|		 И Записи.Характеристика = Товары.Характеристика
			|		 И Записи.Склад          = Товары.Склад
			|		 И Записи.Назначение     = Товары.Назначение
			|ГДЕ
			|	Записи.Состояние В(&ОтборСостояний)
			|		И Записи.ЗаказНаОтгрузку В(&Заказы)";
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обслуживающие инициализацию реквизита Очередь в заказе и реквизита "Вариант обеспечения".

// Заполняет вариант обеспечения и флаг обособленно по умолчанию в зависимости от настроек номенклатуры.
//
// Параметры:
//  Таблица - ТабличнаяЧасть, ДанныеФормыКоллекция, ТаблицаЗначений - таблица товаров.
//  ЗаполнитьОбособленно - ФормаКлиентскогоПриложения - форма заказа.
//  СтатусЗаказаКлиента - ПеречислениеСсылка.СтатусыЗаказовКлиентов - статус заказа клиента.
//
// Возвращаемое значение:
//  Булево - признак, что документ был изменен.
//
Функция ЗаполнитьВариантОбеспеченияПоУмолчанию(Таблица, ЗаполнитьОбособленно = Ложь, СтатусЗаказаКлиента = Неопределено) Экспорт
	
	Если Таблица.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЗаполненияВариантаОбеспечения = ПараметрыЗаполненияВариантаОбеспеченияПоУмолчанию();
	ПараметрыЗаполненияВариантаОбеспечения.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	
	Если СтатусЗаказаКлиента = Неопределено
		Или ПараметрыЗаполненияВариантаОбеспечения.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
		
		ТаблицаНоменклатуры = Новый ТаблицаЗначений();
		ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаНоменклатуры.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));

		ВГраница = Таблица.Количество() - 1;
		Для Индекс = 0 По ВГраница Цикл

			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Индекс       = Индекс;
			НоваяСтрока.Номенклатура = Таблица[Индекс].Номенклатура;

		КонецЦикла;

		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Таблица.Номенклатура КАК Номенклатура,
			|	Таблица.Индекс       КАК Индекс
			|
			|ПОМЕСТИТЬ ВтНоменклатура
			|ИЗ
			|	&ТаблицаНоменклатуры КАК Таблица
			|;
			|
			|////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(СпрНоменклатура.ОбособленнаяЗакупкаПродажа, ЛОЖЬ) КАК ОбособленнаяЗакупкаПродажа,
			|	ЕСТЬNULL(СпрНоменклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ТипНоменклатуры,
			|	Таблица.Индекс КАК Индекс
			|ИЗ
			|	ВтНоменклатура КАК Таблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		ПО Таблица.Номенклатура = СпрНоменклатура.Ссылка";
		
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
		Выборка = Запрос.Выполнить().Выбрать();
		Результат = Ложь;
		Пока Выборка.Следующий() Цикл
		
			ПараметрыЗаполненияВариантаОбеспечения.ТипНоменклатуры = Выборка.ТипНоменклатуры;
			ПараметрыЗаполненияВариантаОбеспечения.ЗаполнитьОбособленно = (ЗаполнитьОбособленно = Истина Или Выборка.ОбособленнаяЗакупкаПродажа);
			ВариантОбеспеченияИФлагОбособленно = ВариантОбеспеченияИФлагОбособленноПоУмолчанию(ПараметрыЗаполненияВариантаОбеспечения);
			
			Таблица[Выборка.Индекс].ВариантОбеспечения = ВариантОбеспеченияИФлагОбособленно.ВариантОбеспечения;
			Таблица[Выборка.Индекс].Обособленно = ВариантОбеспеченияИФлагОбособленно.Обособленно;
			Результат = Истина;
		КонецЦикла;
		
	Иначе
		
		ПараметрыЗаполненияВариантаОбеспечения.СтатусЗаказаКлиента = СтатусЗаказаКлиента;
		ВариантОбеспеченияИФлагОбособленно = ВариантОбеспеченияИФлагОбособленноПоУмолчанию(ПараметрыЗаполненияВариантаОбеспечения);
		Если Таблица[0].ВариантОбеспечения <> ВариантОбеспеченияИФлагОбособленно.ВариантОбеспечения
				Или Таблица[0].Обособленно <> ВариантОбеспеченияИФлагОбособленно.Обособленно Тогда
			Для Каждого Стр Из Таблица Цикл
				Стр.ВариантОбеспечения = ВариантОбеспеченияИФлагОбособленно.ВариантОбеспечения;
				Стр.Обособленно = ВариантОбеспеченияИФлагОбособленно.Обособленно;
			КонецЦикла;
			Результат = Истина;
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обслуживающие заполнение даты отгрузки в строках, при записи заказа, если заказ отгружается одной датой.

// Заполняет дату отгрузки в параметре Таблица в колонке ИмяПоля для неотмененных строк.
//
// Параметры:
//  Значение - Дата - Значение даты отгрузки.
//  Таблица - ТаблицаЗначений - Таблица, в которой необходимо заполнить дату отгрузки.
//  ИмяПоля - Строка - Имя поля, в котором дата отгрузки.
//  ЕстьОтменено - Булево - признак, что в таблице есть поле "Отменено".
//
Процедура ЗаполнитьДатыОтгрузкиВТаблице(Значение, Таблица, ИмяПоля, ЕстьОтменено = Истина) Экспорт
	
	Если ЗначениеЗаполнено(Значение) Тогда
		
		Для Каждого Строка Из Таблица Цикл
			Если Не ЕстьОтменено Или Не Строка.Отменено Тогда
				Строка[ИмяПоля] = Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет номенклатуру с типом работа в табличной части.
//
//  Параметры:
//   ТабЧасть - ТабличнаяЧасть - табличная часть документа для которой нужно определить работы.
//
//  Возвращаемое значение:
//   Соответствие - ключами соответствия являются ссылки на номенклатуру с типом работа, которая есть в табличной части.
//
Функция РаботыТабличнойЧасти(ТабЧасть) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылки", ТабЧасть.ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсяНоменклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК ВсяНоменклатура
		|ГДЕ
		|	ВсяНоменклатура.Ссылка В(&Ссылки)
		|		И ВсяНоменклатура.ТипНоменклатуры В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))";
	
	Работы = Новый Соответствие();
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Работы.Вставить(Выборка.Ссылка);
	КонецЦикла;
	Возврат Работы;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СвободныеОстаткиДляПодбораТоваров(Товары, ТаблицаПодобраноРанее, Склады, Назначение, Подразделение) Экспорт
	
	// Получение остатков.
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Товары",                Товары);
	Запрос.УстановитьПараметр("ТаблицаПодобраноРанее", ТаблицаПодобраноРанее);
	Запрос.УстановитьПараметр("Назначение",            Назначение);
	Запрос.УстановитьПараметр("Подразделение",         Подразделение);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|///////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	ЛОЖЬ КАК Обособленно,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение
		|ПОМЕСТИТЬ ВыделенныеТовары
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	Товары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	ИСТИНА КАК Обособленно,
		|	&Назначение КАК Назначение
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	Товары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Назначение
		|;
		|
		|///////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Обособленно КАК Обособленно,
		|	Товары.Назначение КАК Назначение,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад
		|ПОМЕСТИТЬ ВыделенныеТоварыСУчетомСклада
		|ИЗ
		|	ВыделенныеТовары КАК Товары
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение
		|;
		|
		|///////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	ВЫБОР КОГДА Таблица.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) ТОГДА
		|				&Подразделение
		|			ИНАЧЕ
		|				Таблица.Склад
		|		КОНЕЦ КАК Склад,
		|	ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|				&Назначение
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	Таблица.Количество КАК Количество
		|ПОМЕСТИТЬ ТаблицаПодобраноРанее
		|ИЗ
		|	&ТаблицаПодобраноРанее КАК Таблица
		|ГДЕ
		|	Таблица.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
		|;
		|
		|///////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура       КАК Номенклатура,
		|	Таблица.Характеристика     КАК Характеристика,
		|	Таблица.Склад              КАК Склад,
		|	Таблица.Назначение         КАК Назначение,
		|	-СУММА(Таблица.Количество) КАК ВНаличии
		|ПОМЕСТИТЬ КорректировкаОстатка
		|ИЗ
		|	ТаблицаПодобраноРанее КАК Таблица
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Склад,
		|	Таблица.Назначение
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение
		|;
		|
		|///////////////////////////////////////
		|ВЫБРАТЬ
		|	NULL КАК Номенклатура,
		|	NULL КАК Характеристика,
		|	NULL КАК Склад,
		|	NULL КАК Назначение,
		|	NULL КАК ЗаказНаОтгрузку
		|ПОМЕСТИТЬ ВыделенныеЗаказы
		|ГДЕ
		|	ЛОЖЬ";
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ОстаткиСкладаИГрафика = ОстаткиДляПодбораСкладов(Запрос, Склады, 1);
	Возврат ОстаткиСкладаИГрафика;
	
КонецФункции

Функция ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(КодДействия, АдресАналитик, Форма) Экспорт
	
	ВариантОбеспечения = Неопределено;
	Если КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ" Тогда
		ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
	ИначеЕсли КодДействия = "ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ" Тогда
		ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
	КонецЕсли;
	
	// Инициализация параметров и текста запроса, получение временной таблицы данных документа для операции отражения и временной таблицы отражения.
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	Таблицы = ПолучитьИзВременногоХранилища(ПараметрыВстраивания.СлужебныеПараметры.АдресТаблицыДанныхФормы);
	ЗаполнитьТаблицыИзДанныхФормы(Таблицы, Форма, Неопределено);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДобавитьВременнуюТаблицуДанныхДокумента(Запрос.МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания);
	Запрос.Текст = ВременнаяТаблицаДвиженийДокумента();
	Запрос.УстановитьПараметр("Ссылка", Неопределено);
	Запрос.УстановитьПараметр("СсылкаНовогоНазначения", Справочники.Назначения.ПолучитьСсылку());
	Запрос.Выполнить();
	
	ТаблицаАналитик = ПолучитьИзВременногоХранилища(АдресАналитик);
	Если КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ" Тогда
		ВсегоСтрок = ТаблицаАналитик.Количество();
		Для Счетчик = 1 По ВсегоСтрок Цикл
			СтрокаТаблицы = ТаблицаАналитик[ВсегоСтрок - Счетчик];
			Если СтрокаТаблицы.Состояние <> Перечисления.РаспределениеЗапасовСостояния.ВРезерве
					И СтрокаТаблицы.Состояние <> Перечисления.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе
					И СтрокаТаблицы.Состояние <> Перечисления.РаспределениеЗапасовСостояния.НеОбеспечивать Тогда
				ТаблицаАналитик.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КолонкиКлюча = "ЗаказНаОтгрузку,ЖелаемаяДатаОтгрузки,Номенклатура,Характеристика,Склад,Назначение,Действие,Обособленно";
	ТаблицаАналитик.Свернуть(КолонкиКлюча, "Количество");
	
	ТаблицаАналитик.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Число"));
	Для Каждого Строка Из ТаблицаАналитик Цикл
		Строка.Ключ = ТаблицаАналитик.Индекс(Строка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаАналитик", ТаблицаАналитик);
	Запрос.УстановитьПараметр("ВариантОбеспечения", ВариантОбеспечения);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаАналитик.ЗаказНаОтгрузку      КАК ЗаказНаОтгрузку,
		|	ТаблицаАналитик.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
		|	ТаблицаАналитик.Номенклатура         КАК Номенклатура,
		|	ТаблицаАналитик.Характеристика       КАК Характеристика,
		|	ТаблицаАналитик.Склад                КАК Склад,
		|	ТаблицаАналитик.Назначение           КАК Назначение,
		|	ТаблицаАналитик.Действие             КАК Действие,
		|	ТаблицаАналитик.Обособленно          КАК Обособленно,
		|	ТаблицаАналитик.Ключ                 КАК Ключ,
		|	ТаблицаАналитик.Количество           КАК Количество
		|ПОМЕСТИТЬ ТаблицаАналитик
		|ИЗ
		|	&ТаблицаАналитик КАК ТаблицаАналитик
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказНаОтгрузку,ЖелаемаяДатаОтгрузки,Номенклатура,Характеристика,Склад,Назначение,Обособленно
		|;
		|
		|/////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаАналитик.Ключ               КАК Ключ,
		|	ТаблицаАналитик.Склад              КАК Склад,
		|	ТаблицаАналитик.Количество         КАК Количество,
		|	ТаблицаДанныхДокумента.Упаковка    КАК Упаковка,
		|	ТаблицаДанныхДокумента.НомерСтроки КАК ЭлементКоллекции
		|ИЗ
		|	ТаблицаАналитик КАК ТаблицаАналитик
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
		|		ПО ТаблицаДанныхДокумента.ЗаказНаОтгрузку   = ТаблицаАналитик.ЗаказНаОтгрузку
		|		И ТаблицаДанныхДокумента.ЖелаемаяДатаОтгрузки = ТаблицаАналитик.ЖелаемаяДатаОтгрузки
		|		И ТаблицаДанныхДокумента.Номенклатура         = ТаблицаАналитик.Номенклатура
		|		И ТаблицаДанныхДокумента.Характеристика       = ТаблицаАналитик.Характеристика
		|		И ВЫБОР КОГДА ТаблицаДанныхДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|					ТаблицаДанныхДокумента.Подразделение
		|				ИНАЧЕ
		|					ТаблицаДанныхДокумента.Склад
		|			КОНЕЦ = ТаблицаАналитик.Склад
		|		И ВЫБОР КОГДА ТаблицаДанныхДокумента.Обособленно ТОГДА
		|						ТаблицаДанныхДокумента.Назначение
		|				ИНАЧЕ
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			КОНЕЦ = ТаблицаАналитик.Назначение
		|		И ВЫБОР КОГДА ТаблицаАналитик.Действие ССЫЛКА Перечисление.ВариантыОбеспечения ТОГДА
		|					ТаблицаДанныхДокумента.ВариантОбеспечения = ТаблицаАналитик.Действие
		|				ИНАЧЕ
		|					ТаблицаДанныхДокумента.ВариантОбеспечения В(
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению),
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления))
		|			КОНЕЦ
		|		И ТаблицаДанныхДокумента.Обособленно         = ТаблицаАналитик.Обособленно
		|		И НЕ ТаблицаДанныхДокумента.Отменено
		|ГДЕ
		|	НЕ ТаблицаДанныхДокумента.Номенклатура ЕСТЬ NULL
		|		И НЕ (ВЫРАЗИТЬ(ТаблицаАналитик.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|				И &ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется))
		|			
		|УПОРЯДОЧИТЬ ПО
		|	Ключ,
		|	ЭлементКоллекции";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ТаблицаИзменений = Новый ТаблицаЗначений();
	ТаблицаИзменений.Колонки.Добавить("КоличествоУпаковок");
	ТаблицаИзменений.Колонки.Добавить("ВариантОбеспечения");
	ТаблицаИзменений.Колонки.Добавить("Серия");
	ТаблицаИзменений.Колонки.Добавить("Склад");
	ТаблицаИзменений.Колонки.Добавить("Идентификатор");
	ТаблицаИзменений.Колонки.Добавить("Строка");
	
	КоллекцияНаФорме = ОбеспечениеВДокументахКлиентСервер.КоллекцияНаФорме(Форма, Форма.ДоступныеОстаткиПараметрыВстраивания);
	Ключ = Неопределено;
	КоличествоИзменитьВсего = 0;
	КоэффициентыУпаковок = КоэффициентыУпаковок(Таблица, КоллекцияНаФорме);
	Для Индекс = 0 По Таблица.Количество() - 1 Цикл
		
		Строка = Таблица[Индекс];
		
		ИдентификаторСтроки = Строка.ЭлементКоллекции;
		Коэффициент = КоэффициентыУпаковок.Получить(ИдентификаторСтроки);
		Коэффициент = ?(Коэффициент = Неопределено, 1, Коэффициент);
		
		Если Ключ <> Строка.Ключ Тогда
			Ключ = Строка.Ключ;
			КоличествоИзменитьВсего = Строка.Количество;
		КонецЕсли;
		Строка = КоллекцияНаФорме.НайтиПоИдентификатору(Строка.ЭлементКоллекции);
		
		Если Строка.Количество = КоличествоИзменитьВсего Тогда // для мерных единиц изменения возможно округление количества
			КоличествоИзменитьВсегоУпаковок = Строка.КоличествоУпаковок;
		Иначе
			КоличествоИзменитьВсегоУпаковок = КоличествоИзменитьВсего / Коэффициент;
		КонецЕсли;
		
		КоличествоУпаковок = Мин(КоличествоИзменитьВсегоУпаковок, Строка.КоличествоУпаковок);
		КоличествоИзменитьВсего = КоличествоИзменитьВсего - КоличествоУпаковок * Коэффициент;
		
		Если КоличествоУпаковок = Строка.КоличествоУпаковок Тогда
			
			ДобавленнаяСтрока = ТаблицаИзменений.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, Строка);
			ДобавленнаяСтрока.ВариантОбеспечения = ВариантОбеспечения;
			ДобавленнаяСтрока.Идентификатор = ИдентификаторСтроки;
			
		ИначеЕсли КоличествоУпаковок > 0 Тогда
			
			ДобавленнаяСтрока = ТаблицаИзменений.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, Строка);
			ДобавленнаяСтрока.КоличествоУпаковок = ДобавленнаяСтрока.КоличествоУпаковок - КоличествоУпаковок;
			ДобавленнаяСтрока.Идентификатор = ИдентификаторСтроки;
			
			ДобавленнаяСтрока = ТаблицаИзменений.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, Строка);
			ДобавленнаяСтрока.ВариантОбеспечения = ВариантОбеспечения;
			ДобавленнаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
			ДобавленнаяСтрока.Идентификатор = ИдентификаторСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьДействияИзТаблицы(Форма, ТаблицаИзменений);
	Возврат ТаблицаИзменений;
	
КонецФункции

// Обработчик события ОбработкаТабличнойЧастиСервер.ПроверитьЗаполнитьОбеспечениеВСтрокеТЧДокументаПродажи.
// Событие обработки табличных частей:
//  - "ПроверитьЗаполнитьОбеспечениеВДокументеПродажи"
Процедура ПроверитьЗаполнитьОбеспечениеВСтрокеТЧДокументаПродажи(ТекущаяСтрока, ДанныеПрограммногоОбъекта, ПараметрыДействия) Экспорт
	
	ПараметрыВстраивания = ПараметрыДействия.ПараметрыВстраивания;
	Таблицы = ПолучитьИзВременногоХранилища(ПараметрыВстраивания.СлужебныеПараметры.АдресТаблицыДанныхФормы);
	ЗаполнитьТаблицыИзСериализованногоОбъекта(Таблицы, ДанныеПрограммногоОбъекта, ПараметрыВстраивания, ТекущаяСтрока);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДобавитьВременнуюТаблицуДанныхДокумента(МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура                            КАК Номенклатура,
		|	ТаблицаДокумента.Номенклатура.ТипНоменклатуры            КАК ТипНоменклатуры,
		|	ТаблицаДокумента.Номенклатура.ОбособленнаяЗакупкаПродажа КАК ОбособленнаяЗакупкаПродажа,
		|	ТаблицаДокумента.ВариантОбеспечения                      КАК ВариантОбеспечения
		|ИЗ
		|	ВременнаяТаблицаДанныхДокумента КАК ТаблицаДокумента";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Не ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение варианта обеспечения.
	ВариантОбеспеченияИФлагОбособленно = ПараметрыДействия.ВариантОбеспеченияИФлагОбособленно;
	
	Если ВариантОбеспеченияИФлагОбособленно = Неопределено Тогда
		
		ВариантОбеспеченияИФлагОбособленно = ОбеспечениеВДокументахКлиентСервер.ВариантОбеспеченияИФлагОбособленноПоУмолчанию(
			Выборка.ОбособленнаяЗакупкаПродажа);
		
	КонецЕсли;
	
	Если Выборка.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Тогда
		ИмяСвойства = "Товар";
	ИначеЕсли Выборка.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		ИмяСвойства = "Работа";
	ИначеЕсли Выборка.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
		ИмяСвойства = "Услуга";
	ИначеЕсли Выборка.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
		ИмяСвойства = "Тара";
	КонецЕсли;
	
	ВариантОбеспечения = ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].ВариантОбеспечения;
	Обособленно        = ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].Обособленно;
	
	ТекущаяСтрока.ВариантОбеспечения = ВариантОбеспечения;
	ТекущаяСтрока.Обособленно        = Обособленно;
	
КонецПроцедуры

// Обработчик события ОбработкаТабличнойЧастиСервер.ЗаполнитьКолонкуДоступно.
// Событие обработки табличных частей:
//  - "ЗаполнитьКолонкуДоступно"
Процедура ЗаполнитьКолонкуДоступно(ТекущаяСтрока, ДанныеПрограммногоОбъекта, ПараметрыДействия) Экспорт
	
	ПараметрыВстраивания = ПараметрыДействия.ПараметрыВстраивания;
	Таблицы = ПолучитьИзВременногоХранилища(ПараметрыВстраивания.СлужебныеПараметры.АдресТаблицыДанныхФормы);
	ЗаполнитьТаблицыИзСериализованногоОбъекта(Таблицы, ДанныеПрограммногоОбъекта, ПараметрыВстраивания, ТекущаяСтрока);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДобавитьВременнуюТаблицуДанныхДокумента(МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания);
	ОбновитьКолонкуДоступноПриОбработкеСтрокиТабличнойЧасти(ТекущаяСтрока, МенеджерВременныхТаблиц, ПараметрыВстраивания);
	
КонецПроцедуры

// Обработчик события ОбработкаТабличнойЧастиСервер.ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения.
// Событие обработки табличных частей:
//  - "ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения"
Процедура ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения(ТекущаяСтрока, ДанныеПрограммногоОбъекта, ПараметрыДействия) Экспорт
	
	ПараметрыВстраивания = ПараметрыДействия.ПараметрыВстраивания;
	Таблицы = ПолучитьИзВременногоХранилища(ПараметрыВстраивания.СлужебныеПараметры.АдресТаблицыДанныхФормы);
	ЗаполнитьТаблицыИзСериализованногоОбъекта(Таблицы, ДанныеПрограммногоОбъекта, ПараметрыВстраивания, ТекущаяСтрока);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДобавитьВременнуюТаблицуДанныхДокумента(Запрос.МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания);
	
	Запрос.УстановитьПараметр("ТолькоОшибки", Ложь);
	ТаблицаОбязательностиЗаполнения = ТаблицаОбязательностиЗаполненияПоВременнойТаблицеДанныхДокумента(Запрос);
	
	ТекущаяСтрока.ДатаОтгрузкиОбязательна = ?(ТаблицаОбязательностиЗаполнения[0].ДатаОтгрузкиОбязательна, 1, 0);
	ТекущаяСтрока.СкладОбязателен         = ?(ТаблицаОбязательностиЗаполнения[0].СкладОбязателен, 1, 0);
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьОбновленияКолонкиДоступно(Строка, ПараметрыДействия) Экспорт
	
	Номенклатура = ПолучитьИзВременногоХранилища(ПараметрыДействия.АдресНоменклатура);
	ЕстьИзменения = Истина;
	
	Характеристика = Номенклатура.Получить(Строка.Номенклатура);
	Если Характеристика = Неопределено Тогда
		Характеристика = Новый Соответствие();
		Номенклатура.Вставить(Строка.Номенклатура, Характеристика);
	КонецЕсли;
	НайденныйЭлемент = Характеристика.Получить(Строка.Характеристика);
	Если НайденныйЭлемент = Неопределено Тогда
		Характеристика.Вставить(Строка.Характеристика, Строка.ИдентификаторСтрокиПолученный);
	ИначеЕсли НайденныйЭлемент = Истина Или НайденныйЭлемент <> Строка.ИдентификаторСтрокиПолученный Тогда
		Характеристика.Вставить(Строка.Характеристика, Истина);
		ПараметрыДействия.ОбновитьКолонкуДоступно =
			Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
				Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
	Иначе
		ЕстьИзменения = Ложь;
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		ПоместитьВоВременноеХранилище(Номенклатура, ПараметрыДействия.АдресНоменклатура);
	КонецЕсли;
	
	ТекСтрока = ПараметрыДействия.КэшТекущейСтроки;
	Характеристика = Номенклатура.Получить(ТекСтрока.Номенклатура);
	Если Характеристика <> Неопределено Тогда
		НайденныйЭлемент = Характеристика.Получить(ТекСтрока.Характеристика);
		Если НайденныйЭлемент = Истина Тогда
			ПараметрыДействия.ОбновитьКолонкуДоступно =
				ПараметрыДействия.ОбновитьКолонкуДоступно
					Или ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
					Или ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКэшНоменклатура(Строка, ПараметрыДействия) Экспорт
	
	Номенклатура = ПолучитьИзВременногоХранилища(ПараметрыДействия.АдресНоменклатура);
	ЕстьИзменения = Истина;
	
	Характеристика = Номенклатура.Получить(Строка.Номенклатура);
	Если Характеристика = Неопределено Тогда
		Характеристика = Новый Соответствие();
		Номенклатура.Вставить(Строка.Номенклатура, Характеристика);
	КонецЕсли;
	НайденныйЭлемент = Характеристика.Получить(Строка.Характеристика);
	Если НайденныйЭлемент = Неопределено Тогда
		Характеристика.Вставить(Строка.Характеристика, Строка.ИдентификаторСтрокиПолученный);
	ИначеЕсли НайденныйЭлемент = Истина Или НайденныйЭлемент <> Строка.ИдентификаторСтрокиПолученный Тогда
		Характеристика.Вставить(Строка.Характеристика, Истина);
	Иначе
		ЕстьИзменения = Ложь;
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		ПоместитьВоВременноеХранилище(Номенклатура, ПараметрыДействия.АдресНоменклатура);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие заданий к распределению запасов хотя бы по одному заказу определенного типа документа.
//
// Параметры:
//  ПолныеИменаДокументов - Строка - полные имена документов отображаемых списком через запятую.
//
// Возвращаемое значение:
//  Массив из ЛюбаяСсылка - заказы заданий из регистра заданий распределения запасов
//
Функция ЗаданияПоЗаказамПоТипу(ПолныеИменаДокументов) Экспорт
	
	ИменаДокументов = СтрРазделить(ПолныеИменаДокументов, ",");
	Типы = Новый Массив();
	Для Каждого ИмяДокумента Из ИменаДокументов Цикл
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяДокумента);
		Типы.Добавить(ТипЗнч(МенеджерДокумента.ПустаяСсылка()));
	КонецЦикла;
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Типы", Типы);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.ЗаказНаОтгрузку КАК Ссылка
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюЗапасов КАК Задания
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Задания.ЗаказНаОтгрузку) В(&Типы)";
	УстановитьПривилегированныйРежим(Истина);
	Заказы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Заказы;
	
КонецФункции

// Проверяет наличие заданий к распределению запасов по заказам.
//
// Параметры:
//  Заказы - Массив из ЛюбаяСсылка - массив заказов.
//
// Возвращаемое значение:
//  Булево - Истина, если есть задания, Ложь -  в противном случае
//
Функция ЕстьЗаданияПоЗаказам(Заказы) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Заказы", Заказы);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗаписи
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюЗапасов КАК Задания
	|ГДЕ
	|	Задания.ЗаказНаОтгрузку В(&Заказы)";
	УстановитьПривилегированныйРежим(Истина);
	ЕстьЗадания = Не Запрос.Выполнить().Пустой();
	
	Если ЕстьЗадания Тогда
		
		ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
		
	КонецЕсли;
	
	Возврат ЕстьЗадания;
	
КонецФункции

Функция СкладыГруппы(Запрос, ВсеСкладыЕслиСкладНеопределен) Экспорт
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.ГруппаСкладов КАК Ссылка
		|ИЗ
		|	ВременнаяТаблицаДанныхДокументаДляВыделенныхСтрок КАК Таблица";
	Выборка = Запрос.Выполнить().Выбрать();
	Ссылка = Неопределено;
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) И Справочники.Склады.ЭтоГруппа(Ссылка) Или Ссылка = Неопределено Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Склады.Ссылка
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.ЭтоГруппа = ЛОЖЬ
			|	И Склады.ПометкаУдаления = ЛОЖЬ
			|	И (Склады.Ссылка В ИЕРАРХИИ(&ГруппаСкладов)
			|		ИЛИ &ГруппаСкладов = НЕОПРЕДЕЛЕНО)";
		
		Запрос.УстановитьПараметр("ГруппаСкладов", Ссылка);
		МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Иначе
		
		МассивСкладов = Неопределено;
	
	КонецЕсли;
	
	Возврат МассивСкладов;
	
КонецФункции

Процедура ЗаполнитьСлужебныеПараметрыВстраивания(ПараметрыДокумента) Экспорт
	
	ПараметрыВстраивания = ПараметрыДокумента.ПараметрыВстраивания;
	СлужебныеПараметры = Новый Структура();
	ПараметрыВстраивания.Вставить("СлужебныеПараметры", СлужебныеПараметры);
	
	СлужебныеПараметры.Вставить("ЭтоДокумент", Истина);
	СлужебныеПараметры.Вставить("НуженОбработчикОбновленияДоступности", Ложь);
	СлужебныеПараметры.Вставить("ЗаказыДляОбновленияДоступности",       Неопределено);
	СлужебныеПараметры.Вставить("ИнтервалЗапускаОбработчика",           Неопределено);
	
	ДанныеСтроки = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыВстраивания.ШаблонСериализацииДанныхФормы);
	СлужебныеПараметры.Вставить("ДанныеСтроки", ДанныеСтроки);
	
	Таблицы = Новый Соответствие();
	ВставитьТаблицы(Таблицы, ПараметрыВстраивания.ШаблонСериализацииДанныхФормы, "");
	ЗаполнитьИменаТаблицВСоотвествии(ПараметрыВстраивания, Таблицы);
	АдресТаблицыДанныхФормы = ПоместитьВоВременноеХранилище(Таблицы);
	СлужебныеПараметры.Вставить("АдресТаблицыДанныхФормы", АдресТаблицыДанныхФормы);
	
	ТекстЗапроса = ТекстЗапросаВременнаяТаблицаДанныхДокумента(ПараметрыВстраивания, Таблицы);
	
	СлужебныеПараметры.Вставить("ТекстЗапросаВременнаяТаблицаДанныхДокумента", ТекстЗапроса);
	
КонецПроцедуры

// Используется для проверки возможности открытия обработки заполнения корректировки назначения.
// Параметры:
//  ЭтоРезервирование - Булево - Истина, если нужно открыть обработку для резервирования, ложь, если для снятия резерва.
//  Ссылка - ОпределяемыйТип.ОжидаемаяОтгрузка - ссылка на заказ, в который встроены команды обособленного резервироваия и снятия резерва.
// Возвращаемое значение:
//  Структура - структура с полями:
//   * НазначениеДокумента - СправочникСсылка.Назначения - назначение заказа.
//   * ЕстьТоварыКОбособленномуОбеспечению - Булево - Истина, если по заказу есть товары к обособленному обеспечению.
//   * ЕстьТоварыКСтороннемуОбособленномуОбеспечению - Булево - Истина, если есть товары к обособленному обеспечению используемому заказом, но не связанному с заказом.
//   * ЕстьТоварыКСнятиюРезерва - Булево - Истина, если по заказу есть товары к снятию обособления.
//   * ЕстьТоварыКСтороннемуСнятиюРезерва - Булево - Истина, если есть товары к снтятию обособления по назначению используемому заказом, но не связанному с заказом.
Функция ПроверкаВозможностиОткрытияЗаполнениеКорректировкиНазначения(ЭтоРезервирование, Ссылка) Экспорт
	
	Результат = Новый Структура(
		"НазначениеДокумента,
		|ЕстьТоварыКОбособленномуОбеспечению,
		|ЕстьТоварыКСтороннемуОбособленномуОбеспечению,
		|ЕстьТоварыКСнятиюРезерва,
		|ЕстьТоварыКСтороннемуСнятиюРезерва");
	Результат.НазначениеДокумента = Документы.КорректировкаНазначенияТоваров.НазначениеЗаказа(Ссылка);
	Если ЭтоРезервирование Тогда
		Результат.ЕстьТоварыКОбособленномуОбеспечению
			= Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКОбособленномуОбеспечению(Результат.НазначениеДокумента);
		Результат.ЕстьТоварыКСтороннемуОбособленномуОбеспечению
			= Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКСтороннемуОбособленномуОбеспечению(Ссылка);
	Иначе
		Результат.ЕстьТоварыКСнятиюРезерва
			= Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКСнятиюРезерва(Результат.НазначениеДокумента);
		Результат.ЕстьТоварыКСтороннемуСнятиюРезерва
			= Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКСтороннемуСнятиюРезерва(Ссылка);
	КонецЕсли;
	Возврат Результат;

КонецФункции

#Область ОбщаяФормаСостояниеОбеспеченияЗаказа

Функция ПодстановкиДатыПоКалендарю(Календарь, ДатаОтсчета, Срок, УсловиеПолучения, Постфикс) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР КОГДА ВедущаяТаблица.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
		|					ДОБАВИТЬКДАТЕ(ВедущаяТаблица.ДатаОтсчета, ДЕНЬ, ВедущаяТаблица.Срок)
		|				ИНАЧЕ
		|					ЕСТЬNULL(ИскомаяДатаВКалендареПостфикс.ДатаГрафика,
		|						ЕСТЬNULL(ИскомаяДатаВСледующемГодуПостфикс.ДатаГрафика,
		|							ДАТАВРЕМЯ(1, 1, 1)))
		|			КОНЕЦ КАК ИскомаяДата
		|ИЗ
		|	&ВедущаяТаблица КАК ВедущаяТаблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатаОтсчетаВКалендареПостфикс
		|		ПО (ВедущаяТаблица.УсловиеПолучения)
		|			И (ВедущаяТаблица.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
		|			И (ДатаОтсчетаВКалендареПостфикс.Календарь   = ВедущаяТаблица.Календарь)
		|			
		|			И (ДатаОтсчетаВКалендареПостфикс.Год         = ГОД(ВедущаяТаблица.ДатаОтсчета))
		|			И (ДатаОтсчетаВКалендареПостфикс.ДатаГрафика = ВедущаяТаблица.ДатаОтсчета)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ИскомаяДатаВКалендареПостфикс
		|		ПО (ВедущаяТаблица.УсловиеПолучения)
		|			И (ВедущаяТаблица.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
		|			И (НЕ ДатаОтсчетаВКалендареПостфикс.Календарь ЕСТЬ NULL)
		|			И (ИскомаяДатаВКалендареПостфикс.Календарь = ВедущаяТаблица.Календарь)
		|			
		|			И (ИскомаяДатаВКалендареПостфикс.Год = ДатаОтсчетаВКалендареПостфикс.Год)
		|			И (ИскомаяДатаВКалендареПостфикс.ДеньВключенВГрафик)
		|			И (ИскомаяДатаВКалендареПостфикс.КоличествоДнейВГрафикеСНачалаГода = ДатаОтсчетаВКалендареПостфикс.КоличествоДнейВГрафикеСНачалаГода + ВедущаяТаблица.Срок)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатаОтсчетаПоследнийДеньГодаПостфикс
		|		ПО (ВедущаяТаблица.УсловиеПолучения)
		|			И (ВедущаяТаблица.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
		|			И (НЕ ДатаОтсчетаВКалендареПостфикс.Календарь ЕСТЬ NULL)
		|			И (ДатаОтсчетаПоследнийДеньГодаПостфикс.Календарь = ВедущаяТаблица.Календарь)
		|			
		|			И (ДатаОтсчетаПоследнийДеньГодаПостфикс.Год = ДатаОтсчетаВКалендареПостфикс.Год)
		|			И (ДатаОтсчетаПоследнийДеньГодаПостфикс.ДатаГрафика = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ВедущаяТаблица.ДатаОтсчета, ГОД), ДЕНЬ))
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ИскомаяДатаВСледующемГодуПостфикс
		|		ПО (ВедущаяТаблица.УсловиеПолучения)
		|			И (ВедущаяТаблица.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
		|			И (НЕ ДатаОтсчетаВКалендареПостфикс.Календарь ЕСТЬ NULL)
		|			И (ИскомаяДатаВКалендареПостфикс.Календарь ЕСТЬ NULL)
		|			И (ИскомаяДатаВСледующемГодуПостфикс.Календарь = ВедущаяТаблица.Календарь)
		|			
		|			И (ИскомаяДатаВСледующемГодуПостфикс.Год = ДатаОтсчетаВКалендареПостфикс.Год + 1)
		|			И (ИскомаяДатаВСледующемГодуПостфикс.ДеньВключенВГрафик)
		|			И (ИскомаяДатаВСледующемГодуПостфикс.КоличествоДнейВГрафикеСНачалаГода = ДатаОтсчетаВКалендареПостфикс.КоличествоДнейВГрафикеСНачалаГода - ДатаОтсчетаПоследнийДеньГодаПостфикс.КоличествоДнейВГрафикеСНачалаГода + ВедущаяТаблица.Срок)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Постфикс", Постфикс);
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Поле = СхемаЗапроса.ПакетЗапросов[0].Колонки[0].Поля[0];
	
	Поле = СтрЗаменить(Поле, "ВедущаяТаблица.Календарь",        Календарь);
	Поле = СтрЗаменить(Поле, "ВедущаяТаблица.ДатаОтсчета",      ДатаОтсчета);
	Поле = СтрЗаменить(Поле, "ВедущаяТаблица.Срок",             Срок);
	
	Соединения = Сред(ТекстЗапроса, СтрНайти(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ "));
	
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.Календарь",        Календарь);
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.ДатаОтсчета",      ДатаОтсчета);
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.Срок",             Срок);
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.УсловиеПолучения", УсловиеПолучения);
	
	Возврат Новый Структура("Поле,Соединения", Поле, Соединения);
	
КонецФункции

Функция ПодстановкиОсновногоСпособаОбеспечения(Номенклатура, Характеристика, Склад, УсловиеПолучения) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР КОГДА ВедущаяТаблица.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|			
		|			ЕСТЬNULL(ВариантыОбеспеченияРаботами.СпособОбеспеченияПотребностей,
		|				ВедущаяТаблица.Номенклатура.СпособОбеспеченияПотребностей)
		|			
		|			ИНАЧЕ
		|				ЕСТЬNULL(ВариантыОбеспеченияТоварами.СпособОбеспеченияПотребностей,
		|					ЕСТЬNULL(СхемыОбеспеченияСкладов.СпособОбеспеченияПотребностей,
		|						ЕСТЬNULL(СхемыОбеспеченияФорматов.СпособОбеспеченияПотребностей,
		|						ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))))
		|		КОНЕЦ КАК СпособОбеспечения
		|ИЗ
		|	&ВедущаяТаблица КАК ВедущаяТаблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыОбеспеченияРаботами КАК ВариантыОбеспеченияРаботами
		|		ПО (ВедущаяТаблица.УсловиеПолучения)
		|			И (ВариантыОбеспеченияРаботами.Номенклатура = ВедущаяТаблица.Номенклатура)
		|			И (ВариантыОбеспеченияРаботами.Характеристика = ВедущаяТаблица.Характеристика)
		|			И (ВариантыОбеспеченияРаботами.РеквизитДопУпорядочивания = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыОбеспеченияТоварами КАК ВариантыОбеспеченияТоварами
		|		ПО (ВедущаяТаблица.УсловиеПолучения)
		|			И (ВариантыОбеспеченияТоварами.Номенклатура = ВедущаяТаблица.Номенклатура)
		|			И (ВариантыОбеспеченияТоварами.Характеристика = ВедущаяТаблица.Характеристика)
		|			И (ВариантыОбеспеченияТоварами.Склад = ВедущаяТаблица.Склад)
		|			И (ВариантыОбеспеченияТоварами.РеквизитДопУпорядочивания = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ВсяНоменклатура
		|		ПО (ВедущаяТаблица.УсловиеПолучения)
		|			И (ВариантыОбеспеченияТоварами.Номенклатура ЕСТЬ NULL)
		|			И (ВсяНоменклатура.Ссылка = ВедущаяТаблица.Номенклатура)
		|			И (ВсяНоменклатура.СхемаОбеспечения <> ЗНАЧЕНИЕ(Справочник.СхемыОбеспечения.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СхемыОбеспечения КАК СхемыОбеспеченияСкладов
		|		ПО (ВедущаяТаблица.УсловиеПолучения)
		|			И (ВариантыОбеспеченияТоварами.Номенклатура ЕСТЬ NULL)
		|			И (СхемыОбеспеченияСкладов.СхемаОбеспечения = ВсяНоменклатура.СхемаОбеспечения)
		|			И (СхемыОбеспеченияСкладов.Склад = ВедущаяТаблица.Склад)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияФорматовМагазинов.СрезПоследних(, ) КАК ФорматовМагазинов
		|		ПО (ВедущаяТаблица.УсловиеПолучения)
		|			И (ВариантыОбеспеченияТоварами.Номенклатура ЕСТЬ NULL)
		|			И (СхемыОбеспеченияСкладов.СхемаОбеспечения ЕСТЬ NULL)
		|			И (ФорматовМагазинов.Склад = ВедущаяТаблица.Склад)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СхемыОбеспечения КАК СхемыОбеспеченияФорматов
		|		ПО (ВедущаяТаблица.УсловиеПолучения)
		|			И (ВариантыОбеспеченияТоварами.Номенклатура ЕСТЬ NULL)
		|			И (СхемыОбеспеченияСкладов.СхемаОбеспечения ЕСТЬ NULL)
		|			И (СхемыОбеспеченияФорматов.СхемаОбеспечения = ВсяНоменклатура.СхемаОбеспечения)
		|			И (СхемыОбеспеченияФорматов.Склад = ФорматовМагазинов.ФорматМагазина)";
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Поле = СхемаЗапроса.ПакетЗапросов[0].Колонки[0].Поля[0];
	
	Соединения = Сред(ТекстЗапроса, СтрНайти(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ "));
	
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.Номенклатура",     Номенклатура);
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.Характеристика",   Характеристика);
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.Склад",            Склад);
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.УсловиеПолучения", УсловиеПолучения);
	
	Возврат Новый Структура("Поле,Соединения", Поле, Соединения);
	
КонецФункции

Функция ПодстановкиПлановойДатыПоставки(Номенклатура, Характеристика, Склад, НачалоЭтогоДня, УсловиеПолучения) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР КОГДА ОсновнойСпособОбеспечения.ФормироватьПлановыеЗаказы ТОГДА
		|				
		|				ВЫБОР КОГДА ОсновнойСпособОбеспечения.ПлановаяДатаПоставки >= ВедущаяТаблица.НачалоЭтогоДня ТОГДА
		|								ОсновнойСпособОбеспечения.ПлановаяДатаПоставки
		|						ИНАЧЕ
		|								ОсновнойСпособОбеспечения.ДатаСледующейПоставки
		|					КОНЕЦ
		|				
		|			КОГДА ОсновнойКалендарь.Значение = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
		|				
		|				ДОБАВИТЬКДАТЕ(ВедущаяТаблица.НачалоЭтогоДня, ДЕНЬ, ОсновнойСпособОбеспечения.ГарантированныйСрокОбеспечения)
		|				
		|			ИНАЧЕ
		|				РасчетДатыОтгрузки.ГарантированнаяДатаОтгрузки
		|				
		|		КОНЕЦ КАК ПлановаяДатаПоставки
		|ИЗ
		|	&ВедущаяТаблица КАК ВедущаяТаблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетСпособаОбеспечения ПО ИСТИНА
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК ОсновнойСпособОбеспечения
		|		ПО ОсновнойСпособОбеспечения.Ссылка = РасчетСпособаОбеспечения.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарь
		|		ПО (ВедущаяТаблица.УсловиеПолучения)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетДатыОтгрузки ПО ИСТИНА";
	
	Подстановки = ПодстановкиОсновногоСпособаОбеспечения(
		"ВедущаяТаблица.Номенклатура",
		"ВедущаяТаблица.Характеристика",
		"ВедущаяТаблица.Склад",
		"ВедущаяТаблица.УсловиеПолучения");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетСпособаОбеспечения.Ссылка", Подстановки.Поле);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ РасчетСпособаОбеспечения ПО ИСТИНА", Подстановки.Соединения);
	
	Подстановки = ПодстановкиДатыПоКалендарю(
		"ЕСТЬNULL(ОсновнойКалендарь.Значение, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))",
		"ВедущаяТаблица.НачалоЭтогоДня",
		"ОсновнойСпособОбеспечения.ГарантированныйСрокОбеспечения",
		"ВедущаяТаблица.УсловиеПолучения",
		"Срок");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетДатыОтгрузки.ГарантированнаяДатаОтгрузки", Подстановки.Поле);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ РасчетДатыОтгрузки ПО ИСТИНА",  Подстановки.Соединения);
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Поле = СхемаЗапроса.ПакетЗапросов[0].Колонки[0].Поля[0];
	
	Поле = СтрЗаменить(Поле, "ВедущаяТаблица.Номенклатура",   Номенклатура);
	Поле = СтрЗаменить(Поле, "ВедущаяТаблица.Характеристика", Характеристика);
	Поле = СтрЗаменить(Поле, "ВедущаяТаблица.Склад",          Склад);
	Поле = СтрЗаменить(Поле, "ВедущаяТаблица.НачалоЭтогоДня", НачалоЭтогоДня);
	
	Соединения = Сред(ТекстЗапроса, СтрНайти(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ "));
	
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.Номенклатура",     Номенклатура);
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.Характеристика",   Характеристика);
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.Склад",            Склад);
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.НачалоЭтогоДня",   НачалоЭтогоДня);
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.УсловиеПолучения", УсловиеПолучения);
	
	Возврат Новый Структура("Поле,Соединения", Поле, Соединения);
	
КонецФункции

Функция ПодстановкиГраницыОбеспечиваемогоПериода(Номенклатура, Характеристика, Склад, НачалоЭтогоДня, УсловиеПолучения) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР КОГДА ОсновнойСпособОбеспечения.ФормироватьПлановыеЗаказы ТОГДА
		|			ВЫБОР КОГДА ОсновнойСпособОбеспечения.ДатаСледующейПоставки <> ДАТАВРЕМЯ(1, 1, 1) ТОГДА
		|						ОсновнойСпособОбеспечения.ДатаСледующейПоставки
		|					КОГДА ОсновнойСпособОбеспечения.ПлановаяДатаПоставки <> ДАТАВРЕМЯ(1, 1, 1) ТОГДА
		|						ОсновнойСпособОбеспечения.ПлановаяДатаПоставки
		|					ИНАЧЕ
		|						ДАТАВРЕМЯ(1, 1, 1)
		|				КОНЕЦ
		|			КОГДА ОсновнойСпособОбеспечения.ОбеспечиваемыйПериод > 0 ТОГДА
		|				РасчетГраницыПериода.ГраницаПериода
		|			ИНАЧЕ
		|				ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ КАК ГраницаПериода,
		|	
		|	ВЫБОР КОГДА РасчетДатыПоставки.ДатаПоставки > &НачалоТекущегоДня ТОГДА
		|				РасчетДатыПоставки.ДатаПоставки
		|			ИНАЧЕ
		|				&НачалоТекущегоДня
		|		КОНЕЦ КАК ДатаПоставки
		|ИЗ
		|	&ВедущаяТаблица КАК ВедущаяТаблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО Склады.Ссылка = ВедущаяТаблица.Склад
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетСпособаОбеспечения ПО ИСТИНА
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК ОсновнойСпособОбеспечения
		|		ПО ОсновнойСпособОбеспечения.Ссылка = РасчетСпособаОбеспечения.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарь
		|		ПО (ВедущаяТаблица.УсловиеПолучения)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетДатыПоставки ПО ИСТИНА
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетГраницыПериода ПО ИСТИНА";
		
	Подстановки = ПодстановкиОсновногоСпособаОбеспечения(
		"ВедущаяТаблица.Номенклатура",
		"ВедущаяТаблица.Характеристика",
		"ВедущаяТаблица.Склад",
		"ВедущаяТаблица.УсловиеПолучения");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетСпособаОбеспечения.Ссылка", Подстановки.Поле);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ РасчетСпособаОбеспечения ПО ИСТИНА", Подстановки.Соединения);
	
	Подстановки = ПодстановкиДатыПоКалендарю(
		"ЕСТЬNULL(ОсновнойКалендарь.Значение, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))",
		"ВедущаяТаблица.НачалоЭтогоДня",
		"ОсновнойСпособОбеспечения.СрокИсполненияЗаказа",
		"ВедущаяТаблица.УсловиеПолучения",
		"Срок");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетДатыПоставки.ДатаПоставки", Подстановки.Поле);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ РасчетДатыПоставки ПО ИСТИНА", Подстановки.Соединения);
	
	Подстановки = ПодстановкиДатыПоКалендарю(
		"Склады.Календарь",
		Подстановки.Поле,
		"ОсновнойСпособОбеспечения.ОбеспечиваемыйПериод",
		"ВедущаяТаблица.УсловиеПолучения",
		"Период");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетГраницыПериода.ГраницаПериода", Подстановки.Поле);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ РасчетГраницыПериода ПО ИСТИНА", Подстановки.Соединения);
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Поле = СхемаЗапроса.ПакетЗапросов[0].Колонки[0].Поля[0];
	
	Поле = СтрЗаменить(Поле, "ВедущаяТаблица.Номенклатура",   Номенклатура);
	Поле = СтрЗаменить(Поле, "ВедущаяТаблица.Характеристика", Характеристика);
	Поле = СтрЗаменить(Поле, "ВедущаяТаблица.Склад",          Склад);
	Поле = СтрЗаменить(Поле, "ВедущаяТаблица.НачалоЭтогоДня", НачалоЭтогоДня);
	
	ПолеДатаПоставки = СхемаЗапроса.ПакетЗапросов[0].Колонки[1].Поля[0];
	
	ПолеДатаПоставки = СтрЗаменить(ПолеДатаПоставки, "ВедущаяТаблица.Номенклатура",   Номенклатура);
	ПолеДатаПоставки = СтрЗаменить(ПолеДатаПоставки, "ВедущаяТаблица.Характеристика", Характеристика);
	ПолеДатаПоставки = СтрЗаменить(ПолеДатаПоставки, "ВедущаяТаблица.Склад",          Склад);
	ПолеДатаПоставки = СтрЗаменить(ПолеДатаПоставки, "ВедущаяТаблица.НачалоЭтогоДня", НачалоЭтогоДня);
	
	Соединения = Сред(ТекстЗапроса, СтрНайти(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ "));
	
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.Номенклатура",     Номенклатура);
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.Характеристика",   Характеристика);
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.Склад",            Склад);
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.НачалоЭтогоДня",   НачалоЭтогоДня);
	Соединения = СтрЗаменить(Соединения, "ВедущаяТаблица.УсловиеПолучения", УсловиеПолучения);
	
	Возврат Новый Структура("Поле,ПолеДатаПоставки,Соединения", Поле, ПолеДатаПоставки, Соединения);
	
КонецФункции

#КонецОбласти

#Область ОбновлениеДокументовИнформационнойБазы

Функция ДобавитьТекстВременнойТаблицыДокументыДляЗаменыКОбеспечениюНаТребуется(ТекстЗапроса, МенеджерДокумента) Экспорт
	
	Текст = МенеджерДокумента.ТекстЗапросаДокументыДляЗаменыКОбеспечениюНаТребуется();
	ТекстВременнойТаблицы =
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументыДляЗаменыКОбеспечениюНаТребуется
		|ИЗ
		|	ТекстПереопределяемый КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	
	ТекстВременнойТаблицы = СтрЗаменить(ТекстВременнойТаблицы, "ТекстПереопределяемый", СтрШаблон("(%1)", Текст));
	Тексты = Новый Массив();
	Тексты.Добавить(ТекстВременнойТаблицы);
	Тексты.Добавить(ТекстЗапроса);
	Возврат СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецФункции

Функция ТекстЗапросаДокументыДляЗаменыКОбеспечениюНаТребуется(ИмяДокумента, ИмяТЧ, ЕстьРаботы) Экспорт
	
	Если ЕстьРаботы Тогда
			
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Сведения.ЗаказНаОтгрузку КАК Ссылка
			|ИЗ
			|	РегистрСведений.РаспределениеЗапасов КАК Сведения
			|ГДЕ
			|	Сведения.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
			|		И Сведения.ЗаказНаОтгрузку ССЫЛКА Документ.ЗаказКлиента
			|		И (Сведения.РезервироватьПоМереПоступления <> 0 ИЛИ Сведения.ОтложитьРезервирование <> 0)
			|		И НЕ ИСТИНА В(
			|			ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				Документ.ЗаказКлиента.Товары КАК Товары
			|			ГДЕ
			|				Товары.Ссылка = Сведения.ЗаказНаОтгрузку
			|					И Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления)
			|					И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))";
	
	Иначе
		
		ТекстЗапроса =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Сведения.ЗаказНаОтгрузку КАК Ссылка
			|ИЗ
			|	РегистрСведений.РаспределениеЗапасов КАК Сведения
			|ГДЕ
			|	Сведения.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
			|		И Сведения.ЗаказНаОтгрузку ССЫЛКА Документ.ЗаказКлиента
			|		И (Сведения.РезервироватьПоМереПоступления <> 0 ИЛИ Сведения.ОтложитьРезервирование <> 0)
			|		И НЕ ИСТИНА В(
			|			ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				Документ.ЗаказКлиента.Товары КАК Товары
			|			ГДЕ
			|				Товары.Ссылка = Сведения.ЗаказНаОтгрузку
			|					И Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления))";
		
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ЗаказКлиента.Товары", ИмяДокумента + "." + ИмяТЧ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ЗаказКлиента", ИмяДокумента);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДокументыДляЗаменыКОбеспечениюНаТребуетсяПоДвижениям(ИмяДокумента, ИмяТЧ) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Движения.Регистратор КАК Ссылка
		|ИЗ
		|	РегистрНакопления.РаспределениеЗапасовДвижения КАК Движения
		|ГДЕ
		|	Движения.Активность
		|		И Движения.Регистратор ССЫЛКА Документ.ЗаказКлиента
		|		И Движения.РезервироватьПоМереПоступления <> 0
		|		И НЕ ИСТИНА В(
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Документ.ЗаказКлиента.Товары КАК Товары
		|			ГДЕ
		|				Товары.Ссылка = Движения.Регистратор
		|					И Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления)
		|					И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ЗаказКлиента.Товары", ИмяДокумента + "." + ИмяТЧ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ЗаказКлиента", ИмяДокумента);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДокументыДляОбработкиВариантаОбеспечения(ИмяДокумента, ИмяТЧ, ИмяДокументыДляОбработкиВариантаОбеспечения = Неопределено, ИмяПоляВариантОбеспечения = "ВариантОбеспечения") Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументыДляОбработкиВариантаОбеспечения
		|ИЗ
		|	Документ.ЗаказКлиента КАК Реквизиты
		|ГДЕ
		|	Реквизиты.Ссылка В(&Ссылки)
		|		И ИСТИНА В(
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Документ.ЗаказКлиента.Товары КАК Товары
		|			ГДЕ
		|				Товары.Ссылка = Реквизиты.Ссылка
		|					И Товары.ВариантОбеспечения В(
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОбособленно),
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОтгрузитьОбособленно)))
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Товары.ВариантОбеспечения", "Товары." + ИмяПоляВариантОбеспечения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ЗаказКлиента.Товары", ИмяДокумента + "." + ИмяТЧ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ЗаказКлиента", ИмяДокумента);
	Если ИмяДокументыДляОбработкиВариантаОбеспечения <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"ДокументыДляОбработкиВариантаОбеспечения",
			ИмяДокументыДляОбработкиВариантаОбеспечения);
	КонецЕсли;
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВременнойТаблицыДокументыДляЗаменыКОбеспечениюНаТребуется(МенеджерДокумента) Экспорт

	Текст = МенеджерДокумента.ТекстЗапросаДокументыДляЗаменыКОбеспечениюНаТребуется();
	ТекстВременнойТаблицы =
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументыДляЗаменыКОбеспечениюНаТребуется
		|ИЗ
		|	ТекстПереопределяемый КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&Ссылки)
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	
	ТекстВременнойТаблицы = СтрЗаменить(ТекстВременнойТаблицы, "ТекстПереопределяемый", СтрШаблон("(%1)", Текст));
	Возврат ТекстВременнойТаблицы;

КонецФункции

Процедура ОбработатьНеиспользуемыеВариантыОбеспечения(ТабличнаяЧасть, ОбъектИзменен, ТребуетсяОбработкаВариантаОбеспечения, ЗаменитьКОбеспечениюНаТребуется, ЕстьРаботы, ЕстьИсходный) Экспорт
	
	Если Не ТребуетсяОбработкаВариантаОбеспечения И Не ЗаменитьКОбеспечениюНаТребуется Тогда
		Возврат;
	КонецЕсли;
	
	ВариантКОбеспечению         = Перечисления.ВариантыОбеспечения.КОбеспечению;
	ВариантОтгрузить            = Перечисления.ВариантыОбеспечения.Отгрузить;
	ВариантОбособленно          = Перечисления.ВариантыОбеспечения.УдалитьОбособленно;
	ВариантОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.УдалитьОтгрузитьОбособленно;
	ВариантТребуется            = Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления;
	ТипРабота                   = Перечисления.ТипыНоменклатуры.Работа;
	
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ДокументОбъект.ЗаказНаСборку") Тогда
		
		Строка = ТабличнаяЧасть;
		Если Строка.ВариантОбеспечения = ВариантОтгрузитьОбособленно Тогда
			Строка.ВариантОбеспеченияДоИзмененияОбновлениемИБ = Строка.ВариантОбеспечения;
			Строка.ВариантОбеспечения = ВариантОтгрузить;
			Строка.Обособленно = Истина;
			ОбъектИзменен = Истина;
		ИначеЕсли Строка.ВариантОбеспечения = ВариантОбособленно Тогда
			Строка.ВариантОбеспеченияДоИзмененияОбновлениемИБ = Строка.ВариантОбеспечения;
			Строка.ВариантОбеспечения = ВариантКОбеспечению;
			Строка.Обособленно = Истина;
			ОбъектИзменен = Истина;
		ИначеЕсли ЗаменитьКОбеспечениюНаТребуется И Строка.ВариантОбеспечения = ВариантКОбеспечению Тогда
			Строка.ВариантОбеспеченияДоИзмененияОбновлениемИБ = Строка.ВариантОбеспечения;
			Строка.ВариантОбеспечения = ВариантТребуется;
			ОбъектИзменен = Истина;
		КонецЕсли;
		
	Иначе
		
		Если ЕстьРаботы Тогда
			
			МассивНоменклатуры = ТабличнаяЧасть.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
			ТипыНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивНоменклатуры, "ТипНоменклатуры");
		
		КонецЕсли;
		
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			//++ Устарело_Производство21
			Если ЕстьИсходный Тогда
			
				Если Строка.ВариантОбеспеченияИсходный = ВариантОтгрузитьОбособленно Тогда
					Строка.ВариантОбеспеченияИсходныйДоИзмененияОбновлениемИБ = Строка.ВариантОбеспеченияИсходный;
					Строка.ВариантОбеспеченияИсходный = ВариантОтгрузить;
					Строка.ОбособленноИсходный = Истина;
					ОбъектИзменен = Истина;
				ИначеЕсли Строка.ВариантОбеспеченияИсходный = ВариантОбособленно Тогда
					Строка.ВариантОбеспеченияИсходныйДоИзмененияОбновлениемИБ = Строка.ВариантОбеспеченияИсходный;
					Строка.ВариантОбеспеченияИсходный = ВариантКОбеспечению;
					Строка.ОбособленноИсходный = Истина;
					ОбъектИзменен = Истина;
				ИначеЕсли ЗаменитьКОбеспечениюНаТребуется И Строка.ВариантОбеспеченияИсходный = ВариантКОбеспечению
						И (Не ЕстьРаботы Или ТипыНоменклатуры.Получить(Строка.Номенклатура) <> ТипРабота) Тогда
					Строка.ВариантОбеспеченияИсходныйДоИзмененияОбновлениемИБ = Строка.ВариантОбеспеченияИсходный;
					Строка.ВариантОбеспеченияИсходный = ВариантТребуется;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
			КонецЕсли;
			//-- Устарело_Производство21
			
			Если Строка.ВариантОбеспечения = ВариантОтгрузитьОбособленно Тогда
				Строка.ВариантОбеспеченияДоИзмененияОбновлениемИБ = Строка.ВариантОбеспечения;
				Строка.ВариантОбеспечения = ВариантОтгрузить;
				Строка.Обособленно = Истина;
				ОбъектИзменен = Истина;
			ИначеЕсли Строка.ВариантОбеспечения = ВариантОбособленно Тогда
				Строка.ВариантОбеспеченияДоИзмененияОбновлениемИБ = Строка.ВариантОбеспечения;
				Строка.ВариантОбеспечения = ВариантКОбеспечению;
				Строка.Обособленно = Истина;
				ОбъектИзменен = Истина;
			ИначеЕсли ЗаменитьКОбеспечениюНаТребуется И Строка.ВариантОбеспечения = ВариантКОбеспечению
						И (Не ЕстьРаботы Или ТипыНоменклатуры.Получить(Строка.Номенклатура) <> ТипРабота) Тогда
				
				Строка.ВариантОбеспеченияДоИзмененияОбновлениемИБ = Строка.ВариантОбеспечения;
				Строка.ВариантОбеспечения = ВариантТребуется;
				ОбъектИзменен = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьДействиеДляЗаказовПослеВопросаФоновымЗаданием(ПараметрыПроцедуры, УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение действия обеспечения в списке заказов'");
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ОбеспечениеВДокументахСервер.ВыполнитьДействиеДляЗаказовПослеВопроса",
		ПараметрыПроцедуры);
	
КонецФункции

Функция ВыгрузитьТаблицуИзмененийДокумента(МенеджерВременныхТаблиц, Форма)
	
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Тексты = Новый Массив();
	ТекстЗапроса = ВременнаяТаблицаДвиженийДокумента();
	Запрос.УстановитьПараметр("Ссылка", Неопределено);
	Запрос.УстановитьПараметр("СсылкаНовогоНазначения", Справочники.Назначения.ПолучитьСсылку());
	Тексты.Добавить(ТекстЗапроса);
	
	КорректировкаДвижений = ?(ПараметрыВстраивания.АдресКорректировкиДвижений = Неопределено,
		Неопределено,
		ПолучитьИзВременногоХранилища(Форма[ПараметрыВстраивания.АдресКорректировкиДвижений]));
	Если КорректировкаДвижений = Неопределено Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
			|	НЕОПРЕДЕЛЕНО КАК Характеристика,
			|	НЕОПРЕДЕЛЕНО КАК Склад,
			|	НЕОПРЕДЕЛЕНО КАК Назначение,
			|	НЕОПРЕДЕЛЕНО КАК ЗаказНаОтгрузку,
			|	0            КАК Отгрузить,
			|	0            КАК Резервировать
			|ПОМЕСТИТЬ ВременнаяТаблицаКорректировкаДвиженийДокумента
			|ГДЕ
			|	ЛОЖЬ";
		
	Иначе
		Запрос.УстановитьПараметр("КорректировкаДвижений", КорректировкаДвижений.ТаблицаДвижений);
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Движения.Номенклатура    КАК Номенклатура,
			|	Движения.Характеристика  КАК Характеристика,
			|	Движения.Склад           КАК Склад,
			|	Движения.Назначение      КАК Назначение,
			|	Движения.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
			|	Движения.Отгрузить       КАК Отгрузить,
			|	Движения.Резервировать   КАК Резервировать
			|ПОМЕСТИТЬ ВременнаяТаблицаКорректировкаДвиженийДокумента
			|ИЗ
			|	&КорректировкаДвижений КАК Движения
			|ГДЕ
			|	Движения.Отгрузить <> 0
			|		ИЛИ Движения.Резервировать <> 0
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад, Назначение";
	КонецЕсли;
	Тексты.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Склад           КАК Склад,
		|	Таблица.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|			
		|			Таблица.Назначение
		|			
		|		ИНАЧЕ
		|			
		|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			
		|	КОНЕЦ КАК Назначение
		|ПОМЕСТИТЬ ВыделенныеЗаказы
		|ИЗ
		|	ВременнаяТаблицаДанныхДокумента КАК Таблица
		|;
		|
		|//////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Заказы.Номенклатура    КАК Номенклатура,
		|	Заказы.Характеристика  КАК Характеристика,
		|	Заказы.Склад           КАК Склад,
		|	Заказы.Назначение      КАК Назначение
		|ПОМЕСТИТЬ ВыделенныеТовары
		|ИЗ
		|	ВыделенныеЗаказы КАК Заказы";
	
	Тексты.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
		// Имитация движений редактируемого документа.
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Корректировка.Номенклатура         КАК Номенклатура,
		|	Корректировка.Характеристика       КАК Характеристика,
		|	Корректировка.Склад                КАК Склад,
		|	Корректировка.Назначение           КАК Назначение,
		|	Корректировка.ЗаказНаОтгрузку      КАК ЗаказНаОтгрузку,
		|	СУММА(Корректировка.Отгрузить)     КАК Отгрузить,
		|	СУММА(Корректировка.Резервировать) КАК Резервировать
		|ИЗ(
		|	ВЫБРАТЬ
		|		Движения.Номенклатура    КАК Номенклатура,
		|		Движения.Характеристика  КАК Характеристика,
		|		Движения.Склад           КАК Склад,
		|		Движения.Назначение      КАК Назначение,
		|		Движения.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|		Движения.Отгрузить       КАК Отгрузить,
		|		Движения.Резервировать   КАК Резервировать
		|	ИЗ
		|		ВременнаяТаблицаДвиженийДокумента КАК Движения
		|	ГДЕ
		|		Движения.Отгрузить <> 0 ИЛИ Движения.Резервировать <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Таблица корректировки движений документа.
		|	ВЫБРАТЬ
		|		Движения.Номенклатура    КАК Номенклатура,
		|		Движения.Характеристика  КАК Характеристика,
		|		Движения.Склад           КАК Склад,
		|		Движения.Назначение      КАК Назначение,
		|		Движения.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|		Движения.Отгрузить       КАК Отгрузить,
		|		Движения.Резервировать   КАК Резервировать
		|	ИЗ
		|		ВыделенныеТовары КАК Товары
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКорректировкаДвиженийДокумента КАК Движения
		|			ПО Движения.Номенклатура   = Товары.Номенклатура
		|			 И Движения.Характеристика = Товары.Характеристика
		|			 И Движения.Назначение     = Товары.Назначение
		|			 И Движения.Склад          = Товары.Склад
		|	ГДЕ
		|		НЕ Движения.Номенклатура ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Сторно записанных движений документа.
		|	ВЫБРАТЬ
		|		Движения.Номенклатура    КАК Номенклатура,
		|		Движения.Характеристика  КАК Характеристика,
		|		Движения.Склад           КАК Склад,
		|		Движения.Назначение      КАК Назначение,
		|		Движения.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|		-Движения.Отгрузить      КАК Отгрузить,
		|		-Движения.Резервировать  КАК Резервировать
		|	ИЗ
		|		ВыделенныеТовары КАК Товары
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РаспределениеЗапасовДвижения КАК Движения
		|			ПО Движения.Номенклатура    = Товары.Номенклатура
		|			 И Движения.Характеристика  = Товары.Характеристика
		|			 И Движения.Назначение      = Товары.Назначение
		|			 И Движения.Склад           = Товары.Склад
		|			 И Движения.Активность
		|	ГДЕ
		|		НЕ Движения.Номенклатура ЕСТЬ NULL
		|			И Движения.Регистратор В(
		|				ВЫБРАТЬ
		|					Таблица.Регистратор КАК Регистратор
		|				ИЗ
		|					ВременнаяТаблицаДанныхДокумента КАК Таблица)) КАК Корректировка
		|СГРУППИРОВАТЬ ПО
		|	Корректировка.Номенклатура,
		|	Корректировка.Характеристика,
		|	Корректировка.Склад,
		|	Корректировка.Назначение,
		|	Корректировка.ЗаказНаОтгрузку
		|ИМЕЮЩИЕ
		|	СУММА(Корректировка.Отгрузить) <> 0
		|		ИЛИ СУММА(Корректировка.Резервировать) <> 0";
	
	Тексты.Добавить(ТекстЗапроса);
	Запрос.Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаИзменений;
	
КонецФункции

Функция ТекстИПараметрыЗапросаОбеспеченияЗаказовНаОтгрузку(ИмяВременнойТаблицы)
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("НачалоТекущегоДня");
	ПараметрыЗапроса.Вставить("ЗаказыНаОтгрузку");
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостояниеЗаказа.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	МАКСИМУМ(СостояниеЗаказа.Состояние В(
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве))) КАК МожноОтгрузитьСейчас,
		|	МАКСИМУМ(СостояниеЗаказа.РезервПревышаетОстатки) КАК РезервПревышаетОстатки,
		|	
		|	МАКСИМУМ(СостояниеЗаказа.ЖелаемаяДатаОтгрузки > ДАТАВРЕМЯ(1,1,1)
		|				
		|				И ВЫБОР КОГДА СостояниеЗаказа.ЖелаемаяДатаОтгрузки < &НачалоТекущегоДня ТОГДА
		|								&НачалоТекущегоДня
		|							ИНАЧЕ СостояниеЗаказа.ЖелаемаяДатаОтгрузки
		|						КОНЕЦ
		|						
		|					< ВЫБОР КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате)
		|							И СостояниеЗаказа.ДатаПоступления <> ДАТАВРЕМЯ(1, 1, 1) ТОГДА
		|									
		|									ВЫБОР КОГДА СостояниеЗаказа.ДатаПоступления < &НачалоТекущегоДня ТОГДА
		|											&НачалоТекущегоДня
		|										ИНАЧЕ СостояниеЗаказа.ДатаПоступления
		|									КОНЕЦ
		|									
		|								КОГДА СостояниеЗаказа.Состояние В(
		|										ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате),
		|										ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.НеОбеспечивать),
		|										ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|										ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить)) ТОГДА
		|									
		|									ЕСТЬNULL(РасчетПереопределяемый.ПлановаяДатаПоставки, &НачалоТекущегоДня)
		|									
		|							ИНАЧЕ
		|								ДАТАВРЕМЯ(1,1,1)
		|						КОНЕЦ) КАК ДатаОтгрузкиНеИсполнима,
		|	
		|	МАКСИМУМ(ВЫБОР КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате) ТОГДА
		|						
		|						ВЫБОР КОГДА СостояниеЗаказа.ДатаПоступления < &НачалоТекущегоДня ТОГДА
		|									&НачалоТекущегоДня
		|								ИНАЧЕ СостояниеЗаказа.ДатаПоступления
		|							КОНЕЦ
		|						
		|					КОГДА СостояниеЗаказа.Состояние В(
		|						ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.НеОбеспечивать),
		|						ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить),
		|						ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу)) ТОГДА
		|							
		|							РасчетПереопределяемый.ПлановаяДатаПоставки
		|							
		|						ИНАЧЕ
		|							&НачалоТекущегоДня
		|				КОНЕЦ) КАК ВозможнаяДатаОтгрузки
		|ПОМЕСТИТЬ ВтПереопределяемый
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК СостояниеЗаказа
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетПереопределяемый ПО ИСТИНА
		|ГДЕ
		|	СостояниеЗаказа.ЗаказНаОтгрузку В(&ЗаказыНаОтгрузку)
		|		И СостояниеЗаказа.Состояние В(
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.НеОбеспечивать),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве))
		|			
		|СГРУППИРОВАТЬ ПО
		|	СостояниеЗаказа.ЗаказНаОтгрузку";
	
	Подстановки = ПодстановкиПлановойДатыПоставки(
		"СостояниеЗаказа.Номенклатура",
		"СостояниеЗаказа.Характеристика",
		"СостояниеЗаказа.Склад",
		"&НачалоТекущегоДня",
		"СостояниеЗаказа.Состояние В(
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить))");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетПереопределяемый.ПлановаяДатаПоставки", Подстановки.Поле);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ РасчетПереопределяемый ПО ИСТИНА", Подстановки.Соединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтПереопределяемый", ИмяВременнойТаблицы);
	ТекстИПараметры = Новый Структура("Текст,Параметры", ТекстЗапроса, ПараметрыЗапроса);
	
	Возврат ТекстИПараметры;
	
КонецФункции

#Область ЗаполнениеОбеспечения

// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//  ДополнительныеПараметры - Структура
Функция ОстаткиДляЗаписанногоДокумента(МенеджерВременныхТаблиц, ДополнительныеПараметры)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Склад           КАК Склад,
		|	Таблица.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|			
		|			Таблица.Назначение
		|			
		|		ИНАЧЕ
		|			
		|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			
		|	КОНЕЦ КАК Назначение
		|ПОМЕСТИТЬ ВыделенныеЗаказы
		|ИЗ
		|	ВременнаяТаблицаДанныхДокумента КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, ЗаказНаОтгрузку
		|;
		|
		|//////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Заказы.Номенклатура    КАК Номенклатура,
		|	Заказы.Характеристика  КАК Характеристика,
		|	Заказы.Склад           КАК Склад,
		|	Заказы.Назначение      КАК Назначение
		|ПОМЕСТИТЬ ВыделенныеТовары
		|ИЗ
		|	ВыделенныеЗаказы КАК Заказы
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение
		|;
		|
		|//////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Изменения.Номенклатура       КАК Номенклатура,
		|	Изменения.Характеристика     КАК Характеристика,
		|	Изменения.Склад              КАК Склад,
		|	Изменения.Назначение         КАК Назначение,
		|	СУММА(Изменения.Доступно)    КАК Количество
		|ПОМЕСТИТЬ ТаблицаОстатков
		|ИЗ(
		// "Мягкий" резерв под заказом.
		|	ВЫБРАТЬ
		|		СостояниеЗаказа.Номенклатура               КАК Номенклатура,
		|		СостояниеЗаказа.Характеристика             КАК Характеристика,
		|		СостояниеЗаказа.Склад                      КАК Склад,
		|		СостояниеЗаказа.Назначение                 КАК Назначение,
		|		СостояниеЗаказа.Зарезервировано            КАК Доступно
		|	ИЗ
		|		ВыделенныеЗаказы КАК Заказы
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК СостояниеЗаказа
		|			ПО СостояниеЗаказа.Номенклатура    = Заказы.Номенклатура
		|			 И СостояниеЗаказа.Характеристика  = Заказы.Характеристика
		|			 И СостояниеЗаказа.Склад           = Заказы.Склад
		|			 И СостояниеЗаказа.Назначение      = Заказы.Назначение
		|			 И СостояниеЗаказа.ЗаказНаОтгрузку = Заказы.ЗаказНаОтгрузку
		|			 И СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе)
		|ГДЕ
		|	НЕ СостояниеЗаказа.Номенклатура ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Свободный остаток на складе.
		|	ВЫБРАТЬ
		|		СвободныйОстаток.Номенклатура    КАК Номенклатура,
		|		СвободныйОстаток.Характеристика  КАК Характеристика,
		|		СвободныйОстаток.Склад           КАК Склад,
		|		СвободныйОстаток.Назначение      КАК Назначение,
		|		СвободныйОстаток.Свободно        КАК Доступно
		|	ИЗ
		|		ВыделенныеТовары КАК Товары
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК СвободныйОстаток
		|			ПО СвободныйОстаток.Номенклатура    = Товары.Номенклатура
		|			 И СвободныйОстаток.Характеристика  = Товары.Характеристика
		|			 И СвободныйОстаток.Склад           = Товары.Склад
		|			 И СвободныйОстаток.Назначение      = Товары.Назначение
		|			 И СвободныйОстаток.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		|			 И СвободныйОстаток.Свободно > 0
		|ГДЕ
		|	НЕ СвободныйОстаток.Номенклатура ЕСТЬ NULL) КАК Изменения
		|СГРУППИРОВАТЬ ПО
		|	Изменения.Номенклатура,
		|	Изменения.Характеристика,
		|	Изменения.Склад,
		|	Изменения.Назначение
		|ИМЕЮЩИЕ
		|	СУММА(Изменения.Доступно) <> 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение";
		
	Запрос.Выполнить();
	
	ОбеспечениеВДокументахПереопределяемый.ДобавитьВременнуюТаблицуДоступныеОстатки(МенеджерВременныхТаблиц, ДополнительныеПараметры);
	
	ИмяТаблицы = ?(МенеджерВременныхТаблиц.Таблицы.Найти("ДоступныеОстатки") <> Неопределено, "ДоступныеОстатки", "ТаблицаОстатков");
	ОстаткиСклада = МенеджерВременныхТаблиц.Таблицы[ИмяТаблицы].ПолучитьДанные().Выгрузить();
	
	Возврат ОстаткиСклада;
	
КонецФункции

Процедура ДобавитьВременныеТаблицыДляПолученияОстатков(Запрос, ОбособленныеИНеобособленныеОстатки, ТаблицаОформлено, КорректировкаДвижений, СторнироватьОтгрузитьВСтроке)
	
	// В менеджере должны быть следующие временные таблицы:
	// - ВременнаяТаблицаДанныхДокумента
	// - ВременнаяТаблицаДвиженийДокумента
	// - ВременнаяТаблицаДвиженийДокументаДляВыделенныхСтрок
	// - ВременнаяТаблицаДанныхДокументаДляВыделенныхСтрок
	
	Запрос.УстановитьПараметр("ТаблицаОформлено", ТаблицаОформлено);
	Запрос.УстановитьПараметр("ОбособленныеИНеобособленныеОстатки", ОбособленныеИНеобособленныеОстатки);
	
	Если КорректировкаДвижений = Неопределено Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
			|	НЕОПРЕДЕЛЕНО КАК Характеристика,
			|	НЕОПРЕДЕЛЕНО КАК Склад,
			|	НЕОПРЕДЕЛЕНО КАК Назначение,
			|	НЕОПРЕДЕЛЕНО КАК ЗаказНаОтгрузку,
			|	0            КАК Отгрузить,
			|	0            КАК Резервировать
			|ПОМЕСТИТЬ ВременнаяТаблицаКорректировкаДвиженийДокумента
			|ГДЕ
			|	ЛОЖЬ";
		
	Иначе
		Запрос.УстановитьПараметр("КорректировкаДвижений", КорректировкаДвижений.ТаблицаДвижений);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Движения.Номенклатура    КАК Номенклатура,
			|	Движения.Характеристика  КАК Характеристика,
			|	Движения.Склад           КАК Склад,
			|	Движения.Назначение      КАК Назначение,
			|	Движения.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
			|	Движения.Отгрузить       КАК Отгрузить,
			|	Движения.Резервировать   КАК Резервировать
			|ПОМЕСТИТЬ ВременнаяТаблицаКорректировкаДвиженийДокумента
			|ИЗ
			|	&КорректировкаДвижений КАК Движения
			|ГДЕ
			|	Движения.Отгрузить <> 0
			|		ИЛИ Движения.Резервировать <> 0
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Назначение";
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.КодСтроки  КАК КодСтроки,
		|	Таблица.Склад      КАК Склад,
		|	Таблица.Ссылка     КАК Ссылка,
		|	Таблица.Количество КАК Количество
		|ПОМЕСТИТЬ ТаблицаОформлено
		|ИЗ
		|	&ТаблицаОформлено КАК Таблица
		|;
		|
		|/////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Склад           КАК Склад,
		|	Таблица.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	Таблица.Обособленно     КАК Обособленно,
		|	Таблица.Регистратор     КАК Регистратор,
		|	ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|			
		|			ВЫБОР КОГДА Таблица.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|						НЕОПРЕДЕЛЕНО
		|					ИНАЧЕ
		|						Таблица.Назначение
		|				КОНЕЦ
		|			
		|		ИНАЧЕ
		|			
		|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			
		|	КОНЕЦ КАК Назначение
		|ПОМЕСТИТЬ ВыделенныеЗаказыСУчетомСклада
		|ИЗ
		|	ВременнаяТаблицаДанныхДокументаДляВыделенныхСтрок КАК Таблица
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Склад           КАК Склад,
		|	Таблица.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	НЕ Таблица.Обособленно  КАК Обособленно,
		|	Таблица.Регистратор     КАК Регистратор,
		|	ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|			
		|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			
		|		ИНАЧЕ
		|			
		|			ВЫБОР КОГДА Таблица.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|						НЕОПРЕДЕЛЕНО
		|					ИНАЧЕ
		|						Таблица.Назначение
		|				КОНЕЦ
		|			
		|	КОНЕЦ КАК Назначение
		|ИЗ
		|	ВременнаяТаблицаДанныхДокументаДляВыделенныхСтрок КАК Таблица
		|ГДЕ
		|	&ОбособленныеИНеобособленныеОстатки
		|;
		|
		|//////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Заказы.Номенклатура    КАК Номенклатура,
		|	Заказы.Характеристика  КАК Характеристика,
		|	Заказы.Назначение      КАК Назначение,
		|	Заказы.Склад           КАК Склад,
		|	Заказы.Обособленно     КАК Обособленно
		|ПОМЕСТИТЬ ВыделенныеТоварыСУчетомСклада
		|ИЗ
		|	ВыделенныеЗаказыСУчетомСклада КАК Заказы
		|;
		|
		|//////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Заказы.Номенклатура    КАК Номенклатура,
		|	Заказы.Характеристика  КАК Характеристика,
		|	Заказы.Назначение      КАК Назначение,
		|	Заказы.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	Заказы.Обособленно     КАК Обособленно,
		|	Заказы.Регистратор     КАК Регистратор
		|ПОМЕСТИТЬ ВыделенныеЗаказы
		|ИЗ
		|	ВыделенныеЗаказыСУчетомСклада КАК Заказы
		|;
		|
		|//////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Заказы.Номенклатура    КАК Номенклатура,
		|	Заказы.Характеристика  КАК Характеристика,
		|	Заказы.Назначение      КАК Назначение,
		|	Заказы.Обособленно     КАК Обособленно
		|ПОМЕСТИТЬ ВыделенныеТовары
		|ИЗ
		|	ВыделенныеТоварыСУчетомСклада КАК Заказы
		|;
		|
		|//////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокумента.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВсеРегистраторы
		|ИЗ
		|	ВременнаяТаблицаДанныхДокумента КАК ДанныеДокумента
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|;
		|
		|//////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Заказы.Номенклатура КАК Номенклатура,
		|	Заказы.Характеристика КАК Характеристика,
		|	Заказы.Назначение КАК Назначение,
		|	Заказы.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку
		|ПОМЕСТИТЬ ВыделенныеЗаказыБезРегистратора
		|ИЗ
		|	ВыделенныеЗаказы КАК Заказы
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Назначение, ЗаказНаОтгрузку
		|;
		|
		|//////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Корректировка.Номенклатура    КАК Номенклатура,
		|	Корректировка.Характеристика  КАК Характеристика,
		|	Корректировка.Склад           КАК Склад,
		|	Корректировка.Назначение      КАК Назначение,
		|	СУММА(Корректировка.ВНаличии) КАК ВНаличии
		|ПОМЕСТИТЬ КорректировкаОстатка
		|ИЗ
		|	ВложенныйЗапросПереопределяемый КАК Корректировка
		|СГРУППИРОВАТЬ ПО
		|	Корректировка.Номенклатура,
		|	Корректировка.Характеристика,
		|	Корректировка.Склад,
		|	Корректировка.Назначение";
	
	Текст =
		// Имитация движений редактируемого документа.
		"ВЫБРАТЬ
		|	Движения.Номенклатура        КАК Номенклатура,
		|	Движения.Характеристика      КАК Характеристика,
		|	Движения.Склад               КАК Склад,
		|	Движения.Назначение          КАК Назначение,
		|	-Движения.Отгрузить
		|		- Движения.Резервировать КАК ВНаличии
		|ИЗ
		|	ВыделенныеТовары КАК Товары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДвиженийДокумента КАК Движения
		|		ПО Движения.Номенклатура   = Товары.Номенклатура
		|		 И Движения.Характеристика = Товары.Характеристика
		|		 И Движения.Назначение     = Товары.Назначение
		|ГДЕ
		|	НЕ Движения.Номенклатура ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Таблица корректировки движений документа.
		|ВЫБРАТЬ
		|	Движения.Номенклатура        КАК Номенклатура,
		|	Движения.Характеристика      КАК Характеристика,
		|	Движения.Склад               КАК Склад,
		|	Движения.Назначение          КАК Назначение,
		|	-Движения.Отгрузить
		|		- Движения.Резервировать КАК ВНаличии
		|ИЗ
		|	ВыделенныеТовары КАК Товары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКорректировкаДвиженийДокумента КАК Движения
		|		ПО Движения.Номенклатура   = Товары.Номенклатура
		|		 И Движения.Характеристика = Товары.Характеристика
		|		 И Движения.Назначение     = Товары.Назначение
		|ГДЕ
		|	НЕ Движения.Номенклатура ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Сторно записанных движений документа.
		|ВЫБРАТЬ
		|	Движения.Номенклатура        КАК Номенклатура,
		|	Движения.Характеристика      КАК Характеристика,
		|	Движения.Склад               КАК Склад,
		|	Движения.Назначение          КАК Назначение,
		|	Движения.Отгрузить
		|		+ Движения.Резервировать КАК ВНаличии
		|ИЗ
		|	ВыделенныеЗаказыБезРегистратора КАК Заказы
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РаспределениеЗапасовДвижения КАК Движения
		|		ПО Движения.Номенклатура    = Заказы.Номенклатура
		|		 И Движения.Характеристика  = Заказы.Характеристика
		|		 И Движения.Назначение      = Заказы.Назначение
		|		 И Движения.Активность
		|ГДЕ
		|	НЕ Движения.Номенклатура ЕСТЬ NULL
		|		И Движения.Регистратор В(
		|			ВЫБРАТЬ
		|				Таблица.Регистратор КАК Регистратор
		|			ИЗ
		|				ВсеРегистраторы КАК Таблица)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// "Мягкий" резерв под заказом.
		|ВЫБРАТЬ
		|	Набор.Номенклатура КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	Набор.Склад КАК Склад,
		|	Набор.Назначение КАК Назначение,
		|	СУММА(Набор.Зарезервировано) КАК ВНаличии
		|ИЗ(
		|	ВЫБРАТЬ
		|		РаспределениеЗапасов.Номенклатура КАК Номенклатура,
		|		РаспределениеЗапасов.Характеристика КАК Характеристика,
		|		РаспределениеЗапасов.Склад КАК Склад,
		|		РаспределениеЗапасов.Назначение КАК Назначение,
		|		РаспределениеЗапасов.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|		РаспределениеЗапасов.Зарезервировано КАК Зарезервировано
		|	ИЗ
		|		РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|	ГДЕ
		|		РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе)
		|		И (РаспределениеЗапасов.Номенклатура,
		|				РаспределениеЗапасов.Характеристика,
		|				РаспределениеЗапасов.Назначение,
		|				РаспределениеЗапасов.ЗаказНаОтгрузку) В(
		|			ВЫБРАТЬ
		|				ТаблицаЗаказов.Номенклатура КАК Номенклатура,
		|				ТаблицаЗаказов.Характеристика КАК Характеристика,
		|				ТаблицаЗаказов.Назначение КАК Назначение,
		|				ТаблицаЗаказов.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку
		|			ИЗ
		|				ВыделенныеЗаказы КАК ТаблицаЗаказов)
		|	
		// Для незаписанного заказа переработчику Заказ на отгрузку пуст, но есть регистраторы - этапы.
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаЗаказов.Номенклатура КАК Номенклатура,
		|		ТаблицаЗаказов.Характеристика КАК Характеристика,
		|		РаспределениеЗапасов.Склад КАК Склад,
		|		ТаблицаЗаказов.Назначение КАК Назначение,
		|		ТаблицаЗаказов.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|		РаспределениеЗапасов.Зарезервировано КАК Зарезервировано
		|	ИЗ
		|		ВыделенныеЗаказыБезРегистратора КАК ТаблицаЗаказов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеРегистраторы КАК ВсеРегистраторы
		|			ПО ВсеРегистраторы.Регистратор <> ТаблицаЗаказов.ЗаказНаОтгрузку
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|			ПО РаспределениеЗапасов.Номенклатура    = ТаблицаЗаказов.Номенклатура
		|			 И РаспределениеЗапасов.Характеристика  = ТаблицаЗаказов.Характеристика
		|			 И РаспределениеЗапасов.Назначение      = ТаблицаЗаказов.Назначение
		|			 И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе)
		|			 И РаспределениеЗапасов.ЗаказНаОтгрузку = ВсеРегистраторы.Регистратор) КАК Набор
		|	СГРУППИРОВАТЬ ПО
		|		Набор.Номенклатура,
		|		Набор.Характеристика,
		|		Набор.Склад,
		|		Набор.Назначение,
		|		Набор.ЗаказНаОтгрузку
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Отгруженное по выделенным строкам.
		|ВЫБРАТЬ
		|	ВыделенныеСтроки.Номенклатура   КАК Номенклатура,
		|	ВыделенныеСтроки.Характеристика КАК Характеристика,
		|	ТаблицаОформлено.Склад          КАК Склад,
		|	ВЫБОР КОГДА ВыделенныеСтроки.Обособленно ТОГДА
		|				ВЫБОР КОГДА ВыделенныеСтроки.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|							НЕОПРЕДЕЛЕНО
		|						ИНАЧЕ
		|							ВыделенныеСтроки.Назначение
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	-ТаблицаОформлено.Количество    КАК ВНаличии
		|ИЗ
		|	ВременнаяТаблицаДанныхДокументаДляВыделенныхСтрок КАК ВыделенныеСтроки
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОформлено КАК ТаблицаОформлено
		|		ПО ТаблицаОформлено.КодСтроки = ВыделенныеСтроки.КодСтроки
		|		 И ТаблицаОформлено.Ссылка    = ВыделенныеСтроки.ЗаказНаОтгрузку
		|		 И ТаблицаОформлено.Количество > 0
		|ГДЕ
		|	НЕ ТаблицаОформлено.КодСтроки ЕСТЬ NULL";
		
	Если СторнироватьОтгрузитьВСтроке Тогда
		
		Тексты = Новый Массив();
		Тексты.Добавить(Текст);
		Текст =
			// Сторно имитации движений выделенных строк документа.
			"ВЫБРАТЬ
			|	Движения.Номенклатура        КАК Номенклатура,
			|	Движения.Характеристика      КАК Характеристика,
			|	Движения.Склад               КАК Склад,
			|	Движения.Назначение          КАК Назначение,
			|	Движения.Отгрузить
			|		+ Движения.Резервировать КАК ВНаличии
			|ИЗ
			|	ВыделенныеТовары КАК Товары
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДвиженийДокументаДляВыделенныхСтрок КАК Движения
			|		ПО Движения.Номенклатура   = Товары.Номенклатура
			|		 И Движения.Характеристика = Товары.Характеристика
			|		 И Движения.Назначение     = Товары.Назначение
			|ГДЕ
			|	НЕ Движения.Номенклатура ЕСТЬ NULL";
		Тексты.Добавить(Текст);
		Текст = СтрСоединить(Тексты, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВложенныйЗапросПереопределяемый", СтрШаблон("(%1)", Текст));
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ОстаткиДляУстановкиДействий(Запрос, СкладыГруппы)
	
	// В менеджере должны быть следующие временные таблицы:
	// - ВыделенныеТоварыСУчетомСклада
	// - КорректировкаОстатка
	
	Запрос.УстановитьПараметр("СкладыГруппы", СкладыГруппы);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Остатки.Номенклатура    КАК Номенклатура,
		|	Остатки.Характеристика  КАК Характеристика,
		|	Остатки.Склад           КАК Склад,
		|	Остатки.Назначение      КАК Назначение,
		|	СУММА(Остатки.ВНаличии) КАК Количество
		|ИЗ(
		|	ВЫБРАТЬ
		|		КорректировкаОстатка.Номенклатура   КАК Номенклатура,
		|		КорректировкаОстатка.Характеристика КАК Характеристика,
		|		КорректировкаОстатка.Склад          КАК Склад,
		|		КорректировкаОстатка.Назначение     КАК Назначение,
		|		КорректировкаОстатка.ВНаличии       КАК ВНаличии
		|	ИЗ
		|		КорректировкаОстатка КАК КорректировкаОстатка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Свободный остаток на складе.
		|	ВЫБРАТЬ
		|		Товары.Номенклатура                         КАК Номенклатура,
		|		Товары.Характеристика                       КАК Характеристика,
		|		ЕСТЬNULL(СкладыГруппы.Ссылка, Товары.Склад) КАК Склад,
		|		Товары.Назначение                           КАК Назначение,
		|		ЕСТЬNULL(СвободныйОстаток.Свободно, 0)      КАК ВНаличии
		|	ИЗ
		|		ВыделенныеТоварыСУчетомСклада КАК Товары
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладыГруппы
		|			ПО СкладыГруппы.Ссылка В(&СкладыГруппы)
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК СвободныйОстаток
		|			ПО СвободныйОстаток.Номенклатура    = Товары.Номенклатура
		|			 И СвободныйОстаток.Характеристика  = Товары.Характеристика
		|			 И СвободныйОстаток.Склад           = ЕСТЬNULL(СкладыГруппы.Ссылка, Товары.Склад)
		|			 И СвободныйОстаток.Назначение      = Товары.Назначение
		|			 И СвободныйОстаток.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		|			 И СвободныйОстаток.Свободно > 0
		|ГДЕ
		|	НЕ СвободныйОстаток.Номенклатура ЕСТЬ NULL) КАК Остатки
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Номенклатура,
		|	Остатки.Характеристика,
		|	Остатки.Склад,
		|	Остатки.Назначение
		|ИМЕЮЩИЕ
		|	СУММА(Остатки.ВНаличии) <> 0";
		
	Остатки = Запрос.Выполнить().Выгрузить();
	
	Возврат Остатки;
	
КонецФункции

Функция ОстаткиДляПодбораСкладов(Запрос, СкладыГруппы, КоэффициентУпаковки)
	
	// В менеджере должны быть следующие временные таблицы:
	// - ВыделенныеТоварыСУчетомСклада
	// - КорректировкаОстатка
	
	Запрос.УстановитьПараметр("СкладыГруппы", СкладыГруппы);
	Запрос.УстановитьПараметр("КоэффициентУпаковки", КоэффициентУпаковки);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОжидаемыйОстаток.Номенклатура    КАК Номенклатура,
		|	ОжидаемыйОстаток.Характеристика  КАК Характеристика,
		|	ОжидаемыйОстаток.Назначение      КАК Назначение,
		|	ОжидаемыйОстаток.Склад           КАК Склад,
		|	СУММА(ОжидаемыйОстаток.Свободно) КАК Свободно
		|ПОМЕСТИТЬ ОстаткиОжидаемыхПоступлений
		|ИЗ
		|	ВыделенныеТовары КАК Товары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК ОжидаемыйОстаток
		|			ПО ОжидаемыйОстаток.Номенклатура    = Товары.Номенклатура
		|			 И ОжидаемыйОстаток.Характеристика  = Товары.Характеристика
		|			 И ОжидаемыйОстаток.Назначение      = Товары.Назначение
		|			 И ОжидаемыйОстаток.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление)
		|			 И ОжидаемыйОстаток.Свободно > 0
		|ГДЕ
		|	НЕ ОжидаемыйОстаток.Номенклатура ЕСТЬ NULL
		|СГРУППИРОВАТЬ ПО
		|	ОжидаемыйОстаток.Номенклатура,
		|	ОжидаемыйОстаток.Характеристика,
		|	ОжидаемыйОстаток.Склад,
		|	ОжидаемыйОстаток.Назначение
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Назначение, Склад
		|;
		|
		|///////////////////////////////////////////////////////////
		// Резервы под заказом.
		|ВЫБРАТЬ
		|	СостояниеЗаказа.Номенклатура               КАК Номенклатура,
		|	СостояниеЗаказа.Характеристика             КАК Характеристика,
		|	СостояниеЗаказа.Склад                      КАК Склад,
		|	СостояниеЗаказа.Назначение                 КАК Назначение,
		|	СУММА(СостояниеЗаказа.Зарезервировано)     КАК Количество
		|ПОМЕСТИТЬ КорректировкаРезерва
		|ИЗ
		|	ВыделенныеЗаказы КАК Заказы
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК СостояниеЗаказа
		|		ПО СостояниеЗаказа.Номенклатура    = Заказы.Номенклатура
		|		 И СостояниеЗаказа.Характеристика  = Заказы.Характеристика
		|		 И СостояниеЗаказа.Назначение      = Заказы.Назначение
		|		 И СостояниеЗаказа.ЗаказНаОтгрузку = Заказы.ЗаказНаОтгрузку
		|		 И СостояниеЗаказа.Состояние В(
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве))
		|ГДЕ
		|	НЕ СостояниеЗаказа.Номенклатура ЕСТЬ NULL
		|СГРУППИРОВАТЬ ПО
		|	СостояниеЗаказа.Номенклатура,
		|	СостояниеЗаказа.Характеристика,
		|	СостояниеЗаказа.Склад,
		|	СостояниеЗаказа.Назначение
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Назначение, Склад
		|;
		|
		|///////////////////////////////////////////////////////////
		// Ожидаемые поступления под заказом.
		|ВЫБРАТЬ
		|	СостояниеЗаказа.Номенклатура               КАК Номенклатура,
		|	СостояниеЗаказа.Характеристика             КАК Характеристика,
		|	СостояниеЗаказа.Склад                      КАК Склад,
		|	СостояниеЗаказа.Назначение                 КАК Назначение,
		|	СУММА(СостояниеЗаказа.Зарезервировано)     КАК Количество
		|ПОМЕСТИТЬ КорректировкаОжидаемыхПоступлений
		|ИЗ
		|	ВыделенныеЗаказы КАК Заказы
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК СостояниеЗаказа
		|		ПО СостояниеЗаказа.Номенклатура    = Заказы.Номенклатура
		|		 И СостояниеЗаказа.Характеристика  = Заказы.Характеристика
		|		 И СостояниеЗаказа.Назначение      = Заказы.Назначение
		|		 И СостояниеЗаказа.ЗаказНаОтгрузку = Заказы.ЗаказНаОтгрузку
		|		 И СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате)
		|ГДЕ
		|	НЕ СостояниеЗаказа.Номенклатура ЕСТЬ NULL
		|		И ИСТИНА В(
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА КАК ЕстьЗаписи
		|			ИЗ
		|				РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|			ГДЕ
		|				РаспределениеЗапасов.ЗаказНаПоступление = СостояниеЗаказа.ЗаказНаПоступление
		|					И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление))
		|СГРУППИРОВАТЬ ПО
		|	СостояниеЗаказа.Номенклатура,
		|	СостояниеЗаказа.Характеристика,
		|	СостояниеЗаказа.Склад,
		|	СостояниеЗаказа.Назначение
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Назначение, Склад
		|;
		|
		|///////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Назначение КАК Назначение,
		|	Товары.Обособленно КАК Обособленно,
		|	Склады.Ссылка КАК Склад,
		|	
		|	ЕСТЬNULL(СвободныйОстаток.Свободно, 0)
		|		+ ЕСТЬNULL(КорректировкаОстатка.ВНаличии, 0) КАК ВНаличииВБазовойЕдинице,
		|	ЕСТЬNULL(СвободныйОстаток.Запас - СвободныйОстаток.Свободно, 0)
		|		- ЕСТЬNULL(КорректировкаРезерва.Количество, 0) КАК ВРезервеВБазовойЕдинице,
		|	ЕСТЬNULL(СвободныйОстаток.Свободно, 0)
		|		+ ЕСТЬNULL(КорректировкаОстатка.ВНаличии, 0)
		|		+ ЕСТЬNULL(КорректировкаОжидаемыхПоступлений.Количество, 0)
		|		+ ЕСТЬNULL(ОжидаемыйОстаток.Свободно, 0) КАК ПоГрафикуВБазовойЕдинице,
		|	
		|	ВЫБОР КОГДА Товары.Обособленно ТОГДА
		|				(ЕСТЬNULL(СвободныйОстаток.Свободно, 0)
		|						+ ЕСТЬNULL(КорректировкаОстатка.ВНаличии, 0))
		|					/ &КоэффициентУпаковки
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ КАК ВНаличииОбособленно,
		|	ВЫБОР КОГДА Товары.Обособленно ТОГДА
		|				ЕСТЬNULL(СвободныйОстаток.Свободно, 0)
		|					+ ЕСТЬNULL(КорректировкаОстатка.ВНаличии, 0)
		|					+ ЕСТЬNULL(КорректировкаОжидаемыхПоступлений.Количество, 0)
		|					+ ЕСТЬNULL(ОжидаемыйОстаток.Свободно, 0)
		|				/ &КоэффициентУпаковки
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ КАК ПоГрафикуОбособленно,
		|	(ЕСТЬNULL(СвободныйОстаток.Свободно, 0)
		|			+ ЕСТЬNULL(КорректировкаОстатка.ВНаличии, 0))
		|		/ &КоэффициентУпаковки КАК ВНаличии,
		|	(ЕСТЬNULL(СвободныйОстаток.Запас - СвободныйОстаток.Свободно, 0)
		|			- ЕСТЬNULL(КорректировкаРезерва.Количество, 0))
		|		/ &КоэффициентУпаковки КАК ВРезерве,
		|	(ЕСТЬNULL(СвободныйОстаток.Свободно, 0)
		|			+ ЕСТЬNULL(КорректировкаОстатка.ВНаличии, 0)
		|			+ ЕСТЬNULL(КорректировкаОжидаемыхПоступлений.Количество, 0)
		|			+ ЕСТЬNULL(ОжидаемыйОстаток.Свободно, 0))
		|		/ &КоэффициентУпаковки КАК ПоГрафику,
		|	Склады.Ссылка В(&СкладыГруппы)
		|		ИЛИ Склады.Ссылка = Товары.Склад КАК ЭтоСкладВыбраннойГруппы,
		|	ЕСТЬNULL(НастройкаКонтроляОбеспеченияХарактеристика.КонтролироватьСвободныеОстатки,
		|		ЕСТЬNULL(НастройкаКонтроляОбеспеченияНоменклатура.КонтролироватьСвободныеОстатки,
		|			ЕСТЬNULL(НастройкаКонтроляОбеспечения.КонтролироватьСвободныеОстатки, ЛОЖЬ))) ПроверятьДоступность
		|ИЗ
		|	ВыделенныеТоварыСУчетомСклада КАК Товары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО (НЕ Склады.ПометкаУдаления
		|			ИЛИ Склады.Ссылка = Товары.Склад)
		|			И НЕ Склады.ЭтоГруппа
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК СвободныйОстаток
		|			ПО СвободныйОстаток.Номенклатура    = Товары.Номенклатура
		|			 И СвободныйОстаток.Характеристика  = Товары.Характеристика
		|			 И СвободныйОстаток.Назначение      = Товары.Назначение
		|			 И СвободныйОстаток.Склад           = Склады.Ссылка
		|			 И СвободныйОстаток.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиОжидаемыхПоступлений КАК ОжидаемыйОстаток
		|			ПО ОжидаемыйОстаток.Номенклатура    = Товары.Номенклатура
		|			 И ОжидаемыйОстаток.Характеристика  = Товары.Характеристика
		|			 И ОжидаемыйОстаток.Склад           = Склады.Ссылка
		|			 И ОжидаемыйОстаток.Назначение      = Товары.Назначение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкаОстатка КАК КорректировкаОстатка
		|			ПО КорректировкаОстатка.Номенклатура    = Товары.Номенклатура
		|			 И КорректировкаОстатка.Характеристика  = Товары.Характеристика
		|			 И КорректировкаОстатка.Склад           = Склады.Ссылка
		|			 И КорректировкаОстатка.Назначение      = Товары.Назначение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкаРезерва КАК КорректировкаРезерва
		|			ПО КорректировкаРезерва.Номенклатура    = Товары.Номенклатура
		|			 И КорректировкаРезерва.Характеристика  = Товары.Характеристика
		|			 И КорректировкаРезерва.Склад           = Склады.Ссылка
		|			 И КорректировкаРезерва.Назначение      = Товары.Назначение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкаОжидаемыхПоступлений КАК КорректировкаОжидаемыхПоступлений
		|			ПО КорректировкаОжидаемыхПоступлений.Номенклатура    = Товары.Номенклатура
		|			 И КорректировкаОжидаемыхПоступлений.Характеристика  = Товары.Характеристика
		|			 И КорректировкаОжидаемыхПоступлений.Склад           = Склады.Ссылка
		|			 И КорректировкаОжидаемыхПоступлений.Назначение      = Товары.Назначение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаКонтроляОбеспеченияХарактеристика
		|		ПО НастройкаКонтроляОбеспеченияХарактеристика.Склад = Склады.Ссылка
		|		 И НастройкаКонтроляОбеспеченияХарактеристика.Номенклатура = Товары.Номенклатура
		|		 И НастройкаКонтроляОбеспеченияХарактеристика.Характеристика = Товары.Характеристика
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаКонтроляОбеспеченияНоменклатура
		|		ПО НастройкаКонтроляОбеспеченияНоменклатура.Склад = Склады.Ссылка
		|		 И НастройкаКонтроляОбеспеченияНоменклатура.Номенклатура = Товары.Номенклатура
		|		 И НастройкаКонтроляОбеспеченияНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И НастройкаКонтроляОбеспеченияХарактеристика.Склад ЕСТЬ NULL
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаКонтроляОбеспечения
		|		ПО НастройкаКонтроляОбеспечения.Склад = Склады.Ссылка
		|		 И НастройкаКонтроляОбеспечения.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		 И НастройкаКонтроляОбеспечения.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И НастройкаКонтроляОбеспеченияХарактеристика.Склад ЕСТЬ NULL
		|		 И НастройкаКонтроляОбеспеченияНоменклатура.Склад ЕСТЬ NULL
		|ГДЕ
		|	НЕ Склады.Ссылка ЕСТЬ NULL";
		
	ОстаткиСкладаИГрафика = Запрос.Выполнить().Выгрузить();
	
	Возврат ОстаткиСкладаИГрафика;
	
КонецФункции

// Возвращает таблицу для установки действии
// 
// Параметры:
// 	КодДействия               - Строка -
// 	ЗаполнятьЦелымиУпаковками - Булево -
// 	Коллекция                 - ТаблицаЗначений -
// 	ВыделенныеСтроки          - Массив -
// 	ДанныеСтрок               - ТаблицаЗначений -
// 	КоэффициентыУпаковок      - Соответствие -
// 	ДанныеУчета               - Структура - Содержит:
//   * ОстаткиСклада - ТаблицаЗначений -
//   * ТаблицаОформлено - ТаблицаЗначений -
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Колонки:
//   * КоличествоУпаковок - Число -
//   * ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения -
//   * Склад - СправочникСсылка.Склады -
//   * Идентификатор - Число -
//   * Строка - ДанныеФормыЭлементКоллекции -
//
Функция ТаблицаДляУстановкиДействий(КодДействия, ЗаполнятьЦелымиУпаковками, Коллекция, ВыделенныеСтроки, ДанныеСтрок, КоэффициентыУпаковок, ДанныеУчета)
	
	ОстаткиСклада = ДанныеУчета.ОстаткиСклада;
	ТаблицаОформлено = ДанныеУчета.ТаблицаОформлено; 

	ТаблицаОформлено.Индексы.Добавить("Ссылка,КодСтроки");
	
	ЭтоТаблицаЗначений = ТипЗнч(Коллекция) = Тип("ТаблицаЗначений");
	ЭтоДанныеФормыКоллекция = ТипЗнч(Коллекция) = Тип("ДанныеФормыКоллекция");
	Если ЭтоТаблицаЗначений Тогда
		Коллекция.Индексы.Добавить("ИдентификаторСтроки");
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("ЭлементКоллекции");
	ДанныеСтрок.Индексы.Добавить("ЭлементКоллекции");
	
	ТаблицаИзменений = Новый ТаблицаЗначений();
	ТаблицаИзменений.Колонки.Добавить("КоличествоУпаковок");
	ТаблицаИзменений.Колонки.Добавить("ВариантОбеспечения");
	ТаблицаИзменений.Колонки.Добавить("Склад");
	ТаблицаИзменений.Колонки.Добавить("Идентификатор");
	ТаблицаИзменений.Колонки.Добавить("Строка");
	
	КолонкиТовара          = "Номенклатура,Характеристика,Склад,Назначение";
	КолонкиТовараБезСклада = "Номенклатура,Характеристика,Назначение";
	ОстаткиСклада.Индексы.Добавить(КолонкиТовара);
	ОстаткиСклада.Индексы.Добавить(КолонкиТовараБезСклада);
	СтруктураПоискаОстатка          = Новый Структура(КолонкиТовара);
	СтруктураПоискаОстаткаБезСклада = Новый Структура(КолонкиТовараБезСклада);
	СтруктураПоискаНакладных = Новый Структура("Ссылка,КодСтроки");
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		Если ЭтоТаблицаЗначений Тогда
			СтрокаКоллекции = Коллекция.Найти(ИдентификаторСтроки, "ИдентификаторСтроки");
		ИначеЕсли ЭтоДанныеФормыКоллекция Тогда
			СтрокаКоллекции = Коллекция.НайтиПоИдентификатору(ИдентификаторСтроки);
		Иначе
			СтрокаКоллекции = Коллекция[ИдентификаторСтроки - 1];
		КонецЕсли;
		
		ВариантОбеспечения = ?(КодДействия = "ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ",  Перечисления.ВариантыОбеспечения.КОбеспечению,
		                     ?(КодДействия = "ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬПОМЕРЕПОСТУПЛЕНИЯ", Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления,
		                     ?(КодДействия = "ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ", Перечисления.ВариантыОбеспечения.СоСклада,
		                     ?(КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ",     Перечисления.ВариантыОбеспечения.Отгрузить,
		                     ?(КодДействия = "ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ",Перечисления.ВариантыОбеспечения.НеТребуется,
		                     ?(КодДействия = "ДЕЙСТВИЕ_ПЕРЕДАНРАНЕЕ" ,Перечисления.ВариантыОбеспечения.ПереданРанее,
		                                                               Неопределено))))));
		
		Если ВариантОбеспечения = СтрокаКоллекции.ВариантОбеспечения Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборСтрок.ЭлементКоллекции = ИдентификаторСтроки;
		НайденныеСтроки = ДанныеСтрок.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить; // строка не попадает в отбор, а значит не влияет на остатки.
		КонецЕсли;
		
		Строка = НайденныеСтроки[0];
		
		Если Не ДействиеДопустимо(ВариантОбеспечения, Строка.Обособленно, Строка.ТипНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтруктураПоиска = Неопределено;
		Если Не ЗначениеЗаполнено(Строка.Склад)
				И (Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
					Или Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара) Тогда
			ТекущаяСтруктураПоиска = СтруктураПоискаОстаткаБезСклада;
		Иначе
			ТекущаяСтруктураПоиска = СтруктураПоискаОстатка;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПоиска, Строка);
		НайденныеСтрокиОстатка = ОстаткиСклада.НайтиСтроки(ТекущаяСтруктураПоиска);
		
		СтруктураПоискаНакладных.Ссылка    = Строка.ЗаказНаОтгрузку;
		СтруктураПоискаНакладных.КодСтроки = Строка.КодСтроки;
		НайденныеСтрокиНакладных = ТаблицаОформлено.НайтиСтроки(СтруктураПоискаНакладных);
		
		КонтрольОтгрузки = Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
			И КодДействия <> "ДЕЙСТВИЕ_ОТГРУЗИТЬ"
			И НайденныеСтрокиНакладных.Количество() > 0
			И НайденныеСтрокиНакладных[0].Количество > 0;
		
		БылоЗарезервировано = СтрокаКоллекции.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
			Или СтрокаКоллекции.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
		
		НужноЗарезервировать = (КодДействия = "ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ" Или КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ");
		
		ЗаполнениеПоОстаткам = Не БылоЗарезервировано
			И НужноЗарезервировать
			И Строка.КонтролироватьСвободныеОстатки;
		
		Если ЭтоТаблицаЗначений Или ЭтоДанныеФормыКоллекция Тогда
			Коэффициент = КоэффициентыУпаковок.Получить(ИдентификаторСтроки);
		Иначе
			Коэффициент = КоэффициентыУпаковок.Получить(СтрокаКоллекции);
		КонецЕсли;
		Коэффициент = ?(Коэффициент = Неопределено, 1, Коэффициент);
		
		Если КонтрольОтгрузки Тогда
			
			КоличествоУпаковок = Строка.КоличествоУпаковок
				- Окр(НайденныеСтрокиНакладных[0].Количество * Коэффициент, 3, РежимОкругления.Окр15как10);
			
			Если КоличествоУпаковок > 0 Тогда
				
				
				ДобавленнаяСтрока = ТаблицаИзменений.Добавить();
				ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, Строка);
				ДобавленнаяСтрока.КоличествоУпаковок = ДобавленнаяСтрока.КоличествоУпаковок - КоличествоУпаковок;
				ДобавленнаяСтрока.Идентификатор = ИдентификаторСтроки;
				
				ДобавленнаяСтрока = ТаблицаИзменений.Добавить();
				ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, Строка);
				ДобавленнаяСтрока.ВариантОбеспечения = ВариантОбеспечения;
				ДобавленнаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
				ДобавленнаяСтрока.Идентификатор = ИдентификаторСтроки;
				
			КонецЕсли;
			
		ИначеЕсли Не ЗаполнениеПоОстаткам Тогда
			
			ДобавленнаяСтрока = ТаблицаИзменений.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, Строка);
			ДобавленнаяСтрока.ВариантОбеспечения = ВариантОбеспечения;
			ДобавленнаяСтрока.Идентификатор = ИдентификаторСтроки;
			
		Иначе
			
			КоличествоВСтроке = Строка.Количество;
			КоличествоУпаковокВСтроке = Строка.КоличествоУпаковок;
			ИндексТекущейСтроки = ТаблицаИзменений.Количество();
			Для Индекс = 0 По НайденныеСтрокиОстатка.Количество() - 1 Цикл
				
				СтрокаОстатка = НайденныеСтрокиОстатка[Индекс];
				КоличествоУпаковок = 0;
				Если СтрокаОстатка.Количество >= КоличествоВСтроке Тогда // количество может быть округлено для мерных упаковок.
					
					КоличествоУпаковок = КоличествоУпаковокВСтроке;
					СтрокаОстатка.Количество = СтрокаОстатка.Количество - КоличествоВСтроке;
					КоличествоУпаковокВСтроке = 0;
					КоличествоВСтроке = 0;
					
				ИначеЕсли СтрокаОстатка.Количество > 0 Тогда
					
					ОстатокУпаковок = Окр(СтрокаОстатка.Количество / Коэффициент, 3, РежимОкругления.Окр15как10);
					КоличествоУпаковок = Мин(ОстатокУпаковок, КоличествоУпаковокВСтроке);
					
					Если ЗаполнятьЦелымиУпаковками Тогда
						КоличествоУпаковок = Цел(КоличествоУпаковок);
					КонецЕсли;
					
					СтрокаОстатка.Количество = СтрокаОстатка.Количество - КоличествоУпаковок * Коэффициент;
					КоличествоУпаковокВСтроке = КоличествоУпаковокВСтроке - КоличествоУпаковок;
					КоличествоВСтроке = КоличествоВСтроке - КоличествоУпаковок * Коэффициент;
					
				КонецЕсли;
				
				Если КоличествоУпаковок > 0 Тогда
					
					ДобавленнаяСтрока = ТаблицаИзменений.Добавить();
					ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, Строка);
					ДобавленнаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
					ДобавленнаяСтрока.ВариантОбеспечения = ВариантОбеспечения;
					ДобавленнаяСтрока.Склад = СтрокаОстатка.Склад;
					ДобавленнаяСтрока.Идентификатор = ИдентификаторСтроки;
					
				КонецЕсли;
				
				Если КоличествоУпаковокВСтроке = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоУпаковокВСтроке > 0 Тогда
				
				ДобавленнаяСтрока = ТаблицаИзменений.Вставить(ИндексТекущейСтроки);
				ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, Строка);
				ДобавленнаяСтрока.КоличествоУпаковок = КоличествоУпаковокВСтроке;
				ДобавленнаяСтрока.Идентификатор = ИдентификаторСтроки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаИзменений;
	
КонецФункции

Функция ДействиеДопустимо(ВариантОбеспечения, Обособленно, ТипНоменклатуры)
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		
		Если Обособленно Тогда
			Возврат ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
						Или ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
		Иначе
			Возврат ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
						Или ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
		КонецЕсли;
		
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		Возврат ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
					Или ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
		
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция ВТаблицеИзмененийЕстьДробныеУпаковки(ТаблицаИзменений, КоэффициентыУпаковок, ДанныеСтрок)
	
	Для Каждого Изменение Из ТаблицаИзменений Цикл
		
		Коэффициент = КоэффициентыУпаковок.Получить(Изменение.Идентификатор);
		КоличествоУпаковокВСтроке = ДанныеСтрок.НайтиСтроки(Новый Структура("ЭлементКоллекции",
			Изменение.Идентификатор))[0].КоличествоУпаковок;
		
		Если Коэффициент <> Неопределено
			И КоличествоУпаковокВСтроке = Цел(КоличествоУпаковокВСтроке)
			И Цел(Изменение.КоличествоУпаковок) <> Изменение.КоличествоУпаковок Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ВТаблицеИзмененийЕстьОтгрузкаИДатаОтгрузкиВсехСтрокОднойДатойПросрочена(ТаблицаИзменений, ДанныеСтрок)
	
	ЕстьОтгрузка = Неопределено <>
		ТаблицаИзменений.Найти(
			Перечисления.ВариантыОбеспечения.Отгрузить,
			"ВариантОбеспечения");
	
	Результат = ЕстьОтгрузка
		И ДанныеСтрок[0].ДатаОтгрузкиВсехСтрокОднойДатой <> Неопределено
		И ДанныеСтрок[0].ДатаОтгрузкиВсехСтрокОднойДатой < НачалоДня(ТекущаяДатаСеанса());
	Возврат Результат;
	
КонецФункции

Функция КоэффициентыУпаковок(ДанныеСтрок, ТаблицаФормы)
	
	ДанныеУпаковокТаблица = Новый ТаблицаЗначений;
	ДанныеУпаковокТаблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДанныеУпаковокТаблица.Колонки.Добавить("Упаковка",     Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	Для Каждого СтрокаТаблицы Из ДанныеСтрок Цикл
		
		Если ТаблицаФормы <> Неопределено Тогда
			ЭлементКоллекции = ТаблицаФормы.НайтиПоИдентификатору(СтрокаТаблицы.ЭлементКоллекции);
		Иначе
			ЭлементКоллекции = СтрокаТаблицы;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементКоллекции.Упаковка) Тогда
			НоваяСтрока = ДанныеУпаковокТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		КонецЕсли;
		
	КонецЦикла;
	
	КоэффициентыУпаковок = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентыУпаковок(ДанныеУпаковокТаблица);
	
	Результат = Новый Соответствие();
	Для Каждого СтрокаТаблицы Из ДанныеСтрок Цикл
		
		Если ТаблицаФормы <> Неопределено Тогда
			ЭлементКоллекции = ТаблицаФормы.НайтиПоИдентификатору(СтрокаТаблицы.ЭлементКоллекции);
		Иначе
			ЭлементКоллекции = СтрокаТаблицы;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементКоллекции.Упаковка) Тогда
			
			Коэффициент = КоэффициентыУпаковок[ЭлементКоллекции.Номенклатура][ЭлементКоллекции.Упаковка];
			Если ТаблицаФормы <> Неопределено Тогда
				Результат.Вставить(СтрокаТаблицы.ЭлементКоллекции, Коэффициент);
			Иначе
				Результат.Вставить(СтрокаТаблицы, Коэффициент);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВременнаяТаблицаДвиженийДокумента(ИгнорироватьГотовностьКОбеспечению = Ложь)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО                  КАК Ссылка,
		|	ТабЧасть.ДатаДокумента        КАК Период,
		|	ТабЧасть.Номенклатура         КАК Номенклатура,
		|	ТабЧасть.Характеристика       КАК Характеристика,
		|	ВЫБОР КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|				ТабЧасть.Склад
		|			ИНАЧЕ
		|				ТабЧасть.Подразделение
		|		КОНЕЦ КАК Склад,
		|	ВЫБОР КОГДА ТабЧасть.Обособленно ТОГДА
		|			
		|			ВЫБОР КОГДА ТабЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|						&СсылкаНовогоНазначения
		|					ИНАЧЕ
		|						ТабЧасть.Назначение
		|				КОНЕЦ
		|			
		|		ИНАЧЕ
		|			
		|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			
		|	КОНЕЦ                         КАК Назначение,
		|	ТабЧасть.ЗаказНаОтгрузку      КАК ЗаказНаОтгрузку,
		|	ТабЧасть.ВариантОбеспечения   КАК ВариантОбеспечения,
		|	ТабЧасть.Количество           КАК Количество,
		|	ТабЧасть.ГотовКОбеспечению    КАК ГотовКОбеспечению,
		|	ТабЧасть.ГотовКОтгрузке       КАК ГотовКОтгрузке,
		|	ТабЧасть.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки
		|ИЗ
		|	ВременнаяТаблицаДанныхДокумента КАК ТабЧасть
		|ГДЕ
		|	НЕ ТабЧасть.Отменено";
	
	ВложенныйЗапрос = РаспределениеЗапасовДвижения.ТекстЗапросаРаспоряжениеНаОбеспечениеИОтгрузку(ТекстЗапроса,
		ИгнорироватьГотовностьКОбеспечению);
	ВложенныйЗапрос = СтрШаблон("(%1)", ВложенныйЗапрос);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТабЧасть.Номенклатура         КАК Номенклатура,
		|	ТабЧасть.Характеристика       КАК Характеристика,
		|	ТабЧасть.Склад                КАК Склад,
		|	ТабЧасть.Назначение           КАК Назначение,
		|	ТабЧасть.ЗаказНаОтгрузку      КАК ЗаказНаОтгрузку,
		|	ТабЧасть.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
		|	ТабЧасть.Отгрузить            КАК Отгрузить,
		|	ТабЧасть.Резервировать        КАК Резервировать,
		|	ТабЧасть.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
		|	ТабЧасть.КОбеспечениюБезРезерва КАК КОбеспечениюБезРезерва,
		|	ТабЧасть.НеОбеспечивать       КАК НеОбеспечивать,
		|	ЛОЖЬ                          КАК ИгнорироватьРезервыПриКонтролеОстатков
		|ПОМЕСТИТЬ ВременнаяТаблицаДвиженийДокумента
		|ИЗ
		|	ВложенныйЗапрос КАК ТабЧасть";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВложенныйЗапрос", ВложенныйЗапрос);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////
// Служебные.

#Область СериализацияОбъекта

Процедура ЗаполнитьТаблицыИзДанныхФормы(Таблицы, Форма, ИдентификаторыСтрок)
	
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	ПутьКТаблице = ПутьКТаблице(ПараметрыВстраивания);
	
	Для Каждого Элемент Из Таблицы Цикл
		
		Таблица = Элемент.Значение.Таблица; // ТаблицаЗначений
		Таблица.Очистить();
		ОбъектДанных = Форма;
		Пути = СтрРазделить(Элемент.Ключ, ".", Ложь);
		Для Каждого ЭлементПути Из Пути Цикл
			ОбъектДанных = ОбъектДанных[ЭлементПути];
		КонецЦикла;
		
		Если ТипЗнч(ОбъектДанных) = Тип("ДанныеФормыКоллекция") Тогда
			
			ЭтоТаблицаПотребностей = Элемент.Ключ = ПутьКТаблице;
			Если ИдентификаторыСтрок = Неопределено Или Не ЭтоТаблицаПотребностей Тогда
				
				Для Каждого СтрокаТаблицы Из ОбъектДанных Цикл
					
					НоваяСтрока = Таблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					Если ЭтоТаблицаПотребностей Тогда
						НоваяСтрока.НомерСтроки = СтрокаТаблицы.ПолучитьИдентификатор();
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
					
					СтрокаТаблицы = ОбъектДанных.НайтиПоИдентификатору(ИдентификаторСтроки);
					
					НоваяСтрока = Таблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.НомерСтроки = ИдентификаторСтроки;
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОбъектДанных) = Тип("ТаблицаЗначений") Тогда
			
			Для Каждого СтрокаТаблицы Из ОбъектДанных Цикл
				
				НоваяСтрока = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыИзОбъекта(Таблицы, Объект)
	
	Для Каждого Элемент Из Таблицы Цикл
		
		Элемент.Значение.Таблица.Очистить();
		ОбъектДанных = Объект;
		Пути = СтрРазделить(Элемент.Ключ, ".", Ложь);
		Для Каждого ЭлементПути Из Пути Цикл
			ОбъектДанных = ОбъектДанных[ЭлементПути];
		КонецЦикла;
		
		Если ОбъектДанных <> Объект.Объект Тогда // это табличная часть
			
			Для Каждого СтрокаТаблицы Из ОбъектДанных Цикл
				
				НоваяСтрока = Элемент.Значение.Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока = Элемент.Значение.Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыИзСериализованногоОбъекта(Таблицы, ДанныеСтроки, ПараметрыВстраивания, ТекущаяСтрока)
	
	ПутьКТаблице = ПутьКТаблице(ПараметрыВстраивания);
	
	Для Каждого Элемент Из Таблицы Цикл
		
		Элемент.Значение.Таблица.Очистить();
		ОбъектДанных = ДанныеСтроки;
		Пути = СтрРазделить(Элемент.Ключ, ".");
		Для Каждого ЭлементПути Из Пути Цикл
			ОбъектДанных = ОбъектДанных[ЭлементПути];
		КонецЦикла;
		
		НоваяСтрока = Элемент.Значение.Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектДанных);
		
		Если Элемент.Ключ = ПутьКТаблице Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока); // данные строки могли быть изменены предыдущими действиями
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ИмяВременнойТаблицы - Строка - 
//  Таблица - ТаблицаЗначений - 
// Возвращаемое значение:
// Строка -
Функция ТекстЗапросаВременнойТаблицыПоКолонкамТаблицы(ИмяВременнойТаблицы, Таблица)
	
	Тексты = Новый Массив();
	Для Каждого Колонка Из Таблица.Колонки Цикл
		
		Тексты.Добавить("Таблица." + Колонка.Имя + " КАК " + Колонка.Имя);
		
	КонецЦикла;
	ПодстановкаПоле = СтрСоединить(Тексты, "," + Символы.ПС);
	Текст =
		"ВЫБРАТЬ
		|	&ПодстановкаПоле
		|ПОМЕСТИТЬ ПодстановкаПоместить
		|ИЗ
		|	&ПодстановкаИмяВременнойТаблицы КАК Таблица";
	Текст = СтрЗаменить(Текст, "&ПодстановкаПоле", ПодстановкаПоле);
	Текст = СтрЗаменить(Текст, "ПодстановкаПоместить", ИмяВременнойТаблицы);
	Текст = СтрЗаменить(Текст, "ПодстановкаИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Возврат Текст;
	
КонецФункции

Процедура ДобавитьВременнуюТаблицуДанныхДокумента(МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания)
	
	Запрос = Новый Запрос();
	Для Каждого Элемент Из Таблицы Цикл
		
		Запрос.УстановитьПараметр(Элемент.Значение.ИмяВременнойТаблицы, Элемент.Значение.Таблица);
		
	КонецЦикла;
	
	Запрос.Текст = ПараметрыВстраивания.СлужебныеПараметры.ТекстЗапросаВременнаяТаблицаДанныхДокумента;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДобавитьВременнуюТаблицуДанныхДокументаДляВыделенныхСтрок(Запрос, НомераСтрок)
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабЧасть.ГруппаСкладов                   КАК ГруппаСкладов,
		|	ТабЧасть.Номенклатура                    КАК Номенклатура,
		|	ТабЧасть.Характеристика                  КАК Характеристика,
		|	ТабЧасть.Подразделение                   КАК Подразделение,
		|	ТабЧасть.Склад                           КАК Склад,
		|	ТабЧасть.Назначение                      КАК Назначение,
		|	ТабЧасть.ЗаказНаОтгрузку                 КАК ЗаказНаОтгрузку,
		|	ТабЧасть.ДатаДокумента                   КАК ДатаДокумента,
		|	ТабЧасть.ВариантОбеспечения              КАК ВариантОбеспечения,
		|	ТабЧасть.Обособленно                     КАК Обособленно,
		|	ТабЧасть.Количество                      КАК Количество,
		|	ТабЧасть.КоличествоУпаковок              КАК КоличествоУпаковок,
		|	ТабЧасть.Упаковка                        КАК Упаковка,
		|	ТабЧасть.ГотовКОбеспечению               КАК ГотовКОбеспечению,
		|	ТабЧасть.ГотовКОтгрузке                  КАК ГотовКОтгрузке,
		|	ТабЧасть.ЖелаемаяДатаОтгрузки            КАК ЖелаемаяДатаОтгрузки,
		|	ТабЧасть.Регистратор                     КАК Регистратор,
		|	ТабЧасть.Серия                           КАК Серия,
		|	ТабЧасть.КодСтроки                       КАК КодСтроки,
		|	ТабЧасть.Отменено                        КАК Отменено,
		|	ТабЧасть.НомерСтроки                     КАК НомерСтроки,
		|	ТабЧасть.Приоритет                       КАК Приоритет,
		|	ТабЧасть.ДатаОтгрузкиВсехСтрокОднойДатой КАК ДатаОтгрузкиВсехСтрокОднойДатой
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныхДокументаДляВыделенныхСтрок
		|ИЗ
		|	ВременнаяТаблицаДанныхДокумента КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.НомерСтроки В(&НомераСтрок) ИЛИ НЕОПРЕДЕЛЕНО В(&НомераСтрок)";
	Запрос.УстановитьПараметр("НомераСтрок", НомераСтрок);
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

Функция ОстаткиДляТаблицыДокумента(МенеджерВременныхТаблиц, КэшОстатков, ТаблицаИзменений)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
	
	Тексты = Новый Массив();
	
	Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Регистратор     КАК Регистратор,
		|	ТаблицаДокумента.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	ТаблицаДокумента.Номенклатура    КАК Номенклатура,
		|	ТаблицаДокумента.Характеристика  КАК Характеристика,
		|	ТаблицаДокумента.Упаковка        КАК Упаковка,
		|	
		|	ВЫБОР КОГДА ТаблицаДокумента.Номенклатура.ТипНоменклатуры В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|				ТаблицаДокумента.Склад
		|			ИНАЧЕ
		|				ТаблицаДокумента.Подразделение
		|		КОНЕЦ КАК Склад,
		|	
		|	ВЫБОР КОГДА ТаблицаДокумента.Обособленно ТОГДА
		|				ВЫБОР КОГДА ТаблицаДокумента.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|							НЕОПРЕДЕЛЕНО // чтобы не подбирались свободные остатки, если назначения для документа еще нет в базе.
		|						ИНАЧЕ
		|							ТаблицаДокумента.Назначение
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение
		|ПОМЕСТИТЬ ТаблицаЗаказовИРегистраторов
		|ИЗ
		|	ВременнаяТаблицаДанныхДокумента КАК ТаблицаДокумента
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, ЗаказНаОтгрузку, Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	ТаблицаДокумента.Номенклатура    КАК Номенклатура,
		|	ТаблицаДокумента.Характеристика  КАК Характеристика,
		|	ТаблицаДокумента.Упаковка        КАК Упаковка,
		|	ТаблицаДокумента.Склад           КАК Склад,
		|	ТаблицаДокумента.Назначение      КАК Назначение
		|ПОМЕСТИТЬ ТаблицаЗаказов
		|ИЗ
		|	ТаблицаЗаказовИРегистраторов КАК ТаблицаДокумента
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, ЗаказНаОтгрузку, Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаЗаказов.Номенклатура   КАК Номенклатура,
		|	ТаблицаЗаказов.Характеристика КАК Характеристика,
		|	ТаблицаЗаказов.Склад          КАК Склад,
		|	ТаблицаЗаказов.Назначение     КАК Назначение,
		|	ТаблицаЗаказов.Упаковка       КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	ТаблицаЗаказов КАК ТаблицаЗаказов
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаЗаказов.Номенклатура    КАК Номенклатура,
		|	ТаблицаЗаказов.Характеристика  КАК Характеристика,
		|	ТаблицаЗаказов.Склад           КАК Склад,
		|	ТаблицаЗаказов.Назначение      КАК Назначение,
		|	ТаблицаЗаказов.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку
		|ПОМЕСТИТЬ ТаблицаЗаказовБезУпаковок
		|ИЗ
		|	ТаблицаЗаказов КАК ТаблицаЗаказов
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, ЗаказНаОтгрузку
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаТоваров.Номенклатура    КАК Номенклатура,
		|	ТаблицаТоваров.Характеристика  КАК Характеристика,
		|	ТаблицаТоваров.Склад           КАК Склад,
		|	ТаблицаТоваров.Назначение      КАК Назначение
		|ПОМЕСТИТЬ ТаблицаТоваровБезУпаковок
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Набор.Номенклатура КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	Набор.Склад КАК Склад,
		|	Набор.Назначение КАК Назначение,
		|	Набор.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	СУММА(Набор.Зарезервировано) КАК РаспределеноНаСкладеСводно
		|ПОМЕСТИТЬ ОбеспеченНаСкладе
		|ИЗ (
		|	ВЫБРАТЬ
		|		РаспределениеЗапасов.Номенклатура КАК Номенклатура,
		|		РаспределениеЗапасов.Характеристика КАК Характеристика,
		|		РаспределениеЗапасов.Склад КАК Склад,
		|		РаспределениеЗапасов.Назначение КАК Назначение,
		|		РаспределениеЗапасов.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|		РаспределениеЗапасов.Зарезервировано КАК Зарезервировано
		|	ИЗ
		|		РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|	ГДЕ
		|		РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе)
		|		И (РаспределениеЗапасов.Номенклатура,
		|				РаспределениеЗапасов.Характеристика,
		|				РаспределениеЗапасов.Склад,
		|				РаспределениеЗапасов.Назначение,
		|				РаспределениеЗапасов.ЗаказНаОтгрузку) В(
		|			ВЫБРАТЬ
		|				ТаблицаЗаказов.Номенклатура КАК Номенклатура,
		|				ТаблицаЗаказов.Характеристика КАК Характеристика,
		|				ТаблицаЗаказов.Склад КАК Склад,
		|				ТаблицаЗаказов.Назначение КАК Назначение,
		|				ТаблицаЗаказов.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку
		|			ИЗ
		|				ТаблицаЗаказовИРегистраторов КАК ТаблицаЗаказов)
		|	
		// Для незаписанного заказа переработчику Заказ на отгрузку пуст, но есть регистраторы - этапы.
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаЗаказов.Номенклатура КАК Номенклатура,
		|		ТаблицаЗаказов.Характеристика КАК Характеристика,
		|		ТаблицаЗаказов.Склад КАК Склад,
		|		ТаблицаЗаказов.Назначение КАК Назначение,
		|		ТаблицаЗаказов.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|		РаспределениеЗапасов.Зарезервировано КАК Зарезервировано
		|	ИЗ
		|		ТаблицаЗаказовИРегистраторов КАК ТаблицаЗаказов
		|			
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|			ПО РаспределениеЗапасов.Номенклатура    = ТаблицаЗаказов.Номенклатура
		|			 И РаспределениеЗапасов.Характеристика  = ТаблицаЗаказов.Характеристика
		|			 И РаспределениеЗапасов.Склад           = ТаблицаЗаказов.Склад
		|			 И РаспределениеЗапасов.Назначение      = ТаблицаЗаказов.Назначение
		|			 И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе)
		|			 И РаспределениеЗапасов.ЗаказНаОтгрузку = ТаблицаЗаказов.Регистратор
		|			 И ТаблицаЗаказов.ЗаказНаОтгрузку <> ТаблицаЗаказов.Регистратор) КАК Набор
		|	СГРУППИРОВАТЬ ПО
		|		Набор.Номенклатура,
		|		Набор.Характеристика,
		|		Набор.Склад,
		|		Набор.Назначение,
		|		Набор.ЗаказНаОтгрузку
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, ЗаказНаОтгрузку";
	
	Тексты.Добавить(Текст);
	
	Если КэшОстатков = Неопределено Тогда
		
		Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Таблица.Номенклатура                                      КАК Номенклатура,
			|	Таблица.Характеристика                                    КАК Характеристика,
			|	Таблица.Склад                                             КАК Склад,
			|	Таблица.Назначение                                        КАК Назначение,
			|	Таблица.ЗаказНаОтгрузку                                   КАК ЗаказНаОтгрузку,
			|	ЕСТЬNULL(ОбеспеченНаСкладе.РаспределеноНаСкладеСводно, 0) КАК РаспределеноНаСкладеСводно
			|ПОМЕСТИТЬ РаспределениеЗапасовОбеспеченНаСкладе
			|ИЗ
			|	ТаблицаЗаказовБезУпаковок КАК Таблица
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОбеспеченНаСкладе КАК ОбеспеченНаСкладе
			|		ПО ОбеспеченНаСкладе.Номенклатура    = Таблица.Номенклатура
			|		 И ОбеспеченНаСкладе.Характеристика  = Таблица.Характеристика
			|		 И ОбеспеченНаСкладе.Склад           = Таблица.Склад
			|		 И ОбеспеченНаСкладе.Назначение      = Таблица.Назначение
			|		 И ОбеспеченНаСкладе.ЗаказНаОтгрузку = Таблица.ЗаказНаОтгрузку
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад, Назначение, ЗаказНаОтгрузку
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Таблица.Номенклатура                  КАК Номенклатура,
			|	Таблица.Характеристика                КАК Характеристика,
			|	Таблица.Склад                         КАК Склад,
			|	Таблица.Назначение                    КАК Назначение,
			|	ЕСТЬNULL(ОстатокНаСкладе.Свободно, 0) КАК Свободно,
			|	НЕ ЕСТЬNULL(НастройкаКонтроляОбеспеченияХарактеристика.КонтролироватьСвободныеОстатки,
			|			ЕСТЬNULL(НастройкаКонтроляОбеспеченияНоменклатура.КонтролироватьСвободныеОстатки,
			|				ЕСТЬNULL(НастройкаКонтроляОбеспечения.КонтролироватьСвободныеОстатки, ЛОЖЬ))) КАК ПерераспределятьСкладскиеЗапасы,
			|	ЕСТЬNULL(НастройкаКонтроляОбеспеченияХарактеристика.КонтролироватьСвободныеОстатки,
			|			ЕСТЬNULL(НастройкаКонтроляОбеспеченияНоменклатура.КонтролироватьСвободныеОстатки,
			|				ЕСТЬNULL(НастройкаКонтроляОбеспечения.КонтролироватьСвободныеОстатки,
			|					Таблица.Номенклатура.ТипНоменклатуры В(
			|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
			|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
			|						И Таблица.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))))
			|		И ТаблицаИзменений.Номенклатура ЕСТЬ NULL КАК ОтгружатьЕслиДоступно
			|ПОМЕСТИТЬ РаспределениеЗапасовОстатокНаСкладе
			|ИЗ
			|	ТаблицаТоваровБезУпаковок КАК Таблица
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК ОстатокНаСкладе
			|		ПО ОстатокНаСкладе.Номенклатура   = Таблица.Номенклатура
			|		 И ОстатокНаСкладе.Характеристика = Таблица.Характеристика
			|		 И ОстатокНаСкладе.Склад          = Таблица.Склад
			|		 И ОстатокНаСкладе.Назначение     = Таблица.Назначение
			|		 И ОстатокНаСкладе.Состояние      = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаКонтроляОбеспеченияХарактеристика
			|		ПО НастройкаКонтроляОбеспеченияХарактеристика.Склад = Таблица.Склад
			|		 И НастройкаКонтроляОбеспеченияХарактеристика.Номенклатура = Таблица.Номенклатура
			|		 И НастройкаКонтроляОбеспеченияХарактеристика.Характеристика = Таблица.Характеристика
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаКонтроляОбеспеченияНоменклатура
			|		ПО НастройкаКонтроляОбеспеченияНоменклатура.Склад = Таблица.Склад
			|		 И НастройкаКонтроляОбеспеченияНоменклатура.Номенклатура = Таблица.Номенклатура
			|		 И НастройкаКонтроляОбеспеченияНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		 И НастройкаКонтроляОбеспеченияХарактеристика.Номенклатура ЕСТЬ NULL
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаКонтроляОбеспечения
			|		ПО НастройкаКонтроляОбеспечения.Склад = Таблица.Склад
			|		 И НастройкаКонтроляОбеспечения.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|		 И НастройкаКонтроляОбеспечения.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		 И НастройкаКонтроляОбеспеченияХарактеристика.Номенклатура ЕСТЬ NULL
			|		 И НастройкаКонтроляОбеспеченияНоменклатура.Номенклатура ЕСТЬ NULL
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИзмененийПереопределяемый КАК ТаблицаИзменений
			|		ПО ТаблицаИзменений.Номенклатура = Таблица.Номенклатура
			|		 И ТаблицаИзменений.Характеристика = Таблица.Характеристика
			|		 И ТаблицаИзменений.Склад = Таблица.Склад
			|		 И ТаблицаИзменений.Назначение = Таблица.Назначение
			|		 И ТаблицаИзменений.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПустаяСсылка)
			|		 И ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад, Назначение";
		
		ЕстьДанныеДляОбработки = ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, "РегистрСведений.РаспределениеЗапасов");
		Если Не ЕстьДанныеДляОбработки Тогда
			
			ТекстФиктивнойТаблицы =
				"ВЫБРАТЬ
				|	NULL КАК Номенклатура,
				|	NULL КАК Характеристика,
				|	NULL КАК Склад,
				|	NULL КАК Назначение,
				|	NULL КАК Состояние,
				|	ЗНАЧЕНИЕ(ПланОбмена.ОбновлениеИнформационнойБазы.ПустаяСсылка) КАК Узел
				|ПОМЕСТИТЬ ТаблицаИзмененийПереопределяемый
				|ГДЕ
				|	ЛОЖЬ";
				
			Тексты.Добавить(ТекстФиктивнойТаблицы);
			
		Иначе
			Текст = СтрЗаменить(Текст, "ТаблицаИзмененийПереопределяемый", "РегистрСведений.РаспределениеЗапасов.Изменения");
		КонецЕсли;
		
		Тексты.Добавить(Текст);
		
	Иначе
		
		Отбор = Новый Структура("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТаблицаЗаказов",   КэшОстатков.ПоЗаказу.Скопировать(Отбор));
		Запрос.УстановитьПараметр("ТаблицаТоваров",   КэшОстатков.ПоТовару.Скопировать(Отбор));
		Текст =
			"ВЫБРАТЬ
			|	ТаблицаЗаказов.Номенклатура    КАК Номенклатура,
			|	ТаблицаЗаказов.Характеристика  КАК Характеристика,
			|	ТаблицаЗаказов.Склад           КАК Склад,
			|	ТаблицаЗаказов.Назначение      КАК Назначение,
			|	ТаблицаЗаказов.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
			|	ТаблицаЗаказов.Количество      КАК РаспределеноНаСкладеСводно
			|ПОМЕСТИТЬ РаспределениеЗапасовОбеспеченНаСкладеКэш
			|ИЗ
			|	&ТаблицаЗаказов КАК ТаблицаЗаказов
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад, Назначение, ЗаказНаОтгрузку
			|;
			|
			|/////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура                    КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика                  КАК Характеристика,
			|	ТаблицаТоваров.Склад                           КАК Склад,
			|	ТаблицаТоваров.Назначение                      КАК Назначение,
			|	ТаблицаТоваров.Количество                      КАК Свободно,
			|	ТаблицаТоваров.ПерераспределятьСкладскиеЗапасы КАК ПерераспределятьСкладскиеЗапасы,
			|	ТаблицаТоваров.ОтгружатьЕслиДоступно           КАК ОтгружатьЕслиДоступно
			|ПОМЕСТИТЬ РаспределениеЗапасовОстатокНаСкладеКэш
			|	ИЗ
			|		&ТаблицаТоваров КАК ТаблицаТоваров
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад, Назначение
			|;
			|
			|/////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Таблица.Номенклатура    КАК Номенклатура,
			|	Таблица.Характеристика  КАК Характеристика,
			|	Таблица.Склад           КАК Склад,
			|	Таблица.Назначение      КАК Назначение,
			|	Таблица.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
			|	ЕСТЬNULL(ДанныеКэша.РаспределеноНаСкладеСводно,
			|		ЕСТЬNULL(ОбеспеченНаСкладе.РаспределеноНаСкладеСводно, 0)) КАК РаспределеноНаСкладеСводно
			|ПОМЕСТИТЬ РаспределениеЗапасовОбеспеченНаСкладе
			|ИЗ
			|	ТаблицаЗаказовБезУпаковок КАК Таблица
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РаспределениеЗапасовОбеспеченНаСкладеКэш КАК ДанныеКэша
			|		ПО ДанныеКэша.Номенклатура    = Таблица.Номенклатура
			|		 И ДанныеКэша.Характеристика  = Таблица.Характеристика
			|		 И ДанныеКэша.Склад           = Таблица.Склад
			|		 И ДанныеКэша.Назначение      = Таблица.Назначение
			|		 И ДанныеКэша.ЗаказНаОтгрузку = Таблица.ЗаказНаОтгрузку
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОбеспеченНаСкладе КАК ОбеспеченНаСкладе
			|		ПО ОбеспеченНаСкладе.Номенклатура    = Таблица.Номенклатура
			|		 И ОбеспеченНаСкладе.Характеристика  = Таблица.Характеристика
			|		 И ОбеспеченНаСкладе.Склад           = Таблица.Склад
			|		 И ОбеспеченНаСкладе.Назначение      = Таблица.Назначение
			|		 И ОбеспеченНаСкладе.ЗаказНаОтгрузку = Таблица.ЗаказНаОтгрузку
			|		 И ДанныеКэша.Номенклатура ЕСТЬ NULL
			|		
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад, Назначение, ЗаказНаОтгрузку
			|	
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Таблица.Номенклатура   КАК Номенклатура,
			|	Таблица.Характеристика КАК Характеристика,
			|	Таблица.Склад          КАК Склад,
			|	Таблица.Назначение     КАК Назначение,
			|	ЕСТЬNULL(ДанныеКэша.Свободно, ЕСТЬNULL(ОстатокНаСкладе.Свободно, 0)) КАК Свободно,
			|	ЕСТЬNULL(ДанныеКэша.ПерераспределятьСкладскиеЗапасы,
			|					НЕ ЕСТЬNULL(НастройкаКонтроляОбеспеченияХарактеристика.КонтролироватьСвободныеОстатки,
			|							ЕСТЬNULL(НастройкаКонтроляОбеспеченияНоменклатура.КонтролироватьСвободныеОстатки,
			|								ЕСТЬNULL(НастройкаКонтроляОбеспечения.КонтролироватьСвободныеОстатки, ЛОЖЬ)))
			|						ИЛИ Таблица.Номенклатура.ТипНоменклатуры В(
			|									ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
			|									ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
			|								И Таблица.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|		) КАК ПерераспределятьСкладскиеЗапасы,
			|	ЕСТЬNULL(ДанныеКэша.ОтгружатьЕслиДоступно,
			|				ЕСТЬNULL(НастройкаКонтроляОбеспеченияХарактеристика.КонтролироватьСвободныеОстатки,
			|					ЕСТЬNULL(НастройкаКонтроляОбеспеченияНоменклатура.КонтролироватьСвободныеОстатки,
			|						ЕСТЬNULL(НастройкаКонтроляОбеспечения.КонтролироватьСвободныеОстатки,
			|								Таблица.Номенклатура.ТипНоменклатуры В(
			|										ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
			|										ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
			|									И Таблица.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|							)
			|						)
			|					)
			|		) КАК ОтгружатьЕслиДоступно
			|ПОМЕСТИТЬ РаспределениеЗапасовОстатокНаСкладе
			|ИЗ
			|	ТаблицаТоваровБезУпаковок КАК Таблица
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РаспределениеЗапасовОстатокНаСкладеКэш КАК ДанныеКэша
			|		ПО ДанныеКэша.Номенклатура    = Таблица.Номенклатура
			|		 И ДанныеКэша.Характеристика  = Таблица.Характеристика
			|		 И ДанныеКэша.Склад           = Таблица.Склад
			|		 И ДанныеКэша.Назначение      = Таблица.Назначение
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК ОстатокНаСкладе
			|		ПО ОстатокНаСкладе.Номенклатура   = Таблица.Номенклатура
			|		 И ОстатокНаСкладе.Характеристика = Таблица.Характеристика
			|		 И ОстатокНаСкладе.Склад          = Таблица.Склад
			|		 И ОстатокНаСкладе.Назначение     = Таблица.Назначение
			|		 И ОстатокНаСкладе.Состояние      = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
			|		 И ДанныеКэша.Номенклатура ЕСТЬ NULL
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаКонтроляОбеспеченияХарактеристика
			|		ПО НастройкаКонтроляОбеспеченияХарактеристика.Склад = Таблица.Склад
			|		 И НастройкаКонтроляОбеспеченияХарактеристика.Номенклатура = Таблица.Номенклатура
			|		 И НастройкаКонтроляОбеспеченияХарактеристика.Характеристика = Таблица.Характеристика
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаКонтроляОбеспеченияНоменклатура
			|		ПО НастройкаКонтроляОбеспеченияНоменклатура.Склад = Таблица.Склад
			|		 И НастройкаКонтроляОбеспеченияНоменклатура.Номенклатура = Таблица.Номенклатура
			|		 И НастройкаКонтроляОбеспеченияНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		 И НастройкаКонтроляОбеспеченияХарактеристика.Номенклатура ЕСТЬ NULL
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаКонтроляОбеспечения
			|		ПО НастройкаКонтроляОбеспечения.Склад = Таблица.Склад
			|		 И НастройкаКонтроляОбеспечения.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|		 И НастройкаКонтроляОбеспечения.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		 И НастройкаКонтроляОбеспеченияХарактеристика.Номенклатура ЕСТЬ NULL
			|		 И НастройкаКонтроляОбеспеченияНоменклатура.Номенклатура ЕСТЬ NULL
			|		
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад, Назначение";
		
		Тексты.Добавить(Текст);
	КонецЕсли;
	
	Текст =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Склад           КАК Склад,
		|	Таблица.Назначение      КАК Назначение,
		|	Таблица.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	Таблица.Отгрузить       КАК Отгрузить,
		|	Таблица.Резервировать   КАК Резервировать
		|ПОМЕСТИТЬ ТаблицаИзменений
		|ИЗ
		|	&ТаблицаИзменений КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, ЗаказНаОтгрузку
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Склад           КАК Склад,
		|	Таблица.Назначение      КАК Назначение,
		|	Таблица.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	ВЫБОР КОГДА Таблица.РаспределеноНаСкладеСводно > ЕСТЬNULL(ТаблицаИзменений.Отгрузить + ТаблицаИзменений.Резервировать, 0) ТОГДА
		|					- ЕСТЬNULL(ТаблицаИзменений.Отгрузить + ТаблицаИзменений.Резервировать, 0)
		|			ИНАЧЕ
		|				-Таблица.РаспределеноНаСкладеСводно
		|		КОНЕЦ КАК Свободно
		|ПОМЕСТИТЬ КорректировкаЗаказов
		|ИЗ
		|	РаспределениеЗапасовОбеспеченНаСкладе КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИзменений КАК ТаблицаИзменений
		|		ПО ТаблицаИзменений.Номенклатура    = Таблица.Номенклатура
		|		 И ТаблицаИзменений.Характеристика  = Таблица.Характеристика
		|		 И ТаблицаИзменений.Склад           = Таблица.Склад
		|		 И ТаблицаИзменений.Назначение      = Таблица.Назначение
		|		 И ТаблицаИзменений.ЗаказНаОтгрузку = Таблица.ЗаказНаОтгрузку
		|		 И ТаблицаИзменений.Отгрузить + ТаблицаИзменений.Резервировать > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, ЗаказНаОтгрузку
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	Таблица.Назначение     КАК Назначение,
		|	СУММА(ВЫБОР КОГДА ЕСТЬNULL(ТаблицаИзменений.Отгрузить + ТаблицаИзменений.Резервировать, 0) > 0 ТОГДА
		|			
		|			ВЫБОР КОГДА Таблица.РаспределеноНаСкладеСводно < ЕСТЬNULL(ТаблицаИзменений.Отгрузить + ТаблицаИзменений.Резервировать, 0) ТОГДА
		|						Таблица.РаспределеноНаСкладеСводно - ЕСТЬNULL(ТаблицаИзменений.Отгрузить + ТаблицаИзменений.Резервировать, 0)
		|					ИНАЧЕ
		|						0
		|				КОНЕЦ
		|				
		|			ИНАЧЕ
		|				-ЕСТЬNULL(ТаблицаИзменений.Отгрузить + ТаблицаИзменений.Резервировать, 0)
		|		КОНЕЦ) КАК Свободно
		|ПОМЕСТИТЬ КорректировкаТоваров
		|ИЗ
		|	РаспределениеЗапасовОбеспеченНаСкладе КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИзменений КАК ТаблицаИзменений
		|		ПО ТаблицаИзменений.Номенклатура    = Таблица.Номенклатура
		|		 И ТаблицаИзменений.Характеристика  = Таблица.Характеристика
		|		 И ТаблицаИзменений.Склад           = Таблица.Склад
		|		 И ТаблицаИзменений.Назначение      = Таблица.Назначение
		|		 И ТаблицаИзменений.ЗаказНаОтгрузку = Таблица.ЗаказНаОтгрузку
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Склад,
		|	Таблица.Назначение
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение";
		
	Тексты.Добавить(Текст);
	
	Текст =
		"// Корректировка заказов.
		|ВЫБРАТЬ
		|	Таблица.Номенклатура                                             КАК Номенклатура,
		|	Таблица.Характеристика                                           КАК Характеристика,
		|	Таблица.Склад                                                    КАК Склад,
		|	Таблица.Назначение                                               КАК Назначение,
		|	Таблица.ЗаказНаОтгрузку                                          КАК ЗаказНаОтгрузку,
		|	Таблица.Упаковка                                                 КАК Упаковка,
		|	КорректировкаЗаказов.Свободно / &ТекстЗапросаКоэффициентУпаковки КАК Количество
		|ИЗ
		|	ТаблицаЗаказов КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкаЗаказов КАК КорректировкаЗаказов
		|		ПО КорректировкаЗаказов.Номенклатура    = Таблица.Номенклатура
		|		 И КорректировкаЗаказов.Характеристика  = Таблица.Характеристика
		|		 И КорректировкаЗаказов.Склад           = Таблица.Склад
		|		 И КорректировкаЗаказов.Назначение      = Таблица.Назначение
		|		 И КорректировкаЗаказов.ЗаказНаОтгрузку = Таблица.ЗаказНаОтгрузку
		|ГДЕ
		|	Таблица.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Номенклатура                                       КАК Номенклатура,
		|	Таблица.Характеристика                                     КАК Характеристика,
		|	Таблица.Склад                                              КАК Склад,
		|	Таблица.Назначение                                         КАК Назначение,
		|	Таблица.ЗаказНаОтгрузку                                    КАК ЗаказНаОтгрузку,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		|	Таблица.Свободно                                           КАК Количество
		|ИЗ
		|	КорректировкаЗаказов КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|// Корректировка товаров.
		|ВЫБРАТЬ
		|	Таблица.Номенклатура                                             КАК Номенклатура,
		|	Таблица.Характеристика                                           КАК Характеристика,
		|	Таблица.Склад                                                    КАК Склад,
		|	Таблица.Назначение                                               КАК Назначение,
		|	Таблица.Упаковка                                                 КАК Упаковка,
		|	КорректировкаТоваров.Свободно / &ТекстЗапросаКоэффициентУпаковки КАК Количество
		|ИЗ
		|	ТаблицаТоваров КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкаТоваров КАК КорректировкаТоваров
		|		ПО КорректировкаТоваров.Номенклатура   = Таблица.Номенклатура
		|		 И КорректировкаТоваров.Характеристика = Таблица.Характеристика
		|		 И КорректировкаТоваров.Склад          = Таблица.Склад
		|		 И КорректировкаТоваров.Назначение     = Таблица.Назначение
		|ГДЕ
		|	Таблица.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Номенклатура                                       КАК Номенклатура,
		|	Таблица.Характеристика                                     КАК Характеристика,
		|	Таблица.Склад                                              КАК Склад,
		|	Таблица.Назначение                                         КАК Назначение,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		|	Таблица.Свободно                                           КАК Количество
		|ИЗ
		|	КорректировкаТоваров КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|// Остатки по заказу.
		|ВЫБРАТЬ
		|	Таблица.Номенклатура                                                               КАК Номенклатура,
		|	Таблица.Характеристика                                                             КАК Характеристика,
		|	Таблица.Склад                                                                      КАК Склад,
		|	Таблица.Назначение                                                                 КАК Назначение,
		|	Таблица.ЗаказНаОтгрузку                                                            КАК ЗаказНаОтгрузку,
		|	Таблица.Упаковка                                                                   КАК Упаковка,
		|	РаспределениеЗапасов.РаспределеноНаСкладеСводно / &ТекстЗапросаКоэффициентУпаковки КАК Количество
		|ИЗ
		|	ТаблицаЗаказов КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РаспределениеЗапасовОбеспеченНаСкладе КАК РаспределениеЗапасов
		|		ПО РаспределениеЗапасов.Номенклатура    = Таблица.Номенклатура
		|		 И РаспределениеЗапасов.Характеристика  = Таблица.Характеристика
		|		 И РаспределениеЗапасов.Склад           = Таблица.Склад
		|		 И РаспределениеЗапасов.Назначение      = Таблица.Назначение
		|		 И РаспределениеЗапасов.ЗаказНаОтгрузку = Таблица.ЗаказНаОтгрузку
		|ГДЕ
		|	Таблица.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Номенклатура                                       КАК Номенклатура,
		|	Таблица.Характеристика                                     КАК Характеристика,
		|	Таблица.Склад                                              КАК Склад,
		|	Таблица.Назначение                                         КАК Назначение,
		|	Таблица.ЗаказНаОтгрузку                                    КАК ЗаказНаОтгрузку,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		|	Таблица.РаспределеноНаСкладеСводно                         КАК Количество
		|ИЗ
		|	РаспределениеЗапасовОбеспеченНаСкладе КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|// Остатки по товару.
		|ВЫБРАТЬ
		|	Таблица.Номенклатура                                             КАК Номенклатура,
		|	Таблица.Характеристика                                           КАК Характеристика,
		|	Таблица.Склад                                                    КАК Склад,
		|	Таблица.Назначение                                               КАК Назначение,
		|	Таблица.Упаковка                                                 КАК Упаковка,
		|	РаспределениеЗапасов.Свободно / &ТекстЗапросаКоэффициентУпаковки КАК Количество,
		|	РаспределениеЗапасов.ПерераспределятьСкладскиеЗапасы             КАК ПерераспределятьСкладскиеЗапасы,
		|	РаспределениеЗапасов.ОтгружатьЕслиДоступно                       КАК ОтгружатьЕслиДоступно
		|ИЗ
		|	ТаблицаТоваров КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РаспределениеЗапасовОстатокНаСкладе КАК РаспределениеЗапасов
		|		ПО РаспределениеЗапасов.Номенклатура    = Таблица.Номенклатура
		|		 И РаспределениеЗапасов.Характеристика  = Таблица.Характеристика
		|		 И РаспределениеЗапасов.Склад           = Таблица.Склад
		|		 И РаспределениеЗапасов.Назначение      = Таблица.Назначение
		|ГДЕ
		|	Таблица.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Номенклатура                                       КАК Номенклатура,
		|	Таблица.Характеристика                                     КАК Характеристика,
		|	Таблица.Склад                                              КАК Склад,
		|	Таблица.Назначение                                         КАК Назначение,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		|	Таблица.Свободно                                           КАК Количество,
		|	Таблица.ПерераспределятьСкладскиеЗапасы                    КАК ПерераспределятьСкладскиеЗапасы,
		|	Таблица.ОтгружатьЕслиДоступно                              КАК ОтгружатьЕслиДоступно
		|ИЗ
		|	РаспределениеЗапасовОстатокНаСкладе КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|// Таблица документа.
		|ВЫБРАТЬ
		|	Таблица.НомерСтроки                             КАК Идентификатор,
		|	ОстатокНаСкладе.ПерераспределятьСкладскиеЗапасы КАК ПерераспределятьЗапасы,
		|	ОстатокНаСкладе.ОтгружатьЕслиДоступно           КАК ОтгружатьЕслиДоступно,
		|	(ОбеспеченНаСкладе.РаспределеноНаСкладеСводно
		|			+ ОстатокНаСкладе.Свободно
		|			+ КорректировкаТоваров.Свободно
		|			+ КорректировкаЗаказов.Свободно)
		|		/ &ТекстЗапросаКоэффициентУпаковки          КАК Доступно
		|ИЗ
		|	ВременнаяТаблицаДанныхДокумента КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РаспределениеЗапасовОбеспеченНаСкладе КАК ОбеспеченНаСкладе
		|		ПО ОбеспеченНаСкладе.Номенклатура    = Таблица.Номенклатура
		|		 И ОбеспеченНаСкладе.Характеристика  = Таблица.Характеристика
		|		 И ОбеспеченНаСкладе.Склад =
		|			ВЫБОР КОГДА Таблица.Номенклатура.ТипНоменклатуры В(
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|					Таблица.Склад
		|				ИНАЧЕ
		|					Таблица.Подразделение
		|			КОНЕЦ
		|		 И ОбеспеченНаСкладе.Назначение =
		|			ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|					ВЫБОР КОГДА Таблица.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|								НЕОПРЕДЕЛЕНО
		|							ИНАЧЕ
		|								Таблица.Назначение
		|						КОНЕЦ
		|				ИНАЧЕ
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			КОНЕЦ
		|		 И ОбеспеченНаСкладе.ЗаказНаОтгрузку = Таблица.ЗаказНаОтгрузку
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РаспределениеЗапасовОстатокНаСкладе КАК ОстатокНаСкладе
		|		ПО ОстатокНаСкладе.Номенклатура    = Таблица.Номенклатура
		|		 И ОстатокНаСкладе.Характеристика  = Таблица.Характеристика
		|		 И ОстатокНаСкладе.Склад =
		|			ВЫБОР КОГДА Таблица.Номенклатура.ТипНоменклатуры В(
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|					Таблица.Склад
		|				ИНАЧЕ
		|					Таблица.Подразделение
		|			КОНЕЦ
		|		 И ОстатокНаСкладе.Назначение =
		|			ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|					ВЫБОР КОГДА Таблица.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|								НЕОПРЕДЕЛЕНО
		|							ИНАЧЕ
		|								Таблица.Назначение
		|						КОНЕЦ
		|				ИНАЧЕ
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			КОНЕЦ
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкаЗаказов КАК КорректировкаЗаказов
		|		ПО КорректировкаЗаказов.Номенклатура    = Таблица.Номенклатура
		|		 И КорректировкаЗаказов.Характеристика  = Таблица.Характеристика
		|		 И КорректировкаЗаказов.Склад =
		|			ВЫБОР КОГДА Таблица.Номенклатура.ТипНоменклатуры В(
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|					Таблица.Склад
		|				ИНАЧЕ
		|					Таблица.Подразделение
		|			КОНЕЦ
		|		 И КорректировкаЗаказов.Назначение =
		|			ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|					ВЫБОР КОГДА Таблица.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|								НЕОПРЕДЕЛЕНО
		|							ИНАЧЕ
		|								Таблица.Назначение
		|						КОНЕЦ
		|				ИНАЧЕ
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			КОНЕЦ
		|		 И КорректировкаЗаказов.ЗаказНаОтгрузку = Таблица.ЗаказНаОтгрузку
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкаТоваров КАК КорректировкаТоваров
		|		ПО КорректировкаТоваров.Номенклатура    = Таблица.Номенклатура
		|		 И КорректировкаТоваров.Характеристика  = Таблица.Характеристика
		|		 И КорректировкаТоваров.Склад =
		|			ВЫБОР КОГДА Таблица.Номенклатура.ТипНоменклатуры В(
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|					Таблица.Склад
		|				ИНАЧЕ
		|					Таблица.Подразделение
		|			КОНЕЦ
		|		 И КорректировкаТоваров.Назначение =
		|			ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|					ВЫБОР КОГДА Таблица.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|								НЕОПРЕДЕЛЕНО
		|							ИНАЧЕ
		|								Таблица.Назначение
		|						КОНЕЦ
		|				ИНАЧЕ
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			КОНЕЦ";
	Тексты.Добавить(Текст);
	
	Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ТекстЗапросаКоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Таблица.Упаковка",
		"Таблица.Номенклатура");
	
	Запрос.Текст = СтрЗаменить(Текст, "&ТекстЗапросаКоэффициентУпаковки", СтрШаблон("ЕСТЬNULL(%1, 1)", ТекстЗапросаКоэффициентУпаковки));
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	ВГраница = ПакетРезультатов.ВГраница();
	
	Результат = Новый Структура();
	Результат.Вставить("КорректировкаЗаказов", ПакетРезультатов[ВГраница - 4].Выгрузить());
	Результат.Вставить("КорректировкаТоваров", ПакетРезультатов[ВГраница - 3].Выгрузить());
	Результат.Вставить("ОстаткиПоЗаказу",      ПакетРезультатов[ВГраница - 2].Выгрузить());
	Результат.Вставить("ОстаткиПоТовару",      ПакетРезультатов[ВГраница - 1].Выгрузить());
	Результат.Вставить("ТаблицаДокумента",     ПакетРезультатов[ВГраница].Выгрузить());
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьКолонкуДоступноПриОбработкеСтрокиТабличнойЧасти(ТекущаяСтрока, МенеджерВременныхТаблиц, ПараметрыВстраивания)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки     КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура    КАК Номенклатура,
		|	ТаблицаДокумента.Характеристика  КАК Характеристика,
		|	ТаблицаДокумента.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	ТаблицаДокумента.Упаковка        КАК Упаковка,
		|	
		|	ВЫБОР КОГДА ТаблицаДокумента.Номенклатура.ТипНоменклатуры В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|				ТаблицаДокумента.Склад
		|			ИНАЧЕ
		|				ТаблицаДокумента.Подразделение
		|		КОНЕЦ КАК Склад,
		|	
		|	ВЫБОР КОГДА ТаблицаДокумента.Обособленно ТОГДА
		|				ВЫБОР КОГДА ТаблицаДокумента.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|							НЕОПРЕДЕЛЕНО // чтобы не подбирались свободные остатки, если назначения для документа еще нет в базе.
		|						ИНАЧЕ
		|							ТаблицаДокумента.Назначение
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение
		|ИЗ
		|	ВременнаяТаблицаДанныхДокумента КАК ТаблицаДокумента";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ОтборСтрокПоЗаказу = Новый Структура("Номенклатура,Характеристика,Склад,Назначение,Упаковка,ЗаказНаОтгрузку");
	ОтборСтрокПоТовару = Новый Структура("Номенклатура,Характеристика,Склад,Назначение,Упаковка");
	ЗаполнитьЗначенияСвойств(ОтборСтрокПоЗаказу, Таблица[0]);
	ЗаполнитьЗначенияСвойств(ОтборСтрокПоТовару, Таблица[0]);
	
	Остатки = ПолучитьИзВременногоХранилища(ПараметрыВстраивания.АдресОстатков);
	
	НайденныеСтрокиПоЗаказу = Остатки.ПоЗаказу.НайтиСтроки(ОтборСтрокПоЗаказу);
	НайденныеСтрокиПоТовару = Остатки.ПоТовару.НайтиСтроки(ОтборСтрокПоТовару);
	Если НайденныеСтрокиПоЗаказу.Количество() = 0 Или НайденныеСтрокиПоТовару.Количество() = 0 Тогда
		
		СтруктураОстатков = ОстаткиДляТаблицыДокумента(
			Запрос.МенеджерВременныхТаблиц,
			Остатки,
			Остатки.ИзмененияПоДокументу);
		
		ДобавитьВТаблицу(Остатки.ПоЗаказу, СтруктураОстатков.ОстаткиПоЗаказу, ОтборСтрокПоЗаказу);
		ДобавитьВТаблицу(Остатки.КорректировкаЗаказов, СтруктураОстатков.КорректировкаЗаказов, ОтборСтрокПоЗаказу);
		ДобавитьВТаблицу(Остатки.ПоТовару, СтруктураОстатков.ОстаткиПоТовару, ОтборСтрокПоТовару);
		ДобавитьВТаблицу(Остатки.КорректировкаТоваров, СтруктураОстатков.КорректировкаТоваров, ОтборСтрокПоТовару);
		
	КонецЕсли;
	
	НайденныеСтрокиПоЗаказу = Остатки.ПоЗаказу.НайтиСтроки(ОтборСтрокПоЗаказу);
	НайденныеСтрокиПоТовару = Остатки.ПоТовару.НайтиСтроки(ОтборСтрокПоТовару);
	НайденныеСтрокиКорректировкаЗаказов = Остатки.КорректировкаЗаказов.НайтиСтроки(ОтборСтрокПоЗаказу);
	НайденныеСтрокиКорректировкаТоваров = Остатки.КорректировкаТоваров.НайтиСтроки(ОтборСтрокПоТовару);
	ТекущаяСтрока.Доступно = НайденныеСтрокиПоТовару[0].Количество
		+ НайденныеСтрокиПоЗаказу[0].Количество
		+ НайденныеСтрокиКорректировкаЗаказов[0].Количество
		+ НайденныеСтрокиКорректировкаТоваров[0].Количество;
		
	ТекущаяСтрока.ПерераспределятьЗапасы = НайденныеСтрокиПоТовару[0].ПерераспределятьСкладскиеЗапасы;
	ТекущаяСтрока.ОтгружатьЕслиДоступно  = НайденныеСтрокиПоТовару[0].ОтгружатьЕслиДоступно;
	ПараметрыВстраивания.АдресОстатков   = ПоместитьВоВременноеХранилище(Остатки, ПараметрыВстраивания.АдресОстатков);
	
	ДоступныеОстаткиДополнитьСоответствиеНоменклатура(ПараметрыВстраивания, Таблица[0], ТекущаяСтрока.ИдентификаторСтрокиПолученный);
	
КонецПроцедуры

Функция ПараметрыЗаполненияВариантаОбеспеченияПоУмолчанию()
	
	Параметры = Новый Структура();
	Параметры.Вставить("ТипНоменклатуры");
	Параметры.Вставить("ЗаполнитьОбособленно");
	Параметры.Вставить("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	Параметры.Вставить("СтатусЗаказаКлиента");
	Возврат Параметры;
	
КонецФункции

Функция ВариантОбеспеченияИФлагОбособленноПоУмолчанию(ПараметрыЗаполнения)
	
	ТипНоменклатуры = ПараметрыЗаполнения.ТипНоменклатуры;
	ЗаполнитьОбособленно = ПараметрыЗаполнения.ЗаполнитьОбособленно;
	Статус = ПараметрыЗаполнения.СтатусЗаказаКлиента;
	ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = ПараметрыЗаполнения.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента;
	
	// Особое заполнение для Заказов клиента (в т.ч. Заявок на возврат) в случае, когда не используется построчная отгрузка.
	СтатусыОтгрузить = Новый Массив;
	СтатусыОтгрузить.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОтгрузке"));
	СтатусыОтгрузить.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Закрыт"));
	СтатусыОтгрузить.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке"));
	СтатусыОтгрузить.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена"));
	
	СтатусыСоСклада = Новый Массив;
	СтатусыСоСклада.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению"));
	СтатусыСоСклада.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению"));
	
	СтатусыНеТребуется = Новый Массив;
	СтатусыНеТребуется.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован"));
	СтатусыНеТребуется.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована"));
	СтатусыНеТребуется.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату"));
	СтатусыНеТребуется.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена"));
	
	ВариантОбеспечения = Неопределено;
	Обособленно        = Неопределено;
	
	Если Не ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента
		И СтатусыОтгрузить.Найти(Статус) <> Неопределено Тогда
		
		ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
		Обособленно = Ложь;
		
	ИначеЕсли Не ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента
		И СтатусыСоСклада.Найти(Статус) <> Неопределено Тогда
		
		Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
				Или ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			
			ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
			Обособленно = Ложь;
			
		Иначе
			
			ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада");
			Обособленно = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли Не ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента
		И СтатусыНеТребуется.Найти(Статус) <> Неопределено Тогда
		
		ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
		Обособленно = Ложь;
		
		
	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда

		ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
		Обособленно = Ложь;

	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		
		Если ЗаполнитьОбособленно = Истина Тогда
			
			ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению");
			Обособленно = Истина;
			
		Иначе
			
			ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
			Обособленно = Ложь;
			
		КонецЕсли;

	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда

		ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению");
		Обособленно = Ложь;

	Иначе // товар

		ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению");
		Обособленно = ЗаполнитьОбособленно = Истина;

	КонецЕсли;
	
	Возврат Новый Структура("ВариантОбеспечения,Обособленно", ВариантОбеспечения, Обособленно);

КонецФункции

Функция ТаблицаОформлено(Запрос, МенеджерРегистра, ИмяВременнойТаблицыВыделенныхСтрок, ИмяВременнойТаблицыВсехСтрок)
	
	Тексты = Новый Массив();
	ИсходнаяТаблица =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура       КАК Номенклатура,
		|	Таблица.Характеристика     КАК Характеристика,
		|	Таблица.Склад              КАК Склад,
		|	Таблица.Серия              КАК Серия,
		|	Таблица.ЗаказНаОтгрузку    КАК Ссылка,
		|	Таблица.ВариантОбеспечения КАК ВариантОбеспечения,
		|	Таблица.Обособленно        КАК Обособленно,
		|	Таблица.КодСтроки          КАК КодСтроки,
		|	Таблица.Количество         КАК Количество,
		|	ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|					Таблица.Назначение
		|				ИНАЧЕ
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ Назначение
		|ИЗ
		|	ВременнаяТаблицаПереопределяемый КАК Таблица";
	
	ОтборОформлено =
		"ВЫБРАТЬ
		|	Таблица.ЗаказНаОтгрузку КАК Ссылка,
		|	Таблица.КодСтроки       КАК КодСтроки
		|ИЗ
		|	ВременнаяТаблицаПереопределяемый КАК Таблица";
	
	ОтборТоварыКОтгрузке =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Склад           КАК Склад,
		|	Таблица.ЗаказНаОтгрузку КАК Ссылка,
		|	Таблица.Серия           КАК Серия,
		|	ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|					Таблица.Назначение
		|				ИНАЧЕ
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ Назначение
		|ИЗ
		|	ВременнаяТаблицаПереопределяемый КАК Таблица
		|ГДЕ
		|	ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	КорректировкаТоварыКОтгрузке =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Склад           КАК Склад,
		|	Таблица.Серия           КАК Серия,
		|	-Таблица.Количество     КАК КОтгрузке,
		|	ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|					Таблица.Назначение
		|				ИНАЧЕ
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ Назначение
		|ИЗ
		|	ВременнаяТаблицаПереопределяемый КАК Таблица
		|ГДЕ
		|	Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|		И ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Склад           КАК Склад,
		|	Таблица.Серия           КАК Серия,
		|	Таблица.Количество      КАК КОтгрузке,
		|	ВЫБОР КОГДА Таблица.Обособленно ТОГДА
		|					Таблица.Назначение
		|				ИНАЧЕ
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ Назначение
		|ИЗ
		|	ВременнаяТаблицаВсехСтрокПереопределяемый КАК Таблица
		|ГДЕ
		|	Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|		И ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	Тексты = Новый Массив();
	Тексты.Добавить(ИсходнаяТаблица);
	Тексты.Добавить(ОтборОформлено);
	Тексты.Добавить(ОтборТоварыКОтгрузке);
	Тексты.Добавить(КорректировкаТоварыКОтгрузке);
	
	Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Текст = СтрЗаменить(Текст, "ВременнаяТаблицаПереопределяемый",          ИмяВременнойТаблицыВыделенныхСтрок);
	Текст = СтрЗаменить(Текст, "ВременнаяТаблицаВсехСтрокПереопределяемый", ИмяВременнойТаблицыВсехСтрок);
	
	Запрос.Текст = Текст;
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	ИсходнаяТаблица              = ПакетРезультатовЗапроса[0].Выгрузить();
	ОтборОформлено               = ПакетРезультатовЗапроса[1].Выгрузить();
	ОтборТоварыКОтгрузке         = ПакетРезультатовЗапроса[2].Выгрузить();
	КорректировкаТоварыКОтгрузке = ПакетРезультатовЗапроса[3].Выгрузить();
	
	ОформитьПоНакладным = МенеджерРегистра.ТаблицаОформлено(ОтборОформлено, Неопределено, Истина);
	ОформитьПоОрдерам   = РегистрыНакопления.ТоварыКОтгрузке.ТаблицаОформлено(ОтборТоварыКОтгрузке, КорректировкаТоварыКОтгрузке);
	ОформитьПоНакладным.Индексы.Добавить("КодСтроки,Ссылка");
	ОформитьПоОрдерам.Индексы.Добавить("Номенклатура,Характеристика,Склад,Назначение,Серия");
	ОформитьПоОрдерам.Индексы.Добавить("Номенклатура,Характеристика,Склад,Назначение");
	
	ОформитьПоОрдерам.Колонки.Добавить("Списано", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	НоваяТаблица = Новый ТаблицаЗначений();
	НоваяТаблица.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	НоваяТаблица.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	НоваяТаблица.Колонки.Добавить("Склад",              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	НоваяТаблица.Колонки.Добавить("Назначение",         Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	НоваяТаблица.Колонки.Добавить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	НоваяТаблица.Колонки.Добавить("Обособленно",        Новый ОписаниеТипов("Булево"));
	НоваяТаблица.Колонки.Добавить("Ссылка",             Метаданные.ОпределяемыеТипы.ОжидаемаяОтгрузка.Тип);
	НоваяТаблица.Колонки.Добавить("Серия",              Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	НоваяТаблица.Колонки.Добавить("КодСтроки",          ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	НоваяТаблица.Колонки.Добавить("Количество",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	НоваяТаблица.Колонки.Добавить("КоличествоВЗаказе",  ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	ПоНакладным = НоваяТаблица;
	КолонкиДляКопирования = "Номенклатура,Характеристика,Склад,Назначение,Серия,ВариантОбеспечения,Обособленно,Количество";
	ПоОрдерам = НоваяТаблица.СкопироватьКолонки(КолонкиДляКопирования);
	ПоОрдерам.Индексы.Добавить("Номенклатура,Характеристика,Склад,Назначение,Серия");
	ПоОрдерам.Индексы.Добавить("Номенклатура,Характеристика,Склад,Назначение");
	
	ОтборПоНакладным = Новый Структура("КодСтроки,Ссылка");
	ОтборПоОрдерам = Новый Структура("Номенклатура,Характеристика,Склад,Назначение,Серия");
	Для каждого СтрокаТовары Из ИсходнаяТаблица Цикл
		
		// Оформленное по накладным.
		ЗаполнитьЗначенияСвойств(ОтборПоНакладным, СтрокаТовары);
		НайденныеСтроки = ОформитьПоНакладным.НайтиСтроки(ОтборПоНакладным);
		
		НоваяСтрока = ПоНакладным.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		
		НоваяСтрока.Количество = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].Количество, 0);
		НоваяСтрока.КоличествоВЗаказе = СтрокаТовары.Количество;
		
	КонецЦикла;
	
	// Списание оформленного по накладным.
	Для каждого СтрокаТовары Из ПоНакладным Цикл
		
		Если СтрокаТовары.Количество > 0 Тогда
			
			ЗаполнитьЗначенияСвойств(ОтборПоОрдерам, СтрокаТовары);
			НайденныеСтроки = ОформитьПоОрдерам.НайтиСтроки(ОтборПоОрдерам);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				НайденныеСтроки[0].Списано = НайденныеСтроки[0].Списано + СтрокаТовары.Количество;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТовары Из ОформитьПоОрдерам Цикл
		
		Если СтрокаТовары.Количество > СтрокаТовары.Списано Тогда // несписанные по накладным остатки
			
			НоваяСтрока = ПоОрдерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			
			НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			НоваяСтрока.Обособленно        = ЗначениеЗаполнено(СтрокаТовары.Назначение);
			НоваяСтрока.Количество         = СтрокаТовары.Количество - СтрокаТовары.Списано;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если по накладным в строке отгружено меньше чем в заказе, необходимо переместить в данные по накладным количество из ордеров.
	// Пример:
	// В заказе 10 штук
	// ПоНакладным 5 штук
	// ПоОрдерам 4 штуки
	// Перемещаем 4 штуки в таблицу ПоНакладным. В итоге ПоНакладным 9 штук, ПоОрдерам 0 штук.
	// Данное перемещение позволяет привязать остатки полученные из таблицы ПоОрдерам к кодам строк.
	
	Для каждого СтрокаТовары Из ПоНакладным Цикл
		
		Если СтрокаТовары.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТовары.КоличествоВЗаказе > СтрокаТовары.Количество Тогда
			ЗаполнитьЗначенияСвойств(ОтборПоОрдерам, СтрокаТовары);
			НайденныеСтроки = ПоОрдерам.НайтиСтроки(ОтборПоОрдерам);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				ОтборПоОрдерамБезСерий = Новый Структура("Номенклатура,Характеристика,Склад,Назначение");
				ЗаполнитьЗначенияСвойств(ОтборПоОрдерамБезСерий, СтрокаТовары);
				НайденныеСтроки = ПоОрдерам.НайтиСтроки(ОтборПоОрдерамБезСерий);
			КонецЕсли;
			
			Для каждого СтрокаОрдера Из НайденныеСтроки Цикл
				
				ОсталосьСписать = СтрокаТовары.КоличествоВЗаказе - СтрокаТовары.Количество;
				ДляСписания = ?(ОсталосьСписать > СтрокаОрдера.Количество, СтрокаОрдера.Количество, ОсталосьСписать);
				СтрокаТовары.Количество = СтрокаТовары.Количество + ДляСписания;
				СтрокаОрдера.Количество = СтрокаОрдера.Количество - ДляСписания;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТовары Из ПоНакладным Цикл
		
		Если СтрокаТовары.КоличествоВЗаказе > СтрокаТовары.Количество Тогда
			ЗаполнитьЗначенияСвойств(ОтборПоОрдерам, СтрокаТовары);
			НайденныеСтроки = ПоОрдерам.НайтиСтроки(ОтборПоОрдерам);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				ОтборПоОрдерамБезСерий = Новый Структура("Номенклатура,Характеристика,Склад,Назначение");
				ЗаполнитьЗначенияСвойств(ОтборПоОрдерамБезСерий, СтрокаТовары);
				НайденныеСтроки = ПоОрдерам.НайтиСтроки(ОтборПоОрдерамБезСерий);
			КонецЕсли;
			
			Для каждого СтрокаОрдера Из НайденныеСтроки Цикл
				
				ОсталосьСписать = СтрокаТовары.КоличествоВЗаказе - СтрокаТовары.Количество;
				ДляСписания = ?(ОсталосьСписать > СтрокаОрдера.Количество, СтрокаОрдера.Количество, ОсталосьСписать);
				СтрокаТовары.Количество = СтрокаТовары.Количество + ДляСписания;
				СтрокаОрдера.Количество = СтрокаОрдера.Количество - ДляСписания;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = ПоНакладным;
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьИменаТаблицВСоотвествии(ПараметрыВстраивания, Таблицы)
	
	Счетчик = 1;
	Для Каждого Элемент Из Таблицы Цикл
		
		Элемент.Значение.ИмяТаблицыВЗапросе  = ?(ПараметрыВстраивания.СлужебныеПараметры.ЭтоДокумент,
			ПараметрыВстраивания.ИмяОбъекта + Сред(Элемент.Ключ, СтрДлина("Объект") + 1),
			ПараметрыВстраивания.ИмяОбъекта + "." + Элемент.Ключ);
		Элемент.Значение.ИмяВременнойТаблицы = "Вт" + Счетчик + СтрЗаменить(Элемент.Значение.ИмяТаблицыВЗапросе, ".", "");
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаВременнаяТаблицаДанныхДокумента(ПараметрыВстраивания, Таблицы)
	
	ТекстыЗапроса = Новый Массив();
	ТекстЗапроса = ПараметрыВстраивания.ОписаниеПолученияДанныхДокумента;
	ТекстыУничтожения = Новый Массив();
	Замены = Новый ТаблицаЗначений();
	Замены.Колонки.Добавить("ПодстрокаПоиска");
	Замены.Колонки.Добавить("ПодстрокаЗамены");
	
	Для Каждого Элемент Из Таблицы Цикл
		
		Замена = Замены.Добавить();
		Замена.ПодстрокаПоиска = Элемент.Значение.ИмяТаблицыВЗапросе;
		Замена.ПодстрокаЗамены = Элемент.Значение.ИмяВременнойТаблицы;
		
		ТекстЗапросаВременнойТаблицы = ТекстЗапросаВременнойТаблицыПоКолонкамТаблицы(
			Элемент.Значение.ИмяВременнойТаблицы, Элемент.Значение.Таблица);
		ТекстыЗапроса.Добавить(ТекстЗапросаВременнойТаблицы);
		ТекстыУничтожения.Добавить("УНИЧТОЖИТЬ " + Элемент.Значение.ИмяВременнойТаблицы);
		
	КонецЦикла;
	
	Замены.Сортировать("ПодстрокаПоиска Убыв");
	Для Каждого Замена Из Замены Цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Замена.ПодстрокаПоиска, Замена.ПодстрокаЗамены);
	КонецЦикла;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТекстыЗапроса, ТекстыУничтожения);
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаОбязательностиЗаполненияПоВременнойТаблицеДанныхДокумента(Запрос)
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладНеЗаполнен,
		|	ВЫБОР КОГДА НЕ ТаблицаДокумента.Отменено
		|				И ТаблицаДокумента.Номенклатура.ТипНоменклатуры В(
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|				И (ТаблицаДокумента.ВариантОбеспечения В(
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
		|					ИЛИ ТаблицаДокумента.ВариантОбеспечения В(
		|									ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления),
		|									ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению))
		|						И ТаблицаДокумента.ГотовКОбеспечению) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ КАК СкладОбязателен,
		|	
		|	ТаблицаДокумента.ЖелаемаяДатаОтгрузки = ДАТАВРЕМЯ(1, 1,1) КАК ДатаОтгрузкиНеЗаполнена,
		|	НЕ ТаблицаДокумента.Отменено
		|		И ТаблицаДокумента.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|		И ТаблицаДокумента.ГотовКОтгрузке КАК ДатаОтгрузкиОбязательна
		|ИЗ
		|	ВременнаяТаблицаДанныхДокумента КАК ТаблицаДокумента
		|ГДЕ
		|	НЕ &ТолькоОшибки
		|		ИЛИ ВЫБОР КОГДА ТаблицаДокумента.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|						И НЕ ТаблицаДокумента.Отменено
		|						И ТаблицаДокумента.Номенклатура.ТипНоменклатуры В(
		|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|						И (ТаблицаДокумента.ВариантОбеспечения В(
		|								ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|								ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
		|							ИЛИ ТаблицаДокумента.ВариантОбеспечения В(
		|									ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления),
		|									ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению))
		|								И ТаблицаДокумента.ГотовКОбеспечению) ТОГДА
		|						ИСТИНА
		|					ИНАЧЕ
		|						ЛОЖЬ
		|				КОНЕЦ
		|		ИЛИ НЕ ТаблицаДокумента.Отменено
		|				И ТаблицаДокумента.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|				И ТаблицаДокумента.ГотовКОтгрузке";
		
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

Процедура ЗаполнитьПараметрыВстраивания(Форма, ПараметрыВстраивания) Экспорт
	
	Если Форма.ДоступныеОстаткиПараметрыВстраивания = Неопределено Тогда
		
		СлужебныеПараметры = Новый Структура();
		ПараметрыВстраивания.Вставить("СлужебныеПараметры", СлужебныеПараметры);
		
		СлужебныеПараметры.Вставить("ЭтоДокумент", СтрНайти(ПараметрыВстраивания.ИмяОбъекта, "Документ.") > 0);
		ДанныеСтроки = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыВстраивания.ШаблонСериализацииДанныхФормы);
		СлужебныеПараметры.Вставить("ДанныеСтроки", ДанныеСтроки);
		
		СлужебныеПараметры.Вставить("ГотовКОбеспечению", Ложь);
		СлужебныеПараметры.Вставить("НуженОбработчикОбновленияДоступности", Ложь);
		СлужебныеПараметры.Вставить("ЗаказыДляОбновленияДоступности",       Неопределено);
		СлужебныеПараметры.Вставить("ИнтервалЗапускаОбработчика",           Неопределено);
		
		Таблицы = Новый Соответствие();
		
		ВставитьТаблицы(Таблицы, ПараметрыВстраивания.ШаблонСериализацииДанныхФормы, "");
		ЗаполнитьИменаТаблицВСоотвествии(ПараметрыВстраивания, Таблицы);
		
		АдресТаблицыДанныхФормы = ПоместитьВоВременноеХранилище(Таблицы, Форма.УникальныйИдентификатор);
		СлужебныеПараметры.Вставить("АдресТаблицыДанныхФормы", АдресТаблицыДанныхФормы);
		
		ТекстЗапроса = ТекстЗапросаВременнаяТаблицаДанныхДокумента(ПараметрыВстраивания, Таблицы);
		
		СлужебныеПараметры.Вставить("ТекстЗапросаВременнаяТаблицаДанныхДокумента", ТекстЗапроса);
		
		СлужебныеПараметры.Вставить("ВариантОбеспеченияДоИзменения");
		СлужебныеПараметры.Вставить("ВариантОбеспеченияВыбранноеЗначение");
		СлужебныеПараметры.Вставить("АдресНоменклатура");
		
		Форма.ДоступныеОстаткиПараметрыВстраивания = ПараметрыВстраивания;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПутьКТаблице(ПараметрыВстраивания)
	
	ПутьКТаблице = ?(ПараметрыВстраивания.СлужебныеПараметры.ЭтоДокумент,
		СтрЗаменить(ПараметрыВстраивания.ИмяТаблицы, ПараметрыВстраивания.ИмяОбъекта, "Объект"),
		СтрЗаменить(ПараметрыВстраивания.ИмяТаблицы, "Форма.", ""));
		
	Возврат ПутьКТаблице;
	
КонецФункции

Процедура ДобавитьВТаблицу(Приемник, Источник, Ключ)
	
	ТекКлюч = ОбщегоНазначения.СкопироватьРекурсивно(Ключ);
	Для Каждого Строка Из Источник Цикл
		ЗаполнитьЗначенияСвойств(ТекКлюч, Строка);
		НайденныеСтроки = Приемник.НайтиСтроки(ТекКлюч);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Приемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДоступныеОстаткиЗаполнитьСоответствиеНоменклатура(Форма)
	
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	Если ПараметрыВстраивания.ИмяТаблицы <> Неопределено Тогда
		
		КоллекцияНаФорме = ОбеспечениеВДокументахКлиентСервер.КоллекцияНаФорме(Форма, ПараметрыВстраивания);
		
		Адрес = ПараметрыВстраивания.СлужебныеПараметры.АдресНоменклатура;
		Если Не ЭтоАдресВременногоХранилища(Адрес) Тогда
			Адрес = Форма.УникальныйИдентификатор;;
		КонецЕсли;
		Номенклатура = Новый Соответствие();
		
		Для Каждого Строка Из КоллекцияНаФорме Цикл
			
			Характеристика = Номенклатура.Получить(Строка.Номенклатура);
			Если Характеристика = Неопределено Тогда
				Характеристика = Новый Соответствие();
				Номенклатура.Вставить(Строка.Номенклатура, Характеристика);
			КонецЕсли;
			НайденныйЭлемент = Характеристика.Получить(Строка.Характеристика);
			Если НайденныйЭлемент = Неопределено Тогда
				Характеристика.Вставить(Строка.Характеристика, Строка.ПолучитьИдентификатор());
			ИначеЕсли НайденныйЭлемент = Истина Или НайденныйЭлемент <> Строка.ПолучитьИдентификатор() Тогда
				Характеристика.Вставить(Строка.Характеристика, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыВстраивания.СлужебныеПараметры.АдресНоменклатура = ПоместитьВоВременноеХранилище(Номенклатура, Адрес);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоступныеОстаткиДополнитьСоответствиеНоменклатура(ПараметрыВстраивания, Строка, ИдентификаторСтроки)
	
	Если ПараметрыВстраивания.ИмяТаблицы <> Неопределено Тогда
		
		Номенклатура = ПолучитьИзВременногоХранилища(ПараметрыВстраивания.СлужебныеПараметры.АдресНоменклатура);
		
		Характеристика = Номенклатура.Получить(Строка.Номенклатура);
		Если Характеристика = Неопределено Тогда
			Характеристика = Новый Соответствие();
			Номенклатура.Вставить(Строка.Номенклатура, Характеристика);
		КонецЕсли;
		НайденныйЭлемент = Характеристика.Получить(Строка.Характеристика);
		Если НайденныйЭлемент = Неопределено Тогда
			Характеристика.Вставить(Строка.Характеристика, ИдентификаторСтроки);
		ИначеЕсли НайденныйЭлемент = Истина Или НайденныйЭлемент <> ИдентификаторСтроки Тогда
			Характеристика.Вставить(Строка.Характеристика, Истина);
		КонецЕсли;
		ПоместитьВоВременноеХранилище(Номенклатура, ПараметрыВстраивания.СлужебныеПараметры.АдресНоменклатура);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Изменения - Массив из Структура - 
//  Режим - Строка - 
Процедура ДоступныеОстаткиПерезаполнить(Форма, ПараметрыЗаполнения = Неопределено)
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ДоступныеОстаткиПараметрыЗаполнения();
	КонецЕсли;
	
	ПолучатьОстаткиИзКэша = ПараметрыЗаполнения.ПолучатьОстаткиИзКэша;
	
	ПараметрыВстраивания = Форма.ДоступныеОстаткиПараметрыВстраивания;
	Таблицы = ПолучитьИзВременногоХранилища(ПараметрыВстраивания.СлужебныеПараметры.АдресТаблицыДанныхФормы);
	ЗаполнитьТаблицыИзДанныхФормы(Таблицы, Форма, Неопределено);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДобавитьВременнуюТаблицуДанныхДокумента(Запрос.МенеджерВременныхТаблиц, Таблицы, ПараметрыВстраивания);
	
	ЕстьАдресОстатков = Форма.ДоступныеОстаткиПараметрыВстраивания.Свойство("АдресОстатков");
	Остатки          = Неопределено;
	ТаблицаИзменений = Неопределено;
	
	Если ПолучатьОстаткиИзКэша И ЕстьАдресОстатков Тогда
		
		АдресОстатков = Форма.ДоступныеОстаткиПараметрыВстраивания.АдресОстатков;
		Остатки = ПолучитьИзВременногоХранилища(АдресОстатков);
		ТаблицаИзменений = Остатки.ИзмененияПоДокументу;
		
	Иначе
		
		ТаблицаИзменений = ВыгрузитьТаблицуИзмененийДокумента(Запрос.МенеджерВременныхТаблиц, Форма);
		
	КонецЕсли;
	
	СтруктураОстатков = ОстаткиДляТаблицыДокумента(
		Запрос.МенеджерВременныхТаблиц,
		Остатки,
		ТаблицаИзменений);
	
	КлючЗаказы = "Номенклатура,Характеристика,Склад,Назначение,ЗаказНаОтгрузку,Упаковка";
	КлючТовары = "Номенклатура,Характеристика,Склад,Назначение,Упаковка";
	
	Остатки = Новый Структура();
	Остатки.Вставить("ПоЗаказу",             СтруктураОстатков.ОстаткиПоЗаказу);
	Остатки.Вставить("ПоТовару",             СтруктураОстатков.ОстаткиПоТовару);
	Остатки.Вставить("КорректировкаЗаказов", СтруктураОстатков.КорректировкаЗаказов);
	Остатки.Вставить("КорректировкаТоваров", СтруктураОстатков.КорректировкаТоваров);
	Остатки.Вставить("ИзмененияПоДокументу", ТаблицаИзменений);
	
	Остатки.ПоТовару.Индексы.Добавить(КлючТовары);
	Остатки.ПоЗаказу.Индексы.Добавить(КлючЗаказы);
	Остатки.КорректировкаТоваров.Индексы.Добавить(КлючТовары);
	Остатки.КорректировкаЗаказов.Индексы.Добавить(КлючЗаказы);
	
	Адрес = ?(ЕстьАдресОстатков, ПараметрыВстраивания.АдресОстатков, Форма.УникальныйИдентификатор);
	АдресОстатков = ПоместитьВоВременноеХранилище(Остатки, Адрес);
	
	ПараметрыВстраивания.Вставить("АдресОстатков", АдресОстатков);
	
	Если ПараметрыВстраивания.ИмяТаблицы <> Неопределено Тогда
		
		КоллекцияНаФорме = ОбеспечениеВДокументахКлиентСервер.КоллекцияНаФорме(Форма, ПараметрыВстраивания);
		
		Для Каждого Строка Из СтруктураОстатков.ТаблицаДокумента Цикл
			ЗаполнитьЗначенияСвойств(КоллекцияНаФорме.НайтиПоИдентификатору(Строка.Идентификатор), Строка);
		КонецЦикла;
		
		ДоступныеОстаткиЗаполнитьСоответствиеНоменклатура(Форма);
		
	Иначе
		
		Если СтруктураОстатков.ТаблицаДокумента.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Форма, СтруктураОстатков.ТаблицаДокумента[0]);
		КонецЕсли;
		
	КонецЕсли;
	ПоместитьВоВременноеХранилище(Остатки, ПараметрыВстраивания.АдресОстатков);
	
КонецПроцедуры

Процедура ВставитьТаблицы(Таблицы, ЭлементСтруктуры, Префикс)
	
	ТекущаяТаблица = Новый ТаблицаЗначений();
	
	Для Каждого Свойство Из ЭлементСтруктуры Цикл
		
		Если ТипЗнч(Свойство.Значение) = Тип("Структура") Тогда
			
			НовыйПрефикс = ?(Префикс = "", Свойство.Ключ, Префикс + "." + Свойство.Ключ);
			ВставитьТаблицы(Таблицы, Свойство.Значение, НовыйПрефикс);
			
		Иначе
			
			ТекущаяТаблица.Колонки.Добавить(Свойство.Ключ, Свойство.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущаяТаблица.Колонки.Количество() > 0 Тогда
		
		Таблицы.Вставить(Префикс, Новый Структура("Таблица,ИмяВременнойТаблицы,ИмяТаблицыВЗапросе", ТекущаяТаблица));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныеОстаткиПараметрыЗаполнения()
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ПолучатьОстаткиИзКэша", Истина);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Выполняет действия обеспечения в списках заказов, где отображаются документы имеющие разные параметры встраивания обеспечения.
// Параметры:
//  КодДействия - Строка - "ДЕЙСТВИЕ_ОТГРУЗИТЬ", "ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ", "ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ", "ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ".
//  ВсеЗаказы - Массив - ссылки, выбранные в списке документов.
//  Ссылка - ДокументСсылка - ссылка для получения модуля менеджера объекта в котором расположена функция параметров.
//  УникальныйИдентификатор - УникальныйИдентификатор - идентификатор формы списка документов.
// Возвращаемое значение:
//  Структура - длительная операция либо структура для задания вопроса.
Функция ВыполнитьДействиеВСпискеЗаказовРазныхТипов(КодДействия, ВсеЗаказы, Ссылка, УникальныйИдентификатор) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	ПараметрыУстановкиДействий = МенеджерОбъекта.ПараметрыВыполненияКомандУстановкиДействий(ВсеЗаказы, КодДействия);
	Если ПараметрыУстановкиДействий.НуженВопрос Тогда
		
		Возврат ПараметрыУстановкиДействий;
		
	Иначе
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение действия обеспечения в списке заказов'");
		
		Возврат ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			"ОбеспечениеВДокументахСервер.ВыполнитьДействиеДляНесколькихТиповЗаказов",
			ПараметрыУстановкиДействий);
		
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьДействиеВСпискеЗаказовРазныхТиповПослеВопроса(РезультатВыполненияДействий, УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение действия обеспечения в списке заказов'");
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ОбеспечениеВДокументахСервер.ВыполнитьДействиеДляНесколькихТиповЗаказов",
		РезультатВыполненияДействий);
	
КонецФункции

Функция АдресТаблицыПодобраноРанее(Запрос, УникальныйИдентификатор)
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВсеСтроки.Серия КАК Серия,
		|	СУММА(ВсеСтроки.Количество)
		|		- МАКСИМУМ(
		|			ВЫБОР КОГДА ВыделенныеСтроки.Серия = ВсеСтроки.Серия
		|							И ВыделенныеСтроки.ВариантОбеспечения В(
		|								ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|								ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)) ТОГДА
		|						ВыделенныеСтроки.Количество
		|					ИНАЧЕ
		|						0
		|				КОНЕЦ) КАК Количество
		|ИЗ
		|	ВременнаяТаблицаДанныхДокументаДляВыделенныхСтрок КАК ВыделенныеСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДанныхДокумента КАК ВсеСтроки
		|		ПО ВсеСтроки.Номенклатура = ВыделенныеСтроки.Номенклатура
		|		 И ВсеСтроки.Характеристика = ВыделенныеСтроки.Характеристика
		|		 И ВсеСтроки.Склад = ВыделенныеСтроки.Склад
		|		 И ВсеСтроки.Назначение = ВыделенныеСтроки.Назначение
		|		 И ВсеСтроки.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		 И ВсеСтроки.ВариантОбеспечения В(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
		|СГРУППИРОВАТЬ ПО
		|	ВсеСтроки.Серия";
	Таблица = Запрос.Выполнить().Выгрузить();
	Результат = ПоместитьВоВременноеХранилище(Таблица, УникальныйИдентификатор);
	Возврат Результат;
	
КонецФункции
	
Функция НуженВопросОбОтгрузкеОднойДатой(ПараметрыВстраивания, Заказы)
	
	Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК НуженВопрос
		|ИЗ
		|	&Таблица КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&Заказы)
		|		И Таблица.Проведен
		|		И (&Выражение) <> НЕОПРЕДЕЛЕНО
		|		И (&Выражение) < &ДатаОтгрузкиНовыхСтрок
		|		И ИСТИНА В(
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА КАК ЕстьЗаписи
		|			ИЗ
		|				РегистрСведений.РаспределениеЗапасов КАК ЗаписиЗаказа
		|			ГДЕ
		|				ЗаписиЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
		|					И ЗаписиЗаказа.ЗаказНаОтгрузку = Таблица.Ссылка)";
	
	Текст = СтрЗаменить(Текст, "&Таблица", ПараметрыВстраивания.ИмяОбъекта);
	Текст = СтрЗаменить(Текст, "&Выражение", ПараметрыВстраивания.ВыражениеДляВопросаПриВыполненииДействияВСпискеЗаказов);
	
	Запрос = Новый Запрос(Текст);
	
	ДатаОтгрузкиНовыхСтрок = НачалоДня(ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДатаОтгрузкиНовыхСтрок", ДатаОтгрузкиНовыхСтрок);
	Запрос.УстановитьПараметр("Заказы", Заказы);
	НуженВопрос = Не Запрос.Выполнить().Пустой();
	
	Возврат НуженВопрос;
	
КонецФункции

#КонецОбласти
