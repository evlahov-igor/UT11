#Область ПрограммныйИнтерфейс


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриНачалеРаботыСистемы() Экспорт

#Если ТонкийКлиент Тогда
	Если ПоддерживаетсяУстановкаОбновлений().Поддерживается = Истина Тогда
		ПроверитьОбновлениеКонфигурацииZolla();
	КонецЕсли;
#КонецЕсли

КонецПроцедуры

Функция ПервыйФайлОбновления(КаталогОбновлений) Экспорт

	ДатаПервогоФайла = Дата(3999,12,31,23,59,59);
	ПервыйФайл = Неопределено;

	КаталогОбновлений = злОбновлениеКонфигурацииВызовСервера.КаталогОбновлений();
	Если КаталогОбновлений <> "" Тогда
		мсвФайлы = НайтиФайлы(КаталогОбновлений, "*.cfu", Ложь);
		Если мсвФайлы.Количество() > 0 Тогда
			Для Каждого Файл Из мсвФайлы Цикл
				ВремяИзменения = Файл.ПолучитьВремяИзменения();
				Если ВремяИзменения < ДатаПервогоФайла Тогда
					ПервыйФайл = Файл;
					ДатаПервогоФайла = ВремяИзменения;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПервыйФайл;
	
КонецФункции

Процедура ЗапуститьОбновлениеКонфигурации(ФайлОбновления) Экспорт

	ПараметрыУстановкиОбновлений = Новый Структура;
	ПараметрыУстановкиОбновлений.Вставить("ЗавершениеРаботыСистемы", Ложь);
	ПараметрыУстановкиОбновлений.Вставить("ПолученоОбновлениеКонфигурации", Ложь);
	ПараметрыУстановкиОбновлений.Вставить("ВыполнитьОбновление", Ложь);
	ПараметрыУстановкиОбновлений.Вставить("ВыбранныеФайлы", ФайлОбновления);
	ОбновлениеКонфигурацииКлиент.ПоказатьПоискИУстановкуОбновлений(ПараметрыУстановкиОбновлений);
	
КонецПроцедуры

Процедура ЗапускОбработкиОбновления(ДопПараметры) Экспорт

	КаталогОбновлений = злОбновлениеКонфигурацииВызовСервера.КаталогОбновлений();
	ПервыйФайл = злОбновлениеКонфигурацииКлиент.ПервыйФайлОбновления(КаталогОбновлений);
	//Если ПервыйФайл <> Неопределено Тогда
	//	// Есть файл обновления в каталоге обновлений Zolla
	//	ПараметрыУстановкиОбновлений = Новый Структура;
	//	ПараметрыУстановкиОбновлений.Вставить("ЗавершениеРаботыСистемы", Ложь);
	//	ПараметрыУстановкиОбновлений.Вставить("ПолученоОбновлениеКонфигурации", Ложь);
	//	ПараметрыУстановкиОбновлений.Вставить("ВыполнитьОбновление", Ложь);
	//	ПараметрыУстановкиОбновлений.Вставить("ВыбранныеФайлы", СокрЛП(ФайлОбновления.ПолноеИмя));
	//	ОбновлениеКонфигурацииКлиент.ПоказатьПоискИУстановкуОбновлений(ПараметрыУстановкиОбновлений);
	//КонецЕсли;
	
КонецПроцедуры

Процедура ЗапуститьОбработчикОжиданияОбновленияКонфигурации() Экспорт

	ПодключитьОбработчикОжидания("ПроверитьОбновлениеКонфигурацииZolla", 60, Истина);
	
КонецПроцедуры

//Из ОМ ОбновлениеКонфигурацииКлиент

// Для функции ПоддерживаетсяУстановкаОбновлений
Функция ПоддерживаетсяПакетныйРежимКонфигуратора()
	
#Если ВебКлиент Или МобильныйКлиент Тогда
	Возврат Ложь;
#Иначе
	Конфигуратор = КаталогПрограммы() + СтандартныеПодсистемыКлиент.ИмяИсполняемогоФайлаПриложения(Истина);
	ФайлКонфигуратора = Новый Файл(Конфигуратор);
	Возврат ФайлКонфигуратора.Существует(); // АПК:566 синхронные вызовы вне веб-клиента разрешены;
#КонецЕсли
	
КонецФункции

// Удалена часть проверок
Функция ПоддерживаетсяУстановкаОбновлений() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Поддерживается", Ложь);
	Результат.Вставить("ПоддерживаетсяУстановкаИсправлений", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Если КР_ДополнительныеНастройкиПовтИсп.БазаЯвляетсяЦентральной() = Истина Тогда 
		Результат.ОписаниеОшибки = 
			НСтр("ru = 'Установка обновлений не выполняется в центральной базе.'");
		Возврат Результат;
	КонецЕсли;
	
	//ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
	//Если ПараметрыРаботыКлиента.РазделениеВключено Тогда 
	//	Результат.ОписаниеОшибки = 
	//		НСтр("ru = 'Установка обновлений для приложения в Интернете выполняется централизованно через Менеджер сервиса.'");
	//	Возврат Результат;
	//КонецЕсли;
	//
	//Если Не ПараметрыРаботыКлиента.ЭтоАдминистраторСистемы Тогда 
	//	Результат.ОписаниеОшибки = НСтр("ru = 'Для установки обновления требуются права администрирования.'");
	//	Возврат Результат;
	//КонецЕсли;
	
#Если ВебКлиент Тогда
	
	Результат.ПоддерживаетсяУстановкаИсправлений = Истина;
	Результат.ОписаниеОшибки =
		НСтр("ru = 'В веб-клиенте доступна только установка исправлений.
			|Для установки обновления, установите
			|полный дистрибутив технологической платформы 1С:Предприятие для Windows.'");
	
#ИначеЕсли МобильныйКлиент Тогда
	Результат.ОписаниеОшибки = НСтр("ru = 'Установка обновления доступна только в ОС Windows.'");
#Иначе
	
	Если Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда 
		Результат.ОписаниеОшибки = НСтр("ru = 'Установка обновления доступна только в ОС Windows.'");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.КлиентПодключенЧерезВебСервер() Тогда 
		Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + Символы.ПС + Символы.ПС; 
		КонецЕсли;
		
		Результат.ПоддерживаетсяУстановкаИсправлений = Истина;
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки
			+ НСтр("ru = 'При подключении через веб-сервер доступна только установка исправлений.
				|Для установки обновления, установите
				|полный дистрибутив технологической платформы 1С:Предприятие для Windows.'");
	КонецЕсли;
	
	Если Не ПоддерживаетсяПакетныйРежимКонфигуратора() Тогда 
		Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + Символы.ПС + Символы.ПС; 
		КонецЕсли;
		
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки
			+ НСтр("ru = 'Для установки обновления требуется конфигуратор.
				|Установите полный дистрибутив технологической платформы 1С:Предприятие для Windows.'");
	КонецЕсли;
	
#КонецЕсли
	
	Результат.Поддерживается = ПустаяСтрока(Результат.ОписаниеОшибки);
	
	Если Результат.Поддерживается Тогда 
		Результат.ПоддерживаетсяУстановкаИсправлений = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
