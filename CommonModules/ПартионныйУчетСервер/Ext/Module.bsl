#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
		
		//++ Локализация
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию);
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4);
		//-- Локализация
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
		
		//++ Локализация
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию);
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4);
		//-- Локализация
		
	КонецЕсли;
	// Контроль даты запрета
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов);
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	КонецЕсли;	
	Параметры.ЕстьПроизводныеДвижения = Документ.Движения.Найти(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя) <> Неопределено;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();

	// Заполнение полей должно соответствовать функциям:
	// РасчетСебестоимостиЗаполнениеПартий.ТекстСторноДвиженияИсправленныхДокументовТекущегоПериода()
	// РасчетСебестоимостиЗаполнениеПартий.ТекстСторноДвиженияИсправленныхДокументовПрошлогоПериода()
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ШаблонЗапроса = "
		|ВЫБРАТЬ
		|	ДокументыСторно.Дата КАК Период,
		|	&ПоляВыборки,
		// При сторнировании текущего периода:
		//	Для доп. расходов устанавливается тип записи "СторноДопРасходов"
		//	Тип записи "Дополнение" сохраняется
		//	Для расходного движения:
		//	- для типа записи "Потребление" устанавливается тип записи "Сторно"
		//	- для типа записи "СписаниеНаДругиеПартии" устанавливается тип записи "СторноСписанияНаДругиеПартии"
		//	- для типа записи "Сторно" и "СторноВозвратНаДругойСклад" устанавливается тип записи "СторноВозврата"
		//	Для приходного движения:
		//	- для типа записи "Перемещение" устанавливается тип записи "ИсправлениеТекущегоПериода"
		//	- для типа записи "Партия" устанавливается тип записи "КорректировкаПриобретения"
		// При сторнировании прошлого периода:
		//	Для доп. расходов устанавливается тип записи "КорректировкаПриобретенияПрошлогоПериода"
		//	Для типа записи "Дополнение" устанавливается тип записи "ДополнениеПрошлыйПериод"
		//	Для типа записи "ВозвратПрошлыхПериодов" устанавливается тип записи "СторноВозвратаПрошлыхПериодов"
		//	Для расходного движения устанавливается тип записи "ИсправлениеПрошлогоПериода"
		//	Для приходного движения устанавливается тип записи "КорректировкаПриобретения"
		|	(ВЫБОР
		// Исправление прошлого периода
		|		КОГДА ДанныеРегистра.Период < НАЧАЛОПЕРИОДА(ДокументыСторно.Дата, МЕСЯЦ) ТОГДА
		|			ВЫБОР КОГДА  ДанныеРегистра.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Дополнение) 
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДополнениеПрошлыйПериод)
		|
		|			КОГДА ДанныеРегистра.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ВозвратПрошлыхПериодов)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.СторноВозвратаПрошлыхПериодов)
		|
		|			КОГДА ДанныеРегистра.ТипЗаписи В (
		|					ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДопРасходыСПартией),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДопРасходыБезПартии),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаСтоимости))
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода)
		|
		|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			 ИЛИ ДанныеРегистра.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаПриобретения)
		|
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода) КОНЕЦ
		// Исправление текущего периода
		|		ИНАЧЕ
		|			ВЫБОР КОГДА  ДанныеРегистра.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Дополнение) 
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Дополнение)
		// Для возврата товаров от клиента оставляем текущие типы записей
		|			КОГДА ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|			 И ДанныеРегистра.ТипЗаписи В (
		|					ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ВозвратНаДругойСклад),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Перемещение))
		|				ТОГДА ДанныеРегистра.ТипЗаписи
		|
		|			КОГДА ДанныеРегистра.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ВозвратПрошлыхПериодов)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.СторноВозвратаПрошлыхПериодов)
		// Приходные движения
		|			КОГДА ДанныеРегистра.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия) 
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаПриобретения)
		|
		|			КОГДА ДанныеРегистра.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаПриобретения)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)
		|
		|			КОГДА ДанныеРегистра.ТипЗаписи В (
		|					ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДопРасходыСПартией),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДопРасходыБезПартии))
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.СторноДопРасходов)
		|
		|			КОГДА ДанныеРегистра.ТипЗаписи В (
		|					ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Перемещение),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ПеремещениеОбособленно))
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ИсправлениеТекущегоПериода)
		// Расходные движения
		// Для реализации товаров между организациями отдельное правило
		|			КОГДА ДанныеРегистра.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление)
		|			 И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.СторноПотребления)
		|
		|			КОГДА ДанныеРегистра.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление)
		|			 И ДанныеРегистра.КорРазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.СторноПотребления)
		|
		|			КОГДА ДанныеРегистра.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление)
		|			 И ДанныеРегистра.КорРазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Сторно)
		|
		|			КОГДА ДанныеРегистра.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.СписаниеНаДругиеПартии)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.СторноСписанияНаДругиеПартии)
		|
		|			КОГДА ДанныеРегистра.ТипЗаписи В (
		|					ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Сторно),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.СторноВозвратНаДругойСклад))
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.СторноВозврата)
		|
		|			ИНАЧЕ ДанныеРегистра.ТипЗаписи КОНЕЦ
		|		КОНЕЦ) КАК ТипЗаписи,
		// При сторнировании текущего периода:
		//	У приходного движения ДокументИсточник заполняется сторнируемым документом
		//	У расходного движения ДокументИсточник заполняется:
		//	- ссылкой на сторнируемый документ для выбытия товаров (если нет корреспондирующего приходного движения - не заполнено поле "КорРазделУчета"
		//	- ссылкой на исправительный документ для перемещений товаров (если есть корреспондирующее приходное движение) 
		|	(ВЫБОР
		// Для реализации товаров между организациями отдельное правило
		|		КОГДА ДанныеРегистра.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление)
		|		 И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
		|		 И ДанныеРегистра.Период >= НАЧАЛОПЕРИОДА(ДокументыСторно.Дата, МЕСЯЦ)
		|			ТОГДА ДанныеРегистра.Регистратор
		// При возврате товаров от клиента на другой склад ДокументИсточник заполняется исправительный документом.
		|		КОГДА ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|		 И ДанныеРегистра.ТипЗаписи В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ВозвратНаДругойСклад),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Перемещение))
		|			ТОГДА ДокументыСторно.Ссылка
		|
		|		КОГДА ДанныеРегистра.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление)
		|		 И ДанныеРегистра.Период >= НАЧАЛОПЕРИОДА(ДокументыСторно.Дата, МЕСЯЦ)
		|		 И ДанныеРегистра.КорРазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
		|			ТОГДА ДокументыСторно.Ссылка
		// При сторнировании доп расходов с указанной партией ДокументИсточник заполняется партией (из исходного документа- источника)
		// Это необходимо для построения цепочки ДопРасходыСПартией <- СторноДопРасходов
		// При исправлении записей корректировки стоимости ДокумаентИсточник заполняется исходным документом - источником.
		|		КОГДА ДанныеРегистра.ТипЗаписи В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДопРасходыСПартией),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаСтоимости))
		|			ТОГДА ДанныеРегистра.ДокументИсточник
		|
		|		ИНАЧЕ ДанныеРегистра.Регистратор КОНЕЦ) КАК ДокументИсточник,
		|	ИСТИНА КАК Сторно
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК ДанныеРегистра
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		&ИмяДокумента КАК ДокументыСторно
		|	ПО
		|		ДанныеРегистра.Регистратор = ДокументыСторно.СторнируемыйДокумент
		|		И ДокументыСторно.Ссылка В (&Ссылка)
		|ГДЕ
		|	НЕ ДанныеРегистра.Сторно 
		|	И НЕ ДанныеРегистра.РасчетПартий
		|	И НЕ ДанныеРегистра.РасчетСебестоимости
		|";
		
		МассивПолейВыборки = Новый Массив;
		
		Исключения = Новый Массив;
		Исключения.Добавить("Активность");
		Исключения.Добавить("НомерЗаписи");
		Исключения.Добавить("Регистратор");
		Исключения.Добавить("Период");
		Исключения.Добавить("Сторно");
		Исключения.Добавить("ТипЗаписи");
		Исключения.Добавить("ДокументИсточник");
	
	
		ПроведениеДокументов.ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.СтандартныеРеквизиты, 
			МассивПолейВыборки,
			Исключения);
		ПроведениеДокументов.ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.Измерения, 
			МассивПолейВыборки,
			Исключения);
		ПроведениеДокументов.ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.Ресурсы, 
			МассивПолейВыборки,
			Исключения,
			Истина);
		ПроведениеДокументов.ДобавитьПоляВыборкиСторнирующегоЗапроса(МетаданныеРегистра.Реквизиты, 
			МассивПолейВыборки,
			Исключения,
			Истина);
			
		ТекстПоляВыборки= СтрСоединить(МассивПолейВыборки,"," + Символы.ПС);
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&ПоляВыборки", ТекстПоляВыборки);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяДокумента", МетаданныеДокумента.ПолноеИмя());
		
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(), ТекстЗапроса);
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПартииПрочихРасходов;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстДопУсловий = "НЕ ДанныеРегистра.РасчетПартий";
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра,
				МетаданныеДокумента,
				ТекстДопУсловий));
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийПартииПрочихРасходов", 
		РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийСебестоимостьТоваров", 
		РегистрыНакопления.СебестоимостьТоваров.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным партионного учета.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПартииПрочихРасходов");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "СебестоимостьТоваров");
	
	//++ Локализация
	// Отключим удаление движений у регистров ПУ 2.1 для некоторых типов документов
	ТипДокумента = ТипЗнч(Движения[0].Отбор.Регистратор.Значение);
	ЭтоОфлайн = ТипДокумента <> Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		И ТипДокумента <> Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов")
		И ТипДокумента <> Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров")
		И ТипДокумента <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		И ТипДокумента <> Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
		И ТипДокумента <> Тип("ДокументСсылка.ЗаписьКнигиПокупок")
		И ТипДокумента <> Тип("ДокументСсылка.ЗаписьКнигиПродаж")
		И ТипДокумента <> Тип("ДокументСсылка.КорректировкаРеализации")
		И ТипДокумента <> Тип("ДокументСсылка.КорректировкаПриобретения");
	
	
	#Область ПартииПроизводственныхЗатрат
	
	ИмяТаблицы = "Таблица" + "ПартииПроизводственныхЗатрат";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		
		Движения.ПартииПроизводственныхЗатрат.Записывать = Истина;
		Движения.ПартииПроизводственныхЗатрат.Загрузить(ТаблицыДляДвижений[ИмяТаблицы]);
		
	ИначеЕсли Движения.Найти("ПартииПроизводственныхЗатрат") <> Неопределено
		И Движения.ПартииПроизводственныхЗатрат.Записывать И ЭтоОфлайн
		И Не (Движения.Найти("МатериалыИРаботыВПроизводстве") <> Неопределено
			И Движения.МатериалыИРаботыВПроизводстве.Количество() = 0
			И Движения.МатериалыИРаботыВПроизводстве.Записывать) Тогда
		
		Движения.ПартииПроизводственныхЗатрат.Записывать = Ложь;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПартииРасходовНаСебестоимостьТоваров
	
	ИмяТаблицы = "Таблица" + "ПартииРасходовНаСебестоимостьТоваров";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		
		Движения.ПартииРасходовНаСебестоимостьТоваров.Записывать = Истина;
		Движения.ПартииРасходовНаСебестоимостьТоваров.Загрузить(
			ТаблицыДляДвижений[ИмяТаблицы]);
		
	ИначеЕсли Движения.Найти("ПартииРасходовНаСебестоимостьТоваров") <> Неопределено
		И Движения.ПартииРасходовНаСебестоимостьТоваров.Записывать И ЭтоОфлайн Тогда
		
		Движения.ПартииРасходовНаСебестоимостьТоваров.Записывать = Ложь;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПартииТоваровОрганизаций
	
	ИмяТаблицы = "Таблица" + "ПартииТоваровОрганизаций";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		
		Движения.ПартииТоваровОрганизаций.Записывать = Истина;
		Движения.ПартииТоваровОрганизаций.Загрузить(ТаблицыДляДвижений[ИмяТаблицы]);
		
	ИначеЕсли Движения.Найти("ПартииТоваровОрганизаций") <> Неопределено
		И Движения.ПартииТоваровОрганизаций.Записывать И ЭтоОфлайн Тогда
		
		Движения.ПартииТоваровОрганизаций.Записывать = Ложь;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПартииТоваровПереданныеНаКомиссию
	
	ИмяТаблицы = "Таблица" + "ПартииТоваровПереданныеНаКомиссию";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		
		Движения.ПартииТоваровПереданныеНаКомиссию.Записывать = Истина;
		Движения.ПартииТоваровПереданныеНаКомиссию.Загрузить(
			ТаблицыДляДвижений[ИмяТаблицы]);
		
	ИначеЕсли Движения.Найти("ПартииТоваровПереданныеНаКомиссию") <> Неопределено
		И Движения.ПартииТоваровПереданныеНаКомиссию.Записывать И ЭтоОфлайн Тогда
		
		Движения.ПартииТоваровПереданныеНаКомиссию.Записывать = Ложь;
		
	КонецЕсли;
	
	#КонецОбласти
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ДетализацияПартийТоваровДляНДСиУСН");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ДетализацияПартийТоваровДляНДСиУСН2_4");
	//-- Локализация
	
КонецПроцедуры

// Возникает перед выполнением записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПередЗаписьюДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	РегистрыНакопления.СебестоимостьТоваров.ИнициализироватьСохранениеДвиженийНабораЗаписейЗаПериод(
		Документ.Движения.СебестоимостьТоваров, Документ.ДополнительныеСвойства);
	
КонецПроцедуры

// Возникает после выполнения записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПослеЗаписиДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаписьДвиженийВРегистры

// Формирует записи в регистр заданий к расчету себестоимости, при изменении записей в регистрах.
//
// Параметры:
//  Документ - ДокументОбъект - регистратор движений регистров
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, содержащий таблицы изменений регистров.
//
Процедура ОтразитьЗаданияКРасчетуСебестоимости(Документ, МенеджерВременныхТаблиц) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // задания устанавливаются только в главном узле.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	СоответствиеЗапросов = СоответствиеЗапросовКонтрольнымРегистрам(Запрос);
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц        КАК Месяц,
	|	Таблица.Организация  КАК Организация,
	|	Таблица.Документ     КАК Документ,
	|	Таблица.ИзмененыДанныеДляПартионногоУчетаВерсии21 КАК ИзмененыДанныеДляПартионногоУчетаВерсии21
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|;
	|";
		
	ТекстВложенногоЗапроса = "";
	ТекстЗапросаВременныхТаблиц = "";
	ИменаВременныхТаблиц = "";
		
	Для Каждого ЭлементСоответствия Из СоответствиеЗапросов Цикл
		ДополнитьТекстЗапросаЗаданий(ЭлементСоответствия.Ключ,
			ЭлементСоответствия.Значение,
			МенеджерВременныхТаблиц.Таблицы,
			ТекстВложенногоЗапроса,
			ТекстЗапросаВременныхТаблиц,
			ИменаВременныхТаблиц);
	КонецЦикла;
	
	ТекстУничтожитьВт = ТестЗапросаУничтоженияВременныхТаблиц(ИменаВременныхТаблиц);
	
	Если ЗначениеЗаполнено(ТекстВложенногоЗапроса) Тогда // есть хотя бы один контрольный регистр.
		ТекстЗапроса = ТекстЗапросаВременныхТаблиц
			+ СтрЗаменить(ШаблонЗапроса, "&КоллекцияДанных", "(" + ТекстВложенногоЗапроса + ")")
			+ ТекстУничтожитьВт;
			
		Запрос.Текст = ТекстЗапроса;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат; // нет данных к записи
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		НомерЗадания = Константы.НомерЗаданияКРасчетуСебестоимости.Получить();
		Пока Выборка.Следующий() Цикл
			РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписьРегистра(
				Выборка.Месяц,
				Выборка.Документ,
				Выборка.Организация,
				НомерЗадания,
				Выборка.ИзмененыДанныеДляПартионногоУчетаВерсии21);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеМетодыРегистраЗаданий

Функция СоответствиеЗапросовКонтрольнымРегистрам(Запрос)
	
	СоответствиеТекстовЗапросов = Новый Соответствие();
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийВыпускПродукции", ТекстЗапросаВыпускПродукции(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийВыручкаИСебестоимостьПродаж", ТекстЗапросаВыручкаИСебестоимостьПродаж(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийПрочаяВыручка", ТекстЗапросаПрочаяВыручка(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийМатериалыИРаботыВПроизводстве", ТекстЗапросаМатериалыИРаботыВПроизводстве(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийПартииНезавершенногоПроизводства", ТекстЗапросаПартииНезавершенногоПроизводства(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийПартииПроизводственныхЗатрат", ТекстЗапросаПартииПроизводственныхЗатрат(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийПартииПрочихРасходов", ТекстЗапросаПартииПрочихРасходов(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийПартииРасходовНаСебестоимостьТоваров", ТекстЗапросаПартииРасходовНаСебестоимостьТоваров(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийПартииТоваровОрганизаций", ТекстЗапросаПартииТоваровОрганизаций(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийПартииТоваровПереданныеНаКомиссию", ТекстЗапросаПартииТоваровПереданныеНаКомиссию(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийПрочиеРасходы", ТекстЗапросаПрочиеРасходы(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийПрочиеРасходыНезавершенногоПроизводства", ТекстЗапросаПрочиеРасходыНезавершенногоПроизводства(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийСебестоимостьТоваров", ТекстЗапросаСебестоимостьТоваров(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийТоварыКОформлениюОтчетовКомитенту", ТекстЗапросаТоварыКОформлениюОтчетовКомитенту(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийТоварыОрганизаций", ТекстЗапросаТоварыОрганизаций(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийТоварыОрганизацийКПередаче", ТекстЗапросаТоварыОрганизацийКПередаче(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийТоварыПереданныеНаКомиссию", ТекстЗапросаТоварыПереданныеНаКомиссию(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийТрудозатратыНезавершенногоПроизводства", ТекстЗапросаТрудозатратыНезавершенногоПроизводства(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийДетализацияПартийТоваровДляНДСиУСН", ТекстЗапросаДетализацияПартийТоваровДляНДСиУСН(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийДетализацияПартийТоваровДляНДСиУСН2_4", ТекстЗапросаДетализацияПартийТоваровДляНДСиУСН2_4(Запрос));
	
	Возврат СоответствиеТекстовЗапросов;

КонецФункции

// Дополняет текст запроса по формированию заданий.
// 
// Параметры:
// 	ИмяТаблицы - Строка - имя таблица для поиска в менеджере временных таблиц.
// 	ТекстыЗапросов - Структура - (См. ИнициализироватьСтруктуруТекстовЗапросов()).
// 	Таблицы - МенеджерВременныхТаблиц - менеджер временных таблиц запроса.
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
//
Процедура ДополнитьТекстЗапросаЗаданий(ИмяТаблицы, ТекстыЗапросов, Таблицы, ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц) Экспорт
	Если Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекстыЗапросов.ТекстЗапроса;
		ТекстЗапросаВременныхТаблиц = ТекстЗапросаВременныхТаблиц + ТекстыЗапросов.ТекстЗапросаВременныхТаблиц;
		Если ЗначениеЗаполнено(ТекстыЗапросов.ИменаВременныхТаблиц) Тогда
			ИменаВременныхТаблиц = ИменаВременныхТаблиц + ", " + ТекстыЗапросов.ИменаВременныхТаблиц;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Формирует текст запроса по уничтожению временных таблиц.
// 
// Параметры:
// 	ИменаВременныхТаблиц - Строка - имена уничтожаемых временных таблиц, разделенных запятой.
//
// Возвращаемое значение:
// 	Строка - текст запроса.
//
Функция ТестЗапросаУничтоженияВременныхТаблиц(ИменаВременныхТаблиц) Экспорт
	
	МассивУничтожаемыхВременныхТаблиц= СтрРазделить(ИменаВременныхТаблиц, ",", Ложь);
	
	ТестЗапроса = "";
	ШаблонЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ %1;
	|";
	
	Для каждого ИмяТаблицы Из МассивУничтожаемыхВременныхТаблиц Цикл
		ИмяТаблицы = СокрЛП(ИмяТаблицы);
		Если СтрНайти(ТестЗапроса, ИмяТаблицы) = 0 Тогда
			ТестЗапроса = ТестЗапроса + СтрШаблон(ШаблонЗапроса, ИмяТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТестЗапроса;
	
КонецФункции

// Инициализирует структуру текстов запросов
// 
// Параметры:
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
// Возвращаемое значение:
// 	Структура - Описание:
// * ТекстЗапроса - Строка - строка с текстом запроса.
// * ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// * ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
//
Функция ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса, ТекстЗапросаВременныхТаблиц = "", ИменаВременныхТаблиц = "") Экспорт
	СтруктураТекстовЗапросов = Новый Структура("ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц",
		ТекстЗапроса,
		ТекстЗапросаВременныхТаблиц,
		ИменаВременныхТаблиц);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаЗаданийУниверсальный(ИмяТаблицыИзменений, ИзмененыДанныеДляПартионногоУчетаВерсии21 = Ложь, ЕстьКорОрганизация = Ложь) Экспорт
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) КАК Месяц,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Регистратор КАК Документ,
	|	&ИзмененыДанныеДляПартионногоУчетаВерсии21 КАК ИзмененыДанныеДляПартионногоУчетаВерсии21
	|ИЗ
	|	&ИмяТаблицыИзменений КАК Таблица
	|";
	
	Если ЕстьКорОрганизация Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) КАК Месяц,
		|	Таблица.КорОрганизация КАК Организация,
		|	Таблица.Регистратор КАК Документ,
		|	&ИзмененыДанныеДляПартионногоУчетаВерсии21 КАК ИзмененыДанныеДляПартионногоУчетаВерсии21
		|ИЗ
		|	&ИмяТаблицыИзменений КАК Таблица
		|ГДЕ
		|	Таблица.КорОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыИзменений", ИмяТаблицыИзменений);
	Если ИзмененыДанныеДляПартионногоУчетаВерсии21 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИзмененыДанныеДляПартионногоУчетаВерсии21", "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИзмененыДанныеДляПартионногоУчетаВерсии21", "ЛОЖЬ");
	КонецЕсли;
	СтруктураТекстовЗапросов = ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов
КонецФункции

#Область ТекстыЗапросовЗаданийКРасчетуСебестоимости

Функция ТекстЗапросаВыпускПродукции(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийВыпускПродукции");
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаВыручкаИСебестоимостьПродаж(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) КАК Месяц,
	|	КлючиАналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ТаблицаИзменений.Регистратор КАК Документ,
	|	ЛОЖЬ КАК ИзмененыДанныеДляПартионногоУчетаВерсии21
	|ИЗ
	|	ТаблицаИзмененийВыручкаИСебестоимостьПродаж КАК ТаблицаИзменений
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитикаУчетаПоПартнерам
	|	ПО
	|		ТаблицаИзменений.АналитикаУчетаПоПартнерам = КлючиАналитикаУчетаПоПартнерам.КлючАналитики";
	
	СтруктураТекстовЗапросов = ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаПрочаяВыручка(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийПрочаяВыручка");
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаМатериалыИРаботыВПроизводстве(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийМатериалыИРаботыВПроизводстве");
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаПартииНезавершенногоПроизводства(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийПартииНезавершенногоПроизводства", Истина);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаПартииПроизводственныхЗатрат(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийПартииПроизводственныхЗатрат");
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаПартииПрочихРасходов(Запрос)
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) КАК МЕСЯЦ,
	|	Таблица.Организация                  КАК Организация,
	|	Таблица.Регистратор                  КАК Документ,
	|	ЛОЖЬ                                 КАК ИзмененыДанныеДляПартионногоУчетаВерсии21
	|ИЗ
	|	ТаблицаИзмененийПартииПрочихРасходов КАК Таблица
	|ГДЕ
	|	Таблица.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	ИЛИ Таблица.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|";
	СтруктураТекстовЗапросов = ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаПартииРасходовНаСебестоимостьТоваров(Запрос)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) КАК МЕСЯЦ,
	|	Таблица.Организация                  КАК Организация,
	|	Таблица.Регистратор                  КАК Документ,
	|	ИСТИНА                               КАК ИзмененыДанныеДляПартионногоУчетаВерсии21
	|ИЗ
	|	ТаблицаИзмененийПартииРасходовНаСебестоимостьТоваров КАК Таблица
	|";
	
	СтруктураТекстовЗапросов = ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаПартииТоваровОрганизаций(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийПартииТоваровОрганизаций", Истина);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаПартииТоваровПереданныеНаКомиссию(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийПартииТоваровПереданныеНаКомиссию", Истина);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаПрочиеРасходы(Запрос)
	
	ТекстЗапросаВременныхТаблиц = "";
	ТекстУничтожитьВт = "";
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) КАК Месяц,
	|	ТаблицаИзменений.Организация                  КАК Организация,
	|	ТаблицаИзменений.Регистратор                  КАК Документ,
	|	ЛОЖЬ                                          КАК ИзмененыДанныеДляПартионногоУчетаВерсии21
	|ИЗ
	|	ТаблицаИзмененийПрочиеРасходы КАК ТаблицаИзменений
	|ГДЕ
	|	(ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьПродаж),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаОбъектыВозникновенияЗатрат),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты))
	|	ИЛИ ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьПродаж),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаОбъектыВозникновенияЗатрат),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты))
	|	)
	|	И НЕ ТаблицаИзменений.Регистратор ССЫЛКА Документ.РаспределениеДоходовПоНаправлениямДеятельности
	|	И (НЕ ТаблицаИзменений.Регистратор ССЫЛКА Документ.РаспределениеПрочихЗатрат
	|		ИЛИ (ТаблицаИзменений.Регистратор ССЫЛКА Документ.РаспределениеПрочихЗатрат
	|			И ВЫРАЗИТЬ(ТаблицаИзменений.Регистратор КАК Документ.РаспределениеПрочихЗатрат).НазначениеНастройкиРаспределения = 
	|				ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства)))
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ),
	|	ТаблицаИзменений.Регистратор,
	|	ТаблицаИзменений.Период,
	|	ТаблицаИзменений.Организация,
	|	ТаблицаИзменений.Подразделение,
	|	ТаблицаИзменений.СтатьяРасходов,
	|	ТаблицаИзменений.АналитикаРасходов,
	|	ТаблицаИзменений.НаправлениеДеятельности,
	|	ТаблицаИзменений.ХозяйственнаяОперация,
	|	ТаблицаИзменений.АналитикаУчетаНоменклатуры
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаИзменений.Сумма) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.СуммаБезНДС) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.СуммаРегл) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.ПостояннаяРазница) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.ВременнаяРазница) <> 0";
	

	СтруктураТекстовЗапросов = ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ТекстУничтожитьВт);
	Возврат СтруктураТекстовЗапросов
КонецФункции

Функция ТекстЗапросаПрочиеРасходыНезавершенногоПроизводства(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийПрочиеРасходыНезавершенногоПроизводства");
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаСебестоимостьТоваров(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийСебестоимостьТоваров", Ложь, Истина);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаТоварыКОформлениюОтчетовКомитенту(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийТоварыКОформлениюОтчетовКомитенту", Истина);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаТоварыОрганизаций(Запрос)
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) КАК Месяц,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Регистратор КАК Документ,
	|	(ВЫБОР
	|		КОГДА ЛОЖЬ ТОГДА ЛОЖЬ // Для удобства расстановки тегов.
	//++ Локализация
	|		КОГДА ТИПЗНАЧЕНИЯ(Таблица.Регистратор) = ТИП(Документ.УведомлениеОВвозеПрослеживаемыхТоваров)
	|			ТОГДА ЛОЖЬ
	//-- Локализация
	|		ИНАЧЕ ИСТИНА КОНЕЦ) КАК ИзмененыДанныеДляПартионногоУчетаВерсии21
	|ИЗ
	|	ТаблицаИзмененийТоварыОрганизаций КАК Таблица
	|";
	СтруктураТекстовЗапросов = ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаТоварыОрганизацийКПередаче(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийТоварыОрганизацийКПередаче", Истина);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаТоварыПереданныеНаКомиссию(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийТоварыПереданныеНаКомиссию", Истина);
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаТрудозатратыНезавершенногоПроизводства(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийТрудозатратыНезавершенногоПроизводства");
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаДетализацияПартийТоваровДляНДСиУСН(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийДетализацияПартийТоваровДляНДСиУСН");
	Возврат СтруктураТекстовЗапросов;
КонецФункции

Функция ТекстЗапросаДетализацияПартийТоваровДляНДСиУСН2_4(Запрос)
	СтруктураТекстовЗапросов = ТекстЗапросаЗаданийУниверсальный("ТаблицаИзмененийДетализацияПартийТоваровДляНДСиУСН2_4");
	Возврат СтруктураТекстовЗапросов;
КонецФункции


#КонецОбласти

#КонецОбласти

#Область Проверки

// Возвращает месяц первых движений по регистру себестоимости.
// Можно считать, что эта дата соответствует началу ведения учета в ИБ.
//
// Возвращаемое значение:
//	Дата - Период первых движений по регистру себестоимости.
//
Функция ПериодПервыхДвиженийРегистраСебестоимость() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Период КАК Период
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = НачалоМесяца(Выборка.Период);
	Иначе
		Результат = Дата(1,1,1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает месяц последних движений по регистру себестоимости.
// Можно считать, что эта дата соответствует последним операциям учета в ИБ.
//
// Возвращаемое значение:
//	Дата - Период последних движений по регистру себестоимости.
//
Функция ПериодПоследнихДвиженийРегистраСебестоимость() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Период КАК Период
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = НачалоМесяца(Выборка.Период);
	Иначе
		Результат = Дата(1,1,1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает месяц первых движений, сформированных в партионном учете версии 2.2
//
// Возвращаемое значение:
//	Дата - Период первых движений, сформированных в партионном учете версии 2.2
//
Функция ПериодПервыхДвиженийПартионныйУчетВерсии22() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА Т.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.СлужебноеПереходНаПартионныйУчет22)
	|			ТОГДА ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Т.Период, МЕСЯЦ), СЕКУНДА, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ)
	|	КОНЕЦ КАК Период
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|ГДЕ
	|	Т.ВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Период;
	Иначе
		Результат = Дата(1,1,1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПересчетПрошлыхПериодов

// Создает задания к расчету себестоимости при включении/выключении учета себестоимости по назначениям или
// при изменении периода включения учета себестоимости по назначениям.
//
Процедура ЗапланироватьПересчетСебестоимостиПриИзмененииУчетаСебестоимостиПоНазначениям() Экспорт
	
	// Для каждой организации определяется период, начиная с которого необходимо пересчитать себестоимость.
	// 1) При включении учета по назначениям или изменении даты включения берется минимальный период из двух:
	//	- период первого движения себестоимости, в котором ранее уже учитывались назначения
	//	- период первого движения себестоимости, после даты включения учета по назначениям
	// 2) При выключении учета по назначениям берется период первых движений себестоимости,
	//	в котором ранее уже учитывались назначения
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ключи.Ссылка
	|ПОМЕСТИТЬ АналитикаСНазначениями
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|ГДЕ
	|	Ключи.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|;
	|ВЫБРАТЬ
	|	Периоды.Организация КАК Организация,
	|	МИНИМУМ(Периоды.Месяц) КАК Месяц
	|ПОМЕСТИТЬ ВТПересчетСебестоимости
	|ИЗ (
	// При включении учета по назначениям или изменении даты определяем минимальный период до периода включения,
	// в котором есть движения с назначениями.
	|	ВЫБРАТЬ
	|		СебестоимостьТоваров.Организация КАК Организация,
	|		МИНИМУМ(НАЧАЛОПЕРИОДА(СебестоимостьТоваров.Период, МЕСЯЦ)) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикаСНазначениями КАК АналитикаСНазначениями
	|			ПО АналитикаСНазначениями.Ссылка = СебестоимостьТоваров.АналитикаУчетаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		Константы.УчитыватьСебестоимостьТоваровПоНазначениям
	|		И СебестоимостьТоваров.Период < НАЧАЛОПЕРИОДА(Константы.ДатаВключенияОбособленногоУчетаСебестоимостиПоНазначениям, МЕСЯЦ)	
	|	СГРУППИРОВАТЬ ПО
	|		СебестоимостьТоваров.Организация
	|
	// При включении учета по назначениям или изменении даты определяем минимальный период, в которым есть движения после периода включения.
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		СебестоимостьТоваров.Организация КАК Организация,
	|		МИНИМУМ(НАЧАЛОПЕРИОДА(СебестоимостьТоваров.Период, МЕСЯЦ)) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		Константы.УчитыватьСебестоимостьТоваровПоНазначениям
	|		И СебестоимостьТоваров.Период >= НАЧАЛОПЕРИОДА(Константы.ДатаВключенияОбособленногоУчетаСебестоимостиПоНазначениям, МЕСЯЦ)
	|	СГРУППИРОВАТЬ ПО
	|		СебестоимостьТоваров.Организация
	|
	// При выключении учета по назначениям определяем минимальный период, в котором есть движения с назначениями.
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		СебестоимостьТоваров.Организация КАК Организация,
	|		МИНИМУМ(НАЧАЛОПЕРИОДА(СебестоимостьТоваров.Период, МЕСЯЦ)) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикаСНазначениями КАК АналитикаСНазначениями
	|			ПО АналитикаСНазначениями.Ссылка = СебестоимостьТоваров.АналитикаУчетаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		НЕ Константы.УчитыватьСебестоимостьТоваровПоНазначениям
	|	СГРУППИРОВАТЬ ПО
	|		СебестоимостьТоваров.Организация
	| 	) КАК Периоды
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|";
	
	СформироватьЗаданияКПересчетуСебестоимости(Запрос);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц, "АналитикаСНазначениями, ВТПересчетСебестоимости");
	
КонецПроцедуры

Процедура СформироватьЗаданияКПересчетуСебестоимости(Запрос) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Организация КАК Организация,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ)) КАК Месяц
	|ПОМЕСТИТЬ ВТЗаданияКРасчету
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПересчетСебестоимости КАК Пересчеты
	|		ПО Задания.Организация = Пересчеты.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пересчеты.Организация,
	|	Пересчеты.Месяц
	|ИЗ
	|	ВТПересчетСебестоимости КАК Пересчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаданияКРасчету КАК Задания
	|		ПО Пересчеты.Организация = Задания.Организация
	|ГДЕ
	|	(Задания.Месяц ЕСТЬ NULL 
	|			ИЛИ Задания.Месяц > Пересчеты.Месяц)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
