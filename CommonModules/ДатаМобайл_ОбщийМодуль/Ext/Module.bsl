
#Область ПрограммныйИнтерфейс

//ОБЩИЕ
Функция ЕстьМаркировка() Экспорт
	
	ЕстьМаркировка = Ложь;	
	Попытка
		Если Метаданные.ОбщиеМодули.ИнтерфейсИСМП.Имя = "ИнтерфейсИСМП" Тогда
			ЕстьМаркировка = Истина;
		КонецЕсли;
	Исключение	
	КонецПопытки;
	
	Возврат ЕстьМаркировка;
	
КонецФункции
Функция ЕстьЕГАИС() Экспорт
	
	ЕстьЕГАИС = Ложь;
	
	Попытка
		Если Метаданные.РегистрыСведений.АкцизныеМаркиЕГАИС.Имя = "АкцизныеМаркиЕГАИС" Тогда
			ЕстьЕГАИС = Истина;
		КонецЕсли;
	Исключение		
	КонецПопытки;
	
	Возврат ЕстьЕГАИС;
	
КонецФункции
Функция ЕстьМДЛП() Экспорт
	
	ЕстьМДЛП = Ложь;	
	Попытка
		Если Метаданные.ОбщиеМодули.ИнтеграцияМДЛП.Имя = "ИнтеграцияМДЛП" Тогда
			ЕстьМДЛП = Истина;
		КонецЕсли;
	Исключение	
	КонецПопытки;
	
	Возврат ЕстьМДЛП;
	
КонецФункции
Функция ЕстьАСТ() Экспорт
	
	Возврат Метаданные.Справочники.Найти("астМаркиЕГАИС") <> Неопределено;
	
КонецФункции	
Функция Есть115() Экспорт
	
	Есть115 = Ложь;
	
	Попытка
		Если Лев(Метаданные.Версия, 4) = "11.5" Или Лев(Метаданные.Версия, 3) = "2.5" Тогда
			Есть115 = Истина;
		КонецЕсли;
	Исключение		
	КонецПопытки;
	
	Попытка
		Если Метаданные.РегистрыСведений.ЦеныНоменклатуры25.Имя = "ЦеныНоменклатуры25" Тогда
			Есть115 = Истина;
		КонецЕсли;
	Исключение		
	КонецПопытки;
	
	Возврат Есть115;
	
КонецФункции
Функция ЕстьКТ2000() Экспорт
	
	Возврат Метаданные.Справочники.Найти("алкКлассификаторАлкогольнойПродукцииЕГАИС") <> Неопределено;
	
КонецФункции
Функция Ценообразование25() Экспорт
	
	Результат = Ложь;
	
	Попытка
		Если Метаданные.РегистрыСведений.ЦеныНоменклатуры25.Имя = "ЦеныНоменклатуры25" Тогда
			Если Константы.ИспользуетсяЦенообразование25.Получить() Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	Исключение	КонецПопытки;
	
	Возврат Результат; 
	
КонецФункции
Функция ЕстьРегистрНакопления(ИмяРегистра) Экспорт
	
	ЕстьРегистр = Ложь;
	
	Попытка
		Если Метаданные.РегистрыНакопления[ИмяРегистра].Имя = ИмяРегистра Тогда
			ЕстьРегистр = Истина;
		КонецЕсли;
	Исключение		
	КонецПопытки;
	
	Возврат ЕстьРегистр;
	
КонецФункции
Функция ПроверкаИмениКонфигурации(ИмяКонфигурации) Экспорт
	
	Если СокрЛП(Метаданные.Имя) = ИмяКонфигурации Тогда 
		Возврат Истина;	
	Иначе
		Возврат Ложь;
	КонецЕсли;	
		
КонецФункции
Функция ОбщийМодуль(Имя) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда		
		Модуль = Вычислить(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции
Функция СтарыйРежимСовместимости() Экспорт
	
	СтарыйРежимСовместимости = Ложь;
	
	Попытка
		Если Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_3_6 Тогда
			СтарыйРежимСовместимости = Истина;
		КонецЕсли;	
	Исключение		
	КонецПопытки;
	
	Возврат СтарыйРежимСовместимости;
	
КонецФункции	
Процедура ДатаМобайл_Автообработка() Экспорт
	
	// << 03.07.2024 Петухов А.В., Фактор, #4286
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДатаМобайл_Автообработка);
	// >> 03.07.2024 Петухов А.В., Фактор, #4286
	
	//ОЧИСТКА ЛОГОВ
	ОчисткаЛогов();	
	
	//АВТОУДАЛЕНИЕ
	ЗапросШаблоновУдаление = Новый Запрос();
	ЗапросШаблоновУдаление.Текст = "ВЫБРАТЬ
	|	ДатаМобайл_ШаблоныДокументов.УсловиеВыгрузки КАК УсловиеВыгрузки,
	|	ДатаМобайл_ШаблоныДокументов.ВидДокумента КАК ВидДокумента,
	|	ДатаМобайл_ШаблоныДокументов.Ссылка КАК Ссылка,
	|	ДатаМобайл_ШаблоныДокументов.УдалениеСтарыхДокументов КАК УдалениеСтарыхДокументов
	|ИЗ
	|	Справочник.ДатаМобайл_ШаблоныДокументов КАК ДатаМобайл_ШаблоныДокументов
	|ГДЕ
	|	НЕ ДатаМобайл_ШаблоныДокументов.УдалениеСтарыхДокументов = 0 ";
	
	ШаблоныУдаление = ЗапросШаблоновУдаление.Выполнить().Выгрузить();
	Для каждого ШаблонУдаление Из ШаблоныУдаление Цикл	
		ЗапросДокументовУдаление = Новый Запрос();
		ЗапросДокументовУдаление.Текст ="ВЫБРАТЬ
		|	ДатаМобайл_ДокументыТСД.Ссылка КАК Ссылка,
		|	ДатаМобайл_ДокументыТСД.ИсходныйДокумент.Дата КАК ИсходныйДокументДата,
		|	ДатаМобайл_ДокументыТСД.ДатаЗавершения КАК ДатаЗавершения
		|ИЗ
		|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
		|ГДЕ
		|	ДатаМобайл_ДокументыТСД.Шаблон = &Шаблон
		|	И ДатаМобайл_ДокументыТСД.ДатаЗавершения > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		ЗапросДокументовУдаление.УстановитьПараметр("Шаблон", ШаблонУдаление.Ссылка);
		ДокументыУдаление = ЗапросДокументовУдаление.Выполнить().Выгрузить();
		Для каждого ДокументУдаление Из ДокументыУдаление Цикл
			СекундыНаДни =  ШаблонУдаление.УдалениеСтарыхДокументов * 86400;
			
			Если ДокументУдаление.ИсходныйДокументДата = Null Тогда
				ДатаУдаления = ДокументУдаление.ДатаЗавершения + СекундыНаДни;						
			Иначе
				ДатаУдаления = ДокументУдаление.ИсходныйДокументДата + СекундыНаДни;
			КонецЕсли;
			
			ДатаСегодня = ТекущаяДата();
			Если ДатаСегодня >= ДатаУдаления Тогда
				Попытка 
					ДокументУдаление.Ссылка.ПолучитьОбъект().Удалить();
				Исключение 
					ДокументУдаление.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;    
		
	//АВТОЗАГРУЗКА	
	ЗапросДокументовАвтозагрузка = Новый Запрос();
	ЗапросДокументовАвтозагрузка.Текст = "ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
	|ГДЕ
	|	ДатаМобайл_ДокументыТСД.Шаблон.ОбрабатыватьРоботом
	|	И НЕ ДатаМобайл_ДокументыТСД.ПометкаУдаления
	|	И ДатаМобайл_ДокументыТСД.ДатаЗавершенияСбора <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ДатаМобайл_ДокументыТСД.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ ДатаМобайл_ДокументыТСД.ОшибкаПриАвтозагрузке";
	
	ДокументыАвтозагрузка = ЗапросДокументовАвтозагрузка.Выполнить().Выбрать();
	Пока ДокументыАвтозагрузка.Следующий() Цикл	
		Об = ДокументыАвтозагрузка.Ссылка.ПолучитьОбъект();
		Об.ДатаПриемкиОператором = ТекущаяДата();
		Об.ОшибкаПриАвтозагрузкеОписание = "";
		Об.Записать();
		СтрокаОшибок = "";
		Попытка 
			Док = Обработки.ДатаМобайл_АРМДиспетчера.ВнестиДокументВБазу(Об, СтрокаОшибок);
		Исключение
			СтрокаОшибок = ОписаниеОшибки();
		КонецПопытки;	
		Если СтрокаОшибок <> "" Тогда
			Модуль_ОбщегоНазначенияКлиентСервер = ОбщийМодуль("ОбщегоНазначенияКлиентСервер");
			
			ИмяСобытия = НСтр("ru = 'Документ DataMobile'", Модуль_ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
			ТекстСообщения = НСтр("ru = 'Не удалось загрузить документ DataMobile: %Справочник% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Справочник%", ДокументыАвтозагрузка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", " " + СтрокаОшибок);
			ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			Справочники.ДатаМобайл_ДокументыТСД,
			ДокументыАвтозагрузка.Ссылка,
			ТекстСообщения);
			Если Об.Шаблон.НеОстанавливатьАвтозагрузкуДокументаПриОшибках Тогда
			Иначе	
				Об.ОшибкаПриАвтозагрузке 			= Истина;
				Об.ОшибкаПриАвтозагрузкеОписание 	= СтрокаОшибок;
				Об.Записать();
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
		
	//АВТОВЫГРУЗКА	
	ЗапросШаблоновАвтовыгрузка = Новый Запрос();
	ЗапросШаблоновАвтовыгрузка.Текст = "ВЫБРАТЬ
	|	ДатаМобайл_ШаблоныДокументов.УсловиеВыгрузки КАК УсловиеВыгрузки,
	|	ДатаМобайл_ШаблоныДокументов.ВидДокумента КАК ВидДокумента,
	|	ДатаМобайл_ШаблоныДокументов.Ссылка КАК Ссылка,
	|	ДатаМобайл_ШаблоныДокументов.ИмяТабличнойЧастиПодбор КАК ИмяТабличнойЧастиПодбор,
	|	ДатаМобайл_ШаблоныДокументов.УдалениеСтарыхДокументов КАК УдалениеСтарыхДокументов,
	|	ДатаМобайл_ШаблоныДокументов.МаркировкаВыгружатьРоботом КАК МаркировкаВыгружатьРоботом
	|ИЗ
	|	Справочник.ДатаМобайл_ШаблоныДокументов КАК ДатаМобайл_ШаблоныДокументов
	|ГДЕ
	|	НЕ ДатаМобайл_ШаблоныДокументов.ПометкаУдаления И (ДатаМобайл_ШаблоныДокументов.ВыгружатьРоботом ИЛИ ДатаМобайл_ШаблоныДокументов.МаркировкаВыгружатьРоботом)";
	ШаблоныАвтовыгрузка = ЗапросШаблоновАвтовыгрузка.Выполнить().Выгрузить();
	Для каждого ШаблонАвтовыгрузка Из ШаблоныАвтовыгрузка Цикл
		
		ЗапросДокументовАвтовыгрузка = Новый Запрос();
		ЗапросДокументовАвтовыгрузка.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Документ1С.Ссылка КАК ИсходныйДокумент
		|ПОМЕСТИТЬ ВТ_Документы		
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК Документ1С
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
		|		ПО Документ1С.Ссылка = ДатаМобайл_ДокументыТСД.ИсходныйДокумент
		|		И ДатаМобайл_ДокументыТСД.Шаблон = &Шаблон
		|ГДЕ
		|	НЕ Документ1С.ПометкаУдаления
		|   И 2=2	
		|	И ДатаМобайл_ДокументыТСД.Ссылка ЕСТЬ NULL
		|	И (&УсловиеВключения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		ЗапросДокументовАвтовыгрузка.Текст = СтрЗаменить(ЗапросДокументовАвтовыгрузка.Текст, "ПриобретениеТоваровУслуг", ШаблонАвтовыгрузка.ВидДокумента);
		ЗапросДокументовАвтовыгрузка.Текст = СтрЗаменить(ЗапросДокументовАвтовыгрузка.Текст, "&УсловиеВключения", ?(СокрЛП(ШаблонАвтовыгрузка.УсловиеВыгрузки) = "", "1=1", ШаблонАвтовыгрузка.УсловиеВыгрузки));
		
		Если ШаблонАвтовыгрузка.УдалениеСтарыхДокументов <> 0 Тогда
			ЗапросДокументовАвтовыгрузка.Текст = СтрЗаменить(ЗапросДокументовАвтовыгрузка.Текст, "2=2", "Документ1С.Ссылка.Дата > &ДатаУдаления");
			ЗапросДокументовАвтовыгрузка.УстановитьПараметр("ДатаУдаления", ТекущаяДата() - ШаблонАвтовыгрузка.УдалениеСтарыхДокументов * 86400);				
		КонецЕсли;                                                              
		ЗапросДокументовАвтовыгрузка.УстановитьПараметр("Шаблон", ШаблонАвтовыгрузка.Ссылка);
			
		Если ШаблонАвтовыгрузка.ВидДокумента = "ЗаказКлиента" И Найти(ШаблонАвтовыгрузка.УсловиеВыгрузки, "&СостоянияЗаказовКлиентов") > 0 Тогда
			СкорректироватьЗапросАвтовыгрузкиЗаказКлиента(ЗапросДокументовАвтовыгрузка.Текст);
		Иначе
			ЗапросДокументовАвтовыгрузка.Текст = СтрЗаменить(ЗапросДокументовАвтовыгрузка.Текст, "ПОМЕСТИТЬ ВТ_Документы", "");	
		КонецЕсли;
		
		Для каждого СтрПараметра Из ШаблонАвтовыгрузка.Ссылка.ПараметрыУсловияВыгрузки Цикл
			ЗапросДокументовАвтовыгрузка.УстановитьПараметр(СтрПараметра.ИмяПараметра, СтрПараметра.ЗначениеПараметра);
		КонецЦикла;
		
		Если Найти(ШаблонАвтовыгрузка.УсловиеВыгрузки, "&ТекущаяДата") > 0 Тогда
			ЗапросДокументовАвтовыгрузка.УстановитьПараметр("ТекущаяДата", ТекущаяДата()); //ПараметрПоУмолчанию
		КонецЕсли;
		
		ДокументыАвтовыгрузка = ЗапросДокументовАвтовыгрузка.Выполнить().Выбрать();
		Пока ДокументыАвтовыгрузка.Следующий() Цикл		
			Если ШаблонАвтовыгрузка.МаркировкаВыгружатьРоботом Тогда
				ВидПродукцииИСДокумента = ДатаМобайл_Маркировка.ПолучитьВидПродукцииИСДокумента(ДокументыАвтовыгрузка.ИсходныйДокумент, ШаблонАвтовыгрузка.ИмяТабличнойЧастиПодбор);
				Если Не ЗначениеЗаполнено(ВидПродукцииИСДокумента) Тогда 
					Продолжить;
				КонецЕсли; 
				
				Если ТипЗнч(ВидПродукцииИСДокумента) = Тип("Массив") Тогда
					Если ВидПродукцииИСДокумента.Количество() > 0 Тогда
						Если Не ЗначениеЗаполнено(ВидПродукцииИСДокумента[0]) Тогда
							Продолжить;
						КонецЕсли; 		
					Иначе
						Продолжить;
					КонецЕсли;	
				КонецЕсли; 	
			КонецЕсли; 	
			
			ДокТСД = Справочники.ДатаМобайл_ДокументыТСД.СоздатьЭлемент();
			ДокТСД.ИсходныйДокумент = ДокументыАвтовыгрузка.ИсходныйДокумент;
			ДокТСД.Шаблон = ШаблонАвтовыгрузка.Ссылка;
			ДокТСД.Записать();			
		КонецЦикла;
		
	КонецЦикла;
		
	//АВТОЗАВЕРШЕНИЕ ГРУППОВОГО ДОКУМЕНТА ПРИ СОВПАДЕНИИ ПЛАН С ФАКТОМ
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСД.Ссылка КАК Ссылка,
	|	ДатаМобайл_ДокументыТСД.ИсходныйДокумент КАК ИсходныйДокумент
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
	|ГДЕ
	|	ДатаМобайл_ДокументыТСД.Шаблон.ВыгружатьВыполненныйНаТСДДокументАвтоматически = ИСТИНА
	|	И ДатаМобайл_ДокументыТСД.Шаблон.ГрупповаяРабота = ИСТИНА
	|	И ДатаМобайл_ДокументыТСД.ДатаЗавершенияСбора = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ДатаМобайл_ДокументыТСД.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Обработки.ДатаМобайл_АРМДиспетчера.ПланРавноФакт(Выборка.Ссылка, Выборка.ИсходныйДокумент) Тогда
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.ПланРавноФакт = Истина;
			СправочникОбъект.ДатаЗавершенияСбора = ТекущаяДатаСеанса();
			СправочникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	//Очистка полного КМ и GS1 в ТЧ документа тсд
	ЗапросШаблоновПолногоКМ = Новый Запрос();
	ЗапросШаблоновПолногоКМ.Текст = "ВЫБРАТЬ
	|	ДатаМобайл_ШаблоныДокументов.УсловиеВыгрузки КАК УсловиеВыгрузки,
	|	ДатаМобайл_ШаблоныДокументов.ВидДокумента КАК ВидДокумента,
	|	ДатаМобайл_ШаблоныДокументов.Ссылка КАК Ссылка,
	|	ДатаМобайл_ШаблоныДокументов.МаркировкаОчищатьПолныеКМ КАК ОчищатьПолныеКМ
	|ИЗ
	|	Справочник.ДатаМобайл_ШаблоныДокументов КАК ДатаМобайл_ШаблоныДокументов
	|ГДЕ
	|	НЕ ДатаМобайл_ШаблоныДокументов.МаркировкаОчищатьПолныеКМ = 0";
	
	ШаблоныПолногоКМ = ЗапросШаблоновПолногоКМ.Выполнить().Выгрузить();
	Для каждого ШаблонПолногоКМ Из ШаблоныПолногоКМ Цикл	
		ЗапросДокументовПолногоКМ = Новый Запрос();
		ЗапросДокументовПолногоКМ.Текст = "ВЫБРАТЬ
		|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
		|ГДЕ
		|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Дата < &ДатаОтсчета
		|	И (ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ПолныйКодМаркировки <> """"
		|			ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.GS1 <> """")
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка";
		
		ДатаОтсчета = ТекущаяДата() - ШаблонПолногоКМ.ОчищатьПолныеКМ * 86400;
		
		ЗапросДокументовПолногоКМ.УстановитьПараметр("Шаблон"		, ШаблонПолногоКМ.Ссылка);
		ЗапросДокументовПолногоКМ.УстановитьПараметр("ДатаОтсчета"	, ДатаОтсчета);
		
		ДокументыПолногоКМ = ЗапросДокументовПолногоКМ.Выполнить().Выгрузить();
		Для каждого ДокументПолногоКМ Из ДокументыПолногоКМ Цикл
			ДокументОбъект = ДокументПолногоКМ.Ссылка.ПолучитьОбъект();
			СобранныеДанные = ДокументОбъект.СобранныеДанныеПодбор;
			
			Для каждого СтрокаТЧ Из СобранныеДанные Цикл
				СтрокаТЧ.ПолныйКодМаркировки = "";
				СтрокаТЧ.GS1                 = "";
			КонецЦикла;
			ДокументОбъект.Записать();
		КонецЦикла;
	КонецЦикла;
	
	// ФИКСАЦИЯ ПЛАН-ФАКТ
	ЗапросПланФакт = Новый Запрос;
	ЗапросПланФакт.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 200
	|	ДокументыТСД.Ссылка,
	|	ЕСТЬNULL(ДокументыТСД.ИсходныйДокумент, NULL) КАК ИсходныйДокумент,
	|	ДокументыТСД.ПланРавноФакт КАК ПланРавноФакт
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД КАК ДокументыТСД
	|ГДЕ
	|	НЕ ДокументыТСД.ПометкаУдаления
	|	И ДокументыТСД.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ ДокументыТСД.ДатаЗавершенияСбора = ДАТАВРЕМЯ(1, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыТСД.ДатаЗавершенияСбора УБЫВ";
	
	ВыборкаПланФакт = ЗапросПланФакт.Выполнить().Выбрать();
	Пока ВыборкаПланФакт.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаПланФакт.ИсходныйДокумент) Тогда Продолжить; КонецЕсли;
		ПланРавноФакт = Обработки.ДатаМобайл_АРМДиспетчера.ПланРавноФакт(ВыборкаПланФакт.Ссылка, ВыборкаПланФакт.ИсходныйДокумент); 
		
		Если Не ПланРавноФакт = ВыборкаПланФакт.ПланРавноФакт Тогда
			докОб = ВыборкаПланФакт.Ссылка.ПолучитьОбъект();
			докОб.ПланРавноФакт = ПланРавноФакт;
			
			Попытка
				докОб.Записать();
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
Функция ПолучитьСписокЗаказовЗаданияНаПеревозку(ДокументДляОтправки) Экспорт
	
	//ВЫБЕРЕМ ЗАКАЗЫ В ЗАДАНИИ НА ПЕРЕВОЗКУ
	//ЗАКАЗЫ, РЕАЛИЗАЦИИ, ПОРУЧЕНИЕ ЭКСПЕДИТОРУ 
	ЗапросРаспоряженийЗаказов = Новый Запрос();
	ЗапросРаспоряженийЗаказов.Текст = "ВЫБРАТЬ
	|	ДокументЗадания.Распоряжение КАК Распоряжение
	|ПОМЕСТИТЬ ТаблицаРаспоряжений
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ДокументЗадания
	|ГДЕ
	|	ДокументЗадания.Ссылка = &ДокументВыгрузкиСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказы.Распоряжение КАК Распоряжение
	|ИЗ
	|	ТаблицаРаспоряжений КАК ТаблицаЗаказы
	|ГДЕ
	|	ТаблицаЗаказы.Распоряжение ССЫЛКА Документ.ЗаказКлиента
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаРеализации.Распоряжение.ЗаказКлиента
	|ИЗ
	|	ТаблицаРаспоряжений КАК ТаблицаРеализации
	|ГДЕ
	|	ТаблицаРеализации.Распоряжение.ЗаказКлиента ССЫЛКА Документ.ЗаказКлиента
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПорученияЭкспедитору.Основание.ЗаказКлиента
	|ИЗ
	|	ТаблицаРаспоряжений КАК ТаблицаПорученияЭкспедитору
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоручениеЭкспедитору.Основания КАК ПорученияЭкспедитору
	|		ПО (ПорученияЭкспедитору.Ссылка = ТаблицаПорученияЭкспедитору.Распоряжение)
	|ГДЕ
	|	ПорученияЭкспедитору.Основание.ЗаказКлиента ССЫЛКА Документ.ЗаказКлиента
	|	И НЕ ПорученияЭкспедитору.Основание.ЗаказКлиента ЕСТЬ NULL
	|	И ПорученияЭкспедитору.Основание.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПорученияЭкспедитору.Основание
	|ИЗ
	|	ТаблицаРаспоряжений КАК ТаблицаПорученияЭкспедитору
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоручениеЭкспедитору.Основания КАК ПорученияЭкспедитору
	|		ПО (ПорученияЭкспедитору.Ссылка = ТаблицаПорученияЭкспедитору.Распоряжение)
	|ГДЕ
	|	ПорученияЭкспедитору.Основание ССЫЛКА Документ.ЗаказКлиента
	|	И ПорученияЭкспедитору.Основание <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)";  
	
	ЗапросРаспоряженийЗаказов.УстановитьПараметр("ДокументВыгрузкиСсылка", ДокументДляОтправки);
	МассивЗаказов = ЗапросРаспоряженийЗаказов.Выполнить().Выгрузить().ВыгрузитьКолонку("Распоряжение");
		
	Возврат МассивЗаказов;
	
КонецФункции
Функция ПолучитьВерсиюАРМ(ПроцедураВызова = "") Экспорт
	
	ВерсияАРМ = "";
	
	Попытка
		
		ВерсияАРМ = СокрЛП(Метаданные.Обработки.ДатаМобайл_АРМДиспетчера.Синоним);
		
		Если СтрНайти(ВерсияАРМ, "v") = 0 Тогда 
			ВерсияАРМ = СокрЛП(Метаданные.Обработки.ДатаМобайл_АРМДиспетчера.Формы.Управляемая.Синоним);
		КонецЕсли; 
		
		Если ПроцедураВызова = "Login" Тогда
		
			ВерсияАРМ = СтрЗаменить(ВерсияАРМ, "DataMobile: АРМ диспетчера (", "");
			ВерсияАРМ = СтрЗаменить(ВерсияАРМ, ") v.3", "");
			
		КонецЕсли;

	Исключение 
		
	КонецПопытки;
	
	Возврат ВерсияАРМ;
	
КонецФункции
Процедура СкорректироватьЗапросАвтовыгрузкиЗаказКлиента(ТекстЗапроса)
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ1с.СостоянияЗаказовКлиентов = &СостоянияЗаказовКлиентов", "3=3");
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	СостоянияЗаказовКлиентов.Заказ КАК ИсходныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|ГДЕ
	|	СостоянияЗаказовКлиентов.Состояние = &СостоянияЗаказовКлиентов
	|	И СостоянияЗаказовКлиентов.Заказ В
	|			(ВЫБРАТЬ
	|				ВТ_Документы.ИсходныйДокумент КАК ИсходныйДокумент
	|			ИЗ
	|				ВТ_Документы КАК ВТ_Документы)";
	
КонецПроцедуры
Функция ЭтоКонфигурацияДляУзбекистана() Экспорт
	
	ЭтоКонфигурацияДляУзбекистана = Ложь;
	
	Попытка
		
		Если Метаданные.Имя = "УправлениеТорговлейДляУзбекистана" Тогда
			ЭтоКонфигурацияДляУзбекистана = Истина;
		КонецЕсли;
		
	Исключение
		ДатаМобайл_ОбщийМодуль.ОбработатьИсключение(0, "ЭтоКонфигурацияДляУзбекистана", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ЭтоКонфигурацияДляУзбекистана;	
	
КонецФункции
Процедура СообщитьПользователю(Текст) Экспорт 
	
	Попытка
		Модуль_ОбщегоНазначенияКлиентСервер = ОбщийМодуль("ОбщегоНазначенияКлиентСервер");
		Модуль_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	Исключение		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Текст;
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

//ТСД И ГРУППОВАЯ РАБОТА
Процедура ЛогированиеДействий(Операция, УзелПО, СсылкаНаДок, СтрокаДокумента, UserName, Уникальность) Экспорт
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("Дата", ТекущаяДата());	
	СтруктураСтроки.Вставить("Операция", Операция);	
	СтруктураСтроки.Вставить("ТСД", УзелПО);
	СтруктураСтроки.Вставить("ДокументТСД", СсылкаНаДок);
	СтруктураСтроки.Вставить("Уникальность", Уникальность);	
	
	//ЗАПИСЬ ДАННЫХ
	Запись = РегистрыСведений.ДатаМобайл_Логирование.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, СтруктураСтроки);
	Запись.Записать(Истина);		
	
КонецПроцедуры
Функция ИспользоватьЛогирование() Экспорт
		
	Возврат Ложь;
	
КонецФункции 
Процедура ЛогированиеДействий_ОПТ(Операция, УзелПО, СсылкаНаДок, СтрокаДокумента, UserName, Отказ, СтрокВДокументе = 0) Экспорт
	
	СтруктураСтроки = Новый Структура;
	Попытка СтруктураСтроки.Вставить("Дата", ТекущаяДата()); Исключение КонецПопытки;	
	Попытка СтруктураСтроки.Вставить("Операция", Операция); Исключение КонецПопытки;	
	Попытка СтруктураСтроки.Вставить("ТСД", УзелПО); Исключение КонецПопытки;
	Попытка СтруктураСтроки.Вставить("ДокументТСД", СсылкаНаДок); Исключение КонецПопытки;
	Попытка СтруктураСтроки.Вставить("ИдентификаторСтроки", Число(СтрокаДокумента.DMRowID)); Исключение КонецПопытки;
	Попытка СтруктураСтроки.Вставить("Уникальность", Новый УникальныйИдентификатор); Исключение КонецПопытки;
	
	Попытка СтруктураСтроки.Вставить("КодТовара", СтрокаДокумента.DMArtID); Исключение КонецПопытки;
	Попытка СтруктураСтроки.Вставить("КодТовараЕГАИС", СтрокаДокумента.DMArtEgaisID); Исключение КонецПопытки;
	Попытка СтруктураСтроки.Вставить("НазваниеТовара", СтрокаДокумента.DMArtName); Исключение КонецПопытки;
	Попытка СтруктураСтроки.Вставить("Штрихкод",СтрокаДокумента.DMBarcode); Исключение КонецПопытки;
	Попытка СтруктураСтроки.Вставить("Пользователь", UserName); Исключение КонецПопытки;
	Попытка СтруктураСтроки.Вставить("Количество", СтрокаДокумента.DMQuant); Исключение КонецПопытки;
	Попытка СтруктураСтроки.Вставить("ДатаТСД", СтрокаДокумента.DMDate); Исключение КонецПопытки;	
	Попытка СтруктураСтроки.Вставить("ОтказЗаписи", Отказ); Исключение КонецПопытки;
	
	Попытка СтруктураСтроки.Вставить("УпаковочныйЛист", СтрокаДокумента.DMPackID); Исключение КонецПопытки;
	Попытка СтруктураСтроки.Вставить("Короб", СтрокаДокумента.DMBoxPackID); Исключение КонецПопытки;
	Попытка СтруктураСтроки.Вставить("Короб", СтрокаДокумента.DMPalletID); Исключение КонецПопытки;
	Попытка СтруктураСтроки.Вставить("ЕгаисПолныйКод", СтрокаДокумента.DMPDFBarcode); Исключение КонецПопытки;	
	Попытка СтруктураСтроки.Вставить("СтрокВДокументе", СтрокВДокументе); Исключение КонецПопытки;
	
	//ЗАПИСЬ ДАННЫХ
	Запись = РегистрыСведений.ДатаМобайл_Логирование.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, СтруктураСтроки);
	Запись.Записать(Истина);		
	
КонецПроцедуры
Процедура ЗаписьФлаговОбменаТСД(УзелПО, ТипФлага, Значение) Экспорт
	
	МенеджерЗаписиТСД = РегистрыСведений.ДатаМобайл_ФлагиДляОбменаТСД.СоздатьМенеджерЗаписи();
	МенеджерЗаписиТСД.ТСД = УзелПО;
	МенеджерЗаписиТСД.ТипФлага = ТипФлага;
	МенеджерЗаписиТСД.Значение = Значение;
	МенеджерЗаписиТСД.Записать(Истина);
	
КонецПроцедуры
Функция ЧтениеФлаговОбменаТСД(УзелПО, ТипФлага) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("УзелПО", УзелПО);
	Запрос.УстановитьПараметр("ТипФлага", ТипФлага);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ДатаМобайл_ФлагиДляОбменаТСД.Значение
	|ИЗ
	|	РегистрСведений.ДатаМобайл_ФлагиДляОбменаТСД КАК ДатаМобайл_ФлагиДляОбменаТСД
	|ГДЕ
	|	ДатаМобайл_ФлагиДляОбменаТСД.ТСД = &УзелПО
	|	И ДатаМобайл_ФлагиДляОбменаТСД.ТипФлага = &ТипФлага";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Возврат ВыборкаЗапроса.Значение;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
Процедура ОчиститьЗаписиГрупповогоДокумента(ДокументТСД) Экспорт
	
	СтруктураОтбора = Новый Структура("ДокументТСД", ДокументТСД);
	
	ВыборкаЗаписейСтрок = РегистрыСведений.ДатаМобайл_СтрокиГрупповыхДокументов.Выбрать(СтруктураОтбора);
	Пока ВыборкаЗаписейСтрок.Следующий() Цикл
		ВыборкаЗаписейСтрок.ПолучитьМенеджерЗаписи().Удалить();
	КонецЦикла;	
	
КонецПроцедуры
Процедура ОчиститьЗаписиТСДГрупповогоДокумента(ДокументТСД, ТСД = Неопределено) Экспорт
	
	СтруктураОтбора = Новый Структура("ДокументТСД", ДокументТСД);
	
	ВыборкаЗаписейТСД = РегистрыСведений.ДатаМобайл_ТСДГрупповыхДокументов.Выбрать(СтруктураОтбора);
	Пока ВыборкаЗаписейТСД.Следующий() Цикл
		Если ТСД = Неопределено Тогда
			ВыборкаЗаписейТСД.ПолучитьМенеджерЗаписи().Удалить();
		Иначе
			Если ВыборкаЗаписейТСД.ПолучитьМенеджерЗаписи().ТСД = ТСД Тогда
				ВыборкаЗаписейТСД.ПолучитьМенеджерЗаписи().Удалить();
			КонецЕсли;            
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументТСД.Шаблон.РаспределениеТоваров = 2 Тогда
		Для каждого СтрокаДочернийДокумент Из ДокументТСД.СписокДокументов Цикл
			Если ЗначениеЗаполнено(СтрокаДочернийДокумент.ДокументТСД) Тогда
				ОчиститьЗаписиТСДГрупповогоДокумента(СтрокаДочернийДокумент.ДокументТСД);				
			КонецЕсли;	
		КонецЦикла;			
	КонецЕсли;
	
КонецПроцедуры
Процедура СоздатьЗаписиГрупповогоДокумента(СтруктураСтроки) Экспорт
	
	//ЗАПИСЬ ДАННЫХ
	Запись = РегистрыСведений.ДатаМобайл_СтрокиГрупповыхДокументов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, СтруктураСтроки);
	Запись.ДатаЗаписи = ТекущаяДата();
	Запись.Записать(Истина);	
	
КонецПроцедуры
Функция ПолучитьДатуГрупповогоДокумента(КодУзла, ДокументТСД, ДатаПолучения) Экспорт
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КодУзла", КодУзла);
	Запрос.УстановитьПараметр("ДокументТСД", ДокументТСД);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ДатаМобайл_ТСДГрупповыхДокументов.ДатаНачалаСбора,
	|	ДатаМобайл_ТСДГрупповыхДокументов.ДатаЗавершенияСбора
	|ИЗ
	|	РегистрСведений.ДатаМобайл_ТСДГрупповыхДокументов КАК ДатаМобайл_ТСДГрупповыхДокументов
	|ГДЕ
	|	ДатаМобайл_ТСДГрупповыхДокументов.ТСД.Код = &КодУзла
	|	И ДатаМобайл_ТСДГрупповыхДокументов.ДокументТСД = &ДокументТСД";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		Попытка 
			Возврат ВыборкаЗапроса[ДатаПолучения];	
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЦикла;
	
КонецФункции
Процедура СоздатьНачальнуюЗаписьТСДГрупповыхДокументов(КодУзла, ДокументТСД, Пользователь) Экспорт
	
	Если ДокументТСД.СписокТерминалов.Количество() > 0 Тогда			
		Для каждого стр Из ДокументТСД.СписокТерминалов Цикл
			МенеджерЗаписиТСД = РегистрыСведений.ДатаМобайл_ТСДГрупповыхДокументов.СоздатьМенеджерЗаписи();
			МенеджерЗаписиТСД.ТСД = стр.ТСД;
			МенеджерЗаписиТСД.ДокументТСД = ДокументТСД;
			МенеджерЗаписиТСД.ДатаНачалаСбора = ТекущаяДата();
			МенеджерЗаписиТСД.Пользователь = Пользователь;
			МенеджерЗаписиТСД.Записать(Истина);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписиТСД = РегистрыСведений.ДатаМобайл_ТСДГрупповыхДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписиТСД.ТСД = ПланыОбмена.ДатаМобайл_СписокТСД.НайтиПоКоду(КодУзла);
	МенеджерЗаписиТСД.ДокументТСД = ДокументТСД;
	МенеджерЗаписиТСД.ДатаНачалаСбора = ТекущаяДата();
	МенеджерЗаписиТСД.Пользователь = Пользователь;
	МенеджерЗаписиТСД.Записать(Истина);
	
КонецПроцедуры
Функция ПроверитьЗавершенностьГрупповогоДокумента(ДокументТСД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументТСД", ДокументТСД);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатаМобайл_ТСДГрупповыхДокументов.ДатаЗавершенияСбора
	|ИЗ
	|	РегистрСведений.ДатаМобайл_ТСДГрупповыхДокументов КАК ДатаМобайл_ТСДГрупповыхДокументов
	|ГДЕ
	|	ДатаМобайл_ТСДГрупповыхДокументов.ДокументТСД = &ДокументТСД
	|	И ДатаМобайл_ТСДГрупповыхДокументов.ДатаЗавершенияСбора = ДАТАВРЕМЯ(1, 1, 1)";
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции
Процедура ОбновитьЗаписьТСДГрупповогоДокумента(КодУзла, ДокументТСД, ДатаЗавершенияСбора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументТСД", ДокументТСД);
	Запрос.Текст = "ВЫБРАТЬ
	|	ДатаМобайл_ТСДГрупповыхДокументов.ТСД,
	|	ДатаМобайл_ТСДГрупповыхДокументов.ДокументТСД,
	|	ДатаМобайл_ТСДГрупповыхДокументов.ДатаНачалаСбора,
	|	ДатаМобайл_ТСДГрупповыхДокументов.Пользователь
	|ИЗ
	|	РегистрСведений.ДатаМобайл_ТСДГрупповыхДокументов КАК ДатаМобайл_ТСДГрупповыхДокументов
	|ГДЕ
	|	ДатаМобайл_ТСДГрупповыхДокументов.ТСД = &ТСД И
	|	ДатаМобайл_ТСДГрупповыхДокументов.ДокументТСД = &ДокументТСД";
	
	Если ЗначениеЗаполнено(КодУзла) Тогда
		Запрос.УстановитьПараметр("ТСД", ПланыОбмена.ДатаМобайл_СписокТСД.НайтиПоКоду(КодУзла));
	Иначе
		//Разблокировка документа из АРМ
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ДатаМобайл_ТСДГрупповыхДокументов.ТСД = &ТСД И","");	
	КонецЕсли; 	
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ДатаМобайл_ТСДГрупповыхДокументов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.ДатаЗавершенияСбора = ДатаЗавершенияСбора;
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;		
	
КонецПроцедуры
Функция ЗаписьЗначенийУзлаОбменаТСД(УзелПО, ТипЗн, Значение) Экспорт
	
	МенеджерЗаписиТСД = РегистрыСведений.ДатаМобайл_ЗначенияУзлаОбменаТСД.СоздатьМенеджерЗаписи();
	МенеджерЗаписиТСД.ТСД         = УзелПО;
	МенеджерЗаписиТСД.ТипЗначения = ТипЗн;
	МенеджерЗаписиТСД.Значение    = Значение;
	
	Попытка
		МенеджерЗаписиТСД.Записать(Истина);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции
Функция ЧтениеЗначенийУзлаОбменаТСД(УзелПО, ТипЗн) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("УзелПО", УзелПО);
	Запрос.УстановитьПараметр("ТипЗн", ТипЗн);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ЗначенияУзлаОбменаТСД.Значение
	|ИЗ
	|	РегистрСведений.ДатаМобайл_ЗначенияУзлаОбменаТСД КАК ЗначенияУзлаОбменаТСД
	|ГДЕ
	|	ЗначенияУзлаОбменаТСД.ТСД = &УзелПО
	|	И ЗначенияУзлаОбменаТСД.ТипЗначения = &ТипЗн";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Возврат ВыборкаЗапроса.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//ДОПОЛНИТЕЛЬНЫЕ ФУНКЦИИ
Функция ПолучитьЯчейкуПоКодуИлиШтрихкоду(Штрихкод, СсылкаНаДок = Неопределено) Экспорт
	
	ТекущаяЯчейка = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	
	Попытка ТекущаяЯчейка = ПолучитьЯчейкуПоШтрихкоду(Штрихкод); Исключение КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ТекущаяЯчейка.Наименование) И Не ЗначениеЗаполнено(ТекущаяЯчейка.Код) Тогда
		Если СсылкаНаДок = Неопределено Тогда
			ТекущаяЯчейка = Справочники.СкладскиеЯчейки.НайтиПоКоду(Штрихкод);
		Иначе
			Если Не ЗначениеЗаполнено(СсылкаНаДок.Склад) Тогда
				ТекущаяЯчейка = Справочники.СкладскиеЯчейки.НайтиПоКоду(Штрихкод);
			Иначе
				ТекущаяЯчейка = Справочники.СкладскиеЯчейки.НайтиПоКоду(Штрихкод,,, СсылкаНаДок.Склад);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ТекущаяЯчейка;
		
КонецФункции	
Функция ПолучитьЯчейкуПоШтрихкоду(Штрихкод10) Экспорт
	
	Попытка
		Штрихкод16 = ПреобразоватьДесятичноеЧислоВШестнадцатиричнуюСистемуСчисления(Штрихкод10);
		
		Если СтрДлина(Штрихкод16) < 32 Тогда
			
			Пока СтрДлина(Штрихкод16) < 32 Цикл
				Штрихкод16 = Строка("0") + Штрихкод16;
			КонецЦикла;
			
		КонецЕсли;
		
		ГУИД = Сред(Штрихкод16, 1,  8)
		+ "-" + Сред(Штрихкод16, 9,  4)
		+ "-" + Сред(Штрихкод16, 13, 4)
		+ "-" + Сред(Штрихкод16, 17, 4)
		+ "-" + Сред(Штрихкод16, 21, 12);
	Исключение
		
		Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
		
	Конецпопытки;
	
	Попытка
		
		СсылкаСкладскиеЯчейки = Справочники.СкладскиеЯчейки.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));	
		
		Если СсылкаСкладскиеЯчейки.Код = "" Тогда
			Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
		Иначе
			Возврат СсылкаСкладскиеЯчейки;
		КонецЕсли;
		
	Исключение
		
		Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
		
	КонецпопыткИ;
	
КонецФункции
Функция ПреобразоватьДесятичноеЧислоВШестнадцатиричнуюСистемуСчисления(Знач ДесятичноеЧисло) Экспорт
	
	Результат = "";    
	Если ДесятичноеЧисло <> "" Тогда
		Пока Число(ДесятичноеЧисло) > 0 Цикл
			ОстатокОтДеления = ДесятичноеЧисло % 16;
			ДесятичноеЧисло  = (ДесятичноеЧисло - ОстатокОтДеления) / 16;
			Результат        = Сред("0123456789abcdef", ОстатокОтДеления + 1, 1) + Результат;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
Функция ЧистаяСтрока(Знач ГрязнаяСтрока) Экспорт
	
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, "'", "-");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, Символы.ВК, " ");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, Символы.ПС, "-");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, Символы.НПП, " ");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, ";", "");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, """", "''");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, "%", "");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, "&", "");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, "<", "[");
	ГрязнаяСтрока = СтрЗаменить(ГрязнаяСтрока, ">", "]");
	
	Возврат Грязнаястрока;
	
КонецФункции	
Функция ПолучитьСерию(ШтрихкодСерии) Экспорт
	
	Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	ЗапросСерий = Новый Запрос;
	ЗапросСерий.Текст = "ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Номер = &ШК";
	ЗапросСерий.УстановитьПараметр("ШК", ШтрихкодСерии);
	Выборка = ЗапросСерий.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл	
		Серия = Выборка.Ссылка;			
	КонецЦикла;
	
	Возврат Серия;
	
КонецФункции
Процедура ДатаМобайлСозданиеНоменклатурыОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения);
		Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(Источник, Источник.ВидНоменклатуры);
		Если Не ЗначениеЗаполнено(Источник.ЕдиницаИзмерения) Тогда
			Попытка
				Если Не ДанныеЗаполнения.ЭтоГруппа Тогда
					Источник.ЕдиницаИзмерения = ДанныеЗаполнения.ЕдиницаИзмерения;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Функция РазложитьСтрокуВМассивЧисловыхПодстрокДМ(Знач Строка, Знач Разделитель = ",") Экспорт
	
	Результат = Новый Массив;
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПустаяСтрока(Подстрока) Тогда
			Попытка Результат.Добавить(Число(Подстрока)); Исключение КонецПопытки;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПустаяСтрока(Строка) Тогда
		Попытка Результат.Добавить(Число(Строка)); Исключение КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
Функция DM_ПолучитьРазделительПути() Экспорт
	
	РазделительПути = "\";  //Windows
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ЭтоLinuxКлиент = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
	Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
	
	Если ЭтоLinuxКлиент Тогда
		РазделительПути = "/"; // Linux
	КонецЕсли;	
	
	Возврат РазделительПути;
	
КонецФункции
Функция ПолучитьСкладВведенныхЯчеек(ТабЧастьДок) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТЧ.ЯчейкаСсылка КАК ЯчейкаСсылка
	|ПОМЕСТИТЬ втТЧ
	|ИЗ
	|	&ТЧ КАК ТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Ячейки.Ссылка.Владелец) КАК Склад
	|ИЗ
	|	втТЧ КАК втТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК Ячейки
	|		ПО втТЧ.ЯчейкаСсылка = Ячейки.Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТЧ", ТабЧастьДок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Склад;
	Иначе
		Возврат Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции
Функция ПолучитьСкладВведенныхЯчеекГрупповаяРабота(ДокТСД) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	МАКСИМУМ(Ячейки.Ссылка.Владелец) КАК Склад
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК СтрокиТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК Ячейки
	|		ПО СтрокиТЧ.ЯчейкаСсылка = Ячейки.Ссылка
	|ГДЕ
	|	СтрокиТЧ.ДокументТСД = &Док";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Док", ДокТСД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Склад;
	Иначе
		Возврат Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Функция удаляет регистрацию документа ТСД в текущем плане обмена
//
// Параметры:
//	ДокументТСД - элемент спр-ка ДатаМобайл_ДокументыТСД
//	ТолькоЗакрытые - булево - признак удаления регистрации только у закрытых документов
//
Функция УдалитьРегистрациюОбъекта(ДокументТСД, ТолькоЗакрытые = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументТСД.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТолькоЗакрытые И Не ЗначениеЗаполнено(ДокументТСД.ДатаЗавершения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ПланыОбмена.УдалитьРегистрациюИзменений(ДокументТСД.ТСД, ДокументТСД.Ссылка);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

//ЕГАИС
Функция ПолучитьНоменклатуруПоЕГАИС(НоменклатураЕГАИС) Экспорт    	
	
	Если Не ЕстьАСТ() Тогда		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Номенклатура
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|ГДЕ
		|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = &НоменклатураЕГАИС
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция";
		Запрос.УстановитьПараметр("НоменклатураЕГАИС", НоменклатураЕГАИС);
		ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
		Если ТаблицаСоответствий.Количество() > 0 Тогда
			Возврат ТаблицаСоответствий[0].Номенклатура;
		Иначе
			Возврат Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
	Иначе		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Номенклатура
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|ГДЕ
		|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = &НоменклатураЕГАИС
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция";
		
		// аст
		астЗаменитьРегистрНоменклатурыЕГАИС(Запрос.Текст);	
		
		Запрос.УстановитьПараметр("НоменклатураЕГАИС", НоменклатураЕГАИС);
		ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
		Если ТаблицаСоответствий.Количество() > 0 Тогда
			Возврат ТаблицаСоответствий[0].Номенклатура;
		Иначе
			Возврат Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;			
	КонецЕсли;
	
КонецФункции
Функция ПолучитьЕГАИСПоНоменклатуре(Номенклатура) Экспорт    	
	
	Если Не ЕстьАСТ() Тогда		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция) КАК АлкогольнаяПродукция
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|ГДЕ
		|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура
		|СГРУППИРОВАТЬ ПО
		|	СоответствиеНоменклатурыЕГАИС.Номенклатура";
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
		Если ТаблицаСоответствий.Количество() > 0 Тогда
			Возврат ТаблицаСоответствий[0].АлкогольнаяПродукция;
		Иначе
			Возврат Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка();
		КонецЕсли;		
	Иначе				
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция) КАК АлкогольнаяПродукция
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|ГДЕ
		|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура
		|СГРУППИРОВАТЬ ПО
		|	СоответствиеНоменклатурыЕГАИС.Номенклатура";
		// аст
		астЗаменитьРегистрНоменклатурыЕГАИС(Запрос.Текст);
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
		Если ТаблицаСоответствий.Количество() > 0 Тогда
			Возврат ТаблицаСоответствий[0].АлкогольнаяПродукция;
		Иначе
			Возврат Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка();
		КонецЕсли;		
	КонецЕсли;
	
КонецФункции
Функция ПолучитьНоменклатуруПоМарке(СтруктураСтроки) Экспорт
	
	МаркаСсылка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода",СтруктураСтроки.ЕгаисПолныйКод);
	Если ЗначениеЗаполнено(МаркаСсылка) Тогда
		СтруктураСтроки.Номенклатура = МаркаСсылка.Номенклатура;
		СтруктураСтроки.ХарактеристикаНоменклатуры = МаркаСсылка.Характеристика;
		СтруктураСтроки.СерияСсылка = МаркаСсылка.Серия;
	КонецЕсли;
	
КонецФункции
Функция ПолучитьМаркиВходящейТТН_ЕГАИС(ДокументВыгрузки) Экспорт
		
	Если Не ЕстьАСТ() Тогда	
		ТЗМарок = Новый ТаблицаЗначений;
		ТЗМарок.Колонки.Добавить("АлкогольнаяПродукция");
		ТЗМарок.Колонки.Добавить("Марка");
		ТЗМарок.Колонки.Добавить("Короб");
		ТЗМарок.Колонки.Добавить("Палета");
		ТЗМарок.Колонки.Добавить("Номенклатура");
		ТЗМарок.Колонки.Добавить("Характеристика");
		ТЗМарок.Колонки.Добавить("Серия");
		ТЗМарок.Колонки.Добавить("Справка2");
		ТЗМарок.Колонки.Добавить("ТипУпаковки");
						
		ДанныеПроверяемогоДокумента = Документы.ТТНВходящаяЕГАИС.ВходящееДеревоУпаковок(ДокументВыгрузки);
		
		//ПЕРВЫЙ УРОВЕНЬ
		ТекущаяПалета = "";
		ТекущийКороб = "";
		Для каждого СтрокаПоДаннымДокументаПервыйУровень Из ДанныеПроверяемогоДокумента.ДеревоУпаковок.Строки Цикл			
			Попытка 
				ИмяКолонкиШтрихкода = "ЗначениеШтрихкода";
				ТекущийШтрихкодПервыйУровень = СтрокаПоДаннымДокументаПервыйУровень[ИмяКолонкиШтрихкода];
			Исключение
				ИмяКолонкиШтрихкода = "Штрихкод";
				ТекущийШтрихкодПервыйУровень = СтрокаПоДаннымДокументаПервыйУровень[ИмяКолонкиШтрихкода];
			КонецПопытки;
			Если СтрДлина(ТекущийШтрихкодПервыйУровень) = 68 Или СтрДлина(ТекущийШтрихкодПервыйУровень) = 150 Тогда
				СтрокаМарки = ТЗМарок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаМарки, СтрокаПоДаннымДокументаПервыйУровень);
				СтрокаМарки.Марка = ТекущийШтрихкодПервыйУровень;
				СтрокаМарки.Короб = ТекущийКороб;
				СтрокаМарки.Палета = ТекущаяПалета;
			Иначе
				//ВТОРОЙ УРОВЕНЬ       
				ТекущаяПалета = "";
				ТекущийКороб = ТекущийШтрихкодПервыйУровень;
				
				Для каждого СтрокаПоДаннымДокументаВторойУровень Из СтрокаПоДаннымДокументаПервыйУровень.Строки Цикл					
					Попытка 
						ИмяКолонкиШтрихкода = "ЗначениеШтрихкода";
						ТекущийШтрихкодВторойУровень = СтрокаПоДаннымДокументаВторойУровень[ИмяКолонкиШтрихкода];
					Исключение
						ИмяКолонкиШтрихкода = "Штрихкод";
						ТекущийШтрихкодВторойУровень = СтрокаПоДаннымДокументаВторойУровень[ИмяКолонкиШтрихкода];
					КонецПопытки;
					
					Если СтрДлина(ТекущийШтрихкодВторойУровень) = 68 Или СтрДлина(ТекущийШтрихкодВторойУровень) = 150 Тогда
						СтрокаМарки = ТЗМарок.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаМарки, СтрокаПоДаннымДокументаВторойУровень);
						СтрокаМарки.Марка = ТекущийШтрихкодВторойУровень;
						СтрокаМарки.Короб = ТекущийКороб;
						СтрокаМарки.Палета = ТекущаяПалета;
					Иначе
						//ТРЕТИЙ УРОВЕНЬ
						ТекущаяПалета = ТекущийШтрихкодПервыйУровень;
						ТекущийКороб = ТекущийШтрихкодВторойУровень;	
						Для каждого СтрокаПоДаннымДокументаТретийУровень Из СтрокаПоДаннымДокументаВторойУровень.Строки Цикл							
							Попытка 
								ИмяКолонкиШтрихкода = "ЗначениеШтрихкода";
								ТекущийШтрихкодТретийУровень = СтрокаПоДаннымДокументаТретийУровень[ИмяКолонкиШтрихкода];
							Исключение
								ИмяКолонкиШтрихкода = "Штрихкод";
								ТекущийШтрихкодТретийУровень = СтрокаПоДаннымДокументаТретийУровень[ИмяКолонкиШтрихкода];
							КонецПопытки;
													
							Если СтрДлина(ТекущийШтрихкодТретийУровень) = 68 Или СтрДлина(ТекущийШтрихкодТретийУровень) = 150 Тогда
								СтрокаМарки = ТЗМарок.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаМарки, СтрокаПоДаннымДокументаТретийУровень);
								СтрокаМарки.Марка = ТекущийШтрихкодТретийУровень;
								СтрокаМарки.Короб = ТекущийКороб;
								СтрокаМарки.Палета = ТекущаяПалета;
							Иначе
								//ДАЛЕЕ ВЛОЖЕННОСТЬ НЕ УЧИТЫВАЕМ
								Продолжить;
							КонецЕсли;
						КонецЦикла;	
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
				
		Возврат ТЗМарок;		
	Иначе				
		ТЗМарок = Новый ТаблицаЗначений;
		ТЗМарок.Колонки.Добавить("АлкогольнаяПродукция");
		ТЗМарок.Колонки.Добавить("Марка");
		ТЗМарок.Колонки.Добавить("Короб");
		ТЗМарок.Колонки.Добавить("Палета");
		ТЗМарок.Колонки.Добавить("Номенклатура");
		ТЗМарок.Колонки.Добавить("Характеристика");
		ТЗМарок.Колонки.Добавить("Серия");
		ТЗМарок.Колонки.Добавить("Справка2");
		ТЗМарок.Колонки.Добавить("ТипУпаковки");
		
		// получим таблицу марок
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	астТоварноТранспортныеНакладныеИзЕГАИСМарки.Марка,
		|	астТоварноТранспортныеНакладныеИзЕГАИСМарки.СправкаБ,
		|	астТоварноТранспортныеНакладныеИзЕГАИСМарки.НомерСтроки,
		|	астТоварноТранспортныеНакладныеИзЕГАИСМарки.Марка.ГрупповаяТара КАК Упаковка,
		|	астТоварноТранспортныеНакладныеИзЕГАИСМарки.Марка.ГрупповаяТара.КодУпаковки КАК КодУпаковки
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Документ.астТоварноТранспортныеНакладныеИзЕГАИС.Марки КАК астТоварноТранспортныеНакладныеИзЕГАИСМарки
		|ГДЕ
		|	астТоварноТранспортныеНакладныеИзЕГАИСМарки.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Марка.Наименование КАК Марка,
		|	ВТ.Марка.НоменклатураЕГАИС КАК АлкогольнаяПродукция,
		|	ВТ.СправкаБ,
		|	ВТ.Упаковка,
		|	ЕСТЬNULL(ВТ.КодУпаковки, """") КАК Короб,
		|	МАКСИМУМ(ЕСТЬNULL(астГрупповаяТараЕГАИСУпаковки.Ссылка.КодУпаковки, """")) КАК Палета
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.астГрупповаяТараЕГАИС.Упаковки КАК астГрупповаяТараЕГАИСУпаковки
		|		ПО ВТ.Марка.ГрупповаяТара = астГрупповаяТараЕГАИСУпаковки.ГрупповаяТара
		|			И (ВТ.Марка.ГрупповаяТара <> ЗНАЧЕНИЕ(Документ.астГрупповаяТараЕГАИС.ПустаяСсылка))
		|			И (НЕ астГрупповаяТараЕГАИСУпаковки.Ссылка.ПометкаУдаления)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ.Марка,
		|	ВТ.СправкаБ,
		|	ВТ.Упаковка,
		|	ВТ.КодУпаковки,
		|	ВТ.НомерСтроки,
		|	ВТ.Марка.НоменклатураЕГАИС
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ.НомерСтроки";	
		
		Запрос.УстановитьПараметр("Ссылка", ДокументВыгрузки);
		
		Результат = Запрос.Выполнить();
		ВыборкаМарокТТН = Результат.Выбрать();
		
		Пока ВыборкаМарокТТН.Следующий() Цикл
			СтрокаМарки = ТЗМарок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМарки, ВыборкаМарокТТН);
			
			// данные по номенклатуре хранятся в товарах
			ПоискСтрокиТТН = ДокументВыгрузки.Товары.Найти(ВыборкаМарокТТН.СправкаБ, "ИдСправкиБ");
			Если ПоискСтрокиТТН <> Неопределено Тогда
				СтрокаМарки.Номенклатура = ПоискСтрокиТТН.Номенклатура;
				СтрокаМарки.Характеристика = ПоискСтрокиТТН.ХарактеристикаНоменклатуры;
				СтрокаМарки.Серия = ПоискСтрокиТТН.СерияНоменклатуры;
				СтрокаМарки.Справка2 = ПоискСтрокиТТН.ИдСправкиБ;
			КонецЕсли;
		КонецЦикла;	
		
		Возврат ТЗМарок;
	КонецЕсли;
	
КонецФункции
Функция СформироватьСписокНепроверяемыхМарокЕГАИС() Экспорт
	
	СписокМарок = Новый СписокЗначений();                                                                     
	
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("261")); //261 Сидр
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("262")); //262 Пуаре
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("263")); //263 Медовуха                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("500")); //500 Пиво с содержанием объемной доли этилового спирта свыше 0,5% и до 8,6% включительно                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("510")); //510 Пиво с содержанием объемной доли этилового спирта свыше 8,6%                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("520")); //520 Напитки, изготавливаемые на основе пива     
	
	Возврат СписокМарок;
	
КонецФункции	

//АСТ
Процедура астЗаменитьРегистрНоменклатурыЕГАИС(ТекстЗапроса) Экспорт
	
	Если ЕстьАСТ() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СоответствиеНоменклатурыЕГАИС.Номенклатура", "СоответствиеНоменклатурыЕГАИС.Номенклатура1С");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция", "СоответствиеНоменклатурыЕГАИС.НоменклатураЕГАИС");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СоответствиеНоменклатурыЕГАИС", "астСоответствиеНоменклатурыИНоменклатурыЕГАИС");
	КонецЕсли;	
	
КонецПроцедуры	
Функция ПолучитьСправкиПоМарке(Знач мТранспортныйМодуль, Знач мШК) Экспорт
	
	СтруктураДанных = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	астПартииТоваровПоМаркамЕГАИСОстатки.ШтрихкодМарки,
	|	астПартииТоваровПоМаркамЕГАИСОстатки.КоличествоОстаток,
	|	астПартииТоваровПоМаркамЕГАИСОстатки.СправкаА,
	|	астПартииТоваровПоМаркамЕГАИСОстатки.СправкаБ
	|ИЗ
	|	РегистрНакопления.астПартииТоваровПоМаркамЕГАИС.Остатки(
	|			,
	|			ТранспортныйМодуль = &ТранспортныйМодуль
	|				И ШтрихкодМарки = &ШтрихкодМарки) КАК астПартииТоваровПоМаркамЕГАИСОстатки";
	
	Запрос.УстановитьПараметр("ТранспортныйМодуль", мТранспортныйМодуль);
	Запрос.УстановитьПараметр("ШтрихкодМарки", мШК);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НетОстатка = Ложь;
	Если Не Выборка.Следующий() Тогда
		НетОстатка = Истина;
		
		СтруктураДанных.Вставить("СправкаА", Справочники.астСправкиАиБ_ЕГАИС.ПустаяСсылка());
		СтруктураДанных.Вставить("СправкаБ", Справочники.астСправкиАиБ_ЕГАИС.ПустаяСсылка());
	Иначе
		Если Выборка.КоличествоОстаток <= 0 Тогда
			НетОстатка = Истина;
		КонецЕсли;
		
		СтруктураДанных.Вставить("СправкаА", Выборка.СправкаА);
		СтруктураДанных.Вставить("СправкаБ", Выборка.СправкаБ);
	КонецЕсли;	
	
	СтруктураДанных.Вставить("НетОстатка", НетОстатка);
	
	Возврат СтруктураДанных;
	
КонецФункции
Функция ПолучитьТаблицуУпакованныхМарокАСТ(ИдентификаторУпаковки = "") Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("ИдентификаторУпаковки", ИдентификаторУпаковки);		
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|ВЫБОР 
	|	КОГДА ДокументастГрупповаяТараЕГАИС.ВидУпаковки = ЗНАЧЕНИЕ (Перечисление.астВидыУпаковокЕГАИС.Короб) 
	|			ИЛИ ДокументастГрупповаяТараЕГАИС.ВидУпаковки = ЗНАЧЕНИЕ (Перечисление.астВидыУпаковокЕГАИС.СборныйКороб) 
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЭтоКороб
	|ИЗ 
	|Документ.астГрупповаяТараЕГАИС КАК ДокументастГрупповаяТараЕГАИС
	|ГДЕ 
	|ДокументастГрупповаяТараЕГАИС.КодУпаковки = &ИдентификаторУпаковки"; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ЭтоКороб Тогда
			
			Запрос = Новый Запрос;	
			Запрос.УстановитьПараметр("ИдентификаторУпаковки", ИдентификаторУпаковки);
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|ДокументастГрупповаяТараЕГАИС.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ДокументУпаковки
			|ИЗ 
			|Документ.астГрупповаяТараЕГАИС КАК ДокументастГрупповаяТараЕГАИС
			|ГДЕ 
			|ДокументастГрупповаяТараЕГАИС.КодУпаковки = &ИдентификаторУпаковки 
			|;
			|ВЫБРАТЬ 
			|ДокументастГрупповаяТараЕГАИСМарки.Марка КАК Ссылка,
			|ДокументастГрупповаяТараЕГАИСМарки.Марка.Наименование КАК Марка,
			|ДокументастГрупповаяТараЕГАИСМарки.Марка.СправкаА КАК СправкаА,
			|ДокументастГрупповаяТараЕГАИСМарки.Марка.СправкаБ КАК СправкаБ,
			|ДокументастГрупповаяТараЕГАИСМарки.Марка.НоменклатураЕГАИС КАК АлкогольнаяПродукция
			|ИЗ
			|ДокументУпаковки КАК ДокументУпаковки
			|ЛЕВОЕ СОЕДИНЕНИЕ Документ.астГрупповаяТараЕГАИС.Марки КАК ДокументастГрупповаяТараЕГАИСМарки
			|ПО ДокументУпаковки.Ссылка = ДокументастГрупповаяТараЕГАИСМарки.Ссылка
			|ГДЕ
			|ЕСТЬNULL(ДокументастГрупповаяТараЕГАИСМарки.Марка.НоменклатураЕГАИС, ЗНАЧЕНИЕ(Справочник.астНоменклатураЕГАИС.ПустаяСсылка))<> ЗНАЧЕНИЕ(Справочник.астНоменклатураЕГАИС.ПустаяСсылка)";			
			
			Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
			
		Иначе //Палета
			
			Запрос = Новый Запрос;	
			Запрос.УстановитьПараметр("ИдентификаторУпаковки", ИдентификаторУпаковки);
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|ДокументастГрупповаяТараЕГАИС.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ДокументУпаковки
			|ИЗ 
			|Документ.астГрупповаяТараЕГАИС КАК ДокументастГрупповаяТараЕГАИС
			|ГДЕ 
			|ДокументастГрупповаяТараЕГАИС.КодУпаковки = &ИдентификаторУпаковки 
			|;
			|ВЫБРАТЬ
			|ДокументастГрупповаяТараЕГАИСУпаковки.ГрупповаяТара КАК Ссылка
			|ПОМЕСТИТЬ ДокументыКоробов
			|ИЗ 
			|ДокументУпаковки КАК ДокументУпаковки
			|ЛЕВОЕ СОЕДИНЕНИЕ Документ.астГрупповаяТараЕГАИС.Упаковки КАК ДокументастГрупповаяТараЕГАИСУпаковки
			|ПО ДокументУпаковки.Ссылка = ДокументастГрупповаяТараЕГАИСУпаковки.Ссылка
			|;
			|ВЫБРАТЬ 
			|ДокументастГрупповаяТараЕГАИСМарки.Марка КАК Ссылка,
			|ДокументастГрупповаяТараЕГАИСМарки.Марка.Наименование КАК Марка,
			|ДокументастГрупповаяТараЕГАИСМарки.Марка.СправкаА КАК СправкаА,
			|ДокументастГрупповаяТараЕГАИСМарки.Марка.СправкаБ КАК СправкаБ,
			|ДокументастГрупповаяТараЕГАИСМарки.Марка.НоменклатураЕГАИС КАК АлкогольнаяПродукция
			|ИЗ
			|ДокументыКоробов КАК ДокументыКоробов
			|ЛЕВОЕ СОЕДИНЕНИЕ Документ.астГрупповаяТараЕГАИС.Марки КАК ДокументастГрупповаяТараЕГАИСМарки
			|ПО ДокументыКоробов.Ссылка = ДокументастГрупповаяТараЕГАИСМарки.Ссылка
			|ГДЕ
			|ЕСТЬNULL(ДокументастГрупповаяТараЕГАИСМарки.Марка.НоменклатураЕГАИС, ЗНАЧЕНИЕ(Справочник.астНоменклатураЕГАИС.ПустаяСсылка))<> ЗНАЧЕНИЕ(Справочник.астНоменклатураЕГАИС.ПустаяСсылка)"; 
			
			Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
			
		КонецЕсли;	
	Иначе
		
		Возврат Новый ТаблицаЗначений;
		
	КонецЕсли;
	
КонецФункции
Функция ПолучитьТаблицуУпакованногоТовараАСТ(ИдентификаторУпаковки = "") Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("ИдентификаторУпаковки", ИдентификаторУпаковки);		
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|ВЫБОР 
	|	КОГДА ДокументастГрупповаяТараЕГАИС.ВидУпаковки = ЗНАЧЕНИЕ (Перечисление.астВидыУпаковокЕГАИС.Короб) 
	|			ИЛИ ДокументастГрупповаяТараЕГАИС.ВидУпаковки = ЗНАЧЕНИЕ (Перечисление.астВидыУпаковокЕГАИС.СборныйКороб) 
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЭтоКороб
	|ИЗ 
	|Документ.астГрупповаяТараЕГАИС КАК ДокументастГрупповаяТараЕГАИС
	|ГДЕ 
	|ДокументастГрупповаяТараЕГАИС.КодУпаковки = &ИдентификаторУпаковки"; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ЭтоКороб Тогда
			
			Запрос = Новый Запрос;	
			Запрос.УстановитьПараметр("ИдентификаторУпаковки", ИдентификаторУпаковки);
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|ДокументастГрупповаяТараЕГАИС.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ДокументУпаковки
			|ИЗ 
			|Документ.астГрупповаяТараЕГАИС КАК ДокументастГрупповаяТараЕГАИС
			|ГДЕ 
			|ДокументастГрупповаяТараЕГАИС.КодУпаковки = &ИдентификаторУпаковки 
			|;
			|ВЫБРАТЬ 
			|ДокументастГрупповаяТараЕГАИСМарки.Марка КАК Ссылка,
			|ДокументастГрупповаяТараЕГАИСМарки.Марка.Наименование КАК Марка,
			|ДокументастГрупповаяТараЕГАИСМарки.Марка.СправкаА КАК СправкаА,
			|ДокументастГрупповаяТараЕГАИСМарки.Марка.СправкаБ КАК СправкаБ,
			|ДокументастГрупповаяТараЕГАИСМарки.Марка.НоменклатураЕГАИС КАК АлкогольнаяПродукция,
			|1 КАК Количество
			|ПОМЕСТИТЬ ОбщиеДанные
			|ИЗ
			|ДокументУпаковки КАК ДокументУпаковки
			|ЛЕВОЕ СОЕДИНЕНИЕ Документ.астГрупповаяТараЕГАИС.Марки КАК ДокументастГрупповаяТараЕГАИСМарки
			|ПО ДокументУпаковки.Ссылка = ДокументастГрупповаяТараЕГАИСМарки.Ссылка
			|ГДЕ
			|ЕСТЬNULL(ДокументастГрупповаяТараЕГАИСМарки.Марка.НоменклатураЕГАИС, ЗНАЧЕНИЕ(Справочник.астНоменклатураЕГАИС.ПустаяСсылка))<> ЗНАЧЕНИЕ(Справочник.астНоменклатураЕГАИС.ПустаяСсылка)
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбщиеДанные.АлкогольнаяПродукция,
			|	СУММА(ОбщиеДанные.Количество) КАК Количество
			|ИЗ
			|	ОбщиеДанные КАК ОбщиеДанные
			|СГРУППИРОВАТЬ ПО
			|	ОбщиеДанные.АлкогольнаяПродукция";
									
			Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
			
		Иначе //Палета
			
			Запрос = Новый Запрос;	
			Запрос.УстановитьПараметр("ИдентификаторУпаковки", ИдентификаторУпаковки);
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|ДокументастГрупповаяТараЕГАИС.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ДокументУпаковки
			|ИЗ 
			|Документ.астГрупповаяТараЕГАИС КАК ДокументастГрупповаяТараЕГАИС
			|ГДЕ 
			|ДокументастГрупповаяТараЕГАИС.КодУпаковки = &ИдентификаторУпаковки 
			|;
			|ВЫБРАТЬ
			|ДокументастГрупповаяТараЕГАИСУпаковки.ГрупповаяТара КАК Ссылка
			|ПОМЕСТИТЬ ДокументыКоробов
			|ИЗ 
			|ДокументУпаковки КАК ДокументУпаковки
			|ЛЕВОЕ СОЕДИНЕНИЕ Документ.астГрупповаяТараЕГАИС.Упаковки КАК ДокументастГрупповаяТараЕГАИСУпаковки
			|ПО ДокументУпаковки.Ссылка = ДокументастГрупповаяТараЕГАИСУпаковки.Ссылка
			|;
			|ВЫБРАТЬ 
			|ДокументастГрупповаяТараЕГАИСМарки.Марка КАК Ссылка,
			|ДокументастГрупповаяТараЕГАИСМарки.Марка.Наименование КАК Марка,
			|ДокументастГрупповаяТараЕГАИСМарки.Марка.СправкаА КАК СправкаА,
			|ДокументастГрупповаяТараЕГАИСМарки.Марка.СправкаБ КАК СправкаБ,
			|ДокументастГрупповаяТараЕГАИСМарки.Марка.НоменклатураЕГАИС КАК АлкогольнаяПродукция,
			|1 КАК Количество
			|ПОМЕСТИТЬ ОбщиеДанные
			|ИЗ
			|ДокументыКоробов КАК ДокументыКоробов
			|ЛЕВОЕ СОЕДИНЕНИЕ Документ.астГрупповаяТараЕГАИС.Марки КАК ДокументастГрупповаяТараЕГАИСМарки
			|ПО ДокументыКоробов.Ссылка = ДокументастГрупповаяТараЕГАИСМарки.Ссылка
			|ГДЕ
			|ЕСТЬNULL(ДокументастГрупповаяТараЕГАИСМарки.Марка.НоменклатураЕГАИС, ЗНАЧЕНИЕ(Справочник.астНоменклатураЕГАИС.ПустаяСсылка))<> ЗНАЧЕНИЕ(Справочник.астНоменклатураЕГАИС.ПустаяСсылка)
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбщиеДанные.АлкогольнаяПродукция,
			|	СУММА(ОбщиеДанные.Количество) КАК Количество
			|ИЗ
			|	ОбщиеДанные КАК ОбщиеДанные
			|СГРУППИРОВАТЬ ПО
			|	ОбщиеДанные.АлкогольнаяПродукция";
						
			Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
			
		КонецЕсли;	
	Иначе		
		Возврат Новый ТаблицаЗначений;		
	КонецЕсли;
	
КонецФункции

//SSCC
Функция ПолучитьНовыйUPL() Экспорт
	
	Запрос = Новый Запрос;	
	ТекстЗапроса = "ВЫБРАТЬ   
	| ЕстьNULL(Максимум(Коды.ВнутреннийНомер),0) КАК Номер
	| ИЗ
	| Документ.ДатаМобайл_УпаковочныйЛист КАК Коды
	|ГДЕ
	| Коды.ВнутреннийНомер<> """"
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		НомерUPL = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		НомерUPL = Выборка.Номер;
	КонецЕсли; 	
	
	НомерUPL = НомерUPL + 1 ;
	Если НомерUPL < 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НомерUPL;
	
КонецФункции
Функция МаксимальныйSSCC() Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ   
	| ЕстьNULL(Максимум(Коды.IDSSCC),0) КАК IDSSCC
	|ИЗ
	| Документ.ДатаМобайл_УпаковочныйЛист КАК Коды
	|ГДЕ
	| Коды.IDSSCC<> """"
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат  0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДелениеНаОснову = (Выборка.IDSSCC + 1) / 10000000;
		Если (Цел(ДелениеНаОснову) = ДелениеНаОснову) И Цел(ДелениеНаОснову) > 0 Тогда  //избежать нулевых SSCC 
			Возврат Выборка.IDSSCC + 1; 
		Иначе
			Возврат Выборка.IDSSCC;
		КонецЕсли; 
	КонецЕсли; 	
	
КонецФункции
Функция КонтрольноеЧислоSSCC(СтрБазаКода) Экспорт
	
	Сумма = 0;
	
	Для НомПоз = 1 По СтрДлина(СтрБазаКода) Цикл
		
		Симв = Сред(СтрБазаКода, НомПоз, 1); 
		
		ЧислСимв = 0;
		Попытка
			ЧислСимв = Число(Симв);
		Исключение
			Возврат Неопределено;
		КонецПопытки; 
		
		Если НомПоз / 2 = Цел(НомПоз / 2) Тогда // чет
			Сумма = Сумма + ЧислСимв;
		Иначе  // нечет
			Сумма = Сумма + ЧислСимв * 3;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Цел10  =  Цел(Сумма / 10) * 10;
	Если Цел10 < Сумма Тогда
		БольшееКратноеДесяти = Цел10 + 10;
	Иначе
		БольшееКратноеДесяти = Цел10;		
	КонецЕсли; 
	КЧ = БольшееКратноеДесяти - Сумма;
	
	Если (КЧ > 9) Или (КЧ < 0) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат СокрЛП(КЧ);
	
КонецФункции
Функция ПолучитьНовыйSSCC(Префикс) Экспорт
	
	НовыйНомер = МаксимальныйSSCC() + 1 ;
	Если НовыйНомер < 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		ЧислПрефикс =  Число(Префикс);
	Исключение
		Возврат Неопределено;
	КонецПопытки; 
	СтрПрефикс = Формат(ЧислПрефикс, "ЧЦ=9; ЧДЦ=; ЧВН=; ЧГ=0");
	СтрНовыйНомер =  Формат(НовыйНомер, "ЧЦ=8; ЧДЦ=; ЧВН=; ЧГ=0");
	ЦифраРасш = Лев(СтрНовыйНомер, 1);
	Остальное = Прав(СтрНовыйНомер, 7);
	СтрБазаКода = ЦифраРасш + СтрПрефикс + Остальное;
	КС = КонтрольноеЧислоSSCC(СтрБазаКода);
	Если КС = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Результат = Новый Структура("SSCC,IDSSCC");
	Результат.SSCC = "00" + СтрБазаКода + КС;
	Результат.IDSSCC = НовыйНомер;
	
	Возврат Результат;
	
КонецФункции
Функция ПолучитьКодSSCC(Префикс, УпаковочныйЛист, ТЗ) Экспорт
	
	Если Не ЗначениеЗаполнено(Префикс) Тогда
		Возврат Неопределено;
	КонецЕсли; 
		
	НачатьТранзакцию();
	НовыйSSCC = ПолучитьНовыйSSCC(Префикс);
	
	Если НовыйSSCC  = Неопределено Тогда	
		ОтменитьТранзакцию();
		Возврат Неопределено;	
	КонецЕсли; 
	
	НоваяЗапись = УпаковочныйЛист.ПолучитьОбъект();
	НоваяЗапись.IDSSCC = НовыйSSCC.IDSSCC;
	НоваяЗапись.ВнешнийНомер = НовыйSSCC.SSCC;
	
	Для каждого CтрокаCборки Из ТЗ Цикл
		Если CтрокаCборки.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НоваяЗапись.Товары.Добавить();        
		НоваяСтрока.Штрихкод = CтрокаCборки.Штрихкод;
		НоваяСтрока.Номенклатура = CтрокаCборки.Номенклатура;
		НоваяСтрока.Количество  = CтрокаCборки.Количество;
		НоваяСтрока.ЕГАИС_Номенклатура = CтрокаCборки.НоменклатураЕГАИС;
		НоваяСтрока.Марка = CтрокаCборки.ЕгаисПолныйКод;
		НоваяСтрока.Короб = CтрокаCборки.Короб;
	КонецЦикла;	
		
	Попытка
		НоваяЗапись.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки; 
	
	ЗафиксироватьТранзакцию();
	
	Возврат НовыйSSCC.SSCC;
	
КонецФункции 
Функция ПолучитьКодGS1(Штрихкод, УпаковочныйЛист, ТЗ) Экспорт
	
	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	НачатьТранзакцию();
	Если СтрДлина(Штрихкод) = 13 Тогда 
		Barcode =  "01" + "0" + Штрихкод + "UPL" + Формат(УпаковочныйЛист.ВнутреннийНомер, "ЧЦ=8; ЧДЦ=; ЧВН=; ЧГ=0");
	ИначеЕсли СтрДлина(Штрихкод) = 14 Тогда 
		Штрихкод = Сред(Штрихкод, 2, 12);
		Штрихкод = Штрихкод + КонтрольныйСимволEAN(Штрихкод, 13);
		Barcode =  "01" + "0" + Штрихкод + "UPL" + Формат(УпаковочныйЛист.ВнутреннийНомер, "ЧЦ=8; ЧДЦ=; ЧВН=; ЧГ=0");
	Иначе
		ОтменитьТранзакцию();
		Возврат Неопределено;	
	КонецЕсли;	
	
	НоваяЗапись = УпаковочныйЛист.ПолучитьОбъект();
	НоваяЗапись.ВнешнийНомер = Barcode;
	
	Для каждого CтрокаCборки Из ТЗ Цикл
		Если CтрокаCборки.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НоваяЗапись.Товары.Добавить();        
		НоваяСтрока.Штрихкод = CтрокаCборки.Штрихкод;
		НоваяСтрока.Номенклатура = CтрокаCборки.Номенклатура;
		НоваяСтрока.Количество  = CтрокаCборки.Количество;
		НоваяСтрока.ЕГАИС_Номенклатура = CтрокаCборки.НоменклатураЕГАИС;
		НоваяСтрока.Марка = CтрокаCборки.ЕгаисПолныйКод;
		НоваяСтрока.Короб = CтрокаCборки.Короб;
	КонецЦикла;	
	
	Попытка
		НоваяЗапись.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки; 
	
	Возврат Barcode;
	
КонецФункции
Функция КонтрольныйСимволEAN(ШтрихКод, Тип) Экспорт
	
	Четн   = 0;
	Нечетн = 0;
	
	КоличествоИтераций = ?(Тип = 13, 6, 4);
	
	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) И (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четн = Четн + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;
	
	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;
	
	КонтЦифра = 10 - (Четн + Нечетн) % 10;
	
	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));
	
КонецФункции // КонтрольныйСимволEAN()

//ФОТО
Функция ПолучитьДвоичныеДанныеКартинки(ГУИДТовара) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ГУИДТовара, 4, 36)));
	
	Выборка = ПолучитьПрисоединенныеФайлы(Номенклатура);
	Если Выборка.Следующий() Тогда	
		ДанныеКартинки = ПолучитьИзвременногоХранилища(ДанныеФайла(Выборка.Файл, Новый УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла);	
		Возврат ДанныеКартинки;	
	КонецЕсли;
	
	ПустаяКартинка = Новый Картинка;
	Возврат ПустаяКартинка.ПолучитьДвоичныеДанные();
	
КонецФункции
Функция ПолучитьПрисоединенныеФайлы(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст = "ВЫБРАТЬ 
	|	Номенклатура.ФайлКартинки КАК ФайлКартинки
	|ПОМЕСТИТЬ ВременнаяТаблицаОсновныеИзображения
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФайлКартинки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.ВладелецФайла КАК Номенклатура,
	|	Файлы.Ссылка КАК Файл,
	|	Файлы.Наименование КАК Наименование,
	|	Файлы.Описание КАК Описание,
	|	Файлы.Том КАК Том,
	|	Файлы.Расширение КАК Расширение,
	|	Файлы.ПутьКФайлу КАК ПутьКФайлу
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Номенклатура
	|	И Файлы.Ссылка В
	|			(ВЫБРАТЬ
	|				ВременнаяТаблицаОсновныеИзображения.ФайлКартинки
	|			ИЗ
	|				ВременнаяТаблицаОсновныеИзображения КАК ВременнаяТаблицаОсновныеИзображения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции
Функция ДанныеФайла(Знач ПрисоединенныйФайл,
	Знач ИдентификаторФормы = Неопределено,
	Знач ПолучатьСсылкуНаДвоичныеДанные = Истина,
	Знач ДляРедактирования = Ложь) Экспорт
	
	Модуль_РаботаСФайлами = ОбщийМодуль("РаботаСФайлами");
	Модуль_РаботаСФайламиСлужебный = ОбщийМодуль("РаботаСФайламиСлужебный");
	Модуль_СтроковыеФункцииКлиентСервер = ОбщийМодуль("СтроковыеФункцииКлиентСервер");
	Модуль_ОбщегоНазначенияКлиентСервер = ОбщийМодуль("ОбщегоНазначенияКлиентСервер");
	
	Модуль_ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("РаботаСФайлами.ДанныеФайла", "ПрисоединенныйФайл", 
	ПрисоединенныйФайл, Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип);
	
	ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	Модуль_ОбщегоНазначенияКлиентСервер.Проверить(ФайлОбъект <> Неопределено, 
	Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден присоединенный файл ""%1"" (%2)'"),
	Строка(ПрисоединенныйФайл), ПрисоединенныйФайл.Метаданные()));
	
	Если ДляРедактирования И Не ЗначениеЗаполнено(ФайлОбъект.Редактирует) Тогда
		ФайлОбъект.Заблокировать();
		Модуль_РаботаСФайламиСлужебный.ЗанятьФайлДляРедактированияСервер(ФайлОбъект);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаДвоичныеДанныеФайла = Неопределено;
	
	Если ПолучатьСсылкуНаДвоичныеДанные Тогда
		Если ПрисоединенныйФайл.ХранитьВерсии И ЗначениеЗаполнено(ПрисоединенныйФайл.ТекущаяВерсия) Тогда
			ДвоичныеДанные = Модуль_РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл.ТекущаяВерсия);
		Иначе
			ДвоичныеДанные = Модуль_РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл);
		КонецЕсли;
		Если ТипЗнч(ИдентификаторФормы) = Тип("УникальныйИдентификатор") Тогда
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
		Иначе
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка",                       ПрисоединенныйФайл);
	Результат.Вставить("СсылкаНаДвоичныеДанныеФайла",  СсылкаНаДвоичныеДанныеФайла);
	Результат.Вставить("ДатаМодификацииУниверсальная", ФайлОбъект.ДатаМодификацииУниверсальная);
	Результат.Вставить("ИмяФайла",                     ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение);
	Результат.Вставить("Наименование",                 ФайлОбъект.Наименование);
	Результат.Вставить("Расширение",                   ФайлОбъект.Расширение);
	Результат.Вставить("Размер",                       ФайлОбъект.Размер);
	Результат.Вставить("Редактирует",                  ФайлОбъект.Редактирует);
	Результат.Вставить("ПодписанЭП",                   ФайлОбъект.ПодписанЭП);
	Результат.Вставить("Зашифрован",                   ФайлОбъект.Зашифрован);
	Результат.Вставить("ХранитьВерсии",                ФайлОбъект.ХранитьВерсии);
	Результат.Вставить("ПометкаУдаления",              ФайлОбъект.ПометкаУдаления);
	Результат.Вставить("ДатаЗаема",                    ФайлОбъект.ДатаЗаема);
	Результат.Вставить("Владелец",                     ФайлОбъект.ВладелецФайла);
	Результат.Вставить("АвторТекущейВерсии",           ФайлОбъект.Изменил);
	Результат.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл));
	
	Возврат Результат;
	
КонецФункции
Функция ДобавитьФайл(ПараметрыФайла,
	Знач АдресФайлаВоВременномХранилище,
	Знач АдресВременногоХранилищаТекста = "",
	Знач Описание = "",
	Знач НоваяСсылкаНаФайл = Неопределено) Экспорт
	
	Модуль_РаботаСФайламиСлужебный = ОбщийМодуль("РаботаСФайламиСлужебный");
	Модуль_РаботаСФайламиВТомахСлужебный = ОбщийМодуль("РаботаСФайламиВТомахСлужебный");
	Модуль_СтроковыеФункцииКлиентСервер = ОбщийМодуль("СтроковыеФункцииКлиентСервер");
	Модуль_ОбщегоНазначенияКлиентСервер = ОбщийМодуль("ОбщегоНазначенияКлиентСервер");
	
	Автор =              ПараметрыФайла.Автор;
	ВладелецФайлов =     ПараметрыФайла.ВладелецФайлов;
	ИмяБезРасширения  =  ПараметрыФайла.ИмяБезРасширения;
	РасширениеБезТочки = ПараметрыФайла.РасширениеБезТочки;
	ГруппаФайлов = Неопределено;
	Если ПараметрыФайла.Свойство("ГруппаФайлов") 
		И ЗначениеЗаполнено(ПараметрыФайла.ГруппаФайлов)
		И Не Модуль_РаботаСФайламиСлужебный.ЭтоПапкаФайлов(ВладелецФайлов) Тогда
		ГруппаФайлов = ПараметрыФайла.ГруппаФайлов;
	КонецЕсли;
	ВремяИзмененияУниверсальное = ПараметрыФайла.ВремяИзмененияУниверсальное;
	
	Если РасширениеБезТочки = Неопределено Тогда
		ЧастиИмениФайла = СтрРазделить(ИмяБезРасширения, ".", Ложь);
		Если ЧастиИмениФайла.Количество() > 1 Тогда
			РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество() - 1];
			ИмяБезРасширения = Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - (СтрДлина(РасширениеБезТочки) + 1));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
		Или ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при добавлении присоединенного файла.'");
	
	Если НоваяСсылкаНаФайл = Неопределено Тогда
		ИмяСправочника = Модуль_РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайлов, "", ЗаголовокОшибки,
		НСтр("ru = 'В этом случае параметр ""НоваяСсылкаНаФайл"" должен быть указан.'"));
		
		НоваяСсылкаНаФайл = Справочники[ИмяСправочника].ПолучитьСсылку();
	Иначе
		Если Не Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(НоваяСсылкаНаФайл))
			Или Не ЗначениеЗаполнено(НоваяСсылкаНаФайл) Тогда
			
			ВызватьИсключение НСтр("ru = 'Ошибка при добавлении присоединенного файла.
			|Ссылка на новый файл не заполнена.'");
		КонецЕсли;
		
		ИмяСправочника = Модуль_РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, НоваяСсылкаНаФайл.Метаданные().Имя, ЗаголовокОшибки);
	КонецЕсли;
	
	ПрисоединенныйФайл = Справочники[ИмяСправочника].СоздатьЭлемент();
	ПрисоединенныйФайл.УстановитьСсылкуНового(НоваяСсылкаНаФайл);
	
	ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
	ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	ПрисоединенныйФайл.ДатаСоздания                 = ТекущаяДатаСеанса();
	ПрисоединенныйФайл.Описание                     = Описание;
	ПрисоединенныйФайл.Наименование                 = ИмяБезРасширения;
	ПрисоединенныйФайл.Расширение                   = РасширениеБезТочки;
	ТипХраненияФайла = Модуль_РаботаСФайламиСлужебный.ТипХраненияФайлов();
	ПрисоединенныйФайл.ТипХраненияФайла             = ТипХраненияФайла;
	ПрисоединенныйФайл.Размер                       = ДвоичныеДанные.Размер();
	Если ГруппаФайлов <> Неопределено Тогда
		ПрисоединенныйФайл.Родитель = ГруппаФайлов;
	КонецЕсли;
	
	ПрисоединенныйФайл.Записать();
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		ПрисоединенныйФайл.ТипХраненияФайла = ТипХраненияФайла;
		
		//передается ссылка
		Модуль_РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(ПрисоединенныйФайл.Ссылка, ДвоичныеДанные);
		
	Иначе
		
		ПрисоединенныйФайл.Том = Неопределено;
		ПрисоединенныйФайл.ПутьКФайлу = Неопределено;
		ПрисоединенныйФайл.ТипХраненияФайла = Неопределено;
		
		//передается объект
		Модуль_РаботаСФайламиВТомахСлужебный.ДобавитьФайл(ПрисоединенныйФайл, ДвоичныеДанные);
		
	КонецЕсли;
	ПрисоединенныйФайл.Записать();
		
	Возврат ПрисоединенныйФайл.Ссылка;
	
КонецФункции
Функция ДобавитьФайл_old(ПараметрыФайла,
	Знач АдресФайлаВоВременномХранилище,
	Знач АдресВременногоХранилищаТекста = "",
	Знач Описание = "",
	Знач НоваяСсылкаНаФайл = Неопределено) Экспорт
	
	Модуль_РаботаСФайламиСлужебный = ОбщийМодуль("РаботаСФайламиСлужебный");
	Модуль_СтроковыеФункцииКлиентСервер = ОбщийМодуль("СтроковыеФункцииКлиентСервер");
	Модуль_ОбщегоНазначенияКлиентСервер = ОбщийМодуль("ОбщегоНазначенияКлиентСервер");
	
	Автор =              ПараметрыФайла.Автор;
	ВладелецФайлов =     ПараметрыФайла.ВладелецФайлов;
	ИмяБезРасширения  =  ПараметрыФайла.ИмяБезРасширения;
	РасширениеБезТочки = ПараметрыФайла.РасширениеБезТочки;
	ГруппаФайлов = Неопределено;
	Если ПараметрыФайла.Свойство("ГруппаФайлов") 
		И ЗначениеЗаполнено(ПараметрыФайла.ГруппаФайлов)
		И Не Модуль_РаботаСФайламиСлужебный.ЭтоПапкаФайлов(ВладелецФайлов) Тогда
		ГруппаФайлов = ПараметрыФайла.ГруппаФайлов;
	КонецЕсли;
	ВремяИзмененияУниверсальное = ПараметрыФайла.ВремяИзмененияУниверсальное;
	
	Если РасширениеБезТочки = Неопределено Тогда
		ЧастиИмениФайла = СтрРазделить(ИмяБезРасширения, ".", Ложь);
		Если ЧастиИмениФайла.Количество() > 1 Тогда
			РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество() - 1];
			ИмяБезРасширения = Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - (СтрДлина(РасширениеБезТочки) + 1));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
		Или ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при добавлении присоединенного файла.'");
	
	Если НоваяСсылкаНаФайл = Неопределено Тогда
		ИмяСправочника = Модуль_РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайлов, "", ЗаголовокОшибки,
		НСтр("ru = 'В этом случае параметр ""НоваяСсылкаНаФайл"" должен быть указан.'"));
		
		НоваяСсылкаНаФайл = Справочники[ИмяСправочника].ПолучитьСсылку();
	Иначе
		Если Не Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(НоваяСсылкаНаФайл))
			Или Не ЗначениеЗаполнено(НоваяСсылкаНаФайл) Тогда
			
			ВызватьИсключение НСтр("ru = 'Ошибка при добавлении присоединенного файла.
			|Ссылка на новый файл не заполнена.'");
		КонецЕсли;
		
		ИмяСправочника = Модуль_РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, НоваяСсылкаНаФайл.Метаданные().Имя, ЗаголовокОшибки);
	КонецЕсли;
	
	ПрисоединенныйФайл = Справочники[ИмяСправочника].СоздатьЭлемент();
	ПрисоединенныйФайл.УстановитьСсылкуНового(НоваяСсылкаНаФайл);
	
	ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
	ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	ПрисоединенныйФайл.ДатаСоздания                 = ТекущаяДатаСеанса();
	ПрисоединенныйФайл.Описание                     = Описание;
	ПрисоединенныйФайл.Наименование                 = ИмяБезРасширения;
	ПрисоединенныйФайл.Расширение                   = РасширениеБезТочки;
	ПрисоединенныйФайл.ТипХраненияФайла             = Модуль_РаботаСФайламиСлужебный.ТипХраненияФайлов();
	ПрисоединенныйФайл.Размер                       = ДвоичныеДанные.Размер();
	Если ГруппаФайлов <> Неопределено Тогда
		ПрисоединенныйФайл.Родитель = ГруппаФайлов;
	КонецЕсли;
		
	Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		НачатьТранзакцию();
		Попытка
			СвояТранзакцияОткрыта = Истина;
			Модуль_РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(НоваяСсылкаНаФайл, ДвоичныеДанные);
			ПрисоединенныйФайл.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ПрисоединенныйФайл.ПутьКФайлу = "";
			
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
			ИзвлеченныйТекст = "";
			
			Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
				ИзвлеченныйТекст = Модуль_РаботаСФайламиСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
				СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
				
			ИначеЕсли Не Модуль_РаботаСФайламиСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
				// Тексты извлекаются сразу, а не в фоновом задании.
				ИзвлеченныйТекст = Модуль_РаботаСФайламиСлужебный.ИзвлечьТекст(АдресВременногоХранилищаТекста, ДвоичныеДанные, ПрисоединенныйФайл.Расширение);
				СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
			КонецЕсли;
			
			ПрисоединенныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
			ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
			
			ПрисоединенныйФайл.Автор = Автор;
						
			ПрисоединенныйФайл.Записать();
			
			ЗафиксироватьТранзакцию();			
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
			|%2'");
			КомментарийЖурналаРегистрации = Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Добавление присоединенного файла'",
			Модуль_ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			КомментарийЖурналаРегистрации);
			
			ВызватьИсключение Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	Иначе
		Попытка
			// Добавление в один из томов (где есть свободное место).
			СведенияОФайле = Модуль_РаботаСФайламиСлужебный.ДобавитьФайлВТом(ДвоичныеДанные, ВремяИзмененияУниверсальное,
			ИмяБезРасширения, РасширениеБезТочки, , ПрисоединенныйФайл.Зашифрован);
			ПрисоединенныйФайл.Том = СведенияОФайле.Том;
			ПрисоединенныйФайл.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
			
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
			ИзвлеченныйТекст = "";
			
			Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
				ИзвлеченныйТекст = Модуль_РаботаСФайламиСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
				СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
				
			ИначеЕсли Не Модуль_РаботаСФайламиСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
				// Тексты извлекаются сразу, а не в фоновом задании.
				ИзвлеченныйТекст = Модуль_РаботаСФайламиСлужебный.ИзвлечьТекст(АдресВременногоХранилищаТекста, ДвоичныеДанные, ПрисоединенныйФайл.Расширение);
				СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
			КонецЕсли;
			
			ПрисоединенныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
			ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
			ПрисоединенныйФайл.Автор = Автор;
			
			ПрисоединенныйФайл.Записать();			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
			|%2'");
			КомментарийЖурналаРегистрации = Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Добавление присоединенного файла'",
			Модуль_ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			КомментарийЖурналаРегистрации);
			
			ВызватьИсключение Модуль_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЕсли;
	
	Возврат ПрисоединенныйФайл.Ссылка;
	
КонецФункции
Функция ПолучитьУжатуюКартинку(Картинка, ВысотаКартинки, ШиринаКартинки, НоваяВысотаКартинки, НоваяШиринаКартинки, ИзображениеЛандшафт) 
		
	Если ИзображениеЛандшафт Тогда
		УжатьДо = НоваяШиринаКартинки;
		ТекущееЗначениеИзмерения = ШиринаКартинки;
		Коэффициент = ШиринаКартинки / НоваяШиринаКартинки;
	Иначе
		УжатьДо = НоваяВысотаКартинки;
		ТекущееЗначениеИзмерения = ВысотаКартинки;
		Коэффициент = ВысотаКартинки / НоваяВысотаКартинки;
	КонецЕсли;	
	
	Крт_ = Картинка;  
	
	КртШирина = Картинка.Ширина();
	КртВысота = Картинка.Высота();			
	
	НоваяШирина = Окр(КртШирина / Коэффициент, 0);
	НоваяВысота = Окр(КртВысота / Коэффициент, 0);
	
	ОбрКрт = Новый ОбрабатываемаяКартинка(Картинка, Истина);
	ОбрКрт.УстановитьРазмер(НоваяШирина, НоваяВысота);
	Крт_ = ОбрКрт.ПолучитьКартинку();
	
	Возврат Крт_;  
	
КонецФункции
Процедура СжатьИзображения(СтруктураПараметров, ПараметрыВыполнения) Экспорт 
	
	Модуль_РаботаСФайлами = ОбщийМодуль("РаботаСФайлами");
	
	РП = ДатаМобайл_ОбщийМодуль.DM_ПолучитьРазделительПути(); 	
	
	ПутьХранения = СтруктураПараметров.ПутьХранения;
	Если Прав(ПутьХранения, 1) = РП Тогда
		ПутьХранения = Лев(ПутьХранения, СтрДлина(ПутьХранения) - 1);	
	КонецЕсли;	
	
	Если СтруктураПараметров.Свойство("ПолнаяВыгрузка") Тогда
		Если СтруктураПараметров.ПолнаяВыгрузка Тогда
			УдалитьФайлы(ПутьХранения + РП + "images");
			УдалитьФайлы(ПутьХранения + РП + "previews");
		КонецЕсли;
	КонецЕсли;	
		
	Запрос = Новый Запрос; 		    
	Запрос.Текст =      
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК ОбъектВыгрузки,
	|	Файлы.ВладелецФайла КАК Номенклатура,
	|	Файлы.Расширение КАК Расширение
	|ПОМЕСТИТЬ	СписокИзображений
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	НЕ Файлы.ПометкаУдаления
	|	И НЕ Файлы.ВладелецФайла.ЭтоГруппа
	|	И (Файлы.ВладелецФайла.Ссылка В ИЕРАРХИИ (&СписокТоваров) ИЛИ &ВсеТовары)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////		
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
	|ПОМЕСТИТЬ СписокТоваровОбщий
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка)
	|			И (Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
	|ГДЕ
	|	НЕ ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)
	|	И
	|	Номенклатура.Ссылка В
	|			(ВЫБРАТЬ
	|				СписокИзображений.Номенклатура
	|			ИЗ
	|				СписокИзображений КАК СписокИзображений)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка))
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВидНоменклатуры)
	|			И (Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры))
	|			И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
	|ГДЕ
	|	Номенклатура.Ссылка В
	|			(ВЫБРАТЬ
	|				СписокИзображений.Номенклатура
	|			ИЗ
	|				СписокИзображений КАК СписокИзображений)
	|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка))
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВладелецХарактеристик)
	|			И (Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
	|ГДЕ
	|	Номенклатура.Ссылка В
	|			(ВЫБРАТЬ
	|				СписокИзображений.Номенклатура
	|			ИЗ
	|				СписокИзображений КАК СписокИзображений)
	|	И НЕ ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ           
	|	СписокИзображений.ОбъектВыгрузки КАК ОбъектВыгрузки,
	|	СписокИзображений.Номенклатура КАК Номенклатура,
	|	СписокИзображений.Расширение КАК Расширение,
	|	ЕСТЬNULL(СписокТоваровОбщий.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика
	|ПОМЕСТИТЬ СписокИзображенийИтог
	|ИЗ
	|	СписокИзображений КАК СписокИзображений
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокТоваровОбщий КАК СписокТоваровОбщий
	|		ПО СписокИзображений.Номенклатура = СписокТоваровОбщий.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокИзображенийИтог.ОбъектВыгрузки КАК ОбъектВыгрузки,
	|	СписокИзображенийИтог.Номенклатура КАК Номенклатура, 
	|	СписокИзображенийИтог.Расширение КАК Расширение,
	|	СписокИзображенийИтог.Характеристика КАК Характеристика
	|ИЗ
	|	СписокИзображенийИтог КАК СписокИзображенийИтог
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|ИТОГИ ПО
	|	Номенклатура";              
	
	Если СтруктураПараметров.Свойство("Номенклатура") Тогда                                                 
		МассивТоваров = Новый Массив;
		МассивТоваров.Добавить(СтруктураПараметров.Номенклатура);
		Запрос.УстановитьПараметр("СписокТоваров", МассивТоваров);
	Иначе	
		Запрос.УстановитьПараметр("СписокТоваров", СтруктураПараметров.УзелПО.ДоступныеГруппыТоваров.ВыгрузитьКолонку("Номенклатура"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВсеТовары", СтруктураПараметров.УзелПО.ДоступныеГруппыТоваров.Количество() = 0);
	
	Результат = Запрос.Выполнить();   
	
	МассивРасширений = Новый Массив;
	МассивРасширений.Добавить("jpg");
	МассивРасширений.Добавить("jpeg");
	МассивРасширений.Добавить("bmp");
	МассивРасширений.Добавить("png");
	
	Если Не Результат.Пустой() Тогда	
		
		//путь куда сохраняем:
		ПутьХранения = СтруктураПараметров.ПутьХранения; 
		
		КаталогНаДискеImages = Новый Файл(ПутьХранения + РП + "images");
		
		Если Не КаталогНаДискеImages.Существует() Тогда
			СоздатьКаталог(ПутьХранения + РП + "images");
		КонецЕсли;
		
		КаталогНаДискеPreviews = Новый Файл(ПутьХранения + РП + "previews");
		
		Если Не КаталогНаДискеPreviews.Существует() Тогда
			СоздатьКаталог(ПутьХранения + РП + "previews");
		КонецЕсли;
		
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл            
			
			Если Выборка.Номенклатура = Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
			
			ВыборкаДетальныеЗаписи = Выборка.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл   
				
				ГУИД_Товара = XMLСтрока(ВыборкаДетальныеЗаписи.Номенклатура) + XMLСтрока(ВыборкаДетальныеЗаписи.Характеристика);
				
				Если МассивРасширений.Найти(НРег(ВыборкаДетальныеЗаписи.Расширение)) = Неопределено Тогда
					Продолжить;	
				КонецЕсли;                
				
				//1. Получаем исходное изображение и сохраняем его:  
				
				Попытка 
					ДвоичныеДанные = Модуль_РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаДетальныеЗаписи.ОбъектВыгрузки, Ложь);
				Исключение
					ДвоичныеДанные = Модуль_РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаДетальныеЗаписи.ОбъектВыгрузки); //Старые конфы
				КонецПопытки;
				
				Если ДвоичныеДанные = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				
				ПолныйПутьКИсходномуИзображению = ПутьХранения + РП + "images" + РП + Строка(ГУИД_Товара) +  "." + ВыборкаДетальныеЗаписи.Расширение; 				
				Попытка
					ДвоичныеДанные.Записать(ПолныйПутьКИсходномуИзображению);
				Исключение
					Продолжить;
				КонецПопытки;	
				
				Попытка
					Картинка = Новый Картинка(ПолныйПутьКИсходномуИзображению);  
					ВысотаКартинки = Картинка.Высота();
					ШиринаКартинки = Картинка.Ширина(); 
				Исключение
					ВысотаКартинки = Неопределено;
				КонецПопытки;			
				
				Если ДвоичныеДанные = Неопределено Тогда
					Продолжить;		
				КонецЕсли;   						  
				
				//2. Формирование изображений image:      
				
				ГУИД_ТовараСтрока = "8U-" + Строка(ГУИД_Товара);    			
				НаименованиеИзображения = "8i-" + XMLСтрока(ВыборкаДетальныеЗаписи.ОбъектВыгрузки);        			
				КаталогНаДискеКИзмененномуИзображению = Новый Файл(ПутьХранения + РП + "images" + РП + ГУИД_ТовараСтрока);    	
				Если Не КаталогНаДискеКИзмененномуИзображению.Существует() Тогда
					СоздатьКаталог(ПутьХранения + РП + "images" + РП + ГУИД_ТовараСтрока);
				КонецЕсли;    
				ПолныйПутьКИзмененномуИзображению = ПутьХранения + РП + "images" + РП + ГУИД_ТовараСтрока +  РП + НаименованиеИзображения +  "." + ВыборкаДетальныеЗаписи.Расширение; 		
				
				Если ВысотаКартинки = Неопределено Тогда
					Попытка
						ДвоичныеДанные.Записать(ПолныйПутьКИзмененномуИзображению);
					Исключение
						Продолжить;
					КонецПопытки;	
				Иначе	
					Попытка
						Картинка = Новый Картинка(ПолныйПутьКИсходномуИзображению);
						ВысотаКартинки = Картинка.Высота();
						ШиринаКартинки = Картинка.Ширина();
						Если ВысотаКартинки < ШиринаКартинки Тогда
							ИзображениеЛандшафт = Истина;	
						Иначе
							ИзображениеЛандшафт = Ложь;
						КонецЕсли;	
						
					Исключение
						ВысотаКартинки = Неопределено;
					КонецПопытки;	
					
					Если Не ВысотаКартинки = Неопределено Тогда					
						Если ВысотаКартинки > 800 Или ШиринаКартинки > 800 Тогда
							//Размер 480х800 
							НоваяВысотаКартинки = 480;
							НоваяШиринаКартинки = 800;
							Попытка
								НоваяКартинка = ПолучитьУжатуюКартинку(Картинка, ВысотаКартинки, ШиринаКартинки, НоваяВысотаКартинки, НоваяШиринаКартинки, ИзображениеЛандшафт);															
								НоваяКартинка.Записать(ПолныйПутьКИзмененномуИзображению);
							Исключение
								Продолжить;
							КонецПопытки;		
						Иначе
							Картинка.Записать(ПолныйПутьКИзмененномуИзображению);
						КонецЕсли;	
					Иначе
						Попытка
							Картинка.Записать(ПолныйПутьКИзмененномуИзображению);
						Исключение
							Продолжить;
						КонецПопытки;		
					КонецЕсли;	 
				КонецЕсли;	
				
				//3. Формирование изображений preview:      
				
				НаименованиеИзображенияПревью 	= "";
				РасширениеИзображенияПревью = "";
				ФайлКартинкиПревьюСсылка = ПолучитьОсновноеИзображениеДляPreviews(Выборка.Номенклатура, НаименованиеИзображенияПревью, РасширениеИзображенияПревью);		
				Если Не ФайлКартинкиПревьюСсылка = Неопределено Тогда                											
					КаталогНаДискеКИзмененномуИзображениюПревью = Новый Файл(ПутьХранения + РП +"previews" +  РП + ГУИД_ТовараСтрока);		
					Если Не КаталогНаДискеКИзмененномуИзображениюПревью.Существует() Тогда
						СоздатьКаталог(ПутьХранения + РП +"previews" +  РП + ГУИД_ТовараСтрока);
					КонецЕсли;     
					Если ФайлКартинкиПревьюСсылка <> ВыборкаДетальныеЗаписи.ОбъектВыгрузки Тогда
						Попытка 
							ДвоичныеДанныеПревью = Модуль_РаботаСФайлами.ДвоичныеДанныеФайла(ФайлКартинкиПревьюСсылка, Ложь);
						Исключение
							ДвоичныеДанныеПревью = Модуль_РаботаСФайлами.ДвоичныеДанныеФайла(ФайлКартинкиПревьюСсылка); //Старые конфы
						КонецПопытки;
					Иначе
						Попытка 
							ДвоичныеДанныеПревью = Модуль_РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаДетальныеЗаписи.ОбъектВыгрузки, Ложь);
						Исключение
							ДвоичныеДанныеПревью = Модуль_РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаДетальныеЗаписи.ОбъектВыгрузки); //Старые конфы
						КонецПопытки; 
					КонецЕсли;
					Если Не ДвоичныеДанныеПревью = Неопределено Тогда  
						// Размер 150х150
						ПолныйПутьКИзмененномуИзображениюПревью = ПутьХранения + РП +"previews" + РП + ГУИД_ТовараСтрока +  РП + НаименованиеИзображенияПревью  + "." + РасширениеИзображенияПревью;
						ДвоичныеДанныеПревью.Записать(ПолныйПутьКИзмененномуИзображениюПревью);
						Если ВысотаКартинки = Неопределено Тогда
							Попытка
								ДвоичныеДанные.Записать(ПолныйПутьКИзмененномуИзображению);
							Исключение
								Продолжить;
							КонецПопытки;		
						Иначе
							НоваяВысотаКартинки = 150;
							НоваяШиринаКартинки = 150; 					
							Картинка = Новый Картинка(ПолныйПутьКИзмененномуИзображениюПревью); 
							ВысотаКартинки = Картинка.Высота();
							ШиринаКартинки = Картинка.Ширина();	
							Попытка
								НоваяКартинка = ПолучитьУжатуюКартинку(Картинка, ВысотаКартинки, ШиринаКартинки, НоваяВысотаКартинки, НоваяШиринаКартинки, ИзображениеЛандшафт); 							 
								НоваяКартинка.Записать(ПолныйПутьКИзмененномуИзображениюПревью);
							Исключение 
								Продолжить;
							КонецПопытки;	
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;	
				
				УдалитьФайлы(ПолныйПутьКИсходномуИзображению);
				
			КонецЦикла;
			
		КонецЦикла;			
		
	КонецЕсли;     	
		
КонецПроцедуры
Функция ПолучитьОсновноеИзображениеДляPreviews(Номенклатура, НаименованиеИзображенияПревью, РасширениеИзображенияПревью) Экспорт
	
	Запрос = Новый Запрос; 	
	Запрос.Текст =   
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК Файл,
	|	2 КАК Порядок,
	|	НоменклатураПрисоединенныеФайлы.Расширение КАК Расширение
	|ПОМЕСТИТЬ ВТ_ОсновныеИзображения
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|ГДЕ
	|	НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
	|	И НоменклатураПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И НоменклатураПрисоединенныеФайлы.Ссылка <> ЗНАЧЕНИЕ(Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.ФайлКартинки,
	|	1,
	|	Номенклатура.ФайлКартинки.Расширение
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ФайлКартинки = ЗНАЧЕНИЕ(Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка)
	|	И Номенклатура.Ссылка = &ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ОсновныеИзображения.Порядок КАК Порядок,
	|	ВТ_ОсновныеИзображения.Файл КАК Файл,
	|	ВТ_ОсновныеИзображения.Расширение КАК Расширение
	|ИЗ
	|	ВТ_ОсновныеИзображения КАК ВТ_ОсновныеИзображения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";    
	
	Запрос.УстановитьПараметр("ВладелецФайла", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда   	
		НаименованиеИзображенияПревью = "8i-" + XMLСтрока(Выборка.Файл);
		ФайлКартинкиПревьюСсылка = Выборка.Файл;  
		РасширениеИзображенияПревью = Выборка.Расширение;
	Иначе
		ФайлКартинкиПревьюСсылка = Неопределено;   
		РасширениеИзображенияПревью = Неопределено; 	
	КонецЕсли;
	
	Возврат ФайлКартинкиПревьюСсылка;
	
КонецФункции

//ДОПОЛНИТЕЛЬНЫЕ ФОРМЫ
Процедура ДополнительныеШагиПослеУдаления(ИзШапки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Шаблон КАК Шаблон,
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ДополнительнаяФорма КАК ДополнительнаяФорма,
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Порядок КАК Порядок,
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ПодборРазмещение КАК ПодборРазмещение,
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ИспользоватьВПоискеСтрок КАК ИспользоватьВПоискеСтрок
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов КАК ДатаМобайл_СвязиДополнительныхФормИШаблонов
	|ГДЕ
	|	(&ВсеДФ
	|			ИЛИ ДатаМобайл_СвязиДополнительныхФормИШаблонов.РеквизитИзШапки = &РеквизитИзШапки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ ПО
	|	Шаблон,
	|	РеквизитИзШапки";
	Запрос.УстановитьПараметр("РеквизитИзШапки", ИзШапки);
	Запрос.УстановитьПараметр("ВсеДФ", ИзШапки = Неопределено);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаШаблон = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаШаблон.Следующий() Цикл	
		ВыборкаТип = ВыборкаШаблон.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаТип.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыборкаТип.Выбрать();		
			
			ТекПорядок = 1;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи,ВыборкаДетальныеЗаписи);
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.Порядок = ТекПорядок;			
				МенеджерЗаписи.Записать(Истина);
				
				ТекПорядок = ТекПорядок + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
Функция ПолучитьНомерУдаляемогоШага(ДополнительныйШаг) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи,ДополнительныйШаг);
	МенеджерЗаписи.Прочитать();
	Возврат МенеджерЗаписи.Порядок;
	
КонецФункции
Процедура ИзменитьПорядок(ДополнительныйШаг, Позже = Ложь)  Экспорт 
	
	МенеджерЗаписи = РегистрыСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДополнительныйШаг);
	МенеджерЗаписи.Прочитать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Шаблон КАК Шаблон,
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ДополнительнаяФорма КАК ДополнительнаяФорма,
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Порядок КАК Порядок,
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.РеквизитИзШапки КАК РеквизитИзШапки,
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ПодборРазмещение КАК ПодборРазмещение,
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ЗаполняемыйРеквизит КАК ЗаполняемыйРеквизит,
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ПроверятьЗаполнение КАК ПроверятьЗаполнение,
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ИспользоватьВПоискеСтрок КАК ИспользоватьВПоискеСтрок
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов КАК ДатаМобайл_СвязиДополнительныхФормИШаблонов
	|ГДЕ
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Порядок = &ПорядковыйНомер
	|	И ДатаМобайл_СвязиДополнительныхФормИШаблонов.Шаблон = &Шаблон
	|	И ДатаМобайл_СвязиДополнительныхФормИШаблонов.РеквизитИзШапки = &РеквизитИзШапки";
	
	Запрос.УстановитьПараметр("ПорядковыйНомер", ?(Позже, МенеджерЗаписи.Порядок + 1, МенеджерЗаписи.Порядок - 1));
	Запрос.УстановитьПараметр("Шаблон", МенеджерЗаписи.Шаблон);
	Запрос.УстановитьПараметр("РеквизитИзШапки", МенеджерЗаписи.РеквизитИзШапки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выб = РезультатЗапроса.Выбрать();
	
	Если Выб.Следующий() Тогда
		МенеджерВторойЗаписи = РегистрыСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерВторойЗаписи,Выб);
		МенеджерВторойЗаписи.Прочитать();
		
		МенеджерВторойЗаписи.Порядок = МенеджерЗаписи.Порядок;
		МенеджерЗаписи.Порядок = ?(Позже, МенеджерЗаписи.Порядок + 1, МенеджерЗаписи.Порядок - 1);
		МенеджерЗаписи.Записать(Истина);
		МенеджерВторойЗаписи.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры
Функция ПолучитьДатуИзСтрокиПоФормату(ДатаСтрокой, Шаблон) Экспорт 
	
	ТекущаяМаска = "DD.MM.YYYY";
	ПараметрДня = ПолучитьМестоИколичествоСимволовПараметраДаты("D", ТекущаяМаска);
	ПараметрМесяца = ПолучитьМестоИколичествоСимволовПараметраДаты("M", ТекущаяМаска);
	ПараметрГода = ПолучитьМестоИколичествоСимволовПараметраДаты("Y", ТекущаяМаска);
	День = Сред(ДатаСтрокой,ПараметрДня.Начало, ПараметрДня.Количество); 
	Месяц = Сред(ДатаСтрокой,ПараметрМесяца.Начало, ПараметрМесяца.Количество); 
	Год = ?(ПараметрГода.Количество = 2, "20", "") + Сред(ДатаСтрокой,ПараметрГода.Начало, ПараметрГода.Количество);
	
	Если СтрДлина(Год) = 2 Тогда
		Год = "20" + Год;	
	КонецЕсли;
	
	Попытка
		ФорматированнаяДата = Дата(Число(Год), Число(Месяц), Число(День));
		Возврат ФорматированнаяДата;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции
Функция ПолучитьМестоИколичествоСимволовПараметраДаты(Символ, Маска)
	
	МаскаИзменение = Маска;
	КоличествоСимволов = 0;
	ПараметрВремени = Новый Структура;
	ПараметрВремени.Вставить("Начало", 0);
	ПараметрВремени.Вставить("Количество", КоличествоСимволов);
	
	Пока Не СтрНайти(МаскаИзменение,Символ) = 0 Цикл
		КоличествоСимволов = КоличествоСимволов + 1;
		Если КоличествоСимволов = 1 Тогда
			ПараметрВремени.Вставить("Начало", СтрНайти(МаскаИзменение, Символ));
		КонецЕсли;
		ПараметрВремени.Вставить("Количество",КоличествоСимволов);
		МаскаИзменение = Сред(МаскаИзменение, СтрНайти(МаскаИзменение, Символ) + 1);
	КонецЦикла;
	
	Возврат ПараметрВремени;
	
КонецФункции
Процедура ОчиститьЗаписиЗначенийДополнительныхФорм(ДокументТСД) Экспорт
	
	СтруктураОтбора = Новый Структура("Документ", ДокументТСД);
	
	ВыборкаЗаписейСтрок = РегистрыСведений.ДатаМобайл_ЗначенияДополнительныхФорм.Выбрать(СтруктураОтбора);
	Пока ВыборкаЗаписейСтрок.Следующий() Цикл
		ВыборкаЗаписейСтрок.ПолучитьМенеджерЗаписи().Удалить();
	КонецЦикла;	
	
КонецПроцедуры
Процедура УдалитьЗначениеФормыПоСтроке(ДокументТСД, ИдентификаторСтроки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатаМобайл_ЗначенияДополнительныхФорм.Документ КАК Документ,
	|	ДатаМобайл_ЗначенияДополнительныхФорм.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ЗначенияДополнительныхФорм.Характеристика КАК Характеристика,
	|	ДатаМобайл_ЗначенияДополнительныхФорм.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДатаМобайл_ЗначенияДополнительныхФорм.ДополнительнаяФорма КАК ДополнительнаяФорма
	|ИЗ
	|	РегистрСведений.ДатаМобайл_ЗначенияДополнительныхФорм КАК ДатаМобайл_ЗначенияДополнительныхФорм
	|ГДЕ
	|	ДатаМобайл_ЗначенияДополнительныхФорм.Документ = &Документ
	|	И ДатаМобайл_ЗначенияДополнительныхФорм.ИдентификаторСтроки = &ИдентификаторСтроки";
	
	Запрос.УстановитьПараметр("Документ", ДокументТСД);
	Запрос.УстановитьПараметр("ИдентификаторСтроки", ИдентификаторСтроки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗначениеФормы = РегистрыСведений.ДатаМобайл_ЗначенияДополнительныхФорм.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗначениеФормы, ВыборкаДетальныеЗаписи);
		ЗначениеФормы.Прочитать();
		ЗначениеФормы.Удалить();
	КонецЦикла;
	
КонецПроцедуры

//НАСТРОЙКИ
Функция НастройкиПолучить() Экспорт
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("ИспользоватьЛогирование", Ложь);
	СтруктураНастройки.Вставить("КаталогХраненияЛогов", "C:\DM\");
	СтруктураНастройки.Вставить("ЛогированиеОчищатьЧерезДней", 0);
	СтруктураНастройки.Вставить("ЛогированиеСохранятьЗаписей", 0);
	СтруктураНастройки.Вставить("ДатаПоследнейОчисткиКаталогаЛогов", Дата(1,1,1));
	
	Хранилище = Константы.ДатаМобайл_Настройки.Получить().Получить();
	Попытка
		ЗаполнитьЗначенияСвойств(СтруктураНастройки, Хранилище); 
	Исключение КонецПопытки;
	
	Возврат СтруктураНастройки; 
	
КонецФункции
Функция НастройкиЗаписать(НастройкиЗначения) Экспорт 
	
	РезультатФункции = Истина;
	
	СтруктураНастройки = НастройкиПолучить();
	Попытка
		ЗаполнитьЗначенияСвойств(СтруктураНастройки, НастройкиЗначения);
		Сжатие = Новый СжатиеДанных(9);
		Хранилище = Новый ХранилищеЗначения(СтруктураНастройки, Сжатие);
		Константы.ДатаМобайл_Настройки.Установить(Хранилище);
	Исключение
		РезультатФункции = Ложь;
	КонецПопытки;	
	
	Возврат РезультатФункции;
	
КонецФункции
Процедура ОчисткаЛогов()
	
	СтруктураНастройки = НастройкиПолучить();
	ИспользоватьЛогирование = СтруктураНастройки.ИспользоватьЛогирование;	
	
	Если Не ИспользоватьЛогирование Тогда Возврат; КонецЕсли;
	
	КаталогХраненияЛогов = СтруктураНастройки.КаталогХраненияЛогов;
	
	ЛогированиеОчищатьЧерезДней = СтруктураНастройки.ЛогированиеОчищатьЧерезДней;
	ЛогированиеСохранятьЗаписей = СтруктураНастройки.ЛогированиеСохранятьЗаписей;
	
	ДатаПоследнейОчисткиКаталогаЛогов = СтруктураНастройки.ДатаПоследнейОчисткиКаталогаЛогов;
	
	// очищаем весь каталог
	ДнейПослеОчистки = (НачалоДня(ТекущаяДата()) - ДатаПоследнейОчисткиКаталогаЛогов) / 86400;
	Если Не ЛогированиеОчищатьЧерезДней = 0 И ДнейПослеОчистки > ЛогированиеОчищатьЧерезДней Тогда
		ПолнаяОчисткаКаталога(КаталогХраненияЛогов);
	КонецЕсли; 
	
	// сохарняем последние записи
	Если Не ЛогированиеСохранятьЗаписей = 0 Тогда
		СохранениеПоследнихЗаписей(КаталогХраненияЛогов, ЛогированиеСохранятьЗаписей);
	КонецЕсли;
	
КонецПроцедуры
Процедура ПолнаяОчисткаКаталога(ИмяКаталога) 
	
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если Не КаталогНаДиске.Существует() Тогда Возврат; КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяКаталога, "*.log");
		НастройкиЗаписать(Новый Структура("ДатаПоследнейОчисткиКаталогаЛогов", НачалоДня(ТекущаяДата())));	
	Исключение
		ЗаписьЖурналаРегистрации("ОчисткаКаталогаЛогов", УровеньЖурналаРегистрации.Ошибка,, ИмяКаталога, "Ошибка очистки каталога логов. " + ОписаниеОшибки()); 
	КонецПопытки;
	
КонецПроцедуры 
Процедура СохранениеПоследнихЗаписей(ИмяКаталога, КоличествоЗаписей)
	
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если Не КаталогНаДиске.Существует() Тогда Возврат; КонецЕсли; 
	
	НайденныеФайлы = НайтиФайлы(ИмяКаталога, "*.log");
	Если НайденныеФайлы.Количество() <= КоличествоЗаписей Тогда Возврат; КонецЕсли;
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Файл", Новый ОписаниеТипов("Строка"));
	ТаблицаФайлов.Колонки.Добавить("ДатаИзм", Новый ОписаниеТипов("Дата"));
	
	Для каждого нФайл Из НайденныеФайлы Цикл
		ДобСтрока = ТаблицаФайлов.Добавить();
		ДобСтрока.Файл    = нФайл.ПолноеИмя;
		ДобСтрока.ДатаИзм = нФайл.ПолучитьВремяИзменения();
	КонецЦикла;
	
	ТаблицаФайлов.Сортировать("ДатаИзм Убыв"); 
	ЕстьОшибки = Ложь; 
	ТекстОшибки = "";
	
	Для чСтр = КоличествоЗаписей По ТаблицаФайлов.Количество() - 1 Цикл
		Попытка
			УдалитьФайлы(ТаблицаФайлов.Получить(чСтр).Файл);
		Исключение
			ЕстьОшибки = Истина;
			ТекстОшибки = "" + ТекстОшибки + ОписаниеОшибки() + Символы.ПС; 
		КонецПопытки;		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ЗаписьЖурналаРегистрации("ОчисткаКаталогаЛогов", УровеньЖурналаРегистрации.Ошибка,, ИмяКаталога, "Ошибка сохранения последних n записей логов. " + СокрЛП(ТекстОшибки)); 
	КонецЕсли;
	
КонецПроцедуры

//Индикация кнопки обновления
Функция СформироватьHTTPЗапросКЯндексДиску(ПолучитьИнформациюОФайле = Ложь) Экспорт
	
	СсылкаКФайлу = "/v1/disk/public/resources/download?public_key=https://disk.yandex.ru/d/pc1gUd45_du3WQ&path=%2FDM_Windows_Android/1C/Online/UT11_KA2_ERP_UT3/UT11_KA2_ERP(Rus)_UT3.2(UkrKz)_EGAIS_UTAP11_KATAP2_SN_Mark_MDLP.cf";
	Если ПолучитьИнформациюОФайле Тогда
		СсылкаКФайлу = СтрЗаменить(СсылкаКФайлу, "download", "");	
	КонецЕсли; 
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL();
	Яндекс = Новый HTTPСоединение("cloud-api.yandex.net",,,,,, SSL);
	HTTPЗапрос = Новый HTTPЗапрос(СсылкаКФайлу);	
	Ответ = Яндекс.Получить(HTTPЗапрос);                                               
	Если Ответ.КодСостояния = 200 Тогда		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		СсылкаНаСкачиваниеФайла = ПрочитатьJSON(ЧтениеJSON);
		
		Если ПолучитьИнформациюОФайле Тогда
			Возврат Лев(СсылкаНаСкачиваниеФайла.modified, 10);	
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СсылкаНаСкачиваниеФайла.href) Тогда
			
			Соединение = Новый HTTPСоединение(СтрЗаменить(СсылкаНаСкачиваниеФайла.href, "https://", ""),,,,,,
			Новый ЗащищенноеСоединениеOpenSSL()
			);
			
			Запрос = Новый HTTPЗапрос("");
			Результат = Соединение.Получить(Запрос);
			Если Результат.КодСостояния = 302 Тогда
				
				Возврат Результат.Заголовки.Получить("Location");
				
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		Сообщить("Файл не найден");
	Иначе
		Сообщить("Что-то пошло не так, Код состояния = " + Ответ.КодСостояния);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Zolla 

Процедура ДатаМобайл_АвтообработкаZolla() Экспорт
	
	// << 03.07.2024 Петухов А.В., Фактор, #4286
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДатаМобайл_ЗаполнениеДокументовZolla);
	// >> 03.07.2024 Петухов А.В., Фактор, #4286
	
	// Проверка, выполняется ли уже такое фоновое задание.
	ИмяМетода = Метаданные.РегламентныеЗадания.ДатаМобайл_ЗаполнениеДокументовZolla.ИмяМетода;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяМетода", ИмяМетода);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ФоновыеЗаданияЦУ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если ФоновыеЗаданияЦУ.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// поиск документов для обработки
	Запрос = Новый Запрос;  
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УпакЛисты.Ссылка КАК УЛ,
	|	ДМ_УпакЛисты.Номер КАК НомерУЛ,
	|	Отборы.КР_Короб КАК КР_Короб,
	|	Отборы.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ втНеобработанныеУЛ
	|ИЗ
	|	Документ.ДатаМобайл_УпаковочныйЛист КАК ДМ_УпакЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпакЛисты
	|		ПО (ДМ_УпакЛисты.ТиповойУпаковочныйЛист = УпакЛисты.Ссылка)
	|			И (НЕ ДМ_УпакЛисты.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтборРазмещениеТоваров КАК Отборы
	|		ПО (УпакЛисты.Ссылка = Отборы.КР_Короб)
	|			И (Отборы.КР_ИспользоватьКороб)
	|			И (НЕ Отборы.ПометкаУдаления)
	|ГДЕ
	|	Отборы.КР_Короб ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка КАК ДокументТСД,
	|	НеобработанныеУЛ.УЛ КАК УЛ,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.НазваниеТовара КАК НазваниеТовара,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЯчейкаСсылка КАК ЯчейкаСсылка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.СерийныйНомер КАК СерийныйНомер,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.СерияСсылка КАК СерияСсылка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ШтрихКод КАК ШтрихКод,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество КАК Количество
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНеобработанныеУЛ КАК НеобработанныеУЛ
	|		ПО (ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист = НеобработанныеУЛ.НомерУЛ
	|				ИЛИ ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист = ""UPL"" + НеобработанныеУЛ.НомерУЛ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ШаблоныДокументов КАК ДатаМобайл_ШаблоныДокументов
	|		ПО (ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка.Шаблон = ДатаМобайл_ШаблоныДокументов.Ссылка)
	|ГДЕ
	|	РАЗНОСТЬДАТ(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Дата, &ТекДата, МИНУТА) > 1
	|	И ДатаМобайл_ШаблоныДокументов.ДМ_ОтгрузкаИзМагазина
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДатаМобайл_СтрокиГрупповыхДокументов.ДокументТСД,
	|	НеобработанныеУЛ.УЛ,
	|	ДатаМобайл_СтрокиГрупповыхДокументов.ИдентификаторСтроки,
	|	ДатаМобайл_СтрокиГрупповыхДокументов.Номенклатура,
	|	ДатаМобайл_СтрокиГрупповыхДокументов.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_СтрокиГрупповыхДокументов.НазваниеТовара,
	|	ДатаМобайл_СтрокиГрупповыхДокументов.ЕдиницаИзмерения,
	|	ДатаМобайл_СтрокиГрупповыхДокументов.ЯчейкаСсылка,
	|	ДатаМобайл_СтрокиГрупповыхДокументов.СерийныйНомер,
	|	ДатаМобайл_СтрокиГрупповыхДокументов.СерияСсылка,
	|	ДатаМобайл_СтрокиГрупповыхДокументов.Штрихкод,
	|	ДатаМобайл_СтрокиГрупповыхДокументов.УпаковочныйЛист,
	|	ДатаМобайл_СтрокиГрупповыхДокументов.Количество
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК ДатаМобайл_СтрокиГрупповыхДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНеобработанныеУЛ КАК НеобработанныеУЛ
	|		ПО (ДатаМобайл_СтрокиГрупповыхДокументов.УпаковочныйЛист = НеобработанныеУЛ.НомерУЛ
	|				ИЛИ ДатаМобайл_СтрокиГрупповыхДокументов.УпаковочныйЛист = ""UPL"" + НеобработанныеУЛ.НомерУЛ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ШаблоныДокументов КАК ДатаМобайл_ШаблоныДокументов
	|		ПО (ДатаМобайл_СтрокиГрупповыхДокументов.ДокументТСД.Шаблон = ДатаМобайл_ШаблоныДокументов.Ссылка)
	|ГДЕ
	|	НЕ ДатаМобайл_СтрокиГрупповыхДокументов.ДляОбмена
	|	И ДатаМобайл_СтрокиГрупповыхДокументов.ИмяТаблицы = &ИмяТаблицы
	|	И РАЗНОСТЬДАТ(ДатаМобайл_СтрокиГрупповыхДокументов.ДатаЗаписи, &ТекДата, ДЕНЬ) > 1
	|	И ДатаМобайл_ШаблоныДокументов.ДМ_ОтгрузкаИзМагазина
	|ИТОГИ ПО
	|	ДокументТСД,
	|	УЛ";	
	
	Запрос.УстановитьПараметр("ИмяТаблицы", "Select");
	Запрос.УстановитьПараметр("ТекДата"   , ТекущаяДата());
	
	СтрокиПоДокТСД = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого СтрокаДокТСД Из СтрокиПоДокТСД.Строки Цикл
		ДокументТСД   = СтрокаДокТСД.ДокументТСД;
		СтрокиПоДокУЛ = СтрокаДокТСД.Строки;
		
		Для каждого СтрокаДокУЛ Из СтрокиПоДокУЛ Цикл
			УпакЛистСсылка = СтрокаДокУЛ.УЛ;
			
			ТЗСобранныеДанныеПодбор = СтрокаДокУЛ.Строки;		
			ОписаниеОшибки = ДатаМобайл_HTTP_Логика.ДМ_ЗаполнениеДокументовШаблона(ДокументТСД, УпакЛистСсылка, ТЗСобранныеДанныеПодбор);
			
			Если Не ОписаниеОшибки = "" Тогда
				ОписаниеОшибки = "Заполнение по УЛ " + УпакЛистСсылка + "." + Символы.ПС + ОписаниеОшибки;
				
				ЗаписьЖурналаРегистрации("Ошибка заполнения документов Упак. лист и Отбор.", УровеньЖурналаРегистрации.Ошибка,
				Справочники.ДатаМобайл_ДокументыТСД, ДокументТСД, СокрЛП(ОписаниеОшибки));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти