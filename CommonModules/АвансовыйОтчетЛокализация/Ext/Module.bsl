
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
	//++ Локализация
	ОбновитьСчетаФактуры(Объект, РежимЗаписиДокумента.Проведение, Отказ);
	
	Если Объект.Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден Тогда
		ЗарегистрироватьОплатуНДСПоСчетамФактурам(Объект, Истина);
	КонецЕсли;
	//-- Локализация
	Возврат;
		
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	ИспользоватьСтатусыАвансовыхОтчетов = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыАвансовыхОтчетов");
	
	ОтразитьДокументВУчете = Не ИспользоватьСтатусыАвансовыхОтчетов
		Или ИспользоватьСтатусыАвансовыхОтчетов И Объект.Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден;
	
	ПроверитьСтатьюСписанияНДСВУчетнойПолитике = Ложь;
	
	Для ТекИндекс = 0 По Объект.ПрочиеРасходы.Количество()-1 Цикл
		
		ОтразитьСтрокуВУчете = ОтразитьДокументВУчете И Не Объект.ПрочиеРасходы[ТекИндекс].Отменено;
		
		АдресОшибки = СтрШаблон(НСтр("ru = 'в строке %1 списка ""Расходы""'"), Объект.ПрочиеРасходы[ТекИндекс].НомерСтроки);
		
		Если (Не ЗначениеЗаполнено(Объект.ПрочиеРасходы[ТекИндекс]["НомерСФ"]) Или Не ЗначениеЗаполнено(Объект.ПрочиеРасходы[ТекИндекс]["ДатаСФ"]))
			И Объект.ПрочиеРасходы[ТекИндекс]["ПредъявленСФ"]
			И Объект.ПрочиеРасходы[ТекИндекс]["СтавкаНДС"] <> Справочники.СтавкиНДС.БезНДС
			И ОтразитьСтрокуВУчете Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнены параметры счет-фактуры'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + " " + АдресОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРасходы", Объект.ПрочиеРасходы[ТекИндекс].НомерСтроки, "ПредставлениеСФ"),,
				Отказ);
		КонецЕсли;
		
		Если ОтразитьДокументВУчете И Объект.ПрочиеРасходы[ТекИндекс].СтавкаНДС <> Справочники.СтавкиНДС.БезНДС
			И Не Объект.ПрочиеРасходы[ТекИндекс].ПредъявленСФ И Не Объект.ПрочиеРасходы[ТекИндекс].БланкСтрогойОтчетности Тогда
			ПроверитьСтатьюСписанияНДСВУчетнойПолитике = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверитьСтатьюСписанияНДСВУчетнойПолитике Тогда
		Политика = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик(
			"НастройкиУчетаНДС", Объект.Организация, Объект.Дата);
		Если Политика <> Неопределено И Не ЗначениеЗаполнено(Политика.СтатьяРасходовСписаниеНДС) Тогда
			ТекстОшибки = НСтр("ru = 'Для списания НДС в расходы в действующей учетной политике должна быть заполнена статья списания.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект, "Организация",, Отказ);
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	//++ Локализация	
	ОбновитьСчетаФактуры(Объект, РежимЗаписиДокумента.ОтменаПроведения, Отказ);
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	//++ Локализация
	СгенерироватьСчетаФактуры(Объект, Отказ);
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	//++ Локализация
	
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(Объект);
	Если Не СвойстваДокумента.ЭтоНовый И СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ОбновитьСчетаФактуры(Объект, РежимЗаписиДокумента.Запись, Отказ);
	КонецЕсли;
	
	Если СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		Или Объект.Статус = Перечисления.СтатусыАвансовогоОтчета.Подготовлен Тогда
		ЗарегистрироватьОплатуНДСПоСчетамФактурам(Объект, Ложь);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	//++ Локализация
	Для каждого СтрокаТЧ Из Объект.ПрочиеРасходы Цикл
		СтрокаТЧ.ПредъявленСФ = Ложь;
		СтрокаТЧ.БланкСтрогойОтчетности = Ложь;
		СтрокаТЧ.НомерСФ = "";
		СтрокаТЧ.ДатаСФ = Неопределено;
		СтрокаТЧ.СчетФактура = Неопределено;
	КонецЦикла;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	//++ Локализация
	Документы.СчетФактураПолученныйАванс.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ЗаписьКнигиПокупок.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	//-- Локализация
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация
	Если ПравоДоступа("Изменение", Метаданные.Документы.АвансовыйОтчет) Тогда
		// Авансовый отчет
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "АвансовыйОтчет1";
		КомандаПечати.Представление = НСтр("ru = 'Авансовый отчет'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// Извещение
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьИзвещений";
		КомандаПечати.Идентификатор = "Извещение";
		КомандаПечати.Представление = НСтр("ru = 'Извещение'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//++ Локализация
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АвансовыйОтчет1")
		Или УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АвансовыйОтчет2")
		Или УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АвансовыйОтчет3")
		Или УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АвансовыйОтчет4") Тогда
		
		ДатаНачалаПечатиЕдиногоАвансовогоОтчета = Константы.ДатаНачалаПечатиЕдиногоАвансовогоОтчета.Получить();
		ЕдиныйАвансовыйОтчетБезусловно = Не Константы.ВидимостьДатыНачалаПечатиЕдиногоАвансовогоОтчета.Получить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.АвансовыйОтчет КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&МассивОбъектов)
		|	И (ДанныеДокумента.Дата >= &ДатаНачалаПечатиЕдиногоАвансовогоОтчета
		|		ИЛИ &ЕдиныйАвансовыйОтчетБезусловно)
		|";
		
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.УстановитьПараметр("ДатаНачалаПечатиЕдиногоАвансовогоОтчета", ДатаНачалаПечатиЕдиногоАвансовогоОтчета);
		Запрос.УстановитьПараметр("ЕдиныйАвансовыйОтчетБезусловно", ЕдиныйАвансовыйОтчетБезусловно);
		
		НовыеАвансовыеОтчеты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Если НовыеАвансовыеОтчеты.Количество() Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"АвансовыйОтчет1",
				НСтр("ru = 'Авансовый отчет'"),
				СформироватьПечатнуюФормуАвансовогоОтчета(НовыеАвансовыеОтчеты, ОбъектыПечати, ПараметрыПечати));
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.АвансовыйОтчет КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&МассивОбъектов)
		|	И (ДанныеДокумента.Дата < &ДатаНачалаПечатиЕдиногоАвансовогоОтчета
		|		ИЛИ НЕ &ДатаНачалаПечатиЕдиногоАвансовогоОтчетаУказана
		|			И НЕ &ЕдиныйАвансовыйОтчетБезусловно)
		|;
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&МассивОбъектов)
		|	И (ДанныеДокумента.Дата < &ДатаНачалаПечатиЕдиногоАвансовогоОтчета
		|		ИЛИ НЕ &ДатаНачалаПечатиЕдиногоАвансовогоОтчетаУказана
		|			И НЕ &ЕдиныйАвансовыйОтчетБезусловно)
		|;
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&МассивОбъектов)
		|;
		|";
		
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.УстановитьПараметр("ДатаНачалаПечатиЕдиногоАвансовогоОтчета", ДатаНачалаПечатиЕдиногоАвансовогоОтчета);
		Запрос.УстановитьПараметр("ДатаНачалаПечатиЕдиногоАвансовогоОтчетаУказана", ЗначениеЗаполнено(ДатаНачалаПечатиЕдиногоАвансовогоОтчета));
		Запрос.УстановитьПараметр("ЕдиныйАвансовыйОтчетБезусловно", ЕдиныйАвансовыйОтчетБезусловно);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		Для Инд = 0 По РезультатЗапроса.ВГраница() Цикл
			СтарыеАвансовыеОтчеты = РезультатЗапроса[Инд].Выгрузить().ВыгрузитьКолонку("Ссылка");
			Если СтарыеАвансовыеОтчеты.Количество() Тогда
				УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
					КоллекцияПечатныхФорм,
					"АвансовыйОтчет" + Строка(Инд + 1),
					НСтр("ru = 'Авансовый отчет'"),
					СформироватьПечатнуюФормуАвансовогоОтчетаСтараяВерсия(СтарыеАвансовыеОтчеты, ОбъектыПечати, ПараметрыПечати));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

//++ Локализация

// Функция получает данные для формирования печатной формы "Извещение"
//
// Параметры:
//	ПараметрыПечати - Структура
//	МассивОбъектов - Массив - Массив ссылок на документы, по которым необходимо получить данные.
//
// Возвращаемое значение:
// 	Структура:
// 		* РезультатПоШапке - РезультатЗапроса
//
Функция ПолучитьДанныеДляПечатнойФормыИзвещения(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	Документы.Организация КАК Организация,
	|	Документы.ПодотчетноеЛицо КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо) КАК КонтрагентЮрФизЛицо,
	|	Документы.БанковскийСчет КАК БанковскийСчет,
	|	Документы.БанковскийСчет.НомерСчета КАК НомерБанковскогоСчета,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.БИКБанка
	|		ИНАЧЕ КлассификаторБанков.Код
	|	КОНЕЦ КАК БИКБанк,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ КлассификаторБанков.Наименование
	|	КОНЕЦ КАК НаименованиеБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.КоррСчетБанка
	|		ИНАЧЕ КлассификаторБанков.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.ГородБанка
	|		ИНАЧЕ КлассификаторБанков.Город
	|	КОНЕЦ КАК ГородБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.БИКБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Код
	|	КОНЕЦ КАК БИКБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.ГородБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Город
	|	КОНЕЦ КАК ГородБанкаДляРасчетов,
	|	Документы.БанковскийСчет.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	Документы.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
	|	&НазначениеПлатежа КАК НазначениеПлатежа,
	|	Документы.СуммаИзрасходовано КАК СуммаДокумента
	|
	|ИЗ
	|	Документ.АвансовыйОтчет КАК Документы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.КлассификаторБанков КАК КлассификаторБанков
	|	ПО
	|		Документы.БанковскийСчет.Банк = КлассификаторБанков.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.КлассификаторБанков КАК КлассификаторБанковКорреспондентовРФ
	|	ПО
	|		Документы.БанковскийСчет.БанкДляРасчетов = КлассификаторБанковКорреспондентовРФ.Ссылка
	|	
	|ГДЕ
	|	Документы.Ссылка В (&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("НазначениеПлатежа", НСтр("ru = 'Возврат суммы, выданной под отчет.'"));
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

//-- Локализация

#КонецОбласти


//++ Локализация

// Определяет входящие в авансовый отчет документы закупки
//
// Параметры:
//    Ссылка - ДокументСсылка.АвансовыйОтчет - ссылка на авансовый отчет
//
// Возвращаемое значение:
//    Массив - Ссылки на документы закупки
//
Функция СписокДокументовЗакупки(Ссылка) Экспорт
	
	Результат = Новый Массив;
	Возврат Результат;
	
КонецФункции
//-- Локализация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация

Процедура СгенерироватьСчетаФактуры(Объект, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ПрочиеРасходы", Объект.ПрочиеРасходы.Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрочиеРасходы.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ПрочиеРасходы.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ПрочиеРасходы.ПредъявленСФ КАК ПредъявленСФ,
	|	ПрочиеРасходы.Контрагент КАК Контрагент,
	|	ПрочиеРасходы.БланкСтрогойОтчетности КАК БланкСтрогойОтчетности,
	|	ПрочиеРасходы.ДатаСФ КАК ДатаСФ,
	|	ПрочиеРасходы.НомерСФ КАК НомерСФ,
	|	ПрочиеРасходы.ПервичныйДокумент КАК ПервичныйДокумент,
	|	ПрочиеРасходы.ЭлектронныйБилет КАК ЭлектронныйБилет,
	|	ПрочиеРасходы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПрочиеРасходы.Валюта КАК Валюта,
	|	ПрочиеРасходы.СчетФактура КАК СчетФактура,
	|	ПрочиеРасходы.НаименованиеВходящегоДокумента КАК НаименованиеВходящегоДокумента
	|ПОМЕСТИТЬ ПрочиеРасходы
	|ИЗ
	|	&ПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
	|	(ПрочиеРасходы.ПредъявленСФ ИЛИ ПрочиеРасходы.БланкСтрогойОтчетности)
	|	И НЕ ПрочиеРасходы.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеРасходы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР КОГДА ПрочиеРасходы.ЭлектронныйБилет <> ЗНАЧЕНИЕ(Документ.Бронирование.ПустаяСсылка) ТОГДА
	|		ПрочиеРасходы.ЭлектронныйБилет
	|	ИНАЧЕ
	|		ПрочиеРасходы.ПервичныйДокумент
	|	КОНЕЦ КАК ДокументОснование,
	|	&Дата КАК Дата,
	|	&Организация КАК Организация,
	|	ПрочиеРасходы.Контрагент КАК Контрагент,
	|	ПрочиеРасходы.ПредъявленСФ КАК ПредъявленСФ,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходы.БланкСтрогойОтчетности
	|			ТОГДА ПрочиеРасходы.ДатаВходящегоДокумента
	|		ИНАЧЕ ПрочиеРасходы.ДатаСФ
	|	КОНЕЦ КАК ДатаСФ,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходы.БланкСтрогойОтчетности
	|			ТОГДА ПрочиеРасходы.НомерВходящегоДокумента
	|		ИНАЧЕ ПрочиеРасходы.НомерСФ
	|	КОНЕЦ КАК НомерСФ,
	|	ПрочиеРасходы.Валюта КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС) КАК НалогообложениеНДС,
	|	ПрочиеРасходы.НаименованиеВходящегоДокумента КАК НаименованиеДокумента
	|ИЗ
	|	ПрочиеРасходы КАК ПрочиеРасходы";
	
	ТаблицаОснований = Запрос.Выполнить().Выгрузить();
	ТаблицаСФ = УчетНДСРФ.ЗарегистрироватьСчетаФактурыПолученныеПоТаблицеОснований(ТаблицаОснований);
	
	Для Каждого СтрокаРасходов Из Объект.ПрочиеРасходы Цикл
		СтрокаСФ = ТаблицаСФ.Найти(СтрокаРасходов.ИдентификаторСтроки, "ИдентификаторСтроки");
		Если Не СтрокаСФ = Неопределено Тогда
			СтрокаРасходов.СчетФактура = СтрокаСФ.СчетФактура;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеРасходы.СчетФактура КАК Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
	|	НЕ ПрочиеРасходы.СчетФактура В (&СчетаФактурыНовыйСостав)
	|	И ПрочиеРасходы.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("СчетаФактурыНовыйСостав", ТаблицаСФ.ВыгрузитьКолонку("СчетФактура"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСчетаФактуры(Объект, РежимЗаписи, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ПометкаУдаления <> &ПометкаУдаления КАК ИзменитьПометкуУдаления,
	|	ДанныеДокумента.Проведен <> &Проведен И НЕ (ДанныеДокумента.ПометкаУдаления <> &ПометкаУдаления) КАК ИзменитьРежимЗаписи
	|ИЗ
	|	Документ.СчетФактураПолученный КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&СчетаФактурыОтчета)
	|	И (ДанныеДокумента.ПометкаУдаления <> &ПометкаУдаления
	|		ИЛИ ДанныеДокумента.Проведен <> &Проведен И &ПотенциальнаяСменаРежимаПроведения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ПометкаУдаления <> &ПометкаУдаления КАК ИзменитьПометкуУдаления,
	|	ДанныеДокумента.Проведен <> &Проведен И НЕ (ДанныеДокумента.ПометкаУдаления <> &ПометкаУдаления) КАК ИзменитьРежимЗаписи
	|ИЗ
	|	Документ.ИнойДокументПодтвержденияНДС КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&СчетаФактурыОтчета)
	|	И (ДанныеДокумента.ПометкаУдаления <> &ПометкаУдаления
	|		ИЛИ ДанныеДокумента.Проведен <> &Проведен И &ПотенциальнаяСменаРежимаПроведения)
	|";
	
	Запрос.УстановитьПараметр("СчетаФактурыОтчета", Объект.ПрочиеРасходы.ВыгрузитьКолонку("СчетФактура"));
	Запрос.УстановитьПараметр("ПометкаУдаления", Объект.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен", РежимЗаписи = РежимЗаписиДокумента.Проведение);
	Запрос.УстановитьПараметр("ПотенциальнаяСменаРежимаПроведения",
		РежимЗаписи = РежимЗаписиДокумента.Проведение Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения =
				СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.'"), ДокументОбъект);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецПопытки;
		
		Если Выборка.ИзменитьРежимЗаписи Тогда
			ДокументОбъект.Записать(РежимЗаписи);
		КонецЕсли;
		
		Если Выборка.ИзменитьПометкуУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Объект.ПометкаУдаления);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьОплатуНДСПоСчетамФактурам(Объект, Проведен)
	
	СчетаФактуры = УчетНДСРФ.НоваяТаблицаСчетовФактур();
	Для каждого СтрокаТЧ Из Объект.ПрочиеРасходы Цикл
		Если СтрокаТЧ.ПредъявленСФ ИЛИ СтрокаТЧ.БланкСтрогойОтчетности Тогда
			СтрокаСчетаФактуры = СчетаФактуры.Добавить();
			Если ЗначениеЗаполнено(СтрокаТЧ.ЭлектронныйБилет) Тогда
				СтрокаСчетаФактуры.СчетФактура = СтрокаТЧ.ЭлектронныйБилет;
			Иначе
				СтрокаСчетаФактуры.СчетФактура = СтрокаТЧ.ПервичныйДокумент;
			КонецЕсли;
			СтрокаСчетаФактуры.СуммаОплаты = СтрокаТЧ.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыДокументаОплаты = Новый Структура();
	РеквизитыДокументаОплаты.Вставить("ДатаПеречисленияВБюджет", Объект.Дата);
	РеквизитыДокументаОплаты.Вставить("НомерДокумента",
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер));
	РеквизитыДокументаОплаты.Вставить("ДатаДокумента",           Объект.Дата);
	РеквизитыДокументаОплаты.Вставить("ТипНалога",               Перечисления.ТипыНалогов.НДС);
	
	УчетНДСРФ.ЗарегистрироватьОплатуНДСПоСчетамФактурам(СчетаФактуры, Объект.Ссылка, РеквизитыДокументаОплаты, Проведен);
	
КонецПроцедуры

//-- Локализация

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры
//++ Локализация
//-- Локализация

#КонецОбласти

#Область Интерфейс

Функция ТекстАвансовыйОтчет(АвансовыйОтчет) Экспорт
	
	Результат = "";
	
	Если ЗначениеЗаполнено(АвансовыйОтчет) Тогда
		
		СтрокаСсылка = Новый ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = 'Включен в %1'"), Строка(АвансовыйОтчет)),,,, ПолучитьНавигационнуюСсылку(АвансовыйОтчет));
		СтрокаОчистить = Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить,,,, "ОчиститьАвансовыйОтчет");
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(СтрокаСсылка);
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(СтрокаОчистить);
		
		Результат = Новый ФорматированнаяСтрока(МассивСтрок);
	Иначе
		Результат = Новый ФорматированнаяСтрока(НСтр("ru = 'Включить в авансовый отчет'"),,,, "ВключитьВАвансовыйОтчет");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПечатьСлужебные

//++ Локализация
Функция СформироватьПечатнуюФормуАвансовогоОтчета(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ШаблонОшибки = НСтр("ru = 'Печать АО-1 используется только для документов с операцией ""Закупка через подотчетное лицо"".'");
	
	ИспользуетсяРеглУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаПечати(ИспользуетсяРеглУчет);
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	РегистраторыДенежныеСредстваВыдано = ВводОстатковСервер.ДоступныеТипыВводаОстатков();
	РегистраторыДенежныеСредстваВыдано.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	РегистраторыДенежныеСредстваВыдано.Добавить(Тип("ДокументСсылка.Бронирование"));
	Запрос.УстановитьПараметр("РегистраторыДенежныеСредстваВыдано", РегистраторыДенежныеСредстваВыдано);
	
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = МассивРезультатов[13].Выбрать();
	ВыборкаПоказатели = МассивРезультатов[12].Выбрать();
	ВыборкаКонвертация = МассивРезультатов[15].Выбрать();
	ВыборкаОборотнаяСторона = МассивРезультатов[14].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ИспользуетсяРеглУчет Тогда
		ВыборкаПроводок = МассивРезультатов[18].Выбрать();
		ВыборкаСчетов = МассивРезультатов[19].Выбрать();
		ВыборкаСчетовУточнение = МассивРезультатов[19].Выбрать();
		Проводки = МассивРезультатов[18].Выгрузить();
	Иначе
		ВыборкаПроводок = МассивРезультатов[16].Выбрать();
		ВыборкаСчетов = МассивРезультатов[16].Выбрать();
		ВыборкаСчетовУточнение = МассивРезультатов[16].Выбрать();
		Проводки = МассивРезультатов[16].Выгрузить();
	КонецЕсли;
	
	Если МассивРезультатов[13].Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ШаблонОшибки);
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	Пока Выборка.Следующий() Цикл
		
		ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Выборка.Организация);
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ПечатьВИностраннойВалюте = Выборка.Мультивалютный;
		Если ПечатьВИностраннойВалюте Тогда
			ИмяМакета = "Документ.АвансовыйОтчет.ПФ_MXL_АвансовыйОтчетВИностраннойВалюте_ru";
		Иначе
			ИмяМакета = "Документ.АвансовыйОтчет.ПФ_MXL_АвансовыйОтчет_ru";
		КонецЕсли;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
		Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьТитул = Макет.ПолучитьОбласть("Титул");
		ОбластьТитулПодвал = Макет.ПолучитьОбласть("ТитулПодвал");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьТитул, Выборка.Ссылка);
		
		ОбластьТитул.Параметры.Заполнить(Выборка);
		ОбластьТитул.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер);
		ОбластьТитул.Параметры.РуководительПредставление = Выборка.Руководитель;
		
		ОбластьТитулПодвал.Параметры.Заполнить(Выборка);
		ОбластьТитулПодвал.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер);
		ОбластьТитулПодвал.Параметры.ГлавныйБухгалтерПредставление = Выборка.ГлавныйБухгалтер;
		
		
		СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
		
		Если Не ПечатьВИностраннойВалюте Тогда
			
			ПолученоИзКассы = 0; ПолученоПоБанковскимКартам = 0;
			ПолученоИзКассыВВалюте = ""; ПолученоПоБанковскимКартамВВалюте = "";
			НачальныйОстаток = 0; НачальныйПерерасход = 0;
			КонечныйОстаток = 0; КонечныйПерерасход = 0;
			Израсходовано = 0;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				
				Если ВыборкаПоказатели.Валюта <> ВалютаРегламентированногоУчета Тогда
					Если ВыборкаПоказатели.СуммаВыданоНаличными > 0 Тогда
						ПолученоИзКассыВВалюте = ПолученоИзКассыВВалюте
							+ " " + Строка(ВыборкаПоказатели.СуммаВыданоНаличными)
							+ " " + Строка(ВыборкаПоказатели.Валюта) + " ";
					КонецЕсли;
					Если ВыборкаПоказатели.СуммаВыданоКартой > 0 Тогда
						ПолученоПоБанковскимКартамВВалюте = ПолученоПоБанковскимКартамВВалюте
							+ " " + Строка(ВыборкаПоказатели.СуммаВыданоКартой)
							+ " " + Строка(ВыборкаПоказатели.Валюта) + " ";
					КонецЕсли;
				КонецЕсли;
				
				ПолученоИзКассы = ПолученоИзКассы + ВыборкаПоказатели.СуммаВыданоНаличнымиРегл;
				ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам + ВыборкаПоказатели.СуммаВыданоКартойРегл;
				
				НачальныйОстаток = НачальныйОстаток + ВыборкаПоказатели.НачальныйОстатокРегл;
				НачальныйПерерасход = НачальныйПерерасход + ВыборкаПоказатели.НачальныйПерерасходРегл;
				КонечныйОстаток = КонечныйОстаток + ВыборкаПоказатели.КонечныйОстатокРегл;
				КонечныйПерерасход = КонечныйПерерасход + ВыборкаПоказатели.КонечныйПерерасходРегл;
				Израсходовано = Израсходовано + ВыборкаПоказатели.СуммаИзрасходованоРегл;
			КонецЦикла;
			
			ВыборкаПоказатели.Сбросить();
			
			ВыводитьВалюту = Истина;
			Если НачальныйПерерасход > 0 И (ПолученоИзКассы > 0 Или ПолученоПоБанковскимКартам > 0) Тогда
				ВыводитьВалюту = Ложь;
			КонецЕсли;
			
			Если НачальныйПерерасход > 0 Тогда
				СуммаВозмещения = Мин(НачальныйПерерасход, ПолученоИзКассы);
				ПолученоИзКассы = ПолученоИзКассы - СуммаВозмещения;
				НачальныйПерерасход = НачальныйПерерасход - СуммаВозмещения;
			КонецЕсли;
			
			Если НачальныйПерерасход > 0 Тогда
				СуммаВозмещения = Мин(НачальныйПерерасход, ПолученоПоБанковскимКартам);
				ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам - СуммаВозмещения;
				НачальныйПерерасход = НачальныйПерерасход - СуммаВозмещения;
			КонецЕсли;
			
			ОбластьТитул.Параметры.ПолученоИзКассы = ПолученоИзКассы;
			ОбластьТитул.Параметры.ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам;
			ОбластьТитул.Параметры.ИтогоПолучено = ПолученоИзКассы + ПолученоПоБанковскимКартам;
			Если ВыводитьВалюту Тогда
				ОбластьТитул.Параметры.ПолученоИзКассыВВалюте = ПолученоИзКассыВВалюте;
				ОбластьТитул.Параметры.ПолученоПоБанковскимКартамВВалюте = ПолученоПоБанковскимКартамВВалюте;
			КонецЕсли;
			ОбластьТитул.Параметры.НачальныйОстаток = НачальныйОстаток;
			ОбластьТитул.Параметры.НачальныйПерерасход = НачальныйПерерасход;
			ОбластьТитул.Параметры.КонечныйОстаток = КонечныйОстаток;
			ОбластьТитул.Параметры.КонечныйПерерасход = КонечныйПерерасход;
			ОбластьТитул.Параметры.Израсходовано = Израсходовано;
			
			ОбластьТитулПодвал.Параметры.СуммаОтчетаПрописью =
				РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(Израсходовано, ВалютаРегламентированногоУчета, Ложь);
			
			ИспСумма = Окр(Израсходовано, 2, 1);
			ЦелСумма = Цел(Израсходовано);
			КопСумма = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));
			
			ОбластьТитул.Параметры.ИзрасходованоРуб = ЦелСумма;
			ОбластьТитул.Параметры.ИзрасходованоКоп = Формат(КопСумма,"ЧН=00");
			
			Счетчик = 0;
			Проводки.Свернуть("Регистратор, СчетДт, СчетКт", "Сумма");
			СтруктураПоиска = Новый Структура("Регистратор", Выборка.Ссылка);
			НайденныеПроводки = Проводки.НайтиСтроки(СтруктураПоиска);
			Для каждого Проводка Из НайденныеПроводки Цикл
				Счетчик = Счетчик + 1;
				Если Счетчик < 9 Тогда
					ОбластьТитул.Параметры["СубСчетДебет"  + Счетчик] = Проводка.СчетДт;
					ОбластьТитул.Параметры["СуммаДебет"    + Счетчик] = Проводка.Сумма;
					ОбластьТитул.Параметры["СубСчетКредит" + Счетчик] = Проводка.СчетКт;
					ОбластьТитул.Параметры["СуммаКредит"   + Счетчик] = Проводка.Сумма;
				Иначе
					Если Счетчик = 9 Тогда
						ТабличныйДокумент.Вывести(ОбластьТитул);
					КонецЕсли;
					ОбластьПроводок = Макет.ПолучитьОбласть("СтрокаПроводок");
					ОбластьПроводок.Параметры["СубСчетДебет" ] = Проводка.СчетДт;
					ОбластьПроводок.Параметры["СуммаДебет"   ] = Проводка.Сумма;
					ОбластьПроводок.Параметры["СубСчетКредит"] = Проводка.СчетКт;
					ОбластьПроводок.Параметры["СуммаКредит"  ] = Проводка.Сумма;
					ТабличныйДокумент.Вывести(ОбластьПроводок);
				КонецЕсли;
			КонецЦикла;
			
			Если Счетчик < 9 Тогда
				ТабличныйДокумент.Вывести(ОбластьТитул);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьТитулПодвал);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Оборотная сторона
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			
			ИтогоПоОтчету = 0;
			ИтогоПоОтчетуВВалюте = 0;
			ИтогоПоУчету = 0;
			ИтогоПоУчетуВВалюте = 0;
			
			НомерСтроки = 0;
			
			СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
			ВыборкаОборотнаяСторона.НайтиСледующий(СтруктураПоиска);
			
			ОбработанныеНомераСтрок = Новый Массив;
			ТекущийРаздел = 0;
			
			ВыборкаПоРасходам = ВыборкаОборотнаяСторона.Выбрать();
			Пока ВыборкаПоРасходам.Следующий() Цикл
				
				Если ТекущийРаздел <> ВыборкаПоРасходам.НомерРаздела Тогда
					ОбработанныеНомераСтрок.Очистить();
					ТекущийРаздел = ВыборкаПоРасходам.НомерРаздела;
				КонецЕсли;
				
				Если ОбработанныеНомераСтрок.Найти(ВыборкаПоРасходам.НомерСтроки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбработанныеНомераСтрок.Добавить(ВыборкаПоРасходам.НомерСтроки);
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаПоРасходам);
				НомерСтроки = НомерСтроки + 1;
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				
				ИтогоПоОтчету = ИтогоПоОтчету + ВыборкаПоРасходам.ПоОтчету;
				ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте + ВыборкаПоРасходам.ПоОтчетуВВалюте;
				ИтогоПоУчету = ИтогоПоУчету + ВыборкаПоРасходам.ПоУчету;
				ИтогоПоУчетуВВалюте = ИтогоПоУчетуВВалюте + ВыборкаПоРасходам.ПоУчетуВВалюте;
				
				ОбластьМакета.Параметры.ДебетСубСчета = "";
				
				Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда // Оплата и прочие расходы
					
					МассивСчетов = Новый Массив;
					
					Если ЗначениеЗаполнено(ВыборкаПоРасходам.СчетУчета) Тогда
						
						МассивСчетов.Добавить(ВыборкаПоРасходам.СчетУчета);
					Иначе
						
						Если ИспользуетсяРеглУчет Тогда
						
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
							СтруктураПоиска.Вставить("ДокументДвижения", ВыборкаПоРасходам.ДокументДвижения);
							СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.СтатьяРасходов);
							
							ВыборкаСчетов.Сбросить();
						
							Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
								МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
							КонецЦикла;
							
							СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.АналитикаРасходов);
							
							ВыборкаСчетов.Сбросить();
							Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
								МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
							КонецЦикла;
							
							// НДС
							Если ВыборкаПоРасходам.НомерРаздела = 1 И ВыборкаПоРасходам.СуммаНДС <> 0 Тогда
								
								СтруктураПоиска = Новый Структура;
								СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
								СтруктураПоиска.Вставить("ДокументДвижения", ВыборкаПоРасходам.ДокументДвижения);
								СтруктураПоиска.Вставить("ЗначениеСубконто",
									?(ЗначениеЗаполнено(ВыборкаПоРасходам.Контрагент), ВыборкаПоРасходам.Контрагент, Неопределено));
								
								ВыборкаСчетов.Сбросить();
								Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
									
									СтруктураПоискаУточнение = Новый Структура;
									СтруктураПоискаУточнение.Вставить("СчетДт",           ВыборкаСчетов.СчетДт);
									СтруктураПоискаУточнение.Вставить("Регистратор",      Выборка.Ссылка);
									Если ЗначениеЗаполнено(ВыборкаПоРасходам.ПервичныйДокумент) Тогда
										СтруктураПоискаУточнение.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.ПервичныйДокумент);
									Иначе
										СтруктураПоискаУточнение.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.Ссылка);
									КонецЕсли;
									
									ВыборкаСчетовУточнение.Сбросить();
									Пока ВыборкаСчетовУточнение.НайтиСледующий(СтруктураПоискаУточнение) Цикл
										МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
									КонецЦикла;
								КонецЦикла;
							КонецЕсли;
							
							// Оплата
							Если ВыборкаПоРасходам.НомерРаздела = 2 Тогда
								
								СтруктураПоиска = Новый Структура;
								СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
								СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.КонтрагентОплаты);
								
								ВыборкаСчетов.Сбросить();
								Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
									
									СтруктураПоискаУточнение = Новый Структура;
									СтруктураПоискаУточнение.Вставить("СчетДт",           ВыборкаСчетов.СчетДт);
									СтруктураПоискаУточнение.Вставить("Регистратор",      Выборка.Ссылка);
									СтруктураПоискаУточнение.Вставить("ЗначениеСубконто", Выборка.Ссылка);
									
									ВыборкаСчетовУточнение.Сбросить();
									Если Не ВыборкаСчетовУточнение.НайтиСледующий(СтруктураПоискаУточнение) Тогда
										МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						Иначе
							
							Если ВыборкаПоРасходам.НомерРаздела = 0 Тогда // Закупка
								
								СтруктураПоиска = Новый Структура();
								СтруктураПоиска.Вставить("Регистратор", Выборка.Ссылка);
								
								ВыборкаПроводок.Сбросить();
								МассивСчетов = Новый Массив;
								
								Пока ВыборкаПроводок.НайтиСледующий(СтруктураПоиска) Цикл
									МассивСчетов.Добавить(ВыборкаПроводок.СчетДт);
								КонецЦикла;
								
							Иначе
								
								СтруктураПоиска = Новый Структура;
								СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
								СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.СтатьяРасходов);
								
								ВыборкаСчетов.Сбросить();
								Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
									МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
								КонецЦикла;
								
								СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.АналитикаРасходов);
								
								ВыборкаСчетов.Сбросить();
								Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
									МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
								КонецЦикла;
								
								СтруктураПоиска = Новый Структура;
								СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
								СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.КонтрагентОплаты);
								
								ВыборкаСчетов.Сбросить();
								Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
									МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);
				Для каждого СчетДт Из МассивСчетов Цикл
					ОбластьМакета.Параметры.ДебетСубСчета = ОбластьМакета.Параметры.ДебетСубСчета
						+ ?(ПустаяСтрока(ОбластьМакета.Параметры.ДебетСубСчета), "", ", ")
						+ СчетДт;
				КонецЦикла;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			// Подвал авансового отчета
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ОбластьМакета.Параметры.ИтогоПоОтчету                 = ИтогоПоОтчету;
			ОбластьМакета.Параметры.ИтогоПоОтчетувВалюте          = ИтогоПоОтчетуВВалюте;
			ОбластьМакета.Параметры.ИтогоПоУчету                  = ИтогоПоУчету;
			ОбластьМакета.Параметры.ИтогоПоУчетувВалюте           = ИтогоПоУчетуВВалюте;
			ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = Выборка.ПредставлениеПодотчетногоЛица;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ВыборкаОборотнаяСторона.Сбросить();
			
		Иначе // Валютный отчет
			
			ТабличныйДокумент.Вывести(ОбластьТитул);
			
			Область = Макет.ПолучитьОбласть("Титул1|Показатели");
			ТабличныйДокумент.Вывести(Область);
			ЕстьСтрокаКонвертации = ВыборкаКонвертация.НайтиСледующий(СтруктураПоиска);
			Если ЕстьСтрокаКонвертации Тогда
				Область = Макет.ПолучитьОбласть("Титул1|Конвертация");
				ТабличныйДокумент.Присоединить(Область);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.НачальныйОстаток <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.НачальныйОстаток;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул2|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.НачальныйПерерасход <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.НачальныйПерерасход;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул3|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.СуммаВыданоНаличными <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.СуммаВыданоНаличными;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул4|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.СуммаВыданоКартой <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.СуммаВыданоКартой;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул5|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.СуммаИзрасходовано <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.СуммаИзрасходовано;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул6|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.КонечныйОстаток <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.КонечныйОстаток;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул7|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Пока ЕстьСтрокаКонвертации Цикл
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЦикла;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.КонечныйПерерасход <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.КонечныйПерерасход;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			ТабличныйДокумент.Вывести(ОбластьТитулПодвал);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Оборотная сторона
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			
			НомерСтроки = 0;
			
			СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
			ВыборкаОборотнаяСторона.НайтиСледующий(СтруктураПоиска);
			
			ОбработанныеНомераСтрок = Новый Массив;
			ТекущийРаздел = 0;
			
			ВыборкаПоРасходам = ВыборкаОборотнаяСторона.Выбрать();
			Пока ВыборкаПоРасходам.Следующий() Цикл
				
				Если ТекущийРаздел <> ВыборкаПоРасходам.НомерРаздела Тогда
					ОбработанныеНомераСтрок.Очистить();
					ТекущийРаздел = ВыборкаПоРасходам.НомерРаздела;
				КонецЕсли;
				
				Если ОбработанныеНомераСтрок.Найти(ВыборкаПоРасходам.НомерСтроки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбработанныеНомераСтрок.Добавить(ВыборкаПоРасходам.НомерСтроки);
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаПоРасходам);
				НомерСтроки = НомерСтроки + 1;
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			// Подвал авансового отчета
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ВыборкаОборотнаяСторона.Сбросить();
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТекстЗапросаПечати(ИспользуетсяРеглУчет)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|			ТОГДА ДанныеРегистра.Регистратор
	|		КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПриобретениеТоваровУслуг).АвансовыйОтчет
	|		КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.Бронирование
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.Бронирование).АвансовыйОтчет
	|	КОНЕЦ КАК Ссылка,
	|	МАКСИМУМ(ДанныеРегистра.Период) КАК ПериодОтчет,
	|	МИНИМУМ(ДанныеРегистра.Период) КАК НачальныйПериодОтчет
	|ПОМЕСТИТЬ ВТПериоды1
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДанныеРегистра
	|ГДЕ
	|	(ДанныеРегистра.Регистратор В (&МассивДокументов)
	|			ИЛИ ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПриобретениеТоваровУслуг).АвансовыйОтчет В (&МассивДокументов)
	|			ИЛИ (ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.Бронирование).АвансовыйОтчет В (&МассивДокументов)
	|				И ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.Бронирование).ПодотчетноеЛицо = ДанныеРегистра.ПодотчетноеЛицо)
	|			)
	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.ПодотчетноеЛицо,
	|	ДанныеРегистра.Подразделение,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|			ТОГДА ДанныеРегистра.Регистратор
	|		КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПриобретениеТоваровУслуг).АвансовыйОтчет
	|		КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.Бронирование
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.Бронирование).АвансовыйОтчет
	|	КОНЕЦ
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериоды.Организация КАК Организация,
	|	ВТПериоды.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение КАК Подразделение,
	|	ВТПериоды.Ссылка КАК Ссылка,
	|	ВТПериоды.НачальныйПериодОтчет КАК НачальныйПериодОтчет,
	|	МАКСИМУМ(ДанныеРегистра.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ВТПериоды2
	|ИЗ
	|	ВТПериоды1 КАК ВТПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДанныеРегистра
	|		ПО (ДанныеРегистра.Организация = ВТПериоды.Организация)
	|			И (ДанныеРегистра.ПодотчетноеЛицо = ВТПериоды.ПодотчетноеЛицо)
	|			И (ДанныеРегистра.Подразделение = ВТПериоды.Подразделение)
	|			И (ДанныеРегистра.Период = ВТПериоды.ПериодОтчет)
	|			И (ВЫБОР
	|				КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|					ТОГДА ДанныеРегистра.Регистратор
	|				КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|					ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПриобретениеТоваровУслуг).АвансовыйОтчет
	|				КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.Бронирование
	|					ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.Бронирование).АвансовыйОтчет
	|			КОНЕЦ = ВТПериоды.Ссылка)
	
	|СГРУППИРОВАТЬ ПО
	|	ВТПериоды.Организация,
	|	ВТПериоды.ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение,
	|	ВТПериоды.Ссылка,
	|	ВТПериоды.НачальныйПериодОтчет
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериоды.Организация КАК Организация,
	|	ВТПериоды.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение КАК Подразделение,
	|	ВТПериоды.Ссылка КАК Ссылка,
	|	ВТПериоды.НачальныйПериодОтчет КАК НачальныйПериодОтчет,
	|	ВТПериоды.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ВТПериоды.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|			ТОГДА ВЫРАЗИТЬ(ВТПериоды.Регистратор КАК Документ.АвансовыйОтчет).МоментВремени
	|		КОГДА ВТПериоды.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ВТПериоды.Регистратор КАК Документ.ПриобретениеТоваровУслуг).МоментВремени
	|		КОГДА ВТПериоды.Регистратор ССЫЛКА Документ.Бронирование
	|			ТОГДА ВЫРАЗИТЬ(ВТПериоды.Регистратор КАК Документ.Бронирование).МоментВремени
	|	КОНЕЦ КАК МоментВремениТекущийОтчет
	|ПОМЕСТИТЬ ВТПериоды3
	|ИЗ
	|	ВТПериоды2 КАК ВТПериоды
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериоды.Организация КАК Организация,
	|	ВТПериоды.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение КАК Подразделение,
	|	ВТПериоды.Ссылка КАК Ссылка,
	|	ВТПериоды.Регистратор КАК Регистратор,
	|	ВТПериоды.МоментВремениТекущийОтчет КАК МоментВремениТекущийОтчет,
	|	МАКСИМУМ(ДанныеРегистра.Регистратор) КАК НачальныйРегистратор
	|ПОМЕСТИТЬ ВТПериоды4
	|ИЗ
	|	ВТПериоды3 КАК ВТПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДанныеРегистра
	|		ПО (ДанныеРегистра.Организация = ВТПериоды.Организация)
	|			И (ДанныеРегистра.ПодотчетноеЛицо = ВТПериоды.ПодотчетноеЛицо)
	|			И (ДанныеРегистра.Подразделение = ВТПериоды.Подразделение)
	|			И (ДанныеРегистра.Период = ВТПериоды.НачальныйПериодОтчет)
	|			И (ВЫБОР
	|				КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|					ТОГДА ДанныеРегистра.Регистратор
	|				КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|					ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПриобретениеТоваровУслуг).АвансовыйОтчет
	|				КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.Бронирование
	|					ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.Бронирование).АвансовыйОтчет
	|			КОНЕЦ = ВТПериоды.Ссылка)
	
	|СГРУППИРОВАТЬ ПО
	|	ВТПериоды.Организация,
	|	ВТПериоды.ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение,
	|	ВТПериоды.Ссылка,
	|	ВТПериоды.Регистратор,
	|	ВТПериоды.МоментВремениТекущийОтчет
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериоды.Организация КАК Организация,
	|	ВТПериоды.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение КАК Подразделение,
	|	ВТПериоды.Ссылка КАК Ссылка,
	|	ВТПериоды.Регистратор КАК Регистратор,
	|	ВТПериоды.МоментВремениТекущийОтчет,
	|	ВЫБОР
	|		КОГДА ВТПериоды.НачальныйРегистратор ССЫЛКА Документ.АвансовыйОтчет
	|			ТОГДА ВЫРАЗИТЬ(ВТПериоды.НачальныйРегистратор КАК Документ.АвансовыйОтчет).МоментВремени
	|		КОГДА ВТПериоды.НачальныйРегистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ВТПериоды.НачальныйРегистратор КАК Документ.ПриобретениеТоваровУслуг).МоментВремени
	|		КОГДА ВТПериоды.НачальныйРегистратор ССЫЛКА Документ.Бронирование
	|			ТОГДА ВЫРАЗИТЬ(ВТПериоды.НачальныйРегистратор КАК Документ.Бронирование).МоментВремени
	|	КОНЕЦ КАК НачальныйМоментВремениТекущийОтчет
	|ПОМЕСТИТЬ ВТПериоды5
	|ИЗ
	|	ВТПериоды4 КАК ВТПериоды
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериоды.Организация КАК Организация,
	|	ВТПериоды.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение КАК Подразделение,
	|	ВТПериоды.Ссылка КАК Ссылка,
	|	ВТПериоды.Регистратор КАК Регистратор,
	|	ВТПериоды.МоментВремениТекущийОтчет КАК МоментВремениТекущийОтчет,
	|	МАКСИМУМ(ДанныеРегистра.Период) КАК ПериодПредыдущийОтчет
	|ПОМЕСТИТЬ ВТПериоды6
	|ИЗ
	|	ВТПериоды5 КАК ВТПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДанныеРегистра
	|		ПО (ДанныеРегистра.Организация = ВТПериоды.Организация)
	|			И (ДанныеРегистра.ПодотчетноеЛицо = ВТПериоды.ПодотчетноеЛицо)
	|			И (ДанныеРегистра.Подразделение = ВТПериоды.Подразделение)
	|			И (ДанныеРегистра.МоментВремени < ВТПериоды.НачальныйМоментВремениТекущийОтчет)
	|			И (ДанныеРегистра.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|				ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|				ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.Бронирование
	|			)
	
	|СГРУППИРОВАТЬ ПО
	|	ВТПериоды.Организация,
	|	ВТПериоды.ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение,
	|	ВТПериоды.Ссылка,
	|	ВТПериоды.Регистратор,
	|	ВТПериоды.МоментВремениТекущийОтчет
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериоды.Организация,
	|	ВТПериоды.ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение,
	|	ВТПериоды.Ссылка,
	|	ВТПериоды.Регистратор,
	|	ВТПериоды.МоментВремениТекущийОтчет,
	|	МАКСИМУМ(ДанныеРегистра.Регистратор) КАК ПредыдущийОтчет
	|ПОМЕСТИТЬ ВТПериоды7
	|ИЗ
	|	ВТПериоды6 КАК ВТПериоды
	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДанныеРегистра
	|	ПО
	|		ДанныеРегистра.Организация = ВТПериоды.Организация
	|		И ДанныеРегистра.ПодотчетноеЛицо = ВТПериоды.ПодотчетноеЛицо
	|		И ДанныеРегистра.Подразделение = ВТПериоды.Подразделение
	|		И ДанныеРегистра.Период = ВТПериоды.ПериодПредыдущийОтчет
	|		И (ДанныеРегистра.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|			ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.Бронирование
	|			)
	
	|СГРУППИРОВАТЬ ПО
	|	ВТПериоды.Организация,
	|	ВТПериоды.ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение,
	|	ВТПериоды.Ссылка,
	|	ВТПериоды.Регистратор,
	|	ВТПериоды.МоментВремениТекущийОтчет
	|;
	|	
	|ВЫБРАТЬ
	|	ВТПериоды.Организация,
	|	ВТПериоды.ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение,
	|	ВТПериоды.Ссылка,
	|	ВТПериоды.Регистратор,
	|	ВТПериоды.МоментВремениТекущийОтчет,
	|	ВЫБОР
	|		КОГДА ВТПериоды.ПредыдущийОтчет ССЫЛКА Документ.АвансовыйОтчет ТОГДА
	|			ВЫРАЗИТЬ(ВТПериоды.ПредыдущийОтчет КАК Документ.АвансовыйОтчет).МоментВремени
	|		КОГДА ВТПериоды.ПредыдущийОтчет ССЫЛКА Документ.ПриобретениеТоваровУслуг ТОГДА
	|			ВЫРАЗИТЬ(ВТПериоды.ПредыдущийОтчет КАК Документ.ПриобретениеТоваровУслуг).МоментВремени
	|		КОГДА ВТПериоды.ПредыдущийОтчет ССЫЛКА Документ.Бронирование ТОГДА
	|			ВЫРАЗИТЬ(ВТПериоды.ПредыдущийОтчет КАК Документ.Бронирование).МоментВремени
	|	КОНЕЦ КАК МоментВремениПредыдущийОтчет
	|ПОМЕСТИТЬ АвансовыйОтчетНаПечатьВТ3
	|ИЗ
	|	ВТПериоды7 КАК ВТПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 8
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	ДенежныеСредстваВыдано.Валюта,
	|	
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ТИПЗНАЧЕНИЯ(ДенежныеСредстваВыдано.Регистратор) В (&РегистраторыДенежныеСредстваВыдано) ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВыданоНаличными,
	|	
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ТИПЗНАЧЕНИЯ(ДенежныеСредстваВыдано.Регистратор) В (&РегистраторыДенежныеСредстваВыдано) ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.СуммаРегл, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВыданоНаличнымиРегл,
	|
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ДенежныеСредстваВыдано.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВыданоКартой,
	|	
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ДенежныеСредстваВыдано.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.СуммаРегл, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВыданоКартойРегл
	|
	|ПОМЕСТИТЬ Выдано
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредстваВыдано
	|	ПО
	|		((ДенежныеСредстваВыдано.МоментВремени > АвансовыйОтчетНаПечатьВТ3.МоментВремениПредыдущийОтчет ИЛИ АвансовыйОтчетНаПечатьВТ3.МоментВремениПредыдущийОтчет ЕСТЬ NULL)
	|			И ДенежныеСредстваВыдано.МоментВремени < АвансовыйОтчетНаПечатьВТ3.МоментВремениТекущийОтчет)
	|		И ДенежныеСредстваВыдано.Организация = АвансовыйОтчетНаПечатьВТ3.Организация
	|		И ДенежныеСредстваВыдано.Подразделение = АвансовыйОтчетНаПечатьВТ3.Подразделение
	|		И ДенежныеСредстваВыдано.ПодотчетноеЛицо = АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	ДенежныеСредстваВыдано.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ // 9
	|	Израсходовано.Ссылка КАК Ссылка,
	|	Израсходовано.Валюта КАК Валюта,
	|	СУММА(Израсходовано.Сумма) КАК СуммаИзрасходовано,
	|	СУММА(Израсходовано.СуммаРегл) КАК СуммаИзрасходованоРегл
	|ПОМЕСТИТЬ Израсходовано
	|ИЗ (
	|	ВЫБРАТЬ
	|		АвансовыйОтчетНаПечатьВТ3.Ссылка КАК Ссылка,
	|		ДенежныеСредства.Валюта,
	|		ЕСТЬNULL(СУММА(ДенежныеСредства.Сумма), 0) КАК Сумма,
	|		ЕСТЬNULL(СУММА(ДенежныеСредства.СуммаРегл), 0) КАК СуммаРегл
	|	ИЗ
	|		АвансовыйОтчетНаПечатьВТ3
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|		ПО
	|			ДенежныеСредства.Регистратор = АвансовыйОтчетНаПечатьВТ3.Ссылка
	|			И ДенежныеСредства.Организация = АвансовыйОтчетНаПечатьВТ3.Организация
	|			И ДенежныеСредства.Подразделение = АвансовыйОтчетНаПечатьВТ3.Подразделение
	|			И ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ДенежныеСредства.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалютыПодотчетнымЛицом)
	|	СГРУППИРОВАТЬ ПО
	|		АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|		ДенежныеСредства.Валюта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.АвансовыйОтчет КАК Ссылка,
	|		ДенежныеСредства.Валюта,
	|		ДенежныеСредства.СуммаРасход КАК Сумма,
	|		ДенежныеСредства.СуммаРеглРасход КАК СуммаРегл
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Обороты(,, Регистратор) КАК ДенежныеСредства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ДенежныеСредства.Регистратор
	|	ГДЕ
	|		ДанныеДокумента.АвансовыйОтчет В (&МассивДокументов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.АвансовыйОтчет КАК Ссылка,
	|		ДенежныеСредства.Валюта,
	|		ДенежныеСредства.СуммаРасход КАК Сумма,
	|		ДенежныеСредства.СуммаРеглРасход КАК СуммаРегл
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Обороты(,, Регистратор) КАК ДенежныеСредства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Бронирование КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ДенежныеСредства.Регистратор
	|	ГДЕ
	|		ДанныеДокумента.АвансовыйОтчет В (&МассивДокументов)
	|		
	|	) КАК Израсходовано
	|СГРУППИРОВАТЬ ПО
	|	Израсходовано.Ссылка,
	|	Израсходовано.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ // 10
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	ДенежныеСредства.Организация,
	|	ДенежныеСредства.Подразделение,
	|	ДенежныеСредства.ПодотчетноеЛицо,
	|	ДенежныеСредства.Подразделение,
	|	ДенежныеСредства.Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДенежныеСредства.СуммаКонечныйОстаток, 0) > 0 ТОГДА
	|			ДенежныеСредства.СуммаКонечныйОстаток
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КонечныйОстаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДенежныеСредства.СуммаКонечныйОстаток, 0) < 0 ТОГДА
	|			-ДенежныеСредства.СуммаКонечныйОстаток
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КонечныйПерерасход,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДенежныеСредства.СуммаРеглКонечныйОстаток, 0) > 0 ТОГДА
	|			ДенежныеСредства.СуммаРеглКонечныйОстаток
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КонечныйОстатокРегл,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДенежныеСредства.СуммаРеглКонечныйОстаток, 0) < 0 ТОГДА
	|			-ДенежныеСредства.СуммаРеглКонечныйОстаток
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КонечныйПерерасходРегл
	|ПОМЕСТИТЬ ТекущийАвансВрем
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.ОстаткиИОбороты(,, Регистратор,,
	|			(Организация, Подотчетноелицо, Подразделение) В (ВЫБРАТЬ Организация, Подотчетноелицо, Подразделение ИЗ ВТПериоды1)) КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Регистратор = АвансовыйОтчетНаПечатьВТ3.Регистратор
	|		И ДенежныеСредства.Организация = АвансовыйОтчетНаПечатьВТ3.Организация
	|		И ДенежныеСредства.Подразделение = АвансовыйОтчетНаПечатьВТ3.Подразделение
	|		И ДенежныеСредства.ПодотчетноеЛицо = АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ // 11
	|	ТекущийАвансВрем.Ссылка,
	|	ТекущийАвансВрем.Валюта,
	|	СУММА(ТекущийАвансВрем.КонечныйОстаток),
	|	СУММА(ТекущийАвансВрем.КонечныйПерерасход),
	|	СУММА(ТекущийАвансВрем.КонечныйОстатокРегл),
	|	СУММА(ТекущийАвансВрем.КонечныйПерерасходРегл)
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	ТекущийАвансВрем
	|СГРУППИРОВАТЬ ПО
	|	ТекущийАвансВрем.Ссылка,
	|	ТекущийАвансВрем.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ // 12
	|	ДанныеШапки.Ссылка КАК Ссылка,
	|	ДанныеШапки.Ссылка.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ДанныеШапки.Валюта КАК Валюта,
	|	СУММА(ДанныеШапки.СуммаВыданоНаличными)   КАК СуммаВыданоНаличными,
	|	СУММА(ДанныеШапки.СуммаВыданоКартой)      КАК СуммаВыданоКартой,
	|	СУММА(ДанныеШапки.КонечныйОстаток)        КАК КонечныйОстаток,
	|	СУММА(ДанныеШапки.КонечныйПерерасход)     КАК КонечныйПерерасход,
	|	СУММА(ДанныеШапки.СуммаИзрасходовано)     КАК СуммаИзрасходовано,
	|	ВЫБОР
	|		КОГДА СУММА(ДанныеШапки.КонечныйОстаток) - СУММА(ДанныеШапки.КонечныйПерерасход) + СУММА(ДанныеШапки.СуммаИзрасходовано) - СУММА(ДанныеШапки.СуммаВыданоНаличными) - СУММА(ДанныеШапки.СуммаВыданоКартой) > 0 ТОГДА
	|			СУММА(ДанныеШапки.КонечныйОстаток) - СУММА(ДанныеШапки.КонечныйПерерасход) + СУММА(ДанныеШапки.СуммаИзрасходовано) - СУММА(ДанныеШапки.СуммаВыданоНаличными) - СУММА(ДанныеШапки.СуммаВыданоКартой)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачальныйОстаток,
	|	ВЫБОР
	|		КОГДА СУММА(ДанныеШапки.КонечныйОстаток) - СУММА(ДанныеШапки.КонечныйПерерасход) + СУММА(ДанныеШапки.СуммаИзрасходовано) - СУММА(ДанныеШапки.СуммаВыданоНаличными) - СУММА(ДанныеШапки.СуммаВыданоКартой) < 0 ТОГДА
	|			-1 * (СУММА(ДанныеШапки.КонечныйОстаток) - СУММА(ДанныеШапки.КонечныйПерерасход) + СУММА(ДанныеШапки.СуммаИзрасходовано) - СУММА(ДанныеШапки.СуммаВыданоНаличными) - СУММА(ДанныеШапки.СуммаВыданоКартой))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачальныйПерерасход,
	|	СУММА(ДанныеШапки.СуммаВыданоНаличнымиРегл)   КАК СуммаВыданоНаличнымиРегл,
	|	СУММА(ДанныеШапки.СуммаВыданоКартойРегл)      КАК СуммаВыданоКартойРегл,
	|	СУММА(ДанныеШапки.КонечныйОстатокРегл)        КАК КонечныйОстатокРегл,
	|	СУММА(ДанныеШапки.КонечныйПерерасходРегл)     КАК КонечныйПерерасходРегл,
	|	СУММА(ДанныеШапки.СуммаИзрасходованоРегл)     КАК СуммаИзрасходованоРегл,
	|	ВЫБОР
	|		КОГДА СУММА(ДанныеШапки.КонечныйОстатокРегл) - СУММА(ДанныеШапки.КонечныйПерерасходРегл) + СУММА(ДанныеШапки.СуммаИзрасходованоРегл) - СУММА(ДанныеШапки.СуммаВыданоНаличнымиРегл) - СУММА(ДанныеШапки.СуммаВыданоКартойРегл) > 0 ТОГДА
	|			СУММА(ДанныеШапки.КонечныйОстатокРегл) - СУММА(ДанныеШапки.КонечныйПерерасходРегл) + СУММА(ДанныеШапки.СуммаИзрасходованоРегл) - СУММА(ДанныеШапки.СуммаВыданоНаличнымиРегл) - СУММА(ДанныеШапки.СуммаВыданоКартойРегл)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачальныйОстатокРегл,
	|	ВЫБОР
	|		КОГДА СУММА(ДанныеШапки.КонечныйОстатокРегл) - СУММА(ДанныеШапки.КонечныйПерерасходРегл) + СУММА(ДанныеШапки.СуммаИзрасходованоРегл) - СУММА(ДанныеШапки.СуммаВыданоНаличнымиРегл) - СУММА(ДанныеШапки.СуммаВыданоКартойРегл) < 0 ТОГДА
	|			-1 * (СУММА(ДанныеШапки.КонечныйОстатокРегл) - СУММА(ДанныеШапки.КонечныйПерерасходРегл) + СУММА(ДанныеШапки.СуммаИзрасходованоРегл) - СУММА(ДанныеШапки.СуммаВыданоНаличнымиРегл) - СУММА(ДанныеШапки.СуммаВыданоКартойРегл))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачальныйПерерасходРегл
	|ИЗ
	|(ВЫБРАТЬ
	|	Выдано.Ссылка КАК Ссылка,
	|	Выдано.Валюта КАК Валюта,
	|	Выдано.СуммаВыданоНаличными     КАК СуммаВыданоНаличными,
	|	Выдано.СуммаВыданоКартой        КАК СуммаВыданоКартой,
	|	0                               КАК КонечныйОстаток,
	|	0                               КАК КонечныйПерерасход,
	|	0                               КАК СуммаИзрасходовано,
	|	Выдано.СуммаВыданоНаличнымиРегл КАК СуммаВыданоНаличнымиРегл,
	|	Выдано.СуммаВыданоКартойРегл    КАК СуммаВыданоКартойРегл,
	|	0                               КАК КонечныйОстатокРегл,
	|	0                               КАК КонечныйПерерасходРегл,
	|	0                               КАК СуммаИзрасходованоРегл
	|ИЗ
	|	Выдано
	|ГДЕ
	|	Выдано.СуммаВыданоНаличными <> 0 ИЛИ Выдано.СуммаВыданоКартой <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Остатки.Ссылка,
	|	Остатки.Валюта,
	|	0,
	|	0,
	|	Остатки.КонечныйОстаток,
	|	Остатки.КонечныйПерерасход,
	|	0,
	|	0,
	|	0,
	|	Остатки.КонечныйОстатокРегл,
	|	Остатки.КонечныйПерерасходРегл,
	|	0
	|ИЗ
	|	Остатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Израсходовано.Ссылка КАК Ссылка,
	|	Израсходовано.Валюта КАК Валюта,
	|	0,
	|	0,
	|	0,
	|	0,
	|	Израсходовано.СуммаИзрасходовано,
	|	0,
	|	0,
	|	0,
	|	0,
	|	Израсходовано.СуммаИзрасходованоРегл
	|ИЗ
	|	Израсходовано) КАК ДанныеШапки
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШапки.Ссылка,
	|	ДанныеШапки.Валюта
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ // 13
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Дата КАК ДатаДокумента,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ПодотчетноеЛицо) КАК ПредставлениеПодотчетногоЛица,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК ПредставлениеОрганизации,
	|	ДанныеДокумента.Организация.КодПоОКПО КАК ОрганизацияПоОКПО,
	|	ДанныеДокумента.НазначениеАванса КАК НазначениеАванса,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.Подразделение) КАК ПредставлениеПодразделения,
	|	ДанныеДокумента.Подразделение.Код КАК КодПодразделения,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.Валюта) КАК ПредставлениеВалютыДокумента,
	|	ДанныеДокумента.Мультивалютный КАК Мультивалютный,
	|	ДанныеДокумента.КоличествоДокументов КАК КоличествоДокументов,
	|	ДанныеДокумента.КоличествоЛистов КАК КоличествоЛистов,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителяПредставление,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|	ПО ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 14
	|	ПрочиеРасходы.Ссылка                           КАК Ссылка,
	|	ПрочиеРасходы.Ссылка                           КАК ДокументДвижения,
	|	ПрочиеРасходы.НаименованиеВходящегоДокумента   КАК НаименованиеРасхода,
	|	ПрочиеРасходы.НомерВходящегоДокумента          КАК ДокументНомер,
	|	ПрочиеРасходы.ДатаВходящегоДокумента           КАК ДокументДата,
	|	ПрочиеРасходы.СтатьяРасходов                   КАК СтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов                КАК АналитикаРасходов,
	|	ПрочиеРасходы.Контрагент                       КАК Контрагент,
	|	NULL                                           КАК КонтрагентОплаты,
	|	ВЫБОР КОГДА ПрочиеРасходы.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		ПрочиеРасходы.Ссылка.Валюта
	|	ИНАЧЕ
	|		ПрочиеРасходы.Валюта
	|	КОНЕЦ КАК Валюта,
	|		НЕОПРЕДЕЛЕНО
	|	      КАК СчетУчета,
	
	|	ВЫБОР КОГДА НЕ ПрочиеРасходы.Отменено ТОГДА
	|		ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ПрочиеРасходы.Сумма)
	|		ИНАЧЕ
	|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ЕСТЬNULL(Суммы.СуммаНДСРегл, 0) + ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0))
	|		КОНЕЦ
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ПоУчету,
	
	|	ВЫБОР КОГДА НЕ ПрочиеРасходы.Отменено ТОГДА
	|		ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта <> ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ПрочиеРасходы.Сумма
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ПоУчетуВВалюте,
	|	
	|	ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|		ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ПрочиеРасходы.Сумма)
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ЕСТЬNULL(Суммы.СуммаНДСРегл, 0) + ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0))
	|	КОНЕЦ КАК ПоОтчету,
	|	ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта <> ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|		ПрочиеРасходы.Сумма
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ПоОтчетуВВалюте,
	|	
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, ПрочиеРасходы.СуммаНДС) КАК СуммаНДС,
	|	ПрочиеРасходы.ПервичныйДокумент КАК ПервичныйДокумент,
	
	|	1 КАК НомерРаздела,
	|	ПрочиеРасходы.ИдентификаторСтроки КАК НомерСтроки,
	|	ПрочиеРасходы.НомерСтроки КАК НомерСтрокиУпорядочивания
	|	
	|ИЗ
	|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ПрочиеРасходы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДвиженияПрочиеРасходы
	|	ПО
	|		ДвиженияПрочиеРасходы.Регистратор = ПрочиеРасходы.Ссылка
	|		И ДвиженияПрочиеРасходы.СтатьяДоходовРасходов = ПрочиеРасходы.СтатьяРасходов
	|		И ДвиженияПрочиеРасходы.АналитикаРасходов = ПрочиеРасходы.АналитикаРасходов
	|		И ДвиженияПрочиеРасходы.АналитикаАктивовПассивов = ПрочиеРасходы.АналитикаАктивовПассивов
	|		И ДвиженияПрочиеРасходы.Подразделение = ПрочиеРасходы.Подразделение
	|		И ДвиженияПрочиеРасходы.СуммаВВалюте = ПрочиеРасходы.Сумма
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = ПрочиеРасходы.Ссылка
	|		И Суммы.ИдентификаторСтроки = ПрочиеРасходы.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|		
	|	
	|ГДЕ
	|	ПрочиеРасходы.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ОплатаПоставщикам.Ссылка,
	|	ОплатаПоставщикам.Ссылка,
	|	ОплатаПоставщикам.НаименованиеВходящегоДокумента,
	|	ОплатаПоставщикам.НомерВходящегоДокумента,
	|	ОплатаПоставщикам.ДатаВходящегоДокумента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ОплатаПоставщикам.Контрагент,
	|	ВЫБОР КОГДА ОплатаПоставщикам.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		ОплатаПоставщикам.Ссылка.Валюта
	|	ИНАЧЕ
	|		ОплатаПоставщикам.Валюта
	|	КОНЕЦ КАК Валюта,
	|	НЕОПРЕДЕЛЕНО,
	|	ОплатаПоставщикам.Сумма,
	|	ВЫБОР
	|		КОГДА ОплатаПоставщикам.Ссылка.Валюта <> ОплатаПоставщикам.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ОплатаПоставщикам.Сумма
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	ОплатаПоставщикам.Сумма,
	|	ВЫБОР
	|		КОГДА ОплатаПоставщикам.Ссылка.Валюта <> ОплатаПоставщикам.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ОплатаПоставщикам.Сумма
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	
	|	2 КАК НомерРаздела,
	|	ОплатаПоставщикам.НомерСтроки КАК НомерСтроки,
	|	ОплатаПоставщикам.НомерСтроки КАК НомерСтрокиУпорядочивания
	|	
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ОплатаПоставщикам
	|	
	|ГДЕ
	|	ОплатаПоставщикам.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДокументПриобретение.АвансовыйОтчет,
	|	ДокументПриобретение.Ссылка,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.НаименованиеВходящегоДокумента = """" ТОГДА
	|			ДокументПриобретение.НаименованиеВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.НаименованиеВходящегоДокумента
	|	КОНЕЦ КАК НаименованиеВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.НомерВходящегоДокумента = """" ТОГДА
	|			ДокументПриобретение.НомерВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.НомерВходящегоДокумента
	|	КОНЕЦ КАК НомерВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1,1,1) ТОГДА
	|			ДокументПриобретение.ДатаВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДокументПриобретение.Валюта,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(ДанныеДокумента.СуммаСНДС),
	|	СУММА(ВЫБОР
	|		КОГДА ДокументПриобретение.АвансовыйОтчет.Валюта <> ДокументПриобретение.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДанныеДокумента.СуммаСНДС, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ),
	|	СУММА(ДанныеДокумента.СуммаСНДС),
	|	СУММА(ВЫБОР
	|		КОГДА ДокументПриобретение.АвансовыйОтчет.Валюта <> ДокументПриобретение.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДанныеДокумента.СуммаСНДС, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ),
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	
	|	0 КАК НомерРаздела,
	|	МАКСИМУМ(ДанныеДокумента.ИдентификаторСтроки) КАК НомерСтроки,
	|	МАКСИМУМ(ДанныеДокумента.НомерСтроки) КАК НомерСтрокиУпорядочивания
	|	
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДокументПриобретение
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПриобретениеТоваровУслуг.Товары КАК ДанныеДокумента
	|	ПО
	|		ДокументПриобретение.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	ДокументПриобретение.АвансовыйОтчет В (&МассивДокументов)
	|	И ДокументПриобретение.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|	И ДокументПриобретение.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДокументПриобретение.Ссылка,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.НаименованиеВходящегоДокумента = """" ТОГДА
	|			ДокументПриобретение.НаименованиеВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.НаименованиеВходящегоДокумента
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.НомерВходящегоДокумента = """" ТОГДА
	|			ДокументПриобретение.НомерВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.НомерВходящегоДокумента
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1,1,1) ТОГДА
	|			ДокументПриобретение.ДатаВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.ДатаВходящегоДокумента
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.АвансовыйОтчет,
	|	ДанныеДокумента.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ТипУслуги),
	|	ДанныеДокумента.НомерБилета,
	|	ДанныеДокумента.Дата,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДенежныеСредства.Валюта,
	|	НЕОПРЕДЕЛЕНО,
	|	ЕСТЬNULL(ДенежныеСредства.СуммаРегл, 0),
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.АвансовыйОтчет.Валюта <> ДанныеДокумента.АвансовыйОтчет.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДенежныеСредства.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	ЕСТЬNULL(ДенежныеСредства.СуммаРегл, 0),
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.АвансовыйОтчет.Валюта <> ДанныеДокумента.АвансовыйОтчет.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДенежныеСредства.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	
	|	0 КАК НомерРаздела,
	|	ДанныеДокумента.Номер КАК НомерСтроки,
	|	ДанныеДокумента.Номер КАК НомерСтрокиУпорядочивания
	|
	|ИЗ
	|	Документ.Бронирование КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Регистратор = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.АвансовыйОтчет В (&МассивДокументов)
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.БронированиеЧерезПодотчетноеЛицо)
	|	
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерРаздела,
	|	НомерСтрокиУпорядочивания
	|
	|ИТОГИ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 15
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	ТаблицаКонвертацияВалюты.Валюта КАК ВалютаИсходная,
	|	ТаблицаКонвертацияВалюты.Сумма КАК СуммаИсходная,
	|	ТаблицаКонвертацияВалюты.ВалютаКонвертации КАК ВалютаКонвертации,
	|	ТаблицаКонвертацияВалюты.СуммаКонвертации КАК СуммаКонвертации,
	|	ТаблицаКонвертацияВалюты.КурсКонвертации КАК Курс
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет.КонвертацияВалюты КАК ТаблицаКонвертацияВалюты
	|	ПО
	|		ТаблицаКонвертацияВалюты.Ссылка = АвансовыйОтчетНаПечатьВТ3.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";
	
	Если Не ИспользуетсяРеглУчет Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ // 16
		|	ОплатаПоставщикам.Ссылка КАК Регистратор,
		|	""60"" КАК СчетДт,
		|	ОплатаПоставщикам.Контрагент КАК ЗначениеСубконто,
		|	ВЫБОР КОГДА ОплатаПоставщикам.Ссылка.Валюта = Организации.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ КАК СчетКт,
		|	ОплатаПоставщикам.НомерСтроки КАК НомерСтроки,
		|	ОплатаПоставщикам.Сумма
		|	
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ОплатаПоставщикам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ОплатаПоставщикам.Ссылка.Организация = Организации.Ссылка
		|ГДЕ
		|	ОплатаПоставщикам.Ссылка В (&МассивДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрочиеРасходы.Ссылка КАК Регистратор,
		|	ПрочиеРасходы.СтатьяРасходов.КорреспондирующийСчет,
		|	ПрочиеРасходы.СтатьяРасходов КАК ЗначениеСубконто,
		|	ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = Организации.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ КАК СчетКт,
		|	ПрочиеРасходы.НомерСтроки КАК НомерСтроки,
		
		|	ВЫБОР КОГДА НЕ ПрочиеРасходы.Отменено ТОГДА
		|		ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = Организации.ВалютаРегламентированногоУчета ТОГДА
		|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ПрочиеРасходы.Сумма)
		|		ИНАЧЕ
		|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ЕСТЬNULL(Суммы.СуммаНДСРегл, 0) + ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0))
		|		КОНЕЦ
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ
		|	
		|ИЗ
		|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ПрочиеРасходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДвиженияПрочиеРасходы
		|		ПО
		|			ДвиженияПрочиеРасходы.Регистратор = ПрочиеРасходы.Ссылка
		|			И ДвиженияПрочиеРасходы.НомерСтроки = ПрочиеРасходы.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
		|		ПО
		|			Суммы.Регистратор = ПрочиеРасходы.Ссылка
		|			И Суммы.ИдентификаторСтроки = ПрочиеРасходы.ИдентификаторСтроки
		|			И Суммы.СуммаБезНДСРегл <> 0
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ПрочиеРасходы.Ссылка.Организация = Организации.Ссылка
		|ГДЕ
		|	ПрочиеРасходы.Ссылка В (&МассивДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриобретениеТоваровУслугТовары.Ссылка.АвансовыйОтчет КАК Регистратор,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар) ТОГДА
		|		""41""
		|	ИНАЧЕ
		|		""91.02""
		|	КОНЕЦ КАК СчетДт,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.Валюта = Организации.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ КАК СчетКт,
		|	1 КАК НомерСтроки,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС) ТОГДА
		|		СУММА(ПриобретениеТоваровУслугТовары.СуммаСНДС) - СУММА(ПриобретениеТоваровУслугТовары.СуммаНДС)
		|	ИНАЧЕ
		|		СУММА(ПриобретениеТоваровУслугТовары.СуммаСНДС)
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ПриобретениеТоваровУслугТовары.Ссылка.Организация = Организации.Ссылка
		|ГДЕ
		|	ПриобретениеТоваровУслугТовары.Ссылка.АвансовыйОтчет В (&МассивДокументов)
		|	
		|СГРУППИРОВАТЬ ПО
		|	ПриобретениеТоваровУслугТовары.Ссылка,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар) ТОГДА
		|		""41""
		|	ИНАЧЕ
		|		""91.02""
		|	КОНЕЦ,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.Валюта = Организации.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриобретениеТоваровУслугТовары.Ссылка.АвансовыйОтчет КАК Регистратор,
		|	""19"" КАК СчетДт,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.Валюта = Организации.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ КАК СчетКт,
		|	2 КАК НомерСтроки,
		|	СУММА(ПриобретениеТоваровУслугТовары.СуммаНДС) КАК Сумма
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ПриобретениеТоваровУслугТовары.Ссылка.Организация = Организации.Ссылка
		|ГДЕ
		|	ПриобретениеТоваровУслугТовары.Ссылка.АвансовыйОтчет В (&МассивДокументов)
		|	И ПриобретениеТоваровУслугТовары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|	
		|СГРУППИРОВАТЬ ПО
		|	ПриобретениеТоваровУслугТовары.Ссылка,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.Валюта = Организации.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	НомерСтроки
		|;
		|";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска)
	
	Область = Макет.ПолучитьОбласть("СтрокаТитул|Конвертация");
	ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаКонвертация);
	ТабличныйДокумент.Присоединить(Область);
	Возврат ВыборкаКонвертация.НайтиСледующий(СтруктураПоиска);
	
КонецФункции

Функция СформироватьПечатнуюФормуАвансовогоОтчетаСтараяВерсия(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ШаблонОшибки = НСтр("ru = 'Печать АО-1 используется только для документов с операцией ""Закупка через подотчетное лицо"".'");
	
	ИспользуетсяРеглУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка            КАК Ссылка,
	|	ДанныеДокумента.МоментВремени     КАК МоментВремени,
	|	ДанныеДокумента.Организация       КАК Организация,
	|	ДанныеДокумента.ПодотчетноеЛицо   КАК ПодотчетноеЛицо
	|
	|ПОМЕСТИТЬ АвансовыйОтчетНаПечатьВТ1
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.МоментВремени,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ПодотчетноеЛицо
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.МоментВремени,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ПодотчетноеЛицо
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПодотчетноеЛицо
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчетНаПечатьВТ1.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ1.Организация,
	|	АвансовыйОтчетНаПечатьВТ1.ПодотчетноеЛицо,
	|	АвансовыйОтчетНаПечатьВТ1.МоментВремени,
	|	МАКСИМУМ(ДенежныеСредства.Период) КАК ПериодПредыдущийОтчет
	|
	|ПОМЕСТИТЬ АвансовыйОтчетНаПечатьВТ2
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ1
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Организация = АвансовыйОтчетНаПечатьВТ1.Организация
	|		И ДенежныеСредства.ПодотчетноеЛицо = АвансовыйОтчетНаПечатьВТ1.ПодотчетноеЛицо
	|		И ДенежныеСредства.МоментВремени < АвансовыйОтчетНаПечатьВТ1.МоментВремени
	|		И ТИПЗНАЧЕНИЯ(ДенежныеСредства.Регистратор) В (
	|			ТИП(Документ.АвансовыйОтчет),
	|			ТИП(Документ.ПриобретениеТоваровУслуг),
	|			ТИП(Документ.ПриобретениеУслугПрочихАктивов)
	|		)
	|	
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетНаПечатьВТ1.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ1.Организация,
	|	АвансовыйОтчетНаПечатьВТ1.ПодотчетноеЛицо,
	|	АвансовыйОтчетНаПечатьВТ1.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчетНаПечатьВТ2.Организация,
	|	АвансовыйОтчетНаПечатьВТ2.ПодотчетноеЛицо,
	|	АвансовыйОтчетНаПечатьВТ2.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ2.МоментВремени,
	|	ДенежныеСредства.Регистратор КАК ПредыдущийОтчет,
	|	ДенежныеСредства.МоментВремени КАК МоментВремениПредыдущийОтчет
	|
	|ПОМЕСТИТЬ АвансовыйОтчетНаПечатьВТ3
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ2 КАК АвансовыйОтчетНаПечатьВТ2
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Организация = АвансовыйОтчетНаПечатьВТ2.Организация
	|		И ДенежныеСредства.ПодотчетноеЛицо = АвансовыйОтчетНаПечатьВТ2.ПодотчетноеЛицо
	|		И ДенежныеСредства.Период = АвансовыйОтчетНаПечатьВТ2.ПериодПредыдущийОтчет
	|		И ТИПЗНАЧЕНИЯ(ДенежныеСредства.Регистратор) В (
	|			ТИП(Документ.АвансовыйОтчет),
	|			ТИП(Документ.ПриобретениеТоваровУслуг),
	|			ТИП(Документ.ПриобретениеУслугПрочихАктивов)
	|		)
	|ИНДЕКСИРОВАТЬ ПО
	|	АвансовыйОтчетНаПечатьВТ2.Организация,
	|	АвансовыйОтчетНаПечатьВТ2.ПодотчетноеЛицо,
	|	Ссылка,
	|	ПредыдущийОтчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 3
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	ДенежныеСредстваВыдано.Валюта,
	|	
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ТИПЗНАЧЕНИЯ(ДенежныеСредстваВыдано.Регистратор) В (&РегистраторыДенежныеСредстваВыдано) ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.СуммаРегл, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВыданоНаличными,
	|
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ДенежныеСредстваВыдано.Валюта <> ДенежныеСредстваВыдано.Организация.ВалютаРегламентированногоУчета
	|			И ТИПЗНАЧЕНИЯ(ДенежныеСредстваВыдано.Регистратор) В (&РегистраторыДенежныеСредстваВыдано) ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВыданоНаличнымиВВалюте,
	|
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ДенежныеСредстваВыдано.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.СуммаРегл, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВыданоКартой,
	|
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ДенежныеСредстваВыдано.Валюта <> ДенежныеСредстваВыдано.Организация.ВалютаРегламентированногоУчета
	|			И ДенежныеСредстваВыдано.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВыданоКартойВВалюте,
	|
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ДенежныеСредстваВыдано.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеНеизрасходованныхПодотчетныхСумм)) ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.СуммаРегл, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВозвращено,
	|
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ДенежныеСредстваВыдано.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеНеизрасходованныхПодотчетныхСумм)) ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВозвращеноВВалюте
	|
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредстваВыдано
	|	ПО
	|		((ДенежныеСредстваВыдано.МоментВремени > АвансовыйОтчетНаПечатьВТ3.МоментВремениПредыдущийОтчет ИЛИ АвансовыйОтчетНаПечатьВТ3.МоментВремениПредыдущийОтчет ЕСТЬ NULL)
	|			И ДенежныеСредстваВыдано.МоментВремени < АвансовыйОтчетНаПечатьВТ3.МоментВремени)
	|		И ДенежныеСредстваВыдано.Организация = АвансовыйОтчетНаПечатьВТ3.Организация
	|		И ДенежныеСредстваВыдано.ПодотчетноеЛицо = АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	ДенежныеСредстваВыдано.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 4
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	
	|	ВЫБОР КОГДА ЕСТЬNULL(ДенежныеСредстваПредыдущийОтчет.СуммаРеглКонечныйОстаток, 0) > 0 ТОГДА
	|		ЕСТЬNULL(ДенежныеСредстваПредыдущийОтчет.СуммаРеглКонечныйОстаток, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК НачальныйОстаток,
	|	ВЫБОР КОГДА ЕСТЬNULL(ДенежныеСредстваПредыдущийОтчет.СуммаРеглКонечныйОстаток, 0) < 0 ТОГДА
	|		-ЕСТЬNULL(ДенежныеСредстваПредыдущийОтчет.СуммаРеглКонечныйОстаток, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК НачальныйПерерасход,
	|
	|	ЕСТЬNULL(ДенежныеСредстваТекущийОтчет.СуммаРеглРасход, 0) КАК Израсходовано,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(ДенежныеСредстваТекущийОтчет.СуммаРеглКонечныйОстаток, 0) > 0 ТОГДА
	|		ЕСТЬNULL(ДенежныеСредстваТекущийОтчет.СуммаРеглКонечныйОстаток, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КонечныйОстаток,
	|	ВЫБОР КОГДА ЕСТЬNULL(ДенежныеСредстваТекущийОтчет.СуммаРеглКонечныйОстаток, 0) < 0 ТОГДА
	|		-ЕСТЬNULL(ДенежныеСредстваТекущийОтчет.СуммаРеглКонечныйОстаток, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КонечныйПерерасход
	|
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.ОстаткиИОбороты(,, Регистратор,,
	|			(Организация, Подотчетноелицо) В (ВЫБРАТЬ Организация, Подотчетноелицо ИЗ АвансовыйОтчетНаПечатьВТ1)) КАК ДенежныеСредстваПредыдущийОтчет
	|	ПО
	|		ДенежныеСредстваПредыдущийОтчет.Регистратор = АвансовыйОтчетНаПечатьВТ3.ПредыдущийОтчет
	|		И ДенежныеСредстваПредыдущийОтчет.Организация = АвансовыйОтчетНаПечатьВТ3.Организация
	|		И ДенежныеСредстваПредыдущийОтчет.ПодотчетноеЛицо = АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.ОстаткиИОбороты(,, Регистратор,,
	|			(Организация, Подотчетноелицо) В (ВЫБРАТЬ Организация, Подотчетноелицо ИЗ АвансовыйОтчетНаПечатьВТ1)) КАК ДенежныеСредстваТекущийОтчет
	|	ПО
	|		ДенежныеСредстваТекущийОтчет.Регистратор = АвансовыйОтчетНаПечатьВТ3.Ссылка
	|		И ДенежныеСредстваТекущийОтчет.Организация = АвансовыйОтчетНаПечатьВТ3.Организация
	|		И ДенежныеСредстваТекущийОтчет.ПодотчетноеЛицо = АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 5
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Ссылка.Номер КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Ссылка.Дата КАК ДатаДокумента,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.ПодотчетноеЛицо.Представление КАК ПредставлениеПодотчетногоЛица,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК ПредставлениеОрганизации,
	|	ДанныеДокумента.Организация.КодПоОКПО КАК ОрганизацияПоОКПО,
	|	ДанныеДокумента.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ДанныеДокумента.Ссылка.НазначениеАванса КАК НазначениеАванса,
	|	ДанныеДокумента.Ссылка.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Ссылка.Подразделение.Представление КАК ПредставлениеПодразделения,
	|	ДанныеДокумента.Ссылка.Подразделение.Код КАК КодПодразделения,
	|	ДанныеДокумента.Ссылка.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка.Валюта.Представление КАК ПредставлениеВалютыДокумента,
	
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) = ТИП(Документ.АвансовыйОтчет) ТОГДА
	|		ДанныеДокумента.Ссылка.Мультивалютный
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Мультивалютный,
	
	|	ДанныеДокумента.Ссылка.КоличествоДокументов КАК КоличествоДокументов,
	|	ДанныеДокумента.Ссылка.КоличествоЛистов КАК КоличествоЛистов,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителяПредставление,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ1 КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 6
	|	ПрочиеРасходы.Ссылка                           КАК Ссылка,
	|	ПрочиеРасходы.НаименованиеВходящегоДокумента   КАК НаименованиеРасхода,
	|	ПрочиеРасходы.НомерВходящегоДокумента          КАК ДокументНомер,
	|	ПрочиеРасходы.ДатаВходящегоДокумента           КАК ДокументДата,
	|	ПрочиеРасходы.СтатьяРасходов                   КАК СтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов                КАК АналитикаРасходов,
	|	ПрочиеРасходы.Контрагент                       КАК Контрагент,
	|	NULL                                           КАК КонтрагентОплаты,
	|	ВЫБОР КОГДА ПрочиеРасходы.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		ПрочиеРасходы.Ссылка.Валюта
	|	ИНАЧЕ
	|		ПрочиеРасходы.Валюта
	|	КОНЕЦ КАК Валюта,
	|		НЕОПРЕДЕЛЕНО
	|	      КАК СчетУчета,
	
	|	ВЫБОР КОГДА НЕ ПрочиеРасходы.Отменено ТОГДА
	|		ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ПрочиеРасходы.Сумма)
	|		ИНАЧЕ
	|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ЕСТЬNULL(Суммы.СуммаНДСРегл, 0) + ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0))
	|		КОНЕЦ
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ПоУчету,
	
	|	ВЫБОР КОГДА НЕ ПрочиеРасходы.Отменено ТОГДА
	|		ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта <> ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ПрочиеРасходы.Сумма
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ПоУчетуВВалюте,
	|	
	|	ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|		ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ПрочиеРасходы.Сумма)
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ЕСТЬNULL(Суммы.СуммаНДСРегл, 0) + ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0))
	|	КОНЕЦ КАК ПоОтчету,
	
	|	ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта <> ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|		ПрочиеРасходы.Сумма
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ПоОтчетуВВалюте,
	|	
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, ПрочиеРасходы.СуммаНДС) КАК СуммаНДС,
	
	|	1 КАК НомерРаздела,
	|	ПрочиеРасходы.НомерСтроки КАК НомерСтроки
	|	
	|ИЗ
	|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ПрочиеРасходы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДвиженияПрочиеРасходы
	|	ПО
	|		ДвиженияПрочиеРасходы.Регистратор = ПрочиеРасходы.Ссылка
	|		И ДвиженияПрочиеРасходы.СтатьяДоходовРасходов = ПрочиеРасходы.СтатьяРасходов
	|		И ДвиженияПрочиеРасходы.АналитикаРасходов = ПрочиеРасходы.АналитикаРасходов
	|		И ДвиженияПрочиеРасходы.АналитикаАктивовПассивов = ПрочиеРасходы.АналитикаАктивовПассивов
	|		И ДвиженияПрочиеРасходы.Подразделение = ПрочиеРасходы.Подразделение
	|		И ДвиженияПрочиеРасходы.СуммаВВалюте = ПрочиеРасходы.Сумма
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = ПрочиеРасходы.Ссылка
	|		И Суммы.ИдентификаторСтроки = ПрочиеРасходы.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|		
	|	
	|ГДЕ
	|	ПрочиеРасходы.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ОплатаПоставщикам.Ссылка,
	|	ОплатаПоставщикам.НаименованиеВходящегоДокумента,
	|	ОплатаПоставщикам.НомерВходящегоДокумента,
	|	ОплатаПоставщикам.ДатаВходящегоДокумента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ОплатаПоставщикам.Контрагент,
	|	ВЫБОР КОГДА ОплатаПоставщикам.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		ОплатаПоставщикам.Ссылка.Валюта
	|	ИНАЧЕ
	|		ОплатаПоставщикам.Валюта
	|	КОНЕЦ КАК Валюта,
	|	НЕОПРЕДЕЛЕНО,
	|	ОплатаПоставщикам.Сумма,
	|	ВЫБОР
	|		КОГДА ОплатаПоставщикам.Ссылка.Валюта <> ОплатаПоставщикам.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ОплатаПоставщикам.Сумма
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	ОплатаПоставщикам.Сумма,
	|	ВЫБОР
	|		КОГДА ОплатаПоставщикам.Ссылка.Валюта <> ОплатаПоставщикам.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ОплатаПоставщикам.Сумма
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	0,
	
	|	2 КАК НомерРаздела,
	|	ОплатаПоставщикам.НомерСтроки КАК НомерСтроки
	|	
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ОплатаПоставщикам
	|	
	|ГДЕ
	|	ОплатаПоставщикам.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	"""",
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДанныеДокумента.Валюта,
	|	НЕОПРЕДЕЛЕНО,
	|	ЕСТЬNULL(ДенежныеСредства.СуммаРегл, 0),
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Валюта <> ДанныеДокумента.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДенежныеСредства.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	ЕСТЬNULL(ДенежныеСредства.СуммаРегл, 0),
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Валюта <> ДанныеДокумента.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДенежныеСредства.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	0,
	
	|	0 КАК НомерРаздела,
	|	0 КАК НомерСтроки
	|
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Регистратор = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	"""",
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДанныеДокумента.Валюта,
	|	НЕОПРЕДЕЛЕНО,
	|	ЕСТЬNULL(ДенежныеСредства.СуммаРегл, 0),
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Валюта <> ДанныеДокумента.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДенежныеСредства.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	ЕСТЬNULL(ДенежныеСредства.СуммаРегл, 0),
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Валюта <> ДанныеДокумента.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДенежныеСредства.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	0,
	
	|	0 КАК НомерРаздела,
	|	0 КАК НомерСтроки
	|
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Регистратор = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерРаздела,
	|	НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 7
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	ТаблицаКонвертацияВалюты.Валюта КАК ВалютаИсходная,
	|	ТаблицаКонвертацияВалюты.Сумма КАК СуммаИсходная,
	|	ТаблицаКонвертацияВалюты.ВалютаКонвертации КАК ВалютаКонвертации,
	|	ТаблицаКонвертацияВалюты.СуммаКонвертации КАК СуммаКонвертации
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет.КонвертацияВалюты КАК ТаблицаКонвертацияВалюты
	|	ПО
	|		ТаблицаКонвертацияВалюты.Ссылка = АвансовыйОтчетНаПечатьВТ3.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 8
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ3.МоментВремени,
	|	АвансовыйОтчетНаПечатьВТ3.ПредыдущийОтчет,
	|	ЕСТЬNULL(АвансовыйОтчетНаПечатьВТ3.МоментВремениПредыдущийОтчет, ДАТАВРЕМЯ(1,1,1,0,0,1)) КАК МоментВремениПредыдущийОтчет
	|
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3 КАК АвансовыйОтчетНаПечатьВТ3
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 9
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	ДенежныеСредстваТекущийОтчет.Валюта,
	|	ЕСТЬNULL(СУММА(ДенежныеСредстваТекущийОтчет.Сумма), 0) КАК Сумма
	|
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредстваТекущийОтчет
	|	ПО
	|		ДенежныеСредстваТекущийОтчет.Регистратор = АвансовыйОтчетНаПечатьВТ3.Ссылка
	|		И ДенежныеСредстваТекущийОтчет.Организация = АвансовыйОтчетНаПечатьВТ3.Организация
	|		И ДенежныеСредстваТекущийОтчет.ПодотчетноеЛицо = АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо
	|		И ДенежныеСредстваТекущийОтчет.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ДенежныеСредстваТекущийОтчет.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	ДенежныеСредстваТекущийОтчет.Валюта
	|;
	|";
	
	Если Не ИспользуетсяРеглУчет Тогда
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОплатаПоставщикам.Ссылка КАК Регистратор,
		|	""60"" КАК СчетДт,
		|	ОплатаПоставщикам.Контрагент КАК ЗначениеСубконто,
		|	ВЫБОР КОГДА ОплатаПоставщикам.Ссылка.Валюта = ОплатаПоставщикам.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ КАК СчетКт,
		|	ОплатаПоставщикам.НомерСтроки КАК НомерСтроки,
		|	ОплатаПоставщикам.Сумма
		|	
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ОплатаПоставщикам
		|ГДЕ
		|	ОплатаПоставщикам.Ссылка В (&МассивДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрочиеРасходы.Ссылка КАК Регистратор,
		|	ПрочиеРасходы.СтатьяРасходов.КорреспондирующийСчет,
		|	ПрочиеРасходы.СтатьяРасходов КАК ЗначениеСубконто,
		|	ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ КАК СчетКт,
		|	ПрочиеРасходы.НомерСтроки КАК НомерСтроки,
		
		|	ВЫБОР КОГДА НЕ ПрочиеРасходы.Отменено ТОГДА
		|		ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
		|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ПрочиеРасходы.Сумма)
		|		ИНАЧЕ
		|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ЕСТЬNULL(Суммы.СуммаНДСРегл, 0) + ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0))
		|		КОНЕЦ
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ
		|	
		|ИЗ
		|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ПрочиеРасходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДвиженияПрочиеРасходы
		|		ПО
		|			ДвиженияПрочиеРасходы.Регистратор = ПрочиеРасходы.Ссылка
		|			И ДвиженияПрочиеРасходы.НомерСтроки = ПрочиеРасходы.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
		|		ПО
		|			Суммы.Регистратор = ПрочиеРасходы.Ссылка
		|			И Суммы.ИдентификаторСтроки = ПрочиеРасходы.ИдентификаторСтроки
		|			И Суммы.СуммаБезНДСРегл <> 0
		|ГДЕ
		|	ПрочиеРасходы.Ссылка В (&МассивДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриобретениеТоваровУслугТовары.Ссылка КАК Регистратор,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар) ТОГДА
		|		""41""
		|	ИНАЧЕ
		|		""91.02""
		|	КОНЕЦ КАК СчетДт,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.Валюта = ПриобретениеТоваровУслугТовары.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ КАК СчетКт,
		|	1 КАК НомерСтроки,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС) ТОГДА
		|		СУММА(ПриобретениеТоваровУслугТовары.СуммаСНДС) - СУММА(ПриобретениеТоваровУслугТовары.СуммаНДС)
		|	ИНАЧЕ
		|		СУММА(ПриобретениеТоваровУслугТовары.СуммаСНДС)
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		|ГДЕ
		|	ПриобретениеТоваровУслугТовары.Ссылка В (&МассивДокументов)
		|	
		|СГРУППИРОВАТЬ ПО
		|	ПриобретениеТоваровУслугТовары.Ссылка,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар) ТОГДА
		|		""41""
		|	ИНАЧЕ
		|		""91.02""
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриобретениеТоваровУслугТовары.Ссылка КАК Регистратор,
		|	""19"" КАК СчетДт,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.Валюта = ПриобретениеТоваровУслугТовары.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ КАК СчетКт,
		|	2 КАК НомерСтроки,
		|	СУММА(ПриобретениеТоваровУслугТовары.СуммаНДС) КАК Сумма
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		|ГДЕ
		|	ПриобретениеТоваровУслугТовары.Ссылка В (&МассивДокументов)
		|	И ПриобретениеТоваровУслугТовары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|	
		|СГРУППИРОВАТЬ ПО
		|	ПриобретениеТоваровУслугТовары.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	НомерСтроки
		|;
		|";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	РегистраторыДенежныеСредстваВыдано = ВводОстатковСервер.ДоступныеТипыВводаОстатков();
	РегистраторыДенежныеСредстваВыдано.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	Запрос.УстановитьПараметр("РегистраторыДенежныеСредстваВыдано", РегистраторыДенежныеСредстваВыдано);
	
	
	
	ЗапросВалютныхОстатков = Новый Запрос;
	ЗапросВалютныхОстатков.Текст = "
	|ВЫБРАТЬ
	|	Данные.Валюта КАК Валюта,
	|	СУММА(СуммаНачальныйОстаток) КАК СуммаНачальныйОстаток,
	|	СУММА(СуммаКонечныйОстаток) КАК СуммаКонечныйОстаток,
	|	СУММА(СуммаНачальныйПерерасход) КАК СуммаНачальныйПерерасход,
	|	СУММА(СуммаКонечныйПерерасход) КАК СуммаКонечныйПерерасход
	|ИЗ
	|(ВЫБРАТЬ
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ВЫБОР КОГДА ДанныеРегистра.СуммаОстаток > 0 ТОГДА
	|		ДанныеРегистра.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаНачальныйОстаток,
	|	ВЫБОР КОГДА ДанныеРегистра.СуммаОстаток < 0 ТОГДА
	|		-ДанныеРегистра.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаНачальныйПерерасход,
	|	0 КАК СуммаКонечныйОстаток,
	|	0 КАК СуммаКонечныйПерерасход
	|	
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(
	|		&ДатаНачальныхОстатков,
	|		Организация = &Организация И ПодотчетноеЛицо = &ПодотчетноеЛицо
	|	) КАК ДанныеРегистра
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	0,
	|	0,
	|	ВЫБОР КОГДА ДанныеРегистра.СуммаОстаток > 0 ТОГДА
	|		ДанныеРегистра.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ,
	|	ВЫБОР КОГДА ДанныеРегистра.СуммаОстаток < 0 ТОГДА
	|		-ДанныеРегистра.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ
	|	
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(
	|		&ДатаКонечныхОстатков,
	|		Организация = &Организация И ПодотчетноеЛицо = &ПодотчетноеЛицо
	|	) КАК ДанныеРегистра) КАК Данные
	|СГРУППИРОВАТЬ ПО
	|	Валюта
	|";
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = МассивРезультатов[5].Выбрать();
	ВыборкаОстатки = МассивРезультатов[4].Выбрать();
	ВыборкаВыдано = МассивРезультатов[3].Выбрать();
	
	ВыборкаКонвертация = МассивРезультатов[7].Выбрать();
	ВыборкаДатыОстатков = МассивРезультатов[8].Выбрать();
	ВыборкаИзрасходованоВВалюте = МассивРезультатов[9].Выбрать();
	
	ВыборкаОборотнаяСторона = МассивРезультатов[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ИспользуетсяРеглУчет Тогда
		ВыборкаПроводок = МассивРезультатов[11].Выбрать();
		ВыборкаСчетов = МассивРезультатов[12].Выбрать();
		ВыборкаСчетовУточнение = МассивРезультатов[12].Выбрать();
		Проводки = МассивРезультатов[11].Выгрузить();
	Иначе
		ВыборкаПроводок = МассивРезультатов[10].Выбрать();
		ВыборкаСчетов = МассивРезультатов[10].Выбрать();
		ВыборкаСчетовУточнение = МассивРезультатов[10].Выбрать();
		Проводки = МассивРезультатов[10].Выгрузить();
	КонецЕсли;
	
	Если МассивРезультатов[5].Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ШаблонОшибки);
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ПечатьВИностраннойВалюте = (Выборка.Валюта <> Выборка.ВалютаРегламентированногоУчета Или Выборка.Мультивалютный);
		Если ПечатьВИностраннойВалюте Тогда
			ИмяМакета = "Документ.АвансовыйОтчет.ПФ_MXL_АвансовыйОтчетВИностраннойВалюте_ru";
		Иначе
			ИмяМакета = "Документ.АвансовыйОтчет.ПФ_MXL_АвансовыйОтчет_ru";
		КонецЕсли;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Выводим титульный лист авансового отчета
		ОбластьТитул = Макет.ПолучитьОбласть("Титул");
		ОбластьТитулПодвал = Макет.ПолучитьОбласть("ТитулПодвал");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьТитул, Выборка.Ссылка);
		
		Постфикс = ПостфиксНомераДокумента(Выборка.Ссылка);
		
		ОбластьТитул.Параметры.Заполнить(Выборка);
		ОбластьТитул.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер) + Постфикс;
		ОбластьТитул.Параметры.РуководительПредставление = Выборка.Руководитель;
		
		ОбластьТитулПодвал.Параметры.Заполнить(Выборка);
		ОбластьТитулПодвал.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер) + Постфикс;
		ОбластьТитулПодвал.Параметры.ГлавныйБухгалтерПредставление = Выборка.ГлавныйБухгалтер;
		
		
		СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
		
		Если Не ПечатьВИностраннойВалюте Тогда
			
			ПолученоИзКассы = 0; ПолученоПоБанковскимКартам = 0;
			ПолученоИзКассыВВалюте = ""; ПолученоПоБанковскимКартамВВалюте = "";
			НачальныйОстаток = 0; НачальныйПерерасход = 0;
			КонечныйОстаток = 0; КонечныйПерерасход = 0;
			Израсходовано = 0;
			
			Если ВыборкаОстатки.НайтиСледующий(СтруктураПоиска) Тогда
				НачальныйОстаток = ВыборкаОстатки.НачальныйОстаток;
				НачальныйПерерасход = ВыборкаОстатки.НачальныйПерерасход;
				КонечныйОстаток = ВыборкаОстатки.КонечныйОстаток;
				КонечныйПерерасход = ВыборкаОстатки.КонечныйПерерасход;
				Израсходовано = ВыборкаОстатки.Израсходовано;
			КонецЕсли;
			
			ВыборкаОстатки.Сбросить();
			
			Пока ВыборкаВыдано.НайтиСледующий(СтруктураПоиска) Цикл
				
				Если ВыборкаВыдано.Валюта <> ВыборкаВыдано.ВалютаРегламентированногоУчета Тогда
					Если ВыборкаВыдано.СуммаВыданоНаличнымиВВалюте > 0 Тогда
						ПолученоИзКассыВВалюте = ПолученоИзКассыВВалюте
							+ " " + Строка(ВыборкаВыдано.СуммаВыданоНаличнымиВВалюте)
							+ " " + Строка(ВыборкаВыдано.Валюта) + " ";
					КонецЕсли;
					Если ВыборкаВыдано.СуммаВыданоКартойВВалюте > 0 Тогда
						ПолученоПоБанковскимКартамВВалюте = ПолученоПоБанковскимКартамВВалюте
							+ " " + Строка(ВыборкаВыдано.СуммаВыданоКартойВВалюте)
							+ " " + Строка(ВыборкаВыдано.Валюта) + " ";
					КонецЕсли;
				КонецЕсли;
				ПолученоИзКассы = ПолученоИзКассы + ВыборкаВыдано.СуммаВыданоНаличными;
				ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам + ВыборкаВыдано.СуммаВыданоКартой;
			КонецЦикла;
			
			ВыборкаВыдано.Сбросить();
			
			ВыводитьВалюту = Истина;
			Если НачальныйПерерасход > 0 И (ПолученоИзКассы > 0 Или ПолученоПоБанковскимКартам > 0) Тогда
				ВыводитьВалюту = Ложь;
			КонецЕсли;
			
			Если НачальныйПерерасход > 0 Тогда
				СуммаВозмещения = Мин(НачальныйПерерасход, ПолученоИзКассы);
				ПолученоИзКассы = ПолученоИзКассы - СуммаВозмещения;
				НачальныйПерерасход = НачальныйПерерасход - СуммаВозмещения;
			КонецЕсли;
			
			Если НачальныйПерерасход > 0 Тогда
				СуммаВозмещения = Мин(НачальныйПерерасход, ПолученоПоБанковскимКартам);
				ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам - СуммаВозмещения;
				НачальныйПерерасход = НачальныйПерерасход - СуммаВозмещения;
			КонецЕсли;
			
			ОбластьТитул.Параметры.ПолученоИзКассы = ПолученоИзКассы;
			ОбластьТитул.Параметры.ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам;
			ОбластьТитул.Параметры.ИтогоПолучено = ПолученоИзКассы + ПолученоПоБанковскимКартам;
			Если ВыводитьВалюту Тогда
				ОбластьТитул.Параметры.ПолученоИзКассыВВалюте = ПолученоИзКассыВВалюте;
				ОбластьТитул.Параметры.ПолученоПоБанковскимКартамВВалюте = ПолученоПоБанковскимКартамВВалюте;
			КонецЕсли;
			
			ОбластьТитул.Параметры.НачальныйОстаток = НачальныйОстаток;
			ОбластьТитул.Параметры.НачальныйПерерасход = НачальныйПерерасход;
			ОбластьТитул.Параметры.КонечныйОстаток = КонечныйОстаток;
			ОбластьТитул.Параметры.КонечныйПерерасход = КонечныйПерерасход;
			ОбластьТитул.Параметры.Израсходовано = Израсходовано;
			
			ОбластьТитулПодвал.Параметры.СуммаОтчетаПрописью =
				РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(Израсходовано, Выборка.ВалютаРегламентированногоУчета, Ложь);
			
			ИспСумма = Окр(Израсходовано, 2, 1);
			ЦелСумма = Цел(Израсходовано);
			КопСумма = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));
			
			ОбластьТитул.Параметры.ИзрасходованоРуб = ЦелСумма;
			ОбластьТитул.Параметры.ИзрасходованоКоп = Формат(КопСумма,"ЧН=00");
			
			Счетчик = 0;
			Проводки.Свернуть("Регистратор, СчетДт, СчетКт", "Сумма");
			СтруктураПоиска = Новый Структура("Регистратор", Выборка.Ссылка);
			НайденныеПроводки = Проводки.НайтиСтроки(СтруктураПоиска);
			Для каждого Проводка Из НайденныеПроводки Цикл
				Счетчик = Счетчик + 1;
				Если Счетчик < 9 Тогда
					ОбластьТитул.Параметры["СубСчетДебет"  + Счетчик] = Проводка.СчетДт;
					ОбластьТитул.Параметры["СуммаДебет"    + Счетчик] = Проводка.Сумма;
					ОбластьТитул.Параметры["СубСчетКредит" + Счетчик] = Проводка.СчетКт;
					ОбластьТитул.Параметры["СуммаКредит"   + Счетчик] = Проводка.Сумма;
				Иначе
					Если Счетчик = 9 Тогда
						ТабличныйДокумент.Вывести(ОбластьТитул);
					КонецЕсли;
					ОбластьПроводок = Макет.ПолучитьОбласть("СтрокаПроводок");
					ОбластьПроводок.Параметры["СубСчетДебет" ] = Проводка.СчетДт;
					ОбластьПроводок.Параметры["СуммаДебет"   ] = Проводка.Сумма;
					ОбластьПроводок.Параметры["СубСчетКредит"] = Проводка.СчетКт;
					ОбластьПроводок.Параметры["СуммаКредит"  ] = Проводка.Сумма;
					ТабличныйДокумент.Вывести(ОбластьПроводок);
				КонецЕсли;
			КонецЦикла;
			
			Если Счетчик < 9 Тогда
				ТабличныйДокумент.Вывести(ОбластьТитул);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьТитулПодвал);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Оборотная сторона
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			
			ИтогоПоОтчету = 0;
			ИтогоПоОтчетуВВалюте = 0;
			ИтогоПоУчету = 0;
			ИтогоПоУчетуВВалюте = 0;
			
			НомерСтроки = 0;
			
			СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
			ВыборкаОборотнаяСторона.НайтиСледующий(СтруктураПоиска);
			
			ОбработанныеНомераСтрок = Новый Массив;
			ТекущийРаздел = 0;
			
			ВыборкаПоРасходам = ВыборкаОборотнаяСторона.Выбрать();
			Пока ВыборкаПоРасходам.Следующий() Цикл
				
				Если ТекущийРаздел <> ВыборкаПоРасходам.НомерРаздела Тогда
					ОбработанныеНомераСтрок.Очистить();
					ТекущийРаздел = ВыборкаПоРасходам.НомерРаздела;
				КонецЕсли;
				
				Если ОбработанныеНомераСтрок.Найти(ВыборкаПоРасходам.НомерСтроки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбработанныеНомераСтрок.Добавить(ВыборкаПоРасходам.НомерСтроки);
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаПоРасходам);
				НомерСтроки = НомерСтроки + 1;
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				
				ИтогоПоОтчету = ИтогоПоОтчету + ВыборкаПоРасходам.ПоОтчету;
				ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте + ВыборкаПоРасходам.ПоОтчетуВВалюте;
				ИтогоПоУчету = ИтогоПоУчету + ВыборкаПоРасходам.ПоУчету;
				ИтогоПоУчетуВВалюте = ИтогоПоУчетуВВалюте + ВыборкаПоРасходам.ПоУчетуВВалюте;
				
				ОбластьМакета.Параметры.ДебетСубСчета = "";
				
				Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда // Оплата и прочие расходы
					
					МассивСчетов = Новый Массив;
					
					Если ЗначениеЗаполнено(ВыборкаПоРасходам.СчетУчета) Тогда
						
						МассивСчетов.Добавить(ВыборкаПоРасходам.СчетУчета);
					Иначе
						
						Если ИспользуетсяРеглУчет Тогда
						
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
							СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.СтатьяРасходов);
							
							ВыборкаСчетов.Сбросить();
						
							Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
								МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
							КонецЦикла;
							
							СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.АналитикаРасходов);
							
							ВыборкаСчетов.Сбросить();
							Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
								МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
							КонецЦикла;
							
							// НДС
							Если ВыборкаПоРасходам.НомерРаздела = 1 Тогда
								
								СтруктураПоиска = Новый Структура;
								СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
								СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.Контрагент);
								
								ВыборкаСчетов.Сбросить();
								Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
									
									СтруктураПоискаУточнение = Новый Структура;
									СтруктураПоискаУточнение.Вставить("СчетДт",           ВыборкаСчетов.СчетДт);
									СтруктураПоискаУточнение.Вставить("Регистратор",      Выборка.Ссылка);
									СтруктураПоискаУточнение.Вставить("ЗначениеСубконто", Выборка.Ссылка);
									
									ВыборкаСчетовУточнение.Сбросить();
									Пока ВыборкаСчетовУточнение.НайтиСледующий(СтруктураПоискаУточнение) Цикл
										МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
									КонецЦикла;
								КонецЦикла;
							КонецЕсли;
							
							// Оплата
							Если ВыборкаПоРасходам.НомерРаздела = 2 Тогда
								
								СтруктураПоиска = Новый Структура;
								СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
								СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.КонтрагентОплаты);
								
								ВыборкаСчетов.Сбросить();
								Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
									
									СтруктураПоискаУточнение = Новый Структура;
									СтруктураПоискаУточнение.Вставить("СчетДт",           ВыборкаСчетов.СчетДт);
									СтруктураПоискаУточнение.Вставить("Регистратор",      Выборка.Ссылка);
									СтруктураПоискаУточнение.Вставить("ЗначениеСубконто", Выборка.Ссылка);
									
									ВыборкаСчетовУточнение.Сбросить();
									Если Не ВыборкаСчетовУточнение.НайтиСледующий(СтруктураПоискаУточнение) Тогда
										МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						Иначе
							
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
							СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.СтатьяРасходов);
							
							ВыборкаСчетов.Сбросить();
							Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
								МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
							КонецЦикла;
							
							СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.АналитикаРасходов);
							
							ВыборкаСчетов.Сбросить();
							Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
								МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
							КонецЦикла;
							
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
							СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.КонтрагентОплаты);
							
							ВыборкаСчетов.Сбросить();
							Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
								МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
				Иначе // Закупка
					СтруктураПоиска = Новый Структура();
					СтруктураПоиска.Вставить("Регистратор", Выборка.Ссылка);
					
					ВыборкаПроводок.Сбросить();
					МассивСчетов = Новый Массив;
					
					Пока ВыборкаПроводок.НайтиСледующий(СтруктураПоиска) Цикл
						МассивСчетов.Добавить(ВыборкаПроводок.СчетДт);
					КонецЦикла;
				КонецЕсли;
				
				ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);
				Для каждого СчетДт Из МассивСчетов Цикл
					ОбластьМакета.Параметры.ДебетСубСчета = ОбластьМакета.Параметры.ДебетСубСчета
						+ ?(ПустаяСтрока(ОбластьМакета.Параметры.ДебетСубСчета), "", ", ")
						+ СчетДт;
				КонецЦикла;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			// Подвал авансового отчета
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ОбластьМакета.Параметры.ИтогоПоОтчету                 = ИтогоПоОтчету;
			ОбластьМакета.Параметры.ИтогоПоОтчетувВалюте          = ИтогоПоОтчетуВВалюте;
			ОбластьМакета.Параметры.ИтогоПоУчету                  = ИтогоПоУчету;
			ОбластьМакета.Параметры.ИтогоПоУчетувВалюте           = ИтогоПоУчетуВВалюте;
			ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = Выборка.ПредставлениеПодотчетногоЛица;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ВыборкаОборотнаяСторона.Сбросить();
			
		Иначе // Валютный отчет
			
			ТабличныйДокумент.Вывести(ОбластьТитул);
			
			Область = Макет.ПолучитьОбласть("Титул1|Показатели");
			ТабличныйДокумент.Вывести(Область);
			
			ЕстьСтрокаКонвертации = ВыборкаКонвертация.НайтиСледующий(СтруктураПоиска);
			Если ЕстьСтрокаКонвертации Тогда
				Область = Макет.ПолучитьОбласть("Титул1|Конвертация");
				ТабличныйДокумент.Присоединить(Область);
			КонецЕсли;
			
			ВыборкаВалютныхОстатков = Неопределено;
			
			// Остатки
			Если ВыборкаДатыОстатков.НайтиСледующий(СтруктураПоиска) Тогда
				
				ЗапросВалютныхОстатков.УстановитьПараметр("ДатаНачальныхОстатков", Новый Граница(ВыборкаДатыОстатков.МоментВремениПредыдущийОтчет));
				ЗапросВалютныхОстатков.УстановитьПараметр("ДатаКонечныхОстатков", Новый Граница(ВыборкаДатыОстатков.МоментВремени));
				ЗапросВалютныхОстатков.УстановитьПараметр("Организация", ВыборкаДатыОстатков.Организация);
				ЗапросВалютныхОстатков.УстановитьПараметр("ПодотчетноеЛицо", ВыборкаДатыОстатков.ПодотчетноеЛицо);
				
				ВыборкаВалютныхОстатков = ЗапросВалютныхОстатков.Выполнить().Выбрать();
				
				Пока ВыборкаВалютныхОстатков.Следующий() Цикл
					Если ВыборкаВалютныхОстатков.СуммаНачальныйОстаток <> 0 Тогда
						Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
						Область.Параметры.Валюта = ВыборкаВалютныхОстатков.Валюта;
						Область.Параметры.Сумма = ВыборкаВалютныхОстатков.СуммаНачальныйОстаток;
						ТабличныйДокумент.Вывести(Область);
						
						Если ЕстьСтрокаКонвертации Тогда
							ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ВыборкаВалютныхОстатков.Сбросить();
				
				Область = Макет.ПолучитьОбласть("Титул2|Показатели");
				ТабличныйДокумент.Вывести(Область);
				
				Если ЕстьСтрокаКонвертации Тогда
					ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
				КонецЕсли;
				
				Пока ВыборкаВалютныхОстатков.Следующий() Цикл
					Если ВыборкаВалютныхОстатков.СуммаНачальныйПерерасход <> 0 Тогда
						Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
						Область.Параметры.Валюта = ВыборкаВалютныхОстатков.Валюта;
						Область.Параметры.Сумма = ВыборкаВалютныхОстатков.СуммаНачальныйПерерасход;
						ТабличныйДокумент.Вывести(Область);
						
						Если ЕстьСтрокаКонвертации Тогда
							ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ВыборкаВалютныхОстатков.Сбросить();
				
			КонецЕсли;
			
			// Обороты
			Область = Макет.ПолучитьОбласть("Титул3|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаВыдано.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаВыдано.СуммаВыданоНаличными <> 0 Или ВыборкаВыдано.СуммаВыданоНаличнымиВВалюте <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаВыдано.Валюта;
					Если ВыборкаВыдано.Валюта = Выборка.ВалютаРегламентированногоУчета Тогда
						Область.Параметры.Сумма = ВыборкаВыдано.СуммаВыданоНаличными;
					Иначе
						Область.Параметры.Сумма = ВыборкаВыдано.СуммаВыданоНаличнымиВВалюте;
					КонецЕсли;
					ТабличныйДокумент.Вывести(Область);
				КонецЕсли;
				
				Если ЕстьСтрокаКонвертации Тогда
					ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
				КонецЕсли;
			КонецЦикла;
			ВыборкаВыдано.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул4|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаВыдано.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаВыдано.СуммаВыданоКартой <> 0 Или ВыборкаВыдано.СуммаВыданоКартойВВалюте <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаВыдано.Валюта;
					Если ВыборкаВыдано.Валюта = Выборка.ВалютаРегламентированногоУчета Тогда
						Область.Параметры.Сумма = ВыборкаВыдано.СуммаВыданоКартой;
					Иначе
						Область.Параметры.Сумма = ВыборкаВыдано.СуммаВыданоКартойВВалюте;
					КонецЕсли;
					ТабличныйДокумент.Вывести(Область);
				КонецЕсли;
				
				Если ЕстьСтрокаКонвертации Тогда
					ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
				КонецЕсли;
			КонецЦикла;
			ВыборкаВыдано.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул5|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаИзрасходованоВВалюте.НайтиСледующий(СтруктураПоиска) Цикл
				Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
				ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаИзрасходованоВВалюте);
				ТабличныйДокумент.Вывести(Область);
				
				Если ЕстьСтрокаКонвертации Тогда
					ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
				КонецЕсли;
			КонецЦикла;
			
			// Остатки
			Область = Макет.ПолучитьОбласть("Титул6|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Если ВыборкаВалютныхОстатков <> Неопределено Тогда
				
				Пока ВыборкаВалютныхОстатков.Следующий() Цикл
					Если ВыборкаВалютныхОстатков.СуммаКонечныйОстаток <> 0 Тогда
						Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
						Область.Параметры.Валюта = ВыборкаВалютныхОстатков.Валюта;
						Область.Параметры.Сумма = ВыборкаВалютныхОстатков.СуммаКонечныйОстаток;
						ТабличныйДокумент.Вывести(Область);
						
						Если ЕстьСтрокаКонвертации Тогда
							ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ВыборкаВалютныхОстатков.Сбросить();
				
				Пока ЕстьСтрокаКонвертации Цикл
					ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
				КонецЦикла;
			КонецЕсли;
			
			Область = Макет.ПолучитьОбласть("Титул7|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Пока ЕстьСтрокаКонвертации Цикл
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЦикла;
			
			Если ВыборкаВалютныхОстатков <> Неопределено Тогда
				
				Пока ВыборкаВалютныхОстатков.Следующий() Цикл
					Если ВыборкаВалютныхОстатков.СуммаКонечныйПерерасход <> 0 Тогда
						Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
						Область.Параметры.Валюта = ВыборкаВалютныхОстатков.Валюта;
						Область.Параметры.Сумма = ВыборкаВалютныхОстатков.СуммаКонечныйПерерасход;
						ТабличныйДокумент.Вывести(Область);
						
						Если ЕстьСтрокаКонвертации Тогда
							ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ВыборкаВалютныхОстатков.Сбросить();
				
				Пока ЕстьСтрокаКонвертации Цикл
					ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
				КонецЦикла;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьТитулПодвал);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Оборотная сторона
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			
			НомерСтроки = 0;
			
			СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
			ВыборкаОборотнаяСторона.НайтиСледующий(СтруктураПоиска);
			
			ОбработанныеНомераСтрок = Новый Массив;
			ТекущийРаздел = 0;
			
			ВыборкаПоРасходам = ВыборкаОборотнаяСторона.Выбрать();
			Пока ВыборкаПоРасходам.Следующий() Цикл
				
				Если ТекущийРаздел <> ВыборкаПоРасходам.НомерРаздела Тогда
					ОбработанныеНомераСтрок.Очистить();
					ТекущийРаздел = ВыборкаПоРасходам.НомерРаздела;
				КонецЕсли;
				
				Если ОбработанныеНомераСтрок.Найти(ВыборкаПоРасходам.НомерСтроки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбработанныеНомераСтрок.Добавить(ВыборкаПоРасходам.НомерСтроки);
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаПоРасходам);
				НомерСтроки = НомерСтроки + 1;
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			// Подвал авансового отчета
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ВыборкаОборотнаяСторона.Сбросить();
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПостфиксНомераДокумента(Ссылка)
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Возврат НСтр("ru = 'А'", Метаданные.Языки.Русский.КодЯзыка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Возврат НСтр("ru = 'Т'", Метаданные.Языки.Русский.КодЯзыка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		Возврат НСтр("ru = 'П'", Метаданные.Языки.Русский.КодЯзыка);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

//-- Локализация

#КонецОбласти

#КонецОбласти
