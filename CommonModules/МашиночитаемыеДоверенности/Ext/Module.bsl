#Область ПрограммныйИнтерфейс

// Проверяет используется ли работа с МЧД.
// 
// Параметры:
// 	Организации - Массив из ОпределяемыйТип.Организация
// Возвращаемое значение:
//  Булево - признак использования МЧД
// 
Функция ИспользуютсяМЧД(Организации = Неопределено) Экспорт
	
	Возврат ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьМЧД") И
			ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД");

КонецФункции

// Возвращает пустую структуру данных доверенности.
// 
// Возвращаемое значение:
//  ДанныеДоверенности - Структура:
//  * НомерДоверенности - Строка
//  * ИННДоверителя - Строка
Функция НовыеДанныеДоверенности() Экспорт
	ДанныеДоверенности = Новый Структура;
	ДанныеДоверенности.Вставить("НомерДоверенности", "");
	ДанныеДоверенности.Вставить("ИННДоверителя", "");
	Возврат ДанныеДоверенности;
КонецФункции

// Добавляет к подписанному объекту МЧД контрагента.
// 
// Параметры:
//  ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект - Ссылка на подписанный объект
//  НомерДоверенности - Строка - Номер доверенности
//  ИННДоверителя - Строка - ИНН доверителя
//  
Процедура ДобавитьДоверенностьКонтрагента(ПодписанныйОбъект, НомерДоверенности, ИННДоверителя) Экспорт
	
	ДанныеМЧД = НовыеДанныеДоверенности();
	ДанныеМЧД.НомерДоверенности = НомерДоверенности;
	ДанныеМЧД.ИННДоверителя = ИННДоверителя;
	Результат = Справочники.МашиночитаемыеДоверенностиКонтрагентов.НайтиСоздатьМЧД(ДанныеМЧД);
	Если Результат.Ошибка Тогда
		ИмяСобытия = НСтр("ru = 'Ошибка записи МЧД контрагента'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Результат.ОписаниеОшибки);
	Иначе
		РегистрыСведений.МашиночитаемыеДоверенностиЭД.ДобавитьМЧД(ПодписанныйОбъект, Результат.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет к подписанному объекту МЧД организации.
// 
// Параметры:
//  ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект - Ссылка на подписанный объект
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций - Ссылка на МЧД организации
//  
Процедура ДобавитьДоверенностьОрганизации(ПодписанныйОбъект, МЧД) Экспорт
	РегистрыСведений.МашиночитаемыеДоверенностиЭД.ДобавитьМЧД(ПодписанныйОбъект, МЧД);
КонецПроцедуры

// Записывает результат проверки МЧД в информационную базу.
// 
// Параметры:
//  ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект - Ссылка на подписанный объект.
//  Отпечаток - Строка
//  ДоверенностьВерна - Булево
//
Процедура ЗаписатьРезультатПроверкиМЧД(ПодписанныйОбъект, Отпечаток, ДоверенностьВерна) Экспорт
	
	Если ДоверенностьВерна <> Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		МенеджерЗаписи = РегистрыСведений.РезультатыПроверкиМЧДОператором.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПодписанныйОбъект = ПодписанныйОбъект;
		МенеджерЗаписи.Отпечаток = Отпечаток;
		МенеджерЗаписи.ДоверенностьВерна = ДоверенностьВерна;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру для отбора машиночитаемых доверенностей.
// 
// Возвращаемое значение:
//  Структура:
// 	 * Доверитель - ОпределяемыйТип.Организация - Организация предприятия
// 	 * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - Сертификат
//                доверенного лица.
//         		
Функция НовыйОтборМЧД() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Доверитель", Неопределено);
	Отбор.Вставить("Сертификат", Неопределено);
	
	Возврат Отбор;
	
КонецФункции

// Возвращает массив ссылок МЧД 
//
// Параметры:
// 	Отбор - см. НовыйОтборМЧД 
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//
Функция ПолучитьДоверенностиОрганизации(Отбор) Экспорт
	
	Доверитель = Отбор.Доверитель;
	Сертификат = Отбор.Сертификат;
	
	СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификатаПоСсылке(Сертификат);
	
	ПредставительИНН = СвойстваСубъектаСертификата.ИНН;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МашиночитаемыеДоверенностиОрганизаций.Ссылка КАК Ссылка,
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаВыдачи,
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаОкончания
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
	|ГДЕ
	|	МашиночитаемыеДоверенностиОрганизаций.Организация = &Организация
	|	И МашиночитаемыеДоверенностиОрганизаций.ПредставительФЛ_ИНН = &ПредставительИНН
	|	И НЕ МашиночитаемыеДоверенностиОрганизаций.ПометкаУдаления
	|	И МашиночитаемыеДоверенностиОрганизаций.Статус В (&Статус)";
	
	Запрос.УстановитьПараметр("Организация", Доверитель);
	Запрос.УстановитьПараметр("Статус", СтатусыДействующейДоверенности());
	Запрос.УстановитьПараметр("ПредставительИНН", ПредставительИНН);  
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Результат = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ДоверенностьДействительнаПоСроку(Выборка.ДатаВыдачи, Выборка.ДатаОкончания) Тогда
			Результат.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 

// Получить номера доверенностей.
// 
// Параметры:
//  Доверенности - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  КлючИЗначение:
//      * Ключ - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//      * Значение - Строка - номер доверенности
Функция ПолучитьНомераДоверенностей(Доверенности) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Доверенности, "НомерДоверенности");
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Структура адреса сервера МЧД.
// 
// Возвращаемое значение:
//  Структура:
//  * АдресСервера - Строка
//  * РесурсКорняAPI - Строка
//  * ИспользоватьРасширенияAPI - Булево
//  
Функция СтруктураАдресаСервераМЧД() Экспорт
	
	СтруктураАдреса = Новый Структура();
	СтруктураАдреса.Вставить("АдресСервера",				"https://mchd-pilot.e1c-ops.com");
	СтруктураАдреса.Вставить("РесурсКорняAPI",				"/applications/MChD/api/clientpoa");
	СтруктураАдреса.Вставить("ИспользоватьРасширенияAPI",	Истина);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Формирует файл заявления на отмену МЧД.
// 
// Параметры:
//  НомерДоверенности - Строка - Номер доверенности
//  ПричинаОтмены - Строка - Причина отмены доверенности
// 
// Возвращаемое значение:
//  Структура - Подготовленный файл:
//  * ИмяФайла - Строка - Имя файла
//  * Содержимое - Строка - Содержимое файла
//
Функция ВыгрузитьЗаявлениеНаОтменуМЧД(НомерДоверенности, ПричинаОтмены) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
	ЗаписьXML.ЗаписатьАтрибут("ТД", XMLСтрока("Заявление на отзыв МЧД"));
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвДов");
	ЗаписьXML.ЗаписатьАтрибут("НомДовер", XMLСтрока(НомерДоверенности));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвПрич");
	ЗаписьXML.ЗаписатьАтрибут("Отз", XMLСтрока(ПричинаОтмены));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат Новый Структура("ИмяФайла, Содержимое", "revoke.xml", ЗаписьXML.Закрыть());
	
КонецФункции

// Получает номер МЧД на сервере МЧД.
// 
// Параметры:
//  ТокенДоступа - Строка - Токен доступа к серверу МЧД.
// 
// Возвращаемое значение:
//  Структура - Результат:
//   * НомерДоверенности - Строка - Номер доверенности
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьНомерМЧД(ТокенДоступа = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеНомераМЧДНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("НомерДоверенности", "");
	Результат.Вставить("ТекстОтвета", 		"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию = НСтр("ru = 'Не получен номер доверенности с сервера МЧД'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = НСтр("ru = 'Не удалось получить данные номера доверенности с сервера МЧД: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния = НСтр("ru = 'Не удалось получить данные номера доверенности с сервера МЧД: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета = НСтр("ru = 'Ошибка при получении номера доверенности с сервера МЧД. %1'");
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/number", "/poar-webapp/integration/poa/generate-number");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(,, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		Результат.ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаОтвета, "utf-8");
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");
	Исключение
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать данные при получении номера доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ОтветHTTP,, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.НомерДоверенности) Тогда
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ВывестиИЗаписатьОшибкуМЧД(ОтветHTTP, СтруктураОтвета, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Регистрирует МЧД на сервере МЧД.
// 
// Параметры:
//  ИмяФайлаВыгрузки - Строка - Имя файла выгрузки
//  ДанныеВыгрузки - ДвоичныеДанные - Данные выгрузки
//  ДанныеПодписи - ДвоичныеДанные - Данные подписи
//  ТокенДоступа - Строка - Токен доступа
//  НомерДоверенности - Строка - Номер доверенности
//  СсылкаНаДоверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, Неопределено - Ссылка на доверенность
// 
// Возвращаемое значение:
//  Структура - Результат регистрации:
//   * ИдентификаторТранзакции - Строка - Идентификатор транзакции
//   * НомерДоверенности - Строка - Номер доверенности
//   * ХешДоверенности - Строка - Хеш доверенности
//   * ИННДоверителя - Строка - ИНН доверителя
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ЗарегистрироватьМЧД(ИмяФайлаВыгрузки, ДанныеВыгрузки, ДанныеПодписи, ТокенДоступа = "", НомерДоверенности = "",
	СсылкаНаДоверенность = Неопределено) Экспорт

	Если ЗначениеЗаполнено(СсылкаНаДоверенность) Тогда
		ОбъектДоверенность = СсылкаНаДоверенность.ПолучитьОбъект();
		ОбъектДоверенность.ИмяФайлаВыгрузка = ИмяФайлаВыгрузки;
		ТекстВыгрузки = ПолучитьСтрокуИзДвоичныхДанных(ДанныеВыгрузки, "windows-1251");
		СконветированныеДанныеВыгрузки = ПолучитьДвоичныеДанныеИзСтроки(ТекстВыгрузки, "utf-8", Истина);
		ОбъектДоверенность.XMLизРеестра = Новый ХранилищеЗначения(СконветированныеДанныеВыгрузки,
			Новый СжатиеДанных(9));
		ОбъектДоверенность.ЭлектроннаяПодпись = Новый ХранилищеЗначения(ДанныеПодписи,
			Новый СжатиеДанных(9));
		ОбъектДоверенность.Записать();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.РегистрацияМЧДНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторТранзакции", 	"");
	Результат.Вставить("НомерДоверенности", 		"");
	Результат.Вставить("ХешДоверенности", 			"");
	Результат.Вставить("ИННДоверителя", 			"");
	Результат.Вставить("ТекстОтвета", 				"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию = НСтр("ru = 'Не получен идентификатор загрузки доверенности на сервер МЧД'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = НСтр("ru = 'Не удалось загрузить доверенность на сервер МЧД: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния = НСтр("ru = 'Не удалось загрузить доверенность на сервер МЧД: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета = НСтр("ru = 'Ошибка при загрузке доверенности на сервер МЧД. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/contract/pre_validation/failed",
		СтрШаблон(
			НСтр("ru = 'Регистрационный номер регистрируемой доверенности ""%1"" уже используется'"),
			НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poa", "/poar-webapp/integration/poa");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "multipart/form-data; boundary=My1cV8bNdr");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	// запись передаваемых файлов
	
	МассивИменФайлов = Новый Массив;
	
	СодержимоеФайла = "--My1cV8bNdr"
		+ Символы.ПС + "Content-Disposition: form-data; name=""poa""; filename=""" + ИмяФайлаВыгрузки + """"
		+ Символы.ПС + "Content-Type: text/xml"
		+ Символы.ПС
		+ Символы.ПС;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ОбъектЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ОбъектЗаписьТекста.Записать(СодержимоеФайла);
	ОбъектЗаписьТекста.Закрыть();
	МассивИменФайлов.Добавить(ИмяВременногоФайла);
	
	ИмяВременногоФайлаДоверенности = ПолучитьИмяВременногоФайла();
	ИмяВременногоФайлаДоверенности = ПолучитьИмяВременногоФайла();
	ТекстВыгрузки = ПолучитьСтрокуИзДвоичныхДанных(ДанныеВыгрузки, "windows-1251");
	ПолучитьДвоичныеДанныеИзСтроки(ТекстВыгрузки, "utf-8", Истина).Записать(ИмяВременногоФайлаДоверенности);
	
	МассивИменФайлов.Добавить(ИмяВременногоФайлаДоверенности);
	
	СодержимоеФайла = Символы.ПС + "--My1cV8bNdr"
		+ Символы.ПС + "Content-Disposition: form-data; name=""signature""; filename=""" + ИмяФайлаВыгрузки + ".sig"""
		+ Символы.ПС + "Content-Type: application/octet-stream"
		+ Символы.ПС
		+ Символы.ПС;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ОбъектЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ОбъектЗаписьТекста.Записать(СодержимоеФайла);
	ОбъектЗаписьТекста.Закрыть();
	МассивИменФайлов.Добавить(ИмяВременногоФайла);
	
	ИмяВременногоФайлаПодписи = ПолучитьИмяВременногоФайла();
	Подпись64 = Base64Строка(ДанныеПодписи);
	Подпись64 = СтрЗаменить(Подпись64, Символы.ВК, "");
	Подпись64 = СтрЗаменить(Подпись64, Символы.ПС, "");
	ПолучитьДвоичныеДанныеИзСтроки(Подпись64, "windows-1251").Записать(ИмяВременногоФайлаПодписи);
	МассивИменФайлов.Добавить(ИмяВременногоФайлаПодписи);
	
	СодержимоеФайла = Символы.ПС + "--My1cV8bNdr--";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ОбъектЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ОбъектЗаписьТекста.Записать(СодержимоеФайла);
	ОбъектЗаписьТекста.Закрыть();
	МассивИменФайлов.Добавить(ИмяВременногоФайла);
	
	// объединение передаваемых файлов
	
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
	ОбъединитьФайлы(МассивИменФайлов, ИмяФайлаЗапроса);
	Для каждого ИмяВременногоФайла Из МассивИменФайлов Цикл
		ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	КонецЦикла;
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	ЗапросHTTP.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		ВывестиИЗаписатьОшибкуМЧД(,, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		Результат.ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаОтвета, "utf-8");
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");
		Результат.ХешДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaId"),
			СтруктураОтвета.poaId, "");
		Результат.ИННДоверителя = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("issuerInn"),
			СтруктураОтвета.issuerInn, "");
	Исключение
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при загрузке доверенности на сервер МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ОтветHTTP,, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ВывестиИЗаписатьОшибкуМЧД(ОтветHTTP, СтруктураОтвета, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Получает статус транзакции МЧД.
// 
// Параметры:
//  ИдентификаторТранзакции - Строка - Идентификатор транзакции
//  ТокенДоступа - Строка - Токен доступа
//  НомерДоверенности - Строка - Номер доверенности
// 
// Возвращаемое значение:
//  Структура - Результат получения статуса транзакции МЧД:
//   * СтатусТранзакции - Строка - Статус транзакции
//   * ИдентификаторТранзакции - Строка - Идентификатор транзакции
//   * ДатаВремяТранзакции - Дата, Неопределено - Дата и время транзакции
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьСтатусТранзакцииМЧД(ИдентификаторТранзакции, ТокенДоступа = "", НомерДоверенности = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеСтатусаТранзакцииМЧДНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусТранзакции", 			"");
	Результат.Вставить("ИдентификаторТранзакции", 	"");
	Результат.Вставить("ДатаВремяТранзакции", 		Неопределено);
	Результат.Вставить("ТекстОтвета", 				"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию = НСтр("ru = 'Не получен статус обработки с сервера МЧД'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = НСтр("ru = 'Не удалось получить статус обработки с сервера МЧД: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния = НСтр("ru = 'Не удалось получить статус обработки с сервера МЧД: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета = НСтр("ru = 'Ошибка при получении статус обработки с сервера МЧД. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/not-found",
		СтрШаблон(
			НСтр("ru = 'Не найдена загрузка доверенности номер ""%1"" с идентификатором ""%2""'"),
			НомерДоверенности,
			ИдентификаторТранзакции));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/transactions?txId=" + ИдентификаторТранзакции,
		"/poar-webapp/integration/poa/" + ИдентификаторТранзакции + "/status");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(,, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		Результат.ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаОтвета, "utf-8");
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.СтатусТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status"),
			СтруктураОтвета.status, "");
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
		
		Результат.ДатаВремяТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("timestamp"),
			СтруктураОтвета.timestamp, Неопределено);
	Исключение
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ОтветHTTP,, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если ЗначениеЗаполнено(Результат.ДатаВремяТранзакции) Тогда
		Попытка
			Результат.ДатаВремяТранзакции = XMLЗначение(Тип("Дата"), Результат.ДатаВремяТранзакции);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось разобрать дату и время транзакции'");
			СтруктураПараметров = Новый Структура("ШаблонОшибкиИзИсключения", ТекстСообщения); 
			ВывестиИЗаписатьОшибкуМЧД(ОтветHTTP, , СтруктураПараметров, "ТолькоЗаписатьВЖурналРегистрации");
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ВывестиИЗаписатьОшибкуМЧД(ОтветHTTP, СтруктураОтвета, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Загружает и возвращает сведения доверенности с сервера МЧД.
// 
// Параметры:
//  Данные - Структура:
//   * НомерДоверенности - Строка - Номер доверенности
//   * ИННДоверителя - Строка - ИНН доверителя
//  ТокенДоступа - Строка - Токен доступа
// 
// Возвращаемое значение:
//  Неопределено, Структура: - Полученные сведения доверенности на сервере МЧД:
//   * ЧастичныеДанные - Структура - См. МашиночитаемыеДоверенности.ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД
//   * ПолныеДанные - ДвоичныеДанные
//   * ДатаЗагрузкиИзРеестра - Дата - Текущая дата
// 
Функция ПолучитьСведенияДоверенностиНаСервереМЧД(Данные, ТокенДоступа = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	РезультатЗагрузки = ПолучитьПолныеДанныеДоверенностиНаСервереМЧД(
							Данные.НомерДоверенности,
							Данные.ИННДоверителя,
							ТокенДоступа);
							
	ПолныеДанные = Неопределено;
	Если ЗначениеЗаполнено(РезультатЗагрузки.ДанныеВыгрузки) Тогда
		ПолныеДанные = РезультатЗагрузки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
	ЧастичныеДанные = ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД(Данные.НомерДоверенности, ТокенДоступа);
	Возврат Новый Структура(
		"ЧастичныеДанные, ПолныеДанные, ДатаЗагрузкиИзРеестра",
		ЧастичныеДанные, ПолныеДанные, ТекущаяДатаСеанса());
			
КонецФункции

// Получает частичные данные доверенности на сервере МЧД.
// 
// Параметры:
//  НомерДоверенности - Строка - Номер доверенности
//  ТокенДоступа - Строка - Токен доступа
// 
// Возвращаемое значение:
//  Структура - Частичные данные доверенности:
//   * СтатусДоверенности - Строка - Статус доверенности
//   * ХешДоверенности - Строка - Хеш доверенности
//   * НомерДоверенности - Строка - Номер доверенности
//   * ДатаВыдачи - Дата, Неопределено - Дата выдачи доверенности
//   * ДатаОкончания - Дата, Неопределено - Дата окончания доверенности
//   * ПубличныйКлюч - Строка - Публичный ключ
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД(НомерДоверенности, ТокенДоступа = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеЧастичныхДанныхДоверенностиНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусДоверенности", 	"");
	Результат.Вставить("ХешДоверенности", 		"");
	Результат.Вставить("НомерДоверенности", 	"");
	Результат.Вставить("ДатаВыдачи", 			Неопределено);
	Результат.Вставить("ДатаОкончания", 		Неопределено);
	Результат.Вставить("ПубличныйКлюч", 		"");
	Результат.Вставить("ТекстОтвета", 			"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию = НСтр("ru = 'Не получен статус доверенности с сервера МЧД'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = НСтр("ru = 'Не удалось получить статус доверенности с сервера МЧД: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния = НСтр("ru = 'Не удалось получить статус доверенности с сервера МЧД: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета = НСтр("ru = 'Ошибка при получении статуса доверенности с сервера МЧД. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/not-found",
		СтрШаблон(
			НСтр("ru = 'Не найдена доверенность номер ""%1""'"),
			НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poaopen?poaNumber=" + НомерДоверенности, "/poar-webapp/integration/poa/" + НомерДоверенности + "/public");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(,, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		Результат.ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаОтвета, "utf-8");
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.СтатусДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status"),
			СтруктураОтвета.status, "");
		Результат.ХешДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("id"),
			СтруктураОтвета.id, "");
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");
		Результат.ДатаВыдачи = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("startDate"),
			СтруктураОтвета.startDate, Неопределено);
		Результат.ДатаОкончания = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("endDate"),
			СтруктураОтвета.endDate, Неопределено);
		Результат.ПубличныйКлюч = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("issuerPublicKey"),
			СтруктураОтвета.issuerPublicKey, "");
	Исключение
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении статуса доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ОтветHTTP,, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ХешДоверенности) И НЕ ЗначениеЗаполнено(Результат.НомерДоверенности) Тогда
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ВывестиИЗаписатьОшибкуМЧД(ОтветHTTP, СтруктураОтвета, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Получает полные данные доверенности на сервере МЧД.
// 
// Параметры:
//  НомерДоверенности - Строка - Номер доверенности
//  ИННДоверителя - Строка - ИНН доверителя
//  ТокенДоступа - Строка - Токен доступа
// 
// Возвращаемое значение:
//  Структура - Полные данные доверенности:
//   * ДанныеВыгрузки - ДвоичныеДанные, Неопределено - Данные выгрузки
//   * ДанныеПодписи - ДвоичныеДанные, Неопределено - Данные подписи
//   * ДанныеАрхива - ДвоичныеДанные, Неопределено - Данные архива
//   * СтатусПолучения - Строка - Статус получения
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьПолныеДанныеДоверенностиНаСервереМЧД(НомерДоверенности, ИННДоверителя, ТокенДоступа = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеПолныхДанныхДоверенностиНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеВыгрузки", 	Неопределено);
	Результат.Вставить("ДанныеПодписи", 	Неопределено);
	Результат.Вставить("ДанныеАрхива", 		Неопределено);
	Результат.Вставить("СтатусПолучения", 	"");
	Результат.Вставить("ТекстОтвета", 		"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию = НСтр("ru = 'Не получен статус запроса данных доверенности с сервера МЧД'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = НСтр("ru = 'Не удалось получить данные доверенности с сервера МЧД: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния = НСтр("ru = 'Не удалось получить данные доверенности с сервера МЧД: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета = НСтр("ru = 'Ошибка при получении данных доверенности с сервера МЧД. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/not-found",
		СтрШаблон(
			НСтр("ru = 'Не найдена получаемая доверенность номер ""%1""'"),
			НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poazip?poaNumber=" + НомерДоверенности + ?(ИННДоверителя = Неопределено, "", "&issuerInn=" + ИННДоверителя),
		"/poar-webapp/integration/poa/" + НомерДоверенности
			+ ?(ИННДоверителя = Неопределено, "", "/" + ИННДоверителя) + "/zip");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(,, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Если нрег(ОтветHTTP.Заголовки["Content-Type"]) = "application/zip"
		ИЛИ нрег(ОтветHTTP.Заголовки["content-type"]) = "application/zip"
		ИЛИ нрег(ОтветHTTP.Заголовки["Content-Type"]) = "multipart"
		ИЛИ нрег(ОтветHTTP.Заголовки["content-type"]) = "multipart"
		ИЛИ нрег(Лев(ОтветHTTP.Заголовки["Content-Disposition"], 10)) = "attachment"
		ИЛИ нрег(Лев(ОтветHTTP.Заголовки["content-disposition"], 10)) = "attachment" Тогда
		
		КаталогРаспаковки = "";
		Попытка
			Результат.ДанныеАрхива = Новый ДвоичныеДанные(ИмяФайлаОтвета);
			
			ОбъектЧтение = Новый ЧтениеZipФайла(ИмяФайлаОтвета);
			Если ОбъектЧтение.Элементы.Количество() <> 0 Тогда
				КаталогРаспаковки = ПолучитьИмяВременногоФайла();
				КаталогРаспаковки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогРаспаковки);
				
				СоздатьКаталог(КаталогРаспаковки);
				Для каждого ЭлементАрхива Из ОбъектЧтение.Элементы Цикл
					РасширениеЭлемента = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ЭлементАрхива.Имя).Расширение;
					Если нрег(РасширениеЭлемента) = ".xml" ИЛИ нрег(РасширениеЭлемента) = ".sig"
						ИЛИ нрег(РасширениеЭлемента) = ".sign" Тогда
						
						ОбъектЧтение.Извлечь(ЭлементАрхива, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
						Если нрег(РасширениеЭлемента) = ".xml" Тогда
							Результат.ДанныеВыгрузки = Новый ДвоичныеДанные(КаталогРаспаковки + ЭлементАрхива.Имя);
						ИначеЕсли нрег(РасширениеЭлемента) = ".sig" ИЛИ нрег(РасширениеЭлемента) = ".sign" Тогда
							Результат.ДанныеПодписи = Новый ДвоичныеДанные(КаталогРаспаковки + ЭлементАрхива.Имя);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ОбъектЧтение.Закрыть();
		Исключение
			ФайловаяСистема.УдалитьВременныйФайл(КаталогРаспаковки);
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
			ВывестиИЗаписатьОшибкуМЧД(,, Новый Структура("ШаблонОшибкиИзИсключения",
				НСтр("ru = 'Не удалось распаковать ответ при получении данных доверенности с сервера МЧД: %1'")));
			ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
			Возврат Результат;
		КонецПопытки;
		ФайловаяСистема.УдалитьВременныйФайл(КаталогРаспаковки);
		
		Если Результат.ДанныеВыгрузки = Неопределено Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
			ВывестиИЗаписатьОшибкуМЧД(,, Новый Структура("ТекстОшибкиПоУмолчанию",
				НСтр("ru = 'Не получены данные доверенности с сервера МЧД'")));
			ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
			Возврат Результат;
		КонецЕсли;
		
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
		Возврат Результат;
		
	КонецЕсли;
	
	Попытка
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		Результат.ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаОтвета, "utf-8");
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.СтатусПолучения = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("reqStatus"),
			СтруктураОтвета.reqStatus, "");
	Исключение
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ОтветHTTP,, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.СтатусПолучения) Тогда
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ВывестиИЗаписатьОшибкуМЧД(ОтветHTTP, СтруктураОтвета, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Отменяет МЧД на сервере МЧД.
// 
// Параметры:
//  ИмяФайлаВыгрузки - Строка - Имя файла выгрузки
//  ДанныеВыгрузки - ДвоичныеДанные - Данные выгрузки
//  ДанныеПодписи - ДвоичныеДанные - Данные подписи
//  ТокенДоступа - Строка - Токен доступа
//  НомерДоверенности - Строка - Номер доверенности
//  СсылкаНаДоверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, Неопределено - Ссылка на доверенность
// 
// Возвращаемое значение:
//  Структура - Результат отмены:
//   * ИдентификаторТранзакции - Строка - Идентификатор транзакции
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ОтменитьМЧД(ИмяФайлаВыгрузки, ДанныеВыгрузки, ДанныеПодписи, ТокенДоступа = "", НомерДоверенности = "",
	СсылкаНаДоверенность = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаДоверенность) Тогда
		ОбъектДоверенность = СсылкаНаДоверенность.ПолучитьОбъект();
		ОбъектДоверенность.ИмяФайлаЗаявленияНаОтзыв = ИмяФайлаВыгрузки;
		ТекстВыгрузки = ПолучитьСтрокуИзДвоичныхДанных(ДанныеВыгрузки, "windows-1251");
		СконветированныеДанныеВыгрузки = ПолучитьДвоичныеДанныеИзСтроки(ТекстВыгрузки, "utf-8", Истина);
		ОбъектДоверенность.ФайлЗаявленияНаОтзыв = Новый ХранилищеЗначения(СконветированныеДанныеВыгрузки,
			Новый СжатиеДанных(9));
		ОбъектДоверенность.ЭлектроннаяПодписьЗаявленияНаОтзыв = Новый ХранилищеЗначения(ДанныеПодписи,
			Новый СжатиеДанных(9));
		ОбъектДоверенность.Записать();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ОтменаМЧДНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторТранзакции", "");
	Результат.Вставить("ТекстОтвета", "");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию = НСтр("ru = 'Не получен идентификатор отмены доверенности с сервера МЧД'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = НСтр("ru = 'Не удалось отменить доверенность на сервере МЧД: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния = НСтр("ru = 'Не удалось отменить доверенность на сервере МЧД: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета = НСтр("ru = 'Ошибка при отмене доверенности на сервере МЧД. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/not-found",
		СтрШаблон(
			НСтр("ru = 'Не найдена отзываемая доверенность номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/not-valid",
		СтрШаблон(
			НСтр("ru = 'Операция запрещена: данные в сертификате не совпадают с данными отзываемой доверенности номер ""%1""'"),
			НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poacancel", "/poar-webapp/integration/poa/revoke");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "multipart/form-data; boundary=My1cV8bNdr");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	// запись передаваемых файлов
	
	МассивИменФайлов = Новый Массив;
	
	СодержимоеФайла = "--My1cV8bNdr"
		+ Символы.ПС + "Content-Disposition: form-data; name=""poaRevoke""; filename=""" + ИмяФайлаВыгрузки + """"
		+ Символы.ПС + "Content-Type: text/xml"
		+ Символы.ПС
		+ Символы.ПС;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ОбъектЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ОбъектЗаписьТекста.Записать(СодержимоеФайла);
	ОбъектЗаписьТекста.Закрыть();
	МассивИменФайлов.Добавить(ИмяВременногоФайла);
	
	ИмяВременногоФайлаОтмены = ПолучитьИмяВременногоФайла();
	ДанныеВыгрузки.Записать(ИмяВременногоФайлаОтмены);
	МассивИменФайлов.Добавить(ИмяВременногоФайлаОтмены);
	
	СодержимоеФайла = Символы.ПС + "--My1cV8bNdr"
		+ Символы.ПС + "Content-Disposition: form-data; name=""signature""; filename=""" + ИмяФайлаВыгрузки + ".sig"""
		+ Символы.ПС + "Content-Type: application/octet-stream"
		+ Символы.ПС
		+ Символы.ПС;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ОбъектЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ОбъектЗаписьТекста.Записать(СодержимоеФайла);
	ОбъектЗаписьТекста.Закрыть();
	МассивИменФайлов.Добавить(ИмяВременногоФайла);
	
	ИмяВременногоФайлаПодписи = ПолучитьИмяВременногоФайла();
	Подпись64 = Base64Строка(ДанныеПодписи);
	Подпись64 = СтрЗаменить(Подпись64, Символы.ВК, "");
	Подпись64 = СтрЗаменить(Подпись64, Символы.ПС, "");
	ПолучитьДвоичныеДанныеИзСтроки(Подпись64, "windows-1251").Записать(ИмяВременногоФайлаПодписи);
	МассивИменФайлов.Добавить(ИмяВременногоФайлаПодписи);
	
	СодержимоеФайла = Символы.ПС + "--My1cV8bNdr--";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ОбъектЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ОбъектЗаписьТекста.Записать(СодержимоеФайла);
	ОбъектЗаписьТекста.Закрыть();
	МассивИменФайлов.Добавить(ИмяВременногоФайла);
	
	// объединение передаваемых файлов
	
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
	ОбъединитьФайлы(МассивИменФайлов, ИмяФайлаЗапроса);
	Для каждого ИмяВременногоФайла Из МассивИменФайлов Цикл
		ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	КонецЦикла;
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	ЗапросHTTP.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОписаниеСоединения =
			ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		ВывестиИЗаписатьОшибкуМЧД(,, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		Результат.ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаОтвета, "utf-8");
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
	Исключение
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при отмене доверенности на сервере МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ОтветHTTP,, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ВывестиИЗаписатьОшибкуМЧД(ОтветHTTP, СтруктураОтвета, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Запускает длительную операцию по загрузке сведений МЧД.
// 
// Параметры:
//  СтруктураПараметров - Структура - Параметры:
//   * ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы
//   * ДанныеМЧД - Массив из Структура:
//    ** НомерДоверенности - Строка - Номер доверенности
//    ** ИННДоверителя - Строка - ИНН Доверителя
// 
// Возвращаемое значение:
//  Структура - См. ДлительныеОперации.ВыполнитьФункцию
//
Функция НачатьЗагрузкуСведенийМЧД(СтруктураПараметров) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(СтруктураПараметров.ИдентификаторФормы);
	ДанныеМЧД = СтруктураПараметров.ДанныеМЧД;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"МашиночитаемыеДоверенности.ПолучитьСведенияДоверенностейНаСервереМЧД",
		ДанныеМЧД);
	
КонецФункции

// Возвращает URL информационной системы.
// 
// Возвращаемое значение:
//  Строка - url
// 
Функция СведенияОбИнформационнойСистеме() Экспорт
	Возврат "https://m4d.nalog.ru";
КонецФункции

// Определяет наличие у пользователя прав на изменение машиночитаемых доверенностей организаций.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть право на изменение, иначе Ложь.
//
Функция ЕстьПравоИзменения() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций);
	
КонецФункции

// Возвращает таблицу значений с данными результатов проверки МЧД оператором ЭДО. 
//
// Параметры:
//  ПодписанныеОбъекты - Массив из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//
// Возвращаемое значение:
// 	ТаблицаЗначений:
// 	 * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 	 * Отпечаток - Строка
// 	 * ДоверенностьВерна - Булево
//
Функция РезультатыПроверокМЧДОператоромЭДО(ПодписанныеОбъекты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезультатыПроверкиМЧД.ПодписанныйОбъект КАК ПодписанныйОбъект,
	|	РезультатыПроверкиМЧД.Отпечаток КАК Отпечаток,
	|	РезультатыПроверкиМЧД.ДоверенностьВерна КАК ДоверенностьВерна
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиМЧДОператором КАК РезультатыПроверкиМЧД
	|ГДЕ
	|	РезультатыПроверкиМЧД.ПодписанныйОбъект В (&ПодписанныеОбъекты)";
	
	Запрос.УстановитьПараметр("ПодписанныеОбъекты", ПодписанныеОбъекты);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Описывает пустую структуру сведений МЧД
// 
// Возвращаемое значение:
//  Структура - результат получения данных:
//  * Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  * ИННДоверителя - строка
//  * ИННПредставителя - строка
//  * Статус - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенности
//  * ДатаВыдачи - Дата
//  * ДатаОкончания - Дата
//  * ДатаПолученияСведений - Дата
//  
Функция НовыеСведенияМЧД() Экспорт
	
	Сведения = Новый Структура;
	Сведения.Вставить("Ссылка", Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПустаяСсылка());
	Сведения.Вставить("ИННДоверителя", "");
	Сведения.Вставить("ИННПредставителя", "");
	Сведения.Вставить("Статус", Перечисления.СтатусыМашиночитаемойДоверенности.ПустаяСсылка());
	Сведения.Вставить("ДатаВыдачи", Дата(1, 1, 1));
	Сведения.Вставить("ДатаОкончания", Дата(1, 1, 1));
	Сведения.Вставить("ДатаПолученияСведений",  Дата(1, 1, 1));
	
	Возврат Сведения;
	
КонецФункции

// Описывает пустую структуру статуса МЧД
// 
// Возвращаемое значение:
//  Структура - результат получения данных:
//  * Ошибка - Булево
//  * ОписаниеОшибки - Строка - причина по которой не удалось получить данные доверенности, заполняется при Ошибка = Истина
//  * Сведения - Неопределено, Структура см. НовыеСведенияМЧД
//  
Функция НовыеДанныеСтатусаМЧД() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Сведения", Неопределено);
	Возврат Результат;
	
КонецФункции

// Возвращает сведения о статусах доверенностей контрагентов.
// 
// Параметры:
//  ДанныеМЧД - Массив из Структура см. НовыеДанныеДоверенности
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - Номер доверенности
//  * Значение - Структура см. НовыеДанныеСтатусаМЧД
//  
Функция СведенияОСтатусахДоверенностейКонтрагентов(ДанныеМЧД) Экспорт
	
	СправочникМЧД = Справочники.МашиночитаемыеДоверенностиКонтрагентов;
	Возврат СведенияОСтатусахДоверенностей(СправочникМЧД, ДанныеМЧД);
	
КонецФункции

// Возвращает сведения о статусах доверенностей организаций.
// 
// Параметры:
//  ДанныеМЧД - Массив из Структура См. НовыеДанныеДоверенности
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - Номер доверенности
//  * Значение - Структура см. НовыеДанныеСтатусаМЧД
//  
Функция СведенияОСтатусахДоверенностейОрганизаций(ДанныеМЧД) Экспорт
	
	СправочникМЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций;
	Возврат СведенияОСтатусахДоверенностей(СправочникМЧД, ДанныеМЧД);
	
КонецФункции

// Возвращает признак доверенность действительна.
// 
// Параметры:
//  Статус - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенности
// 
// Возвращаемое значение:
//  Булево
Функция ДоверенностьДействительна(Статус) Экспорт
	Возврат Статус = Перечисления.СтатусыМашиночитаемойДоверенности.Зарегистрировано;
КонецФункции

// Возвращает общие свойства доверенностей.
// 
// Параметры:
//  Доверенности - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  * Значение - См. НовыеОбщиеСвойстваДоверенности
Функция ОбщиеСвойстваДоверенностей(Доверенности) Экспорт
	
	СвойстваДоверенностей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиОрганизаций.Ссылка КАК Ссылка,
		|	МашиночитаемыеДоверенностиОрганизаций.НомерДоверенности КАК НомерДоверенности,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаВыдачи КАК ДатаВыдачи,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаОкончания КАК ДатаОкончания,
		|	МашиночитаемыеДоверенностиОрганизаций.ДоверительЮЛ_НаимОрг КАК Доверитель,
		|	МашиночитаемыеДоверенностиОрганизаций.ДоверительЮЛ_ИНН КАК ИННДоверителя,
		|	МашиночитаемыеДоверенностиОрганизаций.Представитель КАК Представитель,
		|	МашиночитаемыеДоверенностиОрганизаций.ПредставительФЛ_ИНН КАК ИННПредставителя
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
		|ГДЕ
		|	МашиночитаемыеДоверенностиОрганизаций.Ссылка В (&Доверенности)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиКонтрагентов.Ссылка КАК Ссылка,
		|	МашиночитаемыеДоверенностиКонтрагентов.НомерДоверенности КАК НомерДоверенности,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаВыдачи КАК ДатаВыдачи,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаОкончания КАК ДатаОкончания,
		|	МашиночитаемыеДоверенностиКонтрагентов.Доверитель КАК Доверитель,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДоверительИНН КАК ИННДоверителя,
		|	МашиночитаемыеДоверенностиКонтрагентов.Представитель КАК Представитель,
		|	МашиночитаемыеДоверенностиКонтрагентов.ПредставительИНН КАК ИННПредставителя
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиКонтрагентов КАК МашиночитаемыеДоверенностиКонтрагентов
		|ГДЕ
		|	МашиночитаемыеДоверенностиКонтрагентов.Ссылка В (&Доверенности)";
	Запрос.УстановитьПараметр("Доверенности", Доверенности);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Свойства = НовыеОбщиеСвойстваДоверенности();
		ЗаполнитьЗначенияСвойств(Свойства, Выборка);
		СвойстваДоверенностей.Вставить(Выборка.Ссылка, Свойства);
	КонецЦикла;
	
	Возврат СвойстваДоверенностей;
	
КонецФункции

// Возвращает общие свойства доверенности.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
// 
// Возвращаемое значение:
//  Неопределено, См. НовыеОбщиеСвойстваДоверенности
Функция ОбщиеСвойстваДоверенности(Доверенность) Экспорт
	Доверенности = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Доверенность);
	ОбщиеСвойстваДоверенностей = ОбщиеСвойстваДоверенностей(Доверенности);
	Возврат ОбщиеСвойстваДоверенностей[Доверенность];
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает представление объекта.
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура, СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций
//  ЭтоНовый - Булево
// 
// Возвращаемое значение:
//  Строка - Представление объекта
Функция ПредставлениеОбъекта(Объект, ЭтоНовый = Ложь) Экспорт
	
	Представление = НСтр("ru = 'Машиночитаемая доверенность'");
	
	Если ЭтоНовый Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 (создание)'"), Представление);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Представитель) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 на %2'"), Представление, Объект.Представитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаВыдачи) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 от %2'"), Представление, Формат(Объект.ДатаВыдачи, "ДЛФ=D;"));
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Возвращает сведения о статусах доверенностей.
// 
// Параметры:
//  СправочникМЧД - СправочникМенеджер.МашиночитаемыеДоверенностиКонтрагентов,
//  				СправочникМенеджер.МашиночитаемыеДоверенностиОрганизаций 
//  ДанныеМЧД - Массив из Структура см. НовыеДанныеДоверенности
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - Номер доверенности
//  * Значение - Структура см. НовыеДанныеСтатусаМЧД
//  
Функция СведенияОСтатусахДоверенностей(СправочникМЧД, ДанныеМЧД)
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Соответствие;
	
	Для Каждого ДанныеДоверенности Из ДанныеМЧД Цикл
		
		НомерДоверенности = ДанныеДоверенности.НомерДоверенности;
		СтатусМЧД = НовыеДанныеСтатусаМЧД();
		Сведения = ПолучитьСведенияДоверенностиНаСервереМЧД(ДанныеДоверенности);
		
		Если Сведения = Неопределено ИЛИ ПустаяСтрока(Сведения.ЧастичныеДанные.СтатусДоверенности) Тогда
			
			СтатусМЧД.Ошибка = Истина;
			СтатусМЧД.ОписаниеОшибки = НСтр("ru = 'Ошибка загрузки из реестра'");
			Результат.Вставить(НомерДоверенности, СтатусМЧД);
			Продолжить;
			
		КонецЕсли;

		РезультатСозданияМЧД = СправочникМЧД.НайтиСоздатьМЧД(ДанныеДоверенности);
		
		Если РезультатСозданияМЧД.Ошибка Тогда
			
			СтатусМЧД.Ошибка = Истина;
			СтатусМЧД.ОписаниеОшибки = РезультатСозданияМЧД.ОписаниеОшибки;
			Результат.Вставить(НомерДоверенности, СтатусМЧД);
			Продолжить;
			
		КонецЕсли;
			
		МЧД = РезультатСозданияМЧД.Ссылка;
		РезультатЗаполнения = СправочникМЧД.ЗаполнитьМЧД(МЧД, Сведения);
		
		Если РезультатЗаполнения.Ошибка Тогда
			
			СтатусМЧД.Ошибка = Истина;
			СтатусМЧД.ОписаниеОшибки = РезультатЗаполнения.ОписаниеОшибки;
			Результат.Вставить(НомерДоверенности, СтатусМЧД);
			Продолжить;
				
		КонецЕсли;
		
		СтатусМЧД.Сведения = РезультатЗаполнения.СведенияМЧД;
		Результат.Вставить(НомерДоверенности, СтатусМЧД);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Авторизуется на сервере МЧД.
// 
// Возвращаемое значение:
//  Структура - Результат авторизации:
//   * ТокенДоступа - Строка - Токен доступа
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция АвторизоватьсяНаСервереМЧД()
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.АвторизацияНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("ТокенДоступа", "");
	Результат.Вставить("ТекстОтвета", "");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию = НСтр("ru = 'Не получен токен доступа при авторизации на сервере МЧД'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = НСтр("ru = 'Не удалось получить данные при авторизации на сервере МЧД: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния = НСтр("ru = 'Не удалось получить данные при авторизации на сервере МЧД: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета = НСтр("ru = 'Ошибка при получении токена доступа при авторизации на сервере МЧД. %1'");
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/token", "/vst-oauth2/oauth/token");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", "test");
	КонецЕсли;
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
		СтруктураЗапроса = Новый Структура;
		СтруктураЗапроса.Вставить("username", СвойстваСервераМЧД.Логин);
		СтруктураЗапроса.Вставить("password", СвойстваСервераМЧД.Пароль);
		СтруктураЗапроса.Вставить("grant_type", "password");
		
		ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
		ЗапросJSON = Новый ЗаписьJSON;
		ЗапросJSON.ОткрытьФайл(ИмяФайлаЗапроса, "utf-8");
		ЗаписатьJSON(ЗапросJSON, СтруктураЗапроса);
		ЗапросJSON.Закрыть();
		
		ЗапросHTTP.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
	КонецЕсли;
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		ОписаниеСоединения = ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервера, 30);
		СоединениеHTTP = ОписаниеСоединения.HTTPСоединение;
		
		Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
		Иначе
			ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP, ИмяФайлаОтвета);
		КонецЕсли;
	Исключение
		Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		ВывестиИЗаписатьОшибкуМЧД(,, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ФайлОтвета = Новый ЧтениеТекста(ИмяФайлаОтвета, "utf-8");
		Результат.ТекстОтвета = ФайлОтвета.Прочитать();
		ФайлОтвета.Закрыть();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаОтвета, "utf-8");
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Результат.ТокенДоступа = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И
			СтруктураОтвета.Свойство("access_token"), СтруктураОтвета.access_token, "");
	Исключение
		Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ОтветHTTP, , ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ТокенДоступа) Тогда
		Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
		ВывестиИЗаписатьОшибкуМЧД(ОтветHTTP, СтруктураОтвета, ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
	КонецЕсли;
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваСервераМЧД()
	
	Результат = МашиночитаемыеДоверенностиПовтИсп.СвойстваСервераМЧД();
	
	НачалоПараметровАутентификации = СтрНайти(Результат.АдресСервераБезАутентификации, "://");
	КонецПараметровАутентификации = СтрНайти(Результат.АдресСервераБезАутентификации, "@");
	Если НачалоПараметровАутентификации <> 0 И КонецПараметровАутентификации <> 0 Тогда
		Результат.АдресСервераБезАутентификации =
			Лев(Результат.АдресСервераБезАутентификации, НачалоПараметровАутентификации + 2)
			+ Сред(Результат.АдресСервераБезАутентификации, КонецПараметровАутентификации + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеОшибкиHTTP(КодСостояния)
	
	Если КодСостояния < 300 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 300 Тогда
		Возврат НСтр("ru = 'Множественный выбор при отправке ответа сервера'");
	ИначеЕсли КодСостояния = 301 Тогда
		Возврат НСтр("ru = 'Ресурс перемещен'");
	ИначеЕсли КодСостояния = 302 Тогда
		Возврат НСтр("ru = 'Ресурс временно перемещен'");
	ИначеЕсли КодСостояния = 303 Тогда
		Возврат НСтр("ru = 'Ресурс перемещен на другой адрес'");
	ИначеЕсли КодСостояния = 304 Тогда
		Возврат НСтр("ru = 'Неожиданный ответ об отсутствии изменений страницы'");
	ИначеЕсли КодСостояния = 305 Тогда
		Возврат НСтр("ru = 'Для доступа к ресурсу требуется прокси'");
	ИначеЕсли КодСостояния = 306 Тогда
		Возврат НСтр("ru = 'Неиспользуемый код перенаправления запроса'");
	ИначеЕсли КодСостояния = 307 Тогда
		Возврат НСтр("ru = 'Временное перенаправление'");
	ИначеЕсли КодСостояния < 400 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка по перенаправлению запроса с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 400 Тогда
		Возврат НСтр("ru = 'Неверный формат запроса'");
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат НСтр("ru = 'Требуется аутентификация'");
	ИначеЕсли КодСостояния = 402 Тогда
		Возврат НСтр("ru = 'Требуется оплата'");
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат НСтр("ru = 'Доступ к ресурсу запрещен'");
	ИначеЕсли КодСостояния = 404 Тогда
		Возврат НСтр("ru = 'Запрошенная страница не найдена'");
	ИначеЕсли КодСостояния = 405 Тогда
		Возврат НСтр("ru = 'Используемый метод запрещен'");
	ИначеЕсли КодСостояния = 406 Тогда
		Возврат НСтр("ru = 'Отсутствуют подходящие ответы'");
	ИначеЕсли КодСостояния = 407 Тогда
		Возврат НСтр("ru = 'Требуется аутентификация прокси'");
	ИначеЕсли КодСостояния = 408 Тогда
		Возврат НСтр("ru = 'Лимит времени сервера при ожидании запроса исчерпан'");
	ИначеЕсли КодСостояния = 409 Тогда
		Возврат НСтр("ru = 'Конфликт с текущим состоянием ресурса, требуется больше информации'");
	ИначеЕсли КодСостояния = 410 Тогда
		Возврат НСтр("ru = 'Ресурс более недоступен'");
	ИначеЕсли КодСостояния = 411 Тогда
		Возврат НСтр("ru = 'Требуется задание длины соержимого'");
	ИначеЕсли КодСостояния = 412 Тогда
		Возврат НСтр("ru = 'Ошибочные условия заголовочных полей'");
	ИначеЕсли КодСостояния = 413 Тогда
		Возврат НСтр("ru = 'Слишком большая длина запроса'");
	ИначеЕсли КодСостояния = 414 Тогда
		Возврат НСтр("ru = 'Запрошенный идентификатор слишком велик'");
	ИначеЕсли КодСостояния = 415 Тогда
		Возврат НСтр("ru = 'Неподдерживаемый тип данных запроса'");
	ИначеЕсли КодСостояния = 416 Тогда
		Возврат НСтр("ru = 'Запрошенный промежуток невыполним'");
	ИначеЕсли КодСостояния = 417 Тогда
		Возврат НСтр("ru = 'Несоответстие ожиданиям'");
	ИначеЕсли КодСостояния = 422 Тогда
		Возврат НСтр("ru = 'Необрабатываемый объект'");
	ИначеЕсли КодСостояния = 423 Тогда
		Возврат НСтр("ru = 'Заблокировано'");
	ИначеЕсли КодСостояния = 424 Тогда
		Возврат НСтр("ru = 'Сбой взаимосвязанного вызова'");
	ИначеЕсли КодСостояния = 449 Тогда
		Возврат НСтр("ru = 'Возврат запроса после необходимого действия'");
	ИначеЕсли КодСостояния < 500 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка клиента с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 500 Тогда
		Возврат НСтр("ru = 'Внутренняя ошибка сервера'");
	ИначеЕсли КодСостояния = 501 Тогда
		Возврат НСтр("ru = 'Процесс для данного запроса не поддерживается сервером'");
	ИначеЕсли КодСостояния = 502 Тогда
		Возврат НСтр("ru = 'Gateway-сервер получил ошибочный ответ'");
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат НСтр("ru = 'Сервер временно недоступен'");
	ИначеЕсли КодСостояния = 504 Тогда
		Возврат НСтр("ru = 'Превышено время ожидание ответа на запрос Gateway-сервера'");
	ИначеЕсли КодСостояния = 505 Тогда
		Возврат НСтр("ru = 'Версия HTTP не поддерживается сервером'");
	ИначеЕсли КодСостояния = 506 Тогда
		Возврат НСтр("ru = 'Вариантный тип содержит также вариант'");
	ИначеЕсли КодСостояния = 507 Тогда
		Возврат НСтр("ru = 'Переполнение хранилища'");
	ИначеЕсли КодСостояния = 510 Тогда
		Возврат НСтр("ru = 'Отсутствует поддержка расширений'");
	ИначеЕсли КодСостояния < 600 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка сервера с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 999 Тогда
		Возврат НСтр("ru = 'Разрушительный сбой сервера'");
	Иначе
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	КонецЕсли;

КонецФункции

Функция СтруктураШаблоновОшибокМЧД()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТекстОшибкиПоУмолчанию", 		"");
	Результат.Вставить("ШаблонОшибкиИзИсключения", 		"");
	Результат.Вставить("ШаблонОшибкиДляКодаСостояния", 	"");
	Результат.Вставить("ШаблонОшибкиИзОтвета", 			"");
	Результат.Вставить("ШаблоныДляКодовОшибок", 		Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция ВывестиИЗаписатьОшибкуМЧД(
		ОтветHTTP = Неопределено,
		СтруктураОтвета = Неопределено,
		ШаблоныОшибок = Неопределено,
		РежимВыводаИЗаписи = "")
	
	ШаблоныОшибокВызова = СтруктураШаблоновОшибокМЧД();
	Если ШаблоныОшибок <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ШаблоныОшибокВызова, ШаблоныОшибок);
	КонецЕсли;
	
	КодОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("type"),
		СтруктураОтвета.type, "");
	ЗаголовокОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("title"),
		СтруктураОтвета.title, "");
	ТекстОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("detail"),
		СтруктураОтвета.detail, "");
	
	Если ЗначениеЗаполнено(КодОшибки) И ШаблоныОшибокВызова.ШаблоныДляКодовОшибок <> Неопределено
		И ЗначениеЗаполнено(ШаблоныОшибокВызова.ШаблоныДляКодовОшибок[КодОшибки]) Тогда
		
		ТекстОшибки = ШаблоныОшибокВызова.ШаблоныДляКодовОшибок[КодОшибки];
		
	ИначеЕсли ЗначениеЗаполнено(ЗаголовокОшибки) ИЛИ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтрШаблон(
			ШаблоныОшибокВызова.ШаблонОшибкиИзОтвета,
			ЗаголовокОшибки + ?(ЗначениеЗаполнено(ЗаголовокОшибки) И ЗначениеЗаполнено(ТекстОшибки), ": ", "") + ТекстОшибки);
		
	Иначе
		ТекстОшибки = ?(ОтветHTTP = Неопределено, "", ОписаниеОшибкиHTTP(ОтветHTTP.КодСостояния));
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = СтрШаблон(
				ШаблоныОшибокВызова.ШаблонОшибкиДляКодаСостояния,
				ТекстОшибки);
			
		ИначеЕсли ЗначениеЗаполнено(ШаблоныОшибокВызова.ШаблонОшибкиИзИсключения) Тогда
			ТекстОшибки = СтрШаблон(
				ШаблоныОшибокВызова.ШаблонОшибкиИзИсключения,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Иначе
			ТекстОшибки = ШаблоныОшибокВызова.ТекстОшибкиПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимВыводаИЗаписи <> "ТолькоЗаписатьВЖурналРегистрации" Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Если РежимВыводаИЗаписи <> "ТолькоВывестиОшибку" Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооборот с контрагентами. МЧД'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ИспользуетсяРежимТестирования()
	Возврат МашиночитаемыеДоверенностиПовтИсп.ИспользуетсяРежимТестирования();
КонецФункции

// Находит физлицо с заданной субъектностью.
// 
// Параметры:
//  ПолныеДанныеМЧД - Структура
//  СубъектДоверенности - ПеречислениеСсылка.СубъектыДоверенности
// 
// Возвращаемое значение: Строка
//  
Функция НайтиФизлицоМЧД(ПолныеДанныеМЧД, СубъектДоверенности) Экспорт
	
	Для Каждого ДанныеФизлица Из ПолныеДанныеМЧД.ФИО Цикл
		
		Если ДанныеФизлица.Владелец = СубъектДоверенности Тогда
	
			Если ЗначениеЗаполнено(ДанныеФизлица.Фамилия) Тогда
				ПредставлениеФизлица = ДанныеФизлица.Фамилия;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеФизлица.Имя) Тогда
				ПредставлениеФизлица = ПредставлениеФизлица + " " + ДанныеФизлица.Имя;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеФизлица.Отчество) Тогда
				ПредставлениеФизлица = ПредставлениеФизлица + " " + ДанныеФизлица.Отчество;
			КонецЕсли;
			
			Возврат ПредставлениеФизлица;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция СтатусыДействующейДоверенности()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенности.Зарегистрировано);
	
	Возврат Статусы;
	
КонецФункции

Функция ДоверенностьДействительнаПоСроку(ДатаВыдачи, ДатаОкончания)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Возврат ТекущаяДата > ДатаВыдачи И ТекущаяДата < ДатаОкончания;
	
КонецФункции

Функция ЗаполнитьТабличныйДокументМЧД(Ссылка, Отказ) Экспорт
		
	ДвоичныеДанные = Неопределено;

	Если ТипЗнч(Ссылка.XMLизРеестра) <> Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные = Ссылка.XMLизРеестра.Получить();
	Иначе
		ДвоичныеДанные = Ссылка.XMLизРеестра;
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		
		ДоверительИНН = "";
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций") Тогда
			ДоверительИНН = ?(ЗначениеЗаполнено(Ссылка.ДоверительЮЛ_ИНН), 
				Ссылка.ДоверительЮЛ_ИНН, Ссылка.ДоверительФЛ_ИНН);		
		Иначе
			ДоверительИНН = Ссылка.ДоверительИНН;		
		КонецЕсли;
		
		СведенияДоверенности = МашиночитаемыеДоверенностиВызовСервера.ПолучитьПолныеДанныеДоверенностиНаСервереМЧД(
			Ссылка.НомерДоверенности, ДоверительИНН);

		Если СведенияДоверенности.СтатусПолучения = "PENDING" Тогда
			ТекстСообщения = НСтр(
				"ru = 'Запрос данных доверенности отправлен успешно, повторите попытку загрузки через несколько минут'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СведенияДоверенности.ДанныеВыгрузки) Тогда
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;

		ДвоичныеДанные = СведенияДоверенности.ДанныеВыгрузки;

		Если ДвоичныеДанные = Неопределено Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru='Просмотр карточки МЧД невозможен. Отсутствует прикрепленный xml файл доверенности. Доверенность
								  |должна быть подписана и отправлена или загружена из реестра.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;	
			
	КонецЕсли;
	
	СтруктураДанных = Справочники.МашиночитаемыеДоверенностиОрганизаций.ДанныеИзФайлаОбмена(ДвоичныеДанные);
	
	Макет = ПолучитьОбщийМакет("КарточкаМЧД");
	
	Для каждого Строка Из СтруктураДанных.ФИО Цикл
		Если Строка.Владелец = Перечисления.СубъектыДоверенности.ПредставительФЛ Тогда
			ПредставительФЛ_ФИО = ПолучитьПредставлениеФИО(Строка);
		Иначе
			ДоверительФЛ_ФИО = ПолучитьПредставлениеФИО(Строка);
		КонецЕсли;
	КонецЦикла;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;

	ОбластьШапка 							= Макет.ПолучитьОбласть("ОбластьШапка");
	ОбластьЗаголовокСведенияДоверителя 		= Макет.ПолучитьОбласть("ОбластьЗаголовокСведенияДоверителя");
	ОбластьСведенияОбОрганизацииДоверителя 	= Макет.ПолучитьОбласть("ОбластьСведенияОбОрганизацииДоверителя");
	ОбластьЗаголовокДовСвОрг 				= Макет.ПолучитьОбласть("ОбластьЗаголовокДовСвОрг");
	ОбластьДоверительИП						= Макет.ПолучитьОбласть("ОбластьДоверительИП");
	ОбластьСведенияОПодписанте 				= Макет.ПолучитьОбласть("ОбластьСведенияОПодписанте");
	ОбластьЗаголовокСведенияОПредставителе 	= Макет.ПолучитьОбласть("ОбластьЗаголовокСведенияОПредставителе");
	ОбластьСведенияОДоверенномЛице 			= Макет.ПолучитьОбласть("ОбластьСведенияОДоверенномЛице");
	ОбластьПереченьПолномочий 				= Макет.ПолучитьОбласть("ОбластьПереченьПолномочий");
	ОбластьПредставительОрганизация 		= Макет.ПолучитьОбласть("ОбластьПредставительОрганизация");
	
	ОбластьШапка.Параметры.Заполнить(СтруктураДанных);
	
	Статус = НСтр("ru='Ошибка получения статуса.'");
	Попытка
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
		СведенияСтатусаДоверенности = МашиночитаемыеДоверенностиВызовСервера.ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД(
			Ссылка.НомерДоверенности, ТокенДоступа);
		Статус = Строка(МашиночитаемыеДоверенностиКлиентСервер.СтатусМЧД(
			СведенияСтатусаДоверенности.СтатусДоверенности));
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Ошибка получения статуса доверенности.'"));
	КонецПопытки;
	ОбластьШапка.Параметры.Статус = Статус;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовокСведенияДоверителя);
	ТабличныйДокумент.Вывести(ОбластьЗаголовокДовСвОрг);
	
	Если СтруктураДанных.Свойство("ДоверительЮЛ_НаимОрг") Тогда

		ОбластьСведенияОбОрганизацииДоверителя.Параметры.Заполнить(СтруктураДанных);
		
		СведенияЮрЛица = Новый Структура;
		СведенияЮрЛица.Вставить("ИНН", СтруктураДанных.ДоверительЮЛ_ИНН);
		СведенияЮрЛица.Вставить("КПП", СтруктураДанных.ДоверительЮЛ_КПП);
		СведенияЮрЛица.Вставить("ОГРН", СтруктураДанных.ДоверительЮЛ_ОГРН);
		ДоверительЮрЛицо = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьОрганизациюМЧД(
			СведенияЮрЛица);
		ОбластьСведенияОбОрганизацииДоверителя.Параметры.ДоверительЮрЛицо = ДоверительЮрЛицо;

		ТабличныйДокумент.Вывести(ОбластьСведенияОбОрганизацииДоверителя);

		ОбластьСведенияОПодписанте.Параметры.ДоверительФЛ_ФИО = ДоверительФЛ_ФИО;
		ОбластьСведенияОПодписанте.Параметры.ДоверительФЛ_ИНН = СтруктураДанных.ЛицоБезДовФЛ_ИНН;
		ОбластьСведенияОПодписанте.Параметры.ДоверительФЛ_СНИЛС = СтруктураДанных.ЛицоБезДовФЛ_СНИЛС;
		ОбластьСведенияОПодписанте.Параметры.ЛицоБезДовФЛ_Должность = СтруктураДанных.ЛицоБезДовФЛ_Должность;
		ДоверительФизЛицоИНН = СтруктураДанных.ЛицоБезДовФЛ_ИНН;

	Иначе
		
		ОбластьДоверительИП.Параметры.Заполнить(СтруктураДанных);
		ОбластьДоверительИП.Параметры.ДоверительФЛ_ФИО = ДоверительФЛ_ФИО;
		ТабличныйДокумент.Вывести(ОбластьДоверительИП);
		
		ОбластьСведенияОПодписанте.Параметры.ДоверительФЛ_ФИО = ДоверительФЛ_ФИО;
		ОбластьСведенияОПодписанте.Параметры.ДоверительФЛ_ИНН = СтруктураДанных.ДоверительФЛ_ИНН;
		ОбластьСведенияОПодписанте.Параметры.ДоверительФЛ_СНИЛС = СтруктураДанных.ДоверительФЛ_СНИЛС;
		ДоверительФизЛицоИНН = СтруктураДанных.ДоверительФЛ_ИНН;
			
	КонецЕсли;
	
	СведенияФизЛица = Новый Структура;
	СведенияФизЛица.Вставить("ИНН", ДоверительФизЛицоИНН);
	ДоверительФизЛицо = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьФизЛицоМЧД(СведенияФизЛица);
	ОбластьСведенияОПодписанте.Параметры.ДоверительФизЛицо = ДоверительФизЛицо;
	
	ТабличныйДокумент.Вывести(ОбластьСведенияОПодписанте);
					
	ТабличныйДокумент.Вывести(ОбластьЗаголовокСведенияОПредставителе);
	
	Если СтруктураДанных.Свойство("ПредставительЮЛ_НаимОрг") Тогда
		ОбластьПредставительОрганизация.Параметры.Заполнить(СтруктураДанных);
		ТабличныйДокумент.Вывести(ОбластьПредставительОрганизация);	
	КонецЕсли;
	
	Для каждого Строка Из СтруктураДанных.УдостоверенияЛичности Цикл		
		Если Строка.Владелец = Перечисления.СубъектыДоверенности.ПредставительФЛ Тогда
			ПредставительФЛ_Удостоверение = ПолучитьПредставлениеУдостоверение(Строка);
		КонецЕсли;		
	КонецЦикла;
	
	ОбластьСведенияОДоверенномЛице.Параметры.Заполнить(СтруктураДанных);
	ОбластьСведенияОДоверенномЛице.Параметры.ПредставительФЛ_ФИО = ПредставительФЛ_ФИО;
	ОбластьСведенияОДоверенномЛице.Параметры.ПредФЛ_Документ = ПредставительФЛ_Удостоверение;
	
	СведенияФизЛица = Новый Структура;
	СведенияФизЛица.Вставить("ИНН", СтруктураДанных.ПредставительФЛ_ИНН);
	ПредставительФизЛицоСсылка = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьФизЛицоМЧД(
		СведенияФизЛица);
	ОбластьСведенияОДоверенномЛице.Параметры.ПредставительФизЛицо = ПредставительФизЛицоСсылка;
	
	ТабличныйДокумент.Вывести(ОбластьСведенияОДоверенномЛице);
	
	Если СтруктураДанных.Свойство("ТекстПолномочий") И СтруктураДанных.ТекстПолномочий <> "" Тогда
		ПереченьПолномочийПредставление = СтруктураДанных.ТекстПолномочий;
	Иначе
		Если СтруктураДанных.КодПолномочий = "99" Тогда 
			ПереченьПолномочийПредставление = "Все";
		ИначеЕсли  СтруктураДанных.КодПолномочий = "00" Тогда
		  	ПереченьПолномочийПредставление = "";
		Иначе
			МассивПолномочий = СтрРазделить(СтруктураДанных.КодПолномочий, Символы.ПС, Ложь);
			ПолномочияСтрокой = "";
			Для Каждого Строка из МассивПолномочий Цикл
				Если МассивПолномочий.Найти(Строка) + 1 =  МассивПолномочий.Количество() Тогда
					ПолномочияСтрокой = ПолномочияСтрокой + Прав(Строка, 2) + ".";		
				Иначе
					ПолномочияСтрокой = ПолномочияСтрокой + Прав(Строка, 2) + ", ";
				КонецЕсли;
			КонецЦикла;
			ПереченьПолномочийПредставление = ПолномочияСтрокой;	
		КонецЕсли;		
	КонецЕсли;
	ОбластьПереченьПолномочий.Параметры.ПереченьПолномочий = ПереченьПолномочийПредставление;
	ТабличныйДокумент.Вывести(ОбластьПереченьПолномочий);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПредставлениеФИО(СтрокаФИО)

	Представление = "";

	Если ЗначениеЗаполнено(СтрокаФИО.Фамилия) Тогда
		Представление = СтрокаФИО.Фамилия;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаФИО.Имя) Тогда
		Представление = Представление + " " + СтрокаФИО.Имя;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаФИО.Отчество) Тогда
		Представление = Представление + " " + СтрокаФИО.Отчество;
	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПолучитьПредставлениеУдостоверение(СтрокаУдостоверения)

	Представление = "";

	Если ЗначениеЗаполнено(СтрокаУдостоверения.ВидДок) Тогда
		ВидыДокументов = МашиночитаемыеДоверенностиКлиентСервер.ВидыДокументовФизическихЛиц();
		Представление = ВидыДокументов.Получить(СтрокаУдостоверения.ВидДок);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУдостоверения.СерДок) Тогда
		Представление = Представление + " " + СтрокаУдостоверения.СерДок;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУдостоверения.НомДок) Тогда
		Представление = Представление + " " + СтрокаУдостоверения.НомДок;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУдостоверения.ДатаДок) Тогда
		Представление = Представление + " " + НСтр("ru = 'выдан'") + " " + Формат(СтрокаУдостоверения.ДатаДок, "ДЛФ=ДД");
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУдостоверения.ВыдДок) Тогда
		Представление = Представление + " " + СтрокаУдостоверения.ВыдДок;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУдостоверения.КодВыдДок) Тогда
		Представление = Представление + ", " + НСтр("ru = 'код подразделения'") + ":" + СтрокаУдостоверения.КодВыдДок;
	КонецЕсли;

	Возврат Представление;

КонецФункции

// Возвращает новые общие свойства доверенности.
// 
// Возвращаемое значение:
//  Структура:
//  * НомерДоверенности – Строка
//  * ДатаВыдачи - Дата
//  * ДатаОкончания - Дата
//  * Доверитель - Строка
//  * ИННДоверителя - Строка
//  * Представитель - Строка
//  * ИННПредставителя - Строка
Функция НовыеОбщиеСвойстваДоверенности()
	Свойства = Новый Структура;
	Свойства.Вставить("НомерДоверенности", "");
	Свойства.Вставить("ДатаВыдачи", '00010101');
	Свойства.Вставить("ДатаОкончания", '00010101');
	Свойства.Вставить("Доверитель", "");
	Свойства.Вставить("ДоверительИНН", "");
	Свойства.Вставить("Представитель", "");
	Свойства.Вставить("ПредставительИНН", "");
	Возврат Свойства;
КонецФункции

#КонецОбласти
