#Область ПрограммныйИнтерфейс

#Область ФормированиеОбщихПараметровЧека

// Инициализирует параметры фискального чека
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	ДокументСсылка - ДокументСсылка - Документ, по которому требуется распечатать чек 
// 	Организация - СправочникСсылка.Организации - Организация по документу
Процедура ПараметрыОперацииФискализацииЧека(ПараметрыФискальногоЧека, ДокументСсылка, Организация) Экспорт
	
	//++ Локализация
	ПараметрыФискальногоЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	//-- Локализация
	
КонецПроцедуры

// Заполняется основные параметры фискального чека
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	ДокументСсылка - ДокументСсылка - Документ, по которому формируются параметры фискального чека
// 	Организация - СправочникСсылка.Организации - Организация документа, по которому формируются параметры фискального чека
Процедура ПараметрыОперацииФискализацииЧекаПоДокументу(ПараметрыФискальногоЧека, ДокументСсылка, Организация, Кассир = Неопределено) Экспорт
	
	//++ Локализация
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ПараметрыФискальногоЧека.Вставить("ДокументОснование" , ДокументСсылка);
	
	ПараметрыФискальногоЧека.Вставить("СистемаНалогообложения", СистемаНалогообложенияПоДокументу(ДокументСсылка));	
	
	СведенияОЮрФизЛице = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, ТекущаяДатаСеанса);
	ПараметрыФискальногоЧека.Вставить("Организация"       	, Организация);
	ПараметрыФискальногоЧека.Вставить("ОрганизацияНазвание"	, СведенияОЮрФизЛице.ПолноеНаименование);
	ПараметрыФискальногоЧека.Вставить("ОрганизацияИНН"		, СведенияОЮрФизЛице.ИНН);
	ПараметрыФискальногоЧека.Вставить("ОрганизацияКПП"		, СведенияОЮрФизЛице.КПП);
	ПараметрыФискальногоЧека.Вставить("АдресМагазина"		, СведенияОЮрФизЛице.ФактическийАдрес);
	ПараметрыФискальногоЧека.Вставить("НаименованиеМагазина", СведенияОЮрФизЛице.СокращенноеНаименование);
	
	Если Не ЗначениеЗаполнено(Кассир) Тогда
		Кассир = Пользователи.ТекущийПользователь();
	КонецЕсли;
	РеквизитыКассира = РозничныеПродажи.РеквизитыКассира(Кассир, Организация, ТекущаяДатаСеанса);
	Если ЗначениеЗаполнено(РеквизитыКассира.Должность) Тогда
		ПараметрыФискальногоЧека.Вставить("Кассир", РеквизитыКассира.Наименование + " - " + РеквизитыКассира.Должность);
	Иначе
		ПараметрыФискальногоЧека.Вставить("Кассир", РеквизитыКассира.Наименование);
	КонецЕсли;
	ПараметрыФискальногоЧека.Вставить("КассирИНН", РеквизитыКассира.ИНН);
	
	ПараметрыФискальногоЧека.Вставить("НомерКассы"			, "00001");
	ПараметрыФискальногоЧека.Вставить("НомерЧека"			, 1);
	ПараметрыФискальногоЧека.Вставить("НомерСмены"			, 1);
	ПараметрыФискальногоЧека.Вставить("ДатаВремя"			, ТекущаяДатаСеанса);
	ПараметрыФискальногоЧека.Вставить("КопийЧека"			, 1);
	//-- Локализация
	
КонецПроцедуры

// Обновляет параметр "ДокументОснование" в параметрах фискального чека 
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	ДокументОснование - ДокументСсылка - новое значение параметра "ДокументОснование"
Процедура ОбновитьПараметрыФискальногоЧекаДокументОснование(ПараметрыФискальногоЧека, ДокументОснование) Экспорт
	//++ Локализация
	ПараметрыФискальногоЧека.ДокументОснование = ДокументОснование;
	//-- Локализация
КонецПроцедуры

// Обновляет параметр "ЕдиныйЧек" в параметрах фискального чека 
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	ФлагЕдиныйЧек - Булево - новое значение параметра "ЕдиныйЧек"
Процедура ОбновитьПараметрыФискальногоЧекаЕдиныйЧек(ПараметрыФискальногоЧека, ФлагЕдиныйЧек) Экспорт
	//++ Локализация
	ПараметрыФискальногоЧека.ЕдиныйЧек = ФлагЕдиныйЧек;
	//-- Локализация
КонецПроцедуры

// Обновляет параметр "ТипРасчета" в параметрах фискального чека 
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	ТипРасчета - ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами - новое значение параметра "ТипРасчета"
Процедура ПараметрыФискальногоЧекаЗаполнитьТипРасчета(ПараметрыФискальногоЧека, ТипРасчета) Экспорт
	//++ Локализация
	ПараметрыФискальногоЧека.Вставить("ТипРасчета", ТипРасчета); // Обязательно.
	//-- Локализация
КонецПроцедуры

// Обновляет параметр "СерийныйНомер" в параметрах фискального чека 
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	СерийныйНомерОборудования - Строка - новое значение параметра "СерийныйНомер"
Процедура ПараметрыФискальногоЧекаЗаполнитьСерийныйНомерОборудования(ПараметрыФискальногоЧека, СерийныйНомерОборудования) Экспорт
	//++ Локализация
	ПараметрыФискальногоЧека.Вставить("СерийныйНомер", СерийныйНомерОборудования); // Строка,Необязательно - Заводской номер ККМ (совместимость с ФР).
	//-- Локализация
КонецПроцедуры

// Обновляет параметры получателя в параметрах фискального чека
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	СведенияОЮрФизЛице - Структура - Сведения о покупателе юр. лице/ИП
Процедура ПараметрыФискальногоЧекаЗаполнитьПараметрыПокупателя(ПараметрыФискальногоЧека, СведенияОЮрФизЛице) Экспорт
	//++ Локализация
	Если СведенияОЮрФизЛице = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыФискальногоЧека.ВерсияФФД = "1.2" Тогда
		СведенияОПокупателе = ПараметрыФискальногоЧека.СведенияОПокупателе;
		
		СведенияОПокупателе.Покупатель      = СведенияОЮрФизЛице.ПолноеНаименование;
		СведенияОПокупателе.ПокупательИНН   = СведенияОЮрФизЛице.ИНН;
		СведенияОПокупателе.ПокупательАдрес = СведенияОЮрФизЛице.ЮридическийАдрес;
		
		ПараметрыФискальногоЧека.СведенияОПокупателе = СведенияОПокупателе;
	Иначе
		ПараметрыФискальногоЧека.Вставить("Получатель", СведенияОЮрФизЛице.ПолноеНаименование);
		ПараметрыФискальногоЧека.Вставить("ПолучательИНН", СведенияОЮрФизЛице.ИНН);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Обновляет параметр "ТорговыйОбъект" в параметрах фискального чека 
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	МестоРасчетов - Структура - содержит структуру значений по торговому объекту
Процедура ПараметрыФискальногоЧекаЗаполнитьМестоРасчетов(ПараметрыФискальногоЧека, МестоРасчетов) Экспорт
	//++ Локализация
	ПараметрыФискальногоЧека.Вставить("ТорговыйОбъект", МестоРасчетов.ТорговыйОбъект);
	Если МестоРасчетов.Свойство("АдресРасчетов") Тогда
		ПараметрыФискальногоЧека.Вставить("АдресРасчетов", МестоРасчетов.АдресРасчетов);
	КонецЕсли;
	Если МестоРасчетов.Свойство("МестоРасчетов") Тогда
		ПараметрыФискальногоЧека.Вставить("МестоРасчетов", МестоРасчетов.МестоРасчетов);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Обновляет параметры отправки электронного чека в параметрах фискального чека
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	ВариантОтправки - ПеречислениеСсылка.ВариантыОтправкиЭлектронногоЧекаПокупателю - вариант отправки электронного чека (email, sms)
// 	КонтактПолучателя - Строка - email или номер телефона
Процедура ПараметрыФискальногоЧекаЗаполнитьПараметрыОтправкиЭлектронногоЧека(ПараметрыФискальногоЧека, ВариантОтправки, КонтактПолучателя) Экспорт
	//++ Локализация
	ПараметрыФискальногоЧека.ОтправительEmail = "";
	
	Если ВариантОтправки = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять Тогда
		ПараметрыФискальногоЧека.Электронно = Ложь;
		
		ПараметрыФискальногоЧека.Отправляет1СEmail = Ложь;
		ПараметрыФискальногоЧека.ПокупательEmail = Неопределено;
		ПараметрыФискальногоЧека.ОтправительEmail = Неопределено;
		
		ПараметрыФискальногоЧека.Отправляет1СSMS = Ложь;
		ПараметрыФискальногоЧека.ПокупательНомер = Неопределено;
	Иначе
		ПараметрыФискальногоЧека.Электронно = ПолучитьФункциональнуюОпцию("НеПечататьФискальныйЧекПриОтправкеЭлектронногоЧекаПокупателю");
	КонецЕсли;
	
	Если ВариантОтправки = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS
		И ЗначениеЗаполнено(КонтактПолучателя) Тогда
		
		ПараметрыФискальногоЧека.Отправляет1СSMS = Не Константы.ОтправлятьЭлектронныеЧекиПоSMSЧерезОФД.Получить();
		ПараметрыФискальногоЧека.ПокупательНомер = "+7" + РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(КонтактПолучателя);
		
		ПараметрыФискальногоЧека.Отправляет1СEmail = Ложь;
		ПараметрыФискальногоЧека.ПокупательEmail = Неопределено;
		ПараметрыФискальногоЧека.ОтправительEmail = Неопределено;
	КонецЕсли;
	
	Если ВариантОтправки = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail
		И ЗначениеЗаполнено(КонтактПолучателя) Тогда
		
		ПараметрыФискальногоЧека.Отправляет1СEmail = Не Константы.ОтправлятьЭлектронныеЧекиПоEmailЧерезОФД.Получить();
		ПараметрыФискальногоЧека.ПокупательEmail = КонтактПолучателя;
		
		ПараметрыФискальногоЧека.Отправляет1СSMS = Ложь;
		ПараметрыФискальногоЧека.ПокупательНомер = Неопределено;
		
		ПараметрыФискальногоЧека.ОтправительEmail = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ПараметрыФискальногоЧека.Организация,
			Справочники.ВидыКонтактнойИнформации.EmailОрганизации,
			ТекущаяДатаСеанса());
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Обновляет персональные данные в параметрах фискального чека
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	ЕстьПерсональныеДанные - Булево - Параметры фискального чека содержат/не содержат персональные данные
// 	Получатель - Строка - ФИО получателя и паспортные данные в случае отсутствия ИНН
// 	ПолучательИНН - Строка - ИНН получателя
Процедура ПараметрыФискальногоЧекаЗаполнитьПерсональныеДанные(ПараметрыФискальногоЧека, ЕстьПерсональныеДанные, Получатель, ПолучательИНН) Экспорт
	
	ПараметрыФискальногоЧека.Вставить("ЕстьПерсональныеДанные", ЕстьПерсональныеДанные);
	ПараметрыФискальногоЧека.Вставить("Получатель"   , СокрЛП(Получатель));
	ПараметрыФискальногоЧека.Вставить("ПолучательИНН", СокрЛП(ПолучательИНН));
	
КонецПроцедуры

// Обновляет персональные данные в параметрах фискального чека версии ФФД 1.2
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	ЕстьПерсональныеДанные - Булево - Параметры фискального чека содержат/не содержат персональные данные
// 	ТипПерсональныхДанных - ПеречислениеСсылка.ТипыПерсональныхДанныхККТ - Тип персональных данных, указанных при пробитии чека
//	СубъектПерсональныхДанных - СправочникСсылка.ФизическиеЛица - Розничный покупатель
// 	СведенияОПокупателе - Структура - Сведения о покупателе
Процедура ПараметрыФискальногоЧекаЗаполнитьПерсональныеДанныеФФД_1_2(ПараметрыФискальногоЧека, ЕстьПерсональныеДанные, ТипПерсональныхДанных, СубъектПерсональныхДанных, СведенияОПокупателе) Экспорт
	
	ПараметрыФискальногоЧека.Вставить("ЕстьПерсональныеДанные", ЕстьПерсональныеДанные);
	ПараметрыФискальногоЧека.Вставить("СведенияОПокупателе", СведенияОПокупателе);
	ПараметрыФискальногоЧека.Вставить("ТипПерсональныхДанных", ТипПерсональныхДанных);
	ПараметрыФискальногоЧека.Вставить("СубъектПерсональныхДанных", СубъектПерсональныхДанных);
	
КонецПроцедуры

// Обновляет параметры чека коррекции в параметрах фискального чека
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	КорректируемыйДокумент - ДокументСсылка - Основание, по которому введен документ печати чека
// 	ВидКоррекции - ПеречислениеСсылка.ВидыЧековКоррекции - вид чека коррекции
// 	ДанныеКоррекции - Массив - Дополнительные данные коррекции
Процедура ПараметрыФискальногоЧекаЗаполнитьПараметрыКоррекции(ПараметрыФискальногоЧека, КорректируемыйДокумент, ВидКоррекции, ДанныеКоррекции) Экспорт
	//++ Локализация
	ПараметрыФискальногоЧека.Вставить("КорректируемыйДокумент", КорректируемыйДокумент);
	ПараметрыФискальногоЧека.Вставить("НеприменениеККТ", (ВидКоррекции = Перечисления.ВидыЧековКоррекции.НеприменениеККТ)); 
	ПараметрыФискальногоЧека.Вставить("ДанныеКоррекции", ДанныеКоррекции);
	//-- Локализация
КонецПроцедуры

// Очищает параметры чека коррекции в параметрах фискального чека 
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
Процедура ПараметрыФискальногоЧекаУдалитьПараметрыКоррекции(ПараметрыФискальногоЧека) Экспорт
	//++ Локализация
	ПараметрыФискальногоЧека.Удалить("КорректируемыйДокумент");
	ПараметрыФискальногоЧека.Удалить("НеприменениеККТ"); 
	ПараметрыФискальногоЧека.Удалить("ДанныеКоррекции");
	//-- Локализация
КонецПроцедуры

// Обновляет параметр "ПозицииЧека" в параметрах фискального чека
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	ПозицииЧека - Массив - новое значение параметра "ПозицииЧека"
Процедура ПараметрыФискальногоЧекаЗаполнитьПозицииЧека(ПараметрыФискальногоЧека, ПозицииЧека) Экспорт
	//++ Локализация
	ПараметрыФискальногоЧека.Вставить("ПозицииЧека", ПозицииЧека);
	//-- Локализация
КонецПроцедуры

// Обновляет параметр "ТаблицаОплат" в параметрах фискального чека 
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	ТаблицаОплат - Массив - новое значение параметра "ТаблицаОплат"
Процедура ПараметрыФискальногоЧекаЗаполнитьТаблицуОплат(ПараметрыФискальногоЧека, ТаблицаОплат) Экспорт
	//++ Локализация
	ПараметрыФискальногоЧека.Вставить("ТаблицаОплат" , ТаблицаОплат);
	//-- Локализация
КонецПроцедуры

// Добавляет дополнительные данные к параметрам фискального чека в случае оплаты подарочным сертификатом
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека, состоит из:
// 	* ПозицииЧека - Массив - Массив структур позиции чека
// 	* ТаблицаОплат - Массив - Массив структур видов оплат с суммами
// 	ПодарочныеСертификаты - ТаблицаЗначений - Список подарочных сертификатов с суммовыми данными
Процедура ДобавитьДанныеПоПодарочнымСертификатам(ПараметрыФискальногоЧека, ПодарочныеСертификаты) Экспорт
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоВнереализационнойПрибылиДляФискализации();
	
	Запрос.УстановитьПараметр("ПогашениеПодарочныхСертификатов", ПодарочныеСертификаты);
	Запрос.УстановитьПараметр("ОплатаПодарочнымСертификатом", 	 ПодарочныеСертификаты);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаЗапроса = Результат.Выгрузить();
	ПотериПокупателя = ТаблицаЗапроса.Итог("Разница");
	
	Если ПотериПокупателя > 0 Тогда
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		СтрокаПозицииЧека.Количество = 1;
		СтрокаПозицииЧека.Наименование = "8";
		Если ПараметрыФискальногоЧека.ПозицииЧека.Количество() > 0 Тогда
			ПоследняяПозиция = ПараметрыФискальногоЧека.ПозицииЧека[ПараметрыФискальногоЧека.ПозицииЧека.Количество() - 1];
			СтрокаПозицииЧека.НомерСекции = ПоследняяПозиция.НомерСекции;
		Иначе
			СтрокаПозицииЧека.НомерСекции = 1;
		КонецЕсли; 
		
		СтрокаПозицииЧека.НомерСтрокиТовара      = ПараметрыФискальногоЧека.ПозицииЧека.Количество();
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ВнереализационныйДоход;
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
		СтрокаПозицииЧека.СтавкаНДС              = Неопределено;
		СтрокаПозицииЧека.Сумма                  = ПотериПокупателя;
		СтрокаПозицииЧека.Цена                   = ПотериПокупателя;
		СтрокаПозицииЧека.ЦенаСоСкидками         = ПотериПокупателя;
		
		ПараметрыФискальногоЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
		СтрокаТаблицыОплат = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаТаблицыОплат.Сумма     = ПотериПокупателя;
		СтрокаТаблицыОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата;
		ПараметрыФискальногоЧека.ТаблицаОплат.Добавить(СтрокаТаблицыОплат);
		
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Возвращает таблицу товаров для заполнения позиций строк в параметрах чека
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ для получения товарных позиций
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблицу с товарными позициями с количественными и суммовыми показателями
Функция ПозицииНоменклатурыПоДокументу(ДокументСсылка) Экспорт
	//++ Локализация
	УстановитьПривилегированныйРежим(Истина);
	
	МодульЛокализации = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ДокументСсылка.Метаданные().Имя);
	Если МодульЛокализации = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не настроен модуль локализации по документу.'"); 
	Иначе
		Возврат МодульЛокализации.ПозицииНоменклатурыПоДокументу(ДокументСсылка);
	КонецЕсли;
	//-- Локализация
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ФормированиеПараметровЧекаККМ

// Обновляет данные торгового объекта в параметрах чека
//
// Параметры:
// 	ПараметрыОперацииФискализацииЧека - Структура - Параметры фискального чека
//  Организация - СправочникСсылка.Организации - Ссылка на организацию
// 	ТорговыйОбъект - СправочникСсылка.Склады - Ссылка на склад, к которому привязана ККТ
//  ОборудованиеККТ - СправочникСсылка.ПодключаемоеОборудование - Ссылка на ККТ
Процедура ОбновитьПараметрыФискальногоЧекаМестоРасчетов(ПараметрыОперацииФискализацииЧека, Организация, ТорговыйОбъект, ОборудованиеККТ) Экспорт	
		
	МестоРасчетов = Новый Структура("ТорговыйОбъект, МестоРасчетов, АдресРасчетов", "", "", "");
	
	ТорговыйОбъектНаименование = РозничныеПродажи.ТорговыйОбъектККТ(Организация, ТорговыйОбъект);
	
	Если ЗначениеЗаполнено(ТорговыйОбъект) Тогда
		МестоРасчетов.ТорговыйОбъект = ТорговыйОбъект;
	Иначе
		МестоРасчетов.ТорговыйОбъект = ПодключаемоеОборудованиеУТВызовСервера.КассаСвязаннаяСОборудованием(ОборудованиеККТ);
	КонецЕсли;
	
	ТорговыйОбъектМестоРасчетов = РозничныеПродажи.МестоРасчетовККТ(ОборудованиеККТ);
	Если ЗначениеЗаполнено(ТорговыйОбъектМестоРасчетов) Тогда
		МестоРасчетов.МестоРасчетов = ТорговыйОбъектМестоРасчетов;
	Иначе
		МестоРасчетов.МестоРасчетов = ТорговыйОбъектНаименование;
	КонецЕсли;
	
	МестоРасчетов.АдресРасчетов = РозничныеПродажи.АдресРасчетовККТ(ОборудованиеККТ, Организация);
	
	ПараметрыФискальногоЧекаЗаполнитьМестоРасчетов(ПараметрыОперацииФискализацииЧека, МестоРасчетов);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПозицийЧекаККМ

// Рассчитывает и обновляет параметр позиций чека ККМ (ЧекККМ, ЧекККМВозврат, ЧекККМКоррекции)
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	ДокументСсылка - ДокументСсылка - Ссылка на чек ККМ
Процедура ОбновитьПараметрыФискальногоЧекаПозицийЧекаККМ(ПараметрыФискальногоЧека, ДокументСсылка) Экспорт
	//++ Локализация
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратПодарочныхСертификатов")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияПодарочныхСертификатов") Тогда
		
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
	Иначе
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	КонецЕсли;
	
	ПозицииЧека = Новый Массив;
	
	ПредметыРасчетов = ПредметыРасчетовПоДокументу(ДокументСсылка);
	ПараметрыФискальныхСтрокЧека = ПараметрыФискальныхСтрокЧека(ПредметыРасчетов.Товары, ПредметыРасчетов.ДанныеДляИСМП, ПараметрыФискальногоЧека);
	
	Для Каждого ПозицияЧека Из ПараметрыФискальныхСтрокЧека Цикл
		ПозицияЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
		ПозицииЧека.Добавить(ПозицияЧека);
	КонецЦикла;
	
	ПараметрыФискальногоЧекаЗаполнитьПозицииЧека(ПараметрыФискальногоЧека, ПозицииЧека);
	//-- Локализация
КонецПроцедуры

// Рассчитывает и обновляет параметр таблицы оплат чека ККМ (ЧекККМ, ЧекККМВозврат, ЧекККМКоррекции)
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	ИнформацияОбОплате - Структура - Суммы оплат по видам оплат
Процедура ОбновитьПараметрыФискальногоЧекаТаблицаОплатЧекаККМ(ПараметрыФискальногоЧека, ИнформацияОбОплате) Экспорт
	//++ Локализация
	
	ТаблицаОплат = Новый Массив();
	
	// Наличные
	Если ИнформацияОбОплате.Наличные > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Сумма", ИнформацияОбОплате.Наличные);
		ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Безналичные
	Если ИнформацияОбОплате.ПлатежныеКарты > 0 Тогда
		СуммаБезналичнойОплаты = 0;
		Если ПараметрыФискальногоЧека.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
			СуммаБезналичнойОплаты = ИнформацияОбОплате.ПлатежныеКартыОтменено;
		Иначе
			СуммаБезналичнойОплаты = ИнформацияОбОплате.ПлатежныеКарты;
		КонецЕсли;
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Электронно);
		СтрокаОплаты.Вставить("Сумма", СуммаБезналичнойОплаты);
		ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Сертификатом и Бонусными баллами
	Если ИнформацияОбОплате.ПодарочныеСертификаты > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
		СтрокаОплаты.Вставить("Сумма", ИнформацияОбОплате.ПодарочныеСертификаты);
		ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	ПараметрыФискальногоЧекаЗаполнитьТаблицуОплат(ПараметрыФискальногоЧека, ТаблицаОплат);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПозицийЕдиногоЧека

// Рассчитывает и обновляет параметр позиций единого чека
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	ДокументыЕдиногоЧека - Массив - Документы, входящие в единый чек
Процедура ОбновитьПараметрыФискальногоЧекаПозицийЧекаЕдиныйЧек(ПараметрыФискальногоЧека, ДокументыЕдиногоЧека) Экспорт
	//++ Локализация
	СуммаОплаты = 0;
	СуммаПоставки = 0;
	
	ДокументыПоставки = Новый Массив;
	
	Для Каждого ДанныеДокумента Из ДокументыЕдиногоЧека Цикл
		Если ФормированиеФискальныхЧековСерверПереопределяемый.ДокументОплатыСВозможностьюПробитияЧеков(ДанныеДокумента.Документ) Тогда
			СуммаОплаты = СуммаОплаты + ДанныеДокумента.Сумма;
		Иначе
			ДокументыПоставки.Добавить(ДанныеДокумента.Документ);
			СуммаПоставки = СуммаПоставки + ДанныеДокумента.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	Если СуммаОплаты < СуммаПоставки Тогда
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
	КонецЕсли;
	
	
	ПозицииЧека = Новый Массив;
	
	Для Каждого ДокументПоставки Из ДокументыПоставки Цикл
		
		ПредметыРасчетов = ПредметыРасчетовПоДокументу(ДокументПоставки);
		ПараметрыФискальныхСтрокЧека = ПараметрыФискальныхСтрокЧека(ПредметыРасчетов.Товары, ПредметыРасчетов.ДанныеДляИСМП, ПараметрыФискальногоЧека);
		
		Для Каждого ПозицияЧека Из ПараметрыФискальныхСтрокЧека Цикл
			ПозицияЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
			ПозицииЧека.Добавить(ПозицияЧека);
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыФискальногоЧекаЗаполнитьПозицииЧека(ПараметрыФискальногоЧека, ПозицииЧека);
	//-- Локализация
КонецПроцедуры

// Рассчитывает и обновляет параметр таблицы оплат единого чека
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	ДокументыЕдиногоЧека - Массив - Документы, входящие в единый чек
Процедура ОбновитьПараметрыФискальногоЧекаТаблицаОплатЕдиныйЧек(ПараметрыФискальногоЧека, ДокументыЕдиногоЧека) Экспорт
	//++ Локализация
	ТаблицаОплат = Новый Массив();
	
	ТипыОплат = Новый Структура("Наличные, Электронно", 0, 0);
	СуммаОплаты = 0;
	СуммаПоставки = 0;
	
	Для Каждого ДанныеДокумента Из ДокументыЕдиногоЧека Цикл
		Если ФормированиеФискальныхЧековСерверПереопределяемый.ДокументОплатыСВозможностьюПробитияЧеков(ДанныеДокумента.Документ) Тогда
			СуммаОплаты = СуммаОплаты + ДанныеДокумента.Сумма;
			
			Если ДокументБезналичнойОплаты(ДанныеДокумента.Документ) Тогда
				ТипыОплат.Электронно = ТипыОплат.Электронно + ДанныеДокумента.Сумма;
			Иначе
				ТипыОплат.Наличные = ТипыОплат.Наличные + ДанныеДокумента.Сумма;
			КонецЕсли;
		Иначе
			СуммаПоставки = СуммаПоставки + ДанныеДокумента.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТипОплаты Из ТипыОплат Цикл
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ[ТипОплаты.Ключ]);//ТипОплаты);
		СтрокаОплаты.Вставить("Сумма", ТипОплаты.Значение);//СуммаОплаты);
		ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЦикла;
	
	Если СуммаОплаты < СуммаПоставки Тогда
		СтрокаПостоплаты = Новый Структура();
		СтрокаПостоплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
		СтрокаПостоплаты.Вставить("Сумма", (СуммаПоставки - СуммаОплаты));
		ТаблицаОплат.Добавить(СтрокаПостоплаты);
	КонецЕсли;
	
	ПараметрыФискальногоЧекаЗаполнитьТаблицуОплат(ПараметрыФискальногоЧека, ТаблицаОплат);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПозицийДокументаПоставки

// Рассчитывает и обновляет параметр позиций чека для документа поставки
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	ОбъектыРасчетовСПризнакамиСпособаРасчетов - ТаблицаЗначений - таблица сумм поставки по объектам расчетов
// 		документа печати чека с детализацией по признакам способа расчета.
Процедура ОбновитьПараметрыФискальногоЧекаПозицийЧекаПоДокументуПоставки(ПараметрыФискальногоЧека, ОбъектыРасчетовСПризнакамиСпособаРасчетов) Экспорт
	//++ Локализация
	ПозицииЧека = Новый Массив;
	
	Для Каждого ОбъектРасчетовСПризнакомСпособаРасчетов Из ОбъектыРасчетовСПризнакамиСпособаРасчетов Цикл
		
		ОбъектРасчетов = ОбъектРасчетовСПризнакомСпособаРасчетов.ОбъектРасчетов;
		ПризнакСпособаРасчета = ОбъектРасчетовСПризнакомСпособаРасчетов.ПризнакСпособаРасчета;
		
		ПредметыРасчетов = ПредметыРасчетовПоДокументу(ОбъектРасчетов);
		ПараметрыФискальныхСтрокЧека = ПараметрыФискальныхСтрокЧека(ПредметыРасчетов.Товары, ПредметыРасчетов.ДанныеДляИСМП, ПараметрыФискальногоЧека);
		
		Для Каждого ПозицияЧека Из ПараметрыФискальныхСтрокЧека Цикл
			ПозицияЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
			ПозицииЧека.Добавить(ПозицияЧека);
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыФискальногоЧекаЗаполнитьПозицииЧека(ПараметрыФискальногоЧека, ПозицииЧека);
	//-- Локализация
КонецПроцедуры

// Рассчитывает и обновляет параметр таблицы оплат чека для документа поставки
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	СтруктуруОплатДокументаПоставки - Структура - Суммы оплат по видам оплат
Процедура ОбновитьПараметрыФискальногоЧекаТаблицыОплатПоДокументуПоставки(ПараметрыФискальногоЧека, СтруктуруОплатДокументаПоставки) Экспорт
	//++ Локализация
	ТаблицаОплат = Новый Массив();
	
	Если СтруктуруОплатДокументаПоставки.СуммаПредоплаты > 0 Тогда
		ДобавитьВТаблицуОплат(ТаблицаОплат, Перечисления.ТипыОплатыККТ.Предоплата, СтруктуруОплатДокументаПоставки.СуммаПредоплаты);
	КонецЕсли;
	
	Если СтруктуруОплатДокументаПоставки.СуммаОплатыНаличные > 0 Тогда
		ДобавитьВТаблицуОплат(ТаблицаОплат, Перечисления.ТипыОплатыККТ.Наличные, СтруктуруОплатДокументаПоставки.СуммаОплатыНаличные);
	КонецЕсли;
	
	Если СтруктуруОплатДокументаПоставки.СуммаОплатыЭлектронно > 0 Тогда
		ДобавитьВТаблицуОплат(ТаблицаОплат, Перечисления.ТипыОплатыККТ.Электронно, СтруктуруОплатДокументаПоставки.СуммаОплатыЭлектронно);
	КонецЕсли;
	
	Если СтруктуруОплатДокументаПоставки.СуммаПостоплаты > 0 Тогда
		ДобавитьВТаблицуОплат(ТаблицаОплат, Перечисления.ТипыОплатыККТ.Постоплата, СтруктуруОплатДокументаПоставки.СуммаПостоплаты);
	КонецЕсли;
	
	ПараметрыФискальногоЧекаЗаполнитьТаблицуОплат(ПараметрыФискальногоЧека, ТаблицаОплат);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПозицийДокументаОплаты

// Рассчитывает и обновляет параметр позиций чека для документа оплаты
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	ОбъектыРасчетовСПризнакамиСпособаРасчетов - ТаблицаЗначений - таблица сумм поставки по объектам расчетов документа
// 		печати чека с детализацией по признакам способа расчета.
// 	ИмяКомандыПробитияЧека - Строка - Имя команды пробития чека
Процедура ОбновитьПараметрыФискальногоЧекаПозицийЧекаПоДокументуОплаты(ПараметрыФискальногоЧека, ОбъектыРасчетовСПризнакамиСпособаРасчетов, ИмяКомандыПробитияЧека) Экспорт
	//++ Локализация
	ПозицииЧека = Новый Массив;
	
	СуммыАвансовПоСтавкамНДСПоВсемОбъектамРасчетов = Новый ТаблицаЗначений();
	СуммыАвансовПоСтавкамНДСПоВсемОбъектамРасчетов.Колонки.Добавить("СтавкаНДС");
	СуммыАвансовПоСтавкамНДСПоВсемОбъектамРасчетов.Колонки.Добавить("СуммаНДС");
	СуммыАвансовПоСтавкамНДСПоВсемОбъектамРасчетов.Колонки.Добавить("Сумма");
	
	Для Каждого ОбъектРасчетовСПризнакомСпособаРасчетов Из ОбъектыРасчетовСПризнакамиСпособаРасчетов Цикл
		
		ПризнакСпособаРасчета = ОбъектРасчетовСПризнакомСпособаРасчетов.ПризнакСпособаРасчета;
		
		Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
			
			СуммыАвансовПоСтавкамНДС = ФормированиеФискальныхЧековСерверПереопределяемый.СтавкиНДСПоОбъектуРасчетовПоДокументуОплаты(
				ПараметрыФискальногоЧека.ДокументОснование,
				ОбъектРасчетовСПризнакомСпособаРасчетов.ОбъектРасчетов,
				ПараметрыФискальногоЧека.СистемаНалогообложения,
				ИмяКомандыПробитияЧека);
			
			СуммаНДСОплатыПоОбъекту = СуммыАвансовПоСтавкамНДС.Итог("СуммаНДС");
			СуммаОплатыПоОбъекту = СуммыАвансовПоСтавкамНДС.Итог("Сумма");
			
			СуммаКУчетуПоОбъекту = 0;
			Для Каждого СуммаАвансовПоСтавкамНДС Из СуммыАвансовПоСтавкамНДС Цикл
				СуммаКУчету = Окр(СуммаАвансовПоСтавкамНДС.Сумма / СуммаОплатыПоОбъекту * ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма, 2);
				СуммаКУчетуПоОбъекту = СуммаКУчетуПоОбъекту + СуммаКУчету;
				
				СуммаАвансаПоСтавкеНДСПоВсемОбъектамРасчетов = СуммыАвансовПоСтавкамНДСПоВсемОбъектамРасчетов.Добавить();
				СуммаАвансаПоСтавкеНДСПоВсемОбъектамРасчетов.СтавкаНДС = СуммаАвансовПоСтавкамНДС.СтавкаНДС;
				
				СуммаАвансаПоСтавкеНДСПоВсемОбъектамРасчетов.Сумма = Окр(СуммаАвансовПоСтавкамНДС.Сумма / СуммаОплатыПоОбъекту * ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма, 2);
				
				Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СуммаАвансовПоСтавкамНДС, "СуммаНДС")
					И ЗначениеЗаполнено(СуммаАвансовПоСтавкамНДС.СуммаНДС) Тогда
					
					СуммаАвансаПоСтавкеНДСПоВсемОбъектамРасчетов.СуммаНДС = Окр(СуммаАвансовПоСтавкамНДС.СуммаНДС / СуммаОплатыПоОбъекту * ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма, 2);
				КонецЕсли;
			КонецЦикла;
			
			РазницаСуммыАвансовПоСтавкаНДСКУчетуЗаСчетОкругления = 0;
			Если СуммаОплатыПоОбъекту = ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма Тогда
				РазницаСуммыАвансовПоСтавкаНДСКУчетуЗаСчетОкругления = СуммаОплатыПоОбъекту - СуммаКУчетуПоОбъекту;
			КонецЕсли;
			
			Если СуммаКУчетуПоОбъекту > 0 И РазницаСуммыАвансовПоСтавкаНДСКУчетуЗаСчетОкругления > 0 Тогда
				СуммаАвансаПоСтавкеНДСПоВсемОбъектамРасчетов.Сумма = СуммаАвансаПоСтавкеНДСПоВсемОбъектамРасчетов.Сумма + РазницаСуммыАвансовПоСтавкаНДСКУчетуЗаСчетОкругления;
			КонецЕсли;
			
		Иначе
			
			ДополнитьПараметрыФискальногоЧекаПозицийЧекаПоДокументамОплатыСНоменклатурнымиПозициями(
				ПараметрыФискальногоЧека,
				ПозицииЧека,
				ОбъектРасчетовСПризнакомСпособаРасчетов,
				ИмяКомандыПробитияЧека);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СуммыАвансовПоСтавкамНДСПоВсемОбъектамРасчетов.Количество() > 0 Тогда
		СуммыАвансовПоСтавкамНДСПоВсемОбъектамРасчетов.Свернуть("СтавкаНДС", "СуммаНДС, Сумма");
		
		ДополнитьПараметрыФискальногоЧекаПозицийЧекаПоДокументамОплатыАванс(ПараметрыФискальногоЧека, ПозицииЧека, СуммыАвансовПоСтавкамНДСПоВсемОбъектамРасчетов);
	КонецЕсли;
	
	ПараметрыФискальногоЧекаЗаполнитьПозицииЧека(ПараметрыФискальногоЧека, ПозицииЧека);
	//-- Локализация
КонецПроцедуры

// Рассчитывает и обновляет параметр таблицы оплат чека для документа оплаты
// 
// Параметры:
// 	ПараметрыФискальногоЧека - Структура - Параметры фискального чека
// 	СуммаДокумента - Структура - Суммы оплат по видам оплат
Процедура ОбновитьПараметрыФискальногоЧекаТаблицыОплатПоДокументуОплаты(ПараметрыФискальногоЧека, СуммаДокумента) Экспорт
	//++ Локализация
	ТаблицаОплат = Новый Массив();
	ДобавитьВТаблицуОплат(ТаблицаОплат, ТипОплатыККТПоДокументуОплаты(ПараметрыФискальногоЧека.ДокументОснование), СуммаДокумента);
	
	СуммаПоставки = 0;
	Для Каждого СтрокаПозицииЧека Из ПараметрыФискальногоЧека.ПозицииЧека Цикл
		СуммаПоставки = СуммаПоставки + СтрокаПозицииЧека.Сумма;
	КонецЦикла;
	
	Если СуммаДокумента < СуммаПоставки Тогда
		ДобавитьВТаблицуОплат(ТаблицаОплат, Перечисления.ТипыОплатыККТ.Постоплата, СуммаПоставки-СуммаДокумента);
	КонецЕсли;
	
	ПараметрыФискальногоЧекаЗаполнитьТаблицуОплат(ПараметрыФискальногоЧека, ТаблицаОплат);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация

Функция СистемаНалогообложенияПоДокументу(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульЛокализации = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ДокументСсылка.Метаданные().Имя);
	Если МодульЛокализации = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не настроен модуль локализации по документу.'");
	Иначе
		Возврат МодульЛокализации.СистемаНалогообложенияПоДокументу(ДокументСсылка);
	КонецЕсли;
	
КонецФункции

Функция ПредметыРасчетовПоДокументу(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульЛокализации = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ДокументСсылка.Метаданные().Имя);
	Если МодульЛокализации = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не настроен модуль локализации по документу.'"); 
	Иначе
		Возврат МодульЛокализации.ПредметыРасчетовПоДокументу(ДокументСсылка);
	КонецЕсли;
	
КонецФункции

Функция КлиентАвансовогоПлатежаНаименование(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеДокумента = ДокументСсылка.Метаданные(); // ОбъектМетаданных
	МодульЛокализации = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(МетаданныеДокумента.Имя);
	
	Если МодульЛокализации = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не настроен модуль локализации по документу.'"); 
	Иначе
		Попытка
			Возврат МодульЛокализации.КлиентАвансовогоПлатежаНаименование(ДокументСсылка);
		Исключение
			Возврат "";
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

// Формирует строки позиции чека с учетом данных для ИСМП
// 
// Параметры:
// 	ПредметыРасчетов - ТаблицаЗначений - предметы расчетов, состоящие из:
// 	* НомерСтроки - Число - Номер строки
// 	ДанныеДляИСМП - ТаблицаЗначений - данные для ИСМП
// Возвращаемое значение:
// 	Массив - Описание
Функция ПараметрыФискальныхСтрокЧека(ПредметыРасчетов, ДанныеДляИСМП, ПараметрыФискальногоЧека)
	
	ВерсияФФД               = ПараметрыФискальногоЧека.ВерсияФФД;
	ИдентификаторУстройства = ПараметрыФискальногоЧека.ИдентификаторУстройства;
	ВалютаВрем              = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ПараметрыФискальногоЧека.Организация);
	
	ПозицииЧека = Новый Массив;
	
	Для Каждого ПредметРасчета Из ПредметыРасчетов Цикл
		
		МассивСтрокДляДобавленияВЧек = Новый Массив;
		МассивСтрокДляДобавленияВЧек.Добавить(ПредметРасчета);
		
		Для Каждого СтрокаДляДобавленияВЧек из МассивСтрокДляДобавленияВЧек Цикл
			
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
			СтрокаПозицииЧека.Вставить("РезультатРаспределенияВрем");
			
			СтрокаПозицииЧека.НомерСтрокиТовара = ПредметРасчета.НомерСтроки;
			СтрокаПозицииЧека.НомерСекции = 1;
			
			СтрокаПозицииЧека.Наименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ПредметРасчета.НоменклатураНаименование,
				ПредметРасчета.ХарактеристикаНаименование);
			
			Упаковка = ПредметРасчета.Упаковка;
			
			Если НЕ ЗначениеЗаполнено(Упаковка) Тогда
				Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ПредметРасчета, "БазоваяУпаковка") Тогда
					Упаковка = ПредметРасчета.БазоваяУпаковка;
				Иначе
					Упаковка = "шт.";
				КонецЕсли;
			КонецЕсли;
			
			Если ВерсияФФД = "1.2" Тогда
				СтрокаПозицииЧека.КодЕдиницыИзмерения = РозничныеПродажи.КодЕдиницыИзмеренияПараметраЧека(Упаковка);
			Иначе
				СтрокаПозицииЧека.ЕдиницаИзмерения = СокрЛП(Упаковка);
			КонецЕсли;
			
			
			СтрокаПозицииЧека.Количество = ?(СтрокаДляДобавленияВЧек.КоличествоУпаковок = 0, 1, СтрокаДляДобавленияВЧек.КоличествоУпаковок);
			СтрокаПозицииЧека.Цена       = ПредметРасчета.Цена;
			СтрокаПозицииЧека.СтавкаНДС  = РозничныеПродажиКлиентСервер.СтавкаНДСФискальнойОперации(ПредметРасчета.СтавкаНДС);
			СтрокаПозицииЧека.Сумма      = СтрокаДляДобавленияВЧек.СуммаСНДС;
			
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаДляДобавленияВЧек, "СуммаНДС")
				И (ТипЗнч(СтрокаДляДобавленияВЧек.СуммаНДС) = Тип("Число") И СтрокаДляДобавленияВЧек.СуммаНДС > 0) Тогда
				
				СтрокаПозицииЧека.СуммаНДС = СтрокаДляДобавленияВЧек.СуммаНДС;
			КонецЕсли;
			
			Если СтрокаПозицииЧека.Количество <> 0
				И СтрокаПозицииЧека.СуммаСкидок <> 0 Тогда
				СтрокаПозицииЧека.ЦенаСоСкидками = Окр(СтрокаПозицииЧека.Сумма / СтрокаПозицииЧека.Количество, 2);
			Иначе
				СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаПозицииЧека.Цена;
			КонецЕсли;
			СтрокаПозицииЧека.СуммаСкидок = СтрокаДляДобавленияВЧек.СуммаСкидки;
			
			СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки                          = Неопределено;
			СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак       = Неопределено;
			СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = Неопределено;
			СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер                          = Неопределено;
			
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаДляДобавленияВЧек, "Штрихкод")
				И ЗначениеЗаполнено(СтрокаДляДобавленияВЧек.Штрихкод) Тогда
				СтрокаПозицииЧека.Штрихкод = СтрокаДляДобавленияВЧек.Штрихкод;
				
				Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаДляДобавленияВЧек, "РезультатРаспределения")
					И ЗначениеЗаполнено(СтрокаДляДобавленияВЧек.РезультатРаспределения) Тогда
					СтрокаПозицииЧека.РезультатРаспределенияВрем = СтрокаДляДобавленияВЧек.РезультатРаспределения;
					
					ПолныйКодМаркировки = СтрокаДляДобавленияВЧек.РезультатРаспределения.ПолныйКодМаркировки;
					Если ВерсияФФД = "1.2" И ЗначениеЗаполнено(ПолныйКодМаркировки) Тогда
						СтрокаПозицииЧека.ШтрихкодBase64 = СтрокаДляДобавленияВЧек.РезультатРаспределения.ПолныйКодМаркировки;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ИдентификаторУстройства)
						И МенеджерОборудованияВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(ИдентификаторУстройства) Тогда
						
						СтрокаПозицииЧека.КонтрольнаяМарка = ПолныйКодМаркировки;
						Если СтрокаДляДобавленияВЧек.РезультатРаспределения.ЧастичноеВыбытие Тогда
							СтрокаПозицииЧека.ДробноеКоличество.Числитель   = СтрокаДляДобавленияВЧек.РезультатРаспределения.ЧастичноеВыбытиеКоличество;
							СтрокаПозицииЧека.ДробноеКоличество.Знаменатель = СтрокаДляДобавленияВЧек.РезультатРаспределения.ЕмкостьПотребительскойУпаковки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаДляДобавленияВЧек, "ДополнениеКНаименованиюТовара")
					И ТипЗнч(СтрокаДляДобавленияВЧек.ДополнениеКНаименованиюТовара) = Тип("Структура") Тогда
					
					Если НЕ ЗначениеЗаполнено(Упаковка) Тогда
						Упаковка = "шт.";
					КонецЕсли;
					
					Если ВерсияФФД = "1.2" Тогда
						Если СтрокаПозицииЧека.РезультатРаспределенияВрем.ЧастичноеВыбытие
							ИЛИ ТипЗнч(Упаковка) = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения")
								И Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Упаковка, "") Тогда
							СтрокаПозицииЧека.КодЕдиницыИзмерения = РозничныеПродажи.КодЕдиницыИзмеренияПараметраЧека("шт.");
						Иначе
							СтрокаПозицииЧека.КодЕдиницыИзмерения = РозничныеПродажи.КодЕдиницыИзмеренияПараметраЧека(Упаковка);
						КонецЕсли;
					Иначе
						СтрокаПозицииЧека.ЕдиницаИзмерения = Упаковка;
					КонецЕсли;
					
					СтрокаПозицииЧека.Количество = 1;
					СтрокаПозицииЧека.Цена       = СтрокаПозицииЧека.Сумма;
					
					
					УпаковкаНаименование = "ед";
					Если ЗначениеЗаполнено(Упаковка) Тогда
						УпаковкаНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Наименование");
					КонецЕсли;
					УпаковкаНаименование = УпаковкаНаименование + ".";
					
					КоличествоЕдиниц = СтрокаДляДобавленияВЧек.ДополнениеКНаименованиюТовара.Количество;
					Если ТипЗнч(СтрокаДляДобавленияВЧек.ДополнениеКНаименованиюТовара.КоличествоУпаковок) = Тип("Число")
						И СтрокаДляДобавленияВЧек.ДополнениеКНаименованиюТовара.КоличествоУпаковок > 0 Тогда
						КоличествоЕдиниц = СтрокаДляДобавленияВЧек.ДополнениеКНаименованиюТовара.КоличествоУпаковок;
					КонецЕсли;
					
					
					ЦенаЕдиницы = СтрокаДляДобавленияВЧек.ДополнениеКНаименованиюТовара.Цена;
					Если СтрокаДляДобавленияВЧек.РезультатРаспределения.ЧастичноеВыбытие Тогда
						ЧастичноеВыбытиеКоличество = СтрокаДляДобавленияВЧек.РезультатРаспределения.ЧастичноеВыбытиеКоличество;
						ЦенаЕдиницы = Окр(СтрокаПозицииЧека.Цена / ЧастичноеВыбытиеКоличество, 2);
					Иначе
						ЦенаЕдиницы = Окр(СтрокаПозицииЧека.Цена / КоличествоЕдиниц, 2);
					КонецЕсли;
					
					СтрокаПозицииЧека.Наименование = СтрокаПозицииЧека.Наименование
							+ " (" + КоличествоЕдиниц + " " + УпаковкаНаименование
							+ ", цена: " + ЦенаЕдиницы + " " + Строка(ВалютаВрем) + "/" + УпаковкаНаименование + ")";
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаДляДобавленияВЧек, "КодВидаНоменклатурнойКлассификации") Тогда
				СтрокаПозицииЧека.КодВидаНоменклатурнойКлассификации = СтрокаДляДобавленияВЧек.КодВидаНоменклатурнойКлассификации;
			КонецЕсли;
			
			ЗаполнитьСтрокуПоДаннымРазбораШтрихкода(СтрокаПозицииЧека, СтрокаДляДобавленияВЧек);
			
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаДляДобавленияВЧек, "ТипЗапасов")
				И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаДляДобавленияВЧек, "Комитент")
				И СтрокаДляДобавленияВЧек.ТипЗапасов = Перечисления.ТипыЗапасов.КомиссионныйТовар Тогда
				
				РеквизитыКомитента = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(СтрокаДляДобавленияВЧек.Комитент, ТекущаяДатаСеанса());
				
				СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = Перечисления.ПризнакиАгента.Комиссионер;
				
				ДанныеПоставщика = Новый Структура();
				ДанныеПоставщика.Вставить("Телефон"	 	, РеквизитыКомитента.Телефоны);
				ДанныеПоставщика.Вставить("Наименование", РеквизитыКомитента.ПолноеНаименование);
				ДанныеПоставщика.Вставить("ИНН"		 	, РеквизитыКомитента.ИНН);
				
				СтрокаПозицииЧека.ДанныеПоставщика = ДанныеПоставщика; 
			КонецЕсли;
			
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаДляДобавленияВЧек, "ОсобенностьУчета")
				И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаДляДобавленияВЧек, "Агент")
				И (СтрокаДляДобавленияВЧек.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Партнером
					ИЛИ СтрокаДляДобавленияВЧек.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме)
				И ЗначениеЗаполнено(СтрокаДляДобавленияВЧек.Агент) Тогда
				
				РеквизитыКомитента = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(СтрокаДляДобавленияВЧек.Агент, ТекущаяДатаСеанса());
				
				СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = Перечисления.ПризнакиАгента.Агент;
				
				ДанныеПоставщика = Новый Структура();
				ДанныеПоставщика.Вставить("Телефон"	 	, РеквизитыКомитента.Телефоны);
				ДанныеПоставщика.Вставить("Наименование", РеквизитыКомитента.ПолноеНаименование);
				ДанныеПоставщика.Вставить("ИНН"		 	, РеквизитыКомитента.ИНН);
				
				СтрокаПозицииЧека.ДанныеПоставщика = ДанныеПоставщика; 
			КонецЕсли;
			
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаДляДобавленияВЧек, "ПодакцизныйТовар")
				И ВерсияФФД = "1.2"
				И СтрокаДляДобавленияВЧек.ПодакцизныйТовар = Истина Тогда
				
				СтрокаПозицииЧека.СуммаАкциза = 0;
			КонецЕсли;
			
			СтрокаПозицииЧека.ПризнакСпособаРасчета = Неопределено; // Заполняется из РМК или ПредпросмотраЧека
			
			СтрокаПозицииЧека.ПризнакПредметаРасчета = РозничныеПродажиКлиентСервер.ПризнакПредметаРасчетаФискальнойОперации(
				ПредметРасчета.ТипНоменклатуры,
				ПредметРасчета.ПодакцизныйТовар);
			
			ДанныеПоИмпортнойПоставке = Новый Структура("НомерТаможеннойДекларации, КодСтраныПроисхождения", Неопределено, Неопределено);
			ЗаполнитьЗначенияСвойств(ДанныеПоИмпортнойПоставке, ПредметРасчета);
			
			СтрокаПозицииЧека.НомерТаможеннойДекларации = ДанныеПоИмпортнойПоставке.НомерТаможеннойДекларации; 
			СтрокаПозицииЧека.КодСтраныПроисхожденияТовара = ДанныеПоИмпортнойПоставке.КодСтраныПроисхождения;
			
			ПозицииЧека.Добавить(СтрокаПозицииЧека);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПозицииЧека;
	
КонецФункции

Процедура ЗаполнитьСтрокуПоДаннымРазбораШтрихкода(СтрокаПозицииЧека, СтрокаДляДобавленияВЧек)
	
	ВидПродукции = Неопределено;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаДляДобавленияВЧек, "ОсобенностьУчета")
		И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаДляДобавленияВЧек, "Штрихкод")
		И ЗначениеЗаполнено(СтрокаДляДобавленияВЧек.ОсобенностьУчета)
		И ЗначениеЗаполнено(СтрокаДляДобавленияВЧек.Штрихкод) Тогда
		ВидПродукции = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(СтрокаДляДобавленияВЧек.ОсобенностьУчета);
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(ВидПродукции) Или Не ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(ВидПродукции)) Тогда
		Возврат;
	КонецЕсли;
	
	ТипМаркировкиККТ = ИнтеграцияИСКлиентСервер.ТипМаркировкиККТПоВидуПродукции(ВидПродукции);
	Если Не ЗначениеЗаполнено(ТипМаркировкиККТ) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(СтрокаДляДобавленияВЧек.Штрихкод, ВидПродукции);
	Если ДанныеРазбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПозицииЧека.Штрихкод                                                              = СтрокаДляДобавленияВЧек.Штрихкод;
	СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки                          = ТипМаркировкиККТ;
	СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = ДанныеРазбора.СоставКодаМаркировки.GTIN;
	СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер                          = ДанныеРазбора.СоставКодаМаркировки.СерийныйНомер;
	
КонецПроцедуры

Процедура ДополнитьПараметрыФискальногоЧекаПозицийЧекаПоДокументамОплатыАванс(ПараметрыФискальногоЧека, ПозицииЧека, СуммыАвансовПоСтавкамНДС)
	
	ПривестиДанныеКТребуемомуФорматуПозицийЧекаПоДокументамОплатыАванс(ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФискальногоЧека), ПозицииЧека, СуммыАвансовПоСтавкамНДС);
	
КонецПроцедуры
	
Процедура ПривестиДанныеКТребуемомуФорматуПозицийЧекаПоДокументамОплатыАванс(Знач ПараметрыФискальногоЧека, ПозицииЧека, СуммыАвансовПоСтавкамНДС)
	
	ПозицииЧекаДляПриведенияКФормату = Новый Массив;
	
	ПараметрыФискальногоЧека.ПозицииЧека = Новый Массив();
	ПараметрыФискальногоЧека.ТаблицаОплат = Новый Массив();
	ОбновитьПараметрыФискальногоЧекаПозицийЧекаПоДокументамОплатыАвансДляПриведенияКФормату(ПараметрыФискальногоЧека, ПозицииЧекаДляПриведенияКФормату, СуммыАвансовПоСтавкамНДС);
	ПараметрыФискальногоЧекаЗаполнитьПозицииЧека(ПараметрыФискальногоЧека, ПозицииЧекаДляПриведенияКФормату);
	
	ТаблицаОплат = Новый Массив();
	ДобавитьВТаблицуОплат(ТаблицаОплат, Перечисления.ТипыОплатыККТ.Наличные, СуммыАвансовПоСтавкамНДС.Итог("Сумма"));
	
	ПараметрыФискальногоЧекаЗаполнитьТаблицуОплат(ПараметрыФискальногоЧека, ТаблицаОплат);
	
	Отказ = Ложь;
	ПараметрыФискальногоЧека.Вставить("СпособФорматноЛогическогоКонтроля", Перечисления.СпособыФорматноЛогическогоКонтроля.РазделятьСтроки);
	МенеджерОборудованияВызовСервера.ПривестиДанныеКТребуемомуФормату(ПараметрыФискальногоЧека, Отказ, "", Ложь);
	
	Для Каждого ПозицияЧека Из ПараметрыФискальногоЧека.ПозицииЧека Цикл
		ПозицииЧека.Добавить(ПозицияЧека);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПараметрыФискальногоЧекаПозицийЧекаПоДокументамОплатыАвансДляПриведенияКФормату(ПараметрыФискальногоЧека, ПозицииЧека, СуммыАвансовПоСтавкамНДС)
	
	ДокументСсылка = ПараметрыФискальногоЧека.ДокументОснование;
	КлиентАвансовогоПлатежаНаименование = КлиентАвансовогоПлатежаНаименование(ДокументСсылка);
	ТипРасчетаДенежнымиСредствами = ПараметрыФискальногоЧека.ТипРасчета;
	
	Для Каждого СуммаАванса Из СуммыАвансовПоСтавкамНДС Цикл
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.Аванс;
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		
		НаименованиеОплаты = "";
		
		Если ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств
			ИЛИ ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств Тогда
			
			Если ДокументБезналичнойОплаты(ДокументСсылка) Тогда
				НаименованиеОплаты = НСтр("ru = 'Оплата картой от:'");
			Иначе
				НаименованиеОплаты = НСтр("ru = 'Оплата от:'");
			КонецЕсли;
		Иначе
			НаименованиеОплаты = НСтр("ru = 'Выдано:'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КлиентАвансовогоПлатежаНаименование) Тогда
			СтрокаПозицииЧека.Наименование = НаименованиеОплаты + " " + КлиентАвансовогоПлатежаНаименование;
		Иначе
			СтрокаПозицииЧека.Наименование = НаименованиеОплаты;
		КонецЕсли;
		
		СтрокаПозицииЧека.Количество   = 1;
		
		СтрокаПозицииЧека.Цена         = СуммаАванса.Сумма;
		
		Если Не ЗначениеЗаполнено(СуммаАванса.СтавкаНДС) Тогда
			СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
			СтрокаПозицииЧека.СтавкаНДС = РозничныеПродажиКлиентСервер.СтавкаНДСФискальнойОперации(СтавкаНДС);
		Иначе
			СтрокаПозицииЧека.СтавкаНДС    = РозничныеПродажиКлиентСервер.СтавкаНДСФискальнойОперации(СуммаАванса.СтавкаНДС);
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СуммаАванса, "СуммаНДС")
			И ЗначениеЗаполнено(СуммаАванса.СуммаНДС) Тогда
			
			СтрокаПозицииЧека.СуммаНДС = СуммаАванса.СуммаНДС;
		КонецЕсли;
		
		СтрокаПозицииЧека.Сумма          = СуммаАванса.Сумма;
		СтрокаПозицииЧека.ЦенаСоСкидками = СуммаАванса.Сумма;
		СтрокаПозицииЧека.СуммаСкидок	 = 0;
		
		СтрокаПозицииЧека.НомерСекции  = 2;
		
		ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПараметрыФискальногоЧекаПозицийЧекаПоДокументамОплатыСНоменклатурнымиПозициями(ПараметрыФискальногоЧека, ПозицииЧека, ОбъектРасчетовСПризнакомСпособаРасчетов, ИмяКомандыПробитияЧека)
	
	ОбъектРасчетов = ОбъектРасчетовСПризнакомСпособаРасчетов.ОбъектРасчетов;
	ПризнакСпособаРасчета = ОбъектРасчетовСПризнакомСпособаРасчетов.ПризнакСпособаРасчета;
	Сумма = ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма;
	
	Попытка
		ПозицииНоменклатуры = ФормированиеПараметровФискальногоЧекаСервер.ПозицииНоменклатурыПоДокументу(ОбъектРасчетов);
		
		ПривестиДанныеКТребуемомуФорматуПозицийЧекаПоДокументамОплатыСНоменклатурнымиПозициями(ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФискальногоЧека), ПризнакСпособаРасчета, ПозицииЧека, ПозицииНоменклатуры, Сумма);
	Исключение
		СтавкиНДСПоОбъектуРасчетов = ФормированиеФискальныхЧековСерверПереопределяемый.СтавкиНДСПоОбъектуРасчетовПоДокументуОплаты(
			ПараметрыФискальногоЧека.ДокументОснование,
			ОбъектРасчетов,
			ПараметрыФискальногоЧека.СистемаНалогообложения,
			ИмяКомандыПробитияЧека);
		
		Для Каждого СтавкаНДСПоОбъектуРасчетов Из СтавкиНДСПоОбъектуРасчетов Цикл
			ПривестиДанныеКТребуемомуФорматуПозицийЧекаПоДокументамОплатыВсяСуммаОднойПозициейНеАванс(ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФискальногоЧека), ПризнакСпособаРасчета, ПозицииЧека, СтавкаНДСПоОбъектуРасчетов.СтавкаНДС, СтавкаНДСПоОбъектуРасчетов.Сумма);
		КонецЦикла;
	КонецПопытки;
	
КонецПроцедуры
	
Процедура ПривестиДанныеКТребуемомуФорматуПозицийЧекаПоДокументамОплатыСНоменклатурнымиПозициями(Знач ПараметрыФискальногоЧека, ПризнакСпособаРасчета, ПозицииЧека, ПозицииНоменклатуры, СуммаОплаты)
	
	ПозицииЧекаДляПриведенияКФормату = Новый Массив;
	
	ПараметрыФискальногоЧека.ПозицииЧека = Новый Массив();
	ПараметрыФискальногоЧека.ТаблицаОплат = Новый Массив();
	ОбновитьПараметрыФискальногоЧекаПозицийЧекаПоДокументамОплатыСНоменклатурнымиПозициямиДляПриведенияКФормату(ПараметрыФискальногоЧека, ПозицииЧекаДляПриведенияКФормату, ПозицииНоменклатуры, ПризнакСпособаРасчета);
	ПараметрыФискальногоЧекаЗаполнитьПозицииЧека(ПараметрыФискальногоЧека, ПозицииЧекаДляПриведенияКФормату);
	
	ТаблицаОплат = Новый Массив();
	ДобавитьВТаблицуОплат(ТаблицаОплат, Перечисления.ТипыОплатыККТ.Наличные, СуммаОплаты);
	
	ПараметрыФискальногоЧекаЗаполнитьТаблицуОплат(ПараметрыФискальногоЧека, ТаблицаОплат);
	
	Отказ = Ложь;
	ПараметрыФискальногоЧека.Вставить("СпособФорматноЛогическогоКонтроля", Перечисления.СпособыФорматноЛогическогоКонтроля.РазделятьСтроки);
	МенеджерОборудованияВызовСервера.ПривестиДанныеКТребуемомуФормату(ПараметрыФискальногоЧека, Отказ, "", Ложь);
	
	Для Каждого ПозицияЧека Из ПараметрыФискальногоЧека.ПозицииЧека Цикл
		ПозицииЧека.Добавить(ПозицияЧека);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПараметрыФискальногоЧекаПозицийЧекаПоДокументамОплатыСНоменклатурнымиПозициямиДляПриведенияКФормату(ПараметрыФискальногоЧека, ПозицииЧека, ПозицииНоменклатуры, ПризнакСпособаРасчета)
	
	Для Каждого СтрокаПозицииНоменклатуры Из ПозицииНоменклатуры Цикл
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = ПризнакСпособаРасчета;
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		
		СтрокаПозицииЧека.Наименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаПозицииНоменклатуры.НоменклатураНаименование,
			СтрокаПозицииНоменклатуры.ХарактеристикаНаименование);
		
		Упаковка = СтрокаПозицииНоменклатуры.Упаковка;
		
		Если НЕ ЗначениеЗаполнено(Упаковка) Тогда
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаПозицииНоменклатуры, "БазоваяУпаковка") Тогда
				Упаковка = СтрокаПозицииНоменклатуры.БазоваяУпаковка;
			Иначе
				Упаковка = "шт.";
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыФискальногоЧека.ВерсияФФД = "1.2" Тогда
			СтрокаПозицииЧека.КодЕдиницыИзмерения = РозничныеПродажи.КодЕдиницыИзмеренияПараметраЧека(Упаковка);
		Иначе
			СтрокаПозицииЧека.ЕдиницаИзмерения = СокрЛП(Упаковка);
		КонецЕсли;
		
		
		СтрокаПозицииЧека.Количество	 = СтрокаПозицииНоменклатуры.Количество;
		СтрокаПозицииЧека.Цена			 = СтрокаПозицииНоменклатуры.Цена;
		СтрокаПозицииЧека.СтавкаНДС		 = РозничныеПродажиКлиентСервер.СтавкаНДСФискальнойОперации(СтрокаПозицииНоменклатуры.СтавкаНДС);
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаПозицииНоменклатуры, "СуммаНДС") Тогда
			СтрокаПозицииЧека.СуммаНДС = СтрокаПозицииНоменклатуры.СуммаНДС;
		КонецЕсли;
		
		СтрокаПозицииЧека.Сумма          = СтрокаПозицииНоменклатуры.Сумма;
		СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаПозицииНоменклатуры.Цена;
		СтрокаПозицииЧека.СуммаСкидок	 = 0;
		
		СтрокаПозицииЧека.НомерСекции  = 1;
		
		ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	КонецЦикла;
	
КонецПроцедуры
	
Процедура ПривестиДанныеКТребуемомуФорматуПозицийЧекаПоДокументамОплатыВсяСуммаОднойПозициейНеАванс(Знач ПараметрыФискальногоЧека, ПризнакСпособаРасчета, ПозицииЧека, СтавкаНДС, СуммаОплаты)
	
	ПозицииЧекаДляПриведенияКФормату = Новый Массив;
	
	ПараметрыФискальногоЧека.ПозицииЧека = Новый Массив();
	ПараметрыФискальногоЧека.ТаблицаОплат = Новый Массив();
	ОбновитьПараметрыФискальногоЧекаПозицийЧекаПоДокументамОплатыВсяСуммаОднойПозициейНеАвансДляПриведенияКФормату(ПараметрыФискальногоЧека, ПризнакСпособаРасчета, ПозицииЧекаДляПриведенияКФормату, СтавкаНДС, СуммаОплаты);
	ПараметрыФискальногоЧекаЗаполнитьПозицииЧека(ПараметрыФискальногоЧека, ПозицииЧекаДляПриведенияКФормату);
	
	ТаблицаОплат = Новый Массив();
	ДобавитьВТаблицуОплат(ТаблицаОплат, Перечисления.ТипыОплатыККТ.Наличные, СуммаОплаты);
	
	ПараметрыФискальногоЧекаЗаполнитьТаблицуОплат(ПараметрыФискальногоЧека, ТаблицаОплат);
	
	Отказ = Ложь;
	ПараметрыФискальногоЧека.Вставить("СпособФорматноЛогическогоКонтроля", Перечисления.СпособыФорматноЛогическогоКонтроля.РазделятьСтроки);
	МенеджерОборудованияВызовСервера.ПривестиДанныеКТребуемомуФормату(ПараметрыФискальногоЧека, Отказ, "", Ложь);
	
	Для Каждого ПозицияЧека Из ПараметрыФискальногоЧека.ПозицииЧека Цикл
		ПозицииЧека.Добавить(ПозицияЧека);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПараметрыФискальногоЧекаПозицийЧекаПоДокументамОплатыВсяСуммаОднойПозициейНеАвансДляПриведенияКФормату(ПараметрыФискальногоЧека, ПризнакСпособаРасчета, ПозицииЧека, СтавкаНДС, СуммаОплаты)
	
	ДокументСсылка = ПараметрыФискальногоЧека.ДокументОснование;
	ПолучательНаименование = ПараметрыФискальногоЧека.Получатель;
	ТипРасчетаДенежнымиСредствами = ПараметрыФискальногоЧека.ТипРасчета;
	
	НаименованиеОплаты = "";
	Если ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств
		ИЛИ ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств Тогда
		
		Если ДокументБезналичнойОплаты(ДокументСсылка) Тогда
			НаименованиеОплаты = НСтр("ru = 'Оплата картой от:'");
		Иначе
			НаименованиеОплаты = НСтр("ru = 'Оплата от:'");
		КонецЕсли;
		
		НаименованиеОплаты = НаименованиеОплаты + " " + ПолучательНаименование;
	Иначе
		НаименованиеОплаты = НСтр("ru = 'Выдано:'") + " " + ПолучательНаименование;
	КонецЕсли;
	
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
	
	СтрокаПозицииЧека.ПризнакСпособаРасчета  = ПризнакСпособаРасчета;
	СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
	
	СтрокаПозицииЧека.Наименование = НаименованиеОплаты;
	
	СтрокаПозицииЧека.Количество	 = 1;
	СтрокаПозицииЧека.Цена			 = СуммаОплаты;
	СтрокаПозицииЧека.СтавкаНДС		 = РозничныеПродажиКлиентСервер.СтавкаНДСФискальнойОперации(СтавкаНДС);
	
	СтрокаПозицииЧека.Сумма          = СуммаОплаты;
	СтрокаПозицииЧека.ЦенаСоСкидками = СуммаОплаты;
	СтрокаПозицииЧека.СуммаСкидок	 = 0;
	
	СтрокаПозицииЧека.НомерСекции  = 1;
	
	ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
КонецПроцедуры

Процедура ДобавитьВТаблицуОплат(ТаблицаОплат, ТипОплаты, Сумма)
	
	СтрокаОплаты = Новый Структура();
	СтрокаОплаты.Вставить("ТипОплаты", ТипОплаты);
	СтрокаОплаты.Вставить("Сумма", Сумма);
	
	ТаблицаОплат.Добавить(СтрокаОплаты);
	
КонецПроцедуры

Функция ТипОплатыККТПоДокументуОплаты(ДокументОплаты)
	
	ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
	Если ДокументБезналичнойОплаты(ДокументОплаты) Тогда
		ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно;
	ИначеЕсли ТипЗнч(ДокументОплаты) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление;
	КонецЕсли;
	
	Возврат ТипОплаты;
	
КонецФункции

Функция ТекстЗапросаПоВнереализационнойПрибылиДляФискализации()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОплатаПодарочнымСертификатом.Сумма КАК Сумма
	|ПОМЕСТИТЬ ОплатаПодарочнымСертификатом
	|ИЗ
	|	&ОплатаПодарочнымСертификатом КАК ОплатаПодарочнымСертификатом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ОплатаПодарочнымСертификатом.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ОплатаПодарочнымСертификатомИтого
	|ИЗ
	|	ОплатаПодарочнымСертификатом КАК ОплатаПодарочнымСертификатом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПогашениеПодарочныхСертификатов.ПодарочныйСертификат КАК ПодарочныйСертификат
	|ПОМЕСТИТЬ ПогашениеПодарочныхСертификатов
	|ИЗ
	|	&ПогашениеПодарочныхСертификатов КАК ПогашениеПодарочныхСертификатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВидыПодарочныхСертификатов.Номинал) КАК Номинал
	|ПОМЕСТИТЬ ПогашениеПоОрганизациям
	|ИЗ
	|	ПогашениеПодарочныхСертификатов КАК ПогашениеПодарочныхСертификатов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов
	|			ПО ПодарочныеСертификаты.Владелец = ВидыПодарочныхСертификатов.Ссылка
	|				И НЕ ВидыПодарочныхСертификатов.ЧастичнаяОплата
	|		ПО ПогашениеПодарочныхСертификатов.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПодарочнымСертификатомИтого.Сумма КАК Сумма,
	|	ПогашениеПоОрганизациям.Номинал КАК Номинал,
	|	ПогашениеПоОрганизациям.Номинал - ОплатаПодарочнымСертификатомИтого.Сумма КАК Разница
	|ИЗ
	|	ОплатаПодарочнымСертификатомИтого КАК ОплатаПодарочнымСертификатомИтого
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПогашениеПоОрганизациям КАК ПогашениеПоОрганизациям
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ОплатаПодарочнымСертификатомИтого.Сумма < ПогашениеПоОрганизациям.Номинал";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Определяет, является ли документ документом безналичной оплаты
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Проверяемый документ
// Возвращаемое значение:
// 	Булево - флаг, является ли документ документом безналичной оплаты, да = истина, нет = ложь
Функция ДокументБезналичнойОплаты(ДокументСсылка)
	
	ДокументБезналичнойОплаты = Ложь;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияПоЯндексКассе")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		ДокументБезналичнойОплаты = Истина;
	КонецЕсли;
	
	Возврат ДокументБезналичнойОплаты; 
	
КонецФункции

//-- Локализация

#КонецОбласти
