#Область СлужебныйПрограммныйИнтерфейс

#Область СерииНоменклатуры

// Процедура обновляет кеш ключевых реквизитов текущей строки товаров. По ключевым реквизитам осуществляется связь
//  между ТЧ серий и ТЧ товаров.
//
// Параметры:
// 
//  ТаблицаФормы - ТаблицаФормы - таблица, в которой отображается ТЧ с товарами.
//  КэшированныеЗначения - Структура - переменная модуля формы, в которой хранятся кешируемые значения.
//  ПараметрыУказанияСерий - ФормаКлиентскогоПриложения, Структура - 
//     управляемая форма содержащая структуру или непосредственно структура параметров указания серий.
//  Копирование - Булево - признак, что кешированная строка скопирована (параметр события ПриНачалеРедактирования).
Процедура ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий = "", Копирование = Ложь) Экспорт
	
	//++ НЕ ГОСИС
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,
		КэшированныеЗначения,
		?(ТипЗнч(ПараметрыУказанияСерий) = Тип("ФормаКлиентскогоПриложения"),ПараметрыУказанияСерий.ПараметрыУказанияСерий,ПараметрыУказанияСерий),
		Копирование);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Процедура проверяет необходимость обновления статусов указания серий при окончании редактирования строки товаров.
//
// Параметры:
//  Обновить - Булево - (исходящий) - необходимость обновления статусов указания серий;
//  Форма   - ФормаКлиентскогоПриложения - форма-источник вызова;
//  Элемент - ТаблицаФормы	 - таблица формы, отображающая ТЧ товаров;
//  КэшированныеЗначения - Структура   - переменная модуля формы, в которой хранятся кешируемые значения;
//  ПараметрыУказанияСерий - Структура - параметры указания серий, возвращаемые соответствующей процедурой
//                                       модуля менеджера документа;
//  Удаление - Булево, Истина - признак, что проверка вызывается при удалении строки ТЧ.
//
Процедура УстановитьОбновитьСтатусыСерий(Обновить, Форма, Элемент, КэшированныеЗначения, ПараметрыУказанияСерий = "", Удаление) Экспорт
	
	//++ НЕ ГОСИС
	
	Если ПараметрыУказанияСерий = "" Тогда
		ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
	КонецЕсли;
	
	Обновить = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Удаление);
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// процедура получает параметры указания серий в форме конфигурации.
//
// Параметры:
//  ПараметрыУказанияСерий - Произвольный               - (исходящий) параметры указания серий формы.
//  Форма                  - ФормаКлиентскогоПриложения - форма, для которой инициировано получение параметров указания серий.
//
Процедура ПриПолученииПараметровУказанияСерий(ПараметрыУказанияСерий, Форма) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// процедура проверяет необходимость указания серий в строке, если возможно, открывает форму указания,
//  если форма указания не требует контекстного вызова сервера.
//
// Параметры:
//  Нужен                  - Булево              - (исходящий) признак необходимости контекстного вызова сервера;
//  Форма                  - ФормаКлиентскогоПриложения    - форма документа, в которой инициировано указание серий;
//  ПараметрыУказанияСерий - Произвольный        - параметры указания серий строки;
//  Текст                  - Строка              - текст, введенный в поле ввода (параметр событий ОкончаниеВводаТекста 
//                                                 и АвтоПодборВводаТекста).
//  ТекущиеДанные          - Структура, ДанныеФормыЭлементКоллекции - данные строки, в которой указывается серия,
//                         - Неопределено        - текущие данные табличного поля с именем ПараметрыУказанияСерий.ИмяТЧТовары;
//  СтандартнаяОбработка   - Булево              - открытие формы выбора серий по умолчанию.
//
Процедура ЗаполнитьДляУказанияСерийНуженСерверныйВызов(
	Нужен, Форма, ПараметрыУказанияСерий, Текст, ТекущиеДанные, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	СтандартнаяОбработка = Ложь;
	ПараметрыУказанияСерийКопия = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыУказанияСерий, Ложь);
	Если Форма.ИмяФормы = "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор"
			Или Форма.ИмяФормы = "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор" Тогда
		Если ПараметрыУказанияСерийКопия <> Неопределено Тогда
			Если ПараметрыУказанияСерийКопия.Свойство("ВыходныеИзделия") Тогда
				ПараметрыУказанияСерийКопия = ПараметрыУказанияСерийКопия.ВыходныеИзделия;
			КонецЕсли;
			ПараметрыУказанияСерийКопия.ИмяИсточникаЗначенийВФормеОбъекта = "ТекущиеДанные";
			ТекущиеДанные.Ссылка = Форма.ПроверяемыйДокумент;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные) = Тип("ФормаКлиентскогоПриложения") Тогда 
		ТекущиеДанныеСтруктура = Новый Структура("Номенклатура,Характеристика,Серия,
		|	Склад,СтатусУказанияСерий,ХарактеристикиИспользуются,
		|	НоменклатураОприходование,ХарактеристикаОприходование,Назначение,Помещение");
		ЗаполнитьЗначенияСвойств(ТекущиеДанныеСтруктура, Форма);
		ТекущиеДанныеСтруктура.Вставить("ИдентификаторТекущейСтроки", 0);
		ТекущиеДанныеСтруктура.Вставить("Количество", 1);
	Иначе 
		ТекущиеДанныеСтруктура = ТекущиеДанные;
	КонецЕсли;
	
	Нужен = НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(Форма, ПараметрыУказанияСерийКопия, Текст, ТекущиеДанныеСтруктура);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПрикладныеКлассификаторы

// Открывает форму списка видов номенклатуры.
//
Процедура ОткрытьФормуСпискаВидыНоменклатуры(ВладелецФормы) Экспорт
	
	//++ НЕ ГОСИС
	ОткрытьФорму("Справочник.ВидыНоменклатуры.ФормаСписка", , ВладелецФормы);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Открывает форму списка номенклатуры.
//
Процедура ОткрытьФормуСпискаНоменклатуры(ВладелецФормы) Экспорт
	
	//++ НЕ ГОСИС
	ОткрытьФорму("Справочник.Номенклатура.ФормаСписка", , ВладелецФормы);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Обработчик специфических сценариев записи объекта в форме (например, после дополнительных ответов пользователя)
//   При переопределении действия:
//     ** Вызвать обработчик ДействиеПослеЗаписи после окончания записи
//     ** Установить признак СтандартнаяОбработка в значение Ложь
//
// Параметры:
//   Форма                - ФормаКлиентскогоПриложения     - источник события записи
//   Объект               - ДанныеФормыСтруктура - записываемый из формы объект
//   ДействиеПослеЗаписи  - ОписаниеОповещения   - действие которое требуется выполнить после записи объекта из формы
//   СтандартнаяОбработка - Булево               - признак стандартной обработки события (запись без блокирующих вызовов)
//
Процедура ВыполнитьЗаписьОбъектаВФорме(Форма, Объект, ДействиеПослеЗаписи, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	СтандартнаяОбработка = Ложь;
	Если Объект.Проведен Тогда
		ОбщегоНазначенияУТКлиент.Провести(Форма, Истина, ДействиеПослеЗаписи);
	Иначе
		ОбщегоНазначенияУТКлиент.Записать(Форма, Истина, ДействиеПослеЗаписи);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
