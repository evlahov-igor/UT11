#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Взаиморасчеты

// Создает и заполняет/удаляет элементы справочника "Объекты расчетов" перед записью связанного объекта.
// Для платежных документов создание происходит раньше, в методе ВзаиморасчетыСервер.ПроверитьЗаполнитьРасшифровкуПлатежа.
//
// Параметры:
// 	Объект - СправочникОбъект, ДокументОбъект - Записываемый объект.
// 	МассивСтруктур - Массив из см. ВзаиморасчетыСервер.ПараметрыМеханизма - Массив структур параметров взаиморасчетов.
// 	РежимЗаписи - РежимЗаписиДокумента - Режим записи, если метод вызывается из события ПередЗаписью.
// 	Отказ - Булево - Флаг Отказ из объекта.
//
Процедура ПроверитьОбъектыРасчетовПередЗаписью(Объект, МассивСтруктур, РежимЗаписи, Отказ) Экспорт
	
	// Очистка объекта от ссылок на объекты расчетов.
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ОчиститьОбъектыРасчетов(Объект,МассивСтруктур);
	КонецЕсли;
	
	// Удаление лишних элементов справочника.
	МассивОбъектовРасшифровки = Новый Массив();
	
	Ссылка = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, "Объект.Ссылка");
	ТаблицаСторон = ТаблицаСторон(Объект, МассивСтруктур);
	Для Каждого СтруктураПараметров Из МассивСтруктур Цикл
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
			Расшифровка = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОбъектовРасшифровки, Расшифровка.Выгрузить().ВыгрузитьКолонку("ОбъектРасчетов"));
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("СсылкаНового") Тогда
			Ссылка = СтруктураПараметров.СсылкаНового;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаСторон.Организация КАК Организация,
	|	ТаблицаСторон.Контрагент  КАК Контрагент,
	|	ТаблицаСторон.Партнер     КАК Партнер,
	|	ТаблицаСторон.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаСторон.ТипРасчетов КАК ТипРасчетов
	|ПОМЕСТИТЬ ТаблицаСторон
	|ИЗ &ТаблицаСторон КАК ТаблицаСторон
	|;
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Ссылка КАК Ссылка,
	|	ОбъектыРасчетов.ТолькоОстатки КАК ТолькоОстатки
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСторон КАК ТаблицаСторон
	|			ПО ТаблицаСторон.Организация = ОбъектыРасчетов.Организация
	|				И ТаблицаСторон.ТипРасчетов = ОбъектыРасчетов.ТипРасчетов
	|				И ТаблицаСторон.Контрагент = ОбъектыРасчетов.Контрагент
	|				И ТаблицаСторон.Партнер = ОбъектыРасчетов.Партнер
	|				И ТаблицаСторон.ВалютаВзаиморасчетов = ОбъектыРасчетов.ВалютаВзаиморасчетов
	|				И НЕ ОбъектыРасчетов.ТолькоОстатки
	|ГДЕ
	|	ОбъектыРасчетов.Объект = &Ссылка
	|	И ТаблицаСторон.ТипРасчетов ЕСТЬ NULL
	|	И ОбъектыРасчетов.Ссылка НЕ В (&МассивОбъектовРасшифровки)");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТаблицаСторон", ТаблицаСторон);
	Запрос.УстановитьПараметр("МассивОбъектовРасшифровки", МассивОбъектовРасшифровки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ОбъектыРасчетов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		Блокировка.Заблокировать();
		
		ПроверитьУдалитьОбъектРасчетов(Выборка.Ссылка, Отказ, НЕ Выборка.ТолькоОстатки);
	КонецЦикла;
	
	//Создание элементов справочника 
	Для Каждого СтруктураПараметров Из МассивСтруктур Цикл
		Если СсылкаЯвляетсяОбъектомРасчетов(Объект, СтруктураПараметров) Тогда
			ПроверитьЗаполнитьОбъектРасчетовПоСтруктуре(Объект, СтруктураПараметров,,РежимЗаписи);
		ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
			
			РасшифровкаПлатежа = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
			ТребуетсяОбъектРасчетов = Ложь;
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Расшифровка.ОбъектРасчетов
			|ПОМЕСТИТЬ Расшифровка
			|ИЗ &Расшифровка КАК Расшифровка
			|;
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Расшифровка
			|ГДЕ
			|	Расшифровка.ОбъектРасчетов.Объект = &Ссылка";
			Запрос.УстановитьПараметр("Расшифровка", РасшифровкаПлатежа);
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			ТребуетсяОбъектРасчетов = Выборка.Следующий();
			
			Если ТребуетсяОбъектРасчетов Тогда
				ПроверитьЗаполнитьОбъектРасчетовПоСтруктуре(Объект, СтруктураПараметров, Истина, РежимЗаписи);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	//Заполнение
	Если НЕ Отказ И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		ЗаполнитьОбъектРасчетов(Объект, МассивСтруктур,, РежимЗаписи);
	КонецЕсли;
	
КонецПроцедуры

// Создает, перезаполняет при необходимости и возвращает ссылку на объект расчетов по параметрам механизма взаиморасчетов.
// Если в рамках одной структуры было создано несколько элементов объектов расчетов то возвращает первый.
// 
// Параметры:
// 	Объект - ДокументОбъект, СправочникОбъект - Объект, по ссылке на который проверяется объект расчетов.
// 	СтруктураПараметров - Структура - Текущий набор параметров. см. ВзаиморасчетыСервер.ПараметрыМеханизма().
// 	ВернутьВсеОбъекты - Булево - Вернуть один объект расчетов или таблицу всех объектов расчетов.
// 	РежимЗаписи - РежимЗаписиДокумента - Режим записи, если метод вызывается из события ПередЗаписью.
// 	
// Возвращаемое значение:
// 	СправочникСсылка.ОбъектыРасчетов - Ссылка на объект расчетов.
//
Функция ПроверитьЗаполнитьОбъектРасчетовПоСтруктуре(Объект, СтруктураПараметров, ВернутьВсеОбъекты = Ложь, РежимЗаписи = Неопределено) Экспорт
	
	Если СтруктураПараметров.Свойство("СсылкаНового") Тогда
		Ссылка = СтруктураПараметров.СсылкаНового;
	Иначе
		Ссылка = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Ссылка);
	КонецЕсли;
	
	ОрганизацияВСтроках = СтруктураПараметров.ОрганизацияВСтроках И ТипЗнч(СтруктураПараметров.Организация) = Тип("Строка");
	КонтрагентВСтроках  = СтруктураПараметров.КонтрагентВСтроках И ТипЗнч(СтруктураПараметров.Контрагент) = Тип("Строка");
	
	ТаблицаСторон = ТаблицаСторон(Объект, СтруктураПараметров);
	ТаблицаСторон.Колонки.Добавить("ОбъектРасчетов", Новый ОписаниеТипов("СправочникСсылка.ОбъектыРасчетов"));
	
	СуммаВзаиморасчетов = 0;
	Если СтруктураПараметров.ЭтоПлатежИлиПрочийДокумент  И ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
		ТабличнаяЧасть = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа); // ТабличнаяЧасть
		Для Каждого Стр Из ТабличнаяЧасть Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Стр, "СуммаВзаиморасчетов") Тогда
				СуммаВзаиморасчетов = СуммаВзаиморасчетов + Стр.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из ТаблицаСторон Цикл
		
		ПараметрыОбъектаРасчетов = РеквизитыОбъектаРасчетовПоСтруктуре(Объект, Ссылка, СтруктураПараметров, РежимЗаписи);
		
		//Ключевые реквизиты.
		ПараметрыОбъектаРасчетов.Организация = Стр.Организация;
		ПараметрыОбъектаРасчетов.Контрагент = Стр.Контрагент;
		ПараметрыОбъектаРасчетов.Партнер =  Стр.Партнер;
		
		Если ЗначениеЗаполнено(Стр.ВалютаВзаиморасчетов) Тогда
			ПараметрыОбъектаРасчетов.ВалютаВзаиморасчетов = Стр.ВалютаВзаиморасчетов;
		КонецЕсли;
		Если СуммаВзаиморасчетов > 0 Тогда
			ПараметрыОбъектаРасчетов.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
		КонецЕсли;
		
		ДополнительныеРеквизиты = ?(Объект.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено,
									Объект.ДополнительныеРеквизиты.Выгрузить(),
									Неопределено);
		
		ОбновлениеИБ = СтруктураПараметров.Свойство("ТолькоОстатки") И СтруктураПараметров.ТолькоОстатки;
		
		ЕстьИзмененияВОбъектеРасчетов = Ложь;
		Стр.ОбъектРасчетов = ПроверитьСоздатьОбъектРасчетов(ПараметрыОбъектаРасчетов, ДополнительныеРеквизиты, ОбновлениеИБ, ЕстьИзмененияВОбъектеРасчетов);
		Если ЕстьИзмененияВОбъектеРасчетов Тогда
			Объект.ДополнительныеСвойства.Вставить("ОповеститьОбИзмененииОбъектаРасчетов", Истина);
			Объект.ДополнительныеСвойства.Вставить("ИзмененныйОбъектРасчетов", Стр.ОбъектРасчетов);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВернутьВсеОбъекты Тогда
		Если ОрганизацияВСтроках И КонтрагентВСтроках Тогда
			ТаблицаСторон.Индексы.Добавить("Организация, Контрагент");
		ИначеЕсли ОрганизацияВСтроках Тогда
			ТаблицаСторон.Индексы.Добавить("Организация");
		Иначе
			ТаблицаСторон.Индексы.Добавить("Контрагент");
		КонецЕсли;
		
		Возврат ТаблицаСторон;
	ИначеЕсли ТаблицаСторон.Количество() > 0 Тогда
		Возврат ТаблицаСторон[0].ОбъектРасчетов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Создает, перезаполняет при необходимости и возвращает ссылку на объект расчетов по параметрам механизма взаиморасчетов.
// Если в рамках одной структуры было создано несколько элементов объектов расчетов то возвращает первый.
// 
// Параметры:
// 	Объект - ДокументОбъект, СправочникОбъект - Объект, по ссылке на который проверяется объект расчетов.
// 	Ссылка - ДокументСсылка, СправочникСсылка - Ссылка на объект.
// 	СтруктураПараметров - Структура - Текущий набор параметров. см. ВзаиморасчетыСервер.ПараметрыМеханизма().
// 	РежимЗаписи - РежимЗаписиДокумента - Режим записи, если метод вызывается из события ПередЗаписью.
// 	
// Возвращаемое значение:
// 	Структура - Структура параметров, где:
// 		* Объект - ОпределяемыйТип.ОбъектРасчетов.
// 		* ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами.
// 		* Организация - СправочникСсылка.Организации.
// 		* Контрагент - СправочникСсылка.Контрагенты.
// 		* Партнер - СправочникСсылка.Партнеры.
// 		* Наименование - Строка.
// 		* ТипСсылки - см. ОбщегоНазначения.ИдентификаторОбъектаМетаданных
// 		* ПометкаУдаления - Булево.
// 		* ГруппаФинансовогоУчета - СправочникСсылка.ГруппыФинансовогоУчетаРасчетов.
// 		* Менеджер - СправочникСсылка.Пользователи.
// 		* Подразделение - СправочникСсылка.СтруктураПредприятия. 
// 		* ИдентификаторПлатежа - Строка. 
// 		* НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС. 
// 		* НомерВходящегоДокумента - Строка.
// 		* ДатаВходящегоДокумента - Дата.
// 		* НаименованиеПервичногоДокумента - Строка
// 		* Сумма - Число.
// 		* Валюта - СправочникСсылка.Валюты. 
// 		* ВалютаВзаиморасчетов - СправочникСсылка.Валюты. 
// 		* СуммаВзаиморасчетов - Число. 
// 		* Договор - СправочникСсылка.ДоговорыКонтрагентов
// 		          - СправочникСсылка.ДоговорыМеждуОрганизациями.
// 		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности. 
// 		* ОплатаВВалюте - Булево.
// 		* Номер - Строка.
// 		* Дата-  Дата.
// 		* Комментарий - Строка. 
// 		* БанковскийСчетОрганизации - СправочникСсылка.БанковскиеСчетаОрганизаций. 
// 		* БанковскийСчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов.
// 		* Касса - СправочникСсылка.Кассы. 
// 		* ФормаОплаты - ПеречислениеСсылка.ФормыОплаты.
// 		* ТолькоОстатки - Булево.
// 	
//
Функция РеквизитыОбъектаРасчетовПоСтруктуре(Объект, Ссылка, СтруктураПараметров, РежимЗаписи) Экспорт
	
	ЭтоДокумент = Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка));
	
	ПараметрыОбъектаРасчетов = Новый Структура;
	
	//Ключевые реквизиты.
	Если СтруктураПараметров.Свойство("СсылкаНового") Тогда
		ПараметрыОбъектаРасчетов.Вставить("Объект", СтруктураПараметров.СсылкаНового);
	Иначе
		ПараметрыОбъектаРасчетов.Вставить("Объект", Ссылка);
	КонецЕсли;
	ПараметрыОбъектаРасчетов.Вставить("ТипРасчетов", СтруктураПараметров.ТипРасчетов);
	ПараметрыОбъектаРасчетов.Вставить("Организация", ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация, ,Справочники.Организации.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("Контрагент",  ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент, ,Справочники.Контрагенты.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("Партнер",     ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер, ,Справочники.Партнеры.ПустаяСсылка()));
	
	//Служебные реквизиты.
	ПараметрыОбъектаРасчетов.Вставить("Наименование", ?(Строка(Объект)="",НСтр("ru = '<Пустой>'"),Строка(Объект)));
	
	ПараметрыОбъектаРасчетов.Вставить("ТипСсылки", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Ссылка)));
	ПометкаУдаления = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,"Объект.ПометкаУдаления");
	ПараметрыОбъектаРасчетов.Вставить("ПометкаУдаления", ПометкаУдаления);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Состояние = 1;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Состояние = ?(ПараметрыОбъектаРасчетов.ПометкаУдаления,2,0);
	Иначе
		Если ЭтоДокумент Тогда
			Состояние = ?(ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,"Объект.Проведен"),1,?(ПараметрыОбъектаРасчетов.ПометкаУдаления,2,0));
		Иначе
			Состояние = ?(ПараметрыОбъектаРасчетов.ПометкаУдаления,2,0);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОбъектаРасчетов.Вставить("Состояние", Состояние);
	
	Если СтруктураПараметров.ЭтоСправочник Тогда
		ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.Договор;
	ИначеЕсли СтруктураПараметров.ЭтоЗаказ Тогда
		ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.Заказ;
	ИначеЕсли СтруктураПараметров.ЭтоПродажаЗакупка Тогда
		ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.Накладная;
	Иначе
		ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.ПлатежВозврат;
	КонецЕсли;
	ПараметрыОбъектаРасчетов.Вставить("ТипОбъектаРасчетов", ТипОбъектаРасчетов);
	
	ВалютаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаВзаиморасчетов,,Справочники.Валюты.ПустаяСсылка());
	
	СуммыДокумента = ВзаиморасчетыСервер.СуммыДокумента(Объект, СтруктураПараметров);
	СуммаДокумента = СуммыДокумента.СуммаДокумента;
	СуммаВзаиморасчетов = СуммыДокумента.СуммаВзаиморасчетов;
	
	ПараметрыОбъектаРасчетов.Вставить("ГруппаФинансовогоУчета", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ГруппаФинансовогоУчета,,Справочники.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("Менеджер",
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.Менеджер,, Справочники.Пользователи.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("Подразделение", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.Подразделение,,Справочники.СтруктураПредприятия.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("ИдентификаторПлатежа", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.ИдентификаторПлатежа,,""));
	ПараметрыОбъектаРасчетов.Вставить("НалогообложениеНДС", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.НалогообложениеНДС,,Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("НомерВходящегоДокумента",
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.НомерВходящегоДокумента,,""));
	ПараметрыОбъектаРасчетов.Вставить("ДатаВходящегоДокумента",
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.ДатаВходящегоДокумента,,Дата(1,1,1)));
	ПараметрыОбъектаРасчетов.Вставить("НаименованиеПервичногоДокумента",
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,СтруктураПараметров.НаименованиеПервичногоДокумента,,""));
	ПараметрыОбъектаРасчетов.Вставить("Сумма",
		СуммаДокумента);
	ПараметрыОбъектаРасчетов.Вставить("Валюта", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаДокумента,,Справочники.Валюты.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("ВалютаВзаиморасчетов", 
		?(ЗначениеЗаполнено(ВалютаВзаиморасчетов),ВалютаВзаиморасчетов,ПараметрыОбъектаРасчетов.Валюта));
	ПараметрыОбъектаРасчетов.Вставить("СуммаВзаиморасчетов", 
		СуммаВзаиморасчетов);
	ПараметрыОбъектаРасчетов.Вставить("Договор", 
		?(СтруктураПараметров.ЭтоСправочник 
			И (ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
				ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями")), 
			Ссылка, 
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор,, Неопределено)));
	ПараметрыОбъектаРасчетов.Вставить("НаправлениеДеятельности", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.НаправлениеДеятельности,, Справочники.НаправленияДеятельности.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("ОплатаВВалюте", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ОплатаВВалюте,, Ложь));
	ПараметрыОбъектаРасчетов.Вставить("Номер", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Номер, ,""));
	ПараметрыОбъектаРасчетов.Вставить("Дата", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Дата, ,Дата(1,1,1)));
	ПараметрыОбъектаРасчетов.Вставить("Комментарий", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, "Объект.Комментарий", ,""));
	ПараметрыОбъектаРасчетов.Вставить("БанковскийСчетОрганизации", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.БанковскийСчетОрганизации,,Справочники.БанковскиеСчетаОрганизаций));
	ПараметрыОбъектаРасчетов.Вставить("БанковскийСчетКонтрагента", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.БанковскийСчетКонтрагента,,Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("Касса", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Касса,,Справочники.Кассы.ПустаяСсылка()));
	ПараметрыОбъектаРасчетов.Вставить("ФормаОплаты", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ФормаОплаты,, Перечисления.ФормыОплаты.ПустаяСсылка()));
		
	ПустоеСоглашение = ?(СтруктураПараметров.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом, 
		Справочники.СоглашенияСКлиентами.ПустаяСсылка(),
		Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	ПараметрыОбъектаРасчетов.Вставить("Соглашение", 
		ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Соглашение,,ПустоеСоглашение));
		
	ПараметрыОбъектаРасчетов.Вставить("ТолькоОстатки", СтруктураПараметров.ТолькоОстатки);
		
	Возврат ПараметрыОбъектаРасчетов;
	
КонецФункции

#КонецОбласти

#Область Общий

// Возвращает ссылку на уже имеющийся объект расчетов.
// Платежи с разными партнерами и контрагентами не поддерживаются.
// 
// Параметры: 
// 	Ссылка - ДокументСсылка, СправочникСсылка - Ссылка на исходный объект.
// 	Организация - СправочникСсылка.Организации - Организация.
// 	ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - Тип расчетов объекта расчетов.
// 	ДополнительныеКритерииПоиска - см. ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска.
// 
// Возвращаемое значение: 
// 	СправочникСсылка.ОбъектыРасчетов - Ссылка на объект расчетов.
//
Функция ПолучитьОбъектРасчетовПоСсылке(Ссылка, Организация = Неопределено, ТипРасчетов = Неопределено, ДополнительныеКритерииПоиска = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Справочники.ОбъектыРасчетов.ПустаяСсылка();
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Ссылка);
	
	Если ДополнительныеКритерииПоиска = Неопределено Тогда
		ДополнительныеКритерииПоиска = ДополнительныеКритерииПоиска();
		ДополнительныеКритерииПоиска.ВернутьПервый = Истина;
	КонецЕсли;
	
	Возврат ПолучитьОбъектыРасчетовПоСсылкам(Массив, Организация, ТипРасчетов, ДополнительныеКритерииПоиска)[Ссылка];
	
КонецФункции

// Возвращает соответствие ссылок имеющимся объектам расчетов.
// 
// Параметры: 
// 	МассивСсылок - Массив из ДокументСсылка, СправочникСсылка - Массив ссылок на исходные объекты.
// 	Организация - СправочникСсылка.Организации - Кем является организация.
// 	ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - Тип расчетов объектов расчетов.
// 	ДополнительныеКритерииПоиска - см. ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска.
// 
// Возвращаемое значение: 
// 	Соответствие из КлючИЗначение:
// 		* Ключ - ДокументСсылка, СправочникСсылка - исходная ссылка.
// 		* Значение - СправочникСсылка.ОбъектыРасчетов - ссылка на объект расчетов.
//
Функция ПолучитьОбъектыРасчетовПоСсылкам(МассивСсылок, Организация = Неопределено, ТипРасчетов = Неопределено, ДополнительныеКритерииПоиска = Неопределено) Экспорт
	
	Если ДополнительныеКритерииПоиска = Неопределено Тогда
		ДополнительныеКритерииПоиска = ДополнительныеКритерииПоиска();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Объект КАК Объект,
	|	ОбъектыРасчетов.Ссылка КАК Ссылка,
	|	ОбъектыРасчетов.ТолькоОстатки КАК ТолькоОстатки
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|	ПО ОбъектыРасчетов.Объект = Договоры.Ссылка
	|ГДЕ
	|	НЕ &ТолькоРеглУчет
	|	И ОбъектыРасчетов.Объект В (&МассивСсылок)
	|	И (ОбъектыРасчетов.Организация = &Организация ИЛИ &ЛюбаяОрганизация)
	|	И (ОбъектыРасчетов.ТипРасчетов = &ТипРасчетов ИЛИ &ЛюбойТип)
	|	И (ВЫБОР КОГДА &ЭтоДочернийПартнер
	|			И ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) = ТИП(Справочник.ДоговорыКонтрагентов) И ЕСТЬNULL(Договоры.РазрешенаРаботаСДочернимиПартнерами, ЛОЖЬ)
	|		ТОГДА
	|			Договоры.Партнер
	|		ИНАЧЕ
	|			&Партнер
	|	КОНЕЦ = ОбъектыРасчетов.Партнер ИЛИ &ЛюбойПартнер)
	|	И (ОбъектыРасчетов.Контрагент = &Контрагент ИЛИ &ЛюбойКонтрагент)
	|	И &ВалютаВзаиморасчетов
	|	И &УсловиеТолькоОстатки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Объект КАК Объект,
	|	ОбъектыРасчетов.Ссылка КАК Ссылка,
	|	ОбъектыРасчетов.ТолькоОстатки КАК ТолькоОстатки
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|	ПО ОбъектыРасчетов.Объект = Договоры.Ссылка
	|ГДЕ
	|	&ТолькоРеглУчет
	|	И (ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) = ТИП(Документ.РеализацияТоваровУслуг)
	|		 ИЛИ ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) = ТИП(Документ.ПриобретениеТоваровУслуг)
	|		 ИЛИ ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) = ТИП(Документ.ЗаказКлиента)
	|		 ИЛИ ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) = ТИП(Документ.ЗаказПоставщику)
	|		 ИЛИ ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) = ТИП(Справочник.ДоговорыКонтрагентов))
	|	И ОбъектыРасчетов.Объект В (&МассивСсылок)
	|	И (ОбъектыРасчетов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация))
	|	И (ОбъектыРасчетов.ТипРасчетов = &ТипРасчетов ИЛИ &ЛюбойТип)
	|	И (ВЫБОР КОГДА &ЭтоДочернийПартнер
	|			И ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) = ТИП(Справочник.ДоговорыКонтрагентов) И ЕСТЬNULL(Договоры.РазрешенаРаботаСДочернимиПартнерами, ЛОЖЬ)
	|		ТОГДА
	|			Договоры.Партнер
	|		ИНАЧЕ
	|			&Партнер
	|	КОНЕЦ = ОбъектыРасчетов.Партнер ИЛИ &ЛюбойПартнер)
	|	И (ОбъектыРасчетов.Контрагент = &Контрагент ИЛИ &ЛюбойКонтрагент)
	|	
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Объект КАК Объект,
	|	ОбъектыРасчетов.Ссылка КАК Ссылка,
	|	ОбъектыРасчетов.ТолькоОстатки КАК ТолькоОстатки
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|	ПО ОбъектыРасчетов.Объект = Договоры.Ссылка
	|ГДЕ
	|	&ТолькоРеглУчет
	|	И НЕ (ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) = ТИП(Документ.РеализацияТоваровУслуг)
	|		 ИЛИ ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) = ТИП(Документ.ПриобретениеТоваровУслуг)
	|		 ИЛИ ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) = ТИП(Документ.ЗаказКлиента)
	|		 ИЛИ ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) = ТИП(Документ.ЗаказПоставщику)
	|		 ИЛИ ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) = ТИП(Справочник.ДоговорыКонтрагентов))
	|	И ОбъектыРасчетов.Объект В (&МассивСсылок)
	|	И (ОбъектыРасчетов.Организация = &Организация ИЛИ &ЛюбаяОрганизация)
	|	И (ОбъектыРасчетов.ТипРасчетов = &ТипРасчетов ИЛИ &ЛюбойТип)
	|	И (ОбъектыРасчетов.Партнер В (&Партнер) ИЛИ &ЛюбойПартнер)
	|	И (ОбъектыРасчетов.Контрагент = &Контрагент ИЛИ &ЛюбойКонтрагент)
	|УПОРЯДОЧИТЬ ПО
	|	ТолькоОстатки ВОЗР
	|	";
	
	Запрос.УстановитьПараметр("МассивСсылок",     МассивСсылок);
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("ТипРасчетов",      ТипРасчетов);
	Запрос.УстановитьПараметр("Партнер",          ДополнительныеКритерииПоиска.Партнер);
	Запрос.УстановитьПараметр("ЭтоДочернийПартнер", Ложь);
	Если ЗначениеЗаполнено(ДополнительныеКритерииПоиска.Партнер) Тогда
		Запрос.УстановитьПараметр("ЭтоДочернийПартнер",  
			ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныеКритерииПоиска.Партнер, "Родитель")));
	КонецЕсли;
	Запрос.УстановитьПараметр("Контрагент",       ДополнительныеКритерииПоиска.Контрагент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ДополнительныеКритерииПоиска.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ОбновлениеИБ",     ДополнительныеКритерииПоиска.ОбновлениеИБ);
	Запрос.УстановитьПараметр("ТолькоРеглУчет",   ДополнительныеКритерииПоиска.ТолькоРеглУчет);
	Запрос.УстановитьПараметр("ЛюбаяОрганизация", ?(Организация = Неопределено, Истина, Ложь));
	Запрос.УстановитьПараметр("ЛюбойТип",         ?(ТипРасчетов = Неопределено, Истина, Ложь));
	Запрос.УстановитьПараметр("ЛюбойПартнер",     ?(ДополнительныеКритерииПоиска.Партнер     = Неопределено, Истина, Ложь));
	Запрос.УстановитьПараметр("ЛюбойКонтрагент",  ?(ДополнительныеКритерииПоиска.Контрагент  = Неопределено, Истина, Ложь));
	
	Если ДополнительныеКритерииПоиска.Свойство("ТолькоОстатки") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеТолькоОстатки", "ОбъектыРасчетов.ТолькоОстатки = &ТолькоОстатки");
		Запрос.УстановитьПараметр("ТолькоОстатки", ДополнительныеКритерииПоиска.ТолькоОстатки);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеТолькоОстатки", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВалютаВзаиморасчетов", 
		?(ДополнительныеКритерииПоиска.ОбновлениеИБ 
			И ЗначениеЗаполнено(ДополнительныеКритерииПоиска.ВалютаВзаиморасчетов), 
			"ОбъектыРасчетов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов", 
			"ИСТИНА"));
	
	УстановитьПривилегированныйРежим(Истина);
	ОбъектыРасчетов = Запрос.Выполнить().Выгрузить();
	ОбъектыРасчетов.Индексы.Добавить("Объект");
	
	Результат = Новый Соответствие;
	Для Каждого Ссылка Из МассивСсылок Цикл
		СтрокиОбъектов = ОбъектыРасчетов.Скопировать(Новый Структура("Объект", Ссылка));
		Если СтрокиОбъектов.Количество() > 1 Тогда
			Если ДополнительныеКритерииПоиска.ВернутьПервый Тогда
				СтрокиОбъектов.Сортировать("ТолькоОстатки ВОЗР");
				Результат.Вставить(Ссылка, СтрокиОбъектов[0].Ссылка);
			Иначе
				Если ДополнительныеКритерииПоиска.НеГенерироватьИсключение Тогда
					Результат.Вставить(Ссылка, Справочники.ОбъектыРасчетов.ПустаяСсылка());
				Иначе
					ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По %1 найдено несколько объектов расчетов.'"),
						Ссылка));
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокиОбъектов.Количество() = 1 Тогда
			Результат.Вставить(Ссылка, СтрокиОбъектов[0].Ссылка);
		Иначе
			Результат.Вставить(Ссылка, Справочники.ОбъектыРасчетов.ПустаяСсылка());
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает все объекты расчетов по ссылке.
// 
// Параметры:
// 	Ссылка - ДокументСсылка - объект по которому нужно найти Объекты расчетов.
// Возвращаемое значение:
// 	Массив из СправочникСсылка.ОбъектыРасчетов - Массив объектов расчетов.
//
Функция ВсеОбъектыРасчетовПоСсылке(Ссылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ 
	|	НЕ ТолькоОстатки
	|	И ОбъектыРасчетов.Объект = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ОбъектыРасчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат ОбъектыРасчетов;
КонецФункции

// Возвращает структуру дополнительных параметров по для поиска объектов расчета по умолчанию
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 		* ОбновлениеИБ - Булево - Признак, указывающий что следует производить поиск и среди некорректных объектов расчетов
// 		* ВернутьПервый - Булево - Признак, указывающий что следует вернуть первый найденный объект расчетов
// 		* Партнер - Неопределено, СправочникСсылка.Партнеры - Значение поиска по полю Партнер
// 		* ВалютаВзаиморасчетов - Неопределено, СправочникСсылка.Валюты - Значение поиска по полю Партнер
// 		* Контрагент - Неопределено, СправочникСсылка.Контрагенты - Значение поиска по полю Контрагент
// 		* НеГенерироватьИсключение - Булево - Если найден один объект расчетов, то вернуть его, иначе вернуть пустую ссылку 
Функция ДополнительныеКритерииПоиска() Экспорт
	
	КритерииПоискаОбъектаРасчетов = Новый Структура();
	КритерииПоискаОбъектаРасчетов.Вставить("Контрагент", Неопределено);
	КритерииПоискаОбъектаРасчетов.Вставить("Партнер", Неопределено);
	КритерииПоискаОбъектаРасчетов.Вставить("ВалютаВзаиморасчетов", Неопределено);
	КритерииПоискаОбъектаРасчетов.Вставить("ТолькоРеглУчет", Ложь);
	КритерииПоискаОбъектаРасчетов.Вставить("ОбновлениеИБ", Ложь);
	КритерииПоискаОбъектаРасчетов.Вставить("ВернутьПервый", Ложь);
	КритерииПоискаОбъектаРасчетов.Вставить("НеГенерироватьИсключение", Ложь);
	
	Возврат КритерииПоискаОбъектаРасчетов;
	
КонецФункции

// Создает, перезаполняет при необходимости и возвращает ссылку на объект расчетов по переданной структуре реквизитов.
// 
// Параметры:
// 	РеквизитыОбъекта - Структура - Текущий набор реквизитов объекта расчетов.
// 	ДопРеквизитыИсточника - ТаблицаЗначений - Таблица дополнительных свойств и их значений объекта-источника.
// 	ОбновлениеИБ - Булево - Признак выполнения обновления информационной базы.
// 	ЕстьИзменения - Булево - Переменная передаваемая в процедуру для отметки о наличии изменений в объекте расчетов
// 
// Возвращаемое значение:
// 	СправочникСсылка.ОбъектыРасчетов - Ссылка на объект расчетов.
//
Функция ПроверитьСоздатьОбъектРасчетов(РеквизитыОбъекта, ДопРеквизитыИсточника = Неопределено, ОбновлениеИБ = Ложь, ЕстьИзменения = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(РеквизитыОбъекта.Объект) Тогда
		ВызватьИсключение(НСтр("ru='Невозможно создать объект расчетов. Не указаны обязательные параметры.'"))
	КонецЕсли;
	
	Если ТипЗнч(РеквизитыОбъекта.Контрагент) = Тип("СправочникСсылка.Организации")
		И (РеквизитыОбъекта.Договор = Неопределено
			ИЛИ ТипЗнч(РеквизитыОбъекта.Договор) <> Тип("СправочникСсылка.ДоговорыМеждуОрганизациями")) Тогда
		РеквизитыОбъекта.Договор = Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка();
	ИначеЕсли ТипЗнч(РеквизитыОбъекта.Контрагент) <> Тип("СправочникСсылка.Организации")
		И (РеквизитыОбъекта.Договор = Неопределено
			ИЛИ ТипЗнч(РеквизитыОбъекта.Договор) <> Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
		РеквизитыОбъекта.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	РеквизитыСправочника = РеквизитыСправочникаОбъектыРасчетов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ *
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.Объект = &Объект
	|	И ОбъектыРасчетов.Организация = &Организация
	|	И ОбъектыРасчетов.Контрагент = &Контрагент
	|	И ОбъектыРасчетов.Партнер = &Партнер
	|	И ОбъектыРасчетов.ТипРасчетов = &ТипРасчетов
	|	И &ВалютаВзаиморасчетов";
	Запрос.УстановитьПараметр("Объект", РеквизитыОбъекта.Объект);
	Запрос.УстановитьПараметр("Организация", РеквизитыОбъекта.Организация);
	Запрос.УстановитьПараметр("Контрагент", РеквизитыОбъекта.Контрагент);
	Запрос.УстановитьПараметр("Партнер", РеквизитыОбъекта.Партнер);
	Запрос.УстановитьПараметр("ТипРасчетов", РеквизитыОбъекта.ТипРасчетов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВалютаВзаиморасчетов", 
		?(ЗначениеЗаполнено(РеквизитыОбъекта.ВалютаВзаиморасчетов), "ОбъектыРасчетов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов" , "ИСТИНА"));
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", РеквизитыОбъекта.ВалютаВзаиморасчетов);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ТребуетсяПерезаполнение = Ложь;
		
		Для Каждого Реквизит Из РеквизитыСправочника Цикл
			Если РеквизитыОбъекта.Свойство(Реквизит) И Выборка[Реквизит] <> РеквизитыОбъекта[Реквизит] Тогда
				ТребуетсяПерезаполнение = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ДопРеквизитыИсточника <> Неопределено Тогда
			ДопРеквизитыОбъектаРасчетов = Выборка.ДополнительныеРеквизиты.Выгрузить(); // ТаблицаЗначений -
			ДопРеквизитыОбъектаРасчетов.Индексы.Добавить("Свойство");
			Для Каждого Реквизит Из ДопРеквизитыИсточника Цикл
				Если УправлениеСвойствами.ПроверитьСвойствоУОбъекта(Выборка.Ссылка,Реквизит.Свойство) Тогда
					СтрокаДопРеквизита = ДопРеквизитыОбъектаРасчетов.Найти(Реквизит.Свойство);
					Если СтрокаДопРеквизита = Неопределено
						ИЛИ СтрокаДопРеквизита.Значение <> Реквизит.Значение Тогда
						ТребуетсяПерезаполнение = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Выборка.ПометкаУдаления <> РеквизитыОбъекта.ПометкаУдаления Тогда
			ТребуетсяПерезаполнение = Истина;
		КонецЕсли;
		
		Если ТребуетсяПерезаполнение Тогда
			УстановитьПривилегированныйРежим(Истина);
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект -
			ЗаполнитьЗначенияСвойств(СправочникОбъект, РеквизитыОбъекта);
			
			Если ДопРеквизитыИсточника <> Неопределено Тогда
				Для Каждого Реквизит Из ДопРеквизитыИсточника Цикл
					Если УправлениеСвойствами.ПроверитьСвойствоУОбъекта(Выборка.Ссылка,Реквизит.Свойство) Тогда
						СтрокаДопРеквизита = ДопРеквизитыОбъектаРасчетов.Найти(Реквизит.Свойство);
						Если СтрокаДопРеквизита = Неопределено Тогда
							СтрокаДопРеквизита = ДопРеквизитыОбъектаРасчетов.Добавить();
						КонецЕсли;
						СтрокаДопРеквизита.Свойство = Реквизит.Свойство;
						СтрокаДопРеквизита.Значение = Реквизит.Значение;
						СтрокаДопРеквизита.ТекстоваяСтрока = Реквизит.ТекстоваяСтрока;
					КонецЕсли;
				КонецЦикла;
				СправочникОбъект.ДополнительныеРеквизиты.Загрузить(ДопРеквизитыОбъектаРасчетов);
			КонецЕсли;
			
			СправочникОбъект.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			ЕстьИзменения = Истина;
			Возврат СправочникОбъект.Ссылка;
		КонецЕсли;
		
		Возврат Выборка.Ссылка;
		
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		СправочникОбъект = Справочники.ОбъектыРасчетов.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СправочникОбъект, РеквизитыОбъекта);
		СправочникОбъект.УникальныйИдентификатор = Новый УникальныйИдентификатор();
		
		Если ДопРеквизитыИсточника <> Неопределено Тогда
			Для Каждого Реквизит Из ДопРеквизитыИсточника Цикл
				Если УправлениеСвойствами.ПроверитьСвойствоУОбъекта(СправочникОбъект.Ссылка,Реквизит.Свойство) Тогда
					СтрокаДопРеквизита = СправочникОбъект.ДополнительныеРеквизиты.Добавить();
					СтрокаДопРеквизита.Свойство = Реквизит.Свойство;
					СтрокаДопРеквизита.Значение = Реквизит.Значение;
					СтрокаДопРеквизита.ТекстоваяСтрока = Реквизит.ТекстоваяСтрока;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СправочникОбъект.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		Возврат СправочникОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

// Проверяет наличие ссылок в объектах данных на переданный объект расчетов. Если ссылок нет, то удаляет объект непосредственно.
//
// Параметры:
// 	ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Ссылка на объект расчетов.
// 	Отказ - Булево - Флаг отказа из объекта.
// 	ВызыватьИсключение - Булево - Вызывать ли исключение если не удается удалить объект расчетов.
Процедура ПроверитьУдалитьОбъектРасчетов(ОбъектРасчетов, Отказ, ВызыватьИсключение) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектРасчетов)  Тогда
		ВызватьИсключение(НСтр("ru='Невозможно создать объект расчетов. Не указаны обязательные параметры.'"))
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ОбъектРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	КритерийОтбора.ОбъектРасчетов(&ОбъектРасчетов) КАК ОбъектРасчетов
	|ГДЕ
	|	ОбъектРасчетов.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.ОбъектРасчетов = &ОбъектРасчетов
	|	И Расчеты.Регистратор <> &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	Расчеты.ДокументРегистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|ГДЕ
	|	Расчеты.ОбъектРасчетов = &ОбъектРасчетов
	|	И Расчеты.ДокументРегистратор <> &Ссылка
	|	И НЕ Расчеты.ДокументРегистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|ГДЕ
	|	Расчеты.ЗаказКлиента = &ОбъектРасчетов
	|	И Расчеты.Регистратор <> &Ссылка
	|	И НЕ Расчеты.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	Расчеты.ОбъектРасчетов = &ОбъектРасчетов
	|	И Расчеты.Регистратор <> &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	Расчеты.ДокументРегистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|ГДЕ
	|	Расчеты.ОбъектРасчетов = &ОбъектРасчетов
	|	И Расчеты.ДокументРегистратор <> &Ссылка
	|	И НЕ Расчеты.ДокументРегистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|ГДЕ
	|	Расчеты.ЗаказПоставщику = &ОбъектРасчетов
	|	И Расчеты.Регистратор <> &Ссылка
	|	И НЕ Расчеты.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц
	|";
	Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	Запрос.УстановитьПараметр("Ссылка", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРасчетов, "Объект"));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбъектРасчетовОбъект = ОбъектРасчетов.ПолучитьОбъект();
		Попытка
			ОбъектРасчетовОбъект.Заблокировать();
		Исключение
			ВызватьИсключение(НСтр("ru = 'Изменение запрещено, объект расчетов уже используется в других сеансах.'"));
		КонецПопытки;
		ОбъектРасчетовОбъект.Удалить();
		УстановитьПривилегированныйРежим(Ложь);
	ИначеЕсли ВызыватьИсключение Тогда
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Изменение запрещено, объект расчетов %1 используется в других объектах:'"),
				ОбъектРасчетов);
		Отказ = Истина;
		Сообщить(Сообщение);
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщение = Новый СообщениеПользователю();
			Сообщение.КлючДанных = Выборка.Ссылка;
			Сообщение.Текст = Символы.Таб + Выборка.Ссылка;
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с обязательными данными для генерации/поиска объекта расчетов
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 		* Объект - ОпределяемыйТип.ОбъектРасчетов - Ссылка на источник объекта расчетов.
// 		* ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - В каких расчетах отражается, с клиентами или с поставщиками.
// 		* Организация - СправочникСсылка.Организации - Организация объекта расчетов.
// 		* Контрагент - Неопределено - Контрагент объекта расчетов.
// 		* Партнер - СправочникСсылка.Партнеры - Партнер объекта расчетов.
// 		* Договор - Неопределено - Договор объекта расчетов.
// 		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности, по которому отражается объект расчетов.
Функция ПолучитьПараметрыОбъектаРасчетов() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Объект");
	СтруктураПараметров.Вставить("ТипРасчетов");
	СтруктураПараметров.Вставить("Организация",             Справочники.Организации.ПустаяСсылка());
	СтруктураПараметров.Вставить("Валюта",                  Справочники.Валюты.ПустаяСсылка());
	СтруктураПараметров.Вставить("Партнер",                 Справочники.Партнеры.ПустаяСсылка());
	СтруктураПараметров.Вставить("Контрагент",              Неопределено);
	СтруктураПараметров.Вставить("Договор",                 Неопределено);
	СтруктураПараметров.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает пустые значения типов, которые могли быть указаны в качестве объекта расчетов
// 
// Возвращаемое значение:
// 	Массив из ОпределяемыйТип.ОбъектРасчетов, Неопределено
Функция ПустыеЗначенияОбъектРасчетов() Экспорт
	
	ТипыОбъектовРасчетов = Метаданные.ОпределяемыеТипы.ОбъектРасчетов.Тип.Типы();
	ПустыеЗначенияОбъектРасчетов = Новый Массив();
	ПустыеЗначенияОбъектРасчетов.Добавить(Неопределено);
	
	Для Каждого ТипОбъектаРасчетов Из ТипыОбъектовРасчетов Цикл
		 ПустыеЗначенияОбъектРасчетов.Добавить(Новый(ТипОбъектаРасчетов));
	КонецЦикла;
	
	Возврат ПустыеЗначенияОбъектРасчетов;
	
КонецФункции

// Дополняет массив ссылок ссылками на связанные объекты расчетов.
// 
// Параметры:
// 	МассивСсылок - Массив из ДокументСсылка, СправочникСсылка - Массив ссылок на документы и справочники.
//
Процедура ДополнитьСсылкамиНаОбъектыРасчетов(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.Объект В (&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	МассивОбъектовРасчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСсылок,МассивОбъектовРасчетов);
	
КонецПроцедуры

// Проверяет, что ссылка указанного объекта может содержаться в объекте расчетов
// 
// Параметры:
// 	Объект - СправочникОбъект, ДокументОбъект - проверяемый объект.
// 	СтруктураПараметров - Структура - Текущий набор параметров. см. ВзаиморасчетыСервер.ПараметрыМеханизма().
// 
// Возвращаемое значение:
// 	Булево - Истина, если является объектом расчетов
//
Функция СсылкаЯвляетсяОбъектомРасчетов(Объект, СтруктураПараметров) Экспорт
	
	ИзменяетРасчеты            = СтруктураПараметров.ИзменяетРасчеты;
	ЭтоСправочник              = СтруктураПараметров.ЭтоСправочник;
	ЭтоЗаказ                   = СтруктураПараметров.ЭтоЗаказ;
	ЭтоПродажаЗакупка          = СтруктураПараметров.ЭтоПродажаЗакупка;
	ЭтоПлатежИлиПрочийДокумент = СтруктураПараметров.ЭтоПлатежИлиПрочийДокумент;
	ПорядокРасчетов            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПорядокРасчетов, , Перечисления.ПорядокРасчетов.ПоНакладным);
	НакладнаяПоЗаказам         = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.НакладнаяПоЗаказам, ,Ложь);
	ЗаказОснование             = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ЗаказОснование);
	ИспользоватьРасширенные    = СтруктураПараметров.ДокументРасчетовСКлиентами И НЕ СтруктураПараметров.ЗаказКакСчет
								ИЛИ СтруктураПараметров.ДокументРасчетовСПоставщиками;
	
	Возврат ЭтоСправочник И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
							ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным)
			ИЛИ ЭтоЗаказ И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам
														ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным)
			ИЛИ ЭтоПродажаЗакупка И ИзменяетРасчеты 
				И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
					ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным
					ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным
					ИЛИ (НЕ ИспользоватьРасширенные ИЛИ НЕ НакладнаяПоЗаказам) И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам) 
					// Корректировки реализаций и приобретений.
					И СтруктураПараметров.Ссылка = "Объект.Ссылка"
			ИЛИ ЭтоПлатежИлиПрочийДокумент И ИзменяетРасчеты
				// Возвраты товаров не по договорам.
				И ЗначениеЗаполнено(СтруктураПараметров.ОбъектРасчетов) И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
				// Возвраты товаров клиентов не по заявке.
				И НЕ (ЗначениеЗаполнено(ЗаказОснование) И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам);
	
КонецФункции

// Находит используемый объект расчетов (или несколько) по указанной ссылке
//
// Параметры:
// 	Ссылка - СправочникСсылка, ДокументСсылка - документ или справочник, использующий учетный механизм Взаиморасчеты
// 
// Возвращаемое значение:
// 	- СправочникСсылка.ОбъектыРасчетов - Найденный объект расчетов
// 	- Массив из СправочникСсылка.ОбъектыРасчетов - Если найдено несколько объектов расчетов
//
Функция ОбъектРасчетовИзСсылки(Ссылка) Экспорт
	
	МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	ПараметрыВзаиморасчеты = МодульМенеджера.ПараметрыВзаиморасчеты(Ссылка);
	
	Если ТипЗнч(ПараметрыВзаиморасчеты) = Тип("Массив") Тогда
		МассивПараметров = ПараметрыВзаиморасчеты;
	Иначе
		МассивПараметров = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыВзаиморасчеты);
	КонецЕсли;
	
	ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		Если ЗначениеЗаполнено(СтруктураПараметров.ОбъектРасчетов) Тогда
			ЧастиПути = СтрРазделить(СтруктураПараметров.ОбъектРасчетов, ".");
			Если ЧастиПути.Количество() = 2 Тогда // ОР в рекизите
				ОбъектРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЧастиПути[1]);
			ИначеЕсли ЧастиПути.Количество() = 3 Тогда // ОР в табличной части
				МетаданныеПоСсылке = Ссылка.Метаданные();
				Если МетаданныеПоСсылке.ТабличныеЧасти.Найти(ЧастиПути[1]) <> Неопределено Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	ТабличнаяЧасть.ИмяРеквизита КАК ОбъектРасчетов
						|ИЗ
						|	&ТабличнаяЧасть КАК ТабличнаяЧасть
						|ГДЕ
						|	ТабличнаяЧасть.Ссылка = &Ссылка";
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТабличнаяЧасть", МетаданныеПоСсылке.ПолноеИмя() + "." + ЧастиПути[1]);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяРеквизита", ЧастиПути[2]);
					Запрос.УстановитьПараметр("Ссылка", Ссылка);
					МассивОбъектовРасчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектРасчетов");
					Если МассивОбъектовРасчетов.Количество() > 1 Тогда
						ОбъектРасчетов =  МассивОбъектовРасчетов;
					ИначеЕсли МассивОбъектовРасчетов.Количество() = 1 Тогда 
						ОбъектРасчетов = МассивОбъектовРасчетов[0];
					КонецЕсли;
				Иначе
					ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В модуле менеджера документа указан некоррекный путь к объекту расчетов %1'"),
						СтруктураПараметров.ОбъектРасчетов));
				КонецЕсли;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектРасчетов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура СгенерироватьВсеОбъектыРасчетов(Параметры) Экспорт
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	ДанныеПоТипам  = Новый Соответствие();
	
	Для Каждого ОбъектОбработки Из ОбновляемыеДанные Цикл
		Ссылка = ОбъектОбработки.Ссылка;
		Если Не ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
			ЗначениеСоответствия = ДанныеПоТипам.Получить(ТипЗнч(Ссылка));
			Если ЗначениеСоответствия = Неопределено Тогда
				ДанныеДляОбработкиПоТипу = Новый ТаблицаЗначений;
				ДанныеДляОбработкиПоТипу.Колонки.Добавить("Ссылка", Метаданные.ОпределяемыеТипы.ОбъектРасчетов.Тип);
				НоваяСтрока = ДанныеДляОбработкиПоТипу.Добавить();
				НоваяСтрока.Ссылка = Ссылка;
				ДанныеПоТипам.Вставить(ТипЗнч(Ссылка), ДанныеДляОбработкиПоТипу);
			Иначе
				НоваяСтрока = ЗначениеСоответствия.Добавить();
				НоваяСтрока.Ссылка = Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДанныеПоТипу Из ДанныеПоТипам Цикл
		СгенерироватьОбъектыРасчетов(ДанныеПоТипу.Ключ, ДанныеПоТипу.Значение, Параметры.Очередь);
	КонецЦикла;
	
	Документы.ПервичныйДокумент.СгенерироватьОбъектыРасчетов(Параметры, ОбновляемыеДанные);
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолныеИменаТиповОбъектовРасчетов());
	
КонецПроцедуры

Процедура ЗарегистрироватьВсеДанныеДляГенерацииОбъектовРасчетов(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПолныеИменаТиповОбъектовРасчетов();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	ЭкземплярыТиповОбъектовРасчетов = ЭкземплярыТиповОбъектовРасчетов();
	
	Для Каждого ЭкземплярТипа Из ЭкземплярыТиповОбъектовРасчетов Цикл
		Если Не ТипЗнч(ЭкземплярТипа) = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
			ЗарегистрироватьДанныеДляГенерацииОбъектовРасчета(ЭкземплярТипа, Параметры);
		КонецЕсли;
	КонецЦикла;
	
	Документы.ПервичныйДокумент.ЗарегистрироватьДанныеКГенерацииОбъектовРасчетов(Параметры);
	
КонецПроцедуры 

// Генерирует новый элемент в справочнике ОбъектыРасчетов по комбинации полей АналитикаУчетаРасчетовПоПартнеру 
// и возвращает ее.
//
// Параметры:
//  Параметры - Структура - Коллекция Параметров:
//  	* АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам.
//  
// Возвращаемое значение:
// 	СправочникСсылка.ОбъектыРасчетов - Сгенерированный объект расчетов
//
Функция СоздатьОбъектРасчетовПоАналитикеУчетаПоПартнерам(Параметры) Экспорт

	ОбъектРасчетов = Справочники.ОбъектыРасчетов.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ОбъектРасчетов, Параметры);
	ОбъектРасчетов.ТолькоОстатки = Истина;
	ОбъектРасчетов.УникальныйИдентификатор = Новый УникальныйИдентификатор();
	ОбъектРасчетов.Записать();
	
	Возврат ОбъектРасчетов.Ссылка;
	
КонецФункции

// Параметры:
//  Параметры - Структура - Коллекция Параметров:
//  	* ВалютаВзаиморасчетов - СправочникСсылка.Валюты.
//  
// Возвращаемое значение:
// 	СправочникСсылка.ОбъектыРасчетов - Сгенерированный объект расчетов
//
Функция НайтиОбъектРасчетовПоАналитикеУчетаПоПартнерам(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбъектыРасчетов.Ссылка
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.Организация = &Организация
		|	И ОбъектыРасчетов.Партнер = &Партнер
		|	И ОбъектыРасчетов.Контрагент = &Контрагент
		|	И ОбъектыРасчетов.Договор = &Договор
		|	И ОбъектыРасчетов.НаправлениеДеятельности = &НаправлениеДеятельности
		|	И ОбъектыРасчетов.ТипРасчетов = &ТипРасчетов
		|	и &ВалютаВзаиморасчетов
		|	И ОбъектыРасчетов.Объект = НЕОПРЕДЕЛЕНО";
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Запрос.Параметры, Параметры);
	
	Если Параметры.Свойство("ВалютаВзаиморасчетов") И ЗначениеЗаполнено(Параметры.ВалютаВзаиморасчетов) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВалютаВзаиморасчетов", "ОбъектыРасчетов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов");
	Иначе  
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВалютаВзаиморасчетов", "ИСТИНА");
	КонецЕсли;	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает соответствия ссылок элементам справочника объекты расчетов
// 
// Параметры:
// 	ТаблицаПоиска - ТаблицаЗначений - таблица ссылок для поиска:
// 	 * НомерСтроки - Число - номер строки поиска.
// Возвращаемое значение:
// 	Соответствие Из КлючИЗначение:
// 		* Ключ - Число - Номер строки в ТаблицаПоиска
//		* Значение - СправочникСсылка.ОбъектыРасчетов.
//
Функция НайтиОбъектыРасчетовПоАналитикеУчетаПоПартнерам(ТаблицаПоиска) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеПоиска.НомерСтроки,
		|	ДанныеПоиска.Организация,
		|	ДанныеПоиска.Партнер,
		|	ДанныеПоиска.Контрагент,
		|	ДанныеПоиска.Договор,
		|	ДанныеПоиска.НаправлениеДеятельности,
		|	ДанныеПоиска.ТипРасчетов,
		|	ДанныеПоиска.ВалютаВзаиморасчетов
		|ПОМЕСТИТЬ ВТДанныеПоиска
		|ИЗ 
		|	&ДанныеПоиска КАК ДанныеПоиска
		|;
		|
		|ВЫБРАТЬ
		|	ДанныеПоиска.НомерСтроки КАК НомерСтроки,
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
		|ИЗ
		|	ВТДанныеПоиска КАК ДанныеПоиска
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ОбъектыРасчетов.Организация = ДанныеПоиска.Организация
		|		И ОбъектыРасчетов.Партнер = ДанныеПоиска.Партнер
		|		И ОбъектыРасчетов.Контрагент = ДанныеПоиска.Контрагент
		|		И ОбъектыРасчетов.Договор = ДанныеПоиска.Договор
		|		И ОбъектыРасчетов.НаправлениеДеятельности = ДанныеПоиска.НаправлениеДеятельности
		|		И ОбъектыРасчетов.ТипРасчетов = ДанныеПоиска.ТипРасчетов
		|		И ОбъектыРасчетов.ВалютаВзаиморасчетов = ДанныеПоиска.ВалютаВзаиморасчетов
		|		И ОбъектыРасчетов.Объект = НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("ДанныеПоиска", ТаблицаПоиска);
	ОбъектыРасчетов = Запрос.Выполнить().Выгрузить();

	Результат = Новый Соответствие;
	Для Каждого СтрокаАналитики Из ТаблицаПоиска Цикл
		СтрокиОбъектов = ОбъектыРасчетов.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаАналитики.НомерСтроки));
		Если СтрокиОбъектов.Количество() > 1 Тогда
			ВызватьИсключение(НСтр("ru='Ошибка заполнения объекта расчетов. Найдено несколько объектов расчетов.'"));
		ИначеЕсли СтрокиОбъектов.Количество() = 1 Тогда
			Результат.Вставить(СтрокаАналитики.НомерСтроки, СтрокиОбъектов[0].ОбъектРасчетов);
		Иначе
			Результат.Вставить(СтрокаАналитики.НомерСтроки, Справочники.ОбъектыРасчетов.ПустаяСсылка());
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


// Параметры:
// 	ПриемникОбъектаРасчетов - СправочникСсылка.ОбъектыРасчетов.
// 	ИсточникОбъектаРасчетов - СправочникСсылка.ОбъектыРасчетов.
// 	ГотовКЗаполнению - Булево.
//	Очередь - Неопределено, Число - Очередь обработки данных.
// 	
// Возвращаемое значение:
// 	Булево.
//
Функция ОбъектГотовКЗаполнению(ПриемникОбъектаРасчетов, ИсточникОбъектаРасчетов, ГотовКЗаполнению, Очередь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ПриемникОбъектаРасчетов)
		И ЗначениеЗаполнено(ИсточникОбъектаРасчетов)
		И ГотовКЗаполнению Тогда
		Если Не ОбновлениеИнформационнойБазы.ОбъектОбработан(ИсточникОбъектаРасчетов).Обработан
			И (Очередь = Неопределено 
				ИЛИ ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Очередь, ИсточникОбъектаРасчетов.Метаданные().ПолноеИмя())) Тогда
			ГотовКЗаполнению = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ГотовКЗаполнению;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений:
// 		* НомерСтроки             - Число.
// 		* Организация             - СправочникСсылка.Организации.
// 		* Контрагент              - СправочникСсылка.Контрагенты.
// 		                          - СправочникСсылка.Организации.
// 		* Партнер                 - СправочникСсылка.Партнеры.
// 		* Договор                 - СправочникСсылка.ДоговорыКонтрагентов.
// 		                          - СправочникСсылка.ДоговорыМеждуОрганизациями.
// 		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности.
// 		* ТипРасчетов             - ПеречислениеСсылка.ТипыРасчетовСПартнерами. 
// 		* ВалютаВзаиморасчетов    - СправочникСсылка.Валюты.
//
Функция ПараметрыПоискаПустогоОбъектаРасчетов() Экспорт
	
	ПараметрыПоиска = Новый ТаблицаЗначений();
	ПараметрыПоиска.Колонки.Добавить("НомерСтроки",             Новый ОписаниеТипов("Число"));
	ПараметрыПоиска.Колонки.Добавить("Организация",             Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	СписокТиповКонтрагенты = Новый Массив();
	СписокТиповКонтрагенты.Добавить(Тип("СправочникСсылка.Организации"));
	СписокТиповКонтрагенты.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ПараметрыПоиска.Колонки.Добавить("Контрагент",              Новый ОписаниеТипов(СписокТиповКонтрагенты));
	ПараметрыПоиска.Колонки.Добавить("Партнер",                 Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	
	СписокТиповДоговора = Новый Массив();
	СписокТиповДоговора.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	СписокТиповДоговора.Добавить(Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
	ПараметрыПоиска.Колонки.Добавить("Договор",                 Новый ОписаниеТипов(СписокТиповДоговора));
	ПараметрыПоиска.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	ПараметрыПоиска.Колонки.Добавить("ТипРасчетов",             Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРасчетовСПартнерами"));
	ПараметрыПоиска.Колонки.Добавить("ВалютаВзаиморасчетов",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));

	Возврат ПараметрыПоиска;
	
КонецФункции

Процедура ЗаполнитьОбъектыРасчетов(Объект, ОбъектИзменен = Неопределено, ТабЧастиВидыЗапасов = Неопределено) Экспорт
	
	ПараметрыГенерации = ПараметрыВзаиморасчетовОбъектаРасчетов(Объект);
	
	ТребуетсяЗаполнениеОбъектовРасчетовВШапкеИлиТЧ = Ложь;
	ТребуетсяЗаполнениеОбъектовРасчетовВРасшифровкеПлатежа = Ложь;

	Если Не ТипЗнч(ПараметрыГенерации) = Тип("Массив") Тогда
		ПараметрыГенерации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыГенерации);
	КонецЕсли;

	ДополненныеПараметрыМеханизма = ВзаиморасчетыСервер.ДополненныеПараметрыМеханизма(Объект, ПараметрыГенерации);
	
	Для Каждого СтруктураПараметровГенерации Из ПараметрыГенерации Цикл
		
		ПутьКОбъектамРасчетов = СтрРазделить(СтруктураПараметровГенерации.ОбъектРасчетов, ".", Ложь);
		ОбъектыРасчетовВТЧ = ПутьКОбъектамРасчетов.Количество() = 3;
		
		Если Не ОбъектыРасчетовВТЧ 
			И ЗначениеЗаполнено(СтруктураПараметровГенерации.ОбъектРасчетов)
			И Не ЗначениеЗаполнено(ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(
				Объект,
				СтруктураПараметровГенерации.ОбъектРасчетов)) Тогда
			ТребуетсяЗаполнениеОбъектовРасчетовВШапкеИлиТЧ = Истина;
		ИначеЕсли ОбъектыРасчетовВТЧ Тогда
			Для Каждого СтрокаТЧ Из Объект[ПутьКОбъектамРасчетов[1]] Цикл
				Если СтрокаТЧ.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
					ТребуетсяЗаполнениеОбъектовРасчетовВШапкеИлиТЧ = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметровГенерации.ПутьКДаннымТЧРасшифровкаПлатежа)
			И Не ТребуетсяЗаполнениеОбъектовРасчетовВРасшифровкеПлатежа Тогда
			ДанныеТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметровГенерации.ПутьКДаннымТЧРасшифровкаПлатежа);
			Для Каждого СтрокаТЧ Из ДанныеТЧ Цикл
				Если СтрокаТЧ.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
					ТребуетсяЗаполнениеОбъектовРасчетовВРасшифровкеПлатежа = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ТабЧастиВидыЗапасов <> Неопределено Тогда
		Для Каждого ТабЧастьВидыЗапасов Из ТабЧастиВидыЗапасов Цикл
			Для Каждого СтрокаВидовЗапасов Из Объект[ТабЧастьВидыЗапасов.Ключ] Цикл
				Если СтрокаВидовЗапасов.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка() Тогда
					ТребуетсяЗаполнениеОбъектовРасчетовВШапкеИлиТЧ = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ТребуетсяЗаполнениеОбъектовРасчетовВШапкеИлиТЧ Тогда
		ЗаполнитьОбъектРасчетов(Объект, ДополненныеПараметрыМеханизма.МассивПараметров, Истина, РежимЗаписиДокумента.Запись, ТабЧастиВидыЗапасов);
		ОбъектИзменен = Истина;
	КонецЕсли;
	
	Если ТребуетсяЗаполнениеОбъектовРасчетовВРасшифровкеПлатежа Тогда
		Для Каждого СтруктураПараметровГенерации Из ДополненныеПараметрыМеханизма.МассивПараметров Цикл
			Если ЗначениеЗаполнено(СтруктураПараметровГенерации.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
				ЗаполнитьОбъектРасчетовВРасшифровкеПлатежа(Объект, СтруктураПараметровГенерации);
				ОбъектИзменен = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	УниверсальнаяГенерация - Булево - Значение по умолчанию Ложь.
// 	ФормироватьВТ - Булево - Значение по умолчанию Ложь.
// 	
// Возвращаемое значение:
// 	Строка.
//
Функция ТекстПроверкаИспользованияВРасчетныхРегистрах(УниверсальнаяГенерация = Ложь, ФормироватьВТ = Ложь) Экспорт
	
		ТекстЗапроса = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.УдалитьЗаказПоставщику КАК ОбъектРасчетов,
	|	Аналитика.Организация КАК Организация,
	|	Аналитика.Контрагент КАК Контрагент,
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Договор КАК Договор,
	|	Аналитика.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов
	|ПОМЕСТИТЬ ВТИспользованиеВРасчетныхРегистрах
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.Ссылка  
	|ГДЕ РасчетыСПоставщиками.УдалитьЗаказПоставщику В (&ОбновляемыеДанные)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.УдалитьЗаказКлиента КАК ОбъектРасчетов,
	|	Аналитика.Организация КАК Организация,
	|	Аналитика.Контрагент КАК Контрагент,
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Договор КАК Договор,
	|	Аналитика.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.Ссылка 
	|ГДЕ РасчетыСКлиентами.УдалитьЗаказКлиента В (&ОбновляемыеДанные)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщикамиПоДокументам.УдалитьЗаказПоставщику КАК ОбъектРасчетов,
	|	Аналитика.Организация КАК Организация,
	|	Аналитика.Контрагент КАК Контрагент,
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Договор КАК Договор,
	|	Аналитика.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	РасчетыСПоставщикамиПоДокументам.Валюта КАК ВалютаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам = Аналитика.Ссылка 
	|ГДЕ РасчетыСПоставщикамиПоДокументам.УдалитьЗаказПоставщику В (&ОбновляемыеДанные)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентамиПоДокументам.УдалитьЗаказКлиента КАК ОбъектРасчетов,
	|	Аналитика.Организация КАК Организация,
	|	Аналитика.Контрагент КАК Контрагент,
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Договор КАК Договор,
	|	Аналитика.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	РасчетыСКлиентамиПоДокументам.Валюта КАК ВалютаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам = Аналитика.Ссылка 
	|ГДЕ РасчетыСКлиентамиПоДокументам.УдалитьЗаказКлиента В (&ОбновляемыеДанные)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщикамиПоСрокам.УдалитьОбъектРасчетов КАК ОбъектРасчетов,
	|	Аналитика.Организация КАК Организация,
	|	Аналитика.Контрагент КАК Контрагент,
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Договор КАК Договор,
	|	Аналитика.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	РасчетыСПоставщикамиПоСрокам.Валюта КАК ВалютаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам = Аналитика.Ссылка
	|ГДЕ РасчетыСПоставщикамиПоСрокам.УдалитьОбъектРасчетов В (&ОбновляемыеДанные)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентамиПоСрокам.УдалитьОбъектРасчетов КАК ОбъектРасчетов,
	|	Аналитика.Организация КАК Организация,
	|	Аналитика.Контрагент КАК Контрагент,
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Договор КАК Договор,
	|	Аналитика.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	РасчетыСКлиентамиПоСрокам.Валюта КАК ВалютаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам = Аналитика.Ссылка
	|ГДЕ РасчетыСКлиентамиПоСрокам.УдалитьОбъектРасчетов В (&ОбновляемыеДанные)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентамиПланОплат.УдалитьОбъектРасчетов КАК ОбъектРасчетов,
	|	Аналитика.Организация КАК Организация,
	|	Аналитика.Контрагент КАК Контрагент,
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Договор КАК Договор,
	|	Аналитика.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	РасчетыСКлиентамиПланОплат.Валюта КАК ВалютаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОплат КАК РасчетыСКлиентамиПланОплат
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыСКлиентамиПланОплат.АналитикаУчетаПоПартнерам = Аналитика.Ссылка
	|ГДЕ РасчетыСКлиентамиПланОплат.УдалитьОбъектРасчетов В (&ОбновляемыеДанные)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщикамиПланОплат.УдалитьОбъектРасчетов КАК ОбъектРасчетов,
	|	Аналитика.Организация КАК Организация,
	|	Аналитика.Контрагент КАК Контрагент,
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Договор КАК Договор,
	|	Аналитика.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	РасчетыСПоставщикамиПланОплат.Валюта КАК ВалютаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПланОплат КАК РасчетыСПоставщикамиПланОплат
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыСПоставщикамиПланОплат.АналитикаУчетаПоПартнерам = Аналитика.Ссылка
	|ГДЕ РасчетыСПоставщикамиПланОплат.УдалитьОбъектРасчетов В (&ОбновляемыеДанные)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщикамиПланПоставок.УдалитьОбъектРасчетов КАК ОбъектРасчетов,
	|	Аналитика.Организация КАК Организация,
	|	Аналитика.Контрагент КАК Контрагент,
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Договор КАК Договор,
	|	Аналитика.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	РасчетыСПоставщикамиПланПоставок.Валюта КАК ВалютаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПланПоставок КАК РасчетыСПоставщикамиПланПоставок
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыСПоставщикамиПланПоставок.АналитикаУчетаПоПартнерам = Аналитика.Ссылка
	|ГДЕ РасчетыСПоставщикамиПланПоставок.УдалитьОбъектРасчетов В (&ОбновляемыеДанные)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентамиПланОтгрузок.УдалитьОбъектРасчетов КАК ОбъектРасчетов,
	|	Аналитика.Организация КАК Организация,
	|	Аналитика.Контрагент КАК Контрагент,
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Договор КАК Договор,
	|	Аналитика.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	РасчетыСКлиентамиПланОтгрузок.Валюта КАК ВалютаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОтгрузок КАК РасчетыСКлиентамиПланОтгрузок
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыСКлиентамиПланОтгрузок.АналитикаУчетаПоПартнерам = Аналитика.Ссылка
	|ГДЕ РасчетыСКлиентамиПланОтгрузок.УдалитьОбъектРасчетов В (&ОбновляемыеДанные)
	|
	|";
		
	Если НЕ ФормироватьВТ Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТИспользованиеВРасчетныхРегистрах", "");
	КонецЕсли;
	
	Если УниверсальнаяГенерация Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбновляемыеДанные", "ВЫБРАТЬ ОбновляемыеДанные.Ссылка ИЗ ВТДляОбработки КАК ОбновляемыеДанные");
	КонецЕсли;
			
	Возврат ТекстЗапроса;
	
КонецФункции

// Параметры:
// 	УниверсальнаяГенерация - Булево - Значение по умолчанию Ложь.
// 	ФормироватьВТ - Булево - Значение по умолчанию Ложь.
// 	
// Возвращаемое значение:
// 	Строка.
//
Функция ТекстПроверкаИспользованияВТабличныхЧастях(УниверсальнаяГенерация = Истина, ФормироватьВТ = Ложь) Экспорт
	
	Если УниверсальнаяГенерация Тогда
		ТекстЗапроса = "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сверка.УдалитьОбъектРасчетов КАК ОбъектРасчетов,
		|	Сверка.Ссылка.Организация КАК Организация,
		|	Сверка.Ссылка.Контрагент КАК Контрагент,
		|	Сверка.Партнер КАК Партнер,
		|	Сверка.Договор КАК Договор,
		|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
		|	Сверка.Валюта КАК ВалютаВзаиморасчетов,
		|	Сверка.ТипРасчетов КАК ТипРасчетов
		|ПОМЕСТИТЬ ВТИспользованиеВТЧ
		|ИЗ
		|	Документ.СверкаВзаиморасчетов.ГруппировкиРасчеты КАК Сверка
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК ОбновляемыеДанные
		|	ПО Сверка.УдалитьОбъектРасчетов = ОбновляемыеДанные.Ссылка
		|ГДЕ
		|	НЕ ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ВТИспользованиеВРасчетныхРегистрах КАК ИспользованиеВРасчетныхРегистрах
		|		ГДЕ
		|			Сверка.ОбъектРасчетов = ИспользованиеВРасчетныхРегистрах.ОбъектРасчетов)";
	Иначе
		ТекстЗапроса = "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сверка.УдалитьОбъектРасчетов КАК ОбъектРасчетов,
		|	Сверка.Ссылка.Организация КАК Организация,
		|	Сверка.Ссылка.Контрагент КАК Контрагент,
		|	Сверка.Партнер КАК Партнер,
		|	Сверка.Договор КАК Договор,
		|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
		|	Сверка.Валюта КАК ВалютаВзаиморасчетов,
		|	Сверка.ТипРасчетов КАК ТипРасчетов
		|ПОМЕСТИТЬ ВТИспользованиеВТЧ
		|ИЗ
		|	Документ.СверкаВзаиморасчетов.ГруппировкиРасчеты КАК Сверка
		|ГДЕ
		|	Сверка.УдалитьОбъектРасчетов В (&ОбновляемыеДанные)
		|	И НЕ ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ВТИспользованиеВРасчетныхРегистрах КАК ИспользованиеВРасчетныхРегистрах
		|		ГДЕ
		|			Сверка.ОбъектРасчетов = ИспользованиеВРасчетныхРегистрах.ОбъектРасчетов)";
	КонецЕсли;
	
	Если НЕ ФормироватьВТ Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТИспользованиеВТЧ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Параметры:
// 	Очередь см. ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные.Очередь.
// 	
// Возвращаемое значение:
// 	Булево.
//
Функция ВсеОбъектыРасчетовСгенерированы(Очередь) Экспорт
	
		ОбработчикиГенерации = Новый Массив();
		ОбработчикиГенерации.Добавить("Документ.АктВыполненныхРабот");
		ОбработчикиГенерации.Добавить("Документ.ВозвратТоваровМеждуОрганизациями");
		ОбработчикиГенерации.Добавить("Документ.ВозвратТоваровОтКлиента");
		ОбработчикиГенерации.Добавить("Документ.ВозвратТоваровПоставщику");
		ОбработчикиГенерации.Добавить("Документ.ВыкупВозвратнойТарыКлиентом");
		ОбработчикиГенерации.Добавить("Документ.ВыкупВозвратнойТарыУПоставщика");
		ОбработчикиГенерации.Добавить("Документ.ЗаказКлиента");
		ОбработчикиГенерации.Добавить("Документ.ЗаказПоставщику");
		ОбработчикиГенерации.Добавить("Документ.ЗаявкаНаВозвратТоваровОтКлиента");
		ОбработчикиГенерации.Добавить("Документ.ОперацияПоПлатежнойКарте");
		ОбработчикиГенерации.Добавить("Документ.ОтчетКомиссионера");
		ОбработчикиГенерации.Добавить("Документ.ОтчетКомиссионераОСписании");
		ОбработчикиГенерации.Добавить("Документ.ОтчетКомитенту");
		ОбработчикиГенерации.Добавить("Документ.ОтчетКомитентуОСписании");
		ОбработчикиГенерации.Добавить("Документ.ОтчетПоКомиссииМеждуОрганизациями");
		ОбработчикиГенерации.Добавить("Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании");
		ОбработчикиГенерации.Добавить("Документ.ПервичныйДокумент");
		ОбработчикиГенерации.Добавить("Документ.ПередачаТоваровМеждуОрганизациями");
		ОбработчикиГенерации.Добавить("Документ.ПоступлениеБезналичныхДенежныхСредств");
		ОбработчикиГенерации.Добавить("Документ.ПриобретениеТоваровУслуг");
		ОбработчикиГенерации.Добавить("Документ.ПриобретениеУслугПрочихАктивов");
		ОбработчикиГенерации.Добавить("Документ.ПриходныйКассовыйОрдер");
		ОбработчикиГенерации.Добавить("Документ.РасходныйКассовыйОрдер");
		ОбработчикиГенерации.Добавить("Документ.РеализацияТоваровУслуг");
		ОбработчикиГенерации.Добавить("Документ.РеализацияУслугПрочихАктивов");
		ОбработчикиГенерации.Добавить("Документ.СписаниеБезналичныхДенежныхСредств");
		ОбработчикиГенерации.Добавить("Документ.ТаможеннаяДекларацияИмпорт");
		ОбработчикиГенерации.Добавить("Справочник.ДоговорыКонтрагентов");
		ОбработчикиГенерации.Добавить("Справочник.ДоговорыМеждуОрганизациями");
		ОбработчикиГенерации.Добавить("Справочник.Контрагенты");
		ОбработчикиГенерации.Добавить("Справочник.Организации");
		ОбработчикиГенерации.Добавить("Справочник.Партнеры");
	
		ОбработкаЗавершена = Истина;
		
		Для Каждого Обработчик Из ОбработчикиГенерации Цикл
			Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Очередь, Обработчик) Тогда
				ОбработкаЗавершена = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Возврат ОбработкаЗавершена;
	
КонецФункции

Процедура ДополнитьПараметрыГенерацииИсключениями(ПараметрыГенерации, ИспользованиеВРасчетныхРегистрах, Объект) Экспорт
	
	СсылкаНаЭлемент = Объект.Ссылка;
	ПараметрыГенерацииБезИсключений = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыГенерации);
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить("СправочникСсылка.Организации");
	СписокТипов.Добавить("СправочникСсылка.Контрагенты");
	ОписаниеТипаПоляКонтрагент = Новый ОписаниеТипов(СписокТипов);
	
	ОбъектыРасчетовКорректные = Новый ТаблицаЗначений();
	ОбъектыРасчетовКорректные.Колонки.Добавить("ОбъектРасчетов");
	ОбъектыРасчетовКорректные.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ОбъектыРасчетовКорректные.Колонки.Добавить("Контрагент", Новый ОписаниеТипов(ОписаниеТипаПоляКонтрагент));
	ОбъектыРасчетовКорректные.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ОбъектыРасчетовКорректные.Колонки.Добавить("ТипРасчетов", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРасчетовСПартнерами"));
	ОбъектыРасчетовКорректные.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ОбъектыРасчетовКорректные.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ОбъектыРасчетовКорректные.Колонки.Добавить("ТолькоОстатки", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ПараметрГенерации Из ПараметрыГенерацииБезИсключений Цикл
		
		ОрганизацияВСтроках = ПараметрГенерации.ОрганизацияВСтроках;
		КонтрагентВСтроках  = ПараметрГенерации.КонтрагентВСтроках;
		ПартнерВСтроках     = ПараметрГенерации.ПартнерВСтроках;
		ТолькоОстатки       = Не СсылкаЯвляетсяОбъектомРасчетов(Объект, ПараметрГенерации);

		Если ОрганизацияВСтроках Или КонтрагентВСтроках Или ПартнерВСтроках Тогда
			
			Если ОрганизацияВСтроках Тогда
				Имена = СтрРазделить(ПараметрГенерации.Организация, ".");
				Имена.Удалить(Имена.ВГраница());
				ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтрСоединить(Имена, ".")); // ТабличнаяЧасть 
			Иначе
				ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ПараметрГенерации.ПутьКДаннымТЧРасшифровкаПлатежа); // ТабличнаяЧасть
			КонецЕсли;
		
			Для Каждого Стр Из ТЧ Цикл
				
				Идентификатор = Стр.НомерСтроки;
				
				НовыйКорректныйОбъектРасчетов                 = ОбъектыРасчетовКорректные.Добавить();
				НовыйКорректныйОбъектРасчетов.ОбъектРасчетов  = СсылкаНаЭлемент;
				НовыйКорректныйОбъектРасчетов.ТипРасчетов     = ПараметрГенерации.ТипРасчетов;
				НовыйКорректныйОбъектРасчетов.ТолькоОстатки   = ТолькоОстатки;
				НовыйКорректныйОбъектРасчетов.Валюта = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ПараметрГенерации.ВалютаДокумента);
				НовыйКорректныйОбъектРасчетов.ВалютаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,
					?(ЗначениеЗаполнено(ПараметрГенерации.ВалютаВзаиморасчетов),ПараметрГенерации.ВалютаВзаиморасчетов,ПараметрГенерации.ВалютаДокумента));
				
				Если ОрганизацияВСтроках Тогда
					НовыйКорректныйОбъектРасчетов.Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ПараметрГенерации.Организация, Идентификатор);
				Иначе
					НовыйКорректныйОбъектРасчетов.Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ПараметрГенерации.Организация);
				КонецЕсли;
				
				Если КонтрагентВСтроках Тогда
					НовыйКорректныйОбъектРасчетов.Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ПараметрГенерации.Контрагент, Идентификатор);
				Иначе
					НовыйКорректныйОбъектРасчетов.Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ПараметрГенерации.Контрагент);
				КонецЕсли;
				
				Если ПартнерВСтроках Тогда
					НовыйКорректныйОбъектРасчетов.Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ПараметрГенерации.Партнер, Идентификатор);
				Иначе
					НовыйКорректныйОбъектРасчетов.Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ПараметрГенерации.Партнер);
				КонецЕсли;
				
			КонецЦикла;
				
		Иначе
			
			НовыйКорректныйОбъектРасчетов                 = ОбъектыРасчетовКорректные.Добавить();
			НовыйКорректныйОбъектРасчетов.ТипРасчетов     = ПараметрГенерации.ТипРасчетов;
			НовыйКорректныйОбъектРасчетов.ОбъектРасчетов  = СсылкаНаЭлемент;
			НовыйКорректныйОбъектРасчетов.ТолькоОстатки   = ТолькоОстатки;
			НовыйКорректныйОбъектРасчетов.Организация     = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ПараметрГенерации.Организация);
			НовыйКорректныйОбъектРасчетов.Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ПараметрГенерации.Партнер);
			НовыйКорректныйОбъектРасчетов.Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ПараметрГенерации.Контрагент);
			НовыйКорректныйОбъектРасчетов.Валюта = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ПараметрГенерации.ВалютаДокумента);
			НовыйКорректныйОбъектРасчетов.ВалютаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,
				?(ЗначениеЗаполнено(ПараметрГенерации.ВалютаВзаиморасчетов),ПараметрГенерации.ВалютаВзаиморасчетов,ПараметрГенерации.ВалютаДокумента));
			
		КонецЕсли;
	КонецЦикла;
	
	ДанныеИзРасчетныхРегистров = ИспользованиеВРасчетныхРегистрах.НайтиСтроки(Новый Структура("ОбъектРасчетов", СсылкаНаЭлемент));
	
	Для Каждого КлючРегистра Из ДанныеИзРасчетныхРегистров Цикл
		
		КлючПоиска = Новый Структура("ОбъектРасчетов, Организация, ТипРасчетов, Контрагент, Партнер, ТолькоОстатки, ВалютаВзаиморасчетов");
		ЗаполнитьЗначенияСвойств(КлючПоиска, КлючРегистра);
		КлючПоиска.ТолькоОстатки = Ложь;
		Если Не ОбъектыРасчетовКорректные.НайтиСтроки(КлючПоиска).Количество() Тогда
			Если ПараметрыГенерацииБезИсключений.Количество() = 1 Тогда
				ПараметрыИсточник = ПараметрыГенерацииБезИсключений[0];
			ИначеЕсли ПараметрыГенерацииБезИсключений.Количество() = 2 Тогда
				ПараметрыИсточник = ?(ПараметрыГенерацииБезИсключений[0].ТипРасчетов = КлючПоиска.ТипРасчетов, 
					ПараметрыГенерацииБезИсключений[0],
					ПараметрыГенерацииБезИсключений[1]);
			Иначе
				НайденныйПараметрИсточник = ОбъектыРасчетовКорректные.НайтиСтроки(Новый Структура("Организация, ТипРасчетов", 
					КлючРегистра.Организация,
					КлючРегистра.ТипРасчетов));
				Если НайденныйПараметрИсточник.Количество() = 1 Тогда
					ПараметрыИсточник = ПараметрыГенерацииБезИсключений[ОбъектыРасчетовКорректные.Индекс(НайденныйПараметрИсточник[0])];
				Иначе
					ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Не удалось сгенерировать объект расчетов для элемента: %1.'"),
									СсылкаНаЭлемент));
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыГенерацииПоТолькоОстатки = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыИсточник);
			ЗаполнитьЗначенияСвойств(ПараметрыГенерацииПоТолькоОстатки, КлючРегистра);
			ПараметрыГенерацииПоТолькоОстатки.ТолькоОстатки = Истина;
			ПараметрыГенерации.Добавить(ПараметрыГенерацииПоТолькоОстатки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Описание
// 
// Параметры:
// 	ЭкземплярОбъекта - ДокументСсылка
// 	ПолеКонтрагент - Строка
// Возвращаемое значение:
// 	Строка - Описание
Функция ШаблонГенерацияПустогоОбъектаРасчетов(ЭкземплярОбъекта, ПолеКонтрагент) Экспорт
	
	ПараметрыВзаиморасчетов = Документы[ЭкземплярОбъекта.Метаданные().Имя].ПараметрыВзаиморасчеты();
	
	Если ТипЗнч(ПараметрыВзаиморасчетов) = Тип("Массив") Тогда
		ПараметрыВзаиморасчетов = ПараметрыВзаиморасчетов[0];
	КонецЕсли;
	
	Шаблон = "
		|ВЫБРАТЬ
		|	&ПолеКонтрагента
		|ИЗ
		|	&ИсточникДанных КАК ИсточникДанных
		|ГДЕ
		|(
		|&УсловиеИзменяетРасчеты
		|)
		|И
		|	ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			&РасшифровкаПлатежа КАК ТЧРасшифровкаПлатежа
		|		ГДЕ
		|			ТЧРасшифровкаПлатежа.Ссылка = ИсточникДанных.Ссылка
		|			И ТЧРасшифровкаПлатежа.Ссылка.Проведен
		|			И ТЧРасшифровкаПлатежа.УдалитьЗаказ В (&ПустыеЗначенияОбъектРасчетов)
		|			И ТЧРасшифровкаПлатежа.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка))";
	
	ИсточникДанных = ЭкземплярОбъекта.Метаданные().ПолноеИмя();
	ИсточникДанныхРасшифровкаПлатежа = ИсточникДанных + "." + СтрЗаменить(ПараметрыВзаиморасчетов.ПутьКДаннымТЧРасшифровкаПлатежа, "Объект.", "");
	Шаблон = СтрЗаменить(Шаблон, "&ПолеКонтрагента",        ПолеКонтрагент);
	Шаблон = СтрЗаменить(Шаблон, "&ИсточникДанных",         ИсточникДанных);
	Шаблон = СтрЗаменить(Шаблон, "&РасшифровкаПлатежа",     ИсточникДанныхРасшифровкаПлатежа);
	Шаблон = СтрЗаменить(Шаблон, "&УсловиеИзменяетРасчеты", ПараметрыВзаиморасчетов.ИзменяетРасчетыСтрокой);
	
	Возврат Шаблон;
	
КонецФункции

// Возвращает пустые значения типов, которые могли быть указаны в поле Контрагнет ключа аналитики учета по партнерам
// 
// Возвращаемое значение:
// 	Массив из ОпределяемыйТип.ОбъектРасчетов, Неопределено
Функция ПустыеЗначенияКонтрагент() Экспорт
	
	ПустыеЗначенияКонтрагент = Новый Массив();
	ПустыеЗначенияКонтрагент.Добавить(Неопределено);
	ПустыеЗначенияКонтрагент.Добавить(Справочники.Контрагенты.ПустаяСсылка());
	ПустыеЗначенияКонтрагент.Добавить(Справочники.Организации.ПустаяСсылка());
	
	Возврат ПустыеЗначенияКонтрагент;
	
КонецФункции

// Возвращает массив порций для обработки данных обработчика обновления заполнения объектов расчетов.
// 
// Параметры:
// 	ОбновляемыеДанные - см. ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике
//
// Возвращаемое значение:
// 	Массив из см. ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике.
Функция ПорцииДанныхДляОбработки(ОбновляемыеДанные) Экспорт 
	
	РазмерПорции = 9;
	Счетчик = 0;
	
	Порции = Новый Массив();
	НоваяПрорция = Новый ТаблицаЗначений();
	НоваяПрорция.Колонки.Добавить("Регистратор");
	Для Каждого СтрокаТЧ Из ОбновляемыеДанные Цикл
		Если Счетчик > РазмерПорции Тогда
			Порции.Добавить(НоваяПрорция.Скопировать());
			НоваяПрорция.Очистить();
			Счетчик = 0;
		КонецЕсли;
		СтрокаТЗ = НоваяПрорция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, СтрокаТЧ);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Порции.Добавить(НоваяПрорция);
	
	Возврат Порции;
	
КонецФункции

// Возвращает условие для текста запроса, которое отфильструет только те документы, у которых есть
//	движения по регистрам онлайн взаиморасчетов. Таблица документа должна иметь псевдоним Документ.
//	
// Возвращаемое значение:
// 	Строка - Часть запроса для проверки наличия движений.
Функция ТесктПроверкиДвиженийПоРасчетнымРегистрамОнлайн() Экспорт
	
	Возврат " (ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСКлиентамиПланОплат КАК РасчетыСКлиентамиПланОплат
	|			ГДЕ
	|				Документ.Ссылка = РасчетыСКлиентамиПланОплат.Регистратор)
	|		ИЛИ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСКлиентамиПланОтгрузок КАК РасчетыСКлиентамиПланОтгрузок
	|			ГДЕ
	|				Документ.Ссылка = РасчетыСКлиентамиПланОтгрузок.Регистратор)
	|		ИЛИ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|			ГДЕ
	|				Документ.Ссылка = РасчетыСКлиентамиПоСрокам.Регистратор)
	|		ИЛИ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСПоставщикамиПланОплат КАК РасчетыСПоставщикамиПланОплат
	|			ГДЕ
	|				Документ.Ссылка = РасчетыСПоставщикамиПланОплат.Регистратор)
	|		ИЛИ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСПоставщикамиПланПоставок КАК РасчетыСПоставщикамиПланПоставок
	|			ГДЕ
	|				Документ.Ссылка = РасчетыСПоставщикамиПланПоставок.Регистратор)
	|		ИЛИ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|			ГДЕ
	|				Документ.Ссылка = РасчетыСПоставщикамиПоСрокам.Регистратор))" 
	
КонецФункции

// Возвращает условие для текста запроса, которое отфильструет только те документы, у которых есть
//	движения регистрам офлайн взаиморасчетов. Таблица документа должна иметь псевдоним Документ.
//	
// Возвращаемое значение:
// 	Строка - Часть запроса для проверки наличия движений.
Функция ТесктПроверкиДвиженийПоРасчетнымРегистрамОфлайн() Экспорт
	
	Возврат " (ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	|			ГДЕ
	|				Документ.Ссылка = РасчетыСКлиентамиПоДокументам.Регистратор)
	|		ИЛИ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|			ГДЕ
	|				Документ.Ссылка = РасчетыСКлиентами.Регистратор)
	|		ИЛИ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|			ГДЕ
	|				Документ.Ссылка = РасчетыСПоставщикамиПоДокументам.Регистратор)
	|		ИЛИ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|			ГДЕ
	|				Документ.Ссылка = РасчетыСПоставщиками.Регистратор))" 
	
КонецФункции

// Дополняет текст запроса полями из метаданных регистр заменяя параметр &ДополнительныеПоля.
// 
// Параметры:
// 	Запрос - Запрос - Запрос, который требуется дополнить полями из метаданных регистра.
// 	МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - Метаданные регистра, который используется в запросе.

Процедура ДополнитьЗапросПрочимиПолями(Запрос, МетаданныеРегистра) Экспорт
	
	ИсключаемыеПоля = "Регистратор,ОбъектРасчетов,КорОбъектРасчетов,НомерСтроки,ЗаказКлиента,ЗаказПоставщику,ИсточникГФУРасчетов";
	
	Шаблон = "ДанныеРегистра.[ИмяПоля] КАК [ИмяПоля],";
	ИсключаемыеПоляМассивом = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаемыеПоля);
	ПоляЗапроса = Новый Массив();
	ПоляРегистра = Новый Массив();
	ПоляРегистра.Добавить("Измерения");
	ПоляРегистра.Добавить("Ресурсы");
	ПоляРегистра.Добавить("Реквизиты");
	ПоляРегистра.Добавить("СтандартныеРеквизиты");
	
	Для Каждого ПолеРегистра Из ПоляРегистра Цикл
		Для Каждого Поле Из МетаданныеРегистра[ПолеРегистра] Цикл
			Если ИсключаемыеПоляМассивом.Найти(Поле.Имя) = Неопределено Тогда
				ПоляЗапроса.Добавить(СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
					Шаблон,
					Новый Структура("ИмяПоля", Поле.Имя)));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоля КАК ДополнительныеПоля,", СтрСоединить(ПоляЗапроса, Символы.ПС));
	
КонецПроцедуры

Процедура ЗарегистрироватьСообщениеОНесуществующемОбъекте(МетаданныеРегистра, Регистратор, НомерСтроки) Экспорт
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Не удалось заполнить объект расчетов наборе записей регистра накопления %1, строка № %2
		|в источнике данных объекта расчетов обнаружена ссылка на несуществующий элемент.'"),
		Регистратор,
		НомерСтроки);
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Предупреждение,
		МетаданныеРегистра,
		,
		ТекстСообщения);
		
КонецПроцедуры

// Параметры:
// 	Объект - ДокументОбъект.
// 	
// Возвращаемое значение:
// 	Булево.
//
Функция ЕстьДвиженияПоРасчетнымРегистрам(Объект) Экспорт
	
	ИмяТипДокумента = Объект.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	&ТипДокумента КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|
	| И (&ЕстьДвиженияОнлайн ИЛИ &ЕстьДвиженияОфлайн)"; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЕстьДвиженияОнлайн", ТесктПроверкиДвиженийПоРасчетнымРегистрамОнлайн());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ЕстьДвиженияОфлайн", ТесктПроверкиДвиженийПоРасчетнымРегистрамОфлайн());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ТипДокумента", "Документ." + ИмяТипДокумента);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьПустые() Экспорт
	
	Если НЕ Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|//Расчеты с клиентами
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта КАК ВалютаРасчетов,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
	|	МАКСИМУМ(ВЫБОР КОГДА РасчетыСКлиентами.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ) КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.Активность
	|	И РасчетыСКлиентами.ОбъектРасчетов.Объект = Неопределено
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта
	|
	|//Заполнение для ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта КАК ВалютаРасчетов,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
	|	МАКСИМУМ(ВЫБОР КОГДА РасчетыСКлиентами.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ) КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.Активность
	|	И РасчетыСКлиентами.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И РасчетыСКлиентами.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта КАК ВалютаРасчетов,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
	|	2 КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОплат КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.Активность
	|	И РасчетыСКлиентами.ОбъектРасчетов.Объект = Неопределено
	|
	|ОБЪЕДИНИТЬ
	|
	|//Заполнение для ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта КАК ВалютаРасчетов,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
	|	2 КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОплат КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.Активность
	|	И РасчетыСКлиентами.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И РасчетыСКлиентами.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта КАК ВалютаРасчетов,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
	|	2 КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОтгрузок КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.Активность
	|	И РасчетыСКлиентами.ОбъектРасчетов.Объект = Неопределено
	|
	|ОБЪЕДИНИТЬ
	|
	|//Заполнение для ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта КАК ВалютаРасчетов,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
	|	2 КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОтгрузок КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.Активность
	|	И РасчетыСКлиентами.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И РасчетыСКлиентами.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|
	|//Заполнение пустых полей ОбъектРасчетов для записей, которых нет в онлайн регистрах, но есть
	|//в РасчетыСКлиентами, при этом движения в онлайн регистрах есть.
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта КАК ВалютаРасчетов,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
	|	2 КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.Активность
	|	И НЕ ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|		ГДЕ
	|			РасчетыСКлиентамиПоСрокам.ДокументРегистратор 			= РасчетыСКлиентами.Регистратор
	|			И РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам 	= РасчетыСКлиентами.АналитикаУчетаПоПартнерам
	|			И РасчетыСКлиентамиПоСрокам.ОбъектРасчетов 				= РасчетыСКлиентами.ОбъектРасчетов)
	|	И ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|		ГДЕ
	|			РасчетыСКлиентамиПоСрокам.ДокументРегистратор = РасчетыСКлиентами.Регистратор)
	|	И РасчетыСКлиентами.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта КАК ВалютаРасчетов,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
	|	2 КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.Активность
	|	И НЕ ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.РасчетыСКлиентамиПланОплат КАК РасчетыСКлиентамиПланОплат
	|		ГДЕ
	|			РасчетыСКлиентамиПланОплат.ДокументРегистратор 			= РасчетыСКлиентами.Регистратор
	|			И РасчетыСКлиентамиПланОплат.АналитикаУчетаПоПартнерам 	= РасчетыСКлиентами.АналитикаУчетаПоПартнерам
	|			И РасчетыСКлиентамиПланОплат.ОбъектРасчетов 				= РасчетыСКлиентами.ОбъектРасчетов)
	|	И ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.РасчетыСКлиентамиПланОплат КАК РасчетыСКлиентамиПланОплат
	|		ГДЕ
	|			РасчетыСКлиентамиПланОплат.ДокументРегистратор = РасчетыСКлиентами.Регистратор)
	|	И РасчетыСКлиентами.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта КАК ВалютаРасчетов,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
	|	2 КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.Активность
	|	И НЕ ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.РасчетыСКлиентамиПланОтгрузок КАК РасчетыСКлиентамиПланОтгрузок
	|		ГДЕ
	|			РасчетыСКлиентамиПланОтгрузок.ДокументРегистратор 			= РасчетыСКлиентами.Регистратор
	|			И РасчетыСКлиентамиПланОтгрузок.АналитикаУчетаПоПартнерам 	= РасчетыСКлиентами.АналитикаУчетаПоПартнерам
	|			И РасчетыСКлиентамиПланОтгрузок.ОбъектРасчетов 				= РасчетыСКлиентами.ОбъектРасчетов)
	|	И ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.РасчетыСКлиентамиПланОтгрузок КАК РасчетыСКлиентамиПланОтгрузок
	|		ГДЕ
	|			РасчетыСКлиентамиПланОтгрузок.ДокументРегистратор = РасчетыСКлиентами.Регистратор)
	|	И РасчетыСКлиентами.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|
	|//Расчеты с поставщиками
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаРасчетов,
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
	|	МАКСИМУМ(ВЫБОР КОГДА РасчетыСПоставщиками.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ) КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.Активность
	|	И РасчетыСПоставщиками.ОбъектРасчетов.Объект = Неопределено
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаРасчетов,
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
	|	МАКСИМУМ(ВЫБОР КОГДА РасчетыСПоставщиками.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ) КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.Активность
	|	И РасчетыСПоставщиками.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И РасчетыСПоставщиками.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаРасчетов,
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
	|	2 КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПланОплат КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.Активность
	|	И РасчетыСПоставщиками.ОбъектРасчетов.Объект = Неопределено
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаРасчетов,
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
	|	2 КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПланОплат КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.Активность
	|	И РасчетыСПоставщиками.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И РасчетыСПоставщиками.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаРасчетов,
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
	|	2 КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПланПоставок КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.Активность
	|	И РасчетыСПоставщиками.ОбъектРасчетов.Объект = Неопределено
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаРасчетов,
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
	|	2 КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПланПоставок КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.Активность
	|	И РасчетыСПоставщиками.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И РасчетыСПоставщиками.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектовРасчетов)
	|
	|//Заполнение пустых полей ОбъектРасчетов для записей, которых нет в РасчетыСПоставщикамиПоСрокам, но есть
	|//в РасчетыСПоставщиками, при этом движения в РасчетыСПоставщикамиПоСрокам есть.
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаРасчетов,
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
	|	2 КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.Активность
	|	И НЕ ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|		ГДЕ
	|			РасчетыСПоставщикамиПоСрокам.ДокументРегистратор 			= РасчетыСПоставщиками.Регистратор
	|			И РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам 	= РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
	|			И РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов 				= РасчетыСПоставщиками.ОбъектРасчетов)
	|	И ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|		ГДЕ
	|			РасчетыСПоставщикамиПоСрокам.ДокументРегистратор = РасчетыСПоставщиками.Регистратор)
	|	И РасчетыСПоставщиками.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаРасчетов,
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
	|	2 КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.Активность
	|	И НЕ ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.РасчетыСПоставщикамиПланОплат КАК РасчетыСПоставщикамиПланОплат
	|		ГДЕ
	|			РасчетыСПоставщикамиПланОплат.ДокументРегистратор 			= РасчетыСПоставщиками.Регистратор
	|			И РасчетыСПоставщикамиПланОплат.АналитикаУчетаПоПартнерам 	= РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
	|			И РасчетыСПоставщикамиПланОплат.ОбъектРасчетов 				= РасчетыСПоставщиками.ОбъектРасчетов)
	|	И ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.РасчетыСПоставщикамиПланОплат КАК РасчетыСПоставщикамиПланОплат
	|		ГДЕ
	|			РасчетыСПоставщикамиПланОплат.ДокументРегистратор = РасчетыСПоставщиками.Регистратор)
	|	И РасчетыСПоставщиками.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаРасчетов,
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
	|	2 КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.Активность
	|	И НЕ ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.РасчетыСПоставщикамиПланПоставок КАК РасчетыСПоставщикамиПланПоставок
	|		ГДЕ
	|			РасчетыСПоставщикамиПланПоставок.ДокументРегистратор 			= РасчетыСПоставщиками.Регистратор
	|			И РасчетыСПоставщикамиПланПоставок.АналитикаУчетаПоПартнерам 	= РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
	|			И РасчетыСПоставщикамиПланПоставок.ОбъектРасчетов 				= РасчетыСПоставщиками.ОбъектРасчетов)
	|	И ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.РасчетыСПоставщикамиПланПоставок КАК РасчетыСПоставщикамиПланПоставок
	|		ГДЕ
	|			РасчетыСПоставщикамиПланПоставок.ДокументРегистратор = РасчетыСПоставщиками.Регистратор)
	|	И РасчетыСПоставщиками.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистраторРасчетов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РегистраторРасчетов.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РегистраторРасчетов.Валюта КАК ВалютаРасчетов,
	|	РегистраторРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ЭтоРасчетыСКлиентами,
	|	1 КАК ПорядокОбработки
	|ИЗ
	|	Документ.РегистраторРасчетов КАК РегистраторРасчетов
	|ГДЕ
	|	РегистраторРасчетов.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОбработки
	|";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ПустыеЗначенияОбъектРасчетов());
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	ТаблицаОбъектов.Свернуть("АналитикаУчетаПоПартнерам,ОбъектРасчетов,ВалютаРасчетов,ЭтоРасчетыСКлиентами,ПорядокОбработки");
	Для Каждого Стр из ТаблицаОбъектов Цикл
		Если ЗначениеЗаполнено(Стр.АналитикаУчетаПоПартнерам) Тогда
			ОсновныеПараметры = ОперативныеВзаиморасчетыСервер.СтруктураПараметровЗаполненияВзаиморасчетов();
			ЗаполнитьЗначенияСвойств(ОсновныеПараметры,Стр);
			ОсновныеПараметры.НачальноеЗаполнение = Ложь;
			ОперативныеВзаиморасчетыСервер.ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОчиститьОбъектыРасчетов(Объект, МассивСтруктур)
	
	Для Каждого СтруктураПараметров Из МассивСтруктур Цикл
		
		РеквизитОбъектРасчетов     = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ОбъектРасчетов);
		ЭтоСправочник                 = СтруктураПараметров.ЭтоСправочник;
		
		Если РеквизитОбъектРасчетов = Неопределено И НЕ ЭтоСправочник Тогда
			Возврат;
		КонецЕсли;
		
		ТЧЭтапыОплаты              = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
		
		Если РеквизитОбъектРасчетов <> Неопределено Тогда
			Если СтрРазделить(СтруктураПараметров.ОбъектРасчетов,".").Количество() = 3 Тогда
				Для Каждого СтрокаТЧ Из РеквизитОбъектРасчетов.Данные Цикл
					СтрокаТЧ[РеквизитОбъектРасчетов.Имя] = Справочники.ОбъектыРасчетов.ПустаяСсылка();
				КонецЦикла;
			Иначе
				РеквизитОбъектРасчетов.Данные[РеквизитОбъектРасчетов.Имя] = Справочники.ОбъектыРасчетов.ПустаяСсылка();
			КонецЕсли;
			Если ТЧЭтапыОплаты <> Неопределено И ТЧЭтапыОплаты.Количество() > 0 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТЧЭтапыОплаты[0],"ОбъектРасчетов") Тогда
				Для Каждого СтрокаТЧ Из ТЧЭтапыОплаты Цикл
					СтрокаТЧ.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.ЭтоПродажаЗакупка  И ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
			ТЧРасшифровка = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа);
			ТЧРасшифровка.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитыСправочникаОбъектыРасчетов()
	
	СлужебныеРеквизиты = Новый Массив;
	СлужебныеРеквизиты.Добавить("Ссылка");
	СлужебныеРеквизиты.Добавить("ПометкаУдаления");
	СлужебныеРеквизиты.Добавить("Объект");
	СлужебныеРеквизиты.Добавить("Организация");
	СлужебныеРеквизиты.Добавить("ТипРасчетов");
	СлужебныеРеквизиты.Добавить("ТипСсылки");
	СлужебныеРеквизиты.Добавить("УникальныйИдентификатор");
	
	РеквизитыСправочника = Метаданные.Справочники.ОбъектыРасчетов.Реквизиты;
	
	Реквизиты = Новый Массив();
	
	Для Каждого Реквизит Из РеквизитыСправочника Цикл
		Если СлужебныеРеквизиты.Найти(Реквизит.Имя) = Неопределено Тогда
			Реквизиты.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Реквизиты.Добавить("Наименование");
	
	Возврат Реквизиты;
	
КонецФункции

//	Параметры:
//	
// Возвращаемое значение:
// 	ТаблицаЗначений - 
// 		* Ссылка - СправочникСсылка.ОбъектыРасчетов - Ссылка.
//
Функция ПолучитьОбъектыРасчетовПоФилиалу(МассивСсылок, Организация, ТипРасчетов, ДополнительныеКритерииПоиска = Неопределено)
	
	Если ДополнительныеКритерииПоиска = Неопределено Тогда
		ДополнительныеКритерииПоиска = ДополнительныеКритерииПоиска();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ОбъектыРасчетов.Объект КАК Объект,
		|	ОбъектыРасчетов.Контрагент КАК Контрагент,
		|	ОбъектыРасчетов.Партнер КАК Партнер,
		|	ОбъектыРасчетов.Ссылка КАК Ссылка,
		|	ОбъектыРасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ОбъектыРасчетов.ТолькоОстатки КАК ТолькоОстатки,
		|	СУММА(1) КАК Количество
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	(ОбъектыРасчетов.Организация = &Организация 
		|		ИЛИ ОбъектыРасчетов.Организация.ГоловнаяОрганизация = &Организация)
		|	И ОбъектыРасчетов.Объект В(&МассивСсылок)
		|	И (&ЛюбойТип
		|			ИЛИ ОбъектыРасчетов.ТипРасчетов = &ТипРасчетов)
		|	И (&ЛюбойКонтрагент
		|			ИЛИ ОбъектыРасчетов.Контрагент = &Контрагент)
		|	И (&ЛюбойПартнер
		|			ИЛИ ОбъектыРасчетов.Партнер = &Партнер)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектыРасчетов.Объект,
		|	ОбъектыРасчетов.Контрагент,
		|	ОбъектыРасчетов.Партнер,
		|	ОбъектыРасчетов.ТолькоОстатки,
		|	ОбъектыРасчетов.Ссылка";
	
	Запрос.УстановитьПараметр("МассивСсылок",     МассивСсылок);
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("ТипРасчетов",      ТипРасчетов);
	Запрос.УстановитьПараметр("Партнер",          ДополнительныеКритерииПоиска.Партнер);
	Запрос.УстановитьПараметр("Контрагент",       ДополнительныеКритерииПоиска.Контрагент);
	Запрос.УстановитьПараметр("ЛюбойТип",         ?(ТипРасчетов = Неопределено, Истина, Ложь));
	Запрос.УстановитьПараметр("ЛюбойПартнер",     ?(ДополнительныеКритерииПоиска.Партнер     = Неопределено, Истина, Ложь));
	Запрос.УстановитьПараметр("ЛюбойКонтрагент",  ?(ДополнительныеКритерииПоиска.Контрагент  = Неопределено, Истина, Ложь));
	
	ОбъектыРасчетов = Запрос.Выполнить().Выгрузить();
	ОбъектыРасчетов.Индексы.Добавить("Объект");
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		СтрокиОбъектов = ОбъектыРасчетов.НайтиСтроки(Новый Структура("Объект", Ссылка));
		Если Не СтрокиОбъектов.Количество() Тогда
			НоваяСтрока = ОбъектыРасчетов.Добавить();
			НоваяСтрока.Объект = Ссылка;
		Иначе
			Для Каждого СтрокаОбъектаРасчетов Из СтрокиОбъектов Цикл
				Если СтрокаОбъектаРасчетов.Количество > 1 Тогда
					ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='По ключу ""%1, %2, %3, %4"", найдено несколько объектов расчетов.'"),
						СтрокаОбъектаРасчетов.ТипРасчетов, Ссылка, Организация, СтрокаОбъектаРасчетов.Партнер, СтрокаОбъектаРасчетов.Контрагент));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектыРасчетов;
	
КонецФункции

Процедура ДополнитьТаблицуИспользованияОбъектовРасчетов(ТаблицаРегистров, ИмяРегистра, ИмяИзмеренияРеквизита);
	
	Если ТаблицаРегистров.Колонки.Количество() = 0 Тогда
		ТаблицаРегистров.Колонки.Добавить("ИмяРегистра");
		ТаблицаРегистров.Колонки.Добавить("ИмяИзмеренияРеквизита")
	КонецЕсли;
	
	НоваяСтрокаТЗ = ТаблицаРегистров.Добавить();
	НоваяСтрокаТЗ.ИмяРегистра = ИмяРегистра;
	НоваяСтрокаТЗ.ИмяИзмеренияРеквизита = ИмяИзмеренияРеквизита;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектРасчетов(Объект, МассивСтруктур, ОбновлениеДанных = Ложь, РежимЗаписи = Неопределено, ТабЧастиВидыЗапасов = Неопределено)
	
	Для Каждого СтруктураПараметров Из МассивСтруктур Цикл
		
		РеквизитОбъектРасчетов     = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(Объект, СтруктураПараметров.ОбъектРасчетов);
		ЭтоСправочник              = СтруктураПараметров.ЭтоСправочник;
		
		Если (РеквизитОбъектРасчетов = Неопределено ИЛИ НЕ СтруктураПараметров.ИзменяетРасчеты) И НЕ ЭтоСправочник Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоЗаказ                   = СтруктураПараметров.ЭтоЗаказ;
		ЭтоПродажаЗакупка          = СтруктураПараметров.ЭтоПродажаЗакупка;
		ЭтоПлатежИлиПрочийДокумент = СтруктураПараметров.ЭтоПлатежИлиПрочийДокумент;
		ТипРасчетов                = СтруктураПараметров.ТипРасчетов;
		ОрганизацияДоговора        = СтруктураПараметров.ОрганизацияДоговора;
		
		ИмяРеквизитаТЧЗаказ        = СтруктураПараметров.ИмяРеквизитаТЧЗаказ;
		Организация                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
		ЗаказОснование             = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ЗаказОснование);
		ТЧ                         = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧ);
		ТЧЭтапыОплаты              = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
		
		Договор               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор);
		НакладнаяПоЗаказам    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.НакладнаяПоЗаказам, , Ложь);
		Если СтруктураПараметров.Свойство("СсылкаНового") Тогда
			Ссылка = СтруктураПараметров.СсылкаНового;
		Иначе
			Ссылка = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Ссылка);
		КонецЕсли;
		
		ОбъектРасчетовНеНужен      = Ложь;
		
		ПорядокРасчетов            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПорядокРасчетов);
		Если ПорядокРасчетов = Неопределено И ЗначениеЗаполнено(Договор) Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов");
		КонецЕсли;
		
		ДополнительныеКритерииПоиска = ДополнительныеКритерииПоиска();
		ДополнительныеКритерииПоиска.Контрагент = ?(Не СтруктураПараметров.КонтрагентВСтроках,
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент),
			Неопределено);
		ДополнительныеКритерииПоиска.Партнер = ?(Не СтруктураПараметров.ПартнерВСтроках,
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер),
			Неопределено);
		
		ОбъектРасчетовНезаполненнойСтроки = Неопределено;
		ЗаполнятьПоПустомуЗаказу = Ложь;

		Если ОбновлениеДанных Тогда
			ДополнительныеКритерииПоиска.ВалютаВзаиморасчетов = ?(ЗначениеЗаполнено(СтруктураПараметров.ВалютаВзаиморасчетов) 
					И НЕ СтруктураПараметров.ВалютаВзаиморасчетовВСтроках,
				ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаВзаиморасчетов),
				ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаДокумента));
			ДополнительныеКритерииПоиска.ОбновлениеИБ = Истина;
		КонецЕсли;
			
		//Определение.
		ДополнительныеКритерииПоиска.ВернутьПервый = Истина;
		Если СсылкаЯвляетсяОбъектомРасчетов(Объект, СтруктураПараметров) Тогда
			Если ОбновлениеДанных Тогда
				
				ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(
					Ссылка,
					ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация),
					ТипРасчетов,
					ДополнительныеКритерииПоиска);
			Иначе
				ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(Ссылка, Организация, ТипРасчетов, ДополнительныеКритерииПоиска);
			КонецЕсли;
		ИначеЕсли ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
			И (ЭтоЗаказ ИЛИ ЭтоПродажаЗакупка ИЛИ ЭтоПлатежИлиПрочийДокумент И ЗначениеЗаполнено(СтруктураПараметров.ОбъектРасчетов))
			ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным И ЭтоЗаказ Тогда
				
			Если НЕ ЗначениеЗаполнено(Договор) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Не заполнено поле ""Договор"".'"),
									Договор));
			КонецЕсли;
			
			ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(Договор, Организация, ТипРасчетов, ДополнительныеКритерииПоиска);
			Если НЕ ЗначениеЗаполнено(ОбъектРасчетов) И ЗначениеЗаполнено(ОрганизацияДоговора) Тогда
				ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(Договор, ОрганизацияДоговора, ТипРасчетов, ДополнительныеКритерииПоиска);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбъектРасчетов)
				И РежимЗаписи = РежимЗаписиДокумента.Проведение
				И НЕ ОбновлениеИнформационнойБазы.ОтложенноеОбновлениеЗавершено() Тогда
				
				ДогенерироватьОбъектыРасчетов(Договор);
				ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(Договор, Организация, ТипРасчетов, ДополнительныеКритерииПоиска);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбъектРасчетов) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Не удалось найти объект расчетов для договора %1.'"),
									Договор));
			КонецЕсли;
			
		ИначеЕсли ЭтоПродажаЗакупка И НакладнаяПоЗаказам И НЕ ЗначениеЗаполнено(ИмяРеквизитаТЧЗаказ) И ЗначениеЗаполнено(ЗаказОснование) 
			ИЛИ ЭтоПлатежИлиПрочийДокумент И ЗначениеЗаполнено(ЗаказОснование) И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам Тогда
			
			ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(ЗаказОснование, Организация, ТипРасчетов, ДополнительныеКритерииПоиска);
			
			Если НЕ ЗначениеЗаполнено(ОбъектРасчетов)
				И РежимЗаписи = РежимЗаписиДокумента.Проведение
				И НЕ ОбновлениеИнформационнойБазы.ОтложенноеОбновлениеЗавершено() Тогда
				
				ДогенерироватьОбъектыРасчетов(ЗаказОснование);
				ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(ЗаказОснование, Организация, ТипРасчетов, ДополнительныеКритерииПоиска);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбъектРасчетов) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Не удалось найти объект расчетов для %1. Проверьте соответствие ключевых реквизитов заказу.'"),
									ЗаказОснование));
			КонецЕсли;
			
		ИначеЕсли ЭтоПродажаЗакупка И НакладнаяПоЗаказам И ЗначениеЗаполнено(ИмяРеквизитаТЧЗаказ) 
			И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам Тогда
			
			Заказы = ТЧ.ВыгрузитьКолонку(ИмяРеквизитаТЧЗаказ);
			
			ОбъектРасчетовНезаполненнойСтроки = Неопределено;
			КолонкаЗаказыПуста = Истина;
			ЕстьСтрокиСПустымЗаказом = Ложь;
			Если Заказы.Количество() > 0 Тогда
				Для Каждого СтрокаТЧ Из Заказы Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ) Тогда
						КолонкаЗаказыПуста = Ложь;
					Иначе
						ЕстьСтрокиСПустымЗаказом = Истина;
						ЗаполнятьПоПустомуЗаказу = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьСтрокиСПустымЗаказом И ОбновлениеДанных И Не СтруктураПараметров.КонтрагентВСтроках 
						И Не СтруктураПараметров.ПартнерВСтроках Тогда 
						ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Заказы, Неопределено);
						
						ПараметрыПоиска = ПолучитьПараметрыОбъектаРасчетов();
						ПараметрыПоиска.Партнер                 = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(
							Объект, СтруктураПараметров.Партнер);
						ПараметрыПоиска.Контрагент              = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(
							Объект, СтруктураПараметров.Контрагент);
						ПараметрыПоиска.НаправлениеДеятельности = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(
							Объект, СтруктураПараметров.НаправлениеДеятельности);
						ПараметрыПоиска.Организация             = Организация;
						ПараметрыПоиска.Договор                 = Договор;
						ПараметрыПоиска.ТипРасчетов             = ТипРасчетов;
						
						ОбъектРасчетовНезаполненнойСтроки = НайтиОбъектРасчетовПоАналитикеУчетаПоПартнерам(ПараметрыПоиска);
				КонецЕсли;
				
				Если Не КолонкаЗаказыПуста Тогда
					ОбъектРасчетов = ПолучитьОбъектыРасчетовПоСсылкам(Заказы, Организация, ТипРасчетов, ДополнительныеКритерииПоиска);
				КонецЕсли;
			Иначе
				Возврат;
			КонецЕсли;
			
			Если Не ОбъектРасчетов = Неопределено Тогда 
				Для Каждого Элемент Из ОбъектРасчетов Цикл
					
					Если НЕ ЗначениеЗаполнено(Элемент.Значение) 
						И РежимЗаписи = РежимЗаписиДокумента.Проведение 
						И НЕ ОбновлениеИнформационнойБазы.ОтложенноеОбновлениеЗавершено() Тогда
						
						ДогенерироватьОбъектыРасчетов(Элемент.Ключ);
						ОбъектРасчетов.Вставить(Элемент.Ключ,
							ПолучитьОбъектРасчетовПоСсылке(Элемент.Ключ, Организация, ТипРасчетов, ДополнительныеКритерииПоиска));
						
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбъектРасчетов.Получить(Элемент.Ключ)) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
						ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='Не удалось найти объект расчетов для %1. Проверьте соответствие ключевых реквизитов заказу.'"),
											Элемент.Ключ));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		// Корректировки реализации и приобретения.
		ИначеЕсли ЭтоПродажаЗакупка И ЗначениеЗаполнено(СтруктураПараметров.Ссылка) И СтруктураПараметров.Ссылка <> "Объект.Ссылка" 
			И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
				ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным
				ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным
				ИЛИ НЕ НакладнаяПоЗаказам И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам) Тогда
			ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(
					ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Ссылка),
					Организация,
					СтруктураПараметров.ТипРасчетов,
					ДополнительныеКритерииПоиска);
			
			Если НЕ ЗначениеЗаполнено(ОбъектРасчетов)
				И РежимЗаписи = РежимЗаписиДокумента.Проведение
				И НЕ ОбновлениеИнформационнойБазы.ОтложенноеОбновлениеЗавершено() Тогда
				
				ДогенерироватьОбъектыРасчетов(ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Ссылка));
				ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Ссылка),
					Организация, 
					СтруктураПараметров.ТипРасчетов, 
					ДополнительныеКритерииПоиска);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбъектРасчетов) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Не удалось найти объект расчетов для %1.'"),
									Объект));
			КонецЕсли;
		Иначе
			ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();
			ОбъектРасчетовНеНужен = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектРасчетов) И Не ОбъектРасчетовНеНужен 
			И (ЭтоСправочник ИЛИ ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, "Объект.Проведен")) Тогда
			Если ОбновлениеДанных И Не СтруктураПараметров.КонтрагентВСтроках 
				И Не СтруктураПараметров.ПартнерВСтроках Тогда
					
					ПараметрыПоиска = ПолучитьПараметрыОбъектаРасчетов();
					ПараметрыПоиска.Партнер                 = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(
						Объект, СтруктураПараметров.Партнер);
					ПараметрыПоиска.Контрагент              = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(
						Объект, СтруктураПараметров.Контрагент);
					ПараметрыПоиска.НаправлениеДеятельности = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(
						Объект, СтруктураПараметров.НаправлениеДеятельности);
					ПараметрыПоиска.Организация             = Организация;
					ПараметрыПоиска.Договор                 = Договор;
					ПараметрыПоиска.ТипРасчетов             = ТипРасчетов;
					ПараметрыПоиска.Вставить("ВалютаВзаиморасчетов", ДополнительныеКритерииПоиска.ВалютаВзаиморасчетов);
					
					ОбъектРасчетов = НайтиОбъектРасчетовПоАналитикеУчетаПоПартнерам(ПараметрыПоиска);
					
					Если Не ЗначениеЗаполнено(ОбъектРасчетов) И ЕстьДвиженияПоРасчетнымРегистрам(Объект) Тогда

						//Если расчеты по договорам и партнер и контрагент в документе отличается о таковых в договоре
						//подбираем объект расчетов по тем, что в договоре
						Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
							И (ЭтоЗаказ ИЛИ ЭтоПродажаЗакупка ИЛИ ЭтоПлатежИлиПрочийДокумент И ЗначениеЗаполнено(СтруктураПараметров.ОбъектРасчетов)) Тогда
								Если ЗначениеЗаполнено(Договор) И ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
									ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(Договор, Организация, ТипРасчетов);
								КонецЕсли;
						КонецЕсли;
							
						//++ Локализация
						//В документе ОперацияПоЯндексКассе реквизит ОбъектРасчетов обрабатывается как одна 
						//строка ТЧ РасшифровкаПлатежа
						Если ТипЗнч(Объект) = Тип("ДокументОбъект.ОперацияПоЯндексКассе")
							И Не ЗначениеЗаполнено(Объект.ОбъектРасчетов) 
							И ЗначениеЗаполнено(Объект.УдалитьОбъектРасчетов) Тогда
								ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(
									Объект.УдалитьОбъектРасчетов,
									ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация),
									ТипРасчетов,
									ДополнительныеКритерииПоиска);
						КонецЕсли;
						//-- Локализация

						//Для возврата по заявке способ компенсации должен совпадать
						Если Не ЗначениеЗаполнено(ОбъектРасчетов) И Не (ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") И ЗначениеЗаполнено(Объект.ЗаявкаНаВозвратТоваровОтКлиента)
							И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаявкаНаВозвратТоваровОтКлиента, "СпособКомпенсации") <> Объект.СпособКомпенсации) Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось заполнить объект расчетов в документе: %1'"),
									Ссылка);
				
								ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Объект.Метаданные(),
									,
									ТекстСообщения);
						КонецЕсли;
					КонецЕсли;
			Иначе
				Если ОбновлениеДанных И МассивСтруктур.Количество() = 1 
					Или Не ОбновлениеДанных Тогда
					ВызватьИсключение (НСтр("ru = 'Не удалось найти объект расчетов.'"))
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЭтоДокумент = Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка));
		
		Если НЕ ЭтоДокумент
			ИЛИ (РежимЗаписи = РежимЗаписиДокумента.Проведение
				ИЛИ РежимЗаписи = РежимЗаписиДокумента.Запись И ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект,"Объект.Проведен")) Тогда
			//Присвоение.
			Если РеквизитОбъектРасчетов <> Неопределено Тогда
				Если ТипЗнч(ОбъектРасчетов) = Тип("Соответствие") Тогда
					Для Каждого СтрокаТЧ Из ТЧ Цикл
						СтрокаТЧ[РеквизитОбъектРасчетов.Имя] = ОбъектРасчетов[СтрокаТЧ[ИмяРеквизитаТЧЗаказ]];

						Если Не ЗначениеЗаполнено(СтрокаТЧ[ИмяРеквизитаТЧЗаказ]) 
							И Не ЗначениеЗаполнено(СтрокаТЧ[РеквизитОбъектРасчетов.Имя])
							И ЗаполнятьПоПустомуЗаказу 
							И ЗначениеЗаполнено(ОбъектРасчетовНезаполненнойСтроки) 
							И ОбновлениеДанных Тогда
								СтрокаТЧ[РеквизитОбъектРасчетов.Имя] = ОбъектРасчетовНезаполненнойСтроки; 
						КонецЕсли;

					КонецЦикла;
					Если ТЧЭтапыОплаты <> Неопределено И ТЧЭтапыОплаты.Количество() > 0
						И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТЧЭтапыОплаты[0], "Заказ") Тогда
						Для Каждого СтрокаТЧ Из ТЧЭтапыОплаты Цикл
							СтрокаТЧ.ОбъектРасчетов = ОбъектРасчетов[СтрокаТЧ.Заказ];

							Если Не ЗначениеЗаполнено(СтрокаТЧ.Заказ) 
								И Не ЗначениеЗаполнено(СтрокаТЧ.ОбъектРасчетов)
								И ЗаполнятьПоПустомуЗаказу 
								И ЗначениеЗаполнено(ОбъектРасчетовНезаполненнойСтроки)
								И ОбновлениеДанных Тогда
									СтрокаТЧ.ОбъектРасчетов = ОбъектРасчетовНезаполненнойСтроки;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ОбновлениеДанных И ТабЧастиВидыЗапасов <> Неопределено Тогда
						Для Каждого ТЧВидыЗапасов Из ТабЧастиВидыЗапасов Цикл
							Для Каждого СтрокаТЧ Из Объект[ТЧВидыЗапасов.Ключ] Цикл
								Если Не ЗначениеЗаполнено(СтрокаТЧ.ОбъектРасчетов) Тогда
									СтрокаТЧ.ОбъектРасчетов = ОбъектРасчетов[СтрокаТЧ[ТЧВидыЗапасов.Значение]];

									Если Не ЗначениеЗаполнено(СтрокаТЧ[ТЧВидыЗапасов.Значение]) 
										И Не ЗначениеЗаполнено(СтрокаТЧ.ОбъектРасчетов)
										И ЗаполнятьПоПустомуЗаказу 
										И ЗначениеЗаполнено(ОбъектРасчетовНезаполненнойСтроки) Тогда
										СтрокаТЧ.ОбъектРасчетов = ОбъектРасчетовНезаполненнойСтроки;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				Иначе
					Если СтрРазделить(СтруктураПараметров.ОбъектРасчетов,".").Количество() = 3 Тогда
						Для Каждого СтрокаТЧ Из РеквизитОбъектРасчетов.Данные Цикл
							СтрокаТЧ[РеквизитОбъектРасчетов.Имя] = ОбъектРасчетов;
						КонецЦикла;
					Иначе
						РеквизитОбъектРасчетов.Данные[РеквизитОбъектРасчетов.Имя] = ОбъектРасчетов;
					КонецЕсли;
					Если ТЧЭтапыОплаты <> Неопределено И ТЧЭтапыОплаты.Количество() > 0 
						И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТЧЭтапыОплаты[0],"ОбъектРасчетов") Тогда
						Для Каждого СтрокаТЧ Из ТЧЭтапыОплаты Цикл
							СтрокаТЧ.ОбъектРасчетов = ОбъектРасчетов;
						КонецЦикла;
					КонецЕсли;
					Если ОбновлениеДанных И ТабЧастиВидыЗапасов <> Неопределено Тогда
						Для Каждого ТЧВидыЗапасов Из ТабЧастиВидыЗапасов Цикл
							Для Каждого СтрокаТЧ Из Объект[ТЧВидыЗапасов.Ключ] Цикл
								Если Не ЗначениеЗаполнено(СтрокаТЧ.ОбъектРасчетов) Тогда
									СтрокаТЧ.ОбъектРасчетов = ОбъектРасчетов;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбъектыРасчетовСервер.ПереформироватьНекорректныеОнлайнДвижения";
	Обработчик.Версия = "11.5.6.122";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2601b1d8-4874-4f64-a20c-0dfde6940f39");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбъектыРасчетовСервер.ЗарегистрироватьДанныеДляПереформированияОнлайнДвижений";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Исправляет некорректные и задвоенные движения в расчетных регистрах.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.РегистраторРасчетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентамиПланОплат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

Функция ЭкземплярыТиповОбъектовРасчетов()
	
	ЭкземплярыОбъектов = Новый Массив();
	ЭкземплярыОбъектов.Добавить(Документы.АвансовыйОтчет.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.АктВыполненныхРабот.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ВозвратТоваровМеждуОрганизациями.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ВозвратТоваровОтКлиента.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ВозвратТоваровПоставщику.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ВыкупВозвратнойТарыКлиентом.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ВыкупВозвратнойТарыУПоставщика.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ВыкупПринятыхНаХранениеТоваров.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ВыкупТоваровХранителем.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ЗаказКлиента.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ЗаказПоставщику.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ОперацияПоПлатежнойКарте.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ОтчетКомиссионера.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ОтчетКомиссионераОСписании.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ОтчетКомитенту.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ОтчетКомитентуОСписании.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ОтчетПоКомиссииМеждуОрганизациями.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ПервичныйДокумент.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ПоступлениеБезналичныхДенежныхСредств.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ПриобретениеТоваровУслуг.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ПриобретениеУслугПрочихАктивов.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ПриходныйКассовыйОрдер.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.РасходныйКассовыйОрдер.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.РеализацияУслугПрочихАктивов.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.СписаниеБезналичныхДенежныхСредств.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.СписаниеПринятыхНаХранениеТоваров.ПустаяСсылка());
	ЭкземплярыОбъектов.Добавить(Документы.ТаможеннаяДекларацияИмпорт.ПустаяСсылка());
	//++ Локализация
	ЭкземплярыОбъектов.Добавить(Документы.ОперацияПоЯндексКассе.ПустаяСсылка());
	//-- Локализация
	
	Возврат ЭкземплярыОбъектов;
	
КонецФункции

Функция ПолныеИменаТиповОбъектовРасчетов()
	
	ЭкземплярыТиповОбъектовРасчетов = ЭкземплярыТиповОбъектовРасчетов();
	ПолныеИмена = Новый Массив();
	
	Для Каждого ТипОбъектаРасчетов Из ЭкземплярыТиповОбъектовРасчетов Цикл
		ПолныеИмена.Добавить(ТипОбъектаРасчетов.Метаданные().ПолноеИмя());
	КонецЦикла;
	
	Возврат СтрСоединить(ПолныеИмена, ",");
	
КонецФункции

// Возвращает условие генерации объекта расчетов
// 
// Параметры:
// 	ЭкземплярОбъекта - ДокументОбъект - документ для которого определяется условие.
// Возвращаемое значение:
// 	Строка - Описание - часть запроса условия.
Функция УсловиеГенерацииОбъектаРасчетов(ЭкземплярОбъекта)
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЭкземплярОбъекта);
	СтруктураПараметрыВзаиморасчетов = Менеджер.ПараметрыВзаиморасчеты();

	
	Если ТипЗнч(СтруктураПараметрыВзаиморасчетов) = Тип("Массив")
		И СтруктураПараметрыВзаиморасчетов.Количество() Тогда
		ПараметрыВзаиморасчетов = СтруктураПараметрыВзаиморасчетов[0];
	Иначе
		ПараметрыВзаиморасчетов = СтруктураПараметрыВзаиморасчетов;
	КонецЕсли;
	
	УсловиеГенерации = "
	|(ЛОЖЬ ИЛИ
	|	&УсловиеГенерацииОбъектовРасчетов
	|)
	|";

	Если ПараметрыВзаиморасчетов.НакладнаяПоЗаказам = ЛОЖЬ
		ИЛИ Не ЗначениеЗаполнено(ПараметрыВзаиморасчетов.НакладнаяПоЗаказам)Тогда
		НакладнаяПоЗаказам = "ЛОЖЬ";
	ИначеЕсли ПараметрыВзаиморасчетов.НакладнаяПоЗаказам = ИСТИНА Тогда
		НакладнаяПоЗаказам = "ИСТИНА";
	Иначе
		НакладнаяПоЗаказам = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ИсточникДанных.%1",
			СтрЗаменить(ПараметрыВзаиморасчетов.НакладнаяПоЗаказам, "Объект.", ""));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВзаиморасчетов.УсловныйПорядокРасчетов) Тогда
		ПорядокРасчетов = ПараметрыВзаиморасчетов.УсловныйПорядокРасчетов;
	Иначе
		Если ПараметрыВзаиморасчетов.ПорядокРасчетов = "" Тогда
			ПорядокРасчетов = "НЕОПРЕДЕЛЕНО";
		ИначеЕсли ТипЗнч(ПараметрыВзаиморасчетов.ПорядокРасчетов) = Тип("Строка") Тогда
			Если ПараметрыВзаиморасчетов.ПорядокРасчетов = "Объект.Договор.ПорядокРасчетов" Тогда
				ПорядокРасчетов = "
				|ВЫБОР
				|	КОГДА
				|		ИсточникДанных.Договор В (ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка),
				|									ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка),
				|									НЕОПРЕДЕЛЕНО) ТОГДА
				|			НЕОПРЕДЕЛЕНО
				|	ИНАЧЕ
				|		ИсточникДанных.Договор.ПорядокРасчетов
				|КОНЕЦ
				|";
			Иначе
				ПорядокРасчетов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"ИсточникДанных.%1",
					СтрЗаменить(ПараметрыВзаиморасчетов.ПорядокРасчетов, "Объект.", ""));
			КонецЕсли;
		Иначе
			ПорядокРасчетов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.%1)",
				XMLСтрока(ПараметрыВзаиморасчетов.ПорядокРасчетов));
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВзаиморасчетов.ЭтоЗаказ Тогда
		УсловиеДляЗаказов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"(%1 = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) 
			|	ИЛИ %1 = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)) И %2",
			ПорядокРасчетов,
			ПараметрыВзаиморасчетов.ИзменяетРасчетыСтрокой);
		УсловиеГенерации = СтрЗаменить(УсловиеГенерации, "&УсловиеГенерацииОбъектовРасчетов", УсловиеДляЗаказов);
	
	ИначеЕсли ПараметрыВзаиморасчетов.ЭтоСправочник Тогда
		УсловиеДляДоговоров = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"(%1 = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов))",
			ПорядокРасчетов);
		УсловиеГенерации = СтрЗаменить(УсловиеГенерации, "&УсловиеГенерацииОбъектовРасчетов", УсловиеДляДоговоров);
		
	ИначеЕсли ПараметрыВзаиморасчетов.ЭтоПродажаЗакупка Тогда
		ДокументРасчетовСКлиентами = ПараметрыВзаиморасчетов.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		ДокументРасчетовСПоставщиками = ПараметрыВзаиморасчетов.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
		
		ИспользоватьРасширенные = ?(ДокументРасчетовСКлиентами И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
								ИЛИ ДокументРасчетовСПоставщиками, "ИСТИНА", "ЛОЖЬ");
								
		УсловиеДляПродажиЗакупки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"(
			|%1
			|) И (%2 = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
			|	ИЛИ %2 = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
			|	ИЛИ %2 = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)
			|	ИЛИ (НЕ %4 ИЛИ НЕ %3) И %2 = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам))
			|	И %5",
			ПараметрыВзаиморасчетов.ИзменяетРасчетыСтрокой,
			ПорядокРасчетов,
			НакладнаяПоЗаказам,
			ИспользоватьРасширенные,
			?(ПараметрыВзаиморасчетов.Ссылка = "Объект.Ссылка", "ИСТИНА", "ЛОЖЬ"));
		УсловиеГенерации = СтрЗаменить(УсловиеГенерации, "&УсловиеГенерацииОбъектовРасчетов", УсловиеДляПродажиЗакупки);
		
	Иначе
		Если ЗначениеЗаполнено(ПараметрыВзаиморасчетов.ЗаказОснование)
			И ТипЗнч(ЭкземплярОбъекта) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
			УсловиеВозвратТоваровКлиентаНеПоЗаявке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				" НЕ (ИсточникДанных.ЗаявкаНаВозвратТоваровОтКлиента <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
				|	И %1 = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))", 
				ПорядокРасчетов);
		Иначе
			УсловиеВозвратТоваровКлиентаНеПоЗаявке = "ИСТИНА";
		КонецЕсли;
		
		ПозицияНачалоУсловияВозврата = СтрНайти(ПараметрыВзаиморасчетов.ИзменяетРасчетыСтрокой, "//Условие возврата начало");
		Если ПозицияНачалоУсловияВозврата Тогда
			ПозицияНачалоУсловияВозврата = ПозицияНачалоУсловияВозврата + СтрДлина("//Условие возврата начало");
			ДлинаУсловияВозврата = СтрНайти(ПараметрыВзаиморасчетов.ИзменяетРасчетыСтрокой, "//Условие возврата окончание")
				- ПозицияНачалоУсловияВозврата;
			УсловиеВозврата = Сред(ПараметрыВзаиморасчетов.ИзменяетРасчетыСтрокой, ПозицияНачалоУсловияВозврата, ДлинаУсловияВозврата);
		КонецЕсли;
		
		//Для пустых значений поля заказ в ТЧ Расшифровка платежа, кроме документов возврата,
		//требуется сгенерировать объекты расчетов
		Если Не ТипЗнч(СтруктураПараметрыВзаиморасчетов) = Тип("Массив") Тогда
			МассивПараметровГенерации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураПараметрыВзаиморасчетов);
		Иначе
			МассивПараметровГенерации = СтруктураПараметрыВзаиморасчетов;
		КонецЕсли;
		
		ЭтоДокументВозврата = ЭкземплярОбъекта = Документы.ВозвратТоваровОтКлиента.ПустаяСсылка()
			Или ЭкземплярОбъекта = Документы.ВозвратТоваровПоставщику.ПустаяСсылка()
			Или ЭкземплярОбъекта = Документы.ВозвратТоваровМеждуОрганизациями.ПустаяСсылка()
			Или ЭкземплярОбъекта = Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка();
		
		УсловиеСпособаКомпенсации = "ЛОЖЬ";
			
		Если Не ЭтоДокументВозврата Тогда
			Для Каждого ПараметрГенерации Из МассивПараметровГенерации Цикл
				УсловияГенерацияПоТЧРасшифровкаПлатежа = Новый Массив();
				Если ЗначениеЗаполнено(ПараметрГенерации.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
					Шаблон = "
					|	ИСТИНА В
					|		(ВЫБРАТЬ ПЕРВЫЕ 1
					|			ИСТИНА
					|		ИЗ
					|			&ИсточникДанных.%1 КАК ТЧРасшифровкаПлатежа
					|		ГДЕ
					|			ТЧРасшифровкаПлатежа.Ссылка = ИсточникДанных.Ссылка
					|			И ТЧРасшифровкаПлатежа.Ссылка.Проведен
					|			И ТЧРасшифровкаПлатежа.УдалитьЗаказ В (&ПустыеЗначенияОбъектРасчетов))";
					
					ЗаполненныйШаблон = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						СтрЗаменить(ПараметрГенерации.ПутьКДаннымТЧРасшифровкаПлатежа, "Объект.", ""));
					УсловияГенерацияПоТЧРасшифровкаПлатежа.Добавить(ЗаполненныйШаблон);
				КонецЕсли;
				
				УсловиеНаличияПустыхЗаказовВТЧРасшифровкаПлатежа = СтрСоединить(УсловияГенерацияПоТЧРасшифровкаПлатежа, " ИЛИ ");
			КонецЦикла;
			
		КонецЕсли;
		
		УсловиеДляПлатежногоИПрочегоДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"(
			|%1
			|)
			|И (%2) <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|И (
			|%3
			|)
			|И (%4)
			|ИЛИ (%5)
			|",
			ПараметрыВзаиморасчетов.ИзменяетРасчетыСтрокой,
			ПорядокРасчетов,
			?(ЗначениеЗаполнено(УсловиеВозврата), УсловиеВозврата,
				?(ЗначениеЗаполнено(ПараметрыВзаиморасчетов.ОбъектРасчетов), "ИСТИНА", "ЛОЖЬ")),
			УсловиеВозвратТоваровКлиентаНеПоЗаявке,
			?(Не ЭтоДокументВозврата И УсловияГенерацияПоТЧРасшифровкаПлатежа.Количество(), УсловиеНаличияПустыхЗаказовВТЧРасшифровкаПлатежа, "ЛОЖЬ"));
		
		УсловиеГенерации = СтрЗаменить(УсловиеГенерации,
								"&УсловиеГенерацииОбъектовРасчетов",
								УсловиеДляПлатежногоИПрочегоДокумента);
	КонецЕсли;
	
	Возврат УсловиеГенерации;
	
КонецФункции

Функция ТекстПоискаПоТЧРасшифровкаПлатежа()
	
	ШаблонУсловияВхожденияВТЧ = " ИСТИНА В
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА
	|	ИЗ
	|		Документ.[ИмяДокумента].[ИмяТЧ] КАК [ИмяДокумента][ИмяТЧ]
	|	ГДЕ
	|		[ИмяДокумента][ИмяТЧ].УдалитьЗаказ = ИсточникДанных.Ссылка
	|		И [ИмяДокумента][ИмяТЧ].Ссылка.Проведен)
	|";
	
	УсловияВхождения = Новый Массив;
	Для Каждого Документ Из Метаданные.Документы Цикл
		Для Каждого ТЧ Из Документ.ТабличныеЧасти Цикл
			Если ЭтоТЧРасшифровкаПлатежа(ТЧ.Имя) Тогда
				Если ТЧ.Реквизиты.Найти("УдалитьЗаказ") <> Неопределено Тогда
					Условие = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонУсловияВхожденияВТЧ,
						Новый Структура("ИмяДокумента, ИмяТЧ", Документ.Имя, ТЧ.Имя));
					УсловияВхождения.Добавить(Условие);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ТекстВхождениеВСверкуВзаиморасчетов = " ИСТИНА В
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА
	|	ИЗ
	|		Документ.СверкаВзаиморасчетов.ГруппировкиРасчеты КАК СверкаВзаиморасчетовГруппировкиРасчеты
	|	ГДЕ
	|		СверкаВзаиморасчетовГруппировкиРасчеты.УдалитьОбъектРасчетов = ИсточникДанных.Ссылка)
	|";
	УсловияВхождения.Добавить(ТекстВхождениеВСверкуВзаиморасчетов);
	
	Возврат СтрСоединить(УсловияВхождения, "ИЛИ");
	
КонецФункции

Функция ЭтоТЧРасшифровкаПлатежа(ИмяТЧ)

	МассивИменТЧ = Новый Массив();
	МассивИменТЧ.Добавить("РасшифровкаПлатежа");
	МассивИменТЧ.Добавить("РасшифровкаПлатежаСКлиентом");
	МассивИменТЧ.Добавить("РасшифровкаПлатежаСПоставщиком");
	МассивИменТЧ.Добавить("РасшифровкаПлатежаСКлиентомВознаграждение");
	МассивИменТЧ.Добавить("РасшифровкаПлатежаСПоставщикомВознаграждение");
	МассивИменТЧ.Добавить("ОплатаПоставщикам");

	Возврат МассивИменТЧ.Найти(ИмяТЧ) <> Неопределено;

КонецФункции

Функция ТекстПоискаВРегистрахНакопления()
	
	ШаблонУсловияИспользованиеВРН = " ИСТИНА В
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА
	|	ИЗ
	|		РегистрНакопления.[ИмяРегистра] КАК [ИмяРегистра]
	|	ГДЕ
	|		[ИмяРегистра].[ИмяИзмеренияРеквизита] = ИсточникДанных.Ссылка)
	|
	|";
	
	УсловияВхождения = Новый Массив();
	Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
		Для Каждого Измерение Из РегистрНакопления.Измерения Цикл
			Если Измерение.Тип = Метаданные.ОпределяемыеТипы.ОбъектРасчетов.Тип
				Или Измерение.Тип = Метаданные.ОпределяемыеТипы.ОбъектРасчетовСКлиентами.Тип 
				Или Измерение.Тип = Метаданные.ОпределяемыеТипы.ОбъектРасчетовСПоставщиками.Тип Тогда
					Условие = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
						ШаблонУсловияИспользованиеВРН,
						Новый Структура("ИмяРегистра, ИмяИзмеренияРеквизита", РегистрНакопления.Имя, Измерение.Имя));
				УсловияВхождения.Добавить(Условие);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Реквизит Из РегистрНакопления.Реквизиты Цикл
			Если Реквизит.Тип = Метаданные.ОпределяемыеТипы.ОбъектРасчетов.Тип
				Или Реквизит.Тип = Метаданные.ОпределяемыеТипы.ОбъектРасчетовСКлиентами.Тип 
				Или Реквизит.Тип = Метаданные.ОпределяемыеТипы.ОбъектРасчетовСПоставщиками.Тип Тогда
					Условие = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
						ШаблонУсловияИспользованиеВРН,
						Новый Структура("ИмяРегистра, ИмяИзмеренияРеквизита", РегистрНакопления.Имя, Реквизит.Имя));
				УсловияВхождения.Добавить(Условие);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаРегистров = Новый ТаблицаЗначений();
	ДополнитьТаблицуИспользованияОбъектовРасчетов(ТаблицаРегистров, "ДвиженияКонтрагентДоходыРасходы", "УдалитьОбъектРасчетов");
	ДополнитьТаблицуИспользованияОбъектовРасчетов(ТаблицаРегистров, "ДвиженияКонтрагентДоходыРасходы", "УдалитьИсточникГФУРасчетов");
	ДополнитьТаблицуИспользованияОбъектовРасчетов(ТаблицаРегистров, "ВыручкаИСебестоимостьПродаж", "УдалитьИсточникГФУРасчетов");
	ДополнитьТаблицуИспользованияОбъектовРасчетов(ТаблицаРегистров, "ДенежныеСредстваБезналичные", "УдалитьЗаказ");
	ДополнитьТаблицуИспользованияОбъектовРасчетов(ТаблицаРегистров, "ДенежныеСредстваНаличные", "УдалитьЗаказ");
	ДополнитьТаблицуИспользованияОбъектовРасчетов(ТаблицаРегистров, "Закупки", "УдалитьИсточникГФУРасчетов");
	
	Для Каждого Регистр Из ТаблицаРегистров Цикл
		Условие = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
						ШаблонУсловияИспользованиеВРН,
						Новый Структура("ИмяРегистра, ИмяИзмеренияРеквизита", Регистр.ИмяРегистра, Регистр.ИмяИзмеренияРеквизита));
				УсловияВхождения.Добавить(Условие);
	КонецЦикла;
	
	Возврат СтрСоединить(УсловияВхождения, "ИЛИ");
	
КонецФункции

// Параметры:
// 	Объект - ДокументОбъект 
// 	       - СправочникОбъект 
// 	
// Возвращаемое значение:
// 	см. ВзаиморасчетыСервер.ПараметрыМеханизма.
//
Функция ПараметрыВзаиморасчетовОбъектаРасчетов(Объект) Экспорт
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	Возврат Менеджер.ПараметрыВзаиморасчеты(Объект);
	
КонецФункции

Процедура СгенерироватьОбъектыРасчетов(ТипОбъектаРасчетов, ДанныеДляОбработки, Очередь) Экспорт
	
	ЭкземплярОбъекта = Новый(ТипОбъектаРасчетов);
	ПолноеИмяОбъекта = ЭкземплярОбъекта.Метаданные().ПолноеИмя();
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДляОбработки
	|ИЗ
	|	&ОбновляемыеДанные КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбновляемыеДанные.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ПриоритетнаяОбработка
	|ПОМЕСТИТЬ ОбъектыРасчетовСОстатками
	|ИЗ
	|	ВТДляОбработки КАК ОбновляемыеДанные
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.РасчетыСПоставщиками.Остатки КАК РасчетыСПоставщикамиОстатки
	|		ГДЕ
	|			РасчетыСПоставщикамиОстатки.УдалитьЗаказПоставщику = ОбновляемыеДанные.Ссылка
	|			И НЕ РасчетыСПоставщикамиОстатки.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|			И РасчетыСПоставщикамиОстатки.СуммаОстаток <> 0)
	|	ИЛИ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.РасчетыСКлиентами.Остатки КАК РасчетыСКлиентамиОстатки
	|		ГДЕ
	|			РасчетыСКлиентамиОстатки.УдалитьЗаказКлиента = ОбновляемыеДанные.Ссылка
	|			И НЕ РасчетыСКлиентамиОстатки.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|			И РасчетыСКлиентамиОстатки.СуммаОстаток <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДляОбработки.Ссылка КАК Ссылка,
	|	ИсточникДанных.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА НЕ &УсловиеГенерацииОбъектаРасчетов
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТолькоОстатки,
	|	ИсточникДанных.Дата КАК Дата,
	|	ЕСТЬNULL(ОбъектыРасчетовСОстатками.ПриоритетнаяОбработка, ЛОЖЬ) КАК ПриоритетнаяОбработка
	|ИЗ
	|	ВТДляОбработки КАК ДанныеДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ИсточникДанных КАК ИсточникДанных
	|			ПО (ИсточникДанных.Ссылка = ДанныеДляОбработки.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыРасчетовСОстатками
	|			ПО ОбъектыРасчетовСОстатками.Ссылка = ДанныеДляОбработки.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетнаяОбработка УБЫВ,
	|	ИсточникДанных.Дата УБЫВ";
	
	ТекстЗапроса = ТекстЗапроса
		+ ТекстПроверкаИспользованияВРасчетныхРегистрах(Истина, Истина)
		+ ТекстПроверкаИспользованияВТабличныхЧастях();
		
	МВТ = Новый МенеджерВременныхТаблиц();
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ДанныеДляОбработки);
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеГенерацииОбъектаРасчетов", УсловиеГенерацииОбъектаРасчетов(ЭкземплярОбъекта));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсточникДанных", ПолноеИмяОбъекта);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[2].Выбрать();
	
	ИспользованиеВРасчетныхРегистрах = МВТ.Таблицы[2].ПолучитьДанные().Выгрузить();
	ИспользованиеВРасчетныхРегистрах.Индексы.Добавить("ОбъектРасчетов, Организация, ТипРасчетов");
	
	ИспользованиеВТабЧастях = Результат[4].Выгрузить();
	ИспользованиеВТабЧастях.Индексы.Добавить("ОбъектРасчетов, Организация, ТипРасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИспользованиеВТабЧастях, ИспользованиеВРасчетныхРегистрах);
	
	Пока Выборка.Следующий() Цикл
		СсылкаНаЭлемент = Выборка.Ссылка;
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаЭлемент);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Объект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(СсылкаНаЭлемент, Выборка.ВерсияДанных, Очередь);
			Если Объект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
 				Продолжить;
			КонецЕсли;
			
			ПараметрыГенерации = ПараметрыВзаиморасчетовОбъектаРасчетов(Объект);
			
			Если Не ТипЗнч(ПараметрыГенерации) = Тип("Массив") Тогда
				ПараметрыГенерации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыГенерации);
			КонецЕсли;
			
			ВзаиморасчетыСервер.ДополненныеПараметрыМеханизма(Объект, ПараметрыГенерации);
			
			Если (ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг")
				И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
				Или (ТипЗнч(Объект) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг")
				И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет) Тогда
					ПараметрыГенерацииПоУпрОрганизации = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыГенерации[0]);
					ПараметрыГенерацииПоУпрОрганизации.Организация = Справочники.Организации.УправленческаяОрганизация;
					ПараметрыГенерацииПоУпрОрганизации.Договор = "";
					ПараметрыГенерацииПоУпрОрганизации.ВалютаВзаиморасчетов = ВалютаУпрУчета;
					ПараметрыГенерации.Добавить(ПараметрыГенерацииПоУпрОрганизации);
			КонецЕсли;
			
			//Для некорректных объектов расчетов дополняем параметры генерации позициями,
			//которые уже участвуют в движениях расчетных регистров, но отсутствуют в поставляемых документом
			//параметрах взаиморасчетов
			ДополнитьПараметрыГенерацииИсключениями(ПараметрыГенерации, ИспользованиеВРасчетныхРегистрах, Объект);
			
			Для Каждого ПараметрГенерации Из ПараметрыГенерации Цикл
				//Генерация объекта расчетов, объектом которого является сам документ, а так же
				//объекта, который не должен быть объектом расчетов по параметрам взаиморасчетов, 
				//но был ранее указан в расшифровке платежа в других документах.
				Если Не ПараметрГенерации.ТолькоОстатки Тогда
					ПараметрГенерации.ТолькоОстатки = Выборка.ТолькоОстатки;
				КонецЕсли;
				
				ОрганизацияВСтроках = ПараметрГенерации.ОрганизацияВСтроках И ТипЗнч(ПараметрГенерации.Организация) = Тип("Строка");
				КонтрагентВСтроках  = ПараметрГенерации.КонтрагентВСтроках И ТипЗнч(ПараметрГенерации.Контрагент) = Тип("Строка");
				ПартнерВСтроках     = ПараметрГенерации.ПартнерВСтроках И ТипЗнч(ПараметрГенерации.Партнер) = Тип("Строка");
				
				ТребуетсяГенерацияОР = СсылкаЯвляетсяОбъектомРасчетов(Объект, ПараметрГенерации) Или ПараметрГенерации.ТолькоОстатки;
				
				ГенерацияПоТЧ = ОрганизацияВСтроках Или КонтрагентВСтроках Или ПартнерВСтроках;
				Если ГенерацияПоТЧ Тогда
					Если ОрганизацияВСтроках Тогда
						Имена = СтрРазделить(ПараметрГенерации.Организация, ".");
						Имена.Удалить(Имена.ВГраница());
						ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтрСоединить(Имена, ".")); // ТабличнаяЧасть 
					Иначе
						ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ПараметрГенерации.ПутьКДаннымТЧРасшифровкаПлатежа); // ТабличнаяЧасть
					КонецЕсли;
					Если Не ТЧ.Количество() Тогда
						ТребуетсяГенерацияОР = Ложь;
					Иначе
						ТребуетсяГенерацияОР = Ложь;
						Для Каждого СтрокаТЧ Из ТЧ Цикл
							Если СтрокаТЧ.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка()
								И (Не ЗначениеЗаполнено(СтрокаТЧ.УдалитьЗаказ)
									Или СтрокаТЧ.УдалитьЗаказ = Объект.Ссылка)
									И ПараметрГенерации.ИзменяетРасчеты Тогда
								ТребуетсяГенерацияОР = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Если ТребуетсяГенерацияОР Тогда
					НовыйОбъектРасчетов = ПроверитьЗаполнитьОбъектРасчетовПоСтруктуре(Объект, ПараметрГенерации);
					Если Не ЗначениеЗаполнено(НовыйОбъектРасчетов) Тогда
						Шаблон = НСтр("ru = 'Не удалось создать объект расчетов для документа: ""%1""'");
							ТекстСообщения = 
							СтрШаблон(Шаблон,
								Объект.Ссылка);
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкаНаЭлемент);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), СсылкаНаЭлемент);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДогенерироватьОбъектыРасчетов(ОбъектыРасчетов) Экспорт
	
Если Не ТипЗнч(ОбъектыРасчетов) = Тип("Массив") Тогда
		ОбрабатываемыеОбъекты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектыРасчетов);
	Иначе
		ОбрабатываемыеОбъекты = ОбъектыРасчетов;
	КонецЕсли;
	
	ОбъектыПоТипам = Новый Соответствие();
	Для Каждого ОбрабатываемыйОбъект Из ОбрабатываемыеОбъекты Цикл
		Если ЗначениеЗаполнено(ОбрабатываемыйОбъект) Тогда
			ТипОбъекта = ТипЗнч(ОбрабатываемыйОбъект);
			ТЗПоТипу = ОбъектыПоТипам.Получить(ТипОбъекта);
			Если ТЗПоТипу = Неопределено Тогда
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТипОбъекта);
			
				ОбрабатываемыеДанные = Новый ТаблицаЗначений();
				ОбрабатываемыеДанные.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(МассивТипов));
				ОбрабатываемыеДанные.Добавить().Ссылка = ОбрабатываемыйОбъект;
				ОбъектыПоТипам.Вставить(ТипОбъекта, ОбрабатываемыеДанные); 
			Иначе 
				ТЗПоТипу.Добавить().Ссылка = ОбрабатываемыйОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТипДанных Из ОбъектыПоТипам Цикл
		Если Не ТипДанных.Ключ = ТИп("ДокументСсылка.ПервичныйДокумент") Тогда
			ОбъектыРасчетовСервер.СгенерироватьОбъектыРасчетов(ТипДанных.Ключ, ТипДанных.Значение, Неопределено);
		Иначе
			Документы.ПервичныйДокумент.СгенерироватьОбъектыРасчетов(Неопределено, ТипДанных.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	ЭкземплярОбъекта - ДокументСсылка - Пустая ссылка на документ, по которому требуется сгенерировать объект расчетов
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеДляГенерацииОбъектовРасчета(ЭкземплярОбъекта, Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПолныеИменаТиповОбъектовРасчетов();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	ПолноеИмяОбъекта = ЭкземплярОбъекта.Метаданные().ПолноеИмя();

	Запрос = Новый Запрос();
	Запрос.Текст =	"
	|//Документы, являющиеся объектом расчетов
	|ВЫБРАТЬ
	|	ИсточникДанных.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДокументыОбъектыРасчетов
	|ИЗ
	|	&ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	&УсловиеГенерации
	|ИНДЕКСИРОВАТЬ ПО Ссылка
	|;
	|
	|//Документы, являющиеся объектом расчетов, выборка для регистрации
	|ВЫБРАТЬ
	|	ИсточникДанных.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ТолькоДляОстатков,
	|	1 КАК Приоритет
	|ИЗ
	|	ВТДокументыОбъектыРасчетов КАК ИсточникДанных
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ГДЕ
	|			ОбъектыРасчетов.Объект = ИсточникДанных.Ссылка
	|			И НЕ ОбъектыРасчетов.ТолькоОстатки)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|//Документы, не являющиеся объектом расчетов, но были выбраны в ТЧ Расшифровка платежа
	|ВЫБРАТЬ
	|	ИсточникДанных.Ссылка,
	|	ИСТИНА,
	|	2
	|ИЗ
	|	&ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			ВТДокументыОбъектыРасчетов КАК ДокОбъектРасчетов
	|		ГДЕ
	|			ДокОбъектРасчетов.Ссылка = ИсточникДанных.Ссылка)
	|	И НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ГДЕ
	|			ОбъектыРасчетов.Объект = ИсточникДанных.Ссылка
	|			И ОбъектыРасчетов.ТолькоОстатки)
	|	И (&УсловиеИспользованиеВРасшифровкеПлатежа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|//Документы, не являющиеся объектом расчетов, но участвуют в движениях регистров накопления
	|ВЫБРАТЬ
	|	ИсточникДанных.Ссылка,
	|	ИСТИНА,
	|	3
	|ИЗ
	|	&ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			ВТДокументыОбъектыРасчетов КАК ДокОбъектРасчетов
	|		ГДЕ
	|			ДокОбъектРасчетов.Ссылка = ИсточникДанных.Ссылка)
	|	И НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ГДЕ
	|			ОбъектыРасчетов.Объект = ИсточникДанных.Ссылка
	|			И ОбъектыРасчетов.ТолькоОстатки)
	|	И (&УсловиеИспользованиеВРН)
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеГенерации", УсловиеГенерацииОбъектаРасчетов(ЭкземплярОбъекта));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИспользованиеВРасшифровкеПлатежа", ТекстПоискаПоТЧРасшифровкаПлатежа());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИспользованиеВРН", ТекстПоискаВРегистрахНакопления());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсточникДанных", ПолноеИмяОбъекта);
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектРасчетов", ПустыеЗначенияОбъектРасчетов());
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Функция ЭтоПлатежныйДокумент(Объект)
	Возврат ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств")
				ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств")
				ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
				ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер")
				ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств")
				ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте")
				//++ Локализация
				ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ОперацияПоЯндексКассе")
				//-- Локализация
				ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.АвансовыйОтчет");
КонецФункции

Процедура ЗаполнитьОбъектРасчетовВРасшифровкеПлатежа(Объект, СтруктураПараметров) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежа    = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа); // ТабличнаяЧасть
	Ссылка                = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, "Объект.Ссылка");
	Организация           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
	ТипРасчетов           = СтруктураПараметров.ТипРасчетов;
	
	КонтрагентВСтроках  = СтруктураПараметров.КонтрагентВСтроках;
	ПартнерВСтроках     = СтруктураПараметров.ПартнерВСтроках;
	
	ЗаказыИзРасшифровкиПлатежа = РасшифровкаПлатежа.ВыгрузитьКолонку("УдалитьЗаказ");
	УникальныеЗаказы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗаказыИзРасшифровкиПлатежа);
	
	ВалютаВзаиморасчетов = Неопределено;
	ВалютаВзаиморасчетовВТЧ = РасшифровкаПлатежа.Выгрузить(Новый Массив()).Колонки.Найти("ВалютаВзаиморасчетов") <> Неопределено;
	ВалютыВТЧОтлчаются = Ложь;
	Если ВалютаВзаиморасчетовВТЧ Тогда
		УникальныеВалютыВзаиморасчетов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РасшифровкаПлатежа.ВыгрузитьКолонку("ВалютаВзаиморасчетов")); 
		Если УникальныеВалютыВзаиморасчетов.Количество() = 1 Тогда
			ВалютаВзаиморасчетов = УникальныеВалютыВзаиморасчетов[0];
			Если Не ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
				ВалютаВзаиморасчетов = ?(ЗначениеЗаполнено(СтруктураПараметров.ВалютаВзаиморасчетов) 
						И ТипЗнч(СтруктураПараметров.ВалютаВзаиморасчетов) = Тип("Строка")
						И СтрЧислоВхождений(СтруктураПараметров.ВалютаВзаиморасчетов,".") < 2,
					ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаВзаиморасчетов),
					ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаДокумента));
			КонецЕсли;
		ИначеЕсли УникальныеВалютыВзаиморасчетов.Количество() > 1 Тогда
			ВалютыВТЧОтлчаются = Истина;
		КонецЕсли;
	Иначе
		ВалютаВзаиморасчетов = ?(ЗначениеЗаполнено(СтруктураПараметров.ВалютаВзаиморасчетов) 
				И ТипЗнч(СтруктураПараметров.ВалютаВзаиморасчетов) = Тип("Строка")
				И СтрЧислоВхождений(СтруктураПараметров.ВалютаВзаиморасчетов,".") < 2,
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаВзаиморасчетов),
			ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаДокумента));
	КонецЕсли;
	
	Для Каждого ПустоеЗначение Из ПустыеЗначенияОбъектРасчетов() Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(УникальныеЗаказы, ПустоеЗначение);
	КонецЦикла;
	
	ДополнительныеКритерииПоиска = ДополнительныеКритерииПоиска();
	ДополнительныеКритерииПоиска.ОбновлениеИБ = Истина;
	
	Если ЭтоПлатежныйДокумент(Объект) 
		Или ВалютыВТЧОтлчаются Тогда
		ОбъектыРасчетовПоЗаказамПлатежныйДокумент = ПолучитьОбъектыРасчетовПоФилиалу(УникальныеЗаказы, Организация, ТипРасчетов);
	Иначе
		ДополнительныеКритерииПоиска.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
		ДополнительныеКритерииПоиска.ТолькоРеглУчет = (ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") 
			И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
			ИЛИ (ТипЗнч(Объект) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг")
			И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
			
			Если Не ПартнерВСтроках Тогда
				ДополнительныеКритерииПоиска.Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер);
			КонецЕсли;
			
			Если Не КонтрагентВСтроках Тогда
				ДополнительныеКритерииПоиска.Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент);
			КонецЕсли;
		
		
		Если НЕ ВалютыВТЧОтлчаются Тогда
			ОбъектыРасчетовПоЗаказам = ПолучитьОбъектыРасчетовПоСсылкам(УникальныеЗаказы, Организация, ТипРасчетов, ДополнительныеКритерииПоиска);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
		
		Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(
			Объект,
			СтруктураПараметров.Партнер,
			?(ПартнерВСтроках, СтрокаРасшифровки.НомерСтроки, Неопределено));
		
		Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(
			Объект,
			СтруктураПараметров.Контрагент,
			?(КонтрагентВСтроках, СтрокаРасшифровки.НомерСтроки, Неопределено));
			
		ДополнительныеКритерииПоиска = ДополнительныеКритерииПоиска();
		ДополнительныеКритерииПоиска.Партнер = Партнер;
		ДополнительныеКритерииПоиска.Контрагент = Контрагент;
		ДополнительныеКритерииПоиска.ВернутьПервый = Ложь;
		ДополнительныеКритерииПоиска.ОбновлениеИБ = Истина;
		
		Если ВалютаВзаиморасчетовВТЧ Тогда
			Если ЗначениеЗаполнено(СтрокаРасшифровки.ВалютаВзаиморасчетов) Тогда
				ДополнительныеКритерииПоиска.ВалютаВзаиморасчетов = СтрокаРасшифровки.ВалютаВзаиморасчетов;
			ИначеЕсли ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
				ДополнительныеКритерииПоиска.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
		ТребуетсяЗаполнение = Истина;
		Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов)
			И ЗначениеЗаполнено(СтрокаРасшифровки.УдалитьЗаказ) Тогда
			Если ЭтоПлатежныйДокумент(Объект)
				Или ВалютыВТЧОтлчаются Тогда
				
				Ключ = Новый Структура();
				Ключ.Вставить("Объект", СтрокаРасшифровки.УдалитьЗаказ);
				Если ЗначениеЗаполнено(Партнер) Тогда
					Ключ.Вставить("Партнер", Партнер);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Контрагент) Тогда
					Ключ.Вставить("Контрагент", Контрагент);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДополнительныеКритерииПоиска.ВалютаВзаиморасчетов) Тогда
					Ключ.Вставить("ВалютаВзаиморасчетов", ДополнительныеКритерииПоиска.ВалютаВзаиморасчетов);
				КонецЕсли;
				
				НайденныеОбъектыРасчетов = ОбъектыРасчетовПоЗаказамПлатежныйДокумент.НайтиСтроки(Ключ);
				
				Если НайденныеОбъектыРасчетов.Количество() Тогда
					Строка = НайденныеОбъектыРасчетов[0]; //
					СтрокаРасшифровки.ОбъектРасчетов = Строка.Ссылка;
				Иначе 
					Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
						
						Ключ = Новый Структура();
						Ключ.Вставить("Объект", СтрокаРасшифровки.УдалитьЗаказ);
				
						НайденныеОбъектыРасчетовБезДопОтборов = ОбъектыРасчетовПоЗаказамПлатежныйДокумент.НайтиСтроки(Ключ);
						
						Если НайденныеОбъектыРасчетовБезДопОтборов.Количество() = 1 Тогда
							СтрокаРасшифровки.ОбъектРасчетов = НайденныеОбъектыРасчетовБезДопОтборов[0].Ссылка;
							Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
								ГоловнаяОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ГоловнаяОрганизация").ГоловнаяОрганизация;
								ПоискПоГоловнойОрганизации = ПолучитьОбъектРасчетовПоСсылке(СтрокаРасшифровки.УдалитьЗаказ,
									ГоловнаяОрганизация, ТипРасчетов, ДополнительныеКритерииПоиска);
								Если ЗначениеЗаполнено(ПоискПоГоловнойОрганизации) Тогда
									СтрокаРасшифровки.ОбъектРасчетов = ПоискПоГоловнойОрганизации;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Ключ.Вставить("ТолькоОстатки", Ложь);
							НайденныеОбъектыРасчетовБезДопОтборов = ОбъектыРасчетовПоЗаказамПлатежныйДокумент.НайтиСтроки(Ключ);
							Если НайденныеОбъектыРасчетовБезДопОтборов.Количество() = 1 Тогда
								СтрокаРасшифровки.ОбъектРасчетов = НайденныеОбъектыРасчетовБезДопОтборов[0].Ссылка;
							КонецЕсли;
						КонецЕсли;
					
					КонецЕсли;
									 
				КонецЕсли;
			Иначе
				СтрокаРасшифровки.ОбъектРасчетов = ОбъектыРасчетовПоЗаказам[СтрокаРасшифровки.УдалитьЗаказ];
			КонецЕсли;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
			Если СтруктураПараметров.ЭтоПродажаЗакупка
				И Не ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг")
				И Не ТипЗнч(Объект) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") 
				ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг")
					И ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, "Объект.ХозяйственнаяОперация")
						<> Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет
				ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг")
					И ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, "Объект.ХозяйственнаяОперация")
						<> Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет Тогда
						Если Не ЗначениеЗаполнено(СтрокаРасшифровки.УдалитьЗаказ) Тогда

							СтрокаРасшифровки.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();  
							ТребуетсяЗаполнение = Ложь;
						КонецЕсли;

			ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг")
				ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
					
					ПараметрыСоздания = ПолучитьПараметрыОбъектаРасчетов();
					ПараметрыСоздания.Партнер                 = Партнер;
					ПараметрыСоздания.Контрагент              = Контрагент;
					ПараметрыСоздания.НаправлениеДеятельности = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.НаправлениеДеятельности);
					ПараметрыСоздания.Организация             = Справочники.Организации.УправленческаяОрганизация;
					ПараметрыСоздания.Договор                 = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					ПараметрыСоздания.ТипРасчетов             = ТипРасчетов;

					Если ВалютаВзаиморасчетовВТЧ И ЗначениеЗаполнено(СтрокаРасшифровки.ВалютаВзаиморасчетов) Тогда
						ПараметрыСоздания.Вставить("ВалютаВзаиморасчетов", СтрокаРасшифровки.ВалютаВзаиморасчетов);
					Иначе
						ПараметрыСоздания.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
					КонецЕсли;
					
					СтрокаРасшифровки.ОбъектРасчетов = НайтиОбъектРасчетовПоАналитикеУчетаПоПартнерам(ПараметрыСоздания);
					
					Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
						
						Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ВалютаВзаиморасчетов) Тогда
							ДополнительныеКритерииПоиска.ВалютаВзаиморасчетов = Константы.ВалютаУправленческогоУчета.Получить();
						КонецЕсли;
						
						СтрокаРасшифровки.ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(Ссылка, 
							Справочники.Организации.УправленческаяОрганизация,
 							ТипРасчетов,
							ДополнительныеКритерииПоиска);
						Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
								ДополнительныеКритерииПоиска.ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
								СтрокаРасшифровки.ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(Ссылка, 
									Справочники.Организации.УправленческаяОрганизация,
 									ТипРасчетов,
									ДополнительныеКритерииПоиска);
						КонецЕсли;
					КонецЕсли;
					
			ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
				Если Объект.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ОставитьВКачествеАванса Тогда
					ОбъектРасчетов = Ссылка;
				ИначеЕсли Объект.ДокументПоступления.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
					ИЛИ Объект.ДокументПоступления = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка() 
						И Объект.Договор.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					ОбъектРасчетов = ?(ЗначениеЗаполнено(Объект.Договор), Объект.Договор, Ссылка);
				Иначе
					ОбъектРасчетов = Ссылка;
				КонецЕсли;
				СтрокаРасшифровки.ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(ОбъектРасчетов,
					Организация,
					ТипРасчетов,
					ДополнительныеКритерииПоиска);
			
			ИначеЕсли  ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
				Если Объект.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ОставитьВКачествеАванса Тогда
					ОбъектРасчетов = Ссылка;
				ИначеЕсли Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					ОбъектРасчетов = ?(ЗначениеЗаполнено(Объект.Договор), Объект.Договор, Ссылка);
				ИначеЕсли Объект.ЗаявкаНаВозвратТоваровОтКлиента <> Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка()
					И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
						ОбъектРасчетов = Объект.ЗаявкаНаВозвратТоваровОтКлиента;
				Иначе
					ОбъектРасчетов = Ссылка;
				КонецЕсли;
				
				СтрокаРасшифровки.ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(ОбъектРасчетов,
					Организация,
					ТипРасчетов,
					ДополнительныеКритерииПоиска);
			
			ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратТоваровМеждуОрганизациями") Тогда
				Если Объект.РасчетыЧерезОтдельногоКонтрагента Тогда
					ОбъектРасчетов = ?(ЗначениеЗаполнено(Объект.ДоговорПродажи),
						Объект.ДоговорПродажи,
						Ссылка);
				ИначеЕсли ЗначениеЗаполнено(Объект.ДоговорПродажи)
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорПродажи, "ПорядокРасчетов")
						= Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					ОбъектРасчетов = Объект.ДоговорПродажи;
				Иначе
					ОбъектРасчетов = Ссылка;
				КонецЕсли;
				
				СтрокаРасшифровки.ОбъектРасчетов = ПолучитьОбъектРасчетовПоСсылке(ОбъектРасчетов,
					Организация,
					ТипРасчетов,
					ДополнительныеКритерииПоиска);
			//++ Локализация
			//-- Локализация

			ИначеЕсли СтруктураПараметров.ЭтоПлатежИлиПрочийДокумент Тогда
				
				ПараметрыСоздания = ПолучитьПараметрыОбъектаРасчетов();
				
				ПараметрыСоздания.Партнер = Партнер;
				ПараметрыСоздания.Контрагент = Контрагент;
				ПараметрыСоздания.НаправлениеДеятельности = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.НаправлениеДеятельности,,Справочники.НаправленияДеятельности.ПустаяСсылка());
				ПараметрыСоздания.Организация             = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
				ПараметрыСоздания.Договор                 = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Договор);
				ПараметрыСоздания.ТипРасчетов             = ТипРасчетов;
					
				Если ПараметрыСоздания.Договор = Неопределено Тогда 
					ПараметрыСоздания.Договор = ?(ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты"),
													Справочники.ДоговорыКонтрагентов.ПустаяСсылка(),
													Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка())
				КонецЕсли;
									
				Если ВалютаВзаиморасчетовВТЧ И ЗначениеЗаполнено(СтрокаРасшифровки.ВалютаВзаиморасчетов) Тогда
					ПараметрыСоздания.Вставить("ВалютаВзаиморасчетов", СтрокаРасшифровки.ВалютаВзаиморасчетов);
				Иначе
					ПараметрыСоздания.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
				КонецЕсли;
				
				СтрокаРасшифровки.ОбъектРасчетов = НайтиОбъектРасчетовПоАналитикеУчетаПоПартнерам(ПараметрыСоздания);
				
				//Для документов интеркампани пробуем искать по пустому договору
				Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов)
					И ПараметрыСоздания.Договор = Неопределено
					И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
						ПараметрыСоздания.Договор = Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка();
					СтрокаРасшифровки.ОбъектРасчетов = НайтиОбъектРасчетовПоАналитикеУчетаПоПартнерам(ПараметрыСоздания);
				КонецЕсли;

				Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов)
					И ПараметрыСоздания.Партнер = Справочники.Партнеры.ПустаяСсылка()
					И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
						ПараметрыСоздания.Партнер = Справочники.Партнеры.НашеПредприятие;
					СтрокаРасшифровки.ОбъектРасчетов = НайтиОбъектРасчетовПоАналитикеУчетаПоПартнерам(ПараметрыСоздания);
				КонецЕсли;

				Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) 
					И ТипЗнч(Объект) =  Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств")
					И Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена Тогда
						ТребуетсяЗаполнение = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) 
			И ТребуетсяЗаполнение
			И СтруктураПараметров.ИзменяетРасчеты
			И Объект.Проведен
			И Не (ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств")
				И (Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена
				ИЛИ Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована))
			И ЕстьДвиженияПоРасчетнымРегистрам(Объект) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить объект расчетов в документе: %1, в табличной части %2, по заказу %3'"),
					Ссылка,
					СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа,
					СтрокаРасшифровки.УдалитьЗаказ);

			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Объект.Метаданные(),
				,
				ТекстСообщения);

		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

// Дополняет дополнительные источники данных обработчика обновления реквизитами шапки и табличных частей,
// которые могут использоваться для заполнения объектов расчетов.
//
// Параметры:
// 	ПараметрыВыборки - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
// 	ЭкземплярДокумента - ДокументСсылка - Пустая ссылка на документ, в который будет заполняться объект расчетов
//
Процедура ДополнитьДополнительныеИсточникиДанных(ПараметрыВыборки, ЭкземплярДокумента) Экспорт
	
	МетаданныеДокумента = ЭкземплярДокумента.Метаданные();
	ПараметрыВзаиморасчетов = Документы[МетаданныеДокумента.Имя].ПараметрыВзаиморасчеты();
	
	Если Не ТипЗнч(ПараметрыВзаиморасчетов) = Тип("Массив") Тогда
		ПараметрыВзаиморасчетов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыВзаиморасчетов);
	КонецЕсли;
	
	ИсточникиДанных = Новый Массив();
	ПоляИсточники = Новый Массив();
	ПоляИсточники.Добавить("Организация");
	ПоляИсточники.Добавить("Контрагент");
	ПоляИсточники.Добавить("Партнер");
	ПоляИсточники.Добавить("Договор");
	ПоляИсточники.Добавить("ЗаказОснование");
	
	Для Каждого СтруктураПараметров Из ПараметрыВзаиморасчетов Цикл
		
		ИмяТЧРасшифровкаПлатежа = СтрЗаменить(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа, "Объект.", "");
		
		Для Каждого Параметр Из ПоляИсточники Цикл
			ЗначениеПараметра = СтрЗаменить(СтруктураПараметров[Параметр], "Объект.", "");
			Если ЗначениеЗаполнено(ЗначениеПараметра) 
				И ТипЗнч(СтруктураПараметров[Параметр]) = Тип("Строка") Тогда
					Если Не Лев(ЗначениеПараметра, СтрДлина(ИмяТЧРасшифровкаПлатежа)) = ИмяТЧРасшифровкаПлатежа тОГДА
						ИсточникиДанных.Добавить(ЗначениеПараметра);
					КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты) Тогда
			ИмяТЧЭтапыОплаты = СтрЗаменить(СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты, "Объект.", "");
			Если МетаданныеДокумента.ТабличныеЧасти[ИмяТЧЭтапыОплаты].Реквизиты.Найти("Заказ") <> Неопределено Тогда
				ИсточникиДанных.Добавить(ИмяТЧЭтапыОплаты + ".Заказ");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа) Тогда
			ИмяТЧРасшифровкаПлатежа = СтрЗаменить(СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа, "Объект.", "");
			Если МетаданныеДокумента.ТабличныеЧасти[ИмяТЧРасшифровкаПлатежа].Реквизиты.Найти("УдалитьЗаказ") <> Неопределено Тогда
				ИсточникиДанных.Добавить(ИмяТЧРасшифровкаПлатежа + ".УдалитьЗаказ");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
			ИмяТЧДанные = СтрЗаменить(СтруктураПараметров.ПутьКДаннымТЧ, "Объект.", "");
			Если МетаданныеДокумента.ТабличныеЧасти[ИмяТЧДанные].Реквизиты.Найти(СтруктураПараметров.ИмяРеквизитаТЧЗаказ) <> Неопределено Тогда
				ИсточникиДанных.Добавить(ИмяТЧДанные + "." + СтруктураПараметров.ИмяРеквизитаТЧЗаказ);
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Ссылка <> "Объект.Ссылка" Тогда
			ИсточникиДанных.Добавить(СтрЗаменить(СтруктураПараметров.Ссылка, "Объект.", ""));
		КонецЕсли;
		
	КонецЦикла;
	
	УникальныеИсточники = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИсточникиДанных);
	Для Каждого ИсточникДанных Из УникальныеИсточники Цикл
		ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ПараметрыВыборки.ДополнительныеИсточникиДанных, ИсточникДанных);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	ЭкземплярОбъекта - ДокументСсылка - Пустая ссылка на документ, по которому требуется сгенерировать объект расчетов
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеДляПереформированияОнлайнДвижений(Параметры) Экспорт
	
	ПолноеИмяОбъекта = РегистрыСведений.ЗаданияКРаспределениюРасчетов.СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяОбъекта;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("ДатаПересчета ВОЗР");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("ДатаПересчета");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
		|	ДанныеРегистра.Период КАК ДатаПересчета,
		|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ВТНекорректныеДанные
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК ДанныеРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистраторРасчетов КАК РегистраторРасчетов
		|		ПО ДанныеРегистра.Регистратор = РегистраторРасчетов.Ссылка
		|			И РегистраторРасчетов.ОбъектРасчетов <> ДанныеРегистра.ОбъектРасчетов
		|			И РегистраторРасчетов.ОбъектРасчетов <> &ПустойОбъектРасчетов
		|			И ДанныеРегистра.ОбъектРасчетов <> &ПустойОбъектРасчетов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеРегистра.Период,
		|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
		|	ДанныеРегистра.ОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК ДанныеРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистраторРасчетов КАК РегистраторРасчетов
		|		ПО ДанныеРегистра.Регистратор = РегистраторРасчетов.Ссылка
		|			И РегистраторРасчетов.ОбъектРасчетов <> ДанныеРегистра.ОбъектРасчетов
		|			И РегистраторРасчетов.ОбъектРасчетов <> &ПустойОбъектРасчетов
		|			И ДанныеРегистра.ОбъектРасчетов <> &ПустойОбъектРасчетов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеРегистра.Период,
		|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
		|	ДанныеРегистра.ОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПланОплат КАК ДанныеРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистраторРасчетов КАК РегистраторРасчетов
		|		ПО ДанныеРегистра.Регистратор = РегистраторРасчетов.Ссылка
		|			И РегистраторРасчетов.ОбъектРасчетов <> ДанныеРегистра.ОбъектРасчетов
		|			И РегистраторРасчетов.ОбъектРасчетов <> &ПустойОбъектРасчетов
		|			И ДанныеРегистра.ОбъектРасчетов <> &ПустойОбъектРасчетов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеРегистра.Период,
		|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
		|	ДанныеРегистра.ОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПланОплат КАК ДанныеРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистраторРасчетов КАК РегистраторРасчетов
		|		ПО ДанныеРегистра.Регистратор = РегистраторРасчетов.Ссылка
		|			И РегистраторРасчетов.ОбъектРасчетов <> ДанныеРегистра.ОбъектРасчетов
		|			И РегистраторРасчетов.ОбъектРасчетов <> &ПустойОбъектРасчетов
		|			И ДанныеРегистра.ОбъектРасчетов <> &ПустойОбъектРасчетов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеРегистра.Период,
		|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
		|	ДанныеРегистра.ОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПланОтгрузок КАК ДанныеРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистраторРасчетов КАК РегистраторРасчетов
		|		ПО ДанныеРегистра.Регистратор = РегистраторРасчетов.Ссылка
		|			И РегистраторРасчетов.ОбъектРасчетов <> ДанныеРегистра.ОбъектРасчетов
		|			И РегистраторРасчетов.ОбъектРасчетов <> &ПустойОбъектРасчетов
		|			И ДанныеРегистра.ОбъектРасчетов <> &ПустойОбъектРасчетов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеРегистра.Период,
		|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
		|	ДанныеРегистра.ОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПланПоставок КАК ДанныеРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистраторРасчетов КАК РегистраторРасчетов
		|		ПО ДанныеРегистра.Регистратор = РегистраторРасчетов.Ссылка
		|			И РегистраторРасчетов.ОбъектРасчетов <> ДанныеРегистра.ОбъектРасчетов
		|			И РегистраторРасчетов.ОбъектРасчетов <> &ПустойОбъектРасчетов
		|			И ДанныеРегистра.ОбъектРасчетов <> &ПустойОбъектРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТНекорректныеДанные.ДатаПересчета) КАК ДатаПересчета,
		|	ВТНекорректныеДанные.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ВТНекорректныеДанные.ОбъектРасчетов КАК ОбъектРасчетов
		|ИЗ
		|	ВТНекорректныеДанные КАК ВТНекорректныеДанные
		|СГРУППИРОВАТЬ ПО
		|	ВТНекорректныеДанные.АналитикаУчетаПоПартнерам,
		|	ВТНекорректныеДанные.ОбъектРасчетов";
	Запрос.УстановитьПараметр("ПустойОбъектРасчетов", Справочники.ОбъектыРасчетов.ПустаяСсылка());
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, 
		Запрос.Выполнить().Выгрузить(),
		ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПереформироватьНекорректныеОнлайнДвижения(Параметры) Экспорт
	
	ЗаданияКРаспределениюРасчетов = РегистрыСведений.ЗаданияКРаспределениюРасчетов;
	МетаданныеРегистра = ЗаданияКРаспределениюРасчетов.СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Очередь = Параметры.Очередь;
	
	Если ОбновляемыеДанные.Количество() = 0 
		Или Не ПерегенерацияОнлайнДвиженийДоступна(Очередь)
		Или Не ВсеОбъектыРасчетовСгенерированы(Очередь) Тогда
			Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Для Каждого ПорцияДанных Из ОбновляемыеДанные Цикл
	
		НачатьТранзакцию();
		
		Попытка
			КлючАналитикиУчетаПоПартнерам = ПорцияДанных.АналитикаУчетаПоПартнерам;
			ОбъектРасчетов = ПорцияДанных.ОбъектРасчетов;
			ДатаНачалаПересчета = ПорцияДанных.ДатаПересчета;
			
			НаборЗаписей = ЗаданияКРаспределениюРасчетов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектРасчетов.Установить(ОбъектРасчетов);
			НаборЗаписей.Отбор.АналитикаУчетаПоПартнерам.Установить(КлючАналитикиУчетаПоПартнерам);
			НаборЗаписей.Отбор.ДатаПересчета.Установить(ДатаНачалаПересчета);
			
			Если Не ЗначениеЗаполнено(ОбъектРасчетов) 
				ИЛИ Не ЗначениеЗаполнено(КлючАналитикиУчетаПоПартнерам)
				ИЛИ Не ЗначениеЗаполнено(ДатаНачалаПересчета) Тогда
					ТекстИсключения = НСтр("ru = 'Некорректные параметры для перезаполнение расчетных регистров.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Расчеты.Регистратор КАК Регистратор
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
			|ГДЕ
			|	Расчеты.Регистратор ССЫЛКА Документ.КорректировкаРегистров
			|	И Расчеты.ОбъектРасчетов = &ОбъектРасчетов
			|	И Расчеты.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Расчеты.Регистратор КАК Регистратор
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
			|ГДЕ
			|	Расчеты.Регистратор ССЫЛКА Документ.КорректировкаРегистров
			|	И Расчеты.ОбъектРасчетов = &ОбъектРасчетов
			|	И Расчеты.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
			|";
			Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
			Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", КлючАналитикиУчетаПоПартнерам);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Набор = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
				Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
				Набор.Прочитать();
				Счетчик = 0;
				Пока Счетчик < Набор.Количество() Цикл
					Если Набор[Счетчик].ОбъектРасчетов = ОбъектРасчетов 
						И Набор[Счетчик].АналитикаУчетаПоПартнерам = КлючАналитикиУчетаПоПартнерам Тогда
							Набор.Удалить(Счетчик);
					Иначе
						Счетчик = Счетчик + 1;
					КонецЕсли;
				КонецЦикла;
				Если Набор.Модифицированность() Тогда
					Набор.Записать();
				КонецЕсли;
				
				Набор = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
				Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
				Набор.Прочитать();
				Счетчик = 0;
				Пока Счетчик < Набор.Количество() Цикл
					Если Набор[Счетчик].ОбъектРасчетов = ОбъектРасчетов 
						И Набор[Счетчик].АналитикаУчетаПоПартнерам = КлючАналитикиУчетаПоПартнерам Тогда
							Набор.Удалить(Счетчик);
					Иначе
						Счетчик = Счетчик + 1;
					КонецЕсли;
				КонецЦикла;
				Если Набор.Модифицированность() Тогда
					Набор.Записать();
				КонецЕсли;
				
			КонецЦикла;
			
			ОсновныеПараметры = ОперативныеВзаиморасчетыСервер.СтруктураПараметровЗаполненияВзаиморасчетов();
			ОсновныеПараметры.ОбъектРасчетов = ОбъектРасчетов;
			ОсновныеПараметры.АналитикаУчетаПоПартнерам = КлючАналитикиУчетаПоПартнерам;
			Если ЗначениеЗаполнено(ДатаНачалаПересчета) Тогда
				ОсновныеПараметры.ПорядокФакт = Формат(ДатаНачалаПересчета, "ДФ=yyyyMMddHHmmss");
				ОсновныеПараметры.ПорядокПлан = Формат(ДатаНачалаПересчета, "ДФ=yyyyMMddHHmmss");
			КонецЕсли;
			
			РеквизитыОбъектРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектРасчетов, "ВалютаВзаиморасчетов, ТипРасчетов");
			
			ОсновныеПараметры.ВалютаРасчетов = РеквизитыОбъектРасчетов.ВалютаВзаиморасчетов;
			ОсновныеПараметры.ЭтоРасчетыСКлиентами = ?(РеквизитыОбъектРасчетов.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом,
															Истина,
															Ложь);
			ОперативныеВзаиморасчетыСервер.ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
		
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 , по причине: %2'");
			ТекстСообщения = СтрШаблон(Шаблон,
				ПолноеИмяРегистра,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеРегистра,
				,
				ТекстСообщения);
		
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

// Параметры:
// 	Очередь см. ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные.Очередь.
// 	
// Возвращаемое значение:
// 	Булево.
//
Функция ПерегенерацияОнлайнДвиженийДоступна(Очередь) Экспорт
	
		ОбработчикиГенерации = Новый Массив();
		ОбработчикиГенерации.Добавить("Документ.РегистраторРасчетов");
		ОбработчикиГенерации.Добавить("Справочник.ДоговорыКонтрагентов");
		ОбработчикиГенерации.Добавить("Справочник.ДоговорыМеждуОрганизациями");
		ОбработчикиГенерации.Добавить("Справочник.Контрагенты");
		ОбработчикиГенерации.Добавить("Справочник.Организации");
		ОбработчикиГенерации.Добавить("Справочник.Партнеры");
		ОбработчикиГенерации.Добавить("РегистрНакопления.РасчетыСПоставщиками");
		ОбработчикиГенерации.Добавить("РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
		ОбработчикиГенерации.Добавить("РегистрНакопления.РасчетыСПоставщикамиПланОплат");
		ОбработчикиГенерации.Добавить("РегистрНакопления.РасчетыСПоставщикамиПланПоставок");
		ОбработчикиГенерации.Добавить("РегистрНакопления.РасчетыСКлиентами");
		ОбработчикиГенерации.Добавить("РегистрНакопления.РасчетыСКлиентамиПоСрокам");
		ОбработчикиГенерации.Добавить("РегистрНакопления.РасчетыСКлиентамиПланОплат");
		ОбработчикиГенерации.Добавить("РегистрНакопления.РасчетыСКлиентамиПланОтгрузок");
		
		ОбработкаЗавершена = Истина;
		
		Для Каждого Обработчик Из ОбработчикиГенерации Цикл
			Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Очередь, Обработчик) Тогда
				ОбработкаЗавершена = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Возврат ОбработкаЗавершена;
	
КонецФункции

#КонецОбласти

// Параметры:
// 	Источник - ЛюбаяСсылка.
// 	
// Возвращаемое значение:
// 	Булево.
//
Функция ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(Источник) Экспорт
	
	Если ЗначениеЗаполнено(Источник) Тогда
		Если ТипЗнч(Источник) = Тип("СправочникСсылка.КлючиАналитикиУчетаПоПартнерам") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК Поле1
				|ИЗ
				|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
				|ГДЕ
				|	КлючиАналитикиУчетаПоПартнерам.Ссылка = &Ссылка
				|	И (НЕ КлючиАналитикиУчетаПоПартнерам.Организация = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				|				И КлючиАналитикиУчетаПоПартнерам.Организация.Ссылка ЕСТЬ NULL
				|			ИЛИ НЕ КлючиАналитикиУчетаПоПартнерам.Контрагент В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
				|				И КлючиАналитикиУчетаПоПартнерам.Контрагент.Ссылка ЕСТЬ NULL
				|			ИЛИ КлючиАналитикиУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
				|				И КлючиАналитикиУчетаПоПартнерам.Партнер.Ссылка ЕСТЬ NULL
				|			ИЛИ НЕ КлючиАналитикиУчетаПоПартнерам.Договор В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
				|				И КлючиАналитикиУчетаПоПартнерам.Договор.Ссылка ЕСТЬ NULL
				|			ИЛИ КлючиАналитикиУчетаПоПартнерам.НаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
				|				И КлючиАналитикиУчетаПоПартнерам.НаправлениеДеятельности.Ссылка ЕСТЬ NULL)";
			
			Запрос.УстановитьПараметр("Ссылка", Источник);
			УстановитьПривилегированныйРежим(Истина);
			Возврат Не Запрос.Выполнить().Пустой() Или Не ОбщегоНазначения.СсылкаСуществует(Источник);
			УстановитьПривилегированныйРежим(Ложь);
		Иначе
			Возврат Не ОбщегоНазначения.СсылкаСуществует(Источник);
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли
	
КонецФункции

// Параметры:
// 	Объект - ДокументОбъект,СправочникОбъект - .
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений
//
Функция ТаблицаСторон(Объект, Параметры)
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить(Тип("СправочникСсылка.Организации"));
	СписокТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ОписаниеТипаПоляКонтрагент = Новый ОписаниеТипов(СписокТипов);
	
	ТаблицаСторон = Новый ТаблицаЗначений;
	ТаблицаСторон.Колонки.Добавить("Контрагент", Новый ОписаниеТипов(ОписаниеТипаПоляКонтрагент));
	ТаблицаСторон.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаСторон.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТаблицаСторон.Колонки.Добавить("ВалютаВзаиморасчетов",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаСторон.Колонки.Добавить("ТипРасчетов",Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРасчетовСПартнерами"));
	
	Если ТипЗнч(Параметры) <> Тип("Массив") Тогда
		МассивСтруктур = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры);
	Иначе
		МассивСтруктур = Параметры;
	КонецЕсли;
	
	Для Каждого СтруктураПараметров Из МассивСтруктур Цикл
		
		Если СтруктураПараметров.Свойство("СсылкаНового") Тогда
			Ссылка = СтруктураПараметров.СсылкаНового;
		Иначе
			Ссылка = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Ссылка);
		КонецЕсли;
		
		ОрганизацияВСтроках  = СтруктураПараметров.ОрганизацияВСтроках И ТипЗнч(СтруктураПараметров.Организация) = Тип("Строка");
		КонтрагентВСтроках   = СтруктураПараметров.КонтрагентВСтроках И ТипЗнч(СтруктураПараметров.Контрагент) = Тип("Строка");
		ПартнерВСтроках      = СтруктураПараметров.ПартнерВСтроках И ТипЗнч(СтруктураПараметров.Партнер) = Тип("Строка");
		ВалютаВзаиморасчетовВСтроках = СтруктураПараметров.ВалютаВзаиморасчетовВСтроках И ТипЗнч(СтруктураПараметров.ВалютаВзаиморасчетов) = Тип("Строка");
		ВалютаДокумента = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ВалютаДокумента);
		
		Если ОрганизацияВСтроках ИЛИ КонтрагентВСтроках ИЛИ ПартнерВСтроках ИЛИ ВалютаВзаиморасчетовВСтроках Тогда
			
			Если ОрганизацияВСтроках И КонтрагентВСтроках
				И СтрРазделить(СтруктураПараметров.Организация, ".")[1] <> СтрРазделить(СтруктураПараметров.Контрагент, ".")[1] Тогда
				ВызватьИсключение(НСтр("ru = 'Ошибка встраивания. Отличаются табличные части содержащие контрагента и организацию.'"));
			КонецЕсли;
			
			Если ОрганизацияВСтроках Тогда
				Имена = СтрРазделить(СтруктураПараметров.Организация, ".");
				Имена.Удалить(Имена.ВГраница());
				ТабличнаяЧасть = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтрСоединить(Имена, ".")); // ТабличнаяЧасть 
			ИначеЕсли КонтрагентВСтроках ИЛИ ПартнерВСтроках ИЛИ ВалютаВзаиморасчетовВСтроках Тогда
				ТабличнаяЧасть = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа); // ТабличнаяЧасть
			КонецЕсли;
			
			ОбъектыРасчетовВСтроках = Ложь;
			Если ТабличнаяЧасть.Количество() > 0 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧасть[0], "ОбъектРасчетов") Тогда
				ОбъектыРасчетовВСтроках = Истина;
				Объекты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
					ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТабличнаяЧасть.Выгрузить(,"ОбъектРасчетов").ВыгрузитьКолонку("ОбъектРасчетов")),"Объект");
			КонецЕсли;
			
			Для Каждого Стр Из ТабличнаяЧасть Цикл
				
				Если НЕ СсылкаЯвляетсяОбъектомРасчетов(Объект, СтруктураПараметров) 
					И НЕ (ОбъектыРасчетовВСтроках
							И (НЕ ЗначениеЗаполнено(Стр.ОбъектРасчетов)
									ИЛИ Объекты[Стр.ОбъектРасчетов].Объект = Ссылка)) Тогда
					Продолжить;
				КонецЕсли;
				
				НовСтр = ТаблицаСторон.Добавить();
				
				Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
					Идентификатор = Стр.ПолучитьИдентификатор();
				Иначе
					Идентификатор = Стр.НомерСтроки;
				КонецЕсли;
				
				Если ОрганизацияВСтроках Тогда
					НовСтр.Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация, Идентификатор);
				Иначе
					НовСтр.Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
				КонецЕсли;
				
				Если КонтрагентВСтроках Тогда
					НовСтр.Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент, Идентификатор);
				Иначе
					НовСтр.Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент);
				КонецЕсли;
				
				Если ПартнерВСтроках Тогда
					НовСтр.Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер, Идентификатор);
				Иначе
					НовСтр.Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер);
				КонецЕсли;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Стр, "ВалютаВзаиморасчетов") Тогда
					НовСтр.ВалютаВзаиморасчетов = ?(ЗначениеЗаполнено(Стр.ВалютаВзаиморасчетов), Стр.ВалютаВзаиморасчетов, ВалютаДокумента);
				Иначе
					НовСтр.ВалютаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(
						Объект, ?(ЗначениеЗаполнено(СтруктураПараметров.ВалютаВзаиморасчетов), 
									СтруктураПараметров.ВалютаВзаиморасчетов, 
									СтруктураПараметров.ВалютаДокумента));
				КонецЕсли;
				
				НовСтр.ТипРасчетов = СтруктураПараметров.ТипРасчетов;
				
			КонецЦикла;
			
		Иначе
			Если СсылкаЯвляетсяОбъектомРасчетов(Объект, СтруктураПараметров)
				И (ЗначениеЗаполнено(СтруктураПараметров.ОбъектРасчетов) ИЛИ СтруктураПараметров.ЭтоСправочник)
				ИЛИ СтруктураПараметров.ТолькоОстатки Тогда
				НовСтр = ТаблицаСторон.Добавить();
				НовСтр.Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Организация);
				НовСтр.Контрагент = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Контрагент);
				НовСтр.Партнер = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, СтруктураПараметров.Партнер);
				НовСтр.ВалютаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(
						Объект, ?(ЗначениеЗаполнено(СтруктураПараметров.ВалютаВзаиморасчетов), 
									СтруктураПараметров.ВалютаВзаиморасчетов, 
									СтруктураПараметров.ВалютаДокумента));
				НовСтр.ТипРасчетов = СтруктураПараметров.ТипРасчетов;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСторон;
	
КонецФункции

#КонецОбласти

#КонецЕсли
