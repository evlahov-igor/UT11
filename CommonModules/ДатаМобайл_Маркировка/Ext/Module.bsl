
#Область Маркировка

#Область ОбщиеФункции

Функция ТребуетсяСпецОбработка(Об) Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("ПриобретениеТоваровУслуг");
	Список.Добавить("РеализацияТоваровУслуг");
	Список.Добавить("МаркировкаТоваровИСМП");
	Список.Добавить("ДатаМобайл_УпаковочныйЛист");
	Список.Добавить("ОтгрузкаТоваровИСМП");
	Список.Добавить("ПриемкаТоваровИСМП");
	Список.Добавить("ВозвратТоваровПоставщику");
	Список.Добавить("ВыводИзОборотаИСМП");
	Список.Добавить("ВозвратТоваровОтКлиента");
	Список.Добавить("ВозвратВОборотИСМП");
	Список.Добавить("ЧекККМ");
	Список.Добавить("ЧекККМВозврат");
	Список.Добавить("СписаниеКодовМаркировкиИСМП");
	Список.Добавить("ПередачаТоваровМеждуОрганизациями");
	Список.Добавить("ПеремаркировкаТоваровИСМП");
	Список.Добавить("ВозвратТоваровМеждуОрганизациями");
	Список.Добавить("КорректировкаРеализации");	
	Список.Добавить("РасходныйОрдерНаТовары");
	Список.Добавить("ПриходныйОрдерНаТовары");
	Список.Добавить("ОтборРазмещениеТоваров");
	Список.Добавить("ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	
	Возврат (Список.НайтиПоЗначению(Об.Шаблон.ВидДокумента) <> Неопределено Или Список.НайтиПоЗначению(Об.Шаблон.ВидДокументаНового) <> Неопределено);
	
КонецФункции // ()

Функция ПолучитьТипМаркированнойПродукции(лНоменклатура) Экспорт
	
	ТипПродукции = 0;
	
	Попытка
		ПродукцияИСМП = Новый Массив;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Велосипеды); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Духи); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КреслаКоляски); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Шины); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.БАДы); Исключение КонецПопытки;
		Попытка ПродукцияИСМП.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Антисептики); Исключение КонецПопытки;
		
		ПродукцияИСМП_Молочка = Новый Массив;
		Попытка ПродукцияИСМП_Молочка.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция); Исключение КонецПопытки;
		Попытка ПродукцияИСМП_Молочка.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС); Исключение КонецПопытки;
		Попытка ПродукцияИСМП_Молочка.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС); Исключение КонецПопытки;
		
		ПродукцияИСМП_Табак = Новый Массив;
		Попытка ПродукцияИСМП_Табак.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция); Исключение КонецПопытки;
		Попытка ПродукцияИСМП_Табак.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак); Исключение КонецПопытки;
		Попытка ПродукцияИСМП_Табак.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция); Исключение КонецПопытки;
		
		ПродукцияИСМП_Вода = Новый Массив;
		Попытка ПродукцияИСМП_Вода.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.УпакованнаяВода); Исключение КонецПопытки;
		
		ПродукцияИСМП_Пиво = Новый Массив;
		Попытка ПродукцияИСМП_Пиво.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Пиво); Исключение КонецПопытки;
		Попытка ПродукцияИСМП_Пиво.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво); Исключение КонецПопытки;
		
		ПродукцияИСМП_Мех = Новый Массив;
		Попытка ПродукцияИСМП_Мех.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха); Исключение КонецПопытки;
		
		ПродукцияИСМП_СоковаяПродукция = Новый Массив;
		Попытка ПродукцияИСМП_СоковаяПродукция.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.СоковаяПродукция); Исключение КонецПопытки;
		
		ПродукцияИСМП_Морепродукты = Новый Массив;
		Попытка ПродукцияИСМП_Морепродукты.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС); Исключение КонецПопытки;
		
		Если ПродукцияИСМП_Табак.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			Или ПродукцияИСМП_Табак.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
			ТипПродукции = 1; // Табак	
		ИначеЕсли лНоменклатура.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты 
			Или лНоменклатура.ВидНоменклатуры = Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты Тогда
			ТипПродукции = 4;  // Фотоаппараты
		ИначеЕсли ПродукцияИСМП_Молочка.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			Или ПродукцияИСМП_Молочка.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
			ТипПродукции = 5; // Молочка		
		ИначеЕсли ПродукцияИСМП.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			Или ПродукцияИСМП.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
			ТипПродукции = 2; // Обувь и прочее
		ИначеЕсли ПродукцияИСМП_Вода.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			Или ПродукцияИСМП_Вода.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
			ТипПродукции = 8; // Вода
		ИначеЕсли ПродукцияИСМП_Пиво.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			Или ПродукцияИСМП_Пиво.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
			ТипПродукции = 10; // Пиво
		ИначеЕсли ПродукцияИСМП_Мех.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			Или ПродукцияИСМП_Мех.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
			ТипПродукции = 11; // Товары из натурального меха
		ИначеЕсли ПродукцияИСМП_СоковаяПродукция.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			Или ПродукцияИСМП_СоковаяПродукция.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
			ТипПродукции = 12; // Соковая продукция
		ИначеЕсли ПродукцияИСМП_Морепродукты.Найти(лНоменклатура.ОсобенностьУчета) <> Неопределено 
			Или ПродукцияИСМП_Морепродукты.Найти(лНоменклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
			ТипПродукции = 13; // Морепродукты	
		КонецЕсли;			
	Исключение
	КонецПопытки;	
	
	Если ДатаМобайл_ОбщийМодуль.ЕстьМДЛП() И ТипПродукции = 0 Тогда
		Попытка
			Если лНоменклатура.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.УАС_МДЛП 
				Или лНоменклатура.ВидНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.УАС_МДЛП Тогда
				ТипПродукции = 3;  // МДЛП
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			Если лНоменклатура.ВидНоменклатуры.МДЛП_ЛекарственныйПрепарат И ТипПродукции = 0 Тогда
				ТипПродукции = 3;  // МДЛП	
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			Если (лНоменклатура.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ 
				Или лНоменклатура.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ
				Или лНоменклатура.ВидНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ
				Или лНоменклатура.ВидНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ) И ТипПродукции = 0 Тогда
				ТипПродукции = 3;  // МДЛП	
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат ТипПродукции;
	
КонецФункции

Функция ОбработатьЭкранированиеСтроки(ВходящаяСтрока, ЭкранироватьСкобки = Истина) Экспорт
	
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, "&lt;", "<");
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, "&gt;", ">");
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, "&quot;", """");
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, "&apos;", "'");
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, "\/", "/");
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, Символ(0), "");
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, Символ(29), "");
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, Символы.ВК, "");
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, Символы.ВТаб, "");
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, Символы.НПП, "");
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, Символы.ПС, "");
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, Символы.ПФ, "");
	ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, Символы.Таб, "");	
	
	//Экранирование GS1 в алфавите маркировки не участвуют символы []
	Если ЭкранироватьСкобки Тогда
		ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, "[", "(");
		ВходящаяСтрока = СтрЗаменить(ВходящаяСтрока, "]", ")");
	КонецЕсли;
	
	Возврат ВходящаяСтрока;
	
КонецФункции // ()

// Декодирует штрихкод по алгоритму Base64 в строковый формат.
// 
// Параметры:
//  ШтрихкодВBase64 - Строка - закодированный штрихкод.
// Возвращаемое значение:
//  Строка - Декодированный штрихкод.
Функция Base64ВШтрихкод(ШтрихкодВBase64) Экспорт
	
	ДвоичныеДанные = Base64Значение(ШтрихкодВBase64);
	Если ДвоичныеДанные = Неопределено Тогда
		Штрихкод = ШтрихкодВBase64;
	Иначе
		Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

Функция ОбщийМодуль(Имя) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда		
		Модуль = Вычислить(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

Функция УбратьСкобкиТеговМарка(Строка, ТипПродукции) Экспорт
	
	//Пачка табака:
	//GTIN+SN = 21
	//Блок табака:
	//01+GTIN+21+SN = 25
	//Обувь:
	//01+GTIN+21+SN = 31
	//Лекарства:
	//01+GTIN+21+SN = 31
	//Фотоаппараты:
	//01+GTIN+21+SN = 38	
	//Молочка:
	//01+GTIN+21+SN = 24
	
	Если Лев(Строка, 1) = "(" Тогда 
		
		НоваяСтрока = Лев(Строка, 22);
		НоваяСтрока = СтрЗаменить(НоваяСтрока, "(", "");
		НоваяСтрока = СтрЗаменить(НоваяСтрока, ")", "");
		
		Если ТипПродукции = 1 Тогда //Блоки сигарет
			НоваяСтрока2 = Сред(Строка, 23, 7);
		ИначеЕсли ТипПродукции = 4 Тогда //Фотоаппараты
			НоваяСтрока2 = Сред(Строка, 23, 20);
		ИначеЕсли ТипПродукции = 5 Тогда //Молочка
			НоваяСтрока2 = Сред(Строка, 23, 6);	
		Иначе
			НоваяСтрока2 = Сред(Строка, 23, 13);
		КонецЕсли;
		
		Итог = НоваяСтрока + НоваяСтрока2;		
	Иначе   		
		Если ТипПродукции = 1 Тогда //Пачки сигарет
			НоваяСтрока = Сред(Строка, 1, 21);
		Иначе
			НоваяСтрока = Строка;
		КонецЕсли;
		
		Итог = НоваяСтрока;		
	КонецЕсли;
	
	Возврат Итог;
	
КонецФункции

Функция УбратьСкобкиТеговУпаковка(Строка) Экспорт
	
	НоваяСтрока = СтрЗаменить(Строка, "(", "");
	НоваяСтрока = СтрЗаменить(НоваяСтрока, ")", "");
	итог = НоваяСтрока;	
	
	Возврат итог;
	
КонецФункции

Функция ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора(ДокументПриемки) Экспорт
		
	СоответствиеКодаМаркировкиНоменклатуре = Новый Соответствие;
	
	Выборка = РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.Выбрать(Новый Структура("Документ", ДокументПриемки));
	
	Если Выборка.Следующий() Тогда
		
		ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора = Выборка.ДанныеПроверкиИПодбора.Получить();		
		ДеревоМаркированнойПродукции = ДанныеНоменклатурыПоДаннымСтатусовПроверкиИПодбора.ДеревоМаркированнойПродукции;		
		
		Для каждого СтрокаДерева Из ДеревоМаркированнойПродукции.Строки Цикл
			
			ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(СтрокаДерева,СоответствиеКодаМаркировкиНоменклатуре);
			
		КонецЦикла;	
				
	КонецЕсли;
	
	Возврат СоответствиеКодаМаркировкиНоменклатуре;	
	
КонецФункции

Процедура ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(СтрокаДерева, СоответствиеКодаМаркировкиНоменклатуре)
		
	Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) И ЗначениеЗаполнено(СтрокаДерева.Штрихкод) Тогда
		
		ТипПродукции = ДатаМобайл_Маркировка.ПолучитьТипМаркированнойПродукции(СтрокаДерева.Номенклатура); 
		ЗначениеШтрихкода = ДатаМобайл_Маркировка.УбратьСкобкиТеговМарка(СтрокаДерева.Штрихкод, ТипПродукции);
		
		НайденноеСоответствие = СоответствиеКодаМаркировкиНоменклатуре.Получить(ЗначениеШтрихкода);
		
		Если НайденноеСоответствие = Неопределено Тогда
			ДанныеНоменклатуры = Новый Структура;
			ДанныеНоменклатуры.Вставить("Номенклатура",              СтрокаДерева.Номенклатура);
			ДанныеНоменклатуры.Вставить("Характеристика",            СтрокаДерева.Характеристика);
			
			СоответствиеКодаМаркировкиНоменклатуре.Вставить(ЗначениеШтрихкода, ДанныеНоменклатуры);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДерева.Строки.Количество() <> 0 Тогда
		
		Для каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
			
			ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(ВложеннаяСтрокаДерева, СоответствиеКодаМаркировкиНоменклатуре);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьКМ

Функция ПолучитьСвободныеКодыМаркировки(ТребуемоеКоличествоКодов, лНоменклатура, лХарактеристика) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПулКодовМаркировкиСУЗ.КодМаркировки КАК Код,
	|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки КАК ПолныйКод
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|ГДЕ
	|	ПулКодовМаркировкиСУЗ.Номенклатура = &Номенклатура
	|	И ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)
	|	И ПулКодовМаркировкиСУЗ.Характеристика = &Характеристика");
	Запрос.УстановитьПараметр("Номенклатура", лНоменклатура);
	Запрос.УстановитьПараметр("Характеристика", лХарактеристика);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ ПЕРВЫЕ " + ТребуемоеКоличествоКодов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ()

Процедура УстановитьДатуПечатиДляКМ(СвободныйКодМаркировки) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.КодМаркировки.Значение = СвободныйКодМаркировки.Код;
	НаборЗаписей.Отбор.КодМаркировки.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		
		Запись.ДатаПечатиУниверсальная = ТекущаяДата();
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКодамиSSCC

Функция ПолучитьСледующийНомерSSCC(ЦифраРасширения, ПрефиксКомпанииGS1) Экспорт
	
	СерийныйНомерSSCC = ПолучитьПосленийНомерSSCC(ЦифраРасширения, ПрефиксКомпанииGS1) + 1;	
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("ЦифраРасширения",    ЦифраРасширения);
	ПараметрыШтрихкода.Вставить("ПрефиксКомпанииGS1", ПрефиксКомпанииGS1);
	ПараметрыШтрихкода.Вставить("СерийныйНомерSSCC",  СерийныйНомерSSCC);
	
	Возврат ШтрихкодSSCC(ПараметрыШтрихкода);	
	
КонецФункции // ()

Функция ПолучитьПосленийНомерSSCC(ЦифраРасширения, ПрефиксКомпанииGS1)
	
	Модуль_СтроковыеФункцииКлиентСервер = ОбщийМодуль("СтроковыеФункцииКлиентСервер");
	
	ЧастьШтрихкодаБезСкобок  = "00" + ЦифраРасширения + ПриведенноеКДлинеЗначение(ПрефиксКомпанииGS1, 9);
	ЧастьШтрихкодаСоСкобками = "(00)" + ЦифраРасширения + ПриведенноеКДлинеЗначение(ПрефиксКомпанииGS1, 9);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЧастьШтрихкода", ЧастьШтрихкодаСоСкобками + "%");
	Запрос.УстановитьПараметр("ТипШтрихкода", Перечисления.ТипыШтрихкодов.SSCC);
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	&ВыражениеСерийныйНомерSSCC КАК СерийныйНомерSSCC
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЧастьШтрихкода
	|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода = &ТипШтрихкода
	|
	|УПОРЯДОЧИТЬ ПО
	|	СерийныйНомерSSCC УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеСерийныйНомерSSCC", "ПОДСТРОКА(ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода, 15, 7)");
	
	Результат = Запрос.Выполнить();
	ПоследнийНомерВБД = 0;
	
	Если Результат.Пустой() Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеСерийныйНомерSSCC", "ПОДСТРОКА(ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода, 13, 7)");
		Запрос.УстановитьПараметр("ЧастьШтрихкода", ЧастьШтрихкодаБезСкобок + "%");
		Результат = Запрос.Выполнить();
	КонецЕсли;
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Модуль_СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.СерийныйНомерSSCC);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ()

Функция ПриведенноеКДлинеЗначение(Знач ИсходнаяСтрока, Длина)
	
	Если ТипЗнч(ИсходнаяСтрока) = Тип("Число") Тогда
		Строка = Формат(ИсходнаяСтрока, "ЧН=0; ЧГ=0");
	Иначе
		Строка = СокрЛП(ИсходнаяСтрока);
	КонецЕсли;
	ТекущаяДлина = СтрДлина(Строка);
	Пока ТекущаяДлина < Длина Цикл
		Строка = "0" + Строка;
		ТекущаяДлина = ТекущаяДлина + 1;
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

Функция ШтрихкодSSCC(ПараметрыШтрихкода, УстанавливатьСкобки = Истина)
	
	ЦифраРасширения    = ПараметрыШтрихкода.ЦифраРасширения;
	ПрефиксКомпанииGS1 = ПараметрыШтрихкода.ПрефиксКомпанииGS1;
	СерийныйНомерSSCC  = ПараметрыШтрихкода.СерийныйНомерSSCC;
	
	Если ЗначениеЗаполнено(ПрефиксКомпанииGS1)
		И ЗначениеЗаполнено(СерийныйНомерSSCC) Тогда
		
		Штрихкод = Формат(ЦифраРасширения, "ЧН=0; ЧГ=0")
		+ ПриведенноеКДлинеЗначение(ПрефиксКомпанииGS1, 9)
		+ ПриведенноеКДлинеЗначение(СерийныйНомерSSCC, 7);
		
		КонтрольноеЧисло = КонтрольноеЧислоSSCC(Штрихкод);
		
		Если УстанавливатьСкобки Тогда
			Штрихкод = "(00)" + Штрихкод + КонтрольноеЧисло;
		Иначе
			Штрихкод = "00" + Штрихкод + КонтрольноеЧисло;
		КонецЕсли;
	Иначе
		
		Штрихкод = "";
		
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

Функция КонтрольноеЧислоSSCC(Штрихкод)
	
	КонтрольноеЧисло = 0;
	Модуль_СтроковыеФункцииКлиентСервер = ОбщийМодуль("СтроковыеФункцииКлиентСервер");
	
	Цифры = Новый Массив;
	Позиций  = СтрДлина(Штрихкод);
	Для НомерПозиции = 1 По Позиций Цикл
		Цифры.Добавить(Модуль_СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Сред(Штрихкод, НомерПозиции, 1)));
	КонецЦикла;
	
	СуммаЧетных = 0;
	СуммаНечетных = 0;
	Для НомерПозиции = 0 По Позиций - 1 Цикл
		Если НомерПозиции % 2 = 0 Тогда
			СуммаЧетных = СуммаЧетных + Цифры[НомерПозиции];
		Иначе
			СуммаНечетных = СуммаНечетных + Цифры[НомерПозиции];
		КонецЕсли;
	КонецЦикла;
	
	СверяемоеЧисло = СуммаЧетных * 3 + СуммаНечетных;
	КонтрольноеЧисло = 10 - СверяемоеЧисло % 10;
	Если КонтрольноеЧисло = 10 Тогда
		КонтрольноеЧисло = 0;
	КонецЕсли;
	
	Возврат КонтрольноеЧисло;
	
КонецФункции

#КонецОбласти

#Область ВнесениеВБазу

#Область ОбработкаДокументов

Функция ПолучитьДокументМаркировки(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок) Экспорт
	
	Шаблон = ДокументТСД.Шаблон;
	ВидДокумента 		= Шаблон.ВидДокумента;
	ВидДокументаНового 	= Шаблон.ВидДокументаНового;
	
	МаркиУказаныПоставщиком = Ложь;
	Если ВидДокумента = "ВозвратТоваровОтКлиента" Тогда
		Если ЭтоНовыйДокумент Тогда
		Иначе
			Попытка
				Если ИсходныйДокумент.ШтрихкодыУпаковок.Количество() > 0 Тогда
					МаркиУказаныПоставщиком = Истина;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ВидДокумента = "ВозвратВОборотИСМП" 
		Или ВидДокументаНового = "ВозвратВОборотИСМП" 
		Или ВидДокумента = "ПеремаркировкаТоваровИСМП" 
		Или ВидДокументаНового = "ПеремаркировкаТоваровИСМП"Тогда
		
		Возврат ОбработатьВидДокументаВозвратВОборотИСМП(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок);
				
	ИначеЕсли ВидДокумента = "ЧекККМ" Или ВидДокументаНового = "ЧекККМ"
		Или ВидДокумента = "ЧекККМВозврат" Или ВидДокументаНового = "ЧекККМВозврат" Тогда
		
		Возврат ОбработатьВидДокументаЧекККМ(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок);
		
	ИначеЕсли ВидДокумента = "ПриобретениеТоваровУслуг" 
		Или (ВидДокумента = "ПриобретениеТоваровУслуг" И ВидДокументаНового = "ПриходныйОрдерНаТовары")
		Или (ВидДокумента = "ПриемкаТоваровИСМП" И Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 0)
		Или (ВидДокумента = "ВозвратТоваровОтКлиента" И (МаркиУказаныПоставщиком Или Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 0)) 
		Или (ВидДокумента = "ЗаказПоставщику" И ВидДокументаНового = "ПриобретениеТоваровУслуг") Тогда
		
		Возврат ОбработатьВидДокументаПриобретениеТоваровУслуг(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок);
		
	ИначеЕсли (ВидДокумента = "ПриемкаТоваровИСМП" И Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0) Тогда
		
		Возврат ОбработатьВидДокументаПриемкаТоваровИСМП(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок);
		
	ИначеЕсли ВидДокумента = "РеализацияТоваровУслуг" 
		Или ВидДокумента = "ОтгрузкаТоваровИСМП" 
		Или ВидДокумента = "ВозвратТоваровПоставщику" 
		Или (ВидДокумента = "ВозвратТоваровОтКлиента" И (Не МаркиУказаныПоставщиком Или Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор <> 0))
		Или ВидДокументаНового = "ВозвратТоваровОтКлиента"
		Или ВидДокументаНового = "РеализацияТоваровУслуг"
		Или ВидДокумента = "ВыводИзОборотаИСМП" 
		Или ВидДокументаНового = "ВыводИзОборотаИСМП" 
		Или ВидДокумента = "СписаниеКодовМаркировкиИСМП" 
		Или ВидДокументаНового = "СписаниеКодовМаркировкиИСМП"
		Или ВидДокумента = "ПередачаТоваровМеждуОрганизациями" 
		Или ВидДокументаНового = "ПередачаТоваровМеждуОрганизациями" 
		Или ВидДокумента = "ВозвратТоваровМеждуОрганизациями" 
		Или ВидДокументаНового = "ВозвратТоваровМеждуОрганизациями" 
		Или ВидДокумента = "КорректировкаРеализации"
		Или ВидДокумента = "РасходныйОрдерНаТовары"
		Или ВидДокументаНового = "РасходныйОрдерНаТовары" 
		Или ВидДокумента = "ПриходныйОрдерНаТовары"
		Или ВидДокументаНового = "ПриходныйОрдерНаТовары"	
		Или ВидДокумента = "ОтборРазмещениеТоваров" 
		Или ВидДокументаНового = "ОтборРазмещениеТоваров"
		Или ВидДокумента = "ЗаказНаЭмиссиюКодовМаркировкиСУЗ" 
		Или ВидДокументаНового = "ЗаказНаЭмиссиюКодовМаркировкиСУЗ"
		Тогда
		
		Возврат ОбработатьВидДокументаРеализацияТоваровУслуг(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок);
		
	ИначеЕсли ВидДокумента = "МаркировкаТоваровИСМП" Или ВидДокументаНового = "МаркировкаТоваровИСМП" Тогда
		
		Возврат ОбработатьВидДокументаМаркировкаТоваровИСМП(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок);
		
	ИначеЕсли ВидДокумента = "ДатаМобайл_УпаковочныйЛист" Тогда
		
		ОбработатьВидДокументаДатаМобайл_УпаковочныйЛист(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок);
		Возврат "";
		
	КонецЕсли;
	
КонецФункции // ()

Функция ПолучитьТЗПоДаннымТСДиГрупповымДокументам(ДокументТСДСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСДЗадания.Задание КАК Задание,
	|	ДатаМобайл_ДокументыТСДЗадания.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Задание
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.Задания КАК ДатаМобайл_ДокументыТСДЗадания
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДЗадания.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЦРПТМарка КАК ЦРПТМарка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист КАК УпаковочныйЛист,
	|	СУММА(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_ПодборТСДГрязный
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕдиницаИзмерения,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЦРПТМарка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Характеристика КАК Характеристика,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ТоварыПоДокументам
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_Задание.Задание КАК Задание
	|			ИЗ
	|				ВТ_Задание КАК ВТ_Задание)
	|	И РеализацияТоваровУслугТовары.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка)
	|	И РеализацияТоваровУслугТовары.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|	И РеализацияТоваровУслугТовары.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы)
	|	И РеализацияТоваровУслугТовары.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ)
	|	И РеализацияТоваровУслугТовары.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
	|	И РеализацияТоваровУслугТовары.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом)
	|	И РеализацияТоваровУслугТовары.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме)
	|	И РеализацияТоваровУслугТовары.Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Партнером)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПодборТСДГрязный.Номенклатура КАК Номенклатура,
	|	ВТ_ПодборТСДГрязный.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ПодборТСДГрязный.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ПодборТСДГрязный.ЦРПТМарка КАК ЦРПТМарка,
	|	ВТ_ПодборТСДГрязный.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ВТ_ПодборТСДГрязный.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ПодборТСД
	|ИЗ
	|	ВТ_ПодборТСДГрязный КАК ВТ_ПодборТСДГрязный
	|ГДЕ
	|	ВТ_ПодборТСДГрязный.Количество <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПодборТСД.Номенклатура КАК Номенклатура,
	|	ВТ_ПодборТСД.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ПодборТСД.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ПодборТСД.ЦРПТМарка КАК ЦРПТМарка,
	|	СУММА(ВТ_ТоварыПоДокументам.Количество) КАК КоличествоПоДокументу,
	|	ВТ_ТоварыПоДокументам.Ссылка КАК Ссылка,
	|	ВТ_ПодборТСД.Количество КАК КоличествоПоТСД,
	|	ВТ_Задание.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	ВТ_ТоварыПоДокументам КАК ВТ_ТоварыПоДокументам
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ПодборТСД КАК ВТ_ПодборТСД
	|		ПО ВТ_ТоварыПоДокументам.Номенклатура = ВТ_ПодборТСД.Номенклатура
	|			И ВТ_ТоварыПоДокументам.Характеристика = ВТ_ПодборТСД.ХарактеристикаНоменклатуры
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Задание КАК ВТ_Задание
	|		ПО ВТ_ТоварыПоДокументам.Ссылка = ВТ_Задание.Задание
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПодборТСД.Номенклатура,
	|	ВТ_ПодборТСД.ХарактеристикаНоменклатуры,
	|	ВТ_ПодборТСД.ЕдиницаИзмерения,
	|	ВТ_ПодборТСД.ЦРПТМарка,
	|	ВТ_ТоварыПоДокументам.Ссылка,
	|	ВТ_ПодборТСД.Количество,
	|	ВТ_Задание.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Номенклатура КАК Номенклатура,
	|	ВТ_Данные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Данные.ЦРПТМарка КАК ЦРПТМарка,
	|	ВТ_Данные.КоличествоПоДокументу КАК КоличествоПоДокументу,
	|	ВТ_Данные.Ссылка КАК Ссылка,
	|	ВТ_Данные.КоличествоПоТСД КАК КоличествоПоТСД
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ВТ_Данные.Номенклатура) = ТИП(Справочник.номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Данные.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументТСДСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ВнестиВбазуНесколькоДокументов(МассивДокументов, ДокументТСД, ПараметрыШаблона) Экспорт
	
	СтрокаОшибок            = "";
	Шаблон					= ДокументТСД.Шаблон;
	СоздаватьЕслиНеНайдена 	= ПараметрыШаблона.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
	ПривязыватьGTIN 		= ПараметрыШаблона.МаркировкаПривязыватьGTINКакШтрихкод;
	ТЧПриЗагрузкеПодбор     = ПараметрыШаблона.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор     		= ПараметрыШаблона.ИмяТабличнойЧастиПодбор;
	
	//нужна для создания КМ в базе 1с
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ДокументТСД, СоздаватьЕслиНеНайдена, ПривязыватьGTIN);
	
	ТЗ = ПолучитьТЗПоДаннымТСДиГрупповымДокументам(ДокументТСД.Ссылка);
	
	ТЗДляИзменений = ТЗ.Скопировать();
	ТЗДляИзменений.Колонки.Добавить("КМСсылка");
	
	ЭтоПоследнийДокумент = Ложь;
	
	Для каждого СтрокаДокумент Из МассивДокументов Цикл //Раскидываю товары по документам, если есть остатки или нет позиции в документах, тогда всё закидываю в последний документ
		ТЗОтбораПоДокументу = ТЗДляИзменений.Скопировать(Новый Структура("Ссылка", СтрокаДокумент));
		
		ЭтоПоследнийДокумент = МассивДокументов[МассивДокументов.Количество() - 1] = СтрокаДокумент;
		
		Для каждого СтрокаОтбораПоДокументу Из ТЗОтбораПоДокументу Цикл
			
			СтрокиПоиска = ТЗОтбораПоДокументу.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаОтбораПоДокументу.Номенклатура, СтрокаОтбораПоДокументу.ХарактеристикаНоменклатуры));
			
			КоличествоПоДокументу = СтрокаОтбораПоДокументу.КоличествоПоДокументу;
			
			Если СтрокаОтбораПоДокументу.ЦРПТМарка = "" Тогда
				КоличествоПоТСД	= СтрокаОтбораПоДокументу.КоличествоПоТСД;
				КоличествоПоТСД = КоличествоПоТСД - КоличествоПоДокументу;
				
				Если КоличествоПоТСД < 0 Тогда
					КоличествоПоТСД = 0;
					СтрокаОтбораПоДокументу.КоличествоПоДокументу = СтрокаОтбораПоДокументу.КоличествоПоТСД;
				КонецЕсли; 
				
				СтрокиТЗИзменений = ТЗДляИзменений.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаОтбораПоДокументу.Номенклатура, СтрокаОтбораПоДокументу.ХарактеристикаНоменклатуры));
				
				Если СтрокиТЗИзменений.Количество() Тогда
					Для каждого СтрокаДляИзменений Из СтрокиТЗИзменений Цикл
						Если СтрокаДляИзменений.Ссылка = СтрокаДокумент И Не ЭтоПоследнийДокумент И КоличествоПоТСД = 0 Тогда
							ТЗДляИзменений.Удалить(СтрокаДляИзменений);	
						Иначе	
							СтрокаДляИзменений.КоличествоПоТСД = КоличествоПоТСД;
						КонецЕсли; 	
					КонецЦикла; 	
				КонецЕсли;			
			Иначе
				
				КоличествоПоТСД	= СтрокиПоиска.Количество();
				
				Если КоличествоПоТСД > КоличествоПоДокументу Тогда
					Пока КоличествоПоТСД > КоличествоПоДокументу Цикл
						КоличествоПоТСД = КоличествоПоТСД - 1;
						ТЗОтбораПоДокументу.Удалить(СтрокиПоиска[КоличествоПоТСД]);	
					КонецЦикла;		
				КонецЕсли;
				
				ДанныеУпаковки = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(СтрокаОтбораПоДокументу.ЦРПТМарка);		
				
				Если ДанныеУпаковки <> Неопределено Тогда
					СтрокаОтбораПоДокументу.КМСсылка = ДанныеУпаковки.Ссылка;		
				КонецЕсли; 
				
				//Удалю по марке строки по другим документам
				СтрокиТЗИзменений = ТЗДляИзменений.НайтиСтроки(Новый Структура("ЦРПТМарка", СтрокаОтбораПоДокументу.ЦРПТМарка));
				
				Если СтрокиТЗИзменений.Количество() Тогда
					Для каждого СтрокаДляУдаления Из СтрокиТЗИзменений Цикл
						ТЗДляИзменений.Удалить(СтрокаДляУдаления);	
					КонецЦикла; 	
				КонецЕсли;
				
				СтрокаОтбораПоДокументу.КоличествоПоДокументу = 1;
				
			КонецЕсли; 
			
		КонецЦикла;
		
		Если ЭтоПоследнийДокумент И ТЗДляИзменений.Количество() Тогда			
			ТЗДляИзменений.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, ЦРПТМарка, КМСсылка", "КоличествоПоТСД, КоличествоПоДокументу");
			
			Для каждого СтрокаДобавления Из ТЗДляИзменений Цикл
				НоваяСтрока = Неопределено;
				
				Если СтрокаДобавления.ЦРПТМарка <> "" Тогда					
					НоваяСтрока = ТЗОтбораПоДокументу.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДобавления);
					
					ДанныеУпаковки = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(НоваяСтрока.ЦРПТМарка);		
					
					Если ДанныеУпаковки <> Неопределено Тогда
						НоваяСтрока.КМСсылка = ДанныеУпаковки.Ссылка;		
					КонецЕсли;
				Иначе
					НайденнаяСтрока = ТЗОтбораПоДокументу.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаДобавления.Номенклатура, СтрокаДобавления.ХарактеристикаНоменклатуры));
					Если НайденнаяСтрока.Количество() = 0 Тогда
						НоваяСтрока = ТЗОтбораПоДокументу.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДобавления);
						НоваяСтрока.КоличествоПоДокументу = СтрокаДобавления.КоличествоПоТСД;
					Иначе
						НайденнаяСтрока[0].КоличествоПоДокументу = НайденнаяСтрока[0].КоличествоПоТСД;	
					КонецЕсли; 
				КонецЕсли; 
				
				Если НоваяСтрока <> Неопределено И Не ЗначениеЗаполнено(НоваяСтрока.Ссылка) Тогда
					НоваяСтрока.Ссылка = СтрокаДокумент;	
				КонецЕсли; 
			КонецЦикла;  
		КонецЕсли;
		
		ТЗОтбораПоДокументу.Колонки.КоличествоПоДокументу.Имя = "Количество";
		
		Если ТЗОтбораПоДокументу.Количество() = 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		СтрокаДокументОбъект = СтрокаДокумент.ПолучитьОбъект();
		
		ОбработатьНастройкуТЧПриЗагрузкеПодбор(СтрокаДокументОбъект, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
		
		СоздатьСтрокиШтрихкодовУпаковокПоМассиву(ТЗОтбораПоДокументу.ВыгрузитьКолонку("КМСсылка"), СтрокаДокументОбъект);
		
		КопияТЧ = СтрокаДокументОбъект[ИмяТЧПодбор].Выгрузить();
		
		Если ТЧПриЗагрузкеПодбор <> 0 Тогда			
			ТЗОтбораПоДокументу.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения", "Количество");
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("ТЗОтбораПоДокументу"	, ТЗОтбораПоДокументу);
			СтруктураДанных.Вставить("Шаблон"				, Шаблон);
			
			ОбработатьИзменениеТЧПодбор(СтруктураДанных, СтрокаДокументОбъект, ИмяТЧПодбор, КопияТЧ, Истина);
		КонецЕсли;
		
		СтрокаДокументОбъект.Записать();
		
		ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСПоМассивуТоваров(ТЗОтбораПоДокументу.ВыгрузитьКолонку("Номенклатура"));
		
		Для каждого ВидМаркируемойПродукции Из ВидМаркируемойПродукцииДокументаМассив Цикл
			
			РезультатПроверки = ПолучитьРезультатПроверкиДокумента(СтрокаДокумент ,Шаблон, ВидМаркируемойПродукции, СтрокаОшибок);
			
			Если РезультатПроверки <> Неопределено Тогда 
				ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
				ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции, РезультатПроверки.ПодобраннаяМаркируемаяПродукция, СтруктураСобранныхМарокИУпаковок);
				СохранитьРезультатПроверкиДокумента(СтрокаДокумент, РезультатПроверки, ВидМаркируемойПродукции, Шаблон);
			Иначе
				Если ЗначениеЗаполнено(СтрокаОшибок) Тогда
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

Функция ОбработатьВидДокументаПриобретениеТоваровУслуг(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок)
	
	Шаблон = ДокументТСД.Шаблон;
	
	СоздаватьЕслиНеНайдена 						= Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
	ПривязыватьGTIN 							= Шаблон.МаркировкаПривязыватьGTINКакШтрихкод;
	ТЧПриЗагрузкеПодбор 						= Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор 								= Шаблон.ИмяТабличнойЧастиПодбор;
	ПроверкаБезСертификата						= Шаблон.МаркировкаПроверкаБезСертификатаИС;
	ЭтоПриемка              					= Истина;
	ИгнорироватьНесоответствиеТовараПоЕАNиКМ 	= Шаблон.МаркировкаИгнорироватьНесоответствиеТовараПоЕАNиКМ;
	ПерезаписатьХешУпаковок 					= Шаблон.МаркировкаПерезаписатьХешУпаковок;
	
	Если ИсходныйДокумент.Метаданные().Имя = "ПриемкаТоваровИСМП" Тогда
		ЭтоПриемка = Ложь;	
	КонецЕсли; 
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ДокументТСД, СоздаватьЕслиНеНайдена, ПривязыватьGTIN, ИгнорироватьНесоответствиеТовараПоЕАNиКМ);
	
	Если ТЧПриЗагрузкеПодбор <> 1 Тогда	
		ОчиститьСсылкиШтрихкодовУпаковок(ИсходныйДокумент);
	КонецЕсли;	
	
	МассивНеизвестныхДляПриемки = Новый Массив();
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву_Упаковки(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент, МассивНеизвестныхДляПриемки, ПроверкаБезСертификата);
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент, МассивНеизвестныхДляПриемки, ПроверкаБезСертификата);
	
	Если ТЧПриЗагрузкеПодбор <> 0 Тогда
		КопияТЧ = ИсходныйДокумент[ИмяТЧПодбор].Выгрузить();
		
		ОбработатьИзменениеТЧПодбор(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор, КопияТЧ);		
	КонецЕсли;
	
	Попытка
		ВыполнитьДопОбработкуДокумента(ИсходныйДокумент, ДокументТСД, Шаблон)
	Исключение 
	КонецПопытки;
	
	Попытка
		ИзменитьРеквизитыШапкиИзДополнительныхФорм(ИсходныйДокумент, Шаблон, ДокументТСД);
	Исключение 
	КонецПопытки;
	
	ИсходныйДокумент.Записать();
	
	ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент, ИмяТЧПодбор);
	
	Для каждого ВидМаркируемойПродукции Из ВидМаркируемойПродукцииДокументаМассив Цикл
		
		РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент, Шаблон, ВидМаркируемойПродукции, СтрокаОшибок);
		
		Если РезультатПроверки <> Неопределено Тогда
			ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
			ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции, РезультатПроверки.ПодобраннаяМаркируемаяПродукция, СтруктураСобранныхМарокИУпаковок,, ЭтоПриемка, МассивНеизвестныхДляПриемки);
			ОбработатьМаркируемыеТоварыПриемка(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
			СохранитьРезультатПроверкиДокумента(ИсходныйДокумент, РезультатПроверки, ВидМаркируемойПродукции, Шаблон);
		Иначе
			Если ЗначениеЗаполнено(СтрокаОшибок) Тогда
				Возврат Неопределено;
			КонецЕсли;		
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПерезаписатьХешУпаковок Тогда
		Попытка ПерезаписатьХешУпаковок(СтруктураСобранныхМарокИУпаковок, Истина); Исключение КонецПопытки;	
	КонецЕсли;
	
	Если ЭтоНовыйДокумент Тогда
		ДокументТСД.ИсходныйДокумент = ИсходныйДокумент.Ссылка;	
	КонецЕсли;
	
	УстановитьДатуЗавершенияДокументаТСД(ДокументТСД);
	
	Возврат ИсходныйДокумент.Ссылка;	
	
КонецФункции // ()

Функция ОбработатьВидДокументаПриемкаТоваровИСМП(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок)
	
	Шаблон = ДокументТСД.Шаблон;
	ТЧПриЗагрузкеПодбор 	= Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор 			= Шаблон.ИмяТабличнойЧастиПодбор;
	СоздаватьЕслиНеНайдена 	= Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;	
	ПривязыватьGTIN 		= Шаблон.МаркировкаПривязыватьGTINКакШтрихкод;
	
	УстановитьGTIN(ДокументТСД);
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ДокументТСД, СоздаватьЕслиНеНайдена, ПривязыватьGTIN);
	
	Если ЭтоНовыйДокумент Тогда
		ЗаполнитьШапкуДокумента(Новый Структура("Об, Док", ДокументТСД, ИсходныйДокумент));
		ПеренестиВДокументНовыеЗначенияРеквизитов(ДокументТСД, ИсходныйДокумент, Шаблон);		
	КонецЕсли;
	
	Если ТЧПриЗагрузкеПодбор <> 0 Тогда
		ОбработатьИзменениеТЧПодбор(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор);
	КонецЕсли;
	Попытка
		ВыполнитьДопОбработкуДокумента(ИсходныйДокумент, ДокументТСД, Шаблон)
	Исключение 
	КонецПопытки;
	
	Попытка
		ИзменитьРеквизитыШапкиИзДополнительныхФорм(ИсходныйДокумент, Шаблон, ДокументТСД);
	Исключение 
	КонецПопытки;
		
	ИсходныйДокумент.Записать();
	
	ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент,ИмяТЧПодбор);
	
	Для каждого ВидМаркируемойПродукции Из ВидМаркируемойПродукцииДокументаМассив Цикл
		
		РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент, Шаблон, ВидМаркируемойПродукции, СтрокаОшибок);
			
		Если РезультатПроверки <> Неопределено Тогда			
			ДеревоМаркированнойПродукцииДоЗагрузкиДанных = РезультатПроверки.ДеревоМаркированнойПродукции;
			
			СоздатьСтрокиШтрихкодовУпаковокПоМассиву_Упаковки(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент);
			СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент);
			
			ИсходныйДокумент.Записать();
			
			РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент, Шаблон, ВидМаркируемойПродукции, СтрокаОшибок);
			
			Если РезультатПроверки <> Неопределено Тогда				
				РезультатПроверки.ДеревоМаркированнойПродукции = ДеревоМаркированнойПродукцииДоЗагрузкиДанных;
				
				ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
				ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции, РезультатПроверки.ПодобраннаяМаркируемаяПродукция, СтруктураСобранныхМарокИУпаковок);
				СохранитьРезультатПроверкиДокумента(ИсходныйДокумент, РезультатПроверки, ВидМаркируемойПродукции, Шаблон);			
			КонецЕсли;	
		Иначе
			Если ЗначениеЗаполнено(СтрокаОшибок) Тогда
				Возврат Неопределено;
			КонецЕсли;		
		КонецЕсли;
		
	КонецЦикла;
	
	Если Шаблон.ВидДокументаНового = "" Тогда
		ДокументТСД.ИсходныйДокумент = ИсходныйДокумент.Ссылка;
		УстановитьДатуЗавершенияДокументаТСД(ДокументТСД);
		Возврат ИсходныйДокумент.Ссылка;
	Иначе
		ДокументТСД.НовыйДокумент = ИсходныйДокумент.Ссылка;
		УстановитьДатуЗавершенияДокументаТСД(ДокументТСД);
		Возврат ИсходныйДокумент.Ссылка;
	КонецЕсли;		
		
КонецФункции // ()

Функция ОбработатьВидДокументаРеализацияТоваровУслуг(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок, 
	ЭтоВыводИСМПНаОсновании = Ложь, ВыбВидПродукции = Неопределено) Экспорт
	
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	
	Шаблон = ДокументТСД.Шаблон;
	РеквизитыШаблона = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, Обработки.ДатаМобайл_АРМДиспетчера.ПолучитьСтруктуруРеквизитовШаблона());
	
	ТЧПриЗагрузкеПодбор = РеквизитыШаблона.ТабличнуюЧастьПриЗагрузкеПодбор;
	ПерезаписатьХешУпаковок = РеквизитыШаблона.МаркировкаПерезаписатьХешУпаковок;
	КопияТЧ = Неопределено;
	ТипЗнчДока = ТипЗнч(ИсходныйДокумент);
	
	УстановитьGTIN(ДокументТСД);
	
	НовыйДокументВВидеТабличнойЧасти = Справочники.ДатаМобайл_ШаблоныДокументов.НовыйДокументКакТабличнаяЧасть(Шаблон);
	
	Если РеквизитыШаблона.ВидДокументаНового = "" Тогда
		Если РеквизитыШаблона.ИспользоватьПодбор Тогда
			ИмяТЧПодбор = РеквизитыШаблона.ИмяТабличнойЧастиПодбор;
		КонецЕсли;
		Если РеквизитыШаблона.ИспользоватьПриемку Тогда
			ИмяТЧПодбор = РеквизитыШаблона.ИмяТабличнойЧастиПриемка;
		КонецЕсли;
	Иначе
		Если РеквизитыШаблона.ИспользоватьПодбор Тогда
			ИмяТЧПодбор = РеквизитыШаблона.ИмяТабличнойЧастиНовойПодбор;
		КонецЕсли;
		Если РеквизитыШаблона.ИспользоватьПриемку Тогда
			ИмяТЧПодбор = РеквизитыШаблона.ИмяТабличнойЧастиНовойПриемка;
		КонецЕсли;
	КонецЕсли;
	
	КопияТЧ = ИсходныйДокумент[ИмяТЧПодбор].Выгрузить();
	
	Если РеквизитыШаблона.СоздаватьДокументИСМП Тогда
		
		Если КопияТЧ.Количество() = 0 И ТипЗнч(ИсходныйДокумент) = Тип("ДокументОбъект.ВыводИзОборотаИСМП") Тогда
			КопияТЧ = ДокументТСД.ИсходныйДокумент[ИмяТЧПодбор].Выгрузить();
		КонецЕсли;	
		
	КонецЕсли;
	
	СоздаватьЕслиНеНайдена 	= РеквизитыШаблона.МаркировкаСоздаватьСправочникКМЕслиНеНайден;	
	ПривязыватьGTIN 		= РеквизитыШаблона.МаркировкаПривязыватьGTINКакШтрихкод;
	ЗаписыватьПолныйКМ      = РеквизитыШаблона.МаркировкаЗаписыватьПолныйКМ;
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ДокументТСД, СоздаватьЕслиНеНайдена, ПривязыватьGTIN);
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву_Упаковки(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент);
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент);
	
	Если ЭтоНовыйДокумент Тогда
		ЗаполнитьШапкуДокумента(Новый Структура("Об, Док", ДокументТСД, ИсходныйДокумент));
		ПеренестиВДокументНовыеЗначенияРеквизитов(ДокументТСД, ИсходныйДокумент, Шаблон);
	Иначе
		Если ТипЗнчДока = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда		
			УстановитьСтатусЕслиИспользуютсяСерииДляРеализации(ИсходныйДокумент, Шаблон);	
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыШаблона.ВидДокумента = "ЗаказКлиента" И ТипЗнч(ИсходныйДокумент) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		ИсходныйДокумент.РеализацияПоЗаказам = Истина;
		СтруктураПоЗаказу = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументТСД.ИсходныйДокумент, "ДатаОтгрузки,Менеджер,Организация,НалогообложениеНДС,СпособДоставки");
		ЗаполнитьЗначенияСвойств(ИсходныйДокумент, СтруктураПоЗаказу); 		
	КонецЕсли;
	
	Если ТЧПриЗагрузкеПодбор <> 0 Тогда
		ОбработатьИзменениеТЧПодбор(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор, КопияТЧ,, ВыбВидПродукции);
	КонецЕсли;
	
	Попытка
		ВыполнитьДопОбработкуДокумента(ИсходныйДокумент, ДокументТСД, Шаблон)
	Исключение 
	КонецПопытки; 
	
	Попытка
		ИзменитьРеквизитыШапкиИзДополнительныхФорм(ИсходныйДокумент, Шаблон, ДокументТСД);
	Исключение 
	КонецПопытки;	
	
	ИсходныйДокумент.Записать();
	
	Если ЗаписыватьПолныйКМ Тогда
		МассивПолныйКМ = СформироватьМассивПараметровПоПолномуКМ(ИсходныйДокумент, ДокументТСД);
		РучнойВводШтрихкодаЗавершение(МассивПолныйКМ, Неопределено);
	КонецЕсли;             
	
	Если Не РеквизитыШаблона.ВидДокумента = "РасходныйОрдерНаТовары" И Не РеквизитыШаблона.ВидДокумента = "ЗаказНаЭмиссиюКодовМаркировкиСУЗ" Тогда
	
		Если Не ВыбВидПродукции = Неопределено Тогда
			
			РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент, Шаблон, ВыбВидПродукции, СтрокаОшибок);
			
			Если РезультатПроверки <> Неопределено Тогда 
				
				ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
				ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции, РезультатПроверки.ПодобраннаяМаркируемаяПродукция, СтруктураСобранныхМарокИУпаковок);
				СохранитьРезультатПроверкиДокумента(ИсходныйДокумент, РезультатПроверки, ВыбВидПродукции, Шаблон);
				
			Иначе
				
				Если ЗначениеЗаполнено(СтрокаОшибок) Тогда
					Возврат Неопределено;
				КонецЕсли;	
				
			КонецЕсли;
				
		Иначе
			
			ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент,ИмяТЧПодбор);
			
			Для каждого ВидМаркируемойПродукции Из ВидМаркируемойПродукцииДокументаМассив Цикл
				
				РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент, Шаблон, ВидМаркируемойПродукции, СтрокаОшибок);
				
				Если РезультатПроверки <> Неопределено Тогда 
					
					ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
					ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции, РезультатПроверки.ПодобраннаяМаркируемаяПродукция, СтруктураСобранныхМарокИУпаковок);
					СохранитьРезультатПроверкиДокумента(ИсходныйДокумент, РезультатПроверки, ВидМаркируемойПродукции, Шаблон);
					
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаОшибок) Тогда
						Возврат Неопределено;
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ПерезаписатьХешУпаковок Тогда
		Попытка ПерезаписатьХешУпаковок(СтруктураСобранныхМарокИУпаковок); Исключение КонецПопытки;	
	КонецЕсли;
	
	Если РеквизитыШаблона.ВидДокументаНового = "" Тогда
		ДокументТСД.ИсходныйДокумент = ИсходныйДокумент.Ссылка;
		УстановитьДатуЗавершенияДокументаТСД(ДокументТСД);
		Возврат ИсходныйДокумент.Ссылка;
	Иначе
		
		Если Не ЭтоВыводИСМПНаОсновании Тогда
			Если НовыйДокументВВидеТабличнойЧасти Тогда
				СтрНовогоДокумента = ДокументТСД.НовыеДокументы.Добавить();
				СтрНовогоДокумента.НовыйДокумент = ИсходныйДокумент.Ссылка;
			Иначе
				ДокументТСД.НовыйДокумент = ИсходныйДокумент.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьДатуЗавершенияДокументаТСД(ДокументТСД);
		Возврат ИсходныйДокумент.Ссылка;
	КонецЕсли;		
		
КонецФункции // ()

Функция ОбработатьВидДокументаЧекККМ(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок)
	
	Шаблон = ДокументТСД.Шаблон;
	ТЧПриЗагрузкеПодбор 	= Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор 			= Шаблон.ИмяТабличнойЧастиПодбор;
	СоздаватьЕслиНеНайдена 	= Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;	
	ПривязыватьGTIN 		= Шаблон.МаркировкаПривязыватьGTINКакШтрихкод;
	ЗаписыватьПолныйКМ      = Шаблон.МаркировкаЗаписыватьПолныйКМ;
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	
	Если ЭтоНовыйДокумент Тогда
		ЗаполнитьШапкуДокумента(Новый Структура("Об, Док", ДокументТСД, ИсходныйДокумент));
		ПеренестиВДокументНовыеЗначенияРеквизитов(ДокументТСД, ИсходныйДокумент, Шаблон);		
	КонецЕсли;
	
	Если ТЧПриЗагрузкеПодбор <> 0 Тогда
		ОбработатьИзменениеТЧПодбор(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор);
	КонецЕсли;
	
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ДокументТСД, СоздаватьЕслиНеНайдена, ПривязыватьGTIN);
	
	СоздатьСтрокиАкцизныхМарокПоМассиву(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент);
	СоздатьСтрокиАкцизныхМарокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент);
	
	Попытка
		ВыполнитьДопОбработкуДокумента(ИсходныйДокумент, ДокументТСД, Шаблон)
	Исключение 
	КонецПопытки;
	
	Попытка
		ИзменитьРеквизитыШапкиИзДополнительныхФорм(ИсходныйДокумент, Шаблон, ДокументТСД);
	Исключение 
	КонецПопытки;
	
	ИсходныйДокумент.Записать();
	
	Если ЗаписыватьПолныйКМ Тогда
		МассивПолныйКМ = СформироватьМассивПараметровПоПолномуКМ(ИсходныйДокумент, ДокументТСД);
		РучнойВводШтрихкодаЗавершение(МассивПолныйКМ, Неопределено);
	КонецЕсли;
	
	Если Шаблон.ВидДокументаНового = "" Тогда
		ДокументТСД.ИсходныйДокумент = ИсходныйДокумент.Ссылка;
		УстановитьДатуЗавершенияДокументаТСД(ДокументТСД);
		Возврат ИсходныйДокумент.Ссылка;
	Иначе
		ДокументТСД.НовыйДокумент = ИсходныйДокумент.Ссылка;
		УстановитьДатуЗавершенияДокументаТСД(ДокументТСД);
		Возврат ИсходныйДокумент.Ссылка;
	КонецЕсли;		
		
КонецФункции // ()

Процедура ОбработатьВидДокументаДатаМобайл_УпаковочныйЛист(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок, ИзМаркировки = Ложь)
	
	Шаблон = ДокументТСД.Шаблон;
	СоздаватьЕслиНеНайдена 	= Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;	
	ЗаписыватьПолныйКМ      = Шаблон.МаркировкаЗаписыватьПолныйКМ;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.СерияСсылка КАК Серия,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.КМСсылка КАК КМСсылка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЦРПТМарка КАК ЦРПТМарка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЦРПТМарка_Длина КАК ЦРПТМарка_Длина,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.KM_RawMrc КАК KM_RawMrc,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.KM_TNVED КАК KM_TNVED,
	|	СУММА(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество) КАК Количество,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Короб КАК Короб
	|ПОМЕСТИТЬ ДанныеПодбор
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.СерияСсылка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.КМСсылка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЦРПТМарка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЦРПТМарка_Длина,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.KM_RawMrc,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.KM_TNVED,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Короб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПодбор.УпаковочныйЛист КАК Упаковка,
	|	ДанныеПодбор.Номенклатура КАК Номенклатура,
	|	ДанныеПодбор.Характеристика КАК Характеристика,
	|	ДанныеПодбор.Серия КАК Серия,
	|	ДанныеПодбор.КМСсылка КАК СсылкаМарка,
	|	ДанныеПодбор.ЦРПТМарка КАК Марка,
	|	ДанныеПодбор.ЦРПТМарка_Длина КАК ЦРПТМарка_Длина,
	|	ДанныеПодбор.KM_RawMrc КАК KM_RawMrc,
	|	ДанныеПодбор.KM_TNVED КАК KM_TNVED,
	|	ДанныеПодбор.Короб КАК Короб	
	|ИЗ
	|	ДанныеПодбор КАК ДанныеПодбор
	|ГДЕ
	|	ДанныеПодбор.Количество > 0
	|ИТОГИ ПО
	|	Упаковка,
	|	Короб";
		
	Запрос.УстановитьПараметр("Ссылка", ДокументТСД.Ссылка);	
	ВыборкаУпаковка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаУпаковка.Следующий() Цикл 
		
		Если ЗначениеЗаполнено(ВыборкаУпаковка.Упаковка) Тогда
			
			УпакСсылка = ПолучитьСправочникСсылкаУпаковка(ВыборкаУпаковка.Упаковка, Истина, Неопределено);
			
			Если ЗначениеЗаполнено(УпакСсылка) Тогда
				
				УпакОбъект = УпакСсылка.ПолучитьОбъект();
				
				ВыборкаКороба = ВыборкаУпаковка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаКороба.Следующий() Цикл			
					
					Если ЗначениеЗаполнено(ВыборкаКороба.Короб) Тогда
						
						КоробСсылка = ПолучитьСправочникСсылкаУпаковка(ВыборкаКороба.Короб, Истина, Неопределено);										
						КоробОбъект = КоробСсылка.ПолучитьОбъект();
											
						ПроверитьМаркаНаходитсяВДругомКоробе(КоробСсылка, УпакОбъект.Ссылка);
						
						РезультатПоиска = УпакОбъект.ВложенныеШтрихкоды.НайтиСтроки(Новый Структура("Штрихкод", КоробСсылка));
						Если РезультатПоиска.Количество() = 0 Тогда
							НовыйВложенныйШтрихкод = УпакОбъект.ВложенныеШтрихкоды.Добавить();
							НовыйВложенныйШтрихкод.Штрихкод = КоробСсылка;
						КонецЕсли;
						
						КоробОбъект.Записать();			
						ОпределитьУпаковкуМоноМульти(КоробОбъект);
						
					Иначе
						
						ВыборкаМарки = ВыборкаКороба.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаМарки.Следующий() Цикл
							
							Если ЗначениеЗаполнено(ВыборкаМарки.СсылкаМарка) Тогда
								СсылкаМарка = ВыборкаМарки.СсылкаМарка;
							Иначе	
								СтруктураТовара = Новый Структура("Номенклатура, Характеристика", ВыборкаМарки.Номенклатура, ВыборкаМарки.Характеристика);
								СсылкаМарка = ПолучитьСправочникСсылкаМарка(ВыборкаМарки.Марка, ВыборкаМарки.ЦРПТМарка_Длина, ВыборкаМарки.KM_RawMrc, ВыборкаМарки.KM_TNVED, СоздаватьЕслиНеНайдена, СтруктураТовара, ДокументТСД.Шаблон);
							КонецЕсли;
							
							Если ЗначениеЗаполнено(СсылкаМарка) Тогда								
								
								ПроверитьМаркаНаходитсяВДругомКоробе(СсылкаМарка, УпакОбъект.Ссылка);
								
								РезультатПоиска = УпакОбъект.ВложенныеШтрихкоды.НайтиСтроки(Новый Структура("Штрихкод", СсылкаМарка));
								Если РезультатПоиска.Количество() = 0 Тогда
									НовыйВложенныйШтрихкод = УпакОбъект.ВложенныеШтрихкоды.Добавить();
									НовыйВложенныйШтрихкод.Штрихкод = СсылкаМарка;
								КонецЕсли;								
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;			
					
				КонецЦикла;
				
				УпакОбъект.Записать();	
				ОпределитьУпаковкуМоноМульти(УпакОбъект);
				
			КонецЕсли;
		Иначе
			//загрузим только КМ в справочник			
			ВыборкаКороба = ВыборкаУпаковка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаКороба.Следующий() Цикл			
				
				ВыборкаМарки = ВыборкаКороба.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаМарки.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаМарки.СсылкаМарка) Тогда
						СсылкаМарка = ВыборкаМарки.СсылкаМарка;
					Иначе	
						СтруктураТовара = Новый Структура("Номенклатура, Характеристика", ВыборкаМарки.Номенклатура, ВыборкаМарки.Характеристика);
						СсылкаМарка = ПолучитьСправочникСсылкаМарка(ВыборкаМарки.Марка, ВыборкаМарки.ЦРПТМарка_Длина, ВыборкаМарки.KM_RawMrc, ВыборкаМарки.KM_TNVED, СоздаватьЕслиНеНайдена, СтруктураТовара, ДокументТСД.Шаблон);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ИзМаркировки Тогда
		УстановитьДатуЗавершенияДокументаТСД(ДокументТСД);
	КонецЕсли;
	
	Если ЗаписыватьПолныйКМ Тогда
		МассивПолныйКМ = СформироватьМассивПараметровПоПолномуКМ(ИсходныйДокумент, ДокументТСД);
		РучнойВводШтрихкодаЗавершение(МассивПолныйКМ, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьУпаковкуМоноМульти(УпаковкаОбъект)
	
	СсылкаУпаковка = УпаковкаОбъект.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.Серия КАК Серия
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|ГДЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = &СсылкаУпаковка";
	
	
	Запрос.УстановитьПараметр("СсылкаУпаковка",СсылкаУпаковка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 1 Тогда		
		УпаковкаОбъект.Номенклатура = Результат[0].Номенклатура;
		УпаковкаОбъект.Характеристика = Результат[0].Характеристика;
		УпаковкаОбъект.Серия = Результат[0].Серия;		
		УпаковкаОбъект.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
				
		УпаковкаОбъект.Записать();
	Иначе		
		УпаковкаОбъект.Номенклатура = Неопределено;
		УпаковкаОбъект.Характеристика = Неопределено;
		УпаковкаОбъект.Серия = Неопределено;
		
		Если Результат.Количество() > 1 Тогда
			УпаковкаОбъект.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		Иначе
			УпаковкаОбъект.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		КонецЕсли;
			
		УпаковкаОбъект.Записать();		
	КонецЕсли;
			
КонецПроцедуры

Функция ОбработатьВидДокументаМаркировкаТоваровИСМП(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок)
	
	Шаблон = ДокументТСД.Шаблон;
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	
	Если Шаблон.ВидДокументаНового = "" Тогда
		ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПодбор;
	Иначе
		ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиНовойПодбор;
	КонецЕсли;
	
	СоздаватьЕслиНеНайдена 		= Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;
	ПривязыватьGTIN 			= Шаблон.МаркировкаПривязыватьGTINКакШтрихкод;
	ЗаписыватьПолныйКМ      	= Шаблон.МаркировкаЗаписыватьПолныйКМ;
	
	Если ЭтоНовыйДокумент Тогда
		
		ИсходныйДокумент.Дата = ТекущаяДата();
		ИсходныйДокумент.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков;
		
		ВыборкаНастройкиОбменаСУЗ =	РегистрыСведений.НастройкиОбменаСУЗ.Выбрать();
		Если ВыборкаНастройкиОбменаСУЗ.Следующий() Тогда
			ИсходныйДокумент.Организация = ВыборкаНастройкиОбменаСУЗ.Организация;
		КонецЕсли;
		
		ПеренестиВДокументНовыеЗначенияРеквизитов(ДокументТСД, ИсходныйДокумент, Шаблон);
		
	КонецЕсли;
	
	//Генерация упаковок в документе ввод в оборот
	Если Шаблон.ИспользованиеУпаковочныхЛистовПодбор > 0 Тогда
		ОбработатьВидДокументаДатаМобайл_УпаковочныйЛист(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок, Истина);
	КонецЕсли;
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ДокументТСД, СоздаватьЕслиНеНайдена, ПривязыватьGTIN);
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву_Упаковки(СтруктураСобранныхМарокИУпаковок.Короба, ИсходныйДокумент,,, ЭтоНовыйДокумент);
	СоздатьСтрокиШтрихкодовУпаковокПоМассиву(СтруктураСобранныхМарокИУпаковок.Марки, ИсходныйДокумент,,, ЭтоНовыйДокумент);
	
	Если ТЧПриЗагрузкеПодбор <> 0 Тогда		
		ОбработатьИзменениеТЧПодбор(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор);		
	КонецЕсли;
	
	Попытка
		ВыполнитьДопОбработкуДокумента(ИсходныйДокумент, ДокументТСД, Шаблон)
	Исключение 
	КонецПопытки;
	
	Попытка
		ИзменитьРеквизитыШапкиИзДополнительныхФорм(ИсходныйДокумент, Шаблон, ДокументТСД);
	Исключение 
	КонецПопытки;
	
	ИсходныйДокумент.Записать();
	
	Если ЭтоНовыйДокумент Тогда
		Если Не ЗначениеЗаполнено(ИсходныйДокумент.ВидПродукции) Тогда
			ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент, ИмяТЧПодбор);
			ИсходныйДокумент.ВидПродукции = ВидМаркируемойПродукцииДокументаМассив[0];
			ИсходныйДокумент.Записать();
		КонецЕсли;	
	КонецЕсли;
	
	ОтчетПроизводственнойЛинии = ИсходныйДокумент.ОтчетПроизводственнойЛинии;
	
	Если ЗаписатьВТЧДанныеОтчетаПроизводственнойЛинии(ИсходныйДокумент.ВидПродукции) И ОтчетПроизводственнойЛинии Тогда		
		Если ИсходныйДокумент.Товары.Количество() > 0 Тогда
			ИсходныйДокумент.Товары.Очистить();	
		КонецЕсли;
		
		ТЗСобранныеДанныеМарки = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
		ТЗСобранныеДанныеМарки.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, ЦРПТМарка, ЦРПТМарка_Длина, УпаковочныйЛист, KM_RawMrc, КМСсылка, KM_TNVED", "Количество");
		
		ТчДанныеОтчетаПроизводственнойЛинии = ИсходныйДокумент.ДанныеОтчетаПроизводственнойЛинии;
		
		Для каждого СтрокаДока Из ТЗСобранныеДанныеМарки Цикл
			Если СтрокаДока.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТЧ = ТчДанныеОтчетаПроизводственнойЛинии.Добавить();
			СтрокаТЧ.ЗначениеШтрихкода        	= СтрокаДока.ЦРПТМарка;
			СтрокаТЧ.ЗначениеШтрихкодаУпаковки  = СтрокаДока.УпаковочныйЛист;			
		КонецЦикла;	
	КонецЕсли;
	
	ИсходныйДокумент.Записать();
	
	Если ЗаписыватьПолныйКМ Тогда
		МассивПолныйКМ = СформироватьМассивПараметровПоПолномуКМ(ИсходныйДокумент, ДокументТСД);
		РучнойВводШтрихкодаЗавершение(МассивПолныйКМ, Неопределено);
	КонецЕсли;
	
	ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент,ИмяТЧПодбор);
	
	Для каждого ВидМаркируемойПродукции Из ВидМаркируемойПродукцииДокументаМассив Цикл
		
		РезультатПроверки = ПолучитьРезультатПроверкиДокумента(ИсходныйДокумент,Шаблон, ВидМаркируемойПродукции,СтрокаОшибок);
		
		Если РезультатПроверки <> Неопределено Тогда
			ОбработатьМаркируемыеТовары(РезультатПроверки.ПодобраннаяМаркируемаяПродукция);
			ВнестиДанныеОСобранныхМарках(РезультатПроверки.ДеревоМаркированнойПродукции, РезультатПроверки.ПодобраннаяМаркируемаяПродукция, СтруктураСобранныхМарокИУпаковок);
			СохранитьРезультатПроверкиДокумента(ИсходныйДокумент, РезультатПроверки, ВидМаркируемойПродукции, Шаблон);
		Иначе
			Если ЗначениеЗаполнено(СтрокаОшибок) Тогда
				Возврат Неопределено;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
	//Для корректного отображения статусов марок в табличной части товаров до окончания работы с формой проверки и подбора их не должно быть в документе, поэтому очистим табличную часть марок.
	//Только когда есть проверка статусов в ИСМП
	Если Шаблон.МаркировкаПроверкаБезСертификатаИС Тогда
	Иначе	
		ОчиститьСтрокиШтрихкодовУпаковокПоМассиву(ИсходныйДокумент);
		ИсходныйДокумент.Записать();
	КонецЕсли;	
	
	Если Шаблон.ВидДокументаНового = "" Тогда
		ДокументТСД.ИсходныйДокумент = ИсходныйДокумент.Ссылка;
		УстановитьДатуЗавершенияДокументаТСД(ДокументТСД);
		Возврат ИсходныйДокумент.Ссылка;
	Иначе
		ДокументТСД.НовыйДокумент = ИсходныйДокумент.Ссылка;
		УстановитьДатуЗавершенияДокументаТСД(ДокументТСД);
		Возврат ИсходныйДокумент.Ссылка;
	КонецЕсли;	
	
КонецФункции 

Процедура ЗаполнитьВСДИСрокГодности(ИсходныйДокумент, лЭлемент, стрИсходныйДокумент, ЭтоНовыйДокумент)
	
	Если ЭтоНовыйДокумент Тогда
		ДанныеВСД = ПолучитьВСДПоТовару(лЭлемент.Номенклатура);
		Если ДанныеВСД <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(стрИсходныйДокумент, ДанныеВСД);	
		КонецЕсли;
	Иначе
		Попытка
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", лЭлемент.Номенклатура);
			
			СтрокаПоиска = ИсходныйДокумент.Товары.НайтиСтроки(ПараметрыОтбора);
			
			Если СтрокаПоиска.Количество() = 1 Тогда						
				ЗаполнитьЗначенияСвойств(стрИсходныйДокумент, СтрокаПоиска[0], "ИдентификаторПроисхожденияВЕТИС, СрокГодности");
			ИначеЕсли СтрокаПоиска.Количество() = 0 Тогда	
				ДанныеВСД = ПолучитьВСДПоТовару(лЭлемент.Номенклатура);
				Если ДанныеВСД <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(стрИсходныйДокумент, ДанныеВСД);	
				КонецЕсли;	
			КонецЕсли;
		Исключение
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьМаркируемыеТовары(ПодобраннаяМаркируемаяПродукция)
	
	Для каждого строка Из ПодобраннаяМаркируемаяПродукция Цикл
		Если ЗначениеЗаполнено(строка.Характеристика) Тогда
			строка.ХарактеристикиИспользуются = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбработатьМаркируемыеТоварыПриемка(ПодобраннаяМаркируемаяПродукция)
	
	ПодобраннаяМаркируемаяПродукцияНовая = ПодобраннаяМаркируемаяПродукция.СкопироватьКолонки();
	
	Для каждого СтрокаПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
		
		Если СтрокаПродукции.Количество = 0 И СтрокаПродукции.КоличествоПодобрано = 0 И СтрокаПродукции.КоличествоИС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПродукцииНовая = ПодобраннаяМаркируемаяПродукцияНовая.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПродукцииНовая, СтрокаПродукции);
		
	КонецЦикла;
	
	ПодобраннаяМаркируемаяПродукция = ПодобраннаяМаркируемаяПродукцияНовая;
	
КонецПроцедуры

Функция ОбработатьВидДокументаВозвратВОборотИСМП(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок)
	
	Шаблон = ДокументТСД.Шаблон;
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	
	Если Шаблон.ВидДокументаНового = "" Тогда
		ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПодбор;
	Иначе
		ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиНовойПодбор;
	КонецЕсли;
	
	СоздаватьЕслиНеНайдена = Шаблон.МаркировкаСоздаватьСправочникКМЕслиНеНайден;	
	ПривязыватьGTIN = Ложь;
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	ОснованиеИсходного = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументТСД.Ссылка, "ИсходныйДокумент");
	
	ЭтоПеремаркировкаТоваровИСМП = Ложь;	
	Если ТипЗнч(ИсходныйДокумент.Ссылка) = Тип("ДокументСсылка.ПеремаркировкаТоваровИСМП") Тогда
		ЭтоПеремаркировкаТоваровИСМП = Истина;		
	КонецЕсли; 
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	
	СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ДокументТСД, СоздаватьЕслиНеНайдена, ПривязыватьGTIN);
	
	Если ЭтоНовыйДокумент Тогда
		ЗаполнитьШапкуДокумента(Новый Структура("Об, Док", ДокументТСД, ИсходныйДокумент));		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИсходныйДокумент.Организация) Тогда		
		ИсходныйДокумент.Организация = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеИсходного, "Организация");		
	КонецЕсли; 
	
	ПеренестиВДокументНовыеЗначенияРеквизитов(ДокументТСД, ИсходныйДокумент, Шаблон);
	
	Для каждого Марка Из СтруктураСобранныхМарокИУпаковок.Марки Цикл
		Если ЗначениеЗаполнено(Марка) Тогда
			
			ПараметрыОтбора = Новый Структура;		
			Если ЭтоПеремаркировкаТоваровИСМП Тогда
				ПараметрыОтбора.Вставить("НовыйКодМаркировки", Марка);
			Иначе
				ПараметрыОтбора.Вставить("КодМаркировки", Марка);
			КонецЕсли;
			
			НайденныеСтроки = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаТабличнойЧасти = НайденныеСтроки[0];
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Марка);
			Иначе
				СтрокаТабличнойЧасти = ИсходныйДокумент[ИмяТЧПодбор].Добавить();
				Если ЭтоПеремаркировкаТоваровИСМП Тогда
					СтрокаТабличнойЧасти.НовыйКодМаркировки 	= Марка;
					СтрокаТабличнойЧасти.НоваяНоменклатура 		= Марка.Номенклатура;
					СтрокаТабличнойЧасти.КодТНВЭД				= Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.НоваяНоменклатура, "КодТНВЭД");
					СтрокаТабличнойЧасти.НоваяХарактеристика 	= Марка.Характеристика;
					СтрокаТабличнойЧасти.ПричинаПеремаркировки 	= Перечисления.ПричиныПеремаркировкиТоваровИСМП.ИспорченоУтрачено;
				Иначе
					СтрокаТабличнойЧасти.КодМаркировки 	= Марка;
					СтрокаТабличнойЧасти.Номенклатура 	= Марка.Номенклатура;
					СтрокаТабличнойЧасти.Характеристика = Марка.Характеристика;
					СтрокаТабличнойЧасти.Серия 			= Марка.Серия;
				КонецЕсли; 	
			КонецЕсли; 
			
			СтрокаТабличнойЧасти.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументовИСМП.Прочее;			
			
			Если Шаблон.ВидДокументаНового = "" Тогда
			Иначе
				Если ЗначениеЗаполнено(ДокументТСД.ИсходныйДокумент) Тогда
					СтрокаТабличнойЧасти.НаименованиеПервичногоДокумента = ДокументТСД.ИсходныйДокумент.Метаданные().Синоним;
					СтрокаТабличнойЧасти.НомерПервичногоДокумента = ДокументТСД.ИсходныйДокумент.Номер;
					СтрокаТабличнойЧасти.ДатаПервичногоДокумента = ДокументТСД.ИсходныйДокумент.Дата;
				КонецЕсли;	
			КонецЕсли;
			
			Обработки.ДатаМобайл_АРМДиспетчера.ОбработатьНовуюСтрокуТЧ(Новый Структура("Об", ДокументТСД), ИсходныйДокумент, ИмяТЧПодбор, СтрокаТабличнойЧасти);
			
		КонецЕсли;
	КонецЦикла;	
	
	Попытка
		ВыполнитьДопОбработкуДокумента(ИсходныйДокумент, ДокументТСД, Шаблон)
	Исключение 
	КонецПопытки;
	Попытка
		ИзменитьРеквизитыШапкиИзДополнительныхФорм(ИсходныйДокумент, Шаблон, ДокументТСД);
	Исключение 
	КонецПопытки;
	ИсходныйДокумент.Записать();
	
	ВидМаркируемойПродукцииДокументаМассив = ПолучитьВидПродукцииИСДокумента(ИсходныйДокумент, ИмяТЧПодбор);
	ИсходныйДокумент.ВидПродукции = ВидМаркируемойПродукцииДокументаМассив[0]; 
	
	ИсходныйДокумент.Записать();
	
	Если Шаблон.ВидДокументаНового = "" Тогда
		ДокументТСД.ИсходныйДокумент = ИсходныйДокумент.Ссылка;
		УстановитьДатуЗавершенияДокументаТСД(ДокументТСД);
		Возврат ИсходныйДокумент.Ссылка;
	Иначе
		ДокументТСД.НовыйДокумент = ИсходныйДокумент.Ссылка;
		УстановитьДатуЗавершенияДокументаТСД(ДокументТСД);
		Возврат ИсходныйДокумент.Ссылка;
	КонецЕсли;		
		
КонецФункции // ()

Процедура ВыполнитьДопОбработкуДокумента(ИсходныйДокумент, ДокументТСД, Шаблон)
	
	ИмяДока = ИсходныйДокумент.Метаданные().Имя;
	ВидДокументаНового = Шаблон.ВидДокументаНового;
	
	// КОММЕНТАРИЙ
	Попытка
		КомментДока = ДокументТСД.Комментарий;
		КомментДока = СокрЛП(СтрЗаменить(КомментДока, СокрЛП(ИсходныйДокумент.Комментарий), ""));
		
		КомментарийБезСимволаПереносаСтроки = СтрЗаменить(СокрЛП(ИсходныйДокумент.Комментарий), Символы.ПС, "-");
		ДлинаКомментария = СтрДлина(СокрЛП(КомментарийБезСимволаПереносаСтроки));
		
		КомментарииРавны = Ложь;
		
		Если КомментарийБезСимволаПереносаСтроки = КомментДока Тогда
			КомментарииРавны = Истина;	
		КонецЕсли; 
		
		СпередиВвели = Лев(КомментДока, ДлинаКомментария);
		СзадиВвели	 = Прав(КомментДока, ДлинаКомментария);
		
		КомментарийШаблона = ?(Шаблон.АвтоматическийКомментарийИспользовать, СокрЛП(Шаблон.АвтоматическийКомментарий) + " (" + ТекущаяДата() + ")" + Символы.ПС, "");
		
		Если Шаблон.ЗагружатьКомментарий = 1 Тогда // До комментария документа 
			Если КомментарийБезСимволаПереносаСтроки = СпередиВвели Тогда
				КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СпередиВвели, ""));
				ИсходныйДокумент.Комментарий = КомментарийШаблона + КомментарийОператора + Символы.ПС + ИсходныйДокумент.Комментарий;
			ИначеЕсли КомментарийБезСимволаПереносаСтроки = СзадиВвели Тогда
				КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СзадиВвели, ""));
				ИсходныйДокумент.Комментарий = КомментарийШаблона + КомментарийОператора + Символы.ПС + ИсходныйДокумент.Комментарий;	
			Иначе	
				ИсходныйДокумент.Комментарий = КомментарийШаблона + ?(КомментарииРавны, "", КомментДока) + Символы.ПС + ИсходныйДокумент.Комментарий;
			КонецЕсли;			
		ИначеЕсли Шаблон.ЗагружатьКомментарий = 2 Тогда // После комментария документа
			Если КомментарийБезСимволаПереносаСтроки = СпередиВвели Тогда
				КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СпередиВвели, ""));
				ИсходныйДокумент.Комментарий = ИсходныйДокумент.Комментарий + КомментарийШаблона + КомментарийОператора;
			ИначеЕсли КомментарийБезСимволаПереносаСтроки = СзадиВвели Тогда
				КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СзадиВвели, ""));
				ИсходныйДокумент.Комментарий = ИсходныйДокумент.Комментарий + КомментарийШаблона + КомментарийОператора;	
			Иначе	
				ИсходныйДокумент.Комментарий =  ?(КомментарииРавны, "", ИсходныйДокумент.Комментарий) + Символы.ПС + КомментДока  + Символы.ПС + КомментарийШаблона;
			КонецЕсли;						
		КонецЕсли;				
	Исключение
	КонецПопытки;
	
	Если ВидДокументаНового = "" Тогда
		Если Шаблон.НовыеЗначенияРеквизитов.Количество() > 0 Тогда
			Для каждого НовЗнач Из Шаблон.НовыеЗначенияРеквизитов Цикл
				ИсходныйДокумент[НовЗнач.ИмяРеквизита] = НовЗнач.ЗначениеРеквизита;
				
				Если НовЗнач.ИмяРеквизита = "Соглашение" И ИмяДока = "РеализацияТоваровУслуг" Тогда
					ИсходныйДокумент.ЗаполнитьУсловияПродажПоСоглашению();		
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	Иначе
		Если Шаблон.НовыеЗначенияРеквизитовНового.Количество() > 0 Тогда
			Для каждого НовЗнач Из Шаблон.НовыеЗначенияРеквизитовНового Цикл
				ИсходныйДокумент[НовЗнач.ИмяРеквизита] = НовЗнач.ЗначениеРеквизита;
				
				Если НовЗнач.ИмяРеквизита = "Соглашение" И ИмяДока = "РеализацияТоваровУслуг" Тогда
					ИсходныйДокумент.ЗаполнитьУсловияПродажПоСоглашению();		
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		Если Шаблон.НовыеЗначенияРеквизитов.Количество() > 0 Тогда 
			
			Если ЗначениеЗаполнено(ДокументТСД.ИсходныйДокумент) Тогда
				ИсходныйДокументДокТСД = ДокументТСД.ИсходныйДокумент.ПолучитьОбъект();
				
				Для каждого НовЗнач Из Шаблон.НовыеЗначенияРеквизитов Цикл
					ИсходныйДокументДокТСД[НовЗнач.ИмяРеквизита] = НовЗнач.ЗначениеРеквизита;  
				КонецЦикла;	
				
				Попытка	
					ИсходныйДокументДокТСД.Записать(РежимЗаписиДокумента.Проведение);	
				Исключение 				
					ИсходныйДокументДокТСД.Записать();				
				КонецПопытки;
				
			КонецЕсли; 
		КонецЕсли;    		
		
	КонецЕсли;
	
	// ДЛЯ КОНКРЕТНОГО ВИДА ДОКУМЕНТА
	Если ИмяДока = "ОтборРазмещениеТоваров" Тогда
		// статус
		Если Шаблон.ПроверкаОтборРазмещение Тогда
			Попытка
				СтатусПослеЗагрузки = Обработки.ДатаМобайл_АРМДиспетчера.ПолучитьСтатусОтбораРазмещенияТоваровПослеЗагрузки(ДокументТСД, ИсходныйДокумент);
			Исключение
				СтатусПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
			КонецПопытки;
			
			Если СтатусПослеЗагрузки <> Неопределено Тогда
				ИсходныйДокумент.Статус = СтатусПослеЗагрузки;
			КонецЕсли;
		КонецЕсли; 
		
		// исполнитель
		Если Не ЗначениеЗаполнено(ИсходныйДокумент.Исполнитель) Тогда
			Если ДокументТСД.СобранныеДанныеПодбор.Количество() > 0 Тогда
				СтрТЧ = ДокументТСД.СобранныеДанныеПодбор[0];
				ИсходныйДокумент.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию(СтрТЧ.Пользователь, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	// ЗАПИСЬ-ПРОВЕДЕНИЕ
	Если Шаблон.ПроводитьРоботом Тогда
		Попытка	
			ИсходныйДокумент.Записать(РежимЗаписиДокумента.Проведение);	
		Исключение 				
			ИсходныйДокумент.Записать();				
		КонецПопытки;				
	Иначе
		ИсходныйДокумент.Записать();
	КонецЕсли;
		
КонецПроцедуры	

Функция ЗаполнитьУпаковочныеЛисты_Маркировка(Об, МассивДокументов = Неопределено, Док = "") Экспорт
	
	Шаблон = Об.Шаблон;
	ДобавитьНовыеДокументыВМассив = Ложь;
	ТЧНеИзменять = Ложь;
	
	//Запишем и проведем все упак листы по документу
	ТЗОбщая = Об.СобранныеДанныеПодбор.Выгрузить();
	ТЗОбщая.Свернуть("УпаковочныйЛист,Пользователь");
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");	
	ПараметрыШаблона = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "ВидДокумента, ИспользоватьТиповыеУпаковочныеЛисты, ТабличнаяЧастьПриЗагрузкеУЛ, ИспользованиеУпаковочныхЛистовПодбор, РаспределениеТоваров, ИспользоватьМаркировку");
	ВидДокумента 						= ПараметрыШаблона.ВидДокумента;
	ИспользоватьТиповыеУпаковочныеЛисты = ПараметрыШаблона.ИспользоватьТиповыеУпаковочныеЛисты;
	ТабличнуюЧастьПриЗагрузкеПодбор     = ПараметрыШаблона.ТабличнаяЧастьПриЗагрузкеУЛ;
	СоздаватьДокументыУпаковочныхЛистов = ПараметрыШаблона.ИспользованиеУпаковочныхЛистовПодбор <> 0;
	МножествоДокументовКакЗадание		= ПараметрыШаблона.РаспределениеТоваров = 1;
	ИспользоватьМаркировку 				= ПараметрыШаблона.ИспользоватьМаркировку;
	
	Если МножествоДокументовКакЗадание <> Истина Тогда 		
		Если ИспользоватьТиповыеУпаковочныеЛисты И МассивДокументов <> Неопределено Тогда
			ДобавитьНовыеДокументыВМассив = Истина;
			МассивДокументов.Очистить();		
		КонецЕсли;
	КонецЕсли;
	
	Если ТабличнуюЧастьПриЗагрузкеПодбор = 1 Тогда
		ТЧНеИзменять = Истина;	
	КонецЕсли; 
	
	ДанныеПодбораВРазныеДокументы = Истина;
	
	Для каждого СтрокаОбщей Из ТЗОбщая Цикл
		
		Если СтрокаОбщей.УпаковочныйЛист <> "" Или ВидДокумента = "ДатаМобайл_УпаковочныйЛист" Тогда						
			//ШАПКА УПАКОВОЧНОГО ЛИСТА
			
			НомерУпакЛиста = СтрЗаменить(СтрокаОбщей.УпаковочныйЛист, "/////", "");
			Если Лев(СтрокаОбщей.УпаковочныйЛист, 3) = "UPL" Тогда 
				НомерУпакЛиста = Прав(НомерУпакЛиста, СтрДлина(НомерУпакЛиста) - 3);
			КонецЕсли;	
			
			ДокументУпакЛиста = Документы.ДатаМобайл_УпаковочныйЛист.НайтиПоНомеру(НомерУпакЛиста);	
			
			Если ДокументУпакЛиста.Пустая() Тогда
				
				Если ДанныеПодбораВРазныеДокументы Тогда
					ДокументУпаковочногоЛиста = Документы.ДатаМобайл_УпаковочныйЛист.СоздатьДокумент();
					ДокументУпаковочногоЛиста.Дата = ТекущаяДата();
					
					Если ЗначениеЗаполнено(Об.ИсходныйДокумент) Тогда
						ДокументУпаковочногоЛиста.Основание = Об.ИсходныйДокумент;
					Иначе
						ДокументУпаковочногоЛиста.Основание = Об.Ссылка;
					КонецЕсли;
					
					ДокументУпаковочногоЛиста.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(СтрокаОбщей.Пользователь, Ложь);
					ДокументУпаковочногоЛиста.ТСД = Об.ТСД;
					ДокументУпаковочногоЛиста.Код = НомерУпакЛиста; 
					ДокументУпаковочногоЛиста.Номер = НомерУпакЛиста;
					ДокументУпаковочногоЛиста.Записать();
					
					ДокументУпакЛиста = ДокументУпаковочногоЛиста.Ссылка;
					
					Если ВидДокумента = "ДатаМобайл_УпаковочныйЛист" И Не СоздаватьДокументыУпаковочныхЛистов Тогда
						ДанныеПодбораВРазныеДокументы = Ложь;						
					КонецЕсли; 					
				Иначе
					ДокументУпакЛиста = Док;
				КонецЕсли; 
				
				Если ИспользоватьТиповыеУпаковочныеЛисты Тогда
					ДокументУпаковочногоЛистаТиповой = Документы.УпаковочныйЛист.СоздатьДокумент();	
					ДокументУпаковочногоЛистаТиповой.Дата = ТекущаяДата();
					ДокументУпаковочногоЛистаТиповой.Вид = Перечисления.ВидыУпаковочныхЛистов.Исходящий;
					ДокументУпаковочногоЛистаТиповой.Код = НомерУпакЛиста;
					Попытка ДокументУпаковочногоЛиста.Упаковал = ДокументУпаковочногоЛиста.Ответственный; Исключение КонецПопытки;
					Попытка ДокументУпаковочногоЛистаТиповой.СкладУпаковки = Об.Склад; Исключение КонецПопытки;
					
					Если ЗначениеЗаполнено(Об.ИсходныйДокумент) Тогда	
						Если Об.Шаблон.ВидДокумента = "РасходныйОрдерНаТовары" И ЗначениеЗаполнено(Об.ИсходныйДокумент) Тогда 
							Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
							Модуль_ПрефиксацияОбъектовКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
							РеквизитыОрдера = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Об.ИсходныйДокумент, "Получатель, Номер");
							Основание = НСтр("ru = '%Получатель% / Ордер %Номер%'");
							Основание = СтрЗаменить(Основание, "%Получатель%", РеквизитыОрдера.Получатель);
							Основание = СтрЗаменить(Основание, "%Номер%", Модуль_ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОрдера.Номер));	
							ДокументУпаковочногоЛистаТиповой.Основание =  Основание;
						Иначе
							ДокументУпаковочногоЛистаТиповой.Основание =  Об.ИсходныйДокумент;
						КонецЕсли;
					КонецЕсли;	
					
					ДокументУпаковочногоЛистаТиповой.Записать();	
					
					Попытка
						ДокументУпаковочногоЛиста.ТиповойУпаковочныйЛист = ДокументУпаковочногоЛистаТиповой.Ссылка;
						ДокументУпаковочногоЛиста.Записать();
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;					
				КонецЕсли;	
				
			КонецЕсли;
						
			ДокументУпакЛистаОбъект = ДокументУпакЛиста.ПолучитьОбъект();
			Док = ДокументУпакЛистаОбъект.Ссылка;
			КопияТЧ = ДокументУпакЛистаОбъект.Товары;	
			Если ТабличнуюЧастьПриЗагрузкеПодбор = 2 Тогда
				ДокументУпакЛистаОбъект.Товары.Очистить();
			ИначеЕсли ТабличнуюЧастьПриЗагрузкеПодбор = 3 Тогда
				Для каждого СтрокаТЧКопии Из КопияТЧ Цикл
					СтрокаТЧКопии.Количество 			= 0;
					СтрокаТЧКопии.КоличествоУпаковок    = 0;
				КонецЦикла; 
			КонецЕсли; 
						
			//СТРОКИ УПАКОВОЧНОГО ЛИСТА
			
			ТЗ = Об.СобранныеДанныеПодбор.Выгрузить();                  
			Если ИспользоватьМаркировку Тогда
				ТЗ.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,УпаковочныйЛист,ШтрихКод,Пользователь, УпаковочныйЛистАтрибуты, ЦРПТМарка","Количество");
			Иначе
				ТЗ.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,УпаковочныйЛист,ШтрихКод,Пользователь, УпаковочныйЛистАтрибуты","Количество");	
				СтруктураПоискаУпЛист = Новый Структура("ЦРПТМарка", "");	
			КонецЕсли;	
			СтруктураПоискаУпЛист = Новый Структура("УпаковочныйЛист", СтрокаОбщей.УпаковочныйЛист);			
			ДанныеУпакЛиста = ТЗ.НайтиСтроки(СтруктураПоискаУпЛист);
			
			Если ДанныеУпакЛиста.Количество() <> 0 Тогда
				Если МножествоДокументовКакЗадание Тогда
					ДокументУпакЛистаОбъект.Основание = Об.Ссылка;
				Иначе
					ДокументУпакЛистаОбъект.Основание = Об.ИсходныйДокумент;
				КонецЕсли;  
				
				ВесУпаковки = 0;
				ДлинаУпаковки = 0;
				ВысотаУпаковки = 0; 
				ШиринаУпаковки = 0;
				
				Для каждого СтрокаТЧ Из ДанныеУпакЛиста Цикл
					
					Если СтрокаТЧ.Количество = 0 Или ТЧНеИзменять Тогда
						Продолжить;
					КонецЕсли;  
					
					//фильтр по не маркир. товарам:
					
					Если Не ПолучитьТипМаркированнойПродукции(СтрокаТЧ.Номенклатура) = 0 Тогда
	                 	Продолжить;
                    КонецЕсли;
					
					лСтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Серия,Упаковка,Штрихкод", СтрокаТЧ.Номенклатура, СтрокаТЧ.ХарактеристикаНоменклатуры, СтрокаТЧ.СерияСсылка, СтрокаТЧ.ЕдиницаИзмерения, СтрокаТЧ.ШтрихКод);
					СтрокиПоиска = КопияТЧ.НайтиСтроки(лСтруктураПоиска);
					Если СтрокиПоиска.Количество() = 0 Тогда					
						СтрокаТабличнойЧасти = ДокументУпакЛистаОбъект.Товары.Добавить();
						СтрокаТабличнойЧасти.Штрихкод = СтрокаТЧ.ШтрихКод;
						СтрокаТабличнойЧасти.Номенклатура = СтрокаТЧ.Номенклатура;
						СтрокаТабличнойЧасти.Характеристика = СтрокаТЧ.ХарактеристикаНоменклатуры;
						
						СтрокаТабличнойЧасти.Упаковка = СтрокаТЧ.ЕдиницаИзмерения;
						СтрокаТабличнойЧасти.Серия = СтрокаТЧ.СерияСсылка;
						СтрокаТабличнойЧасти.Коэффициент = Обработки.ДатаМобайл_АРМДиспетчера.ВернутьКоэффициент(СтрокаТЧ.Номенклатура, СтрокаТЧ.ЕдиницаИзмерения);
					Иначе	
						СтрокаТабличнойЧасти = СтрокиПоиска[0];
					КонецЕсли;	
					
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрокаТЧ.Количество;
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * СтрокаТабличнойЧасти.Коэффициент;
					
					//данные веса и объема:      
					СтруктураДанных = Обработки.ДатаМобайл_АРМДиспетчера.ПолучитьДанныеВесОбъемЕдИзм(СтрокаТабличнойЧасти.Номенклатура);
					СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.Количество * СтруктураДанных.Вес;
					СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.Количество * СтруктураДанных.Объем;   					
					
					Если ЗначениеЗаполнено(СтрокаТЧ.УпаковочныйЛистАтрибуты) Тогда
						СтруктураДанныхГабаритов = Обработки.ДатаМобайл_АРМДиспетчера.ПолучитьДанныеГабаритов(СтрокаТЧ.УпаковочныйЛистАтрибуты);
					КонецЕсли;  
					
					Если ШиринаУпаковки = 0 Тогда 
						ШиринаУпаковки = СтруктураДанныхГабаритов.Ширина;
					КонецЕсли;
					
					Если ВысотаУпаковки = 0 Тогда
						ВысотаУпаковки = СтруктураДанныхГабаритов.Высота;
					КонецЕсли; 
					
					Если ДлинаУпаковки = 0 Тогда 				
						ДлинаУпаковки = СтруктураДанныхГабаритов.Длина;
					КонецЕсли; 
					
					Если ВесУпаковки = 0 Тогда 				
						ВесУпаковки = СтруктураДанныхГабаритов.ВесУпаковки;
					КонецЕсли; 					
				КонецЦикла;       
				
				ДокументУпакЛистаОбъект.ВесУпаковки = ВесУпаковки;
				ДокументУпакЛистаОбъект.ШиринаУпаковки = ШиринаУпаковки;
				ДокументУпакЛистаОбъект.ВысотаУпаковки = ВысотаУпаковки; 
				ДокументУпакЛистаОбъект.ГлубинаУпаковки = ДлинаУпаковки;
				
				ДокументУпакЛистаОбъект.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(СтрокаТЧ.Пользователь, Ложь);
				ДокументУпакЛистаОбъект.Записать();
				Попытка ДокументУпакЛистаОбъект.Записать(РежимЗаписиДокумента.Проведение); Исключение Сообщить(ОписаниеОшибки()) КонецПопытки;
								
				//ТИПОВЫЕ УПАК ЛИСТЫ
								
				Если ИспользоватьТиповыеУпаковочныеЛисты Тогда
					ДокументУпаковочногоЛистаТиповой = ДокументУпакЛистаОбъект.ТиповойУпаковочныйЛист.ПолучитьОбъект();
					
					//Всегда перезаполняем типовой упак лист актуальными данными из упак лиcта DataMobile
					ДокументУпаковочногоЛистаТиповой.Товары.Очистить();
					Для каждого СтрТЧ Из ДокументУпакЛистаОбъект.Товары Цикл
						СтрокаТабличнойЧастиТиповойЛист = ДокументУпаковочногоЛистаТиповой.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиТиповойЛист, СтрТЧ); 
					КонецЦикла;
					ДокументУпаковочногоЛистаТиповой.Упаковал = ДокументУпакЛистаОбъект.Ответственный;
										
					//при внесении в базу 1С результатов подбора и создании типовых упаковочных листов 1С 
					//необходимо заполнять вкладку «Комментарий» документа «Упаковочный лист» номерами всех участвующих в задании исходных документов, 
					//а также, если в качестве исходного документа используется «Расходный ордер на товары», данными поля «Получатель».
					Если МножествоДокументовКакЗадание Тогда	
						Для каждого ТекущийИсходныйДокумент Из МассивДокументов Цикл
							ТекущийКомментарий = "";
							Попытка
								Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения"); 
								Если ТипЗнч(ТекущийИсходныйДокумент) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда	
									Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
									Модуль_ПрефиксацияОбъектовКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
									РеквизитыОрдера = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийИсходныйДокумент, "Получатель, Номер");
									ТекущийКомментарий = НСтр("ru = '%Получатель% / Ордер %Номер%'");
									ТекущийКомментарий = СтрЗаменить(ТекущийКомментарий, "%Получатель%", РеквизитыОрдера.Получатель);
									ТекущийКомментарий = СтрЗаменить(ТекущийКомментарий, "%Номер%", Модуль_ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОрдера.Номер));	
								Иначе
									ТекущийКомментарий = "" + ТекущийИсходныйДокумент;
								КонецЕсли;			
							Исключение
							КонецПопытки;
							ДокументУпаковочногоЛистаТиповой.Комментарий = ДокументУпаковочногоЛистаТиповой.Комментарий + Символы.ПС + ТекущийКомментарий;
						КонецЦикла;
					КонецЕсли;	
					
					ДокументУпаковочногоЛистаТиповой.Записать();
					Обработки.ДатаМобайл_АРМДиспетчера.УстановитьСерииВдокументе(ДокументУпаковочногоЛистаТиповой);
					ДокументУпаковочногоЛистаТиповой.Записать();
					Попытка ДокументУпаковочногоЛистаТиповой.Записать(РежимЗаписиДокумента.Проведение); Исключение Сообщить(ОписаниеОшибки()); КонецПопытки;
					
					Если ДобавитьНовыеДокументыВМассив Тогда
						МассивДокументов.Добавить(ДокументУпаковочногоЛистаТиповой.Ссылка);		
					КонецЕсли;					
				КонецЕсли;			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Если ТЗОбщая.Количество() > 1 И ВидДокумента = "ДатаМобайл_УпаковочныйЛист" И ДанныеПодбораВРазныеДокументы Тогда
		Док = "";		
	КонецЕсли; 
	
КонецФункции

#КонецОбласти

Процедура ИзменитьРеквизитыШапкиИзДополнительныхФорм(Док, Шаблон, СсылкаНаДокТСД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ЗаполняемыйРеквизит КАК ЗаполняемыйРеквизит,
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.ДополнительнаяФорма КАК ДополнительнаяФорма
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СвязиДополнительныхФормИШаблонов КАК ДатаМобайл_СвязиДополнительныхФормИШаблонов
	|ГДЕ
	|	ДатаМобайл_СвязиДополнительныхФормИШаблонов.Шаблон = &Шаблон
	|	И НЕ ЕСТЬNULL(ДатаМобайл_СвязиДополнительныхФормИШаблонов.ЗаполняемыйРеквизит, """") = """"
	|	И ДатаМобайл_СвязиДополнительныхФормИШаблонов.РеквизитИзШапки = 1";
	
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	
	МетаданныеСправочники = Метаданные.Справочники;
	МетаданныеПеречисления = Метаданные.Перечисления;
	
	ЗаполняемыеРеквизиты = Запрос.Выполнить().Выгрузить();
	Для каждого реквизитПоиска Из ЗаполняемыеРеквизиты Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДатаМобайл_ЗначенияДополнительныхФорм.Значение КАК Значение,
		|	МАКСИМУМ(ДатаМобайл_ЗначенияДополнительныхФорм.ИдентификаторСтроки) КАК ИдентификаторСтроки,
		|	ДатаМобайл_ЗначенияДополнительныхФорм.ДополнительнаяФорма.ТипДанных КАК ТипДанных
		|ИЗ
		|	РегистрСведений.ДатаМобайл_ЗначенияДополнительныхФорм КАК ДатаМобайл_ЗначенияДополнительныхФорм
		|ГДЕ
		|	ДатаМобайл_ЗначенияДополнительныхФорм.ДополнительнаяФорма = &ДополнительнаяФорма
		|	И ДатаМобайл_ЗначенияДополнительныхФорм.Документ = &СсылкаНаДокТСД
		|	И ДатаМобайл_ЗначенияДополнительныхФорм.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)		
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатаМобайл_ЗначенияДополнительныхФорм.Значение,
		|	ДатаМобайл_ЗначенияДополнительныхФорм.ДополнительнаяФорма.ТипДанных
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки УБЫВ";
		
		Запрос.УстановитьПараметр("СсылкаНаДокТСД", СсылкаНаДокТСД.Ссылка);
		Запрос.УстановитьПараметр("ДополнительнаяФорма", реквизитПоиска.ДополнительнаяФорма); 
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗначениеПодстановки = Выборка.Значение;
			Если Не (Выборка.ТипДанных = "Текст" Или Выборка.ТипДанных = "Число" Или Выборка.ТипДанных = "Дата") Тогда
				Попытка
					Если Не МетаданныеСправочники.Найти(Выборка.ТипДанных) = Неопределено Тогда
						ЗначениеПодстановки = Справочники[Выборка.ТипДанных].ПолучитьСсылку(Новый УникальныйИдентификатор(Выборка.Значение));
					ИначеЕсли Не МетаданныеПеречисления.Найти(Выборка.ТипДанных) = Неопределено Тогда
						ИндексПеречисления = Число(Сред(Выборка.Значение, СтрНайти(Выборка.Значение, ".") + 1));
						ЗначениеПодстановки = Перечисления[Выборка.ТипДанных][ИндексПеречисления]
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			Если Выборка.ТипДанных = "Дата" Тогда
				ФорматированнаяДата = ДатаМобайл_ОбщийМодуль.ПолучитьДатуИзСтрокиПоФормату(Выборка.Значение, Шаблон);
				Если Не ФорматированнаяДата = Неопределено Тогда
					ЗначениеПодстановки = ФорматированнаяДата;
				Иначе
					Если Не ТипЗнч(реквизитПоиска.ЗаполняемыйРеквизит) = Тип("Строка") Тогда
						Продолжить;
					КонецЕсли;						  
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				Док[реквизитПоиска.ЗаполняемыйРеквизит] = ЗначениеПодстановки;
			Исключение
			КонецПопытки;			
		КонецЕсли;		
	КонецЦикла;
	
	Док.Записать();
	
КонецПроцедуры

#Область ФункцииДляОбработкиДокументов

Процедура ЗаполнитьШапкуДокумента(ПараметрыДокумента)

	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	Модуль_ИнтеграцияИСУТКлиентСервер = ОбщийМодуль("ИнтеграцияИСУТКлиентСервер");
	
	РеквизитыДокументаТСД = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыДокумента.Об.Ссылка, "Шаблон,Клиент,ТСД,Склад,ИсходныйДокумент");
	РеквизитыШаблона = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокументаТСД.Шаблон, "ВидДокументаНового,ВидДокумента,ИмяТабличнойЧастиПодбор"); 
	
	Шаблон 		= РеквизитыДокументаТСД.Шаблон;	
	Док 		= ПараметрыДокумента.Док;
	Док.Дата 	= ТекущаяДата();
	Клиент 		= РеквизитыДокументаТСД.Клиент;
	ТСД 		= РеквизитыДокументаТСД.ТСД; 
	Склад 		= РеквизитыДокументаТСД.Склад;
	
	ВидДокументаНового 	= РеквизитыШаблона.ВидДокументаНового;
	ВидДокумента		= РеквизитыШаблона.ВидДокумента;
	
	ТипЗнчДока = ТипЗнч(Док.Ссылка);
	
	Модуль_ПартнерыИКонтрагенты = ОбщийМодуль("ПартнерыИКонтрагенты");
	Модуль_ЗакупкиСервер = ОбщийМодуль("ЗакупкиСервер");
	
	Если ВидДокументаНового = "РеализацияТоваровУслуг" И ВидДокумента = "ЗаказКлиента" Тогда
		Док.АдресДоставки = РеквизитыДокументаТСД.ИсходныйДокумент.АдресДоставки;
	КонецЕсли;
	
	Если ВидДокументаНового = "ВыводИзОборотаИСМП" И ВидДокумента  = "РеализацияТоваровУслуг" Тогда
		Док.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументовИСМП.ТоварнаяНакладная;
		Док.НомерПервичногоДокумента = РеквизитыДокументаТСД.ИсходныйДокумент.Номер;
		Док.ДатаПервичногоДокумента = РеквизитыДокументаТСД.ИсходныйДокумент.Дата;
	КонецЕсли;
	
	Попытка
		Если ЗначениеЗаполнено(Клиент) Тогда
			Док.Партнер = Клиент;
			Модуль_ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Док.Партнер, Док.Контрагент);
			Если ТипЗнчДока = Тип("ДокументСсылка.РеализацияТоваровУслуг") Или ТипЗнчДока = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				
				Если ВидДокументаНового = "РеализацияТоваровУслуг" И ВидДокумента = "ЗаказКлиента" И Не ЗначениеЗаполнено(Док.Соглашение) Тогда
					Док.ЗаполнитьУсловияПродажПоУмолчанию();
				КонецЕсли;				
				
				Если Не ЗначениеЗаполнено(Док.ХозяйственнаяОперация) Тогда
					Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;	
				КонецЕсли;
				
			ИначеЕсли ТипЗнчДока = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Или ТипЗнчДока = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Док.ЗаполнитьУсловияЗакупокПоУмолчанию();
				Док.ВариантПриемкиТоваров = Модуль_ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Неопределено, Док.Договор);
			ИначеЕсли ТипЗнчДока = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
				Док.ЗаполнитьУсловияПродажПоУмолчанию();
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если ТипЗнчДока = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда		
		УстановитьСтатусЕслиИспользуютсяСерииДляРеализации(Док, Шаблон);	
	КонецЕсли;
	
	СкладЗаписан = Ложь;
	Если ЗначениеЗаполнено(Склад) Тогда
		Если Не СкладЗаписан Тогда
			Попытка
				Док.Склад = Склад;
				СкладЗаписан = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если Не СкладЗаписан Тогда
			Попытка
				Док.СкладОтправитель = Склад;
				СкладЗаписан = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если Не СкладЗаписан Тогда
			Попытка
				Док.ТорговыйОбъект = Склад;
				СкладЗаписан = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ТЗСобранныеДанныеПодбор = ПараметрыДокумента.Об.СобранныеДанныеПодбор.Выгрузить();	
		Для каждого СтрокаПодбора Из ТЗСобранныеДанныеПодбор Цикл
			РеквизитыНоменклатура = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаПодбора.Номенклатура, "ОсобенностьУчета");
			Док.ВидПродукции = Модуль_ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(РеквизитыНоменклатура.ОсобенностьУчета);
			Прервать;		
		КонецЦикла;	
	Исключение 
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьСтатусЕслиИспользуютсяСерииДляРеализации(Док, Шаблон)
	
	СерииВОтдельнойТЧ = Шаблон.СерииВОтдельнойТЧ;
	лЕстьСерия = (Шаблон.ИспользованиеСерийниковПодбор > 0 И (Док.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("Серия") <> Неопределено)) И СерииВОтдельнойТЧ;
	
	Если лЕстьСерия Тогда
		Док.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено; //влияет на статус указания серий, было КПредоплате
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиВДокументНовыеЗначенияРеквизитов(Об, Док, Шаблон)
	
	Если СокрЛП(Шаблон.ВидДокументаНового) = ""
		Или (Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг" И Шаблон.ВидДокументаНового = "ПриходныйОрдерНаТовары") Тогда//старая схема
				
		Для каждого НовЗнач Из Шаблон.НовыеЗначенияРеквизитов Цикл
			Попытка Док[НовЗнач.ИмяРеквизита] = НовЗнач.ЗначениеРеквизита; Исключение КонецПопытки;
		КонецЦикла;
						
	Иначе	
		Попытка
			Если Шаблон.НовыеЗначенияРеквизитов.Количество() > 0 Тогда
				ИсходныйДок = Об.ИсходныйДокумент.ПолучитьОбъект();
				Для каждого НовЗнач Из Шаблон.НовыеЗначенияРеквизитов Цикл
					Попытка ИсходныйДок[НовЗнач.ИмяРеквизита] = НовЗнач.ЗначениеРеквизита; Исключение КонецПопытки;	
				КонецЦикла;	
				ИсходныйДок.Записать();
			КонецЕсли;
		Исключение
		КонецПопытки;	
			
		Для каждого НовЗнач Из Шаблон.НовыеЗначенияРеквизитовНового Цикл
			Попытка Док[НовЗнач.ИмяРеквизита] = НовЗнач.ЗначениеРеквизита; Исключение КонецПопытки;	
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор)
	
	МетаданныеДокумента = ИсходныйДокумент.Метаданные().Имя;
	
	Если ТЧПриЗагрузкеПодбор = 0 Тогда
		
		Если МетаданныеДокумента <> "ПриобретениеТоваровУслуг" И МетаданныеДокумента <> "ПриемкаТоваровИСМП" Тогда
			Попытка ИсходныйДокумент.ШтрихкодыУпаковок.Очистить(); Исключение КонецПопытки;
			Попытка ИсходныйДокумент.АкцизныеМарки.Очистить(); Исключение КонецПопытки;
			Попытка ИсходныйДокумент.ДанныеОтчетаПроизводственнойЛинии.Очистить(); Исключение КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ТЧПриЗагрузкеПодбор = 2 Тогда
		
		Если МетаданныеДокумента <> "ПриобретениеТоваровУслуг" И МетаданныеДокумента <> "ПриемкаТоваровИСМП" Тогда
			Попытка ИсходныйДокумент.ШтрихкодыУпаковок.Очистить(); Исключение КонецПопытки;
			Попытка ИсходныйДокумент.АкцизныеМарки.Очистить(); Исключение КонецПопытки;
			Попытка ИсходныйДокумент.ДанныеОтчетаПроизводственнойЛинии.Очистить(); Исключение КонецПопытки;
		КонецЕсли;
		
		ИсходныйДокумент[ИмяТЧПодбор].Очистить();
		
	ИначеЕсли ТЧПриЗагрузкеПодбор = 3 Тогда
		
		Если МетаданныеДокумента <> "ПриобретениеТоваровУслуг" И МетаданныеДокумента <> "ПриемкаТоваровИСМП" Тогда
			Попытка ИсходныйДокумент.ШтрихкодыУпаковок.Очистить(); Исключение КонецПопытки;
			Попытка ИсходныйДокумент.АкцизныеМарки.Очистить(); Исключение КонецПопытки;
			Попытка ИсходныйДокумент.ДанныеОтчетаПроизводственнойЛинии.Очистить(); Исключение КонецПопытки;
		КонецЕсли;
		
		Для каждого Стр Из ИсходныйДокумент[ИмяТЧПодбор] Цикл
			
			Попытка Стр.Количество = 0; Исключение КонецПопытки;
			Попытка Стр.КоличествоУпаковок = 0; Исключение КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзменениеТЧПодбор(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор, КопияТЧ = Неопределено, 
	ЭтоГрупповойДокумент = Ложь, ВыбВидПродукции = Неопределено)
	
	МетаданныеДокумента = ИсходныйДокумент.Метаданные();
	ИмяДока = МетаданныеДокумента.Имя;
	
	Модуль_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	Модуль_ИнтеграцияИСУТКлиентСервер = ОбщийМодуль("ИнтеграцияИСУТКлиентСервер");
	
	Шаблон = ДокументТСД.Шаблон;
	БазовыеЕдиницыПриЗагрузке = Шаблон.БазовыеЕдиницыПриЗагрузке;
	
	Если ЭтоГрупповойДокумент Тогда
		ТЗСобранныеДанныеПодбор = ДокументТСД.ТЗОтбораПоДокументу;
	Иначе
		// БЫЛО:
		//ТЗСобранныеДанныеПодбор = ДокументТСД.СобранныеДанныеПодбор.Выгрузить(); 
		
		Если ИмяДока = "МаркировкаТоваровИСМП" Тогда
			ТЗСобранныеДанныеПодбор = ПолучитьВложенныеТоварыВУпаковку(ДокументТСД);
		Иначе
			ТЗСобранныеДанныеПодбор = ДокументТСД.СобранныеДанныеПодбор.Выгрузить(); 
		КонецЕсли;
		
		ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, KM_GTIN, ЯчейкаСсылка", "Количество");	
	КонецЕсли; 
	
	лЕстьGTIN = (МетаданныеДокумента.ТабличныеЧасти[ИмяТЧПодбор].Реквизиты.Найти("GTIN") <> Неопределено);
	Если ИмяДока = "МаркировкаТоваровИСМП" Тогда 
		Если Не ИсходныйДокумент.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков") Тогда
			лЕстьGTIN = Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Если Не лЕстьGTIN Тогда
		ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, ЯчейкаСсылка", "Количество");		
	КонецЕсли; 
	
	Если Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 5 Тогда
		КопияТЧ = Неопределено;		
	КонецЕсли; 
	
	ЭтоВыводИзОборотаИСМП = ИмяДока = "ВыводИзОборотаИСМП";
	
	Если ЭтоВыводИзОборотаИСМП Тогда
		Если Не ВыбВидПродукции = Неопределено Тогда
			ОсобенностьУчетаМассив = Новый Массив; 
			ОсобенностьУчетаМассив.Добавить(Модуль_ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВыбВидПродукции));
			
		Иначе // все
			ФильтрВидПродукции = Модуль_ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
			ОсобенностьУчетаМассив = Новый Массив;  
			
			Для каждого ВидПродукции Из ФильтрВидПродукции Цикл
				ОсобенностьУчетаМассив.Добавить(Модуль_ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 
	
	СерииВОтдельнойТЧ = Шаблон.СерииВОтдельнойТЧ;
	лЕстьСерия = ((Шаблон.ИспользованиеСерийниковПодбор > 0 Или Шаблон.ИсточникСерии = 2) И (МетаданныеДокумента.ТабличныеЧасти[ИмяТЧПодбор].Реквизиты.Найти("Серия") <> Неопределено)) И Не СерииВОтдельнойТЧ И Не ЭтоГрупповойДокумент;
	лЕстьЯчейка = (Шаблон.ИспользованиеЯчеекПодбор > 0 И (МетаданныеДокумента.ТабличныеЧасти[ИмяТЧПодбор].Реквизиты.Найти("Ячейка") <> Неопределено));
	лЕстьЕдиницаИзмерения = (МетаданныеДокумента.ТабличныеЧасти[ИмяТЧПодбор].Реквизиты.Найти("ЕдиницаИзмерения") <> Неопределено);
	лЕстьУпаковка = (МетаданныеДокумента.ТабличныеЧасти[ИмяТЧПодбор].Реквизиты.Найти("Упаковка") <> Неопределено);
	лЕстьИдентификаторСтроки = (МетаданныеДокумента.ТабличныеЧасти[ИмяТЧПодбор].Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено);
		
	Если лЕстьСерия Тогда
		ТЗСобранныеДанныеПодбор = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
		ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, KM_GTIN, СерияСсылка, ЯчейкаСсылка", "Количество");	
	КонецЕсли;
	
	Для каждого СтрТЧ Из ТЗСобранныеДанныеПодбор Цикл
		
		Если СтрТЧ.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОсобенностьУчета = СтрТЧ.Номенклатура.ОсобенностьУчета;
		
		Если ЭтоВыводИзОборотаИСМП И (ОсобенностьУчета.Пустая() Или ОсобенностьУчетаМассив.Найти(ОсобенностьУчета) = Неопределено) Тогда	
			Продолжить;	
		КонецЕсли;
		
		Если БазовыеЕдиницыПриЗагрузке Тогда					
			ТекущаяЕдиницаИзмерения = СтрТЧ.Номенклатура.ЕдиницаИзмерения;
		Иначе
			ТекущаяЕдиницаИзмерения = СтрТЧ.ЕдиницаИзмерения;
		КонецЕсли;	
						
		лСтруктураПоиска = Новый Структура("Номенклатура, Характеристика", СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры);
		Если лЕстьУпаковка И Не БазовыеЕдиницыПриЗагрузке Тогда
			Если ИмяДока = "ПересчетТоваров" Тогда
				Если ИсходныйДокумент.Склад.ИспользоватьАдресноеХранение Или ИсходныйДокумент.Помещение.ИспользоватьАдресноеХранение Тогда
					лСтруктураПоиска.Вставить("Упаковка", ТекущаяЕдиницаИзмерения);
				КонецЕсли;
			ИначеЕсли ИмяДока = "ПриобретениеТоваровУслуг" Тогда
				лСтруктураПоиска.Вставить("Упаковка", ТекущаяЕдиницаИзмерения);			
			Иначе
				Если лЕстьЕдиницаИзмерения Тогда
					лСтруктураПоиска.Вставить("ЕдиницаИзмерения", ТекущаяЕдиницаИзмерения);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		Если лЕстьGTIN Тогда
			лСтруктураПоиска.Вставить("GTIN", СтрТЧ.KM_GTIN);
		КонецЕсли;
		
		Если лЕстьСерия Тогда
			лСтруктураПоиска.Вставить("Серия", СтрТЧ.СерияСсылка);
		КонецЕсли;
		
		Если лЕстьЯчейка Тогда
			лСтруктураПоиска.Вставить("Ячейка", СтрТЧ.ЯчейкаСсылка);
		КонецЕсли;
		
		Если КопияТЧ <> Неопределено И (ИмяДока = "РеализацияТоваровУслуг" Или ИмяДока = "ПриобретениеТоваровУслуг" Или ЭтоВыводИзОборотаИСМП) Тогда
			СтрокиПоиска = КопияТЧ.НайтиСтроки(лСтруктураПоиска);
			
			Если СтрокиПоиска.Количество() = 0 И лЕстьУпаковка Тогда
				лСтруктураПоиска.Удалить("Упаковка");
				СтрокиПоиска = КопияТЧ.НайтиСтроки(лСтруктураПоиска);	
			КонецЕсли;
			
			Если СтрокиПоиска.Количество() = 0 И лЕстьСерия Тогда
				лСтруктураПоиска.Удалить("Серия");
				СтрокиПоиска = КопияТЧ.НайтиСтроки(лСтруктураПоиска);
			КонецЕсли;
			
		Иначе	
			СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);
		КонецЕсли;
		
		Попытка 
			КоэффициентУпаковки = СтрТЧ.ЕдиницаИзмерения.Числитель/СтрТЧ.ЕдиницаИзмерения.Знаменатель;
			КоэффициентУпаковки = ?(КоэффициентУпаковки = 0, 1, КоэффициентУпаковки);
		Исключение
			КоэффициентУпаковки = ?(СтрТЧ.ЕдиницаИзмерения.Числитель = 0, 1, СтрТЧ.ЕдиницаИзмерения.Числитель);
		Конецпопытки;
		
		Если СтрокиПоиска.Количество() <> 0 Тогда
			
			Если КопияТЧ <> Неопределено Тогда								
				Если СтрТЧ.Количество > 0 Тогда
					СтрокаТабличнойЧасти = ИсходныйДокумент[ИмяТЧПодбор].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокиПоиска[0]);
					
					СтрокаТабличнойЧасти.Количество = СтрТЧ.Количество;
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.Количество * КоэффициентУпаковки;
					
					Обработки.ДатаМобайл_АРМДиспетчера.ОбработатьСтрокуТЧ(ИсходныйДокумент, ИмяТЧПодбор, СтрокаТабличнойЧасти, Шаблон);
				КонецЕсли;	
				
				Если БазовыеЕдиницыПриЗагрузке Тогда					
					СтрокаТабличнойЧасти.Упаковка = ТекущаяЕдиницаИзмерения;
					
					Попытка
						СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;  
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок;
					Исключение
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество * КоэффициентУпаковки;
					КонецПопытки;
					
					Обработки.ДатаМобайл_АРМДиспетчера.ОбработатьСтрокуТЧ(ИсходныйДокумент, ИмяТЧПодбор, СтрокаТабличнойЧасти, Шаблон);
				КонецЕсли;
				
				//проверка на нулевое количество			
				СтруктураДляПоиска = Новый Структура("Количество", 0); 			
				ТабличнаяЧастьДок = ИсходныйДокумент[ИмяТЧПодбор]; 
				
				//Получаем список строк соответсвтвующих отбору, и перебором удаляем. 			
				МассивПустыхСтрок = ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска); 
				
				Для каждого Строка Из МассивПустыхСтрок Цикл				
					ТабличнаяЧастьДок.Удалить(Строка);		
				КонецЦикла;
				
				Продолжить;	
			Иначе
				СтрокаТабличнойЧасти = СтрокиПоиска[0];	
			КонецЕсли;			
			
		Иначе
			
			СтрокаТабличнойЧасти = ИсходныйДокумент[ИмяТЧПодбор].Добавить();
			
			СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
			СтрокаТабличнойЧасти.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
			
			Если ИмяДока = "МаркировкаТоваровИСМП" Тогда
				ДанныеВСД = ПолучитьВСДПоТовару(СтрокаТабличнойЧасти.Номенклатура);
				
				Если ДанныеВСД <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеВСД);	
				КонецЕсли; 
			КонецЕсли;
			
			Если лЕстьУпаковка И Не БазовыеЕдиницыПриЗагрузке Тогда
				Если ИмяДока = "ПересчетТоваров" Тогда
					Если ИсходныйДокумент.Склад.ИспользоватьАдресноеХранение Или ИсходныйДокумент.Помещение.ИспользоватьАдресноеХранение Тогда
						СтрокаТабличнойЧасти.Упаковка = ТекущаяЕдиницаИзмерения;
					КонецЕсли;	
				Иначе
					СтрокаТабличнойЧасти.Упаковка = ТекущаяЕдиницаИзмерения;
				КонецЕсли;
			КонецЕсли;
			Если лЕстьGTIN Тогда
				СтрокаТабличнойЧасти.GTIN = СтрТЧ.KM_GTIN;
			КонецЕсли;
			
			Если лЕстьСерия Тогда
				СтрокаТабличнойЧасти.Серия = СтрТЧ.СерияСсылка;
			КонецЕсли;
			
			Если лЕстьЯчейка Тогда
				СтрокаТабличнойЧасти.Ячейка = СтрТЧ.ЯчейкаСсылка;
			КонецЕсли;
			
			Если лЕстьИдентификаторСтроки Тогда
				СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор();
			КонецЕсли;		
						
			Обработки.ДатаМобайл_АРМДиспетчера.ОбработатьНовуюСтрокуТЧ(Новый Структура("Об", ДокументТСД), ИсходныйДокумент, ИмяТЧПодбор, СтрокаТабличнойЧасти); 
			
		КонецЕсли;
				
		Если Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 5 Тогда
			Если Не БазовыеЕдиницыПриЗагрузке Тогда
				Попытка
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрТЧ.Количество;  
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;
				Исключение
					СтрокаТабличнойЧасти.Количество = СтрТЧ.Количество;
				КонецПопытки;
			Иначе
				Попытка
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрТЧ.Количество * КоэффициентУпаковки;  
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок;
				Исключение
					СтрокаТабличнойЧасти.Количество = СтрТЧ.Количество * КоэффициентУпаковки;
				КонецПопытки;
			КонецЕсли;			
		Иначе			
			Если Не БазовыеЕдиницыПриЗагрузке Тогда
				Попытка
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество;  
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;
				Исключение
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрТЧ.Количество;
				КонецПопытки;
			Иначе
				Попытка
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество * КоэффициентУпаковки;  
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок;
				Исключение
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрТЧ.Количество * КоэффициентУпаковки;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
				
		Обработки.ДатаМобайл_АРМДиспетчера.ОбработатьСтрокуТЧ(ИсходныйДокумент, ИмяТЧПодбор, СтрокаТабличнойЧасти, Шаблон);
		
	КонецЦикла;
	
	//Серии в отдельной ТЧ
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("Серии") <> Неопределено И СерииВОтдельнойТЧ И Не ЭтоГрупповойДокумент Тогда
		
		Если Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор > 1 И Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор < 5 Тогда
			Попытка ИсходныйДокумент.Серии.Очистить(); Исключение КонецПопытки;	
		КонецЕсли; 
		
		ТЗСобранныеДанныеПодбор = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
		ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, KM_GTIN, СерияСсылка", "Количество");
		
		Для каждого СтрТЧ Из ТЗСобранныеДанныеПодбор Цикл
			Если СтрТЧ.СерияСсылка.Пустая() Или СтрТЧ.Количество = 0 Тогда
				Продолжить;	
			КонецЕсли; 
			
			Попытка 
				КоэффициентУпаковки = СтрТЧ.ЕдиницаИзмерения.Числитель/СтрТЧ.ЕдиницаИзмерения.Знаменатель;
				КоэффициентУпаковки = ?(КоэффициентУпаковки = 0, 1, КоэффициентУпаковки);
			Исключение
				КоэффициентУпаковки = ?(СтрТЧ.ЕдиницаИзмерения.Числитель = 0, 1, СтрТЧ.ЕдиницаИзмерения.Числитель);
			Конецпопытки;	
			
			лСтруктураПоискаСерий = Новый Структура("Номенклатура,Характеристика,Серия", СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры, СтрТЧ.СерияСсылка);
			СтрокиПоискаСерий = ИсходныйДокумент["Серии"].НайтиСтроки(лСтруктураПоискаСерий);
			Если СтрокиПоискаСерий.Количество() = 0 Тогда
				СтрокаТабличнойЧастиСерии = ИсходныйДокумент["Серии"].Добавить();
				СтрокаТабличнойЧастиСерии.Номенклатура = СтрТЧ.Номенклатура;
				СтрокаТабличнойЧастиСерии.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧастиСерии.Серия = СтрТЧ.СерияСсылка;
				
				СтрокиПоискаПоТоварам = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура,Характеристика", СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры));
				
				Если СтрокиПоискаПоТоварам.Количество() = 1 Или СтрокиПоискаПоТоварам.Количество() > 1 Тогда
					Попытка СтрокаТабличнойЧастиСерии.Склад = СтрокиПоискаПоТоварам[0].Склад; Исключение КонецПопытки;
					Попытка СтрокаТабличнойЧастиСерии.Назначение = СтрокиПоискаПоТоварам[0].Назначение; Исключение КонецПопытки;					
				КонецЕсли; 				
			Иначе	
				СтрокаТабличнойЧастиСерии = СтрокиПоискаСерий[0];
			КонецЕсли;
			
			СтрокаТабличнойЧастиСерии.Количество = СтрокаТабличнойЧастиСерии.Количество + СтрТЧ.Количество * КоэффициентУпаковки;			
		КонецЦикла; 
				
	КонецЕсли;	
	//Серии в отдельной ТЧ
	
	Если Шаблон.ИспользованиеСерийниковПодбор <> 0 Или Шаблон.ИспользованиеСерийниковПриемка <> 0 Тогда
		Обработки.ДатаМобайл_АРМДиспетчера.УстановитьСерииВдокументе(ИсходныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДатуЗавершенияДокументаТСД(ДокументТСД)
	
	ДокументТСД.ДатаЗавершения = ТекущаяДата();
	ДокументТСД.Записать();
	
	//УДАЛЕНИЕ РЕГИСТРАЦИИ ДАННОГО ДОКУМЕНТА НА ДАННОМ УЗЛЕ 
	ДатаМобайл_ОбщийМодуль.УдалитьРегистрациюОбъекта(ДокументТСД, Истина);
	
КонецПроцедуры

Процедура УстановитьGTIN(ДокументТСД)
		
	Для каждого СтруктураСтроки Из ДокументТСД.СобранныеДанныеПодбор Цикл
		Если ЗначениеЗаполнено(СтруктураСтроки.ЦРПТМарка) Тогда
			
			//Пачка табака:
			//GTIN+SN = 21
			//Блок табака:
			//01+GTIN+21+SN = 25
			//Обувь:
			//01+GTIN+21+SN = 31
			//Лекарства:
			//01+GTIN+21+SN = 31
			//Фото:
			//01+GTIN+21+SN = 38
			//Молочка:
			//01+GTIN+21+SN = 24 или 32
			
			Если СтруктураСтроки.ЦРПТМарка_Длина = 21 Тогда
				KM_GTIN = Сред(СтруктураСтроки.ЦРПТМарка, 1, 14);
			ИначеЕсли СтруктураСтроки.ЦРПТМарка_Длина = 25 Тогда
				KM_GTIN = Сред(СтруктураСтроки.ЦРПТМарка, 3, 14);
			ИначеЕсли СтруктураСтроки.ЦРПТМарка_Длина = 31 Или СтруктураСтроки.ЦРПТМарка_Длина = 38 Или СтруктураСтроки.ЦРПТМарка_Длина = 24 Или СтруктураСтроки.ЦРПТМарка_Длина = 32 Тогда
				KM_GTIN = Сред(СтруктураСтроки.ЦРПТМарка, 3, 14);
			Иначе
				KM_GTIN = "";
			КонецЕсли;	
			
			СтруктураСтроки.KM_GTIN = KM_GTIN;
			
		КонецЕсли;	
	КонецЦикла;
		
КонецПроцедуры	

Функция ПривязатьGTINкТовару(ЦРПТМарка, ЦРПТМарка_Длина, Параметры = Неопределено)
		
	//Пачка табака:
	//GTIN+SN = 21
	//Блок табака:
	//01+GTIN+21+SN = 25
	//Обувь:
	//01+GTIN+21+SN = 31
	//Лекарства:
	//01+GTIN+21+SN = 31
	//Фото:
	//01+GTIN+21+SN = 38
	//Молочка:
	//01+GTIN+21+SN = 24 или 32
	
	Если ЦРПТМарка_Длина = 21 Тогда
		GTIN_КМ = Сред(ЦРПТМарка, 1, 14);
	ИначеЕсли ЦРПТМарка_Длина = 25 Тогда
		GTIN_КМ = Сред(ЦРПТМарка, 3, 14);
	ИначеЕсли ЦРПТМарка_Длина = 31 Или ЦРПТМарка_Длина = 38 Или ЦРПТМарка_Длина = 24 Или ЦРПТМарка_Длина = 32 Тогда
		GTIN_КМ = Сред(ЦРПТМарка, 3, 14);
	Иначе
		GTIN_КМ = "";
	КонецЕсли;	
	
	Штрихкод = УдалитьЛидирующиеНули(GTIN_КМ);	
	
	Если Штрихкод <> "" И Лев(Штрихкод, 1) <> "2" И Параметры <> Неопределено Тогда
		
		Попытка ЗаписатьШтрихкодВрегистр(Штрихкод, Параметры); Исключение КонецПопытки;	
		
	КонецЕсли;	
		
КонецФункции // ()

Функция УдалитьЛидирующиеНули(Строка)
	
	СтрокаБезНулей = Строка;
	Пока Лев(СтрокаБезНулей, 1) = "0" Цикл
		СтрокаБезНулей = Прав(СтрокаБезНулей, СтрДлина(СтрокаБезНулей) - 1);	
	КонецЦикла;	
	
	Возврат СтрокаБезНулей; 
КонецФункции	

Функция ЗаписатьШтрихкодВРегистр(ШК, Параметры)
		
	лТовар = Параметры.Номенклатура;
	лХарактеристикаНоменклатуры = Параметры.Характеристика;
	лУпак = Параметры.Упаковка;
		
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод");
	Запрос.УстановитьПараметр("ШтрихКод", ШК);
	
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда//уже есть в списке шк  
		Возврат Истина;	
	КонецЕсли;	
	
	ЗаписьШК = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
	ЗаписьШК.Номенклатура = лТовар;
	ЗаписьШК.Упаковка = лУпак;
	ЗаписьШК.Штрихкод = ШК;	
	ЗаписьШК.Характеристика = лХарактеристикаНоменклатуры; 
	
	ЗаписьШК.Записать(Истина);	
	
КонецФункции	

Функция НайтиУпаковкуПоGTIN(GTIN_KM, Параметры)
	
	лУпак = Параметры.Номенклатура.ЕдиницаИзмерения;
	
	лТовар = Параметры.Номенклатура;
	лХарактеристикаНоменклатуры = Параметры.Характеристика;
			
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|	И ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|");
	
	Запрос.УстановитьПараметр("Штрихкод", GTIN_KM);
	Запрос.УстановитьПараметр("Номенклатура", лТовар);
	
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Если ЗначениеЗаполнено(Рез.Упаковка) Тогда
			лУпак = Рез.Упаковка;
		КонецЕсли;	
	КонецЕсли;		
	
	Возврат лУпак;
		
КонецФункции	

Процедура ПроверитьМаркаНаходитсяВДругомКоробе(СсылкаМарка, СсылкаУпаковка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|ГДЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = &Штрихкод
	|	И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка<>&Упаковка");
	
	Запрос.УстановитьПараметр("Штрихкод", СсылкаМарка);
	Запрос.УстановитьПараметр("Упаковка", СсылкаУпаковка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектКороб = Выборка.Ссылка.ПолучитьОбъект();
		РезультатПоиска = ОбъектКороб.ВложенныеШтрихкоды.НайтиСтроки(Новый Структура("Штрихкод", СсылкаМарка));
		
		Для каждого Строка Из РезультатПоиска Цикл
			ОбъектКороб.ВложенныеШтрихкоды.Удалить(Строка);
		КонецЦикла;
		
		ОбъектКороб.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция НужноЗаполнитьОбъектКороб(ОбъектКороб)
	
	Если ОбъектКороб.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ()

Функция ЗаполнитьОбъектКороб(ОбъектКороб, СсылкаМарка)
	
	ОбъектКороб.Номенклатура = СсылкаМарка.Номенклатура;
	ОбъектКороб.Характеристика = СсылкаМарка.Характеристика;
	ОбъектКороб.Серия = СсылкаМарка.Серия;
	ОбъектКороб.Упаковка = СсылкаМарка.Упаковка;
	
	ОбъектКороб.Записать();
	
КонецФункции // ()

Функция ПолучитьСтруктуруСобранныхМарокИУпаковок(ДокументТСД, СоздаватьЕслиНеНайдена, ПривязыватьGTIN = Ложь, ИгнорироватьНесоответствиеТовараПоЕАNиКМ = Ложь)
	
	//Получаем настройки шаблона: 
	
	ЗапросНастроек = Новый Запрос;
	ЗапросНастроек.Текст =
	"ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСД.Шаблон КАК Шаблон
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
	|ГДЕ
	|	ДатаМобайл_ДокументыТСД.Ссылка = &ДокументТСД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатаМобайл_ШаблоныДокументов.МаркировкаОнлайнПроверкаВложенностиУпаковок
	|ИЗ
	|	Справочник.ДатаМобайл_ШаблоныДокументов КАК ДатаМобайл_ШаблоныДокументов
	|ГДЕ
	|	ДатаМобайл_ШаблоныДокументов.Ссылка В(ВЫБРАТЬ ВТ.Шаблон ИЗ ВТ КАК ВТ)";
	
	ЗапросНастроек.УстановитьПараметр("ДокументТСД", ДокументТСД.Ссылка);
	
	РезультатЗапросаНастроек = ЗапросНастроек.Выполнить();
	ВыборкаНастроек = РезультатЗапросаНастроек.Выбрать();
	
	Пока ВыборкаНастроек.Следующий() Цикл
		
		ОнлайнПроверкаВложенностиУпаковок = ВыборкаНастроек.МаркировкаОнлайнПроверкаВложенностиУпаковок;
		
	КонецЦикла;	       
	
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	
	МассивМарок = Новый Массив;
	
	ТЗСобранныеДанныеМарки = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
	ТЗСобранныеДанныеМарки.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, ЦРПТМарка, ЦРПТМарка_Длина, УпаковочныйЛист, KM_RawMrc, КМСсылка, KM_TNVED, СерияСсылка", "Количество, КоличествоВУпаковке");
	
	Для каждого СтрокаДока Из ТЗСобранныеДанныеМарки Цикл
		
		Если СтрокаДока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//фильтр на не маркир. товары:
		
		Если ПолучитьТипМаркированнойПродукции(СтрокаДока.Номенклатура) = 0 Тогда
	      	Продолжить;
		КонецЕсли;     
		
		ВесМожноУказывать = СтрокаДока.Номенклатура.ВесМожноУказыватьВДокументах;
		
		Если Не ЗначениеЗаполнено(СтрокаДока.УпаковочныйЛист) И ЗначениеЗаполнено(СтрокаДока.ЦРПТМарка) Тогда
			
			Если ЗначениеЗаполнено(СтрокаДока.КМСсылка) И СтрокаДока.КМСсылка.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				МассивМарок.Добавить(СтрокаДока.КМСсылка);
			ИначеЕсли ЗначениеЗаполнено(СтрокаДока.КМСсылка) И СтрокаДока.КМСсылка.ВложенныеШтрихкоды.Количество() <> 0 Тогда
				МассивМарок.Добавить(СтрокаДока.КМСсылка);
			Иначе	
				СтруктураТовара = Новый Структура("Номенклатура, Характеристика, Упаковка, Серия, Количество", СтрокаДока.Номенклатура, СтрокаДока.ХарактеристикаНоменклатуры, СтрокаДока.ЕдиницаИзмерения, СтрокаДока.СерияСсылка, СтрокаДока.Количество);
				СтрокаДока.КМСсылка = ПолучитьСправочникСсылкаМарка(СтрокаДока.ЦРПТМарка, СтрокаДока.ЦРПТМарка_Длина, СтрокаДока.KM_RawMrc, СтрокаДока.KM_TNVED, СоздаватьЕслиНеНайдена, СтруктураТовара,ДокументТСД.Шаблон);
				МассивМарок.Добавить(СтрокаДока.КМСсылка);
			КонецЕсли;
			
			Если СтрокаДока.СерияСсылка <> Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДока.КМСсылка, "Серия") И ЗначениеЗаполнено(СтрокаДока.КМСсылка) Тогда
				ОбновитьСериюШтрихкодыУпаковокТоваров(СтрокаДока.КМСсылка, СтрокаДока.СерияСсылка);	
			КонецЕсли;
			
			Если ПривязыватьGTIN Тогда
				ПривязатьGTINкТовару(СтрокаДока.ЦРПТМарка, СтрокаДока.ЦРПТМарка_Длина, СтруктураТовара);	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДока.КМСсылка) И ИгнорироватьНесоответствиеТовараПоЕАNиКМ Тогда
				Если СтрокаДока.Номенклатура <> СтрокаДока.КМСсылка.Номенклатура Или СтрокаДока.ХарактеристикаНоменклатуры <> СтрокаДока.КМСсылка.Характеристика Тогда
					КМОбъект = СтрокаДока.КМСсылка.ПолучитьОбъект();
					КМОбъект.Номенклатура 	= СтрокаДока.Номенклатура;
					КМОбъект.Характеристика = СтрокаДока.ХарактеристикаНоменклатуры;
					КМОбъект.Записать();	
				КонецЕсли; 
			КонецЕсли;
			
			ЗаполнитьВесУпаковки(СтрокаДока, ВесМожноУказывать);
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаДока.ЦРПТМарка) И ВесМожноУказывать Тогда
			
			Если ЗначениеЗаполнено(СтрокаДока.КМСсылка) И СтрокаДока.КМСсылка.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ИначеЕсли ЗначениеЗаполнено(СтрокаДока.КМСсылка) И СтрокаДока.КМСсылка.ВложенныеШтрихкоды.Количество() <> 0 Тогда
			Иначе	
				СтруктураТовара = Новый Структура("Номенклатура, Характеристика, Упаковка, Серия, Количество", СтрокаДока.Номенклатура, СтрокаДока.ХарактеристикаНоменклатуры, СтрокаДока.ЕдиницаИзмерения, СтрокаДока.СерияСсылка, СтрокаДока.Количество);
				СтрокаДока.КМСсылка = ПолучитьСправочникСсылкаМарка(СтрокаДока.ЦРПТМарка, СтрокаДока.ЦРПТМарка_Длина, СтрокаДока.KM_RawMrc, СтрокаДока.KM_TNVED, СоздаватьЕслиНеНайдена, СтруктураТовара,ДокументТСД.Шаблон);
			КонецЕсли;
			
			ЗаполнитьВесУпаковки(СтрокаДока, ВесМожноУказывать);	
			
		КонецЕсли;
		
	КонецЦикла;                   
	
	//проверка на наличие маркируемого товара в упаковке: 
	
	ЗапросКМ = Новый Запрос;
	ЗапросКМ.Текст =     
	
	"ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛистСсылка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Короб,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЦРПТМарка
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка = &ДокументТСД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ВТ.УпаковочныйЛистСсылка КАК УпаковочныйЛистСсылка,
	|	МАКСИМУМ(ВТ.ЦРПТМарка) КАК ЦРПТМарка,
	|	МАКСИМУМ(ВТ.Короб) КАК Короб,
	|	СУММА(ВТ.Количество) КАК Количество
	|ИЗ
	|	ВТ КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.УпаковочныйЛист,
	|	ВТ.УпаковочныйЛистСсылка
	|ИМЕЮЩИЕ
	|	СУММА(ВТ.Количество) <> 0";
	
	Если Не ОнлайнПроверкаВложенностиУпаковок Тогда

		ЗапросКМ.Текст = ЗапросКМ.Текст + Символы.ПС +
		
		"	
		|	
		|	И МАКСИМУМ(ВТ.ЦРПТМарка) <> &ПустоеЗначение
		|	И МАКСИМУМ(ВТ.Короб) <> &ПустоеЗначение";
		
		ЗапросКМ.УстановитьПараметр("ПустоеЗначение", "");
		
	КонецЕсли;
		
	ЗапросКМ.УстановитьПараметр("ДокументТСД", ДокументТСД.Ссылка);
          
	
	Результат = ЗапросКМ.Выполнить(); 
	МассивКоробов = Новый Массив;
	
	Выборка = Результат.Выбрать();
	                              
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.УпаковочныйЛистСсылка) Тогда
			МассивКоробов.Добавить(Выборка.УпаковочныйЛистСсылка);
			Продолжить;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Выборка.УпаковочныйЛист) Тогда
			МассивКоробов.Добавить(ПолучитьСправочникСсылкаУпаковка(Выборка.УпаковочныйЛист, Ложь, Неопределено));
		КонецЕсли;		
		
    КонецЦикла;
		
	//
	
	ТЗОСУ = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
	ТЗОСУ.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, ЦРПТМарка, ЦРПТМарка_Длина, УпаковочныйЛист, KM_RawMrc, КМСсылка, KM_TNVED, СерияСсылка, ШтрихКод", "Количество, КоличествоВУпаковке");
	
	ПродукцияИСМП_МолочкаВода = Новый Массив;
	Попытка ПродукцияИСМП_МолочкаВода.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС); Исключение КонецПопытки;
	Попытка ПродукцияИСМП_МолочкаВода.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС); Исключение КонецПопытки;
	Попытка ПродукцияИСМП_МолочкаВода.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.УпакованнаяВода); Исключение КонецПопытки;
	Попытка ПродукцияИСМП_МолочкаВода.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.БАДы); Исключение КонецПопытки;
	
	Для каждого СтрОСУ Из ТЗОСУ Цикл
		
		Если СтрОСУ.Количество = 0 Или ЗначениеЗаполнено(СтрОСУ.УпаковочныйЛист) Или ЗначениеЗаполнено(СтрОСУ.ЦРПТМарка) Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ПродукцияИСМП_МолочкаВода.Найти(СтрОСУ.Номенклатура.ОсобенностьУчета) = Неопределено Тогда 
			Продолжить;
		ИначеЕсли ПродукцияИСМП_МолочкаВода.Найти(СтрОСУ.Номенклатура.ВидНоменклатуры.ОсобенностьУчета) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрОСУ.ШтрихКод) Тогда
			КоличествоПУ = ?(СтрОСУ.Номенклатура.ВесМожноУказыватьВДокументах, СтрОСУ.КоличествоВУпаковке, СтрОСУ.Количество);
			GTIN = ?(СтрДлина(СтрОСУ.ШтрихКод) = 13, "0" + СтрОСУ.ШтрихКод, СтрОСУ.ШтрихКод); 
			ЗначениеУпаковки = "(02)" + GTIN + "(37)" + КоличествоПУ;
			УпаковкаСсылка = ПолучитьСправочникСсылкаУпаковка(ЗначениеУпаковки, СоздаватьЕслиНеНайдена, Новый Структура("Номенклатура, Характеристика, Серия, КоличествоПУ, Количество, ЭтоОСУ", СтрОСУ.Номенклатура, СтрОСУ.ХарактеристикаНоменклатуры, СтрОСУ.СерияСсылка, КоличествоПУ, СтрОСУ.Количество, Истина));
			
			Если Не ЗначениеЗаполнено(УпаковкаСсылка) И Не СоздаватьЕслиНеНайдена Тогда
				Сообщить("Не найдена упаковка. В шаблоне не установлено ""Создание новых КМ в 1С"".");
				Продолжить;
			КонецЕсли;
			
			Если СтрОСУ.Номенклатура.ВесМожноУказыватьВДокументах И (СтрОСУ.Количество <> УпаковкаСсылка.Количество Или КоличествоПУ <> УпаковкаСсылка.КоличествоПотребительскихУпаковок) Тогда
				УпаковкаОбъект = УпаковкаСсылка.ПолучитьОбъект();
				УпаковкаОбъект.Количество = СтрОСУ.Количество;
				УпаковкаОбъект.КоличествоПотребительскихУпаковок = КоличествоПУ;
				УпаковкаОбъект.Записать();
			КонецЕсли; 
			МассивКоробов.Добавить(УпаковкаСсылка);
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Новый Структура("Марки, Короба", МассивМарок, МассивКоробов);
	
КонецФункции 

Функция ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкода)
	
	Модуль_ШтрихкодированиеИС = ОбщийМодуль("ШтрихкодированиеИС");
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	
	ЗначенияШтрихкодов = Новый Массив;
	ЗначенияШтрихкодов.Добавить(ЗначениеШтрихкода);
	ШтрихкодыУпаковок = Модуль_ШтрихкодированиеИС.ШтрихкодыУпаковок(ЗначенияШтрихкодов);
	
	Если ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Модуль_ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ШтрихкодыУпаковок[0]);
	
КонецФункции

Функция ПолучитьСправочникСсылкаМарка(КМ, ЦРПТМарка_Длина, KM_RawMrc, KM_TNVED, СоздаватьЕслиНеНайден = Ложь, Параметры = Неопределено, Шаблон) Экспорт
	
	Если Не ЗначениеЗаполнено(КМ) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ЗапросВЦРПТ = Шаблон.МаркировкаЗапросВЦРПТ;
	ЗаписыватьНулевойМРЦ = Не Шаблон.МаркировкаНеЗаписыватьНулевойМРЦ;
	
	RawMrc = KM_RawMrc;
	Если Не ЗаписыватьНулевойМРЦ И KM_RawMrc = "AAAA" Тогда
		RawMrc = "";	
	КонецЕсли;
	
	Модуль_ИнтеграцияИСУТКлиентСервер = ОбщийМодуль("ИнтеграцияИСУТКлиентСервер");
	
	ЭтоТабак = Ложь;
	
	Если Параметры <> Неопределено Тогда				
		ПродукцияИСМП_Табак = Новый Массив;
		Попытка ПродукцияИСМП_Табак.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция); Исключение КонецПопытки;
		Попытка ПродукцияИСМП_Табак.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак); Исключение КонецПопытки;
		Попытка ПродукцияИСМП_Табак.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция); Исключение КонецПопытки;
		
		Если ПродукцияИСМП_Табак.Найти(Параметры.Номенклатура.ОсобенностьУчета) <> Неопределено Тогда 
			ЭтоТабак = Истина;	
			ОсобенностьУчета = Параметры.Номенклатура.ОсобенностьУчета;
		ИначеЕсли ПродукцияИСМП_Табак.Найти(Параметры.Номенклатура.ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
			ЭтоТабак = Истина;
			ОсобенностьУчета = Параметры.Номенклатура.ОсобенностьУчета;	
		КонецЕсли;			
		
		Если ОсобенностьУчета = Неопределено Тогда
			ОсобенностьУчета = Параметры.Номенклатура.ОсобенностьУчета;
		КонецЕсли;	
		
		Если ОсобенностьУчета = Неопределено Тогда 
			ОсобенностьУчета = Параметры.Номенклатура.ВидНоменклатуры.ОсобенностьУчета;
		КонецЕсли;
		
		ВидМаркируемойПродукции = Модуль_ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ОсобенностьУчета);
		
		Параметры.Вставить("ЗаписыватьНулевойМРЦ", ЗаписыватьНулевойМРЦ);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЗначениеШтрихкодаДляЗапроса СПЕЦСИМВОЛ ""$""
	|	И НЕ ШтрихкодыУпаковокТоваров.ПометкаУдаления";
	
	//Пачка табака:
	//GTIN+SN = 21
	//Блок табака:
	//01+GTIN+21+SN = 25
	//Обувь:
	//01+GTIN+21+SN = 31
	//Лекарства:
	//01+GTIN+21+SN = 31
	//Фото:
	//01+GTIN+21+SN = 38
	//Молочка:
	//01+GTIN+21+SN = 24 или 32
	
	Если СтрДлина(КМ) = 21 Тогда
		ЗначениеШтрихкода = КМ;
	ИначеЕсли СтрДлина(КМ) = 25 Тогда
		ЗначениеШтрихкода = "(01)" + Сред(КМ, 3, 14) + "(21)" + Сред(КМ, 19, 7);
	ИначеЕсли СтрДлина(КМ) = 26 тогда
		ЗначениеШтрихкода = "(01)" + Сред(КМ, 3, 14) + "(21)" + Сред(КМ, 19, 8);	
	ИначеЕсли СтрДлина(КМ) = 31 Тогда
		ЗначениеШтрихкода = "(01)" + Сред(КМ, 3, 14) + "(21)" + Сред(КМ, 19, 13);
	ИначеЕсли СтрДлина(КМ) = 32 Тогда
		ЗначениеШтрихкода = "(01)" + Сред(КМ, 3, 14) + "(21)" + Сред(КМ, 19, 14);
	ИначеЕсли СтрДлина(КМ) = 38 Тогда
		ЗначениеШтрихкода = "(01)" + Сред(КМ, 3, 14) + "(21)" + Сред(КМ, 19, 20);
	ИначеЕсли СтрДлина(КМ) = 24 Тогда
		ЗначениеШтрихкода = "(01)" + Сред(КМ, 3, 14) + "(21)" + Сред(КМ, 19, 6);	
	Иначе		
		ДанныеУпаковки = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(КМ);
		
		Если ДанныеУпаковки <> Неопределено Тогда
			Возврат ДанныеУпаковки.Ссылка;
		КонецЕсли;
		
		Попытка
			Если ЭтоТабак И СтрДлина(КМ) > 39 И СоздаватьЕслиНеНайден Тогда
				Возврат СформироватьЗапросКСервисуМОТПилиИСМПиСоздатьСправочникСсылкаМарка(КМ, KM_RawMrc,, Истина, ЭтоТабак,, ВидМаркируемойПродукции, Параметры, Шаблон);	                      
			КонецЕсли;   
		Исключение
		КонецПопытки;
		
		//упаковка
		Возврат ПолучитьСправочникСсылкаУпаковка(КМ, СоздаватьЕслиНеНайден, Параметры);
	КонецЕсли;
	
	//Символы _ и % присутствуют в алфавите маркировки, поэтому требуется экранирование через спецсимвол, символ $ не присутствует в алфавите маркировки
	ЗначениеШтрихкодаДляЗапроса = "" + ЗначениеШтрихкода;
	ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса, "_", "$_");
	ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса, "%", "$%");
	ЗначениеШтрихкодаДляЗапроса = ЗначениеШтрихкодаДляЗапроса + "%";
	
	Запрос.УстановитьПараметр("ЗначениеШтрихкодаДляЗапроса", ЗначениеШтрихкодаДляЗапроса);
	
	КодМаркировкиНеНайден = Истина;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл		
		ТекущийКМ = Выборка.Ссылка;
		
		// Запрос подобно не учитывает регистр, поэтому в выборке может оказаться несколько результатов или неоказаться нужного, надо проверить что нужный КМ выбран.
		Если СтрНайти(ТекущийКМ.ЗначениеШтрихкода,ЗначениеШтрихкода) = 0 Или СтрНайти(ТекущийКМ.ЗначениеШтрихкода, "                         ") > 0 Тогда
			Продолжить;
		Иначе
			КодМаркировкиНеНайден = Ложь;	
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ТекущийКМ.Номенклатура) И Параметры <> Неопределено Тогда
			ДополнитьИнформациюНоменклатураХарактеристика(ТекущийКМ,Параметры.Номенклатура,Параметры.Характеристика);	
		КонецЕсли;	
		
		Если ПолучитьТипМаркированнойПродукции(ТекущийКМ.Номенклатура) = 1 Тогда	
			ДополнитьИнформациюТабачнойПродукцииМРЦ(ТекущийКМ, RawMrc, ЗаписыватьНулевойМРЦ);
		КонецЕсли;
		
		Попытка
			Если ЭтоТабак И СтрДлина(КМ) <> 21 И ТекущийКМ.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар И ТекущийКМ.ВложенныеШтрихкоды.Количество() = 0 Тогда
				Возврат СформироватьЗапросКСервисуМОТПилиИСМПиСоздатьСправочникСсылкаМарка(КМ, KM_RawMrc,,, ЭтоТабак,, ВидМаркируемойПродукции, Параметры, Шаблон);	                      
			КонецЕсли;    
		Исключение
		КонецПопытки;
		
		Возврат ТекущийКМ;
	КонецЦикла;
	
	Если КодМаркировкиНеНайден Тогда
		Если СоздаватьЕслиНеНайден И Параметры <> Неопределено Тогда
			Если ЗапросВЦРПТ Тогда
				Попытка
					Если СтрДлина(КМ) <> 21 Тогда
						КМУпаковки = СформироватьЗапросКСервисуМОТПилиИСМПиСоздатьСправочникСсылкаМарка(КМ, KM_RawMrc,,, ЭтоТабак,, ВидМаркируемойПродукции, Параметры, Шаблон);
						Если КМУпаковки = Неопределено Тогда
							СоздатьСправочникСсылкаМарка(ЗначениеШтрихкода, Параметры, RawMrc, KM_TNVED, ЦРПТМарка_Длина);	
						Иначе							
							Возврат КМУпаковки;
						КонецЕсли;
					КонецЕсли;   
				Исключение
				КонецПопытки;	
			КонецЕсли;
			
			Возврат СоздатьСправочникСсылкаМарка(ЗначениеШтрихкода, Параметры, RawMrc, KM_TNVED, ЦРПТМарка_Длина);
		Иначе		
			Возврат Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
КонецФункции // ()

Функция ПолучитьСправочникСсылкаУпаковка(КМ, СоздаватьЕслиНеНайден = Ложь, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;		
	КонецЕсли; 
	
	Параметры.Вставить("ЕстьТег93", Ложь);
	
	Если Лев(КМ, 2) = "00" И (СтрДлина(КМ) = 20 Или Найти(КМ, "/") = 21) Тогда
		ЗначениеШтрихкода = "(00)" + Сред(КМ, 3, 18);
	ИначеЕсли Лев(КМ, 4) = "(00)" И (СтрДлина(КМ) = 22 Или Найти(КМ, "/") = 23) Тогда
		ЗначениеШтрихкода = "(00)" + Сред(КМ, 5, 18);	
	Иначе
		ЗначениеШтрихкода = СтрЗаменить(КМ,"/////","");
		ЗначениеШтрихкода = СтрЗаменить(ЗначениеШтрихкода,"[","(");
		ЗначениеШтрихкода = СтрЗаменить(ЗначениеШтрихкода,"]",")");
		
		ПоискТега = Найти(ЗначениеШтрихкода, "(93)");
		
		Если ПоискТега > 0 Тогда
			ЗначениеШтрихкода = Лев(ЗначениеШтрихкода, ПоискТега - 1);
			Параметры.ЕстьТег93 = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если СтрНайти(ЗначениеШтрихкода, "(91)") > 0 Тогда
		ЗначениеШтрихкода = Лев(ЗначениеШтрихкода, СтрНайти(ЗначениеШтрихкода, "(91)") - 1);	
	КонецЕсли;
	
	Если СтрНайти(ЗначениеШтрихкода, "(92)") > 0 Тогда
		ЗначениеШтрихкода = Лев(ЗначениеШтрихкода, СтрНайти(ЗначениеШтрихкода, "(92)") - 1);	
	КонецЕсли;
	
	Если СтрНайти(ЗначениеШтрихкода, "(93)") > 0 Тогда
		ЗначениеШтрихкода = Лев(ЗначениеШтрихкода, СтрНайти(ЗначениеШтрихкода, "(93)") - 1);	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЗначениеШтрихкодаДляЗапроса  СПЕЦСИМВОЛ ""$""
	|	И 1=1
	|";
	
	//Символы _ и % присутствуют в алфавите маркировки, поэтому требуется экранирование через спецсимвол, символ $ не присутствует в алфавите маркировки
	ЗначениеШтрихкодаДляЗапроса = ЗначениеШтрихкода;
	ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса, "_", "$_");
	ЗначениеШтрихкодаДляЗапроса = СтрЗаменить(ЗначениеШтрихкодаДляЗапроса, "%", "$%");
	
	Если Лев(КМ, 4) <> "(02)" Тогда
		ЗначениеШтрихкодаДляЗапроса = ЗначениеШтрихкодаДляЗапроса + "%";	
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ЗначениеШтрихкодаДляЗапроса", ЗначениеШтрихкодаДляЗапроса);
	
	// поиск по серии для ОСУ
	Попытка
		Если Параметры.Свойство("ЭтоОСУ") И Параметры.Свойство("Серия") Тогда
			Если Параметры.ЭтоОСУ И ЗначениеЗаполнено(Параметры.Серия) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "1=1", "ШтрихкодыУпаковокТоваров.Серия = &Серия");
				
				Запрос.УстановитьПараметр("Серия", Параметры.Серия);
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда		
		ТекущийКМ = Выборка.Ссылка;
		
		Возврат ТекущийКМ;
	Иначе		
		Если СоздаватьЕслиНеНайден Тогда			
			Возврат СоздатьСправочникСсылкаУпаковка(ЗначениеШтрихкода, Параметры);
		Иначе		
			Возврат Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
КонецФункции // ()

Процедура ДополнитьИнформациюТабачнойПродукцииМРЦ(ТекущийКМ, KM_RawMrc, ЗаписыватьНулевойМРЦ)
	
	Если СтрДлина(ТекущийКМ.ЗначениеШтрихкода) = 21 И ТекущийКМ.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда 
				
		ТекущийКМОбъект = ТекущийКМ.ПолучитьОбъект();
		Если KM_RawMrc = "" И ЗаписыватьНулевойМРЦ Тогда
			ТекущийКМОбъект.ЗначениеШтрихкода = ТекущийКМОбъект.ЗначениеШтрихкода + "AAAA";
		Иначе		
			ТекущийКМОбъект.ЗначениеШтрихкода = ТекущийКМОбъект.ЗначениеШтрихкода + KM_RawMrc;
		КонецЕсли;	
		ТекущийКМОбъект.Записать();
		
	ИначеЕсли СтрДлина(ТекущийКМ.ЗначениеШтрихкода) = 29 И ТекущийКМ.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix И KM_RawMrc <> "" Тогда 
		
		ТекущийКМОбъект = ТекущийКМ.ПолучитьОбъект();		
		ТекущийКМОбъект.ЗначениеШтрихкода = ТекущийКМОбъект.ЗначениеШтрихкода + "(8005)" + KM_RawMrc;
		ТекущийКМОбъект.Записать();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ДополнитьИнформациюНоменклатураХарактеристика(ТекущийКМ, Номенклатура, Характеристика)
	
	ТекущийКМОбъект = ТекущийКМ.ПолучитьОбъект();
	
	ТекущийКМОбъект.Номенклатура = Номенклатура;
	ТекущийКМОбъект.Характеристика = Характеристика;
	ТекущийКМОбъект.Упаковка = Номенклатура.ЕдиницаИзмерения;
	
	ТекущийКМОбъект.Записать();
	
КонецПроцедуры

Функция СоздатьСправочникСсылкаМарка(КодМаркировки, Параметры, KM_RawMrc, KM_TNVED, ЦРПТМарка_Длина)
	
	//Пачка табака:
	//GTIN+SN = 21
	//Блок табака:
	//01+GTIN+21+SN = 25
	//Обувь:
	//01+GTIN+21+SN = 31
	//Лекарства:
	//01+GTIN+21+SN = 31
	//Фото:
	//01+GTIN+21+SN = 38
	//Молочка:
	//01+GTIN+21+SN = 24 или 32
			
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	ОсобенностьУчета = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Номенклатура, "ОсобенностьУчета");
	
	ЭтоПиво = Ложь;
	ЭтоНабор = Ложь;
	
	Попытка ЭтоПиво = ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво; Исключение КонецПопытки;
	
	Если Не ЭтоПиво Тогда
		Попытка ЭтоПиво = ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Пиво; Исключение КонецПопытки;	
	КонецЕсли;
	
	Попытка
		ЭтоАльтернативныйТабак = ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак;	
	Исключение
		ЭтоАльтернативныйТабак = Ложь;
	КонецПопытки; 
	
	КоэффициентУпаковки = Неопределено;
	
	Если ЭтоАльтернативныйТабак И СтрДлина(КодМаркировки) = 29 Тогда
		
		Упаковка = НайтиУпаковкуПоGTIN(Сред(КодМаркировки, 5, 14), Параметры);
		
		Попытка 
			КоэффициентУпаковки = Упаковка.Числитель / Упаковка.Знаменатель;
			КоэффициентУпаковки = ?(КоэффициентУпаковки = 0, 1, КоэффициентУпаковки);
		Исключение
			КоэффициентУпаковки = ?(Упаковка.Числитель = 0, 1, Упаковка.Числитель);
		Конецпопытки;
		
	КонецЕсли; 
	
	НовЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
	
	Если ЦРПТМарка_Длина = 21 Тогда
		НовЭлемент.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
	Иначе	
		НовЭлемент.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
	КонецЕсли;	
	
	Если ЦРПТМарка_Длина = 21 Тогда
		Если KM_RawMrc = "" И Параметры.ЗаписыватьНулевойМРЦ Тогда
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки + "AAAA";		
		Иначе
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки + KM_RawMrc;	
		КонецЕсли;
	ИначеЕсли ЦРПТМарка_Длина = 25 Тогда
		Если KM_RawMrc = "" Тогда
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки;		
		Иначе
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки + "(8005)" + KM_RawMrc;	
		КонецЕсли;	
	ИначеЕсли ЦРПТМарка_Длина = 31 Тогда 
		Если KM_TNVED = "" Тогда
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки;		
		Иначе
			НовЭлемент.ЗначениеШтрихкода = КодМаркировки + "(240)" + KM_TNVED;	
		КонецЕсли;
	ИначеЕсли ЦРПТМарка_Длина = 32 Тогда
		НовЭлемент.ЗначениеШтрихкода = КодМаркировки;	
	ИначеЕсли ЦРПТМарка_Длина = 24 Тогда 
		НовЭлемент.ЗначениеШтрихкода = КодМаркировки;			
	ИначеЕсли ЦРПТМарка_Длина = 38 Тогда 
		НовЭлемент.ЗначениеШтрихкода = КодМаркировки;		
	Иначе 
		НовЭлемент.ЗначениеШтрихкода = КодМаркировки;
	КонецЕсли;
	
	Если КоэффициентУпаковки <> Неопределено Тогда //ЭтоАльтернативныйТабак
		Если КоэффициентУпаковки = 1 Тогда
			НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		Иначе
			НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		КонецЕсли;
	ИначеЕсли ЭтоПиво И ЦРПТМарка_Длина = 25 Тогда
		НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;	
	Иначе
		Если ЦРПТМарка_Длина = 25 Тогда
			НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		Иначе	
			НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		КонецЕсли;
	КонецЕсли; 
	
	Если ЦРПТМарка_Длина = 21 Тогда
		GTIN_KM = Сред(КодМаркировки, 1, 14);
	ИначеЕсли ЦРПТМарка_Длина = 25 Тогда	
		GTIN_KM = Сред(КодМаркировки, 5, 14);
	ИначеЕсли ЦРПТМарка_Длина = 31 Тогда	
		GTIN_KM = Сред(КодМаркировки, 5, 14);
	Иначе
		GTIN_KM = Сред(КодМаркировки, 5, 14);	
	КонецЕсли;
	
	GTIN_KM = УдалитьЛидирующиеНули(GTIN_KM);
	Попытка 
		Если ОписаниеGTINИСЭтоНабор(GTIN_KM) Тогда
			ЭтоНабор = Истина;
			НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;		
		КонецЕсли;	
	Исключение КонецПопытки;
	Попытка ТекущаяУпаковка = НайтиУпаковкуПоGTIN(GTIN_KM, Параметры); Исключение ТекущаяУпаковка = Параметры.Номенклатура.ЕдиницаИзмерения; КонецПопытки;
		
	Если Параметры.Свойство("Серия") Тогда
		НовЭлемент.Серия = Параметры.Серия;		
	КонецЕсли;
	
	НовЭлемент.Номенклатура = Параметры.Номенклатура;
	НовЭлемент.Характеристика = Параметры.Характеристика;	
	НовЭлемент.Упаковка = ТекущаяУпаковка;
	
	Если НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		НовЭлемент.Количество = 1;
		
		Если НовЭлемент.Номенклатура.ВесМожноУказыватьВДокументах Тогда
			Попытка НовЭлемент.Количество = Параметры.Количество; Исключение КонецПопытки;	
		КонецЕсли;		
	КонецЕсли; 
		
	Если ЭтоНабор Тогда
		НовЭлемент.Количество = 1;
		НовЭлемент.КоличествоПотребительскихУпаковок = 1;
	КонецЕсли;
	
	ДанныеУпаковки = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(НовЭлемент.ЗначениеШтрихкода);
	
	Если ДанныеУпаковки <> Неопределено Тогда
		Возврат ДанныеУпаковки.Ссылка;
	КонецЕсли;
	
	НовЭлемент.Записать();
	
	Возврат НовЭлемент.Ссылка;
	
КонецФункции

Функция СоздатьСправочникСсылкаУпаковка(КодМаркировки, Параметры = Неопределено) Экспорт
	
	Попытка
		ЕстьТег93 = Параметры.ЕстьТег93;
	Исключение
		ЕстьТег93 = Ложь;
	КонецПопытки;
	
	НовЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
	
	Если Лев(КодМаркировки, 4) = "(00)" Тогда
		НовЭлемент.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC;
	ИначеЕсли Лев(КодМаркировки, 4) = "(01)" Или Лев(КодМаркировки, 4) = "(02)" Тогда  
		НовЭлемент.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
	Иначе 
		НовЭлемент.ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128; // В ЕГАИС используем просто Code 128
	КонецЕсли;
	
	Если Параметры <> Неопределено Тогда
		Попытка НовЭлемент.Номенклатура = Параметры.Номенклатура; Исключение КонецПопытки;
		Попытка НовЭлемент.Характеристика = Параметры.Характеристика; Исключение КонецПопытки;
		Попытка НовЭлемент.Количество = Параметры.Количество; Исключение КонецПопытки;
		Попытка НовЭлемент.КоличествоПотребительскихУпаковок = Параметры.КоличествоПУ; Исключение КонецПопытки;
		Попытка НовЭлемент.Серия = Параметры.Серия; Исключение КонецПопытки;
	КонецЕсли;
	
	НовЭлемент.ЗначениеШтрихкода = КодМаркировки;	
	НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	
	ДанныеУпаковки = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(НовЭлемент.ЗначениеШтрихкода);
	
	Если Параметры <> Неопределено Тогда
		Если Параметры.Свойство("Серия") Тогда
			Если ДанныеУпаковки <> Неопределено И ДанныеУпаковки.Серия = Параметры.Серия Тогда
				Возврат ДанныеУпаковки.Ссылка;
			КонецЕсли;
		Иначе
			Если ДанныеУпаковки <> Неопределено Тогда
				Возврат ДанныеУпаковки.Ссылка;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ДанныеУпаковки <> Неопределено Тогда
			Возврат ДанныеУпаковки.Ссылка;
		КонецЕсли;		
	КонецЕсли;
	
	НовЭлемент.Записать();
	
	Возврат НовЭлемент.Ссылка;
	
КонецФункции

Процедура ОбновитьСериюШтрихкодыУпаковокТоваров(ШХСсылка, СерияСсылка)
	
	Если Не ЗначениеЗаполнено(ШХСсылка) Или Не ЗначениеЗаполнено(СерияСсылка) Тогда
		Возврат;	
	КонецЕсли; 
	
	ШХОбъект = ШХСсылка.ПолучитьОбъект();
	ШХОбъект.Серия = СерияСсылка;
	ШХОбъект.Записать();
	
КонецПроцедуры

Функция СформироватьЗапросКСервисуМОТПилиИСМПиСоздатьСправочникСсылкаМарка(КодМаркировки, KM_RawMrc, ТекущийКМ = Неопределено, ЭтоУпаковка = Ложь, 
	ЭтоТабак = Истина, СсылкаНаДок = Неопределено, ВидМаркируемойПродукцииДокумента = Неопределено, Параметры = Неопределено, Шаблон = Неопределено, ВызовИзАРМ = Ложь, ОшибкаПриОбращении = "") Экспорт
	
	Если Шаблон = Неопределено Тогда
		Шаблон = Справочники.ДатаМобайл_ШаблоныДокументов.ПустаяСсылка();
	КонецЕсли;
	
	Контекст 			= Новый Структура("Объект,Ссылка", "", ""); //Контекст = ЭтотОбъект;
	ФормаВыбора 		= Неопределено;
	
	Если ЭтоТабак Тогда
		ВидПродукцииИС = ?(ВидМаркируемойПродукцииДокумента <> Неопределено, ВидМаркируемойПродукцииДокумента, Перечисления.ВидыПродукцииИС.Табак);
	Иначе
		ВидПродукцииИС = ?(ВидМаркируемойПродукцииДокумента <> Неопределено, ВидМаркируемойПродукцииДокумента, Перечисления.ВидыПродукцииИС.Обувь)
	КонецЕсли;
	
	СсылкаНаШтрихкод	= Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
	
	Если СсылкаНаДок <> Неопределено Тогда
		Если ТипЗнч(СсылкаНаДок) <> Тип("ДокументСсылка.ПриемкаТоваровИСМП") Тогда	
			Модуль_ШтрихкодированиеИСМПСлужебный = ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			ДанныеНоменклатурыПоДаннымУПД = Модуль_ШтрихкодированиеИСМПСлужебный.ДанныеМаркируемойНоменклатурыПоДаннымУПД(СсылкаНаДок);
		КонецЕсли;	
	КонецЕсли; 
	
	Модуль_ШтрихкодированиеИСКлиентСервер = ОбщийМодуль("ШтрихкодированиеИСКлиентСервер");
	Модуль_ШтрихкодированиеИСКлиентСерверПереопределяемый = ОбщийМодуль("ШтрихкодированиеИСКлиентСерверПереопределяемый");
	Модуль_ШтрихкодированиеИС = ОбщийМодуль("ШтрихкодированиеИС");
	МодульШтрихкодированиеМОТП = ОбщийМодуль("ШтрихкодированиеМОТП");
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	
	ПараметрыСканирования = Модуль_ШтрихкодированиеИСКлиентСервер.БазовыеПараметрыСканирования();
	ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукцииИС, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукцииИС, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляПродукцииИСМП(ПараметрыСканирования, Контекст, ФормаВыбора, ВидПродукцииИС);
	Модуль_ШтрихкодированиеИСКлиентСерверПереопределяемый.ПриЗаполненииПараметровСканирования(ПараметрыСканирования, Контекст, ВидПродукцииИС);
	
	Если ЭтоТабак Тогда
		ПараметрыСканирования = ПолучитьПараметрыСканированияМОТП(СсылкаНаДок, ВидПродукцииИС, Шаблон, ПараметрыСканирования, Истина);
	Иначе
		ПараметрыСканирования = ПолучитьПараметрыСканированияИСПМ(СсылкаНаДок, ВидПродукцииИС, Шаблон, ПараметрыСканирования, Истина, ВызовИзАРМ);
	КонецЕсли; 
	
	Структура = Новый Структура();
	Структура.Вставить("Штрихкод"		, ?(ТекущийКМ = Неопределено, КодМаркировки, ТекущийКМ.ЗначениеШтрихкода));
	Структура.Вставить("Количество"		, "");
	Структура.Вставить("ФорматBase64"	, Ложь);
	
	ДанныеШтрихкодаСписок = Новый Массив;
	ДанныеШтрихкодаСписок.Добавить(Структура); 
	
	ДанныеПоШтрихкодам    = Модуль_ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам();
	ДанныеПоШтрихкодам.ВидыПродукции.Добавить(ВидПродукцииИС);
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидПродукцииИС);
	
	Попытка
		Модуль_ШтрихкодированиеИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеКодовМаркировки, ДанныеШтрихкодаСписок, ПараметрыСканирования, Неопределено);	
	Исключение
		Модуль_ШтрихкодированиеИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеПоШтрихкодам, ДанныеШтрихкодаСписок, ПараметрыСканирования, Неопределено);
	КонецПопытки;
	
	Если ТекущийКМ = Неопределено Тогда
		
		ДанныеУпаковки = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(КодМаркировки);
		
		Если ДанныеУпаковки = Неопределено Тогда
			Модуль_ШтрихкодированиеИС.ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Неопределено);
		ИначеЕсли ДанныеУпаковки.Ссылка.ВложенныеШтрихкоды.Количество() = 0 Тогда //создание вложенности
			ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Неопределено, Модуль_ШтрихкодированиеИС);
		Иначе
			Возврат ДанныеУпаковки.Ссылка;	
		КонецЕсли;
		
	Иначе
		
		МодульШтрихкодированиеМОТП.ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
		Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда			
			Попытка
				Модуль_ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
				ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок,, ПараметрыСканирования);
			Исключение
				Модуль_ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
				ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок,, ПараметрыСканирования);	
			КонецПопытки;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ТекстОшибки <> "" Тогда
		ОшибкаПриОбращении = ДанныеПоШтрихкодам.ТекстОшибки;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды") И ДанныеПоШтрихкодам.ВложенныеШтрихкоды.Свойство("ДеревоУпаковок") Тогда
		
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		
		Попытка
			
			СтрокаДерева = ДеревоУпаковок.Строки[0];
			
			СоздатьНеизвестныеШтрихкодыУпаковокТоваров(СтрокаДерева, СсылкаНаШтрихкод, KM_RawMrc, ДанныеНоменклатурыПоДаннымУПД, ЭтоТабак, Параметры, СсылкаНаДок);
			
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				Возврат СсылкаНаШтрихкод;	
			КонецЕсли; 
			
			Для каждого СтрокаВложенности Из СтрокаДерева.Строки Цикл
				СоздатьНеизвестныеШтрихкодыУпаковокТоваров(СтрокаВложенности, СсылкаНаШтрихкод, KM_RawMrc, ДанныеНоменклатурыПоДаннымУПД, ЭтоТабак, Параметры, СсылкаНаДок);
				
				Если СтрокаВложенности.Строки.Количество() = 0 Тогда
					Продолжить;	
				КонецЕсли;
				
				Для каждого СтрокаВложенностиВторогоУровня Из СтрокаВложенности.Строки Цикл
					СоздатьНеизвестныеШтрихкодыУпаковокТоваров(СтрокаВложенностиВторогоУровня, СсылкаНаШтрихкод, KM_RawMrc, ДанныеНоменклатурыПоДаннымУПД, ЭтоТабак, Параметры, СсылкаНаДок);	
				КонецЦикла; 
				
			КонецЦикла;				
			
		Исключение
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытияЖурналРегистрации = НСтр("ru = 'Создание элементов справочника штрихкоды упаковок.'", Модуль_ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
			
			ВызватьИсключение ПодробноеПредставлениеОшибки;
			
		КонецПопытки;
		
	КонецЕсли; 
	
	Возврат СсылкаНаШтрихкод;
	
КонецФункции

// Включает поддержку алкогольной продукции и заполняет параметры сканирования с учетом ее специфики.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
Процедура ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	
	Если Модуль_ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
		Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеЕГАИСКлиентСервер = ОбщийМодуль("ШтрихкодированиеЕГАИСКлиентСервер");
		МодульШтрихкодированиеЕГАИСКлиентСервер.ЗаполнитьПараметрыСканирования(
		ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку табачной продукции и заполняет параметры сканирования с учетом ее специфики.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
Процедура ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	
	Если Модуль_ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И (ЭтоТабакПоВидыПродукцииИС(ВидПродукции)
		Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
		МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку обувной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
Процедура ЗаполнитьПараметрыСканированияДляПродукцииИСМП(ПараметрыСканирования, Контекст, ФормаВыбора, ВидПродукции)
	
	Модуль_ИнтеграцияИСПовтИсп = ОбщийМодуль("ИнтеграцияИСПовтИсп");
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	
	Если Модуль_ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если Модуль_ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции)
			Или Не ЗначениеЗаполнено(ВидПродукции) Тогда
			
			МодульШтрихкодированиеМОТПКлиентСервер = ОбщийМодуль("ШтрихкодированиеИСМПКлиентСервер");
			
			Попытка
				МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(Контекст, ФормаВыбора, ВидПродукции, ПараметрыСканирования);	
			Исключение
				МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(Контекст, ВидПродукции, ПараметрыСканирования);
			КонецПопытки; 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНеизвестныеШтрихкодыУпаковокТоваров(СтрокаДерева, СсылкаНаШтрихкод, KM_RawMrc, ДанныеНоменклатурыПоДаннымУПД = Неопределено, ЭтоТабак, Параметры, СсылкаНаДок)
	
	Марка = СтрокаДерева.Штрихкод;
	
	ДанныеУпаковки = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(Марка);
	
	Если ДанныеУпаковки = Неопределено Тогда
		НовЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
		
		Попытка
			ЗаполнитьЗначенияСвойств(НовЭлемент, СтрокаДерева,,"Родитель,Владелец,ХешСумма");
		Исключение
			ЗаполнитьЗначенияСвойств(НовЭлемент, СтрокаДерева,,"Родитель,ХешСумма");
		КонецПопытки;
		
		Если СтрДлина(Марка) = 29 И СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда	
			Марка = Марка + ?(СокрЛП(KM_RawMrc) = "", "", "(8005)" + KM_RawMrc);	
		КонецЕсли;
		
		//переопределю Номенклатуру и характеристику на подобранную из документа ПТУ или на ТСД
		Если СсылкаНаДок <> Неопределено И ТипЗнч(СсылкаНаДок) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", НовЭлемент.Номенклатура);
			
			СтрокаПоиска = СсылкаНаДок.Товары.НайтиСтроки(ПараметрыОтбора);
			
			Если СтрокаПоиска.Количество() = 1 Тогда		
				НовЭлемент.Характеристика = СтрокаПоиска[0].Характеристика;
			КонецЕсли;
			
		ИначеЕсли Параметры <> Неопределено Тогда
			
			Номенклатура 	= Параметры.Номенклатура;
			Характеристика 	= Параметры.Характеристика;
			
			Если Номенклатура <> Справочники.Номенклатура.ПустаяСсылка() И Номенклатура <> НовЭлемент.Номенклатура Тогда
				НовЭлемент.Номенклатура = Номенклатура;	
			КонецЕсли;
			
			Если Характеристика <> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() И Характеристика <> НовЭлемент.Характеристика Тогда
				НовЭлемент.Характеристика = Характеристика;	
			КонецЕсли;
			
		КонецЕсли;
		
		НовЭлемент.ЗначениеШтрихкода = СокрЛП(Марка);
		
		Если Не ЭтоТабак И (СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Или СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC) И НовЭлемент.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			
			МаркаБезНулей = СтрЗаменить(Марка, "(00)", "");
			
			Если ДанныеНоменклатурыПоДаннымУПД <> Неопределено Тогда
				
				СведенияПоEAN = ДанныеНоменклатурыПоДаннымУПД.Получить(МаркаБезНулей);
				
				Если СведенияПоEAN <> Неопределено Тогда			
					Если ЗначениеЗаполнено(СведенияПоEAN.Номенклатура) Тогда					
						НовЭлемент.Номенклатура = СведенияПоEAN.Номенклатура;
						НовЭлемент.Характеристика = СведенияПоEAN.Характеристика;
					Иначе
						ЗаполнитьНоменклатуру(СтрокаДерева, НовЭлемент);				
					КонецЕсли;
				Иначе
					ЗаполнитьНоменклатуру(СтрокаДерева, НовЭлемент);
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;
		
		Если НовЭлемент.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() И НовЭлемент.ТипУпаковки <> Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
			ЗаполнитьНоменклатуру(СтрокаДерева, НовЭлемент, Истина);
		КонецЕсли;
		
		Если НовЭлемент.Номенклатура <> Справочники.Номенклатура.ПустаяСсылка() Или НовЭлемент.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда			
			ДанныеУпаковки = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(НовЭлемент.ЗначениеШтрихкода);
			
			Если ДанныеУпаковки <> Неопределено Тогда //данный штрихкод есть базе
				СсылкаНаШтрихкод = ДанныеУпаковки.Ссылка;
				Возврат;
			КонецЕсли;
			
			НовЭлемент.Записать();
		Иначе
			Сообщить("Не заполнена номенклатура для: " + Марка);
		КонецЕсли;	
		
	Иначе
		
		НовЭлемент = ДанныеУпаковки.Ссылка;
		
	КонецЕсли; 
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		ЗначениеШтрихкодаРодителя 					= СтрокаДерева.Родитель.Штрихкод;
		ЗначениеШтрихкодаРодителяНормализованный 	= СтрокаДерева.Родитель.НормализованныйШтрихкод;
		
		ДанныеУпаковки = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкодаРодителя);
		
		Если ДанныеУпаковки = Неопределено Тогда
			ДанныеУпаковки = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкодаРодителяНормализованный);		
		КонецЕсли; 
		
		Если ДанныеУпаковки = Неопределено И Не СсылкаНаШтрихкод.Пустая() Тогда // 2 верхних поиска перестали отрабатывать, добавил подстановку по родителю
			ДанныеУпаковки = СсылкаНаШтрихкод;		
		КонецЕсли;
		
		Если ДанныеУпаковки <> Неопределено Тогда //данный штрихкод есть базе	
			НайденныйОбъект = ДанныеУпаковки.Ссылка.ПолучитьОбъект();
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Штрихкод", НовЭлемент.Ссылка);
			НайденныеСтроки = НайденныйОбъект.ВложенныеШтрихкоды.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				НовСтрокаВложенности = НайденныйОбъект.ВложенныеШтрихкоды.Добавить();
				НовСтрокаВложенности.Штрихкод = НовЭлемент.Ссылка;
				НайденныйОбъект.Записать();
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли; 
	
	Если СсылкаНаШтрихкод.Пустая() Тогда
		СсылкаНаШтрихкод = НовЭлемент.Ссылка;		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуру(СтрокаДерева, НовЭлемент, ИскатьПоEAN = Ложь)
	
	Если ИскатьПоEAN Тогда
		
		EAN = "";
		
		Если СтрокаДерева.Строки.Количество() = 0 Тогда
			EAN = СтрокаДерева.EAN;	
		КонецЕсли; 
		
		Попытка
			Если СтрокаДерева.Строки[0].Строки.Количество() = 0 Тогда
				EAN = СтрокаДерева.Строки[0].EAN;	
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			Если СтрокаДерева.Строки[0].Строки[0].Количество() = 0 Тогда
				EAN = СтрокаДерева.Строки[0].Строки[0].EAN;	
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если Не ПустаяСтрока(EAN) Тогда
			ЗаполнитьНоменклатуруВСтрокаДерева(СтрокаДерева, НовЭлемент, EAN);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		ЗначениеШтрихкодаРодителя 					= СтрокаДерева.Родитель.Штрихкод;
		ЗначениеШтрихкодаРодителяНормализованный 	= СтрокаДерева.Родитель.НормализованныйШтрихкод;
		
		ДанныеУпаковки = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкодаРодителя);
		
		Если ДанныеУпаковки = Неопределено Тогда
			ДанныеУпаковки = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкодаРодителяНормализованный);		
		КонецЕсли;
		
		Если ДанныеУпаковки <> Неопределено Тогда //данный штрихкод есть базе
			НовЭлемент.Номенклатура = ДанныеУпаковки.Номенклатура;
			НовЭлемент.Характеристика = ДанныеУпаковки.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруВСтрокаДерева(СтрокаДерева, НовЭлемент, EAN)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО ""%"" + &Штрихкод
	|	И ШтрихкодыНоменклатуры.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.)";
	
	Запрос.УстановитьПараметр("Штрихкод", EAN);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Номенклатура = Выборка.Номенклатура;
		ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
		
		СтрокаДерева.Номенклатура 	= Номенклатура;
		НовЭлемент.Номенклатура 	= Номенклатура;
		
		Если СтрокаДерева.Строки.Количество() = 0 Тогда
			Возврат;	
		КонецЕсли; 
		
		Для каждого СтрокаВложенности Из СтрокаДерева.Строки Цикл
			
			Если СтрокаВложенности.Номенклатура = ПустаяНоменклатура Тогда
				СтрокаВложенности.Номенклатура = Номенклатура;	
			КонецЕсли;	
			
			Если СтрокаВложенности.Строки.Количество() = 0 Тогда
				Продолжить;	
			КонецЕсли;
			
			Для каждого СтрокаВложенностиВторогоУровня Из СтрокаВложенности.Строки Цикл
				Если СтрокаВложенностиВторогоУровня.Номенклатура = ПустаяНоменклатура Тогда
					СтрокаВложенностиВторогоУровня.Номенклатура = Номенклатура;	
				КонецЕсли;		
			КонецЦикла; 
			
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОчиститьСтрокиШтрихкодовУпаковокПоМассиву(ИсходныйДокумент)
	
	Попытка ИсходныйДокумент.ШтрихкодыУпаковок.Очистить(); Исключение КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьСтрокиШтрихкодовУпаковокПоМассиву(лМассив, ИсходныйДокумент, МассивНеизвестныхДляПриемки = Неопределено, ПроверкаБезСертификата = Ложь, ЭтоНовыйДокумент = Ложь)
	
	Если МассивНеизвестныхДляПриемки = Неопределено Тогда
		МассивНеизвестныхДляПриемки = Новый Массив;	
	КонецЕсли;	
	
	ВидДокумента = ИсходныйДокумент.Метаданные().Имя;
	Если Метаданные.Документы[ВидДокумента].ТабличныеЧасти.Найти("ШтрихкодыУпаковок") = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для каждого лЭлемент Из лМассив Цикл
		
		Если лЭлемент = Неопределено Или лЭлемент = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		лСтруктураПоиска = Новый Структура("ШтрихкодУпаковки", лЭлемент);	
		СтрокиПоиска = ИсходныйДокумент.ШтрихкодыУпаковок.НайтиСтроки(лСтруктураПоиска);
		Если СтрокиПоиска.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидДокумента = "ПриобретениеТоваровУслуг" Или ВидДокумента = "ПриемкаТоваровИСМП" Тогда
			Попытка
				ЗначениеШтрихкода = УбратьСкобкиТеговМарка(лЭлемент.ЗначениеШтрихкода,ПолучитьТипМаркированнойПродукции(лЭлемент.Номенклатура));
				лСтруктураПоиска = Новый Структура("ЗначениеШтрихкода", ЗначениеШтрихкода);	
				СтрокиПоиска = ИсходныйДокумент.ШтрихкодыУпаковок.НайтиСтроки(лСтруктураПоиска);
				
				Если СтрокиПоиска.Количество() = 0 И (СтрДлина(лЭлемент.ЗначениеШтрихкода) = 22 Или лЭлемент.ЗначениеШтрихкода = 20) Тогда
					лСтруктураПоиска = Новый Структура("ЗначениеШтрихкода", Прав(лЭлемент.ЗначениеШтрихкода, 18));	
					СтрокиПоиска = ИсходныйДокумент.ШтрихкодыУпаковок.НайтиСтроки(лСтруктураПоиска);		
				КонецЕсли;
				
				Если СтрокиПоиска.Количество() = 0 Тогда
					НайденноеЗначениеШтрихкода = ПоискЗначениеШтрихкодаВДокументеПриемка(ИсходныйДокумент.Ссылка, ЗначениеШтрихкода);
					Если НайденноеЗначениеШтрихкода <> "" Тогда
						Продолжить;
					КонецЕсли;	
				КонецЕсли;
				
				Если СтрокиПоиска.Количество() <> 0 Тогда
					Для каждого НайденнаяСтрока Из СтрокиПоиска Цикл
						Если ПроверкаБезСертификата Тогда
							НайденнаяСтрока.ШтрихкодУпаковки = лЭлемент;	
						КонецЕсли; 
					КонецЦикла;
					Продолжить;
				КонецЕсли;
			Исключение 
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		стрИсходныйДокумент = ИсходныйДокумент.ШтрихкодыУпаковок.Добавить();
		
		Если Не (ВидДокумента = "ПриобретениеТоваровУслуг" Или ВидДокумента = "ПриемкаТоваровИСМП") Или ПроверкаБезСертификата Тогда
			стрИсходныйДокумент.ШтрихкодУпаковки = лЭлемент;
		КонецЕсли;
		
		Если ВидДокумента = "МаркировкаТоваровИСМП" Тогда
			ЗаполнитьВСДИСрокГодности(ИсходныйДокумент, лЭлемент, стрИсходныйДокумент, ЭтоНовыйДокумент); 
		КонецЕсли;
		
		Попытка стрИсходныйДокумент.ЗначениеШтрихкода = УбратьСкобкиТеговМарка(лЭлемент.ЗначениеШтрихкода, ПолучитьТипМаркированнойПродукции(лЭлемент.Номенклатура)) Исключение КонецПопытки;
		
		Если ВидДокумента = "ПриобретениеТоваровУслуг" Или ВидДокумента = "ПриемкаТоваровИСМП" Тогда
			МассивНеизвестныхДляПриемки.Добавить(лЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	ПустаяСсылкаШУ = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
	
	Если (ВидДокумента = "ПриобретениеТоваровУслуг" Или ВидДокумента = "ПриемкаТоваровИСМП") И Не ПроверкаБезСертификата Тогда
		Для каждого СтрокаШУ Из ИсходныйДокумент.ШтрихкодыУпаковок Цикл
			СтрокаШУ.ШтрихкодУпаковки = ПустаяСсылкаШУ;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСтрокиШтрихкодовУпаковокПоМассиву_Упаковки(лМассив, ИсходныйДокумент, МассивНеизвестныхДляПриемки = Неопределено, ПроверкаБезСертификата = Ложь, ЭтоНовыйДокумент = Ложь)
	
	Если МассивНеизвестныхДляПриемки = Неопределено Тогда
		МассивНеизвестныхДляПриемки = Новый Массив;	
	КонецЕсли;	
	
	ВидДокумента = ИсходныйДокумент.Метаданные().Имя;
	Если Метаданные.Документы[ВидДокумента].ТабличныеЧасти.Найти("ШтрихкодыУпаковок") = Неопределено Тогда
		Возврат;
	КонецЕсли;	  
	
	Для каждого лЭлемент Из лМассив Цикл
		
		Если лЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		лСтруктураПоиска = Новый Структура("ШтрихкодУпаковки", лЭлемент);	
		СтрокиПоиска = ИсходныйДокумент.ШтрихкодыУпаковок.НайтиСтроки(лСтруктураПоиска);
		Если СтрокиПоиска.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущееЗначениеШтрихкода = УбратьСкобкиТеговУпаковка(лЭлемент.ЗначениеШтрихкода);
		
		Если ВидДокумента = "ПриобретениеТоваровУслуг" Или ВидДокумента = "ПриемкаТоваровИСМП" Тогда
			Попытка
				лСтруктураПоиска = Новый Структура("ЗначениеШтрихкода",ТекущееЗначениеШтрихкода);	
				СтрокиПоиска = ИсходныйДокумент.ШтрихкодыУпаковок.НайтиСтроки(лСтруктураПоиска);
				
				Если СтрокиПоиска.Количество() = 0 И Лев(ТекущееЗначениеШтрихкода, 2) = "00" И СтрДлина(ТекущееЗначениеШтрихкода) = 20 Тогда
					ТекущееЗначениеШтрихкода = Прав(ТекущееЗначениеШтрихкода, 18);
					лСтруктураПоиска = Новый Структура("ЗначениеШтрихкода", ТекущееЗначениеШтрихкода);	
					СтрокиПоиска = ИсходныйДокумент.ШтрихкодыУпаковок.НайтиСтроки(лСтруктураПоиска);
				КонецЕсли;				
				
				Если СтрокиПоиска.Количество() <> 0 Тогда
					Для каждого НайденнаяСтрока Из СтрокиПоиска Цикл
						Если ПроверкаБезСертификата Тогда
							НайденнаяСтрока.ШтрихкодУпаковки = лЭлемент;
						КонецЕсли;	
					КонецЦикла;
					Продолжить;
				КонецЕсли;
			Исключение 
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		стрИсходныйДокумент = ИсходныйДокумент.ШтрихкодыУпаковок.Добавить();
		Если Не (ВидДокумента = "ПриобретениеТоваровУслуг" Или ВидДокумента = "ПриемкаТоваровИСМП") Или ПроверкаБезСертификата Тогда
			стрИсходныйДокумент.ШтрихкодУпаковки = лЭлемент;
		КонецЕсли;
		
		Если ВидДокумента = "МаркировкаТоваровИСМП" Тогда
			ЗаполнитьВСДИСрокГодности(ИсходныйДокумент, лЭлемент, стрИсходныйДокумент, ЭтоНовыйДокумент); 
		КонецЕсли;
		
		Попытка стрИсходныйДокумент.ЗначениеШтрихкода = ТекущееЗначениеШтрихкода Исключение КонецПопытки;
		
		Если ВидДокумента = "ПриобретениеТоваровУслуг" Или ВидДокумента = "ПриемкаТоваровИСМП" Тогда
			МассивНеизвестныхДляПриемки.Добавить(лЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСсылкиШтрихкодовУпаковок(ИсходныйДокумент)
	
	ВидДокумента = ИсходныйДокумент.Метаданные().Имя;
	Если Метаданные.Документы[ВидДокумента].ТабличныеЧасти.Найти("ШтрихкодыУпаковок") = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для каждого НайденнаяСтрока Из ИсходныйДокумент.ШтрихкодыУпаковок Цикл
		НайденнаяСтрока.ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьСтрокиАкцизныхМарокПоМассиву(лМассив, ИсходныйДокумент)
	
	Для каждого лЭлемент Из лМассив Цикл
		
		Если лЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		лСтруктураПоиска = Новый Структура("ШтрихкодУпаковки", лЭлемент);	
		СтрокиПоиска = ИсходныйДокумент.АкцизныеМарки.НайтиСтроки(лСтруктураПоиска);
		Если СтрокиПоиска.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		лСтруктураПоиска = Новый Структура("АкцизнаяМарка", лЭлемент);	
		СтрокиПоиска = ИсходныйДокумент.АкцизныеМарки.НайтиСтроки(лСтруктураПоиска);
		Если СтрокиПоиска.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
				
		лСтруктураПоиска = Новый Структура("Номенклатура,Характеристика", лЭлемент.Номенклатура, лЭлемент.Характеристика);	
		СтрокиПоиска = ИсходныйДокумент.Товары.НайтиСтроки(лСтруктураПоиска);
		Если СтрокиПоиска.Количество() > 0 Тогда			
			НоваяСтрокаТЧ = ИсходныйДокумент.АкцизныеМарки.Добавить();
			НоваяСтрокаТЧ.ШтрихкодУпаковки = лЭлемент;
			НоваяСтрокаТЧ.АкцизнаяМарка = лЭлемент;
			НоваяСтрокаТЧ.ИдентификаторСтроки =	СтрокиПоиска[0].ИдентификаторСтроки;	
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Функция ПоискЗначениеШтрихкодаВДокументеПриемка(СсылкаНаДокумент, ЗначениеШтрихкода)
	
	НайденноеЗначениеШтрихкода = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.ШтрихкодыУпаковок КАК ПриобретениеТоваровУслугШтрихкодыУпаковок
	|ГДЕ
	|	ПриобретениеТоваровУслугШтрихкодыУпаковок.Ссылка = &Ссылка
	|	И ПриобретениеТоваровУслугШтрихкодыУпаковок.ЗначениеШтрихкода ПОДОБНО &ЗначениеШтрихкода + ""%""";
	
	Запрос.УстановитьПараметр("ЗначениеШтрихкода", ЗначениеШтрихкода);
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НайденноеЗначениеШтрихкода = Выборка.ЗначениеШтрихкода;
	КонецЕсли;	
	
	Возврат НайденноеЗначениеШтрихкода;
	
КонецФункции

//СтруктураСобранныхМарокИУпаковок содержит массив Короба и массив Марки
//под табак
Процедура ПерезаписатьХешУпаковок(СтруктураСобранныхМарокИУпаковок, ЭтоПТУ = Ложь)
	
	//Пачка табака:
	//GTIN+SN = 21
	//Блок табака:
	//01+GTIN+21+SN = 25
	
	Модуль_ИнтеграцияИС = ОбщийМодуль("ИнтеграцияИС");
	
	ТипыУпаковокПеречисления 		= Перечисления.ТипыУпаковок;
	ОсобенностиУчетаНоменклатуры 	= Перечисления.ОсобенностиУчетаНоменклатуры;
	МаркированныйТовар 				= ТипыУпаковокПеречисления.МаркированныйТовар;
	МонотоварнаяУпаковка 			= ТипыУпаковокПеречисления.МонотоварнаяУпаковка;
	
	Если ЭтоПТУ Тогда
		СтруктураМарокИУпаковок = СтруктураСобранныхМарокИУпаковок.Короба;
	Иначе
		СтруктураМарокИУпаковок = СтруктураСобранныхМарокИУпаковок.Марки;
	КонецЕсли;
	
	Для каждого СтрМассивУпаковки Из СтруктураМарокИУпаковок Цикл
		Если СтрМассивУпаковки.ТипУпаковки = МонотоварнаяУпаковка Тогда
			УпаковкаОбъект = СтрМассивУпаковки.ПолучитьОбъект();
			Марки = УпаковкаОбъект.ВложенныеШтрихкоды;
			ЕИУпаковка = Неопределено;
			ДанныеДляРасчетаХешСуммы = Неопределено;
			
			НоменклатураУпаковки = СтрМассивУпаковки.Номенклатура;
			
			ЭтоТабак = Ложь;
			ЭтоУпаковоннаяВода = Ложь;
			
			Если (НоменклатураУпаковки.ОсобенностьУчета = ОсобенностиУчетаНоменклатуры.АльтернативныйТабак
				Или НоменклатураУпаковки.ВидНоменклатуры.ОсобенностьУчета = ОсобенностиУчетаНоменклатуры.АльтернативныйТабак
				Или НоменклатураУпаковки.ОсобенностьУчета = ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция
				Или НоменклатураУпаковки.ВидНоменклатуры.ОсобенностьУчета = ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция
				Или НоменклатураУпаковки.ОсобенностьУчета = ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция
				Или НоменклатураУпаковки.ВидНоменклатуры.ОсобенностьУчета = ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция) Тогда					
				ЭтоТабак = Истина;
			КонецЕсли;
			
			Если НоменклатураУпаковки.ОсобенностьУчета = ОсобенностиУчетаНоменклатуры.УпакованнаяВода
				Или НоменклатураУпаковки.ВидНоменклатуры.ОсобенностьУчета = ОсобенностиУчетаНоменклатуры.УпакованнаяВода Тогда					
				ЭтоУпаковоннаяВода = Истина;
			КонецЕсли;
			
			Если Не (ЭтоТабак Или ЭтоУпаковоннаяВода) Тогда
				Продолжить;	
			КонецЕсли;
			
			ЭтоАльтернативныйТабак = Ложь;			
			
			Если (НоменклатураУпаковки.ОсобенностьУчета = ОсобенностиУчетаНоменклатуры.АльтернативныйТабак
				Или НоменклатураУпаковки.ВидНоменклатуры.ОсобенностьУчета = ОсобенностиУчетаНоменклатуры.АльтернативныйТабак) Тогда					
				ЭтоАльтернативныйТабак = Истина;
			КонецЕсли;
			
			Для каждого СтрМарки Из Марки Цикл
				Марка = СтрМарки.Штрихкод;
				
				Если ЭтоТабак Тогда				
					Если Марка.ТипУпаковки = МаркированныйТовар И Марка.ХешСуммаНормализации = "" И СтрДлина(Марка.ЗначениеШтрихкода) = 25 Тогда //Требует разбор 
						МаркаОбъект = Марка.ПолучитьОбъект();		
						МаркаОбъект.ЗначениеШтрихкода = Лев(МаркаОбъект.ЗначениеШтрихкода, 21);
						МаркаОбъект.Записать();
						МаркаОбъект.ХешСуммаНормализации = Модуль_ИнтеграцияИС.ХешированиеДанныхSHA256(МаркаОбъект.ЗначениеШтрихкода);
						МаркаОбъект.Записать();
						
						Если ЕИУпаковка = Неопределено Тогда
							ЕИУпаковка = МаркаОбъект.Упаковка;	
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ЭтоУпаковоннаяВода Тогда
					ДанныеДляРасчетаХешСуммы.Добавить(СтрМарки.Штрихкод.ЗначениеШтрихкода);
				КонецЕсли;
			КонецЦикла;
			
			Если ЭтоТабак Тогда
				Если ЕИУпаковка <> Неопределено Тогда
					УпаковкаОбъект.Упаковка = ЕИУпаковка;			
					УпаковкаОбъект.Записать();
				КонецЕсли;
				
				Если ЭтоАльтернативныйТабак Тогда				
					УпаковкаОбъект.Записать();
				КонецЕсли;
			ИначеЕсли ЭтоУпаковоннаяВода Тогда
				ХешСумма = Справочники.ШтрихкодыУпаковокТоваров.ХешСуммаСодержимогоУпаковки(ДанныеДляРасчетаХешСуммы);				
				УпаковкаОбъект.ХешСумма 			 = ХешСумма;	
				УпаковкаОбъект.ОбменДанными.Загрузка = Истина;
				УпаковкаОбъект.Записать();
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВесУпаковки(СтрокаДока, ВесМожноУказывать)
	
	Попытка 
		Если ВесМожноУказывать И ЗначениеЗаполнено(СтрокаДока.КМСсылка) И (СтрокаДока.Количество <> СтрокаДока.КМСсылка.Количество Или СтрокаДока.КМСсылка.КоличествоПотребительскихУпаковок <> 1) Тогда
			КМОбъект = СтрокаДока.КМСсылка.ПолучитьОбъект();
			КМОбъект.Количество = СтрокаДока.Количество;
			КМОбъект.КоличествоПотребительскихУпаковок = 1;
			КМОбъект.Записать();
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРезультатаПроверки

Функция ПолучитьВидПродукцииИСДокумента(Документ, ИмяТЧПодбор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Документ.Ссылка);
	
	ИмяДокумента = Документ.Метаданные().Имя;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета
	| 	
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументСсылка
	|	И СправочникНоменклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И 
	|	(
	|	(СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка)
	|   	И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|   	И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы)
	|   	И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ)
	|   	И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
	|   	И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом)
	|   	И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме) 
	|   	И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Партнером) 
	|   	И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)))
	| 
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	СправочникНоменклатура.ВидНоменклатуры.ОсобенностьУчета 
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументСсылка
	|	И СправочникНоменклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И 
	|	(  
	|	(СправочникНоменклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка) 
	|   	И СправочникНоменклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|   	И СправочникНоменклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы)
	|   	И СправочникНоменклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ)
	|   	И СправочникНоменклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
	|   	И СправочникНоменклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом)
	|   	И СправочникНоменклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме) 
	|   	И СправочникНоменклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Партнером) 
	|   	И СправочникНоменклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета))
	|	)
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриобретениеТоваровУслуг", ИмяДокумента);
	
	Если ИмяДокумента = "ПеремаркировкаТоваровИСМП" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Товары.Номенклатура", "Товары.НоваяНоменклатура");
	ИначеЕсли ИмяДокумента = "РасходныйОрдерНаТовары" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Товары", ".ОтгружаемыеТовары");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Товары", "." + ИмяТЧПодбор);		
	КонецЕсли; 		
	
	ТЗОсобенностьУчета = Запрос.Выполнить().Выгрузить();
	
	МассивОсобенностьУчета = Новый Массив;
	
	Если ТЗОсобенностьУчета.Количество() <> 0 Тогда
		
		Для каждого СтрокаТЗ Из ТЗОсобенностьУчета Цикл
			
			ТекущаяОсобенностьУчета = СтрокаТЗ.ОсобенностьУчета;
			
			Модуль_ИнтеграцияИСУТКлиентСервер = ОбщийМодуль("ИнтеграцияИСУТКлиентСервер");
			ТекущийВидПродукцииИС = Модуль_ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ТекущаяОсобенностьУчета);
			
			МассивОсобенностьУчета.Добавить(ТекущийВидПродукцииИС);	
		КонецЦикла; 
		
	Иначе
		МассивОсобенностьУчета.Добавить(Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	КонецЕсли;
	
	Возврат МассивОсобенностьУчета;
	
КонецФункции

Функция ПолучитьВидПродукцииИСПоМассивуТоваров(МассивТоваров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.ОсобенностьУчета КАК ОсобенностьУчета
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивСсылок)
	|	И Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка)
	|	И Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|	И Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы)
	|	И Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ)
	|	И Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
	|	И Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом)
	|	И Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме)
	|	И Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Партнером)
	|	И Номенклатура.ВидНоменклатуры.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.ОсобенностьУчета";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивТоваров);
	
	ТЗОсобенностьУчета = Запрос.Выполнить().Выгрузить();
	
	МассивОсобенностьУчета = Новый Массив;
	
	Если ТЗОсобенностьУчета.Количество() <> 0 Тогда
		
		Для каждого СтрокаТЗ Из ТЗОсобенностьУчета Цикл
			
			ТекущаяОсобенностьУчета = СтрокаТЗ.ОсобенностьУчета;
			
			Модуль_ИнтеграцияИСУТКлиентСервер = ОбщийМодуль("ИнтеграцияИСУТКлиентСервер");
			ТекущийВидПродукцииИС = Модуль_ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ТекущаяОсобенностьУчета);
			
			МассивОсобенностьУчета.Добавить(ТекущийВидПродукцииИС);	
		КонецЦикла; 
		
	Иначе
		МассивОсобенностьУчета.Добавить(Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	КонецЕсли;
	
	Возврат МассивОсобенностьУчета;  	
	
КонецФункции

Процедура ВнестиДанныеОСобранныхМарках(ДеревоМаркированнойПродукции, ПодобраннаяМаркируемаяПродукция, СтруктураСобранныхМарокИУпаковок, ВерхнийУровеньВНаличии = Ложь, ЭтоПриемка = Ложь, МассивНеизвестныхДляПриемки = Неопределено)
	
	Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	
	Для каждого Строка Из ДеревоМаркированнойПродукции.Строки Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = &ЗначениеШтрихкода
		|	И НЕ ШтрихкодыУпаковокТоваров.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ЗначениеШтрихкода", Строка.Представление);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекущийКМ = Выборка.Ссылка;	
		КонецЕсли;
				
		Если ВерхнийУровеньВНаличии Тогда
			
			Строка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			
			Если ЭтоПриемка Тогда
				ЗаполнитьДанныеПоСтрокамДляПриемки(ПодобраннаяМаркируемаяПродукция,Строка,ТекущийКМ);	
			КонецЕсли;	
			
		ИначеЕсли СтруктураСобранныхМарокИУпаковок.Короба.Найти(ТекущийКМ) <> Неопределено Тогда			
			
			Строка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			
			Если ЭтоПриемка И МассивНеизвестныхДляПриемки <> Неопределено Тогда
				Если МассивНеизвестныхДляПриемки.Найти(ТекущийКМ) <> Неопределено Тогда
					Строка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли СтруктураСобранныхМарокИУпаковок.Марки.Найти(ТекущийКМ) <> Неопределено Тогда
			
			Строка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			
			Если ЭтоПриемка Тогда
				ЗаполнитьДанныеПоСтрокамДляПриемки(ПодобраннаяМаркируемаяПродукция,Строка,ТекущийКМ);	
			КонецЕсли;
			
			Если ЭтоПриемка И МассивНеизвестныхДляПриемки <> Неопределено Тогда
				Если МассивНеизвестныхДляПриемки.Найти(ТекущийКМ) <> Неопределено Тогда
					Строка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Строка.Строки.Количество() <> 0 Тогда
			
			Если Строка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии Тогда
				ВнестиДанныеОСобранныхМарках(Строка, ПодобраннаяМаркируемаяПродукция, СтруктураСобранныхМарокИУпаковок, Истина, ЭтоПриемка, МассивНеизвестныхДляПриемки);
			Иначе
				ВнестиДанныеОСобранныхМарках(Строка, ПодобраннаяМаркируемаяПродукция, СтруктураСобранныхМарокИУпаковок, Ложь, ЭтоПриемка, МассивНеизвестныхДляПриемки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоСтрокамДляПриемки(ПодобраннаяМаркируемаяПродукция, Строка, ТекущийКМ)
	
	Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	
	Если Строка.Строки.Количество() = 0 Тогда 
		ЭтоУпрощенныйКМ = Ложь;
		Если Не ЗначениеЗаполнено(Строка.Номенклатура) И ЗначениеЗаполнено(ТекущийКМ.Номенклатура) Тогда
			Строка.Номенклатура = ТекущийКМ.Номенклатура;
			Строка.Характеристика = ТекущийКМ.Характеристика;
			Строка.Серия = ТекущийКМ.Серия;
			Строка.ПредставлениеСодержимоеУпаковки = Строка.Номенклатура.Наименование + ?(ЗначениеЗаполнено(Строка.Характеристика), " (" + Строка.Характеристика.Наименование + ")", "");		
			ЭтоУпрощенныйКМ = Истина;	
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Серия", Строка.Номенклатура, Строка.Характеристика, Строка.Серия);
		Если Не ЭтоУпрощенныйКМ Тогда
			СтруктураПоиска.Вставить("GTIN", Строка.GTIN);
		КонецЕсли;		
		
		НайденныеСтроки = ПодобраннаяМаркируемаяПродукция.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			
			Если ЭтоУпрощенныйКМ Тогда
				СтруктураПоискаУпрощенка = Новый Структура("GTIN, Номенклатура", Строка.GTIN, Справочники.Номенклатура.ПустаяСсылка());
				НайденныеСтрокиУпрощенка = ПодобраннаяМаркируемаяПродукция.НайтиСтроки(СтруктураПоискаУпрощенка);
				Если НайденныеСтрокиУпрощенка.Количество() > 0 Тогда
					
					НайденнаяСтрокаУпрощенка = НайденныеСтрокиУпрощенка[0];
					НайденнаяСтрокаУпрощенка.КоличествоИС = НайденнаяСтрокаУпрощенка.КоличествоИС - 1;
					
					НайденнаяСтрока.КоличествоИС = НайденнаяСтрока.КоличествоИС + 1;
					
				КонецЕсли;
			КонецЕсли;
			
			НайденнаяСтрока.КоличествоПодобрано = НайденнаяСтрока.КоличествоПодобрано + 1;
			Попытка 
				Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(НайденнаяСтрока);
			Исключение
				Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(НайденнаяСтрока, Неопределено);	
			КонецПопытки;
			
		КонецЕсли;			
	КонецЕсли;
		
КонецПроцедуры

Функция ПроверкаЕстьВМассивеСсылок(МассивСсылок, ПроверяемаяСтрока)
	
	Для каждого ЭлементМассива Из МассивСсылок Цикл
		
		Попытка 
			Если ЭлементМассива.ЗначениеШтрихкода = ПроверяемаяСтрока Тогда
				Возврат Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ()

Процедура СохранитьРезультатПроверкиДокумента(ПроверяемыйДокумент, РезультатПроверки, ВидПродукцииИСДокумента, ПараметрыШаблона = Неопределено)
	
	Попытка РезультатПроверки.СтрокаПродукцияБезУпаковки = Неопределено; Исключение КонецПопытки;
	Попытка РезультатПроверки.СтрокаПачкиБезБлока = Неопределено; Исключение КонецПопытки;
	Попытка РезультатПроверки.СтрокаБлокиБезКоробки = Неопределено; Исключение КонецПопытки;
	Попытка РезультатПроверки.СтрокаПродукцияОбъемноСортовойУчет = Неопределено; Исключение КонецПопытки;
	
	Если ЗначениеЗаполнено(ВидПродукцииИСДокумента) Тогда		
		РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.СохранитьПромежуточныеРезультатыПроверкиДокумента(
		ПроверяемыйДокумент.Ссылка,
		ВидПродукцииИСДокумента,
		Новый ХранилищеЗначения(РезультатПроверки));	
		
		УстановитьСтатусПроверкиВыполнена(ПроверяемыйДокумент, ПараметрыШаблона);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтатусПроверкиВыполнена(ПроверяемыйДокумент, ПараметрыШаблона)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.Выбрать(Новый Структура("Документ", ПроверяемыйДокумент.Ссылка));
	Выборка.Следующий();
	
	Попытка
		ЗавершатьПодборКМВДокументе = ПараметрыШаблона.МаркировкаЗавершатьПодборКМВДокументе;	
	Исключение
		ЗавершатьПодборКМВДокументе = Ложь;
	КонецПопытки;
	
	МенеджерЗаписи = Выборка.ПолучитьМенеджерЗаписи();
	
	СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется;
	
	Если ЗавершатьПодборКМВДокументе Тогда
		СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено;
		МенеджерЗаписи.ТребуемоеДействиеЭДО = Перечисления.ТребуемоеДействиеДокументЭДО.Подтвердить;
	КонецЕсли; 		 
	
	МенеджерЗаписи.СтатусПроверкиИПодбора = СтатусПроверкиИПодбора;
	МенеджерЗаписи.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьРезультатПроверкиДокумента(ПроверяемыйДокумент, Шаблон, ВидМаркируемойПродукцииДокумента, СтрокаОшибок)
	
	// Проверим ранее сохраненные данные, только для поступлений		
	Выборка = ВыборкаПоДаннымСтатусыПроверкиИПодбораДокументовИСМП(ПроверяемыйДокумент.Ссылка, ВидМаркируемойПродукцииДокумента);
	
	Если (Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг" Или Шаблон.ВидДокумента = "ПриемкаТоваровИСМП") И Выборка.Следующий() Тогда
		
		Возврат Выборка.ДанныеПроверкиИПодбора.Получить();
		
	Иначе
		
		//Табак		
		ЭтоТабак = ЭтоТабакПоВидыПродукцииИС(ВидМаркируемойПродукцииДокумента);
		
		Если Шаблон.МаркировкаПроверкаБезСертификатаИС Тогда
			Возврат ИнициализироватьДанныеПроверки(ПроверяемыйДокумент.Ссылка, ВидМаркируемойПродукцииДокумента,Шаблон,ЭтоТабак);
		КонецЕсли;
		
		Модуль_ИнтерфейсАвторизацииИСМПВызовСервера = ОбщийМодуль("ИнтерфейсАвторизацииИСМПВызовСервера");
		Модуль_ИнтерфейсИСМПКлиентСервер = ОбщийМодуль("ИнтерфейсИСМПКлиентСервер");
		Модуль_ИнтерфейсМОТПКлиентСервер = ОбщийМодуль("ИнтерфейсМОТПКлиентСервер");
		Модуль_ДлительныеОперации = ОбщийМодуль("ДлительныеОперации");
		Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
		
		Если Модуль_ИнтерфейсАвторизацииИСМПВызовСервера = Неопределено Тогда
			СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Конфигурация 1С не поддерживает работу с Маркировкой";		
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			Организация = ПроверяемыйДокумент.Организация;
		Исключение
			Попытка
				Организация = ПолучитьОрганизациюДляДокументовМаркировки(ПроверяемыйДокумент);	
			Исключение
			    Организация = Неопределено;
			КонецПопытки;
		КонецПопытки;
		
		Если ЭтоТабак Тогда		
			ТребуетсяОбновлениеКлючаСессии = Модуль_ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
			Модуль_ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
		Иначе
			ТребуетсяОбновлениеКлючаСессии = Модуль_ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
			Модуль_ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));	
		КонецЕсли;
		
		Если ТребуетсяОбновлениеКлючаСессии Тогда			
			СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Ошибка заполнения результатов проверки документа. Не получилось обновить ключ сессии. Проверьте настройки подключения к ИС";
			Возврат Неопределено;		
		Иначе
						
			ИдентификаторОперации = Новый УникальныйИдентификатор();
			
			ПараметрыВыполнения = Модуль_ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
			ПараметрыВыполнения.ЗапуститьВФоне = Истина;
			
			Если Модуль_ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
				ПараметрыВыполнения.ЗапуститьВФоне = Ложь;
				ПараметрыВыполнения.ЗапуститьНеВФоне = Истина;
			КонецЕсли;
			
			ПараметрыВыполнения.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторОперации);
						
			//Табак
			Если ЭтоТабак Тогда
				ПараметрыОперации = ПолучитьПараметрыМОТП(ПроверяемыйДокумент.Ссылка,ВидМаркируемойПродукцииДокумента,Шаблон);
				ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое заполнение данных проверки и подбора табачной продукции'");
				
				ДлительнаяОперация = Модуль_ДлительныеОперации.ВыполнитьВФоне(
				"Обработки.ПроверкаИПодборТабачнойПродукцииМОТП.ЗагрузитьДанныеДокументаДлительнаяОперация",
				ПараметрыОперации, ПараметрыВыполнения);		
			Иначе
				ПараметрыОперации = ПолучитьПараметрыИСМП(ПроверяемыйДокумент.Ссылка,ВидМаркируемойПродукцииДокумента,Шаблон);
				ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое заполнение данных проверки и подбора маркируемой продукции'");
				
				ДлительнаяОперация = Модуль_ДлительныеОперации.ВыполнитьВФоне(
				"Обработки.ПроверкаИПодборПродукцииИСМП.ЗагрузитьДанныеДокументаДлительнаяОперация",
				ПараметрыОперации, ПараметрыВыполнения);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДлительнаяОперация.ИдентификаторЗадания) Тогда
				Если Не ЗначениеЗаполнено(ДлительнаяОперация.АдресРезультата) Тогда
					СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Ошибка заполнения результатов проверки документа. Не получилось открыть форму проверки документа.";
					Возврат Неопределено;
				КонецЕсли;	
			Иначе		
				ОжидатьЗавершенияДлительнойОперации(ДлительнаяОперация.ИдентификаторЗадания);
			КонецЕсли;
			
			Возврат ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ()

Процедура ОжидатьЗавершенияДлительнойОперации(ИдентификаторЗадания)
	
	Модуль_ДлительныеОперации = ОбщийМодуль("ДлительныеОперации");
	
	Пока Истина Цикл
		
		Если Модуль_ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ВыборкаПоДаннымСтатусыПроверкиИПодбораДокументовИСМП(ПроверяемыйДокумент, ВидМаркируемойПродукцииДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыПроверкиИПодбораДокументовИСМП.ДанныеПроверкиИПодбора КАК ДанныеПроверкиИПодбора
	|ИЗ
	|	РегистрСведений.СтатусыПроверкиИПодбораДокументовИСМП КАК СтатусыПроверкиИПодбораДокументовИСМП
	|ГДЕ
	|	СтатусыПроверкиИПодбораДокументовИСМП.Документ = &Документ
	|	И СтатусыПроверкиИПодбораДокументовИСМП.ВидМаркируемойПродукции = &ВидМаркируемойПродукции";
	
	Запрос.УстановитьПараметр("ВидМаркируемойПродукции"	, ВидМаркируемойПродукцииДокумента);
	Запрос.УстановитьПараметр("Документ"				, ПроверяемыйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции	

#Область НовыйВариант
Функция ИнициализироватьДанныеПроверки(ПроверяемыйДокумент, ВидМаркируемойПродукцииДокумента, Шаблон, ЭтоТабак)
		
	ТекстОшибки = "";
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	
	РезультатПроверкиДокумента = Неопределено;
	Если РезультатыПроверкиУспешноСохранены(ПроверяемыйДокумент, РезультатПроверкиДокумента, ТекстОшибки, ВидМаркируемойПродукцииДокумента, Шаблон, ЭтоТабак) Тогда
		Возврат РезультатПроверкиДокумента;
	КонецЕсли;
	
	Модуль_ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	Возврат Неопределено;	
	
КонецФункции

Функция РезультатыПроверкиУспешноСохранены(ПроверяемыйДокумент, ДанныеРезультатовПроверки, ТекстОшибки, ВидМаркируемойПродукцииДокумента, Шаблон, ЭтоТабак)
	
	Попытка	
		Если ЭтоТабак Тогда
			ПараметрыДанных = ПолучитьПараметрыМОТП(ПроверяемыйДокумент, ВидМаркируемойПродукцииДокумента, Шаблон);
			ДанныеРезультатовПроверки = НачальныеДанныеДляРезультатовПроверкиМОТП(ПараметрыДанных);
		Иначе 
			ПараметрыДанных = ПолучитьПараметрыИСМП(ПроверяемыйДокумент, ВидМаркируемойПродукцииДокумента, Шаблон);
			ДанныеРезультатовПроверки = НачальныеДанныеДляРезультатовПроверкиИСМП(ПараметрыДанных);
		КонецЕсли;
	Исключение		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьОрганизациюДляДокументовМаркировки(ПроверяемыйДокумент)
	
	Модуль_ПроверкаИПодборПродукцииИСМППереопределяемый = ОбщийМодуль("ПроверкаИПодборПродукцииИСМППереопределяемый");
	Организация = Неопределено;
	
	Модуль_ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииОрганизации(ПроверяемыйДокумент, Организация);
	
	Возврат Организация;
	
КонецФункции

//ИСМП
Функция ПолучитьПараметрыИСМП(ПроверяемыйДокумент, ВидМаркируемойПродукцииДокумента, Шаблон)
	
	Модуль_ИнтеграцияИСМПКлиентСерверПовтИсп = ОбщийМодуль("ИнтеграцияИСМПКлиентСерверПовтИсп");
	Модуль_ШтрихкодированиеИС = ОбщийМодуль("ШтрихкодированиеИС");
	
	ПараметрыСканированияСервер = Модуль_ШтрихкодированиеИС.ПараметрыСканирования(ПроверяемыйДокумент,, ВидМаркируемойПродукцииДокумента);
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("ПроверкаНеПоДокументу"									, Ложь);                   
	ПараметрыОперации.Вставить("ПроверяемыйДокумент"									, ПроверяемыйДокумент);
	ПараметрыОперации.Вставить("НачальныйСтатусПроверки"								, Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась);
	ПараметрыОперации.Вставить("ДетализацияСтруктурыХранения"							, ПолучитьДетализацияСтруктурыХранения(Шаблон));
	ПараметрыОперации.Вставить("РежимПроверки"											, Перечисления.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены);
	ПараметрыОперации.Вставить("РедактированиеФормыНедоступно"							, Ложь);
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		ПараметрыОперации.Вставить("РежимПодбораСуществующихУпаковок"					, Ложь);
	Иначе	
		ПараметрыОперации.Вставить("РежимПодбораСуществующихУпаковок"					, Истина);
	КонецЕсли;
	
	ПараметрыОперации.Вставить("ПараметрыСканирования"									, ПолучитьПараметрыСканированияИСПМ(ПроверяемыйДокумент, ВидМаркируемойПродукцииДокумента, Шаблон));
	ПараметрыОперации.Вставить("ПараметрыПроверкиКодовМаркировки"						, ПолучитьПараметрыПроверкиКодовМаркировкиИСМП(ПроверяемыйДокумент, Шаблон));
	ПараметрыОперации.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию"	, Ложь);
	ПараметрыОперации.Вставить("ПроверкаЭлектронногоДокумента"							, Ложь);
	ПараметрыОперации.Вставить("ВидМаркируемойПродукции"								, ВидМаркируемойПродукцииДокумента);
	ПараметрыОперации.Вставить("ВозможностьЗагрузкиДанныхБезПодключенияМОТП"			, Истина);
	ПараметрыОперации.Вставить("ЭтоВосстановлениеДетализации"							, Ложь);
	
	ПараметрыОперации.Вставить("РежимИсправленияОшибокПослеПередачиКодов"				, Ложь);
	
	Попытка
		ПараметрыОперации.Вставить("ПоддерживаетсяОбъемноСортовойУчет"					, Модуль_ИнтеграцияИСМПКлиентСерверПовтИсп.ВидПродукцииПоддерживаетОбъемноСортовойУчет(ВидМаркируемойПродукцииДокумента) И ПараметрыСканированияСервер.ПоддерживаетсяОбъемноСортовойУчет);	
	Исключение
		ПараметрыОперации.Вставить("ПоддерживаетсяОбъемноСортовойУчет"                  , Ложь);
	КонецПопытки; 
	
	Попытка ПараметрыОперации.Вставить("ДанныеКлючаСессииИСМП", ПараметрыСеанса.ДанныеКлючаСессииИСМП); Исключение КонецПопытки;
	
	Возврат ПараметрыОперации;
	
КонецФункции

Функция ПолучитьПараметрыСканированияИСПМ(ПроверяемыйДокумент, ВидМаркируемойПродукцииДокумента, Шаблон, ПараметрыСканирования = Неопределено, ИзСервиса = Ложь, ВызовИзАРМ = Ложь)
	
	Модуль_НоменклатураСервер = ОбщийМодуль("НоменклатураСервер");
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = Новый Структура();	
	КонецЕсли; 
	
	ПроверкаБезСертификатаИС 	= Шаблон.МаркировкаПроверкаБезСертификатаИС;
	ВидДокумента				= Шаблон.ВидДокумента;
	
	ПараметрыСканирования.Вставить("ДопустимыеВидыПродукции", Новый Массив);
	ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
	
	Попытка	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидМаркируемойПродукцииДокумента); Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("СоздаватьШтрихкодУпаковки"                      , Ложь);
	ПараметрыСканирования.Вставить("КэшМаркируемойПродукции"                        , Неопределено);
	ПараметрыСканирования.Вставить("ДанныеВыбораПоМаркируемойПродукции"             , Неопределено);
	ПараметрыСканирования.Вставить("ИспользуютсяДанныеВыбораПоМаркируемойПродукции" , Истина);
	ПараметрыСканирования.Вставить("ВозможнаЗагрузкаТСД"                            , Истина);
	ПараметрыСканирования.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева"  , Ложь);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИС"         , Истина);
	ПараметрыСканирования.Вставить("ЗаписыватьНеизвестныеШтрихкодыУпаковок"         , Ложь);
	ПараметрыСканирования.Вставить("ДоступнаПечатьЭтикеток"                         , Ложь);
	ПараметрыСканирования.Вставить("Детализация"                         			, Неопределено);
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения"                   , ПолучитьДетализацияСтруктурыХранения(Шаблон));
	
	// Если делаем вызов из АРМ, то всегда запрашиваем содержимое упаковок
	Если ВызовИзАРМ Тогда
		ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыИСМП"							, Истина);
		ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП"		, Истина);		
	Иначе
		Если ПроверкаБезСертификатаИС Тогда
			ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыИСМП"							, Ложь);
			ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП"		, Ложь);
		Иначе
			ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыИСМП"							, Истина);
			ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП"		, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСканирования.Вставить("ЗапрашиватьСпособВводаВОборот"					, Ложь);
	ПараметрыСканирования.Вставить("СтатусКодаМаркировкиПоУмолчанию"				, Неопределено);
	ПараметрыСканирования.Вставить("СсылкаНаОбъект"									, Неопределено);
	ПараметрыСканирования.Вставить("РазрешенаОбработкаКодовСПустойНоменклатурой"	, Ложь);
	ПараметрыСканирования.Вставить("СопоставлятьНоменклатуру"						, Ложь);
	ПараметрыСканирования.Вставить("Организация"									, Неопределено);
	
	Попытка ПараметрыСканирования.Организация = ПроверяемыйДокумент.Организация; Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("ПараметрыУказанияСерий"							, Неопределено);
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда		
		ПараметрыУказанияСерийФикс = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(ПроверяемыйДокумент, Документы[ПроверяемыйДокумент.Метаданные().Имя]));
		ПараметрыУказанияСерий = Новый Структура(ПараметрыУказанияСерийФикс);
		
		ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "";
		ПараметрыУказанияСерий.ИмяТЧТовары       = "ПодобраннаяМаркируемаяПродукция";
		ПараметрыУказанияСерий.ИмяТЧСерии        = "ПодобраннаяМаркируемаяПродукция";
		ПараметрыУказанияСерий.ИмяПоляКоличество = "Количество";
		ПараметрыУказанияСерий.ИмяПоляПомещение  = Неопределено;
		ПараметрыУказанияСерий.ПоляСвязи.Добавить("Серия");
		ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("КоличествоПодобрано");
		
		ПараметрыСканирования.Вставить("ПараметрыУказанияСерий" , ПараметрыУказанияСерий);
	КонецЕсли;
	
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокИСМП"					, Ложь);
	ПараметрыСканирования.Вставить("ЗаполнятьДанныеВЕТИС"							, Ложь);
	
	Модуль_ИнтеграцияИСВызовСервера = ОбщийМодуль("ИнтеграцияИСВызовСервера");
	
	Попытка
		Если ВидДокумента = "ПриобретениеТоваровУслуг" Тогда
			ИННВладельца = Модуль_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПроверяемыйДокумент.Контрагент).ИНН;
			Владелец     = ПроверяемыйДокумент.Контрагент;
		Иначе
			ИННВладельца = Модуль_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПроверяемыйДокумент.Организация).ИНН;
			Владелец     = ПроверяемыйДокумент.Организация;			
		КонецЕсли;
	Исключение
		Попытка
			Организация = ПолучитьОрганизациюДляДокументовМаркировки(ПроверяемыйДокумент);
			ИННВладельца = Модуль_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация).ИНН;
			Владелец     = Организация;
		Исключение
			ИННВладельца = "";
			Владелец     = Неопределено;
			ПараметрыСканирования.Вставить("КонтролироватьВладельцевКодовМаркировкиИСМП", Ложь);
		КонецПопытки;		
	КонецПопытки;	
	
	ПараметрыСканирования.Вставить("Владелец"												, Владелец);
	ПараметрыСканирования.Вставить("ИННВладельца"											, ИННВладельца);	
	ПараметрыСканирования.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок"						, "ШтрихкодыУпаковок");
	ПараметрыСканирования.Вставить("ИмяКолонкиШтрихкодУпаковки"								, "ШтрихкодУпаковки");
	ПараметрыСканирования.Вставить("ОтборПоВидуПродукции"									, Истина);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПула"							, Ложь);	
	ПараметрыСканирования.Вставить("ДополнительныеВариантыСопоставленияНоменклатуры"		, Новый Массив());	
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулИСМП"						, Ложь);	
	ПараметрыСканирования.Вставить("ЗаполнятьСрокГодности"									, Ложь);
	ПараметрыСканирования.Вставить("КонтролироватьОкончаниеСрокаГодности"					, Ложь);	
	ПараметрыСканирования.Вставить("ТолькоМаркируемаяПродукция"								, Ложь);	
	ПараметрыСканирования.Вставить("ЭтоПроверкаКодовМаркировкиИСМП"							, Ложь);
	ПараметрыСканирования.Вставить("ЭтоАгрегацияКодовМаркировки"							, Ложь);
	ПараметрыСканирования.Вставить("ЭтоАгрегацияКодовМаркировкиИСМП"						, Ложь);	
	ПараметрыСканирования.Вставить("ОпределениеВидаПродукцииИСМП"							, Ложь);	
	ПараметрыСканирования.Вставить("ЗаписыватьЛогЗапросовИСМП"								, Ложь);	
	ПараметрыСканирования.Вставить("Склад"													, Справочники.Склады.ПустаяСсылка());
	Попытка ПараметрыСканирования.Склад = ПроверяемыйДокумент.Склад; Исключение КонецПопытки;	
	ПараметрыСканирования.Вставить("КэшированныеЗначения"									, Неопределено);	
	ПараметрыСканирования.Вставить("ДополнительныеПараметры"								, Новый Структура());
	
	ДопустимыеСтатусыКодовМаркировки = Новый Массив;	
	ДопустимыеСтатусыУпаковок = Новый Массив;        
	
	ЗаполнитьПоВидуДокументаДопустимыеСтатусыИСМП(Шаблон, ДопустимыеСтатусыКодовМаркировки, ДопустимыеСтатусыУпаковок);
	
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыИСМП"									, ДопустимыеСтатусыКодовМаркировки);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыУпаковокИСМП"							, ДопустимыеСтатусыКодовМаркировки);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыКодовМаркировки"						, ДопустимыеСтатусыКодовМаркировки);	
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеСервисаИСМП"							, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьСтатусыКодовМаркировки"					, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьВладельцевКодовМаркировки"				, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьСтатусыКодовМаркировкиИСМП"				, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьВладельцевКодовМаркировкиИСМП"			, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("ПроверятьСтруктуруКодовМаркировки"						, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("РазрешеноЗапрашиватьКодМаркировки"						, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьВладельца"								, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП"	, Не ПроверкаБезСертификатаИС);	
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулИСМП"						, Ложь);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПулаИСМП"						, Ложь);
	ПараметрыСканирования.Вставить("КонтрольРасхожденийСДокументомОснованием"				, Ложь);	
	ПараметрыСканирования.Вставить("ВыполняетсяЗагрузкаДанныхВФормуПроверкиИПодбораИСМП"	, Истина);
	ПараметрыСканирования.Вставить("ВидОперацииИСМП"										, Неопределено);
	ПараметрыСканирования.Вставить("ЭтоОтчетПроизводственнойЛинии"							, Ложь);	
	ПараметрыСканирования.Вставить("ЭтоМаркировкаОстатков"									, Неопределено);
	Попытка ПараметрыСканирования.Вставить("ДатаДокумента", ПроверяемыйДокумент.Дата); Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("СозданиеНаборов"										, Ложь);
	ПараметрыСканирования.Вставить("ПоддерживаетсяОбъемноСортовойУчет"						, Ложь);
	ПараметрыСканирования.Вставить("ТребуетсяЧастичноеВыбытие"                   			, Ложь);
	ПараметрыСканирования.Вставить("ТребуетсяПроверкаСредствамиККТ"                   		, Ложь);
	
	Если ВидДокумента = "МаркировкаТоваровИСМП" Тогда
		ПараметрыСканирования.Вставить("КонтрольПустыхУпаковок"									, Ложь);
		ПараметрыСканирования.Вставить("ПоддерживаютсяОперацииАгрегации"						, Ложь);
		ПараметрыСканирования.Вставить("КонтролироватьСтандартнуюВложенность"					, Ложь);
		ПараметрыСканирования.Вставить("ДокументОснование"                                      , Неопределено);
		ПараметрыСканирования.Вставить("ДопустимыйСпособВводаВОборот"							, Неопределено);
		ПараметрыСканирования.Вставить("ЗапрашиватьКоличествоМерногоТовара"                    	, Ложь);
	
		ЗаполнитьПараметрыСканированияМаркировкаТоваров(ПроверяемыйДокумент, ПараметрыСканирования);		
	КонецЕсли;
	
	ПараметрыСканирования.Вставить("ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ", Неопределено);
	ПараметрыСканирования.Вставить("ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ",          Неопределено);
	
	Возврат ПараметрыСканирования;
	
КонецФункции // ()

// Дополняются свойства параметров сканирования и заполняются значения для документа "Маркировка товаров ИСМП".
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка - Контекст.
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
//  ПараметрыРежимаИсправленияОшибок - Структура - Параметры режима исправления ошибок.
Процедура ЗаполнитьПараметрыСканированияМаркировкаТоваров(Контекст, ПараметрыСканирования, ПараметрыРежимаИсправленияОшибок = Неопределено)
	
	Модуль_ОбщегоНазначенияКлиентСервер 			= ОбщийМодуль("ОбщегоНазначенияКлиентСервер");
	Модуль_ШтрихкодированиеИСМПКлиентСервер 		= ОбщийМодуль("ШтрихкодированиеИСМПКлиентСервер");
	Модуль_ИнтеграцияИСМПСлужебныйКлиентСервер  	= ОбщийМодуль("ИнтеграцияИСМПСлужебныйКлиентСервер");
	Модуль_ИнтеграцияИСМПВЕТИСКлиентСервер			= ОбщийМодуль("ИнтеграцияИСМПВЕТИСКлиентСервер");
	Модуль_ИнтеграцияИСМПКлиентСерверПовтИсп     	= ОбщийМодуль("ИнтеграцияИСМПКлиентСерверПовтИсп");
	
	Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	ВидПродукции = ИсточникДанных.ВидПродукции;
	Операция     = ИсточникДанных.Операция;
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	
	ПараметрыСканирования.СозданиеНаборов = Истина;
	
	Если Не Модуль_ШтрихкодированиеИСМПКлиентСервер.ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования, ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступнаПечатьЭтикеток = (ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха"));
	
	ПараметрыСканирования.ДоступнаПечатьЭтикеток                         = ДоступнаПечатьЭтикеток;
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
	ПараметрыСканирования.ТолькоМаркируемаяПродукция                     = Истина;
	ПараметрыСканирования.КонтрольПустыхУпаковок                         = Ложь;
	ПараметрыСканирования.ПоддерживаютсяОперацииАгрегации                = Истина;
	ПараметрыСканирования.КонтролироватьСтандартнуюВложенность           = Ложь;
	
	ПараметрыСканирования.КонтрольРасхожденийСДокументомОснованием       = Истина;
	ПараметрыСканирования.ВозможнаЗагрузкаТСД                            = Истина;
	ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой    = Истина;
	
	ПараметрыСканирования.Организация       = ИсточникДанных.Организация;
	ПараметрыСканирования.Владелец          = ИсточникДанных.Организация;
	ПараметрыСканирования.ДокументОснование = ИсточникДанных.ДокументОснование;
	
	ОперацииМаркировки = Модуль_ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Операция);
	ЭтоВводВОборотИмпортСФТС = (Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС"));
	ЭтоЗаполнениеДекларацииПоКодамУпаковок = (ЭтоВводВОборотИмпортСФТС
	И ИсточникДанных.ВариантВыполненияАгрегации = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок"));
	ЭтоАгрегацияПередВводомВОборот = (Не ЭтоВводВОборотИмпортСФТС
	И ИсточникДанных.ВариантВыполненияАгрегации = ПредопределенноеЗначение("Перечисление.ВариантыВыполненияАгрегацииИСМП.ПередВводомВОборот"));
	ПрисутствуетОперацияНанесения = ОперацииМаркировки.ЭтоОперацияНанесения Или ЗначениеЗаполнено(ИсточникДанных.ОперацияНанесения);
	
	// Для обогащения информации об ошибке при выводе пользователю
	ПараметрыСканирования.ВидОперацииИСМП = Операция;
	
	ПараметрыСканирования.ДопустимыйСпособВводаВОборот =
	Модуль_ШтрихкодированиеИСМПКлиентСервер.СпособВводаВОборотСУЗПоВидуОперации(Операция);
	
	ДальнейшееДействие = Неопределено;
	Если ПараметрыРежимаИсправленияОшибок <> Неопределено Тогда
		ДальнейшееДействие = ПараметрыРежимаИсправленияОшибок.ДальнейшееДействие;
	КонецЕсли;
	
	Если ОперацииМаркировки.ЭтоАгрегация Тогда
		ПараметрыСканирования.ЭтоАгрегацияКодовМаркировкиИСМП = Истина;
	КонецЕсли;
	
	Если ОперацииМаркировки.ЭтоМаркировкаОстатков Тогда
		ПараметрыСканирования.ЭтоМаркировкаОстатков = Истина;
	Иначе
		ПараметрыСканирования.ЭтоМаркировкаОстатков = Ложь;
	КонецЕсли;
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха")
		И ОперацииМаркировки.ЭтоПриемкаКИЗ Тогда
		ПараметрыСканирования.СопоставлятьНоменклатуру = Ложь;
	КонецЕсли;
	
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(Неопределено);
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Неопределен"));
	
	Если Не ОперацииМаркировки.ЭтоАгрегация
		И (ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию")
		Или ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегациюСИсправлениями")) Тогда
		
		Если ЭтоЗаполнениеДекларацииПоКодамУпаковок Или ЭтоАгрегацияПередВводомВОборот Тогда
			
			ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
			ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
			
		Иначе
			
			ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
			ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
			
		КонецЕсли;
		
	ИначеЕсли ОперацииМаркировки.ЭтоАгрегация Тогда
		
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		
		Если ПараметрыСканирования.ДопустимыеСтатусыНаборовИСМП = Неопределено Тогда
			ПараметрыСканирования.ДопустимыеСтатусыНаборовИСМП = Новый Массив;
		КонецЕсли;
		
		ПараметрыСканирования.ДопустимыеСтатусыНаборовИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
		
	ИначеЕсли ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанныеСИсправлениями") Тогда
		
		Если ИсточникДанных.ОперацияНанесенияТолькоДляНаборов Тогда
			
			Если ПараметрыСканирования.ДопустимыеСтатусыНаборовИСМП = Неопределено Тогда
				ПараметрыСканирования.ДопустимыеСтатусыНаборовИСМП = Новый Массив;
			КонецЕсли;
			
			ПараметрыСканирования.ДопустимыеСтатусыНаборовИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
			
			ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
			
		Иначе
			
			Если ЭтоЗаполнениеДекларацииПоКодамУпаковок Или ЭтоАгрегацияПередВводомВОборот Тогда
				ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
			КонецЕсли;
			
			ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
			
		КонецЕсли;
		
	Иначе
		
		Если ИсточникДанных.ОперацияНанесенияТолькоДляНаборов Тогда
			
			Если ПараметрыСканирования.ДопустимыеСтатусыНаборовИСМП = Неопределено Тогда
				ПараметрыСканирования.ДопустимыеСтатусыНаборовИСМП = Новый Массив;
			КонецЕсли;
			
			ПараметрыСканирования.ДопустимыеСтатусыНаборовИСМП.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован"));
			
			ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
			
		Иначе
			
			Если ПрисутствуетОперацияНанесения Или ОперацииМаркировки.ЭтоПриемкаКИЗ Тогда
				
				ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
				ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован"));
				ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
				ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован"));
				
				Если ОперацииМаркировки.ЭтоПриемкаКИЗ Тогда
					ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
					ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.НеИндивидуализирован"));
					ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
					ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Индивидуализирован"));
				КонецЕсли;
				
			Иначе
				ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
				ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
				ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
				ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОперацииМаркировки.ЭтоИмпортСФТС Тогда
			ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетПодтверждениеФТС"));
			ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетПодтверждениеФТС"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Модуль_ИнтеграцияИСМПВЕТИСКлиентСервер.ДополнитьПараметрыСканированияМаркировкаТоваров(Операция, ПараметрыСканирования);
	КонецЕсли;
	
	Если ПрисутствуетОперацияНанесения Тогда
		
		Попытка ПараметрыСканирования.ОперацияНанесенияТолькоДляНаборов = ИсточникДанных.ОперацияНанесенияТолькоДляНаборов; Исключение КонецПопытки;
		ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП   = Истина;
		Попытка ПараметрыСканирования.ТребоватьПолныйКодМаркировкиИСМП  = Истина; Исключение КонецПопытки;
		
		Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы") Тогда
			ПараметрыСканирования.ЗаполнятьСрокГодности = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Модуль_ШтрихкодированиеИСМПКлиентСервер.НастроитьПараметрыСканированияПоРаздельномуКонтролю(ПараметрыСканирования, ВидПродукции);
	
	ПараметрыСканирования.ИндивидуализироватьКИЗ = ОперацииМаркировки.ЭтоИндивидуализацияКИЗ
	Или ИсточникДанных.ОперацияНанесения = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ИндивидуализацияКИЗ");
	
	Если ПрисутствуетОперацияНанесения Тогда
		ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара = Истина;
	Иначе
		ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара = Модуль_ИнтеграцияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки().ЗапрашиватьКоличествоМерногоТовара;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыПроверкиКодовМаркировкиИСМП(ПроверяемыйДокумент, Шаблон)
	ПараметрыПроверкиКодовМаркировки = Новый Структура();
	
	ПроверкаБезСертификатаИС = Шаблон.МаркировкаПроверкаБезСертификатаИС;
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ОтсутствуетПодключениеИСМП", Ложь);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтатусыКодовМаркировки"		, Не ПроверкаБезСертификатаИС);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтатусыКодовМаркировкиИСМП"	, Не ПроверкаБезСертификатаИС);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельцевКодовМаркировкиИСМП"	, Не ПроверкаБезСертификатаИС);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельцевКодовМаркировки"		, Не ПроверкаБезСертификатаИС);
	ПараметрыПроверкиКодовМаркировки.Вставить("ЗапрашиватьДанныеСервиса"					, Не ПроверкаБезСертификатаИС);
	ПараметрыПроверкиКодовМаркировки.Вставить("ЗапрашиватьДанныеСервисаИСМП"				, Не ПроверкаБезСертификатаИС);	
	
	Модуль_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	Модуль_ИнтеграцияИСВызовСервера = ОбщийМодуль("ИнтеграцияИСВызовСервера");
	
	Попытка
		Если Шаблон.ВидДокумента = "ПриобретениеТоваровУслуг" Тогда
			ИННВладельца = Модуль_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПроверяемыйДокумент.Контрагент).ИНН;
			Владелец     = ПроверяемыйДокумент.Контрагент;
		Иначе
			ИННВладельца = Модуль_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПроверяемыйДокумент.Организация).ИНН;
			Владелец     = ПроверяемыйДокумент.Организация;			
		КонецЕсли;
		ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельца", Истина);
	Исключение
		Попытка
			Организация = ПолучитьОрганизациюДляДокументовМаркировки(ПроверяемыйДокумент);
			ИННВладельца = Модуль_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация).ИНН;
			Владелец     = Организация;
			ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельца", Истина);
		Исключение
			ИННВладельца = "";
			Владелец     = Неопределено;
			ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельца", Ложь);
			ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельцевКодовМаркировкиИСМП", Ложь);
		КонецПопытки;
	КонецПопытки;	
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ИННВладельца"		, ИННВладельца);
	ПараметрыПроверкиКодовМаркировки.Вставить("Владелец"			, Владелец);
	ПараметрыПроверкиКодовМаркировки.Вставить("ОбратноеСканирование", Ложь);
	
	ДопустимыеСтатусыКодовМаркировки = Новый Массив;	
	ДопустимыеСтатусыУпаковок = Новый Массив;
	
	ЗаполнитьПоВидуДокументаДопустимыеСтатусыИСМП(Шаблон, ДопустимыеСтатусыКодовМаркировки, ДопустимыеСтатусыУпаковок);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыИСМП"								, ДопустимыеСтатусыКодовМаркировки);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыУпаковокИСМП"						, ДопустимыеСтатусыКодовМаркировки);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыКодовМаркировки"					, ДопустимыеСтатусыКодовМаркировки);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыУпаковок"							, ДопустимыеСтатусыКодовМаркировки);	
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыйСпособВводаВОборот"						, Новый Массив);	
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВложенностьУпаковок"					, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеВложенияАгрегатов"							, Неопределено);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСоставАгрегатаПриИзмененииСтрокиДерева", Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтандартнуюВложенность"				, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСоставАгрегата"						, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ЗапрашиватьКоличествоМерногоТовара"					, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("РежимИсправленияОшибокПослеПередачиКодов"			, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыНаборов"							, Неопределено);
	
	Возврат ПараметрыПроверкиКодовМаркировки;
	
КонецФункции // ()

Процедура ЗаполнитьПоВидуДокументаДопустимыеСтатусыИСМП(Шаблон, ДопустимыеСтатусыИСМП, ДопустимыеСтатусыУпаковокИСМП)
	
	ВидДокумента = Шаблон.ВидДокумента;
	ВидДокументаНового = Шаблон.ВидДокументаНового;
	
	Если ВидДокумента = "ПриобретениеТоваровУслуг" Или ВидДокумента = "ПриемкаТоваровИСМП" Тогда
		
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
	ИначеЕсли ВидДокумента = "МаркировкаТоваровИСМП" Тогда
		
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетПодтверждениеФТС"));
		
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Неопределен"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Неопределен"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетПодтверждениеФТС"));
		
	ИначеЕсли ВидДокумента = "ЧекККМВозврат" Или ВидДокументаНового = "ЧекККМВозврат" Тогда
		
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		
	ИначеЕсли ВидДокумента = "ВозвратТоваровОтКлиента" Или ВидДокументаНового = "ВозвратТоваровОтКлиента" Тогда
				
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПоДоговоруРассрочки"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПоДоговоруРассрочки"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
	Иначе
		
		//Отгрузка		
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
	КонецЕсли;
		
КонецПроцедуры 

Функция НачальныеДанныеДляРезультатовПроверкиИСМП(ПараметрыДанных)
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ДеревоМаркированнойПродукции",          					ДеревоМаркированнойПродукции_ИСМП());
	ДанныеДокумента.Вставить("ПодобраннаяМаркируемаяПродукция",       					ПодобраннаяМаркируемаяПродукция_ИСМП());
	ДанныеДокумента.Вставить("ПараметрыПроверкиКодовМаркировки",      					ПараметрыДанных.ПараметрыПроверкиКодовМаркировки);
	ДанныеДокумента.Вставить("КоличествоНедопустимыхКодовМаркировки", 					0);
	ДанныеДокумента.Вставить("УпаковкиДокумента",                     					Новый СписокЗначений());
	ДанныеДокумента.Вставить("ДетализацияСтруктурыХранения",          					ПараметрыДанных.ДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("РежимПроверки",                         					ПараметрыДанных.РежимПроверки);
	ДанныеДокумента.Вставить("ДобавленныеУпаковки",                   					Новый СписокЗначений());
	ДанныеДокумента.Вставить("ДоступныеДляПроверкиУпаковки",          					Новый СписокЗначений());
	ДанныеДокумента.Вставить("СледующийСтикерОтложено",               					1);
	ДанныеДокумента.Вставить("СодержимоеУпаковокНедоступно",          					Ложь);
	ДанныеДокумента.Вставить("СохраненВыборПоМаркируемойПродукции",   					Ложь);
	ДанныеДокумента.Вставить("ДанныеВыбораПоМаркируемойПродукции",    					Неопределено);
	ДанныеДокумента.Вставить("ШтрихкодТекущейПроверяемойУпаковки",    					"");
	ДанныеДокумента.Вставить("ШтрихкодыУпаковок",                    					Новый СписокЗначений());
	ДанныеДокумента.Вставить("ДанныеРанееСгенерированныхШтрихкодов",  					Неопределено);	
	ДанныеДокумента.Вставить("КоличествоПоДокументуСУчетомВидаПродукции", 				Неопределено);
	ДанныеДокумента.Вставить("Контейнер",                             					Неопределено);	
	
	//нужны для первоначального получения данных	
	ДанныеДокумента.Вставить("НачальныйСтатусПроверки",               					ПараметрыДанных.НачальныйСтатусПроверки);
	ДанныеДокумента.Вставить("РежимПодбораСуществующихУпаковок",      					ПараметрыДанных.РежимПодбораСуществующихУпаковок);
	ДанныеДокумента.Вставить("ПроверкаЭлектронногоДокумента",         					ПараметрыДанных.ПроверкаЭлектронногоДокумента);
	ДанныеДокумента.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", 	ПараметрыДанных.КонтролироватьСканируемуюПродукциюПоДокументуОснованию);
	ДанныеДокумента.Вставить("СохраненнаяДетализацияСтруктурыХранения", 				ПараметрыДанных.ДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("СтрокаПродукцияБезУпаковки",   							Неопределено);
	ДанныеДокумента.Вставить("СтрокаБлокиБезКоробки",        							Неопределено);
	ДанныеДокумента.Вставить("Организация",                	 							ПараметрыДанных.ПараметрыСканирования.Организация);
	ДанныеДокумента.Вставить("ПроверяемыйДокумент",          							ПараметрыДанных.ПроверяемыйДокумент);
	ДанныеДокумента.Вставить("СтрокаПродукцияОбъемноСортовойУчет", 						Неопределено);
	ДанныеДокумента.Вставить("ПоддерживаетсяОбъемноСортовойУчет",       				ПараметрыДанных.ПоддерживаетсяОбъемноСортовойУчет);
	ДанныеДокумента.Вставить("ВидМаркируемойПродукции",      							ПараметрыДанных.ВидМаркируемойПродукции);
	ДанныеДокумента.Вставить("КешЛогистическихУпаковок",     							Новый Соответствие);
	ДанныеДокумента.Вставить("ЗначенияШтрихкодовОбработанныхСОшибками", 				Новый Массив);
	ДанныеДокумента.Вставить("ОшибкиПроверкиСредствамиККТ",
	РегистрыСведений.РезультатыПроверкиСредствамиККТИСМП.ДанныеРезультатовПроверкиДляПроверкиИПодбора(
	ПараметрыДанных.ПроверяемыйДокумент,
	ПараметрыДанных.ВидМаркируемойПродукции));
	
	Модуль_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	
	ТаблицаМаркируемойПродукции = Модуль_ПроверкаИПодборПродукцииИСМП.ТаблицаМаркируемойПродукцииДокумента(
	ПараметрыДанных.ПроверяемыйДокумент, ПараметрыДанных.ВидМаркируемойПродукции);
	
	Если ТипЗнч(ПараметрыДанных.ПроверяемыйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ДополнитьДаннымиТаблицаМаркируемойПродукции(ТаблицаМаркируемойПродукции, ПараметрыДанных.ПроверяемыйДокумент);	
	КонецЕсли;	
	
	ЗаполнитьТаблицуПодобраннойМаркируемойПродукции_ИСМП(ТаблицаМаркируемойПродукции, ДанныеДокумента);
	
	ПараметрыСканирования = ПараметрыДанных.ПараметрыСканирования;
	ПараметрыСканирования.СсылкаНаОбъект = ПараметрыДанных.ПроверяемыйДокумент;
	
	Модуль_ШтрихкодированиеИСМПСлужебный = ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
	Модуль_ШтрихкодированиеИСМП = ОбщийМодуль("ШтрихкодированиеИСМП");
	
	Попытка
		РезультатПолученияДанных = Модуль_ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыУпаковокПоДокументу(
		ПараметрыДанных.ПроверяемыйДокумент, ПараметрыСканирования.Детализация, ПараметрыСканирования);
	Исключение
		Попытка
			РезультатПолученияДанных = Модуль_ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыУпаковокПоДокументу(
			ПараметрыДанных.ПроверяемыйДокумент, ПараметрыСканирования, Ложь);	
		Исключение
			РезультатПолученияДанных = Модуль_ШтрихкодированиеИСМП.ВложенныеШтрихкодыУпаковокПоДокументу(
			ПараметрыДанных.ПроверяемыйДокумент,
			ПараметрыСканирования, Истина);
		КонецПопытки; 		
	КонецПопытки;
	
	Если РезультатПолученияДанных.ЕстьОшибки Тогда
		ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
	КонецЕсли;
	
	ДанныеПроверяемогоДокумента = РезультатПолученияДанных.ВложенныеШтрихкоды;	
	ЗаполнитьТаблицуКоличествоПоДокументуСУчетомВидаПродукции_ИСМП(ДанныеДокумента, ПараметрыДанных.ВидМаркируемойПродукции);
	ДополнитьТаблицуПодобраннойМаркируемойПродукции_ИСМП(
	ДанныеПроверяемогоДокумента, ДанныеДокумента, ПараметрыДанных.ВидМаркируемойПродукции,  ПараметрыДанных.ПараметрыСканирования);	
	ЗаполнитьДеревоМаркированнойПродукции_ИСМП(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента, ПараметрыСканирования);	
	ЗаполнитьСписокШтрихкодыУпаковок_ИСМП(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента.ШтрихкодыУпаковок);
	
	///НУЖНЫЙ РЕЗУЛЬТАТ			
	РезультатыСканированияМаркируемойПродукции = Новый Структура;
	РезультатыСканированияМаркируемойПродукции.Вставить("ДеревоМаркированнойПродукции",          ДанныеДокумента.ДеревоМаркированнойПродукции); //Тип("ДеревоЗначений")
	РезультатыСканированияМаркируемойПродукции.Вставить("ПодобраннаяМаркируемаяПродукция",       ДанныеДокумента.ПодобраннаяМаркируемаяПродукция); //Тип("ТаблицаЗначений")
	РезультатыСканированияМаркируемойПродукции.Вставить("ПараметрыПроверкиКодовМаркировки",      ДанныеДокумента.ПараметрыПроверкиКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("КоличествоНедопустимыхКодовМаркировки", ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("УпаковкиДокумента",                     ДанныеДокумента.УпаковкиДокумента);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДетализацияСтруктурыХранения",          ДанныеДокумента.ДетализацияСтруктурыХранения);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДобавленныеУпаковки",                   ДанныеДокумента.ДобавленныеУпаковки);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДоступныеДляПроверкиУпаковки",          ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	РезультатыСканированияМаркируемойПродукции.Вставить("ШтрихкодыУпаковок",                     ДанныеДокумента.ШтрихкодыУпаковок);
	
	Возврат РезультатыСканированияМаркируемойПродукции;
		
КонецФункции

Процедура ДополнитьДаннымиТаблицаМаркируемойПродукции(ТаблицаМаркируемойПродукции, ПроверяемыйДокумент)
	
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	
	ТаблицаМаркируемойПродукции.Колонки.Добавить("СтатусУказанияСерий");
	ТаблицаМаркируемойПродукции.Колонки.Добавить("ТипНоменклатуры");
	
	Для каждого СтрокаТЗ Из ТаблицаМаркируемойПродукции Цикл
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", СтрокаТЗ.Номенклатура, СтрокаТЗ.Характеристика);
		НайденныеСтроки = ПроверяемыйДокумент.Товары.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			СтрокаТЗ.СтатусУказанияСерий = НайденныеСтроки[0].СтатусУказанияСерий;			
		КонецЕсли; 
		
		СтрокаТЗ.ТипНоменклатуры = Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЗ.Номенклатура, "ТипНоменклатуры");		
	КонецЦикла; 		
	
КонецПроцедуры

Функция ДеревоМаркированнойПродукции_ИСМП()
	
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	ДеревоМаркированнойПродукции = Новый ДеревоЗначений();
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусПроверки",                                  		Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиПодчиненных",                		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипУпаковки",                                     		Новый ОписаниеТипов("ПеречислениеСсылка.ПрочиеЗоныПересчетаПродукцииИСМП, ПеречислениеСсылка.ТипыУпаковок"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхУпаковок",                   		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВНаличии",                   		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",                		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Штрихкод",                                        		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсяУпаковкаПроверена",                            		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиТипУпаковки",                       		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиСтатусПроверки",                    		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТребуетсяПеремаркировка",                         		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Представление",                                   		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимоеУпаковки");
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимогоДоСопоставления",      			ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтложено",                			ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхПотребительскихУпаковок", 			ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НомерСтикераОтложено",                            		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСодержитсяВДанныхДокумента",                    		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСоответствуетОтбору",                           		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдетПроверкаДаннойУпаковки",                      		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",                		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеПроверялось",              		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВсего",                      		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСумма",                                        		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Номенклатура",                                    		Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Характеристика",                                  		Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Серия",                                           		Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторСтроки",                             		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСерии",                            		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяНоменклатура",                     		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеХарактеристики",                   		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИННВладельца",                                    		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИННАгента",                                       		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусКодаМаркировки",                            		Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("GTIN",                                            		Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныйGTIN",                             		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиКодаМаркировки",             		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НедопустимыйКодМаркировки",                       		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("СодержимоеНедоступно",                            		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС",                 		Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ГоденДо",                                         		Новый ОписаниеТипов("Дата"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("СкоропортящаясяПродукция",                        		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипШтрихкода",                                    		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСуммаНормализации",                            		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВидУпаковки",                                     		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("СпособВводаВОборот",                              		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВводаВОборотСУЗ"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТекстОшибкиПроверкиСредствамиККТ",                		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("СостояниеТребованияПолногоКодаККТ",               		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Количество",                                      		Модуль_ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПроизвольнаяЕдиницаУчета",                        		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТребуетВзвешивания",                              		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеПересчитыватьКоличествоПотребительскихУпаковок", 		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Коэффициент",                                      		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхГрупповыхУпаковок",            		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ЧастичноеВыбытие",                                		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ЧастичноеВыбытиеВариантУчета",                    		Неопределено);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ЧастичноеВыбытиеНоменклатура",                    		Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ЧастичноеВыбытиеХарактеристика",                  		Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПлановоеКоличествоПотребительскихУпаковок", 				ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НормализованныйШтрихкод",                         		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТекстОбработанСОшибкойВГИСМТ",                    		ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ОбработанСОшибкойВГИСМТ",                         		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ОбъемноСортовойУчет",                             		ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусRFID",                                      		ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("РазрешительныйРежимИдентификаторЗапросаГИСМТ", 			Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("РазрешительныйРежимДатаЗапросаГИСМТ",          			ТипСтрока);
	
	Возврат ДеревоМаркированнойПродукции;
	
КонецФункции

Функция ПодобраннаяМаркируемаяПродукция_ИСМП()
	
	ПодобраннаяМаркируемаяПродукция = Новый ТаблицаЗначений();
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Номенклатура",                    							Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Характеристика",                  							Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Серия",                           							Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Количество",                      							Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПодобрано",             							Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ИндексКодаМаркировки",            							Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("GTIN",                            							Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПредставлениеНоменклатуры",       							Новый ОписаниеТипов("Строка"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("СтатусУказанияСерий",             							Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ХарактеристикиИспользуются",      							Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ТипНоменклатуры",                 							Метаданные.ОпределяемыеТипы.ТипНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НомерСтроки",                     							Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоИС",                    							Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НоменклатураСопоставлена",        							Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС", 							Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ГоденДо",                         							Новый ОписаниеТипов("Дата"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("СкоропортящаясяПродукция",        							Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КодыGTIN",                        							Новый ОписаниеТипов("СписокЗначений"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПредставлениеGTIN",               							Новый ОписаниеТипов("Строка"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НоменклатураСопоставленаПоУПД",   							Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПотребительскихУпаковок",                     		Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПотребительскихУпаковокВСтруктуреУпаковок",   		Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПроизвольнаяЕдиницаУчета",                              		Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ТребуетВзвешивания",                                    		Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПотребительскихУпаковокТребующихВзвешивания", 		Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПодобраноВзвешено",                           		Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПодобраноВзвешеноОСУ",                        		Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПотребительскихУпаковокОСУ",                  		Новый ОписаниеТипов("Число"));
	
	Возврат ПодобраннаяМаркируемаяПродукция;
	
КонецФункции

Процедура ЗаполнитьТаблицуПодобраннойМаркируемойПродукции_ИСМП(ТаблицаМаркируемойПродукции, ДанныеДокумента, СвойстваВидаПродукции = Неопределено)
	
	Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер 	= ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер"); 
	Модуль_ИнтеграцияИСПереопределяемый 				= ОбщийМодуль("ИнтеграцияИСПереопределяемый");
	Модуль_ИнтеграцияИСКлиентСервер 					= ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	
	Если ДанныеДокумента.РежимПодбораСуществующихУпаковок
		Или Не ДанныеДокумента.ПроверкаЭлектронногоДокумента Тогда
		
		НомерСтроки = 1;
		Для каждого СтрокаИсточника Из ТаблицаМаркируемойПродукции Цикл
			
			СтрокаПодобраннойПродукции = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Добавить();
			
			Попытка 
				ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтрокаИсточника,, "КоличествоПотребительскихУпаковок");
			Исключение
				ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтрокаИсточника);
			КонецПопытки;
			
			СтрокаПодобраннойПродукции.НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура);
			СтрокаПодобраннойПродукции.ПредставлениеGTIN = Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ПредставлениеМассиваGTIN(СтрокаПодобраннойПродукции.КодыGTIN);
			Если СтрокаПодобраннойПродукции.КодыGTIN.Количество() = 1 Тогда
				СтрокаПодобраннойПродукции.GTIN = СтрокаПодобраннойПродукции.КодыGTIN[0].Значение;
			КонецЕсли;
			СтрокаПодобраннойПродукции.НомерСтроки = НомерСтроки;
			
			Попытка
				Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
			Исключение
				Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции,СвойстваВидаПродукции);
			КонецПопытки;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	Иначе
		
		ИменаКолонок = Новый Массив;
		ИменаКолонок.Добавить("Номенклатура");
		ИменаКолонок.Добавить("Характеристика");
		Если Модуль_ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ДанныеДокумента.ВидМаркируемойПродукции) Тогда
			ИменаКолонок.Добавить("ГоденДо");
			ИменаКолонок.Добавить("ИдентификаторПроисхожденияВЕТИС");
			ИменаКолонок.Добавить("СкоропортящаясяПродукция");
		КонецЕсли;
		
		ИменаКолонокСтрокой = СтрСоединить(ИменаКолонок, ",");
		
		Для каждого СтрокаИсточника Из ТаблицаМаркируемойПродукции Цикл
			
			СтруктураПоиска = Новый Структура(ИменаКолонокСтрокой);
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаИсточника);
			
			Если СтрокаИсточника.КодыGTIN.Количество() = 1 Тогда
				СтруктураПоиска.Вставить("GTIN", СтрокаИсточника.КодыGTIN[0].Значение);
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаИсточника.Номенклатура)
				И ЗначениеЗаполнено(СтрокаИсточника.GTIN) Тогда
				СтруктураПоиска.Вставить("GTIN", СтрокаИсточника.GTIN); // Требует рассмотрения
			КонецЕсли;
			
			НайденныеСтроки = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				СтрокаПодобраннойПродукции = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтруктураПоиска);
				
				СтрокаПодобраннойПродукции.НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура);
				СтрокаПодобраннойПродукции.КодыGTIN                 = СтрокаИсточника.КодыGTIN;
				СтрокаПодобраннойПродукции.ПредставлениеGTIN        = Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ПредставлениеМассиваGTIN(СтрокаПодобраннойПродукции.КодыGTIN);
				
			Иначе
				
				СтрокаПодобраннойПродукции = НайденныеСтроки[0];
				
			КонецЕсли;
			
			СтрокаПодобраннойПродукции.Количество = СтрокаПодобраннойПродукции.Количество + СтрокаИсточника.Количество;
			
		КонецЦикла;
		
		НомерСтроки = 0;
		Для каждого СтрокаПодобраннойПродукции Из ДанныеДокумента.ПодобраннаяМаркируемаяПродукция Цикл
			НомерСтроки = НомерСтроки + 1;
			СтрокаПодобраннойПродукции.НомерСтроки = НомерСтроки;
			
			Попытка
				Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
			Исключение
				Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции, СвойстваВидаПродукции);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Модуль_ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(Неопределено, ДанныеДокумента.ПодобраннаяМаркируемаяПродукция);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуКоличествоПоДокументуСУчетомВидаПродукции_ИСМП(ДанныеДокумента, ВидПродукции)
	
	ПодобраннаяМаркируемаяПродукция = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция;
	
	Если ПодобраннаяМаркируемаяПродукция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеСвойстваВидаПродукции = Новый Массив;
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ПроверяемыеСвойстваВидаПродукции.Добавить("ИдентификаторПроисхожденияВЕТИС");
	КонецЕсли;
	
	ИменаКолонокТаблицы = Новый Массив;
	ИменаКолонокТаблицы.Добавить("GTIN");
	ИменаКолонокТаблицы.Добавить("Номенклатура");
	ИменаКолонокТаблицы.Добавить("Характеристика");
	ИменаКолонокТаблицы.Добавить("Серия");
	ИменаКолонокТаблицы.Добавить("Количество");
	ИменаКолонокТаблицы.Добавить("ИдентификаторПроисхожденияВЕТИС");
	ИменаКолонокТаблицы.Добавить("ГоденДо");
	ИменаКолонокТаблицы.Добавить("СкоропортящаясяПродукция");
	
	КоличествоПоДокументуСУчетомВидаПродукции =
	ПодобраннаяМаркируемаяПродукция.СкопироватьКолонки(СтрСоединить(ИменаКолонокТаблицы, ","));
	
	Для каждого СтрокаПодобраннойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
		
		Если СтрокаПодобраннойПродукции.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПодобраннойПродукции.GTIN) Тогда
			
			// Только остаточные GTIN
			Если ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			Если Не ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПроверяемыеСвойстваВидаПродукции.Количество() = 0 Тогда
				Продолжить; // Сохраняем только специфические колонки
			КонецЕсли;
			
			Для каждого ИмяСвойства Из ПроверяемыеСвойстваВидаПродукции Цикл
				Если Не ЗначениеЗаполнено(СтрокаПодобраннойПродукции[ИмяСвойства]) Тогда
					Продолжить;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
		КоличествоПоДокументуСУчетомВидаПродукции.Добавить(), СтрокаПодобраннойПродукции);
		
	КонецЦикла;
	
	Если КоличествоПоДокументуСУчетомВидаПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента.Вставить("КоличествоПоДокументуСУчетомВидаПродукции", КоличествоПоДокументуСУчетомВидаПродукции);
	
КонецПроцедуры

Процедура ДополнитьТаблицуПодобраннойМаркируемойПродукции_ИСМП(ДанныеПроверяемогоДокумента, ДанныеДокумента, ВидПродукции, ПараметрыСканирования)
	
	ТаблицаМаркируемойПродукции = ДанныеПроверяемогоДокумента.МаркированныеТовары.СкопироватьКолонки();
	
	Модуль_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	
	ДополнитьТаблицуМаркируемойПродукции(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ТаблицаМаркируемойПродукции);
	
	
	Попытка 
		Модуль_ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукции(
		ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования);
	Исключение		
		Попытка			
			Модуль_ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукции(
			ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции);
		Исключение	
			Попытка
				Модуль_ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукцииИСМП(
				ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования);
			Исключение
			КонецПопытки;
		КонецПопытки;
	КонецПопытки;	
	
КонецПроцедуры

Процедура ЗаполнитьДеревоМаркированнойПродукции_ИСМП(ДеревоУпаковокДокумента, ДанныеДокумента, ПараметрыСканирования)
	
	ДетализацияСтруктурыХраненияДанныхДокумента = ДетализацияСтруктурыХраненияДерева_ИСМП(ДеревоУпаковокДокумента);
	
	Если ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения <> Неопределено Тогда
		Если ДеревоУпаковокДокумента.Строки.Количество() = 0 Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		ИначеЕсли ДетализацияСтруктурыХраненияДанныхДокумента <> Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
		Иначе
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		КонецЕсли;
	Иначе
		ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
	КонецЕсли;
	
	КоллекцияСтрокПриемника = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Для каждого СтрокаДереваУпаковок Из ДеревоУпаковокДокумента.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(СтрокаДереваУпаковок, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыСканирования);
	КонецЦикла;
	
	Если ДанныеДокумента.СтрокаПродукцияБезУпаковки = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки Тогда
		ДобавленнаяСтрокаПродукцияБезУпаковки_ИСМП(ДанныеДокумента);
	КонецЕсли;
	
	Если ДанныеДокумента.СтрокаПродукцияОбъемноСортовойУчет = Неопределено
		И ДанныеДокумента.ПоддерживаетсяОбъемноСортовойУчет Тогда
		ДобавленнаяСтрокаПродукцияОбъемноСортовогоУчета_ИСМП(ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

Функция ДетализацияСтруктурыХраненияДерева_ИСМП(ДеревоУпаковок)
	
	ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки;
	Модуль_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	
	Для каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Если Модуль_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.КоробаПотребительскиеУпаковки;
			
			Для каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
				Если Модуль_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
					ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДетализацияСтруктурыХраненияДерева;
	
КонецФункции

Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(СтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыСканирования, ЭтоОСУ = Ложь)
	
	КешЛогистическихУпаковок = ДанныеДокумента.КешЛогистическихУпаковок;
	
	Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер 	= ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер 	= ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");
	Модуль_ПроверкаИПодборПродукцииИСМП 				= ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	Модуль_ИнтеграцияИСКлиентСервер 					= ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	
	ТипУпаковкиОбъемноСортовойУчет = Ложь;
	ВидУпаковкиОбъемноСортовойУчет = Ложь;
	Попытка
		Если СтрокаИсточника.ТипУпаковки = Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиОбъемноСортовойУчет() Тогда
			ТипУпаковкиОбъемноСортовойУчет = Истина;
		КонецЕсли;
	Исключение
	КонецПопытки;
	Попытка
		Если СтрокаИсточника.Родитель = Неопределено И СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			ВидУпаковкиОбъемноСортовойУчет = Истина;
		КонецЕсли;
	Исключение
	КонецПопытки;
		
	Если СтрокаИсточника.ТипУпаковки = Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаПродукцияБезУпаковки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаПродукцияБезУпаковки_ИСМП(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
			
			Для каждого СтрокаПродукции Из СтрокаИсточника.Строки Цикл
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(СтрокаПродукции, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыСканирования);
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.ТипУпаковки = Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
			И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаБлокиБезКоробки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаБлокиБезКоробки_ИСМП(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
			
			Для каждого СтрокаИсточникаБлок Из СтрокаИсточника.Строки Цикл
				Если ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
					ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(СтрокаИсточникаБлок, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыСканирования);
				Иначе
					Для каждого СтрокаИсточникаПачка Из СтрокаИсточникаБлок.Строки Цикл
						ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(СтрокаИсточникаПачка, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыСканирования);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТипУпаковкиОбъемноСортовойУчет Тогда
		
		НоваяСтрока = ДанныеДокумента.СтрокаПродукцияОбъемноСортовойУчет;
		
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = ДобавленнаяСтрокаПродукцияОбъемноСортовогоУчета_ИСМП(ДанныеДокумента);
		КонецЕсли;
		
	ИначеЕсли ВидУпаковкиОбъемноСортовойУчет Тогда
		
		ЭлементГруппировкиПоGTIN = Обработки.ПроверкаИПодборПродукцииИСМП.СтрокаОбъемноСортовогоУчетаПоGTIN(ДанныеДокумента, СтрокаИсточника);
		
		Если СтрокаИсточника.Строки.Количество() = 0 Тогда
			НоваяСтрока = ЭлементГруппировкиПоGTIN.Строки.Добавить();
		Иначе
			Для каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(ПодчиненнаяСтрокаИсточника, ЭлементГруппировкиПоGTIN.Строки, ДанныеДокумента, ПараметрыСканирования);
			КонецЦикла;
			Возврат;
		КонецЕсли;	
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда
		
		СтрокаПродукцияБезУпаковки = ДанныеДокумента.СтрокаПродукцияБезУпаковки;
		
		Если СтрокаПродукцияБезУпаковки = Неопределено Тогда
			СтрокаПродукцияБезУпаковки = ДобавленнаяСтрокаПродукцияБезУпаковки_ИСМП(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаПродукцияБезУпаковки.Строки.Добавить();
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И (Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаИсточника)
		Или Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаНабор(СтрокаИсточника))
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
		
		СтрокаБлокиБезКоробки = ДанныеДокумента.СтрокаБлокиБезКоробки;
		
		Если СтрокаБлокиБезКоробки = Неопределено Тогда
			СтрокаБлокиБезКоробки = ДобавленнаяСтрокаБлокиБезКоробки_ИСМП(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаБлокиБезКоробки.Строки.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	ИначеЕсли СтрокаИсточника.Родитель <> Неопределено
		И (Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаИсточника.Родитель)
		Или Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаНабор(СтрокаИсточника.Родитель))
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками Тогда
		
		Возврат;
		
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
	НоваяСтрока.СтатусКодаМаркировки = СтрокаИсточника.Статус;
	
	ОшибкаПроверкиККТ = ДанныеДокумента.ОшибкиПроверкиСредствамиККТ.Получить(НоваяСтрока.Штрихкод);
	Если ОшибкаПроверкиККТ <> Неопределено Тогда
		НоваяСтрока.ТекстОшибкиПроверкиСредствамиККТ = ОшибкаПроверкиККТ.ОписаниеОшибок;
		Если ОшибкаПроверкиККТ.ТребуетсяПолныйКодМаркировки Тогда
			НоваяСтрока.СостояниеТребованияПолногоКодаККТ = 1;
		КонецЕсли;
	КонецЕсли;
	
	Модуль_ПроверкаИПодборПродукцииИСМП.ОбработкаСтрокиЧастичногоВыбытияПриВосстановленииДанных(
	НоваяСтрока,
	СтрокаИсточника,
	ПараметрыСканирования,
	ДанныеДокумента.ВидМаркируемойПродукции);
	
	Если ДанныеДокумента.ЗначенияШтрихкодовОбработанныхСОшибками.Найти(НоваяСтрока.Штрихкод) <> Неопределено Тогда
		НоваяСтрока.ТекстОбработанСОшибкойВГИСМТ = НСтр("ru = 'Пакет обработан с ошибкой в ГИС МТ'");
		НоваяСтрока.ОбработанСОшибкойВГИСМТ      = Истина;
	КонецЕсли;
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		НоваяСтрока.ПредставлениеСодержимоеУпаковки         = СтрокаИсточника.ПредставлениеНоменклатуры;
		НоваяСтрока.ПредставлениеСодержимогоДоСопоставления = СтрокаИсточника.ПредставлениеНоменклатуры;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеДокумента.ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
		
		ОтрезатьСодержимоеГрупповыхУпаковок     = Ложь;
		ОтрезатьСодержимоеЛогистическойУпаковки = Ложь;
		
	Иначе
		
		ОтрезатьСодержимоеГрупповыхУпаковок =
		(СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Или СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
		И (ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
		Или ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
		Или (СтрокаИсточника.КоличествоПотребительскихУпаковок > 0 И СтрокаИсточника.Строки.Количество() = 0));
		
		ОтрезатьСодержимоеЛогистическойУпаковки =
		(СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		Или СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
		И (ЗначениеЗаполнено(СтрокаИсточника.Номенклатура) И СтрокаИсточника.КоличествоПотребительскихУпаковок > 0 И ЗначениеЗаполнено(СтрокаИсточника.GTIN))
		И (ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
		Или СтрокаИсточника.Строки.Количество() = 0);
		
	КонецЕсли;
	
	НоваяСтрока.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаИсточника.КоличествоПотребительскихУпаковок;
	
	Если (НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
		И ОтрезатьСодержимоеГрупповыхУпаковок Тогда
		НоваяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
	КонецЕсли;
	
	Если (НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		Или НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
		И ОтрезатьСодержимоеЛогистическойУпаковки Тогда
		НоваяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
	КонецЕсли;
	
	Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	Попытка 
		Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	Исключение
		Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока, ДанныеДокумента.ВидМаркируемойПродукции);
	КонецПопытки;
	Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеСодержимогоУпаковки(НоваяСтрока);
	
	СтрокаРодитель = НоваяСтрока.Родитель;
	Если СтрокаРодитель <> Неопределено
		И СтрокаРодитель.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ГруппировкаОбъемноСортовогоУчетаПоGTIN Тогда
		ЭтоОСУ = Истина;
	ИначеЕсли НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
		ЭтоОСУ = Истина;
	КонецЕсли;
	Если ЭтоОСУ = Неопределено Тогда
		ЭтоОСУ = Ложь;
	КонецЕсли;
	
	Если Не ДанныеДокумента.ПараметрыПроверкиКодовМаркировки.РежимИсправленияОшибокПослеПередачиКодов
		Или НоваяСтрока.ОбработанСОшибкойВГИСМТ
		Или (НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И НоваяСтрока.Родитель <> Неопределено
		И НоваяСтрока.Родитель.ОбработанСОшибкойВГИСМТ) Тогда
		Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ДанныеДокумента.ПараметрыПроверкиКодовМаркировки,, ЭтоОСУ);
	КонецЕсли;
	
	Если НоваяСтрока.СодержимоеНедоступно Тогда
		ДанныеДокумента.СодержимоеУпаковокНедоступно = Истина;
	КонецЕсли;
	
	Если Модуль_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки) Тогда
		ДанныеДокумента.УпаковкиДокумента.Добавить(НоваяСтрока.Штрихкод);
	КонецЕсли;
	
	КоллекцияСтрокНовойСтроки = НоваяСтрока.Строки;
	
	Для каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_ИСМП(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокНовойСтроки, ДанныеДокумента, ПараметрыСканирования, ЭтоОСУ);
	КонецЦикла;
	
	Если ДанныеДокумента.ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставАгрегата
		И НоваяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
		И КешЛогистическихУпаковок.Получить(НоваяСтрока.НормализованныйШтрихкод) = Неопределено Тогда
		
		Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьСоставАгрегата(НоваяСтрока, ДанныеДокумента.ПараметрыПроверкиКодовМаркировки);
		КешЛогистическихУпаковок.Вставить(НоваяСтрока.НормализованныйШтрихкод, Истина);
		
	КонецЕсли;
	
	Если НоваяСтрока.НедопустимыйКодМаркировки Тогда
		ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки = ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки + 1;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавленнаяСтрокаПродукцияБезУпаковки_ИСМП(ДанныеДокумента)
	
	НоваяСтрока = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки.Вставить(0);
	
	Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	
	Попытка 
		Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуПродукцияБезУпаковки(НоваяСтрока);
	Исключение
		Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуПродукцияБезУпаковки(НоваяСтрока, ДанныеДокумента.ВидМаркируемойПродукции);
	КонецПопытки;
	
	ДанныеДокумента.СтрокаПродукцияБезУпаковки = НоваяСтрока;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ДобавленнаяСтрокаБлокиБезКоробки_ИСМП(ДанныеДокумента)
	
	Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");
	
	СтрокиДерева = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Если СтрокиДерева.Количество() = 0 Тогда
		НоваяСтрока = СтрокиДерева.Вставить(0);
	ИначеЕсли СтрокиДерева[0].ТипУпаковки <> Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		НоваяСтрока = СтрокиДерева.Вставить(0);
	Иначе
		НоваяСтрока = СтрокиДерева.Вставить(1);
	КонецЕсли;
	
	Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуБлокиБезКоробки(НоваяСтрока, ДанныеДокумента.ВидМаркируемойПродукции);
	
	ДанныеДокумента.СтрокаБлокиБезКоробки = НоваяСтрока;
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура ЗаполнитьСписокШтрихкодыУпаковок_ИСМП(СтрокаИсточника, ШтрихкодыУпаковок)
	
	Для каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		Если ЗначениеЗаполнено(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки)
			И ШтрихкодыУпаковок.НайтиПоЗначению(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки) = Неопределено Тогда
			ШтрихкодыУпаковок.Добавить(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки, ПодчиненнаяСтрокаИсточника.Штрихкод);
		КонецЕсли;
		Если СтрокаИсточника.Строки.Количество() > 0 Тогда
			ЗаполнитьСписокШтрихкодыУпаковок_ИСМП(ПодчиненнаяСтрокаИсточника, ШтрихкодыУпаковок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавленнаяСтрокаПродукцияОбъемноСортовогоУчета_ИСМП(ДанныеДокумента)
	
	Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	
	СтрокиДерева = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Если СтрокиДерева.Количество() = 0 Тогда
		НоваяСтрока = СтрокиДерева.Добавить();
	Иначе
		ТекущийИндекс            = 0;
		МаксимальныйИндексСтроки = 2;
		Для ТекущийИндекс = 0 По Мин(СтрокиДерева.Количество() - 1, МаксимальныйИндексСтроки) Цикл
			Если СтрокиДерева[ТекущийИндекс].ТипУпаковки = Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
				Или СтрокиДерева[ТекущийИндекс].ТипУпаковки = Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
				Продолжить;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		НоваяСтрока = СтрокиДерева.Вставить(ТекущийИндекс);
	КонецЕсли;
	
	Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуПродукцияОбъемноСортовойУчет(НоваяСтрока, ДанныеДокумента.ВидМаркируемойПродукции);
	
	ДанныеДокумента.СтрокаПродукцияОбъемноСортовойУчет = НоваяСтрока;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ПолучитьДетализацияСтруктурыХранения(Шаблон)
	
	Если ЗначениеЗаполнено(Шаблон.МаркировкаДетализацияСтруктурыХранения) Тогда
		ДетализацияСтруктурыХранения = Шаблон.МаркировкаДетализацияСтруктурыХранения;	
	Иначе
		ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.Полная;
	КонецЕсли;
	
	Возврат ДетализацияСтруктурыХранения; 
	
КонецФункции

//МОТП
Функция ПолучитьПараметрыМОТП(ПроверяемыйДокумент, ВидМаркируемойПродукцииДокумента, Шаблон)
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("ПроверкаНеПоДокументу"										, Ложь);                   
	ПараметрыОперации.Вставить("ПроверяемыйДокумент"										, ПроверяемыйДокумент);
	ПараметрыОперации.Вставить("НачальныйСтатусПроверки"									, Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась);
	ПараметрыОперации.Вставить("ДетализацияСтруктурыХранения"								, ПолучитьДетализацияСтруктурыХранения(Шаблон));
	ПараметрыОперации.Вставить("РедактированиеФормыНедоступно"								, Ложь);
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		ПараметрыОперации.Вставить("РежимПодбораСуществующихУпаковок", 	Ложь);
	Иначе	
		ПараметрыОперации.Вставить("РежимПодбораСуществующихУпаковок", 	Истина);
	КонецЕсли;
	
	ПараметрыОперации.Вставить("ПараметрыСканирования"										, ПолучитьПараметрыСканированияМОТП(ПроверяемыйДокумент,ВидМаркируемойПродукцииДокумента,Шаблон));
	ПараметрыОперации.Вставить("ПараметрыПроверкиКодовМаркировки"							, ПолучитьПараметрыПроверкиКодовМаркировкиМОТП(ПроверяемыйДокумент,Шаблон));
	ПараметрыОперации.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию"		, Ложь);
	ПараметрыОперации.Вставить("ПроверкаЭлектронногоДокумента"								, Ложь);
	ПараметрыОперации.Вставить("ВидМаркируемойПродукции"									, ВидМаркируемойПродукцииДокумента);
	ПараметрыОперации.Вставить("ВозможностьЗагрузкиДанныхБезПодключенияМОТП"				, Истина);
	ПараметрыОперации.Вставить("ЭтоВосстановлениеДетализации"								, Ложь);
	
	ПараметрыОперации.Вставить("РежимИсправленияОшибокПослеПередачиКодов", Ложь);
	ПараметрыОперации.Вставить("ПоддерживаетсяОбъемноСортовойУчет", Ложь);
	
	Попытка ПараметрыОперации.Вставить("ДанныеКлючаСессииМОТП", ПараметрыСеанса.ДанныеКлючаСессииМОТП); Исключение КонецПопытки;
	
	Возврат ПараметрыОперации;
	
КонецФункции

Функция ПолучитьПараметрыСканированияМОТП(ПроверяемыйДокумент, ВидМаркируемойПродукцииДокумента, Шаблон, ПараметрыСканирования = Неопределено, ИзСервиса = Ложь)
	
	ПроверкаБезСертификатаИС = Шаблон.МаркировкаПроверкаБезСертификатаИС;
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = Новый Структура();	
	КонецЕсли; 
	
	Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер 	= ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");
	Модуль_НоменклатураСервер 						= ОбщийМодуль("НоменклатураСервер");
	
	ПараметрыСканирования.Вставить("ДопустимыеВидыПродукции"											, Новый Массив);
	ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
	
	Попытка	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидМаркируемойПродукцииДокумента); Исключение КонецПопытки;
	
	//Старые/не используемые параметры((
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИС"         					, Истина);
	ПараметрыСканирования.Вставить("ЗаписыватьНеизвестныеШтрихкодыУпаковок"         					, Ложь);
	ПараметрыСканирования.Вставить("Детализация"                         								, Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками);
	ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыИСМП"												, ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьСпособВводаВОборот"										, Ложь);
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулМОТП"									, Ложь);
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокИСМП"										, Ложь);
	ПараметрыСканирования.Вставить("ЗаполнятьДанныеВЕТИС"												, Ложь);
	ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыМОТП"												, ИзСервиса);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокМОТП"							, ИзСервиса);
	ПараметрыСканирования.Вставить("Детализация"														, Неопределено);
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокМОТП"										, Ложь);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПула"										, Ложь);
	ПараметрыСканирования.Вставить("ВозможностьЗагрузкиДанныхБезПодключенияМОТП"						, Истина);	
	ПараметрыСканирования.Вставить("ЗаполнятьСрокГодности"												, Ложь);
	ПараметрыСканирования.Вставить("КонтролироватьОкончаниеСрокаГодности"								, Ложь);
	ПараметрыСканирования.Вставить("ЭтоАгрегацияКодовМаркировки"										, Ложь);
	//Старые/не используемые параметры))
	
	ПараметрыСканирования.Вставить("СоздаватьШтрихкодУпаковки"                      					, Ложь);
	ПараметрыСканирования.Вставить("КэшМаркируемойПродукции"                        					, Неопределено);
	ПараметрыСканирования.Вставить("ДанныеВыбораПоМаркируемойПродукции"             					, Неопределено);
	ПараметрыСканирования.Вставить("ИспользуютсяДанныеВыбораПоМаркируемойПродукции" 					, Истина);
	ПараметрыСканирования.Вставить("ВозможнаЗагрузкаТСД"                            					, Истина);
	ПараметрыСканирования.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева"  					, Ложь);
	ПараметрыСканирования.Вставить("ДоступнаПечатьЭтикеток"                         					, Ложь);
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения"                   					, ПолучитьДетализацияСтруктурыХранения(Шаблон));
	ПараметрыСканирования.Вставить("СтатусКодаМаркировкиПоУмолчанию"									, Неопределено);
	ПараметрыСканирования.Вставить("СсылкаНаОбъект"														, ПроверяемыйДокумент);
	ПараметрыСканирования.Вставить("РазрешенаОбработкаКодовСПустойНоменклатурой"						, Ложь);
	ПараметрыСканирования.Вставить("СопоставлятьНоменклатуру"											, Истина);
	ПараметрыСканирования.Вставить("Организация"														, Неопределено);
	
	Попытка ПараметрыСканирования.Организация = ПроверяемыйДокумент.Организация; Исключение КонецПопытки;
	
	ПараметрыСканирования.Вставить("ПараметрыУказанияСерий"												, Неопределено);
	
	КонтролироватьСтатусы = Ложь;
	
	Если КонтролироватьСтатусы Тогда
		ВариантПолученияМРЦ = "ВычислениеИЗапрос";
	Иначе
		ВариантПолученияМРЦ = "Вычисление";
	КонецЕсли;
	
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП"							, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыМОТП"												, Новый Массив);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыУпаковокМОТП"										, Новый Массив);
	ПараметрыСканирования.Вставить("ВариантПолученияМРЦ"												, ВариантПолученияМРЦ);	
	ПараметрыСканирования.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок"									, "ШтрихкодыУпаковок");
	ПараметрыСканирования.Вставить("ИмяКолонкиШтрихкодУпаковки"											, "ШтрихкодУпаковки");
	ПараметрыСканирования.Вставить("ОтборПоВидуПродукции"												, Истина);	
	ПараметрыСканирования.Вставить("ДополнительныеВариантыСопоставленияНоменклатуры"					, Новый Массив());	
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулИСМП"									, Ложь);
	ПараметрыСканирования.Вставить("ОперацияКонтроляАкцизныхМарок"										, "");
	ПараметрыСканирования.Вставить("ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП"			, Ложь);
	ПараметрыСканирования.Вставить("ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП"			, Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ДатаНачалаКонтроляКодовМаркировки());
	ПараметрыСканирования.Вставить("ДопустимыйСпособВводаВОборот"										, Неопределено);
	ПараметрыСканирования.Вставить("ДопустимыйСпособВводаВОборот"										, Неопределено);
	ПараметрыСканирования.Вставить("ДопустимыПроверкиСеройЗоныМОТП"										, Истина);
	ПараметрыСканирования.Вставить("ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП"	, Ложь);	
	ПараметрыСканирования.Вставить("ТолькоМаркируемаяПродукция"											, Ложь);
	ПараметрыСканирования.Вставить("ЭтоПроверкаКодовМаркировкиИСМП"										, Ложь);	
	ПараметрыСканирования.Вставить("ЭтоАгрегацияКодовМаркировкиИСМП"									, Ложь);
	ПараметрыСканирования.Вставить("ОпределениеВидаПродукцииИСМП"										, Ложь); 	
	ПараметрыСканирования.Вставить("ЗаписыватьЛогЗапросовИСМП"											, Ложь);	
	ПараметрыСканирования.Вставить("Склад"																, Справочники.Склады.ПустаяСсылка());
	Попытка ПараметрыСканирования.Склад = ПроверяемыйДокумент.Склад; Исключение КонецПопытки;	
	ПараметрыСканирования.Вставить("КэшированныеЗначения"												, Неопределено);	
	ПараметрыСканирования.Вставить("ДополнительныеПараметры"											, Новый Структура());	
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулИСМП"									, Ложь);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПулаИСМП"									, Ложь);	
	ПараметрыСканирования.Вставить("КонтрольРасхожденийСДокументомОснованием"							, Ложь);	
	ПараметрыСканирования.Вставить("ВыполняетсяЗагрузкаДанныхВФормуПроверкиИПодбораИСМП"				, Истина);
	ПараметрыСканирования.Вставить("ВидОперацииИСМП"													, Неопределено);
	ПараметрыСканирования.Вставить("ЭтоОтчетПроизводственнойЛинии"										, Ложь);	
	ПараметрыСканирования.Вставить("ККТФФД12ИСМП"                                           			, Неопределено);
	ПараметрыСканирования.Вставить("КонтролироватьСтандартнуюВложенность"                   			, Ложь);
	ПараметрыСканирования.Вставить("КонтролироватьСоставАгрегатов"                   					, Ложь);
	ПараметрыСканирования.Вставить("АдресДанныхДокументаОснования"                          			, Неопределено);
	ПараметрыСканирования.Вставить("Владелец"                                           				, Неопределено);
	ПараметрыСканирования.Вставить("ДокументОснование"                                      			, Неопределено);
	ПараметрыСканирования.Вставить("КонтрольПустыхУпаковок"                   							, Истина);
	ПараметрыСканирования.Вставить("КонтрольУникальностиКодовМаркировки"                    			, Ложь);
	ПараметрыСканирования.Вставить("ПроверятьАлфавитКодовМаркировки"                   					, Истина);
	ПараметрыСканирования.Вставить("ПроверятьДублиКодовМаркировки"                   					, "НеПроверять");
	ПараметрыСканирования.Вставить("ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД"              			, Истина);
	ПараметрыСканирования.Вставить("РазрешенаОбработкаБезУказанияМарки"                   				, Ложь);
	ПараметрыСканирования.Вставить("РазрешенаОбработкаНеНайденныхЛогистическихУпаковок"     			, Ложь);
	ПараметрыСканирования.Вставить("ТребоватьПолныйКодМаркировкиИСМП"                   				, Ложь);
	ПараметрыСканирования.Вставить("ТребуетсяПроверкаСредствамиККТ"                   					, Ложь);
	ПараметрыСканирования.Вставить("ТребуетсяЧастичноеВыбытие"                   						, Ложь);
	ПараметрыСканирования.Вставить("УпрощеннаяОбработкаКодовМаркировки"                   				, Ложь);
	ПараметрыСканирования.Вставить("ВыводитьСообщенияОбОшибках"                             			, Истина);
	ПараметрыСканирования.Вставить("ДанныеТаблицыТовары"	                                			, Неопределено);
	ПараметрыСканирования.Вставить("ЗапрашиватьКоличествоМерногоТовара"                    				, Истина);
	ПараметрыСканирования.Вставить("ИдентификаторФормы"                                     			, Неопределено);
	ПараметрыСканирования.Вставить("ИмяКолонкиЧастичноеВыбытиеВариантУчета"                 			, Неопределено);
	ПараметрыСканирования.Вставить("ИмяКолонкиЧастичноеВыбытиеКоличество"                 				, Неопределено);
	ПараметрыСканирования.Вставить("ИмяКолонкиЧастичноеВыбытиеНоменклатура"                 			, Неопределено);
	ПараметрыСканирования.Вставить("ИмяКолонкиЧастичноеВыбытиеХарактеристика"               			, Неопределено);
	
	ДопустимыеСтатусыКодовМаркировки = Новый Массив;	
	ДопустимыеСтатусыУпаковок = Новый Массив;        
	
	ЗаполнитьПоВидуДокументаДопустимыеСтатусыИСМП(Шаблон, ДопустимыеСтатусыКодовМаркировки, ДопустимыеСтатусыУпаковок);
	
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыИСМП"												, ДопустимыеСтатусыКодовМаркировки);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыУпаковокИСМП"										, ДопустимыеСтатусыКодовМаркировки);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыКодовМаркировки"									, ДопустимыеСтатусыКодовМаркировки);	
	ПараметрыСканирования.Вставить("ЭтоМаркировкаОстатков"												, Неопределено);
	Попытка ПараметрыСканирования.Вставить("ДатаДокумента", ПроверяемыйДокумент.Дата); Исключение КонецПопытки;
	ПараметрыСканирования.Вставить("СозданиеНаборов"													, Ложь);	
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеСервисаИСМП"										, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьСтатусыКодовМаркировки"								, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьВладельцевКодовМаркировки"							, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьСтатусыКодовМаркировкиИСМП"							, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьВладельцевКодовМаркировкиИСМП"						, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("ПроверятьСтруктуруКодовМаркировки"									, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("РазрешеноЗапрашиватьКодМаркировки"									, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьВладельца"											, Не ПроверкаБезСертификатаИС);
	ПараметрыСканирования.Вставить("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП"				, Не ПроверкаБезСертификатаИС);
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда		
		ПараметрыУказанияСерийФикс = Новый ФиксированнаяСтруктура(Модуль_НоменклатураСервер.ПараметрыУказанияСерий(ПроверяемыйДокумент, Документы[ПроверяемыйДокумент.Метаданные().Имя]));
		ПараметрыУказанияСерий = Новый Структура(ПараметрыУказанияСерийФикс);
		
		ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта 	= "";
		ПараметрыУказанияСерий.ИмяТЧТовары       					= "ПодобраннаяМаркируемаяПродукция";
		ПараметрыУказанияСерий.ИмяТЧСерии        					= "ПодобраннаяМаркируемаяПродукция";
		ПараметрыУказанияСерий.ИмяПоляКоличество 					= "Количество";
		ПараметрыУказанияСерий.ИмяПоляПомещение  					= Неопределено;
		ПараметрыУказанияСерий.ПоляСвязи.Добавить("Серия");
		ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("КоличествоПодобрано");
		
		ПараметрыСканирования.Вставить("ПараметрыУказанияСерий" , ПараметрыУказанияСерий);
		ПараметрыСканирования.ВариантПолученияМРЦ 										= "ВычислениеИЗапрос";
		ПараметрыСканирования.ВидОперацииИСМП 											= Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа;
		ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры 			= Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
		ПараметрыСканирования.Вставить("ПоддерживаютсяОперацииАгрегации" , Истина);
		ПараметрыСканирования.ВидОперацииИСМП 											= Перечисления.ВидыОперацийИСМП.Агрегация;
		ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП							= Ложь;
		ПараметрыСканирования.ДоступнаПечатьЭтикеток									= Истина;
		ПараметрыСканирования.КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП		= Ложь;
		ПараметрыСканирования.КонтролироватьСоставАгрегатов								= Истина;
		ПараметрыСканирования.КонтрольПустыхУпаковок									= Ложь;
		ПараметрыСканирования.КонтрольРасхожденийСДокументомОснованием					= Истина;
		ПараметрыСканирования.ОтборПоВидуПродукции										= Ложь;
		ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой				= Истина;
		ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок		= Истина;
		ПараметрыСканирования.ТолькоМаркируемаяПродукция								= Истина;
		ПараметрыСканирования.ЭтоАгрегацияКодовМаркировкиИСМП							= Истина;
	КонецЕсли;
	
	ПараметрыСканирования.Вставить("ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ", Неопределено);
	ПараметрыСканирования.Вставить("ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ",          Неопределено);

	Возврат ПараметрыСканирования;
	
КонецФункции // ()

Функция ПолучитьПараметрыПроверкиКодовМаркировкиМОТП(ПроверяемыйДокумент, Шаблон)
	
	ПроверкаБезСертификатаИС = Шаблон.МаркировкаПроверкаБезСертификатаИС;
	
	ПараметрыПроверкиКодовМаркировки = Новый Структура();
	ПараметрыПроверкиКодовМаркировки.Вставить("ОтсутствуетПодключениеМОТП"												, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыКодовМаркировки"										, Неопределено);	
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтатусыКодовМаркировки"									, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтатусыКодовМаркировкиИСМП"								, Не ПроверкаБезСертификатаИС);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельцевКодовМаркировкиИСМП"								, Не ПроверкаБезСертификатаИС);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельцевКодовМаркировки"									, Не ПроверкаБезСертификатаИС);
	ПараметрыПроверкиКодовМаркировки.Вставить("ЗапрашиватьДанныеСервиса"												, Не ПроверкаБезСертификатаИС);
	ПараметрыПроверкиКодовМаркировки.Вставить("ЗапрашиватьДанныеСервисаИСМП"											, Не ПроверкаБезСертификатаИС);
	
	//Старые/не используемые параметры((
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыУпаковок"												, Неопределено);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельца"													, Истина);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыКодовМаркировки"										, Неопределено);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыУпаковок"												, Неопределено);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыйСпособВводаВОборот"											, Новый Массив);	
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыйСпособВводаВОборот"											, Новый Массив);
	//Старые/не используемые параметры))
	
	РежимПодбораСуществующихУпаковок = Истина;
	
	Модуль_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	Модуль_ИнтеграцияИСВызовСервера = ОбщийМодуль("ИнтеграцияИСВызовСервера");
	
	Попытка
		Если РежимПодбораСуществующихУпаковок
			Или Модуль_ПроверкаИПодборПродукцииИСМП.КонтрагентНеРезидент(ПроверяемыйДокумент.Контрагент) Тогда
			ИННВладельца = Модуль_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПроверяемыйДокумент.Организация).ИНН;
			Владелец     = ПроверяемыйДокумент.Организация;
		Иначе
			ИННВладельца = Модуль_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПроверяемыйДокумент.Контрагент).ИНН;
			Владелец     = ПроверяемыйДокумент.Контрагент;
		КонецЕсли;
	Исключение
		ИННВладельца = "";
		Владелец     = Неопределено;
	КонецПопытки;	
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ИННВладельца"															, ИННВладельца);
	ПараметрыПроверкиКодовМаркировки.Вставить("Владелец"																, Владелец);			
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВложенностьУпаковок"										, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеВложенияАгрегатов"												, Неопределено);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСоставГрупповойУпаковкиПриИзмененииСтрокиДерева"			, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСоставГрупповойУпаковки"									, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП"               , Ложь);
	
	Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыМОТП"													, Новый Массив);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыУпаковокМОТП"											, Новый Массив);
	ПараметрыПроверкиКодовМаркировки.Вставить("ОбратноеСканирование"               										, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтандартнуюВложенность"                                    , Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП"               , Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ДатаНачалаКонтроляКодовМаркировки());
	ПараметрыПроверкиКодовМаркировки.Вставить("ВозможностьЗагрузкиДанныхБезПодключенияМОТП"                             , Неопределено);
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
		ПараметрыПроверкиКодовМаркировки.КонтролироватьВложенностьУпаковок									= Истина;
		ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставГрупповойУпаковкиПриИзмененииСтрокиДерева		= Истина;
	КонецЕсли;	
	
	ПараметрыПроверкиКодовМаркировки.Вставить("РежимИсправленияОшибокПослеПередачиКодов"								, Ложь);  	
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСоставАгрегата"											, Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСоставАгрегатаПриИзмененииСтрокиДерева"					, Ложь);
	
	Возврат ПараметрыПроверкиКодовМаркировки;
	
КонецФункции

Функция НачальныеДанныеДляРезультатовПроверкиМОТП(ПараметрыДанных)
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("ДеревоМаркированнойПродукции",          						ДеревоМаркированнойПродукции_МОТП());
	ДанныеДокумента.Вставить("ПодобраннаяМаркируемаяПродукция",       						ПодобраннаяМаркируемаяПродукция_МОТП());
	ДанныеДокумента.Вставить("ДоступныеДляПроверкиУпаковки",          						Новый СписокЗначений());
	ДанныеДокумента.Вставить("УпаковкиДокумента",                     						Новый СписокЗначений());
	ДанныеДокумента.Вставить("ШтрихкодыУпаковок",                     						Новый СписокЗначений());
	ДанныеДокумента.Вставить("НачальныйСтатусПроверки",               						ПараметрыДанных.НачальныйСтатусПроверки);
	ДанныеДокумента.Вставить("ДетализацияСтруктурыХранения",          						ПараметрыДанных.ДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("РежимПодбораСуществующихУпаковок",      						ПараметрыДанных.РежимПодбораСуществующихУпаковок);
	ДанныеДокумента.Вставить("ПроверкаЭлектронногоДокумента",         						ПараметрыДанных.ПроверкаЭлектронногоДокумента);
	ДанныеДокумента.Вставить("ПараметрыПроверкиКодовМаркировки",      						ПараметрыДанных.ПараметрыПроверкиКодовМаркировки);
	ДанныеДокумента.Вставить("КоличествоНедопустимыхКодовМаркировки", 						0);
	ДанныеДокумента.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", 		ПараметрыДанных.КонтролироватьСканируемуюПродукциюПоДокументуОснованию);
	ДанныеДокумента.Вставить("СохраненнаяДетализацияСтруктурыХранения", 					ПараметрыДанных.ДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("СодержимоеУпаковокНедоступно", 								Ложь);
	ДанныеДокумента.Вставить("СтрокаПачкиБезБлока",          								Неопределено);
	ДанныеДокумента.Вставить("СтрокаБлокиБезКоробки",        								Неопределено);
	ДанныеДокумента.Вставить("Организация",                  								ПараметрыДанных.ПараметрыСканирования.Организация);
	ДанныеДокумента.Вставить("ПроверяемыйДокумент",                  						ПараметрыДанных.ПроверяемыйДокумент);	
	ДанныеДокумента.Вставить("ВидМаркируемойПродукции",      								ПараметрыДанных.ВидМаркируемойПродукции);
	ДанныеДокумента.Вставить("КешГрупповыхУпаковок",         								Новый Соответствие);
	ДанныеДокумента.Вставить(
	"ОшибкиПроверкиСредствамиККТ",
	РегистрыСведений.РезультатыПроверкиСредствамиККТИСМП.ДанныеРезультатовПроверкиДляПроверкиИПодбора(
	ПараметрыДанных.ПроверяемыйДокумент,
	ПараметрыДанных.ВидМаркируемойПродукции));
	ДанныеДокумента.Вставить("ОбработанЧастично", ПараметрыДанных.РежимИсправленияОшибокПослеПередачиКодов);
	ДанныеДокумента.Вставить("ЗначенияШтрихкодовОбработанныхСОшибками", Новый Массив);
	
	Модуль_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	
	ТаблицаМаркируемойПродукции = Модуль_ПроверкаИПодборПродукцииИСМП.ТаблицаМаркируемойПродукцииДокумента(
	ПараметрыДанных.ПроверяемыйДокумент, ПараметрыДанных.ВидМаркируемойПродукции);	
	ЗаполнитьТаблицуПодобраннойТабачнойПродукции_МОТП(ТаблицаМаркируемойПродукции, ДанныеДокумента);
	
	ПараметрыСканирования = ПараметрыДанных.ПараметрыСканирования;
	
	Модуль_ШтрихкодированиеМОТП = ОбщийМодуль("ШтрихкодированиеМОТП");
	Модуль_ШтрихкодированиеМОТПСлужебный = ОбщийМодуль("ШтрихкодированиеМОТПСлужебный");
	
	Попытка
		РезультатПолученияДанных = Модуль_ШтрихкодированиеМОТП.ВложенныеШтрихкодыУпаковокПоДокументу(
		ПараметрыДанных.ПроверяемыйДокумент, ПараметрыСканирования.Детализация, ПараметрыСканирования);
	Исключение
		Попытка
			РезультатПолученияДанных = Модуль_ШтрихкодированиеМОТПСлужебный.ВложенныеШтрихкодыУпаковокПоДокументу(
			ПараметрыДанных.ПроверяемыйДокумент, ПараметрыСканирования, Ложь);	
		Исключение
			РезультатПолученияДанных = Модуль_ШтрихкодированиеМОТП.ВложенныеШтрихкодыУпаковокПоДокументу(
			ПараметрыДанных.ПроверяемыйДокумент,
			ПараметрыСканирования, Истина);
		КонецПопытки; 		
	КонецПопытки;		
	
	Если РезультатПолученияДанных.ЕстьОшибки Тогда
		ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
	КонецЕсли;
	
	ДанныеПроверяемогоДокумента = РезультатПолученияДанных.ВложенныеШтрихкоды;
	
	ДополнитьТаблицуПодобраннойТабачнойПродукции_МОТП(ДанныеПроверяемогоДокумента, ДанныеДокумента, ПараметрыДанных.ВидМаркируемойПродукции, ПараметрыДанных.ПараметрыСканирования);
	ЗаполнитьДеревоМаркированнойПродукции_МОТП(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента, ПараметрыДанных.ВидМаркируемойПродукции, ПараметрыДанных.ДетализацияСтруктурыХранения, ПараметрыСканирования);
	
	ЗаполнитьСписокШтрихкодыУпаковок_МОТП(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента.ШтрихкодыУпаковок);
	
	///НУЖНЫЙ РЕЗУЛЬТАТ			
	РезультатыСканированияМаркируемойПродукции = Новый Структура;
	РезультатыСканированияМаркируемойПродукции.Вставить("ДеревоМаркированнойПродукции",          ДанныеДокумента.ДеревоМаркированнойПродукции); //Тип("ДеревоЗначений")
	РезультатыСканированияМаркируемойПродукции.Вставить("ПодобраннаяМаркируемаяПродукция",       ДанныеДокумента.ПодобраннаяМаркируемаяПродукция); //Тип("ТаблицаЗначений")
	РезультатыСканированияМаркируемойПродукции.Вставить("ПараметрыПроверкиКодовМаркировки",      ДанныеДокумента.ПараметрыПроверкиКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("КоличествоНедопустимыхКодовМаркировки", ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("УпаковкиДокумента",                     ДанныеДокумента.УпаковкиДокумента);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДетализацияСтруктурыХранения",          ДанныеДокумента.ДетализацияСтруктурыХранения);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДоступныеДляПроверкиУпаковки",          ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	РезультатыСканированияМаркируемойПродукции.Вставить("ШтрихкодыУпаковок",                     ДанныеДокумента.ШтрихкодыУпаковок);
	
	Возврат РезультатыСканированияМаркируемойПродукции;
	
КонецФункции

Функция ДеревоМаркированнойПродукции_МОТП()
	
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	ДеревоМаркированнойПродукции = Новый ДеревоЗначений();
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусПроверки",                      Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиПодчиненных",    ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипУпаковки",                         Новый ОписаниеТипов("ПеречислениеСсылка.ПрочиеЗоныПересчетаПродукцииИСМП, ПеречислениеСсылка.ТипыУпаковок"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхУпаковок",       ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВНаличии",       ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",    ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Штрихкод",                            ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсяУпаковкаПроверена",                ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиТипУпаковки",           ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиСтатусПроверки",        ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТребуетсяПеремаркировка",             ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Представление",                       ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимоеУпаковки");
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимогоДоСопоставления",      ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтложено",                ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхПотребительскихУпаковок", ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НомерСтикераОтложено",                ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСодержитсяВДанныхДокумента",        ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСоответствуетОтбору",               ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдетПроверкаДаннойУпаковки",          ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",    ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеПроверялось",  ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВсего",          ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСумма",                            ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Номенклатура",                        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Характеристика",                      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Серия",                               Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторСтроки",                 ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСерии",                ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяНоменклатура",         ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеХарактеристики",       ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИННВладельца",                        ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("МРЦ",                                 ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВключаетМРЦ",                         ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусКодаМаркировки",                   Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхГрупповыхУпаковок", ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("GTIN",                                Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныйGTIN",                 ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиКодаМаркировки", ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НедопустимыйКодМаркировки",           ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Количество",                          Модуль_ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПроизвольнаяЕдиницаУчета",            ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТребуетВзвешивания",                  ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеПересчитыватьКоличествоПотребительскихУпаковок", ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("СодержимоеНедоступно",                ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВидУпаковки",                         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипШтрихкода",                        Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТекстОшибкиПроверкиСредствамиККТ",    ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("СостояниеТребованияПолногоКодаККТ"  , ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ЧастичноеВыбытие",                    ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ЧастичноеВыбытиеВариантУчета",        Неопределено);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ЧастичноеВыбытиеНоменклатура",        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ЧастичноеВыбытиеХарактеристика",      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПлановоеКоличествоПотребительскихУпаковок", ТипЧисло);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТекстОбработанСОшибкойВГИСМТ",        ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ОбработанСОшибкойВГИСМТ",             ТипБулево);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСуммаНормализации",                ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("НормализованныйШтрихкод",             ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ДатаПроизводства",                    Новый ОписаниеТипов("Дата"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВСеройЗоне",                          ТипБулево);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Коэффициент",                         ТипЧисло);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторЗапросаГИСМТ",           ТипСтрока);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ДатаВремяПолученияИдентификатора",    Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Возврат ДеревоМаркированнойПродукции;
	
КонецФункции

Функция ПодобраннаяМаркируемаяПродукция_МОТП()
	
	ПодобраннаяМаркируемаяПродукция = Новый ТаблицаЗначений();
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Номенклатура",               								Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Характеристика",             								Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Серия",                      								Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Количество",                 								Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПодобрано",       		 						Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ИндексКодаМаркировки",       								Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("МРЦ",                        								Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ВключаетМРЦ",                								Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("GTIN",                       								Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПредставлениеНоменклатуры",  								Новый ОписаниеТипов("Строка"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("СтатусУказанияСерий",        								Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ХарактеристикиИспользуются", 								Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ТипНоменклатуры",            								Метаданные.ОпределяемыеТипы.ТипНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НомерСтроки",                								Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоИС",               								Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НоменклатураСопоставлена",   								Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КодыGTIN",                   								Новый ОписаниеТипов("СписокЗначений"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПредставлениеGTIN",          								Новый ОписаниеТипов("Строка"));	
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НоменклатураСопоставленаПоУПД", 							Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПотребительскихУпаковок",                     	Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПотребительскихУпаковокВСтруктуреУпаковок",   	Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПроизвольнаяЕдиницаУчета",                              	Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ТребуетВзвешивания",                                    	Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПотребительскихУпаковокТребующихВзвешивания", 	Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПодобраноВзвешено",                           	Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПодобраноВзвешеноОСУ",                        	Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПотребительскихУпаковокОСУ",                  	Новый ОписаниеТипов("Число"));
	
	Возврат ПодобраннаяМаркируемаяПродукция;
	
КонецФункции

Процедура ЗаполнитьТаблицуПодобраннойТабачнойПродукции_МОТП(ТаблицаМаркируемойПродукции, ДанныеДокумента, СвойстваВидаПродукции = Неопределено)
	
	Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер 	= ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер"); 
	Модуль_ИнтеграцияИСПереопределяемый 				= ОбщийМодуль("ИнтеграцияИСПереопределяемый");
	
	Если ДанныеДокумента.РежимПодбораСуществующихУпаковок
		Или Не ДанныеДокумента.ПроверкаЭлектронногоДокумента Тогда
		
		НомерСтроки = 1;
		Для каждого СтрокаИсточника Из ТаблицаМаркируемойПродукции Цикл
			
			СтрокаПодобраннойПродукции = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Добавить();
			
			Попытка 
				ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтрокаИсточника,, "КоличествоПотребительскихУпаковок");
			Исключение
				ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтрокаИсточника);
			КонецПопытки;
			
			СтрокаПодобраннойПродукции.НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура);
			СтрокаПодобраннойПродукции.ПредставлениеGTIN = Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ПредставлениеМассиваGTIN(СтрокаПодобраннойПродукции.КодыGTIN);
			Если СтрокаПодобраннойПродукции.КодыGTIN.Количество() = 1 Тогда
				СтрокаПодобраннойПродукции.GTIN = СтрокаПодобраннойПродукции.КодыGTIN[0].Значение;
			КонецЕсли;
			СтрокаПодобраннойПродукции.НомерСтроки = НомерСтроки;
			
			Попытка
				Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
			Исключение
				Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции, СвойстваВидаПродукции);
			КонецПопытки;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	Иначе
		
		ИменаКолонок = Новый Массив;
		ИменаКолонок.Добавить("Номенклатура");
		ИменаКолонок.Добавить("Характеристика");
		Если ДанныеДокумента.ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
			ИменаКолонок.Добавить("МРЦ");
		КонецЕсли;
		
		ИменаКолонокСтрокой = СтрСоединить(ИменаКолонок, ",");
		
		Для каждого СтрокаИсточника Из ТаблицаМаркируемойПродукции Цикл
			
			СтруктураПоиска = Новый Структура(ИменаКолонокСтрокой);
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаИсточника);
			
			Если СтрокаИсточника.КодыGTIN.Количество() = 1 Тогда
				СтруктураПоиска.Вставить("GTIN", СтрокаИсточника.КодыGTIN[0].Значение);
				
			КонецЕсли;
			
			НайденныеСтроки = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				СтрокаПодобраннойПродукции = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтруктураПоиска);
				
				СтрокаПодобраннойПродукции.НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура);
				СтрокаПодобраннойПродукции.КодыGTIN                 = СтрокаИсточника.КодыGTIN;
				СтрокаПодобраннойПродукции.ПредставлениеGTIN        = Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ПредставлениеМассиваGTIN(СтрокаПодобраннойПродукции.КодыGTIN);
				
			Иначе
				
				СтрокаПодобраннойПродукции = НайденныеСтроки[0];
				
			КонецЕсли;
			
			СтрокаПодобраннойПродукции.Количество = СтрокаПодобраннойПродукции.Количество + СтрокаИсточника.Количество;
			
		КонецЦикла;
		
		НомерСтроки = 0;
		Для каждого СтрокаПодобраннойПродукции Из ДанныеДокумента.ПодобраннаяМаркируемаяПродукция Цикл
			НомерСтроки = НомерСтроки + 1;
			СтрокаПодобраннойПродукции.НомерСтроки = НомерСтроки;
			Попытка
				Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
			Исключение
				Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции, СвойстваВидаПродукции);
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	Модуль_ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(Неопределено, ДанныеДокумента.ПодобраннаяМаркируемаяПродукция);
	
КонецПроцедуры

Процедура ДополнитьТаблицуПодобраннойТабачнойПродукции_МОТП(ДанныеПроверяемогоДокумента, ДанныеДокумента, ВидПродукции, ПараметрыСканирования)
	
	Модуль_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	
	ТаблицаМаркируемойПродукции = ДанныеПроверяемогоДокумента.МаркированныеТовары.СкопироватьКолонки();
	
	ДополнитьТаблицуМаркируемойПродукцииМОТП(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ТаблицаМаркируемойПродукции);
	
	Попытка 
		Модуль_ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукцииМОТП(
		ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования);		
	Исключение		
		Попытка			
			Модуль_ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукции(
			ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции);
		Исключение	
			Попытка
				Модуль_ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукции(
				ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования);
			Исключение
			КонецПопытки;
		КонецПопытки;
	КонецПопытки;	
	
КонецПроцедуры

Процедура ДополнитьТаблицуМаркируемойПродукции(ДеревоУпаковок, ТаблицаМаркируемойПродукции)
	
	Для каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ДобавитьСтроку = Ложь;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			
			ДобавитьСтроку = Истина;
			
		ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				ДобавитьСтроку = Не (СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC);
			Иначе
				ДополнитьТаблицуМаркируемойПродукции(СтрокаДерева, ТаблицаМаркируемойПродукции);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДобавитьСтроку Тогда
			
			СтрокаТЧ = ТаблицаМаркируемойПродукции.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаДерева);
			СтрокаТЧ.СтрокаДерева = СтрокаДерева;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоМаркированнойПродукции_МОТП(ДеревоУпаковокДокумента, ДанныеДокумента, ВидПродукции, ПринудительноУстановитьДетализацию = Неопределено, ПараметрыСканирования)
	
	Если ПринудительноУстановитьДетализацию = Неопределено Тогда
		
		ДетализацияСтруктурыХраненияДанныхДокумента = ДетализацияСтруктурыХраненияДерева_МОТП(ДеревоУпаковокДокумента);
		Если ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения <> Неопределено Тогда
			
			Если ДеревоУпаковокДокумента.Строки.Количество() = 0 Тогда
				ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
			ИначеЕсли ДетализацияСтруктурыХраненияДанныхДокумента = Перечисления.ДетализацияСтруктурыХраненияИС.Полная
				И ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками Тогда
				ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
			ИначеЕсли ДетализацияСтруктурыХраненияДанныхДокумента <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда
				ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
			Иначе
				ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
			КонецЕсли;
			
		Иначе
			
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДерева_МОТП(ДеревоУпаковокДокумента);
			
		КонецЕсли;
		
	Иначе
		
		ДанныеДокумента.ДетализацияСтруктурыХранения = ПринудительноУстановитьДетализацию;
		
	КонецЕсли;
	
	КоллекцияСтрокПриемника = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Для каждого СтрокаДереваУпаковок Из ДеревоУпаковокДокумента.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(СтрокаДереваУпаковок, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыСканирования);
	КонецЦикла;
	
	Если ДанныеДокумента.СтрокаПачкиБезБлока = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда
		ДобавленнаяСтрокаПачкиБезБлока_МОТП(ДанныеДокумента);
	КонецЕсли;
	
	Если ДанныеДокумента.СтрокаБлокиБезКоробки = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
		ДобавленнаяСтрокаБлокиБезКоробки_МОТП(ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

Функция ДетализацияСтруктурыХраненияДерева_МОТП(ДеревоУпаковок)
	
	УпаковкиДерева = Новый Структура;
	УпаковкиДерева.Вставить("ЕстьПачки",           Ложь);
	УпаковкиДерева.Вставить("ЕстьБлоки",           Ложь);
	УпаковкиДерева.Вставить("ЕстьКоробки",         Ложь);
	УпаковкиДерева.Вставить("ЕстьПалеты",          Ложь);
	УпаковкиДерева.Вставить("ЕстьПачкиБезБлока",   Ложь);
	УпаковкиДерева.Вставить("ЕстьБлокиБезКоробки", Ложь);
	
	РазрешеныПачкиВКоробках = Истина;
	
	Если ТипЗнч(ДеревоУпаковок) = Тип("ДеревоЗначений") Тогда
		СтрокиДерева = ДеревоУпаковок.Строки;
	Иначе
		СтрокиДерева = Новый Массив;
		СтрокиДерева.Добавить(ДеревоУпаковок);
	КонецЕсли;
	
	ОпределитьНаличиеУпаковокВСтрокахДерева_МОТП(СтрокиДерева, УпаковкиДерева, РазрешеныПачкиВКоробках);
	
	Если УпаковкиДерева.ЕстьКоробки Тогда
		Если УпаковкиДерева.ЕстьБлоки И УпаковкиДерева.ЕстьПачки Тогда
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.Полная
		ИначеЕсли УпаковкиДерева.ЕстьБлоки Тогда
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками;
		Иначе
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.Полная;
		КонецЕсли;
	ИначеЕсли УпаковкиДерева.ЕстьБлоки Тогда
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими;
	ИначеЕсли УпаковкиДерева.ЕстьПачки Тогда
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки;
	ИначеЕсли УпаковкиДерева.ЕстьБлокиБезКоробки Тогда
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками;
	ИначеЕсли УпаковкиДерева.ЕстьПачкиБезБлока Тогда
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими;
	Иначе
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки;
	КонецЕсли;
	
	Возврат ДетализацияСтруктурыХраненияДерева;
	
КонецФункции

Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(СтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыСканирования)
	
	Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");
	Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	Модуль_ИнтеграцияИСКлиентСервер 				= ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	Модуль_ПроверкаИПодборПродукцииИСМП             = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	
	КешГрупповыхУпаковок = ДанныеДокумента.КешГрупповыхУпаковок;
	
	Если СтрокаИсточника.ТипУпаковки = Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаПачкиБезБлока;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаПачкиБезБлока_МОТП(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
			
			Для каждого СтрокаИсточникаПачка Из СтрокаИсточника.Строки Цикл
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(СтрокаИсточникаПачка, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыСканирования);
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.ТипУпаковки = Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
			И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаБлокиБезКоробки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаБлокиБезКоробки_МОТП(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
			
			Для каждого СтрокаИсточникаБлок Из СтрокаИсточника.Строки Цикл
				Если ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
					ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(СтрокаИсточникаБлок, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыСканирования);
				Иначе
					Для каждого СтрокаИсточникаПачка Из СтрокаИсточникаБлок.Строки Цикл
						ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(СтрокаИсточникаПачка, КоллекцияСтрокПриемника, ДанныеДокумента, ПараметрыСканирования);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда
		
		СтрокаПачкиБезБлока = ДанныеДокумента.СтрокаПачкиБезБлока;
		
		Если СтрокаПачкиБезБлока = Неопределено Тогда
			СтрокаПачкиБезБлока = ДобавленнаяСтрокаПачкиБезБлока_МОТП(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаПачкиБезБлока.Строки.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И (Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаИсточника)
		Или Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаНабор(СтрокаИсточника))
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
		
		СтрокаБлокиБезКоробки = ДанныеДокумента.СтрокаБлокиБезКоробки;
		
		Если СтрокаБлокиБезКоробки = Неопределено Тогда
			СтрокаБлокиБезКоробки = ДобавленнаяСтрокаБлокиБезКоробки_МОТП(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаБлокиБезКоробки.Строки.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	ИначеЕсли СтрокаИсточника.Родитель <> Неопределено
		И (Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаИсточника.Родитель)
		Или Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаНабор(СтрокаИсточника.Родитель))
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками Тогда
		
		Возврат;
		
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	НоваяСтрока.СтатусКодаМаркировки = СтрокаИсточника.Статус;
	
	ОшибкаПроверкиККТ = ДанныеДокумента.ОшибкиПроверкиСредствамиККТ.Получить(НоваяСтрока.Штрихкод);
	Если ОшибкаПроверкиККТ <> Неопределено Тогда
		НоваяСтрока.ТекстОшибкиПроверкиСредствамиККТ = ОшибкаПроверкиККТ.ОписаниеОшибок;
		Если ОшибкаПроверкиККТ.ТребуетсяПолныйКодМаркировки Тогда
			НоваяСтрока.СостояниеТребованияПолногоКодаККТ = 1;
		КонецЕсли;
	КонецЕсли;
	
	Модуль_ПроверкаИПодборПродукцииИСМП.ОбработкаСтрокиЧастичногоВыбытияПриВосстановленииДанных(
	НоваяСтрока,
	СтрокаИсточника,
	ПараметрыСканирования,
	ДанныеДокумента.ВидМаркируемойПродукции);
	
	Если ДанныеДокумента.ЗначенияШтрихкодовОбработанныхСОшибками.Найти(НоваяСтрока.Штрихкод) <> Неопределено Тогда
		НоваяСтрока.ТекстОбработанСОшибкойВГИСМТ = НСтр("ru = 'Пакет обработан с ошибкой в ГИС МТ'");
		НоваяСтрока.ОбработанСОшибкойВГИСМТ      = Истина;
	КонецЕсли;
	
	Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСвойствоВключаетМРЦ(
	ДанныеДокумента.ВидМаркируемойПродукции, НоваяСтрока, СтрокаИсточника);
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		НоваяСтрока.ПредставлениеСодержимоеУпаковки = СтрокаИсточника.ПредставлениеНоменклатуры;
		НоваяСтрока.ПредставлениеСодержимогоДоСопоставления = СтрокаИсточника.ПредставлениеНоменклатуры;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеДокумента.ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
		
		ОтрезатьСодержимоеБлока                 = Ложь;
		ОтрезатьСодержимоеЛогистическойУпаковки = Ложь;
		
	Иначе
		
		ОтрезатьСодержимоеБлока =
		(СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Или СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
		И (ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
		Или ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
		Или (СтрокаИсточника.КоличествоПотребительскихУпаковок > 0 И СтрокаИсточника.Строки.Количество() = 0));
		
		ОтрезатьСодержимоеЛогистическойУпаковки =
		СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		И (ЗначениеЗаполнено(СтрокаИсточника.Номенклатура) И СтрокаИсточника.КоличествоПотребительскихУпаковок > 0 И ЗначениеЗаполнено(СтрокаИсточника.GTIN))
		И (ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
		Или СтрокаИсточника.Строки.Количество() = 0);
		Если ОтрезатьСодержимоеЛогистическойУпаковки
			И СтрокаИсточника.СоставКодаМаркировки <> Неопределено
			И Не СтрокаИсточника.СоставКодаМаркировки.Свойство("GTIN") Тогда
			ОтрезатьСодержимоеЛогистическойУпаковки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрока.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаИсточника.КоличествоПотребительскихУпаковок;
	
	Если (НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
		И ОтрезатьСодержимоеБлока Тогда
		НоваяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
	КонецЕсли;
	
	Если НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		И ОтрезатьСодержимоеЛогистическойУпаковки Тогда
		НоваяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок = Истина;
	КонецЕсли;
	
	КоллекцияСтрокНовойСтроки = НоваяСтрока.Строки;
	
	Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока, ДанныеДокумента.ВидМаркируемойПродукции);
	Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.СформироватьПредставлениеСодержимогоУпаковки(НоваяСтрока);
	
	Если Не ДанныеДокумента.ПараметрыПроверкиКодовМаркировки.РежимИсправленияОшибокПослеПередачиКодов
		Или НоваяСтрока.ОбработанСОшибкойВГИСМТ
		Или (НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И НоваяСтрока.Родитель <> Неопределено
		И НоваяСтрока.Родитель.ОбработанСОшибкойВГИСМТ) Тогда
		Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ДанныеДокумента.ПараметрыПроверкиКодовМаркировки, ДанныеДокумента.РежимПодбораСуществующихУпаковок);
	КонецЕсли;
	
	Если Модуль_ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки) Тогда
		ДанныеДокумента.УпаковкиДокумента.Добавить(НоваяСтрока.Штрихкод);
	КонецЕсли;
	
	Для каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке_МОТП(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокНовойСтроки, ДанныеДокумента, ПараметрыСканирования);
	КонецЦикла;
	
	Если ДанныеДокумента.ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставГрупповойУпаковки
		И НоваяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")
		И КешГрупповыхУпаковок.Получить(НоваяСтрока.НормализованныйШтрихкод) = Неопределено Тогда
		
		Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ПроверитьСоставАгрегата(НоваяСтрока, ДанныеДокумента.ПараметрыПроверкиКодовМаркировки);
		КешГрупповыхУпаковок.Вставить(НоваяСтрока.НормализованныйШтрихкод, Истина);
		
	КонецЕсли;
	
	Если НоваяСтрока.НедопустимыйКодМаркировки Тогда
		ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки = ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки + 1;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавленнаяСтрокаПачкиБезБлока_МОТП(ДанныеДокумента)
	
	НоваяСтрока = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки.Вставить(0);
	
	Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");
	
	Попытка 
		Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуПачкиБезБлока(НоваяСтрока);
	Исключение
		Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуПачкиБезБлока(НоваяСтрока, ДанныеДокумента.ВидМаркируемойПродукции);
	КонецПопытки;	
	
	ДанныеДокумента.СтрокаПачкиБезБлока = НоваяСтрока;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ДобавленнаяСтрокаБлокиБезКоробки_МОТП(ДанныеДокумента)
	
	СтрокиДерева = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Если СтрокиДерева.Количество() = 0 Тогда
		НоваяСтрока = СтрокиДерева.Вставить(0);
	ИначеЕсли СтрокиДерева[0].ТипУпаковки <> Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока Тогда
		НоваяСтрока = СтрокиДерева.Вставить(0);
	Иначе
		НоваяСтрока = СтрокиДерева.Вставить(1);
	КонецЕсли;
	
	Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер = ОбщийМодуль("ПроверкаИПодборПродукцииМОТПКлиентСервер");
	
	Попытка
		Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуБлокиБезКоробки(НоваяСтрока);
	Исключение
		Модуль_ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуБлокиБезКоробки(НоваяСтрока, ДанныеДокумента.ВидМаркируемойПродукции);
	КонецПопытки;		
	
	ДанныеДокумента.СтрокаБлокиБезКоробки = НоваяСтрока;
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура ОпределитьНаличиеУпаковокВСтрокахДерева_МОТП(СтрокиДерева, УпаковкиДерева, РазрешеныПачкиВКоробках)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Если УпаковкиДерева.ЕстьПачки И Не РазрешеныПачкиВКоробках Тогда
			Прервать;
		ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Если СтрокаДерева.Родитель <> Неопределено
				И СтрокаДерева.Родитель.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока Тогда
				УпаковкиДерева.ЕстьПачкиБезБлока = Истина;
			Иначе
				УпаковкиДерева.ЕстьПачки = Истина;
				Если Не РазрешеныПачкиВКоробках Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			Если СтрокаДерева.Родитель <> Неопределено
				И СтрокаДерева.Родитель.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки Тогда
				УпаковкиДерева.ЕстьБлокиБезКоробки = Истина;
			Иначе
				УпаковкиДерева.ЕстьБлоки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не УпаковкиДерева.ЕстьКоробки Тогда
			УпаковкиДерева.ЕстьКоробки = (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая);
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ОпределитьНаличиеУпаковокВСтрокахДерева_МОТП(СтрокаДерева.Строки, УпаковкиДерева, РазрешеныПачкиВКоробках);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСписокШтрихкодыУпаковок_МОТП(СтрокаИсточника, ШтрихкодыУпаковок)
	
	Для каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		Если ЗначениеЗаполнено(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки)
			И ШтрихкодыУпаковок.НайтиПоЗначению(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки) = Неопределено Тогда
			ШтрихкодыУпаковок.Добавить(ПодчиненнаяСтрокаИсточника.ШтрихкодУпаковки, ПодчиненнаяСтрокаИсточника.Штрихкод);
		КонецЕсли;
		Если СтрокаИсточника.Строки.Количество() > 0 Тогда
			ЗаполнитьСписокШтрихкодыУпаковок_МОТП(ПодчиненнаяСтрокаИсточника, ШтрихкодыУпаковок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуМаркируемойПродукцииМОТП(ДеревоУпаковок, ТаблицаМаркируемойПродукции)
	
	Для каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ДобавитьСтроку = Ложь;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			
			ДобавитьСтроку = Истина;
			
		ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				ДобавитьСтроку = Истина;
			Иначе
				ДополнитьТаблицуМаркируемойПродукцииМОТП(СтрокаДерева, ТаблицаМаркируемойПродукции);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДобавитьСтроку Тогда
			
			СтрокаТЧ = ТаблицаМаркируемойПродукции.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаДерева);
			СтрокаТЧ.СтрокаДерева = СтрокаДерева;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СозданиеКМпоУпаковкеКотораяИмеетсяВБазе

Процедура ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма = Неопределено, Модуль_ШтрихкодированиеИС)
		
	Если Не Модуль_ШтрихкодированиеИС.ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	Модуль_ШтрихкодированиеИС.ДополнитьДанныеШтрихкодовСпецификойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, Модуль_ШтрихкодированиеИС);
	ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования, Модуль_ШтрихкодированиеИС);
	Модуль_ШтрихкодированиеИС.ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Или ДанныеПоШтрихкодам.ТребуетсяСопоставление Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Модуль_ШтрихкодированиеИС.ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДляСохраненияКодовМаркировки = Новый Соответствие;
	
	ОтметитьНовыеШтрихкодыУпаковок(ДанныеПоШтрихкодам, СтрокиДляСохраненияКодовМаркировки);
	ЗаполнитьПоДаннымУточнения(ДанныеПоШтрихкодам, ПараметрыСканирования, СтрокиДляСохраненияКодовМаркировки);
	ЗаполнитьДаныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, СтрокиДляСохраненияКодовМаркировки);
	
	ОбновитьШтрихкодыУпаковок(СтрокиДляСохраненияКодовМаркировки, ПараметрыСканирования, Модуль_ШтрихкодированиеИС);
	ЗаполнитьПоДокументуИОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма, Модуль_ШтрихкодированиеИС);
	
	ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
КонецПроцедуры

// Формирует данные по маркируемой продукции, информации о которой нет в ИБ.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, Модуль_ШтрихкодированиеИС)
	
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	
	Если Модуль_ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И Модуль_ШтрихкодированиеИС.ПрисутствуетАлкогольнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИС = Модуль_ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если Модуль_ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если Модуль_ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
			
			МодульШтрихкодированиеМОТП = Модуль_ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
			
		КонецЕсли;
		
		Если Модуль_ШтрихкодированиеИС.ПрисутствуетПродукцияИСМП(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
			
			МодульШтрихкодированиеИСМПСлужебный = Модуль_ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДанныеПоШтрихкодам.ТекстОшибки) Тогда
		ДанныеПоШтрихкодам.ЕстьОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет структуру "Данные по штрихкодам" информацией по неизвестным упаковкам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования, Модуль_ШтрихкодированиеИС)
	
	Модуль_ИнтеграцияИСКлиентСервер 	= ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	Модуль_ШтрихкодированиеИС 			= ОбщийМодуль("ШтрихкодированиеИС");
	Модуль_ОбщегоНазначения 			= ОбщийМодуль("ОбщегоНазначения");
	
	ЕстьНеизвестныеШтрихкодыУпаковок = Ложь;
	Для каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если Модуль_ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки)
			И Не СтрокаДанных.Идентифицирован Тогда
			ЕстьНеизвестныеШтрихкодыУпаковок = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьНеизвестныеШтрихкодыУпаковок Тогда
		Возврат;
	КонецЕсли;
	
	Если Модуль_ШтрихкодированиеИС.ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеМОТП = Модуль_ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если Модуль_ШтрихкодированиеИС.ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = Модуль_ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		Попытка
			Модуль_ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок,, ПараметрыСканирования);
		Исключение
			Модуль_ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок,, ПараметрыСканирования);	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьНовыеШтрихкодыУпаковок(ДанныеПоШтрихкодам, ЭлементыДляИзменения)
	
	Для каждого КодМаркировки Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если Не ЗначениеЗаполнено(КодМаркировки.ШтрихкодУпаковки) Тогда
			Изменения = Новый Массив;
			Изменения.Добавить("Номенклатура");
			Изменения.Добавить("Характеристика");
			Изменения.Добавить("Серия");
			Изменения.Добавить("Количество");
			Изменения.Добавить("Штрихкод");
			Изменения.Добавить("ТипШтрихкода");
			Изменения.Добавить("ТипУпаковки");
			ОтметитьКОбновлению(ЭлементыДляИзменения, КодМаркировки, Изменения);
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

// Заполняет выбранные номенклатуру, характеристику, серию в случае потокового сканирования (GTIN-уточнение-автовыбор КМ)
//   или при сканировании остаточного КМ.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьПоДаннымУточнения(ДанныеПоШтрихкодам, ПараметрыСканирования, ЭлементыДляИзменения)
	
	Если ПараметрыСканирования.ДополнительныеПараметры.Свойство("ДанныеУточнения") Тогда
		ДанныеУточнения = ПараметрыСканирования.ДополнительныеПараметры.ДанныеУточнения;
		
		Для каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			Если СтрокаДанных.ТребуетсяСопоставление 
				И ЗначениеЗаполнено(СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ТипУпаковки) Тогда
				Продолжить;
			КонецЕсли;
			
			ИзмененныеСвойства = ЗаполнитьСохраненнымВыборомДанныеШтрихкода(СтрокаДанных, ДанныеУточнения);
			
			ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Приводит данные по штрихкодам в соответствие данным ранее указанными пользователем.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДаныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, ЭлементыДляИзменения)
	
	Модуль_ШтрихкодированиеИСКлиентСервер = ОбщийМодуль("ШтрихкодированиеИСКлиентСервер");
	
	Если ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСохраненногоВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	
	Для каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если Модуль_ШтрихкодированиеИСКлиентСервер.ТребуетсяСброситьСохраненныйВыбор(ДанныеСохраненногоВыбора, СтрокаДанных) Тогда
			Возврат;
		КонецЕсли;
		
		ИзмененныеСвойства = ЗаполнитьСохраненнымВыборомДанныеШтрихкода(СтрокаДанных, ДанныеСохраненногоВыбора);
		Если СтрокаДанных.МаркируемаяПродукция Тогда
			ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьШтрихкодыУпаковок(ЭлементыДляИзменения, ПараметрыСканирования, Модуль_ШтрихкодированиеИС)
	
	Для каждого КлючИЗначение Из ЭлементыДляИзменения Цикл
		Модуль_ШтрихкодированиеИС.ОбновитьСоздатьШтрихкодУпаковкиДанныхШтрихкода(
		КлючИЗначение.Ключ, КлючИЗначение.Значение, ПараметрыСканирования);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет данные штрихкода по документу основанию.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Форма - ФормаКлиентскогоПриложения, Неопределено - форма-источник вызова
Процедура ЗаполнитьПоДокументуИОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма, Модуль_ШтрихкодированиеИС)
	
	Модуль_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	Модуль_ИнтеграцияИС = ОбщийМодуль("ИнтеграцияИС");
	
	Модуль_ШтрихкодированиеИС.СформироватьДанныеДокументаОснования(ПараметрыСканирования); 
	ДанныеДокументаОснования = Неопределено;
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
		ДанныеДокументаОснования = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
	КонецЕсли;
	
	ДанныеДокумента = Неопределено;
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары) Тогда
		ДанныеДокумента = ПолучитьИзВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары);
	ИначеЕсли Форма <> Неопределено Тогда
		ДанныеДокумента = ПолучитьДанныеДокументаИзФормы(Форма, ПараметрыСканирования);
	КонецЕсли;
	
	ОбновленныеКодыМаркировки = Новый Массив;    
	ОбновленаСпецификаИСМП = Ложь;
	
	ОбновлятьСерии = Модуль_ИнтеграцияИС.СерииИспользуются();
	
	Для каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		СтрокаОбновлена = Ложь;
		
		Если Модуль_ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП().Найти(СтрокаДанных.ВидПродукции) <> Неопределено Тогда
			Если МодульСпецификиИСМП().ЗаполнитьПоДокументуИОснованию(СтрокаДанных, ПараметрыСканирования, ДанныеДокументаОснования, ДанныеДокумента) Тогда
				СтрокаОбновлена = Истина;
				ОбновленаСпецификаИСМП = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбновлятьСерии И Не СтрокаОбновлена Тогда
			Если ЗаполнитьСериюПоДаннымДокументаИОснования(СтрокаДанных, ДанныеДокументаОснования, ДанныеДокумента) Тогда
				СтрокаОбновлена = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаОбновлена
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И ЗначениеЗаполнено(СтрокаДанных.Серия) Тогда
			
			НовыеРеквизиты = Новый Структура("Серия", СтрокаДанных.Серия);
			Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(
			СтрокаДанных.ШтрихкодУпаковки, НовыеРеквизиты);
		КонецЕсли;
		
		Если СтрокаОбновлена Тогда
			ОбновленныеКодыМаркировки.Добавить(СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	//Обновление данных дерева
	Если ОбновленаСпецификаИСМП Тогда
		МодульСпецификиИСМП().ОбновитьДеревоУпаковок(ДанныеПоШтрихкодам, ОбновленныеКодыМаркировки);
	КонецЕсли;
	
КонецПроцедуры

// Помещает дерево упаковок во временное хранилище. Адрес дерева упаковок помещает в каждые данные обработанных штрихкодов.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ПараметрыСканирования.ИдентификаторФормы;
	Если Идентификатор = Неопределено Тогда
		Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, Идентификатор);
	
	Для каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных.АдресДереваУпаковок = АдресДереваУпаковок;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства)
	
	Изменения = ЭлементыДляИзменения.Получить(СтрокаДанных);
	Если Изменения = Неопределено Тогда
		Изменения = Новый Массив;
	КонецЕсли;
	Для каждого ИмяРеквизита Из ИзмененныеСвойства Цикл
		Изменения.Добавить(ИмяРеквизита);
	КонецЦикла;
	ЭлементыДляИзменения.Вставить(СтрокаДанных, Изменения);
	
КонецПроцедуры

Функция МодульСпецификиИСМП()
	
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");	
	Возврат Модуль_ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный"); 
	
КонецФункции

Функция ЗаполнитьСохраненнымВыборомДанныеШтрихкода(ДанныеШтрихкода, СохраненныйВыбор)
	
	Модуль_ОбщегоНазначенияКлиентСервер = ОбщийМодуль("ОбщегоНазначенияКлиентСервер");
	
	ИзмененныеСвойства = Новый Массив;
	
	Для каждого КлючЗначение Из СохраненныйВыбор Цикл
		
		Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, КлючЗначение.Ключ)
			И ЗначениеЗаполнено(КлючЗначение.Значение)
			И Не ЗначениеЗаполнено(ДанныеШтрихкода[КлючЗначение.Ключ]) Тогда
			
			ДанныеШтрихкода[КлючЗначение.Ключ] = КлючЗначение.Значение;
			ИзмененныеСвойства.Добавить(КлючЗначение.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзмененныеСвойства;
	
КонецФункции

// Получает данные документа из формы в которой происходит сканирование. 
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма данные таблицы "Товары" требуется получить.
//   ПараметрыСканирования - Структура, Неопределено - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
//
// Возвращаемое значение:
//   Неопределено, ТаблицаЗначений, ДанныеФормыКоллекция - см. ИнициализицияТаблицыДанныхДокумента.
//
Функция ПолучитьДанныеДокументаИзФормы(Форма, ПараметрыСканирования, ПоместитьВоВременноеХранилище = Ложь)
	
	СтандартнаяОбработка = Истина;
	ДанныеДокумента = Неопределено;
	
	Модуль_ШтрихкодированиеИСПереопределяемый 		= ОбщийМодуль("ШтрихкодированиеИСПереопределяемый");
	Модуль_ОбщегоНазначенияКлиентСервер 			= ОбщийМодуль("ОбщегоНазначенияКлиентСервер");
	
	Модуль_ШтрихкодированиеИСПереопределяемый.ПриФормированииДанныхТабличнойЧастиТовары(
	Форма, ДанныеДокумента, ?(ПоместитьВоВременноеХранилище, ПараметрыСканирования, Неопределено), СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если СтрНачинаетсяС(Форма.ИмяФормы, "Обработка") Тогда //формы проверки и подбора
			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПодобраннаяМаркируемаяПродукция") Тогда
				Возврат Форма.ПодобраннаяМаркируемаяПродукция;
			КонецЕсли;
		Иначе
			Если Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
				И Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Товары")
				И Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары, "Номенклатура")
				И Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары, "Характеристика")
				И Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары, "Серия") Тогда
				Возврат Форма.Объект.Товары;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ДанныеДокумента;
	
КонецФункции

Функция ЗаполнитьСериюПоДаннымДокументаИОснования(СтрокаСКодомМаркировки, ДанныеДокументаОснования, ДанныеДокумента)
	
	Модуль_ОбщегоНазначенияКлиентСервер = ОбщийМодуль("ОбщегоНазначенияКлиентСервер");
	
	Если Не ЗначениеЗаполнено(СтрокаСКодомМаркировки.Номенклатура) Тогда
		Возврат Ложь;
	ИначеЕсли ЗначениеЗаполнено(СтрокаСКодомМаркировки.Серия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика",
	СтрокаСКодомМаркировки.Номенклатура, СтрокаСКодомМаркировки.Характеристика);
	
	НайденныеСтроки = Новый Массив;
	Если ДанныеДокументаОснования <> Неопределено Тогда
		НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
	Если НайденныеСтроки.Количество() <> 1 И ДанныеДокумента <> Неопределено Тогда
		НайденныеСтроки = ДанныеДокумента.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
	//Заполнение единственным вариантом из документа-основания или из документа
	Если НайденныеСтроки.Количество() = 1 Тогда
		СтрокаСКодомМаркировки.Серия = НайденныеСтроки[0].Серия;
		Возврат Истина;
	КонецЕсли;
	
	//Заполнение серией для которой проверка не завершена
	Если ДанныеДокумента <> Неопределено И НайденныеСтроки.Количество() Тогда
		ПроверятьИзКолонкиСтатусПроверки = Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "СтатусПроверкиГосИС");
		ПроверятьИзКолонкиКоличествоПодобрано = Модуль_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "КоличествоПодобрано");
		Если Не(ПроверятьИзКолонкиСтатусПроверки Или ПроверятьИзКолонкиКоличествоПодобрано) Тогда
			Возврат Ложь;
		КонецЕсли;
		НайденоСерий = 0;
		Серия = Неопределено;
		Для каждого ВариантВыбора Из НайденныеСтроки Цикл
			Если ПроверятьИзКолонкиСтатусПроверки И ВариантВыбора.СтатусПроверкиГосИС <> 1 Тогда
				Продолжить;
			ИначеЕсли ПроверятьИзКолонкиКоличествоПодобрано И ВариантВыбора.Количество <= ВариантВыбора.КоличествоПодобрано Тогда
				Продолжить;
			КонецЕсли;
			Если НайденоСерий = 0 Тогда
				НайденоСерий = 1;
				Серия = ВариантВыбора.Серия;
			Иначе
				НайденоСерий = НайденоСерий + ?(Серия = ВариантВыбора.Серия, 0, 1);
			КонецЕсли;
		КонецЦикла;
		Если НайденоСерий = 1 Тогда
			СтрокаСКодомМаркировки.Серия = Серия;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СозданияЗаписейВПулеКодовМаркировкеПоПолномуКМ

Функция СформироватьМассивПараметровПоПолномуКМ(ИсходныйДокумент, ДокументТСД)
	
	Модуль_ОбщегоНазначения = ОбщийМодуль("ОбщегоНазначения");
	
	ТЗСобранныеДанныеМарки = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
	ТЗСобранныеДанныеМарки.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, ЦРПТМарка, ЦРПТМарка_Длина, УпаковочныйЛист, KM_RawMrc, КМСсылка, KM_TNVED, СерияСсылка, ПолныйКодМаркировки", "Количество");
	
	МассивПолныйКМ = Новый Массив;
	
	//под массивы для видов продукции, пока разделил табак\альтернативный и никотиновый
	МассивТабак = Новый Массив;
	МассивАльтернативныйТабак = Новый Массив;
	МассивНикотиносодержащаяПродукция = Новый Массив;
	МассивОстальныеВидыПродукции = Новый Массив;
	
	ПараметрыДокументаТСД = Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументТСД.Ссылка, "ИсходныйДокумент, Организация, Клиент");
	
	Модуль_ИнтеграцияИСУТКлиентСервер = ОбщийМодуль("ИнтеграцияИСУТКлиентСервер");
		
	Для каждого СтрокаДока Из ТЗСобранныеДанныеМарки Цикл
		Если СтрокаДока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаДока.ЦРПТМарка) И ЗначениеЗаполнено(СтрокаДока.ПолныйКодМаркировки) Тогда						
			ВидПродукцииИС = Модуль_ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(СтрокаДока.Номенклатура.ОсобенностьУчета);
			
			Если СтрокаДока.ЦРПТМарка_Длина = 26 И ВидПродукцииИС = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
				ПолныйКодМаркировки = СтрокаДока.ПолныйКодМаркировки;	
			Иначе	
				ПолныйКодМаркировки = ЗаменитьТэгиВПолныйКодМаркировки(СтрокаДока.ПолныйКодМаркировки, ВидПродукцииИС);
			КонецЕсли;
						
			СтруктураПоКМ = Новый Структура;
			СтруктураПоКМ.Вставить("Штрихкод"				, ПолныйКодМаркировки);
			СтруктураПоКМ.Вставить("Количество" 			, 1);
			СтруктураПоКМ.Вставить("ВидПродукцииИС" 		, ВидПродукцииИС);
			СтруктураПоКМ.Вставить("ПроверяемыйДокумент" 	, ИсходныйДокумент.Ссылка);
			СтруктураПоКМ.Вставить("Организация" 			, ПараметрыДокументаТСД.Организация);
			СтруктураПоКМ.Вставить("Контрагент" 			, ПараметрыДокументаТСД.Клиент);
			СтруктураПоКМ.Вставить("ЦРПТМарка_Длина"		, СтрокаДока.ЦРПТМарка_Длина);
			
			Если ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табак Тогда
				МассивТабак.Добавить(СтруктураПоКМ);
			ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
				МассивАльтернативныйТабак.Добавить(СтруктураПоКМ);
			ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция Тогда
				МассивНикотиносодержащаяПродукция.Добавить(СтруктураПоКМ);
			Иначе
				МассивОстальныеВидыПродукции.Добавить(СтруктураПоКМ);	
			КонецЕсли;			
		КонецЕсли;		
	КонецЦикла;
	
	Если МассивТабак.Количество() > 0 Тогда
		МассивПолныйКМ.Добавить(МассивТабак);	
	КонецЕсли;
	
	Если МассивАльтернативныйТабак.Количество() > 0 Тогда
		МассивПолныйКМ.Добавить(МассивАльтернативныйТабак);	
	КонецЕсли;
	
	Если МассивНикотиносодержащаяПродукция.Количество() > 0 Тогда
		МассивПолныйКМ.Добавить(МассивНикотиносодержащаяПродукция);	
	КонецЕсли;
	
	Если МассивОстальныеВидыПродукции.Количество() > 0 Тогда
		МассивПолныйКМ.Добавить(МассивОстальныеВидыПродукции);	
	КонецЕсли;
	
	Возврат МассивПолныйКМ;
	
КонецФункции

//процедура с обработки ПроверкаИПодборПродукцииИСМП с формы ПроверкаИПодбор
//добавил возможность передачи сразу массива кодов для записи
&НаСервере
Процедура РучнойВводШтрихкодаЗавершение(ДанныеШтрихкодаМассивПоВидамПродукции, ДополнительныеПараметры)
	
	//на типовом релизе УТ 11.5.14.69 замечено разное поведение при внесении записей в ПУЛ.
	//Через поиск по штрихкоду(ручное добавление в данную строку), в ПУЛ запись записывается без скобок 01 и 21
	//Через загрузку кодов маркировки, в ПУЛ запись записывается со скобками (01) и (21)
		
	Модуль_ШтрихкодированиеИСКлиентСервер 				= ОбщийМодуль("ШтрихкодированиеИСКлиентСервер");
	Модуль_РазборКодаМаркировкиИССлужебныйКлиентСервер 	= ОбщийМодуль("РазборКодаМаркировкиИССлужебныйКлиентСервер"); 
	Модуль_РазборКодаМаркировкиИССлужебныйВызовСервера 	= ОбщийМодуль("РазборКодаМаркировкиИССлужебныйВызовСервера");
	Модуль_РазборКодаМаркировкиИССлужебный 				= ОбщийМодуль("РазборКодаМаркировкиИССлужебный");
	Модуль_ШтрихкодированиеИСВызовСервера 				= ОбщийМодуль("ШтрихкодированиеИСВызовСервера");
	Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер 	= ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	Модуль_ШтрихкодированиеИСМПВызовСервера 			= ОбщийМодуль("ШтрихкодированиеИСМПВызовСервера");
    Модуль_ШтрихкодированиеИС 							= ОбщийМодуль("ШтрихкодированиеИС");
	
	ВидМаркируемойПродукцииПредыдущий = Неопределено;
	
	Для каждого ДанныеШтрихкодаМассив Из ДанныеШтрихкодаМассивПоВидамПродукции Цикл	
		
		ДанныеШтрихкодов = Новый Массив;
		
		Для каждого ДанныеШтрихкода Из ДанныеШтрихкодаМассив Цикл				
			Если ДанныеШтрихкода = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ВидМаркируемойПродукции = ДанныеШтрихкода.ВидПродукцииИС;
			
			Если ВидМаркируемойПродукцииПредыдущий <> ВидМаркируемойПродукции Тогда
				ПараметрыСканирования = Модуль_ШтрихкодированиеИС.ПараметрыСканирования(ДанныеШтрихкода.ПроверяемыйДокумент, Неопределено, ВидМаркируемойПродукции);				
			КонецЕсли;
			
			ДанныеШтрихкода.Вставить("ПараметрыСканирования", ПараметрыСканирования);
			
			Если ДанныеШтрихкода.ЦРПТМарка_Длина = 26 И ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
				
				ДанныеШтрихкодаНовая = Новый Структура;
				
				Для Каждого ЭлементКопирования Из ДанныеШтрихкода Цикл					
					ДанныеШтрихкодаНовая.Вставить(ЭлементКопирования.Ключ, ЭлементКопирования.Значение);					
				КонецЦикла;
				
				Модуль_ШтрихкодированиеИСКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкодаНовая);
				
				ПараметрыСканированияКМ = ПараметрыСканированияКодовМаркировки(ДанныеШтрихкодаНовая);
				
				ПримечаниеКРазборуШтрихкода                    = Неопределено;
				ПользовательскиеПараметрыРазбораКодаМаркировки = Модуль_РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
				
				НастройкиРазбора = Модуль_РазборКодаМаркировкиИССлужебныйВызовСервера.НастройкиРазбораКодаМаркировки(ВидМаркируемойПродукции);
				
				ДанныеРазбора = Модуль_РазборКодаМаркировкиИССлужебныйКлиентСервер.РазобратьКодМаркировки(
				ДанныеШтрихкодаНовая.Штрихкод, ВидМаркируемойПродукции, ПримечаниеКРазборуШтрихкода, НастройкиРазбора, Модуль_РазборКодаМаркировкиИССлужебный, ПользовательскиеПараметрыРазбораКодаМаркировки);
				
				ДанныеРазбораИРезультат = Новый Структура;
				ДанныеРазбораИРезультат.Вставить("ДанныеРазбора",               ДанныеРазбора);
				ДанныеРазбораИРезультат.Вставить("ПримечаниеКРазборуШтрихкода", ПримечаниеКРазборуШтрихкода);
				
				КешДанныхРазбора = Новый Соответствие;
				КешДанныхРазбора.Вставить(ДанныеШтрихкодаНовая.Штрихкод, ДанныеРазбораИРезультат);
				
				ПараметрыНормализацииКМ = Модуль_РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляХэшаНормализации(ВидМаркируемойПродукции);
				НормализованныйШтрихкод = Модуль_РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(ДанныеРазбора, ВидМаркируемойПродукции, ПараметрыНормализацииКМ);
				
				Модуль_ПроверкаИПодборПродукцииИСМПКлиентСервер.ДополнитьДанныеШтрихкодаПолнымКодомМаркировки(ДанныеШтрихкодаНовая, ДанныеРазбора, ВидМаркируемойПродукции, ПараметрыСканированияКМ);
				
				ДанныеШтрихкодаНовая.Штрихкод = НормализованныйШтрихкод;
				Модуль_ШтрихкодированиеИСМПВызовСервера.СохранениеПолногоКодаМаркировки(ДанныеШтрихкодаНовая, ПараметрыСканированияКМ);					
			КонецЕсли;
			
			ПараметрыСканированияКМ = ПараметрыСканированияКодовМаркировки(ДанныеШтрихкода);
			
			ДанныеРазбора = Модуль_РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(ДанныеШтрихкода.Штрихкод, ВидМаркируемойПродукции); 
			Если ДанныеРазбора = Неопределено Тогда
				НормализованныйШтрихкод = ДанныеШтрихкода.Штрихкод;
			Иначе
				НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
			КонецЕсли;
			
			Модуль_ШтрихкодированиеИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
			
			Штрихкод = Модуль_ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(ДанныеШтрихкода.Штрихкод);
			
			ДанныеШтрихкодаСтруктура = Новый Структура(
			"Штрихкод, ШтрихкодBase64, Количество",
			Штрихкод, ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода.Количество);
			
			ДанныеШтрихкодов.Добавить(ДанныеШтрихкодаСтруктура);
			
			ВидМаркируемойПродукцииПредыдущий = ВидМаркируемойПродукции;
		КонецЦикла;
		
		Если ДанныеШтрихкодов.Количество() > 0 Тогда
			Попытка
				РезультатОбработкиШтрихкодов = Модуль_ШтрихкодированиеИС.ОбработатьШтрихкоды(
				ДанныеШтрихкодов, ДанныеШтрихкодаМассив[0].ПараметрыСканирования,
				Неопределено, Новый УникальныйИдентификатор);
			Исключение
			КонецПопытки;	
		КонецЕсли;
		
	КонецЦикла;	
                                                                           			
КонецПроцедуры

&НаСервере
Функция ПараметрыСканированияКодовМаркировки(ДанныеШтрихкода)
	
	ДоступнаПечатьЭтикеток 	= Ложь;
	ВидМаркируемойПродукции = ДанныеШтрихкода.ВидПродукцииИС;
	ПроверяемыйДокумент    	= ДанныеШтрихкода.ПроверяемыйДокумент;
	Организация    			= ДанныеШтрихкода.Организация;
	Контрагент              = ДанныеШтрихкода.Контрагент;
	ПараметрыСканирования   = ДанныеШтрихкода.ПараметрыСканирования;
	
	ЭтоМаркировкаИСМП = ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП");
	
	ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидМаркируемойПродукции);
	
	ДанныеВыбора = Неопределено;
	
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки                          = Истина;
	ПараметрыСканирования.КэшМаркируемойПродукции                            = Неопределено;
	ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции                 = ДанныеВыбора;
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции     = Истина;
	ПараметрыСканирования.ПроверятьДублиКодовМаркировки                      = "Элементы";
	ПараметрыСканирования.ВозможнаЗагрузкаТСД                                = Истина;
	ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева      = Истина;
	ПараметрыСканирования.ДоступнаПечатьЭтикеток                             = ДоступнаПечатьЭтикеток;
	ПараметрыСканирования.КонтрольУникальностиКодовМаркировки                = Ложь;
	ПараметрыСканирования.СсылкаНаОбъект                                     = ПроверяемыйДокумент;
	ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки                 = Ложь;
	
	Если Не ПараметрыСканирования.Свойство("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП") Тогда
		ПараметрыСканирования.Вставить("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП",Ложь);
	КонецЕсли;
	
	Если Не ПараметрыСканирования.Свойство("ЗапрашиватьДанныеСервисаИСМП") Тогда
		ПараметрыСканирования.Вставить("ЗапрашиватьДанныеСервисаИСМП", Ложь);
	Иначе
		Если ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП = "ПоУмолчанию" Тогда 
			ПараметрыСканирования.Вставить("ЗапрашиватьДанныеСервисаИСМП", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.Свойство("КонтролироватьВладельцевКодовМаркировкиИСМП") Тогда
		ПараметрыСканирования.Вставить("КонтролироватьВладельцевКодовМаркировкиИСМП",Ложь);
	КонецЕсли;
	
	Если Не ПараметрыСканирования.Свойство("КонтролироватьСтатусыКодовМаркировкиИСМП") Тогда
		ПараметрыСканирования.Вставить("КонтролироватьСтатусыКодовМаркировкиИСМП",Ложь);
	КонецЕсли;
	
	ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок = ПараметрыСканирования.ПоддерживаютсяОперацииАгрегации;
	
	Модуль_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	
	Если ДоступнаПечатьЭтикеток Тогда
		Если Модуль_ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(ВидМаркируемойПродукции) Тогда
			ПараметрыСканирования.СтатусКодаМаркировкиПоУмолчанию = ПредопределенноеЗначение(
			"Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован");
		Иначе
			ПараметрыСканирования.СтатусКодаМаркировкиПоУмолчанию = ПредопределенноеЗначение(
			"Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен");
		КонецЕсли;
	КонецЕсли;
	
	КонтрольСоставаУпаковок = Истина;
	
	ПараметрыСканирования.КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП = КонтрольСоставаУпаковок
	И ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП;
	
	ПараметрыПроверкиКодовМаркировки = СформироватьПараметрыПроверкиКодовМаркировки(ПроверяемыйДокумент, Организация, Контрагент);	
	
	Если ЭтоМаркировкаИСМП Тогда
		ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ 	= Истина;
		ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП	= Истина;
		
		Если ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности") Тогда
			ПараметрыСканирования.ЗаполнятьСрокГодности = Ложь;	
		КонецЕсли;
		
		Если ПараметрыСканирования.Свойство("ЗаполнятьДанныеВЕТИС") Тогда
			ПараметрыСканирования.ЗаполнятьДанныеВЕТИС = Ложь;	
		КонецЕсли;
	КонецЕсли; 
	
	Если ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельцевКодовМаркировки Тогда
		ПараметрыСканирования.Владелец                                    = ПараметрыПроверкиКодовМаркировки.Владелец;
		ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП = Истина;
	Иначе
		ПараметрыСканирования.Владелец = Неопределено;
		ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП = Ложь;
	КонецЕсли;
	
	Если ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки Тогда
		ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП = Истина;
	Иначе
		ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП = Ложь;
	КонецЕсли;
	
	ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП = Ложь;
	
	Возврат ПараметрыСканирования;
	
КонецФункции

&НаСервере
функция СформироватьПараметрыПроверкиКодовМаркировки(ПроверяемыйДокумент, Организация, Контрагент)
	
	РежимПодбораСуществующихУпаковок = Истина;
	
	Модуль_ЭлектронноеВзаимодействиеИСМП = ОбщийМодуль("ЭлектронноеВзаимодействиеИСМП");
	
	ПараметрыПроверкиКодовМаркировки = Новый Структура();
	ПараметрыПроверкиКодовМаркировки.Вставить("ОтсутствуетПодключениеИСМП", Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ЗапрашиватьДанныеСервиса",
	Не Модуль_ЭлектронноеВзаимодействиеИСМП.ЗавершенОбменПоЭДО(ПроверяемыйДокумент));
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыКодовМаркировки");
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыУпаковок");
	
	Модуль_ПроверкаИПодборПродукцииИСМП = ОбщийМодуль("ПроверкаИПодборПродукцииИСМП");
	Модуль_ИнтеграцияИСВызовСервера = ОбщийМодуль("ИнтеграцияИСВызовСервера");
	
	Если РежимПодбораСуществующихУпаковок
		Или Модуль_ПроверкаИПодборПродукцииИСМП.КонтрагентНеРезидент(Контрагент) Тогда
		ИННВладельца = Модуль_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация).ИНН;
		Владелец     = Организация;
	Иначе
		ИННВладельца = Модуль_ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Контрагент).ИНН;
		Владелец     = Контрагент;
	КонецЕсли;
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтатусыКодовМаркировки",    Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельцевКодовМаркировки", Ложь);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ИННВладельца",            ИННВладельца);
	ПараметрыПроверкиКодовМаркировки.Вставить("Владелец",                Владелец);
	ПараметрыПроверкиКодовМаркировки.Вставить("ОбратноеСканирование",    Ложь);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыйСпособВводаВОборот", Новый Массив);
	
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВложенностьУпаковок", Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеВложенияАгрегатов",       Неопределено);
	
	Возврат ПараметрыПроверкиКодовМаркировки;
	
КонецФункции

функция ЗаменитьТэгиВПолныйКодМаркировки(ПолныйКодМаркировки, ВидПродукцииИС)
	
	ЭтоТабак = ЭтоТабакПоВидыПродукцииИС(ВидПродукцииИС);
	
	//по 93 тэгу и 240 при табачке не надо сохранять символ 29
	//СпецСимвол = ?(ЭтоТабак, "", Символ(29)); в утапе 11.5.11.56 даный спецсимвол нужен, также нужен и при 8005
	СпецСимвол = ?(ЭтоТабак, Символ(29), "");
	
	//подмена скобок
	ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "(01)"	, "01");
	ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "(21)"	, "21");
	ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "(8005)"	, СпецСимвол + "8005");
	
	ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "[01]"	, "01");
	ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "[21]"	, "21");
	ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "[8005]"	, СпецСимвол + "8005");
	
	//подмена скобок и добавление символа 29
	ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "(91)"	, Символ(29) + "91");
	ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "(92)"	, Символ(29) + "92");
	ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "(93)"	, Символ(29) + "93");
	ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "(240)"	, Символ(29) + "240");
	
	ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "[91]"	, Символ(29) + "91");
	ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "[92]"	, Символ(29) + "92");
	ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "[93]"	, Символ(29) + "93");
	ПолныйКодМаркировки = СтрЗаменить(ПолныйКодМаркировки, "[240]"	, Символ(29) + "240");
	
	Если СтрНайти(ПолныйКодМаркировки, "(3103)") > 0 Тогда
		ПолныйКодМаркировки = Лев(ПолныйКодМаркировки, СтрНайти(ПолныйКодМаркировки, "(3103)") - 1);	
	КонецЕсли;
	
	Если СтрНайти(ПолныйКодМаркировки, "[3103]") > 0 Тогда
		ПолныйКодМаркировки = Лев(ПолныйКодМаркировки, СтрНайти(ПолныйКодМаркировки, "[3103]") - 1);	
	КонецЕсли;
	
	Возврат ПолныйКодМаркировки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

Функция ПолучитьВСДПоТовару(Номенклатура)
	
	ДанныеВСД = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатаМобайл_ВСДПоТовару.ВСД КАК ИдентификаторПроисхожденияВЕТИС,
	|	ДатаМобайл_ВСДПоТовару.ВСД.СрокГодностиНачалоПериода КАК СрокГодности
	|ИЗ
	|	РегистрСведений.ДатаМобайл_ВСДПоТовару КАК ДатаМобайл_ВСДПоТовару
	|ГДЕ
	|	ДатаМобайл_ВСДПоТовару.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДанныеВСД = Выборка;	
	КонецЕсли; 
	
	Возврат ДанныеВСД;
	
КонецФункции

Функция ЗаписатьВТЧДанныеОтчетаПроизводственнойЛинии(ВидПродукции)
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Или ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС 
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода Тогда
		Возврат Истина;	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоТабакПоВидыПродукцииИС(ВидМаркируемойПродукцииДокумента) Экспорт
	
	Модуль_ИнтеграцияИСКлиентСервер = ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	
	Попытка
		ЭтоТабак = Модуль_ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидМаркируемойПродукцииДокумента);	
	Исключение
		ЭтоТабак = Ложь;
	КонецПопытки;
	
	Возврат ЭтоТабак;
	
КонецФункции

Функция ПолучитьВложенностьУпаковокПоШтрихкоду(ЗначениеШтрихкода) 
	
	Если СтрНайти(ЗначениеШтрихкода, "(91)") > 0 Тогда
		ЗначениеШтрихкода = Лев(ЗначениеШтрихкода, СтрНайти(ЗначениеШтрихкода, "(91)") - 1);	
	КонецЕсли;
	
	Если СтрНайти(ЗначениеШтрихкода, "(92)") > 0 Тогда
		ЗначениеШтрихкода = Лев(ЗначениеШтрихкода, СтрНайти(ЗначениеШтрихкода, "(92)") - 1);	
	КонецЕсли;
	
	Если СтрНайти(ЗначениеШтрихкода, "(93)") > 0 Тогда
		ЗначениеШтрихкода = Лев(ЗначениеШтрихкода, СтрНайти(ЗначениеШтрихкода, "(93)") - 1);	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Упаковка,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки КАК ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода КАК ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Упаковка КАК Ед,
	|	1 КАК Уровень
	|ПОМЕСТИТЬ втПервыйУровень
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = &ЗначениеШтрихкода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШК.Штрихкод.Ссылка КАК Упаковка,
	|	ВложенныеШК.Штрихкод.ТипУпаковки КАК ТипУпаковки,
	|	ВложенныеШК.Штрихкод.ТипШтрихкода КАК ТипШтрихкода,
	|	ВложенныеШК.Штрихкод.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ВложенныеШК.Штрихкод.Номенклатура КАК Номенклатура,
	|	ВложенныеШК.Штрихкод.Характеристика КАК Характеристика,
	|	ВложенныеШК.Штрихкод.Упаковка КАК Ед,
	|	2 КАК Уровень
	|ПОМЕСТИТЬ втВторойУровень
	|ИЗ
	|	втПервыйУровень КАК втПервыйУровень
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ВложенныеШК
	|		ПО втПервыйУровень.Упаковка = ВложенныеШК.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныеШК.Штрихкод.Ссылка КАК Упаковка,
	|	ВложенныеШК.Штрихкод.ТипУпаковки КАК ТипУпаковки,
	|	ВложенныеШК.Штрихкод.ТипШтрихкода КАК ТипШтрихкода,
	|	ВложенныеШК.Штрихкод.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ВложенныеШК.Штрихкод.Номенклатура КАК Номенклатура,
	|	ВложенныеШК.Штрихкод.Характеристика КАК Характеристика,
	|	ВложенныеШК.Штрихкод.Упаковка КАК Ед,
	|	3 КАК Уровень
	|ПОМЕСТИТЬ втТретийУровень
	|ИЗ
	|	втВторойУровень КАК втВторойУровень
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ВложенныеШК
	|		ПО втВторойУровень.Упаковка = ВложенныеШК.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПервыйУровень.Упаковка КАК Упаковка,
	|	втПервыйУровень.ТипУпаковки КАК ТипУпаковки,
	|	втПервыйУровень.ТипШтрихкода КАК ТипШтрихкода,
	|	втПервыйУровень.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	втПервыйУровень.Номенклатура КАК Номенклатура,
	|	втПервыйУровень.Характеристика КАК Характеристика,
	|	втПервыйУровень.Ед КАК Ед,
	|	втПервыйУровень.Уровень КАК Уровень
	|ПОМЕСТИТЬ втВсяВложенность
	|ИЗ
	|	втПервыйУровень КАК втПервыйУровень
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втВторойУровень.Упаковка,
	|	втВторойУровень.ТипУпаковки,
	|	втВторойУровень.ТипШтрихкода,
	|	втВторойУровень.ЗначениеШтрихкода,
	|	втВторойУровень.Номенклатура,
	|	втВторойУровень.Характеристика,
	|	втВторойУровень.Ед,
	|	втВторойУровень.Уровень
	|ИЗ
	|	втВторойУровень КАК втВторойУровень
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втТретийУровень.Упаковка,
	|	втТретийУровень.ТипУпаковки,
	|	втТретийУровень.ТипШтрихкода,
	|	втТретийУровень.ЗначениеШтрихкода,
	|	втТретийУровень.Номенклатура,
	|	втТретийУровень.Характеристика,
	|	втТретийУровень.Ед,
	|	втТретийУровень.Уровень
	|ИЗ
	|	втТретийУровень КАК втТретийУровень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсяВложенность.Упаковка КАК Упаковка,
	|	втВсяВложенность.ТипУпаковки КАК ТипУпаковки,
	|	втВсяВложенность.ТипШтрихкода КАК ТипШтрихкода,
	|	втВсяВложенность.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	втВсяВложенность.Номенклатура КАК Номенклатура,
	|	втВсяВложенность.Характеристика КАК Характеристика,
	|	втВсяВложенность.Ед КАК Ед,
	|	втВсяВложенность.Уровень КАК Уровень,
	|	ШтрихкодыУпаковок.Количество КАК Количество,
	|	ШтрихкодыУпаковок.Серия КАК Серия
	|ИЗ
	|	втВсяВложенность КАК втВсяВложенность
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ПО (втВсяВложенность.Упаковка = ШтрихкодыУпаковок.Ссылка)
	|ГДЕ
	|	втВсяВложенность.Уровень В
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(втИтог.Уровень)
	|			ИЗ
	|				втВсяВложенность КАК втИтог)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Уровень";
	
	Запрос.УстановитьПараметр("ЗначениеШтрихкода", ЗначениеШтрихкода); 
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьВложенныеТоварыВУпаковку(ДокументТСД)
	
	ТЗСобранныеДанныеУпаковки = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
	ТЗРезультат = ТЗСобранныеДанныеУпаковки.СкопироватьКолонки();
	ТЗСобранныеДанныеУпаковки.Свернуть("ЯчейкаСсылка, УпаковочныйЛист", "Количество");
	
	Для каждого СтрокаПодбора Из ТЗСобранныеДанныеУпаковки Цикл
		Если ЗначениеЗаполнено(СтрокаПодбора.УпаковочныйЛист) Тогда 			
			ТЗВложенности = ПолучитьВложенностьУпаковокПоШтрихкоду(СтрокаПодбора.УпаковочныйЛист);
			
			Для каждого СтрВложенности Из ТЗВложенности Цикл
				НоваяСтрока = ТЗРезультат.Добавить();
				
				НоваяСтрока.Номенклатура 			   = СтрВложенности.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = СтрВложенности.Характеристика;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(СтрВложенности.Ед), СтрВложенности.Ед, СтрВложенности.Номенклатура.ЕдиницаИзмерения);
				НоваяСтрока.СерияСсылка  	 = СтрВложенности.Серия;
				НоваяСтрока.ЯчейкаСсылка 	 = СтрокаПодбора.ЯчейкаСсылка;
				НоваяСтрока.Количество   	 = ?(СтрВложенности.Количество = 0, 1, СтрВложенности.Количество); //НоваяСтрока.Количество   	 = СтрокаПодбора.Количество * ?(СтрВложенности.Количество = 0, 1, СтрВложенности.Количество);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТЗСобранныеДанныеМарки = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
	ТЗСобранныеДанныеМарки.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, KM_GTIN, СерияСсылка, ЯчейкаСсылка, УпаковочныйЛист", "Количество");
	
	Для каждого СтрокаПодбора Из ТЗСобранныеДанныеМарки Цикл
		Если Не ЗначениеЗаполнено(СтрокаПодбора.УпаковочныйЛист) Тогда
			НоваяСтрока = ТЗРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодбора);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗРезультат;
	
КонецФункции

Функция ПолучитьКМИзПулаПоЗаказНаЭмиссию(СсылкаНаДок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ПулКодовМаркировкиСУЗ.КодМаркировки КАК ЗначениеШтрихкода,
	|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|ГДЕ
	|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = &ЗаказНаЭмиссию";
	
	Запрос.УстановитьПараметр("ЗаказНаЭмиссию", СсылкаНаДок);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПолучитьТаблицуШКПоВидуПродукции(ТаблицаШтрихкодыУпаковок, ВидПродукцииИС) Экспорт
	
	ТаблицаВозврата = ТаблицаШтрихкодыУпаковок.СкопироватьКолонки();
	Модуль_ИнтеграцияИСУТКлиентСервер = ОбщийМодуль("ИнтеграцияИСУТКлиентСервер");
	
	Для каждого СтрокаШК Из ТаблицаШтрихкодыУпаковок Цикл
		СпрШКСсылка = СтрокаШК.ШтрихкодУпаковки;
		ВидПродукцииИСШК = Неопределено;
		
		ТабВложенности = ПолучитьВложенностьУпаковокПоШтрихкоду(СпрШКСсылка.ЗначениеШтрихкода);
		
		Если ТабВложенности.Количество() = 0 Тогда
			Попытка ВидПродукцииИСШК = Модуль_ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(СпрШКСсылка.Номенклатура.ОсобенностьУчета);
			Исключение КонецПопытки; 
		Иначе			
			Попытка ВидПродукцииИСШК = Модуль_ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ТабВложенности[0].Номенклатура.ОсобенностьУчета);
			Исключение КонецПопытки;
		КонецЕсли;
		
		Если ВидПродукцииИСШК = ВидПродукцииИС Тогда
			НоваяСтрока = ТаблицаВозврата.Добавить();
			НоваяСтрока.ШтрихкодУпаковки = СпрШКСсылка; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция ОписаниеGTINИСЭтоНабор(GTIN)
	
	ЭтоНабор = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОписаниеGTINИС.GTIN КАК GTIN
	|ИЗ
	|	РегистрСведений.ОписаниеGTINИС КАК ОписаниеGTINИС
	|ГДЕ
	|	ОписаниеGTINИС.GTIN ПОДОБНО ""%"" + &GTIN
	|	И ОписаниеGTINИС.ВидУпаковки = ЗНАЧЕНИЕ(Перечисление.ВидыУпаковокИС.Набор)";
	
	Запрос.УстановитьПараметр("GTIN", GTIN);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если Не РезультатЗапроса.Пустой() Тогда
		ЭтоНабор = Истина;
	Конецесли;
	
	Возврат ЭтоНабор; 
		
КонецФункции

#КонецОбласти