
#Область ПрограммныйИнтерфейс

// Обработка строки табличной части - вызывается из клиентского общего модуля при необходимости выполнения на сервере.
//
// Параметры:
//  ТекущаяСтрока	  - Структура - данные обрабатываемой строки, содержит в том числе:
//  	* НомерСтроки - Число
//  СтруктураДействий - Структура - описывает действия, где Ключ - наименование действия, Значение - Структура - параметры действия, возможно передавать следующие поля:
//		* ПроверитьХарактеристикуПоВладельцу - СправочникСсылка.ХарактеристикиНоменклатуры
//		* ПроверитьЗаполнитьУпаковкуПоВладельцу - СправочникСсылка.УпаковкиЕдиницыИзмерения
//		* ПересчитатьКоличествоЕдиниц - Неопределено
//		* ПересчитатьКоличествоЕдиницСуффикс - Строка - Суффикс
//		* ПересчитатьКоличествоУпаковок - Неопределено
//		* ПересчитатьКоличествоУпаковокСуффикс - Строка - Суффикс
//		* ПересчитатьКоличествоУпаковокСуффиксИзОтклонения - Строка - Суффикс
//		* ПересчитатьВесОбъем - Строка - Суффикс
//		* ЗаполнитьЦенуПродажи - см. ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ
//		* ЗаполнитьПомещение - Структура:
//			** Склад - СправочникСсылка.Склады
//			** Номенклатура - СправочникСсылка.Номенклатура - (Необязательный)
//			** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - (Необязательный)
//		* ЗаполнитьПродавца - Структура:
//			** Продавец - СправочникСсылка.Пользователи
//		* ПересчитатьСумму - Строка
//		* ПересчитатьСуммуСУчетомРучнойСкидки - Структура:
//			** Очищать - Булево
//			** ПересчитыватьСуммуРучнойСкидки - Булево
//			** ИмяКоличества - Строка
//		* ПересчитатьСуммуСУчетомАвтоматическойСкидки - Структура:
//			** Очищать - Булево
//		* ПересчитатьЦенуПоСумме - Строка
//		* ПересчитатьЦенуЗаУпаковку - Число
//		* ПересчитатьСуммуНДС - см. ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ
//		* ЗаполнитьСтавкуНДС - Структура:
//			** НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС
//			** Дата - Дата
//		* ОбработатьШтрихкоды - см. ШтрихкодированиеНоменклатурыКлиентСервер.ПараметрыОбработкиШтрихкодов
//		* ЗаполнитьНоменклатуруПоНоменклатуреПартнера - Неопределено
//		* ЗаполнитьНоменклатуруПартнераПоНоменклатуре - Неопределено
//		* ЗаполнитьФлагИзлишекПорча - Неопределено
//		* ЗаполнитьФлагРасхождение - Неопределено
//		* ПересчитатьКоличествоУпаковокОтклонение - Неопределено
//		* ОчиститьСуммуВзаиморасчетов - Неопределено
//		* ПересчитатьКоличествоНеОтгружать - Неопределено
//		* ЗаполнитьПризнакАдресногоХранения - Структура:
//			** Склад - СправочникСсылка.Склады
//			** Помещение - СправочникСсылка.СкладскиеПомещения
//			** Дата - Дата
//		* ЗаполнитьСтатьюАналитикуРасходовНоменклатуры - см. ДоходыИРасходыКлиентСервер.ВставитьДействиеЗаполнитьСтатьюАналитикуРасходовНоменклатуры.СтруктураДействий
//  КэшированныеЗначения - Структура - Сохраненные значения параметров, используемых при обработке.
//
Процедура ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		КэшированныеЗначения.ПравоРегистрацииШтрихкодовНоменклатурыДоступно = ШтрихкодированиеНоменклатурыСервер.ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
	КонецЕсли;
	
	ОбработкаТабличнойЧастиСерверЛокализация.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПроверитьАссортиментСтроки(                             										ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьНоменклатуруПоНоменклатуреПартнераВСтрокеТЧ( 										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьНоменклатуруПартнераПоНоменклатуреВСтрокеТЧ( 										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьСопоставленнуюНоменклатуруПартнераВСтрокеТЧ( 										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(     										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(  										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьКорректностьЗаполнитьХарактеристикиКиЗ(												ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьЗаполнитьСкладВСтрокеТЧ(																ТекущаяСтрока, СтруктураДействий);
	ПроверитьЗаполнитьОбеспечениеВСтрокеТЧДокументаПродажи(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоНеОтгружатьСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьGTINВСтроке(                                                                           ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоФактуВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксИзОтклоненияВСтрокеТЧ(	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоПоРНПТВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоОтклонение(						    ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоВесу(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоОбъему(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьВесОбъемВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьВидЦеныВСтрокеТЧ(									ТекущаяСтрока, СтруктураДействий); 
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаказаЗаУпаковкуВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьЗаполнитьВидЦеныВСтрокеТЧ(                              								ТекущаяСтрока, СтруктураДействий); 
	ЗаполнитьЦенуПродажиВСтрокеТЧ(                          										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПродажиПоАссортиментуВСтрокеТЧ(            										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуЗакупкиВСтрокеТЧ(                          										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьУсловияПродажВСтрокеТЧ(                        										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьУсловияРозничныхПродажВСтрокеТЧ(               										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьУсловияЗакупокВСтрокеТЧ(                       										ТекущаяСтрока, СтруктураДействий);
	СкорректироватьСтавкуНДСВСтрокеТЧ(                            									ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеТЧ(                            										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьКодТНВЭДПоНоменклатуреВСтрокеТЧ(               										ТекущаяСтрока, СтруктураДействий);
	ПересчитатьЦенуСНДС(                                    										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуАвтоматическойСкидкиВСтрокеТЧ(
		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(									ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСуффиксВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧРасхождения(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПоСуммеВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуПродажиПоСуммеСНДС(                     										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомСкидкиБонуснымиБалламиВСтрокеТЧ(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСУчетомПогрешностиОкругленияВСтрокеТЧ(  										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСВСтрокеТЧ(                           										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДССуффиксВСтрокеТЧ(															ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДСВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДССуффиксВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРеглВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПРВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуНУВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВРВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьНДСРеглВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиНДСВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВознагражденияВСтрокеТЧ(                   	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.УстановитьАктивностьСтроки(                             	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьПолучитьВариантКомплектации(                   										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагиРасхождениеИИзлишекПорча(                 	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВзаиморасчетовВСтрокеТЧ(                   	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ОчиститьАвтоматическуюСкидкуВСтрокеТЧ(                  	ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьСодержаниеУслуги(                              										ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьСтатьюАналитикуРасходовНоменклатуры(            										ТекущаяСтрока, СтруктураДействий);
	ОчиститьСтатьюАналитикуРасходов(            													ТекущаяСтрока, СтруктураДействий);
	ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки(                                          ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьНастройкуСчетовУчетаПоУмолчанию(                                                       ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПредставлениеНастройкиСчетовУчета(                                                     ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПартнера(                                      	ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПомещение(                                     										ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПродавца(                                      										ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьУчетноеКоличествоНоменклатуры(                 										ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно(										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакБезВозвратнойТары(	                     	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакОтмененоБезВозвратнойТары(              	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакАктивностьБезВозвратнойТары(            	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьДубликатыЗависимыхРеквизитов(                  	ТекущаяСтрока, СтруктураДействий);
	ПроверитьСериюРассчитатьСтатус(                         										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСверхЗаказаВСтрокеТЧ(                   	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	УстановитьПризнакДляЗаполненияТекстовогоОписания(       										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьВариантОтраженияКорректировкиРеализации(       	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.НоменклатураПриИзмененииПереопределяемый(               	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ХарактеристикаПриИзмененииПереопределяемый(             	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПризнакПринимаетсяКНУ(           														ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПризнакАдресногоХранения(                     											ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПризнакИспользованияПомещений(															ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеОтгрузки(                          ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеПриемки(                           ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхождения(                                       ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияПриемка(                  ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияОтгрузка(                 ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментария(							ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакТоварногоМестаТребуетсяОбработка(			ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПризнакДвиженияПоСкладскимРегистрам(ТекущаяСтрока, СтруктураДействий);	
	ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения( ТекущаяСтрока, СтруктураДействий);
	ПриИзмененииТипаНоменклатуры( ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьСлужебныеРеквизитыПоНазначениюВСтрокеТЧ(           									ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПроверитьЗаполнитьНазначениеВСтрокеТЧ(                  	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагОбособленноПоНазначению(                       ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПриИзмененииНазначенияВСтрокеТЧ(                            ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтрануПроисхожденияДляНомераГТД(                                                       ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьСтрануПроисхожденияНоменклатуры(                                                       ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСпособОпределенияСебестоимости(                    ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСпособОпределенияСебестоимостиСтрокой(             ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьНаправлениеДеятельности(																ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПодразделениеВСтрокеТЧ(																ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьНеобходимостьОбновленияКолонкиДоступно(ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьКолонкуДоступно(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбновитьКэшНоменклатура(ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках(								ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПризнакРасхождениеЗаказ(                                                               ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	// << 30.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-862
	КР_ЗаполнитьПризнакМаркируемаяПродукция(ТекущаяСтрока, СтруктураДействий);
	// >> 30.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-862
	
	// << 14.02.2023 Маскаев П.Ю., КРОК, JIRA№ A2105505-1166
	КР_ЗаполнитьВыданоПринято(ТекущаяСтрока, СтруктураДействий);
	КР_ЗаполнитьКассира(ТекущаяСтрока, СтруктураДействий);
	// >> 14.02.2023 Маскаев П.Ю., КРОК, JIRA№ A2105505-1166
	
	// << 16.03.2023 Маскаев П.Ю., КРОК, JIRA№ A2105505-1153
	КР_ЗаполнитьСостояниеОтправкиВСБИС(ТекущаяСтрока, СтруктураДействий);
	// >> 16.03.2023 Маскаев П.Ю., КРОК, JIRA№ A2105505-1153
	
КонецПроцедуры

// Выполняет обработку строк табличной части документа в соответствии с операциями, перечисленными в структуре действий.
//
// Параметры:
//	ТЧ - ДанныеФормыКоллекция - таблица товаров документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ОбработатьТЧ(ТЧ,СтруктураДействий,КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	ДействияЗаполнения = Новый Структура;
	ДействияОбработки = Новый Структура;
	Для Каждого Действие Из СтруктураДействий Цикл
		Если ПоддерживаемыеДействияЗаполненияТЧ().Найти(Действие.Ключ) = Неопределено Тогда
			ДействияОбработки.Вставить(Действие.Ключ,Действие.Значение);
		Иначе
			ДействияЗаполнения.Вставить(Действие.Ключ,Действие.Значение);
		КонецЕсли;
	КонецЦикла;
	Если ДействияЗаполнения.Количество() > 0 Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(ТЧ,ДействияЗаполнения);
	КонецЕсли;
	Если ДействияОбработки.Количество() > 0 Тогда
		Для Каждого СтрТабл Из ТЧ Цикл
			ОбработатьСтрокуТЧ(СтрТабл, ДействияОбработки, КэшированныеЗначения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Проверяет, что ключ заполнения служебных реквизитов поддерживается
//
// Параметры:
//  КлючДействия - Строка	 - проверяемый ключ.
// 
// Возвращаемое значение:
//  Булево - Ключ заполнения служебных реквизитов поддерживается
Функция КлючЗаполненияСлужебныхРеквизитовПоддерживается(КлючДействия) Экспорт
	Возврат ШаблонПоляВыборкиПоКлючуДействия(КлючДействия, Истина) <> Неопределено;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыПересчетаИЗаполненияСервер

Процедура ПроверитьПолучитьВариантКомплектации(ТекущаяСтрока, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда

		СтруктураРезультата = Справочники.ВариантыКомплектацииНоменклатуры.ПроверитьПринадлежностьВариантаКомплектации(
								ТекущаяСтрока.ВариантКомплектации, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
		Если Не СтруктураРезультата.ПринадлежитНоменклатуреХарактеристике Тогда

			ТекущаяСтрока.ВариантКомплектации = СтруктураРезультата.ОсновнойВариантКомплектации;

		КонецЕсли;

	ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) И ТекущаяСтрока.ХарактеристикиИспользуются Тогда 

		ТекущаяСтрока.ВариантКомплектации = Неопределено;

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем Характеристика;
	Перем Упаковка;

	ПроверитьХарактеристикуПоВладельцу = СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу", Характеристика);
	ПроверитьЗаполнитьУпаковкуПоВладельцу       = СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу", Упаковка);

	Если ПроверитьХарактеристикуПоВладельцу 
		Или ПроверитьЗаполнитьУпаковкуПоВладельцу Тогда
		РезультатПроверки = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринадлежатВладельцу(ТекущаяСтрока.Номенклатура, Характеристика, Упаковка);

		Если ПроверитьХарактеристикуПоВладельцу Тогда
			ТекущаяСтрока.Характеристика             = РезультатПроверки.Характеристика;
			ТекущаяСтрока.ХарактеристикиИспользуются = РезультатПроверки.ХарактеристикиИспользуются;
		КонецЕсли;
		
		Если ПроверитьЗаполнитьУпаковкуПоВладельцу Тогда
			ТекущаяСтрока.Упаковка = РезультатПроверки.Упаковка;
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара")
			И ПроверитьЗаполнитьУпаковкуПоВладельцу
			И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
			
				ТекущаяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ИдентичнаяУпаковка(ТекущаяСтрока.НоменклатураИсходногоКачества, 
																										  ТекущаяСтрока.Номенклатура, 
																										  Упаковка);
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара")
			И ЗначениеЗаполнено(Характеристика)
			И Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) 
			И ТекущаяСтрока.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
			ТекущаяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ИдентичнаяХарактеристика(
																						ТекущаяСтрока.НоменклатураИсходногоКачества, 
																						ТекущаяСтрока.Номенклатура, 
																						Характеристика);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьЗаполнитьХарактеристикиКиЗ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем Характеристика;
	СтруктураПараметровДействия = Неопределено;

	ПроверитьХарактеристикуПоВладельцу = СтруктураДействий.Свойство("ПроверитьХарактеристикуКиЗПоВладельцу", Характеристика);

	Если ПроверитьХарактеристикуПоВладельцу Тогда
		РезультатПроверки = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринадлежатВладельцу(ТекущаяСтрока.НоменклатураКиЗ, Характеристика, Неопределено);
		ТекущаяСтрока.ХарактеристикаКиЗ             = РезультатПроверки.Характеристика;
		ТекущаяСтрока.ХарактеристикиКиЗИспользуются = РезультатПроверки.ХарактеристикиИспользуются;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьЦенуСНДС(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия = Неопределено
		 Или СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС) = Ложь Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
		ТекущаяСтрока.Цена = ТекущаяСтрока.Цена * (ПроцентНДС + 100)/100;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкорректироватьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("СкорректироватьСтавкуНДС", СтруктураПараметровДействия) Тогда
		
		НалогообложениеНДС = СтруктураПараметровДействия.НалогообложениеНДС;
		Дата = СтруктураПараметровДействия.Дата;
		Организация = СтруктураПараметровДействия.Организация;
		
		Если Не УчетНДСУП.СтавкаНДСКорректна(ТекущаяСтрока.СтавкаНДС, НалогообложениеНДС, Организация, Дата) Тогда 
			
			Номенклатура = Неопределено;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Номенклатура") Тогда
				Номенклатура = ТекущаяСтрока.Номенклатура;
			КонецЕсли;
			
			ТекущаяСтрока.СтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложению(Номенклатура, НалогообложениеНДС, Организация, Дата);
			
			КэшированныеЗначения.ОбработанныеСтроки.Добавить(ТекущаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС", СтруктураПараметровДействия) Тогда
		
		НалогообложениеНДС = СтруктураПараметровДействия.НалогообложениеНДС;
		Дата = СтруктураПараметровДействия.Дата;
		Организация = СтруктураПараметровДействия.Организация;
		
		Номенклатура = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Номенклатура") Тогда
			Номенклатура = ТекущаяСтрока.Номенклатура;
		КонецЕсли;
		
		Если СтруктураПараметровДействия.Свойство("ПоДатеОтгрузки") 
			И СтруктураПараметровДействия.ПоДатеОтгрузки
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ДатаОтгрузки")
			И ЗначениеЗаполнено(ТекущаяСтрока.ДатаОтгрузки) Тогда
			Дата = ТекущаяСтрока.ДатаОтгрузки;
		КонецЕсли;
		
		ТекущаяСтрока.СтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложению(Номенклатура, НалогообложениеНДС, Организация, Дата);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомПогрешностиОкругленияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Погрешность = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомПогрешностиОкругления", Погрешность) Тогда
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма + Погрешность;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		
		НалогообложениеНДС = Неопределено;
		СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
		
		СтавкаНДС = Неопределено;
		Если НЕ (СтруктураПараметровДействия <> Неопределено И СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС)) Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
		Иначе
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
			ТекПроцентНДС = Неопределено;
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		ТекущаяСтрока.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма,
																		ТекПроцентНДС,
																		СтруктураПараметровДействия.ЦенаВключаетНДС,
																		НалогообложениеНДС);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДССуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
		
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДССуффикс", СтруктураПараметровДействия) Тогда
	
		НалогообложениеНДС = Неопределено;
		СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
		
		Если Не (СтруктураПараметровДействия <> Неопределено
				И СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС)) Тогда
			
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
			
		КонецЕсли;
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
		Иначе
			ТекПроцентНДС = Неопределено;
			
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		Суффикс = "";
		
		Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс)
			И Не ЗначениеЗаполнено(Суффикс) Тогда
			Суффикс = "";
		КонецЕсли;
		
		СуммаССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.СуммаССуффиксом(Суффикс);
		
		ТекущаяСтрока[СуммаССуффиксом.СуммаНДС] = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
			ТекущаяСтрока[СуммаССуффиксом.Сумма],
			ТекПроцентНДС,
			СтруктураПараметровДействия.ЦенаВключаетНДС,
			НалогообложениеНДС);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуПродажиПоСуммеСНДС(ТекущаяСтрока, СтруктураДействий) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажиПоСуммеСНДС", СтруктураПараметровДействия) Тогда
	
		ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.СуммаСНДС;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУсловияПродажВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем СтруктураПараметровДействия;

	Если ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25() Тогда
		ЗаполнитьУсловияПродажВСтрокеТЧ2_5(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		Возврат;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж", СтруктураПараметровДействия) Тогда

		Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Валюта    КАК Валюта,
			|	ВложенныйЗапрос.ВидЦены   КАК ВидЦены,
			|	ВЫБОР
			|		КОГДА
			|			ВложенныйЗапрос.Цена > 0
			|		ТОГДА
			|			ВЫБОР
			|				КОГДА
			|					&Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|				ТОГДА
			|					&ТекстЗапросаКоэффициентУпаковки1
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|			* ВложенныйЗапрос.Цена/ЕстьNULL(ВложенныйЗапрос.КоэффициентУпаковкиСоглашения,1)
			|			* ВЫБОР
			|				КОГДА &Валюта <> ВложенныйЗапрос.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
			|							ТОГДА
			|								(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель)
			|								/ (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|		КОГДА
			|			ВложенныйЗапрос.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|			И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
			|		ТОГДА
			|			ВЫБОР
			|				КОГДА
			|					&Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|				ТОГДА
			|					&ТекстЗапросаКоэффициентУпаковки1
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|			* ЦеныНоменклатурыСрезПоследних.Цена/ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
			|			* ВЫБОР
			|				КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
			|							ТОГДА
			|									(КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель)
			|									/ (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК Цена,
			|	ВложенныйЗапрос.СрокПоставки КАК СрокПоставки
			|ИЗ (
			|ВЫБРАТЬ
			|	СоглашениеШапка.Валюта,
			|ВЫБОР
			|	КОГДА
			|		ЕСТЬNULL(СоглашениеТовары.Цена,0) > 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	КОГДА (СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL)
			|	ТОГДА
			|		СоглашениеТовары.ВидЦены
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
			|		И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА 
			|		СоглашениеЦеновыеГруппы.ВидЦен
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
			|		ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
			|		И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА
			|		СоглашениеШапка.ВидЦен
			|КОНЕЦ КАК ВидЦены,
			|ЕСТЬNULL(СоглашениеТовары.Цена,0) КАК Цена,
			|СоглашениеТовары.Упаковка             КАК Упаковка,
			|&ТекстЗапросаКоэффициентУпаковки3 КАК КоэффициентУпаковкиСоглашения,
			|ВЫБОР
			|	КОГДА ЕСТЬNULL(СоглашениеТовары.СрокПоставки, 0) > 0
			|		ТОГДА СоглашениеТовары.СрокПоставки
			|	ИНАЧЕ ВЫБОР
			|			КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.СрокПоставки, 0) > 0
			|				ТОГДА СоглашениеЦеновыеГруппы.СрокПоставки
			|			ИНАЧЕ СоглашениеШапка.СрокПоставки
			|		КОНЕЦ
			|КОНЕЦ КАК СрокПоставки
			|	
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ПО
			|	СправочникНоменклатура.Ссылка = &Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеТовары.Ссылка
			|	И СоглашениеТовары.Номенклатура = &Номенклатура
			|	И СоглашениеТовары.Характеристика = &Характеристика
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка
			|	И СправочникНоменклатура.Ссылка.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
			|
			|ГДЕ
			|	СоглашениеШапка.Ссылка = &Соглашение
			|) КАК ВложенныйЗапрос
			|
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), Номенклатура = &Номенклатура И Характеристика = &Характеристика
			|) КАК ЦеныНоменклатурыСрезПоследних
			|ПО
			|	ВложенныйЗапрос.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыСрезПоследнихВалютаЦены
			|ПО
			|	КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсыСрезПоследнихВалютаДокумента
			|ПО
			|	ИСТИНА
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыСрезПоследнихВалютаСоглашения
			|ПО
			|	КурсыСрезПоследнихВалютаСоглашения.Валюта = ВложенныйЗапрос.Валюта
			|
			|");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
		"ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыСрезПоследних.Упаковка",
		"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СоглашениеТовары.Упаковка",
		"СоглашениеТовары.Номенклатура"));
		
		Запрос.УстановитьПараметр("Упаковка"        , ТекущаяСтрока.Упаковка);
		Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги", СтруктураПараметровДействия) Тогда
		Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Валюта    КАК Валюта,
			|	ВложенныйЗапрос.ВидЦены   КАК ВидЦены,
			|	ВЫБОР
			|		КОГДА
			|			ВложенныйЗапрос.Цена > 0
			|		ТОГДА
			|			ВложенныйЗапрос.Цена
			|			* ВЫБОР
			|				КОГДА &Валюта <> ВложенныйЗапрос.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
			|							ТОГДА
			|								(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель)
			|								/ (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|		КОГДА
			|			ВложенныйЗапрос.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|			И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
			|		ТОГДА
			|			ЦеныНоменклатурыСрезПоследних.Цена
			|			* ВЫБОР
			|				КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
			|							ТОГДА
			|									(КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель)
			|									/ (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК Цена
			|ИЗ (
			|ВЫБРАТЬ
			|	СоглашениеШапка.Валюта,
			|ВЫБОР
			|	КОГДА
			|		ЕСТЬNULL(СоглашениеТовары.Цена,0) > 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	КОГДА (СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL)
			|	ТОГДА
			|		СоглашениеТовары.ВидЦены
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
			|		И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА 
			|		СоглашениеЦеновыеГруппы.ВидЦен
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
			|		ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
			|		И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА
			|		СоглашениеШапка.ВидЦен
			|КОНЕЦ КАК ВидЦены,
			|ЕСТЬNULL(СоглашениеТовары.Цена,0) КАК Цена
			|	
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ПО
			|	СправочникНоменклатура.Ссылка = &Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеТовары.Ссылка
			|	И СоглашениеТовары.Номенклатура = &Номенклатура
			|	И СоглашениеТовары.Характеристика = &Характеристика
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка
			|	И СправочникНоменклатура.Ссылка.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
			|
			|ГДЕ
			|	СоглашениеШапка.Ссылка = &Соглашение
			|) КАК ВложенныйЗапрос
			|
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), Номенклатура = &Номенклатура И Характеристика = &Характеристика
			|) КАК ЦеныНоменклатурыСрезПоследних
			|ПО
			|	ВложенныйЗапрос.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыСрезПоследнихВалютаЦены
			|ПО
			|	КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсыСрезПоследнихВалютаДокумента
			|ПО
			|	ИСТИНА
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыСрезПоследнихВалютаСоглашения
			|ПО
			|	КурсыСрезПоследнихВалютаСоглашения.Валюта = ВложенныйЗапрос.Валюта
			|
			|");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж", СтруктураПараметровДействия) 
	 ИЛИ СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги", СтруктураПараметровДействия) Тогда

		Запрос.УстановитьПараметр("Соглашение"      , СтруктураПараметровДействия.Соглашение);
		Запрос.УстановитьПараметр("Дата"            , СтруктураПараметровДействия.Дата);
		Запрос.УстановитьПараметр("Номенклатура"    , ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика"  , ТекущаяСтрока.Характеристика);
		Запрос.УстановитьПараметр("Валюта"          , СтруктураПараметровДействия.Валюта);
		Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			ТекущаяСтрока.Цена = Окр(Выборка.Цена, 2);
			
			Если ТекущаяСтрока.Свойство("ВидЦены") Тогда
				
				Если ЗначениеЗаполнено(Выборка.ВидЦены) Тогда
					ТекущаяСтрока.ВидЦены = Выборка.ВидЦены;
				Иначе
					ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущаяСтрока.Свойство("СрокПоставки") Тогда
				
				ТекущаяСтрока.СрокПоставки = Выборка.СрокПоставки;
				
			КонецЕсли;
			
		Иначе
			
			ТекущаяСтрока.Цена = 0;
			Если ТекущаяСтрока.Свойство("ВидЦены") Тогда
				ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУсловияПродажВСтрокеТЧ2_5(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		СтруктураПараметровДействия = СтруктураДействий.ЗаполнитьУсловияПродаж;
	ИначеЕсли СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги") Тогда 
		СтруктураПараметровДействия = СтруктураДействий.ЗаполнитьУсловияПродажУслуги;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Если ЗначениеЗаполнено(СтруктураПараметровДействия.Соглашение) Тогда
			ЗаполнятьПоСоглашению = Истина;
		Иначе	
			ЗаполнятьПоСоглашению = Ложь;
		КонецЕсли;
	
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВЫРАЗИТЬ(&ВидЦены КАК Справочник.ВидыЦен) КАК ВидЦены,
		|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(&Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(&Серия КАК Справочник.СерииНоменклатуры) КАК Серия,
		|	ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.ВидЦены КАК ВидЦены,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА
		|			ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
		|		ИНАЧЕ ТаблицаТовары.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
		|	КОНЕЦ КАК ХарактеристикаЦО,
		|	ЕСТЬNULL(ВЫБОР
		|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоСерии = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)
		|		ИНАЧЕ ТаблицаТовары.Серия.СерияНоменклатурыДляЦенообразования
		|	КОНЕЦ, ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК СерияЦО,
		|	ВЫБОР
		|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ИНАЧЕ ТаблицаТовары.Упаковка
		|	КОНЕЦ КАК УпаковкаЦО
		|ПОМЕСТИТЬ ТаблицаТоварыДоп
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО ВидыНоменклатуры.Ссылка = ТаблицаТовары.Номенклатура.ВидНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОтбора.Номенклатура КАК Номенклатура,
		|	ТаблицаОтбора.ХарактеристикаЦО КАК ХарактеристикаЦО,
		|	ТаблицаОтбора.СерияЦО КАК СерияЦО,
		|	ТаблицаОтбора.УпаковкаЦО КАК УпаковкаЦО,
		|	&ЗначениеВидаЦенПоИсточнику КАК ВидЦены,
		|	МИНИМУМ(ВременнаяТаблицаВидыЦен.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ТаблицаОтбора
		|ИЗ
		|	ТаблицаТоварыДоп КАК ТаблицаОтбора
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВложенныйЗапрос.ВидЦены КАК ВидЦены,
		|			МИНИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет
		|		ИЗ
		|			&ТекстЗапросаИсточникаУсловияПродаж КАК ВложенныйЗапрос
		|		СГРУППИРОВАТЬ ПО
		|			ВложенныйЗапрос.ВидЦены) КАК ВременнаяТаблицаВидыЦен
		|		ПО ИСТИНА
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОтбора.Номенклатура,
		|	ТаблицаОтбора.ХарактеристикаЦО,
		|	ТаблицаОтбора.СерияЦО,
		|	ТаблицаОтбора.УпаковкаЦО,
		|	&ЗначениеВидаЦенПоИсточнику
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаЦО,
		|	СерияЦО,
		|	УпаковкаЦО,
		|	ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) /
		|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) * ВЫБОР
		|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
		|			ТОГДА ВЫБОР
		|				КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
		|				И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
		|				И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
		|				И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
		|					ТОГДА КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель / (КурсыВалюты.КурсЧислитель *
		|						КурсыВалютыЦены.КурсЗнаменатель)
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО КАК ХарактеристикаЦО,
		|	ЦеныНоменклатурыСрезПоследних.СерияЦО КАК СерияЦО,
		|	ЦеныНоменклатурыСрезПоследних.УпаковкаЦО КАК УпаковкаЦО,
		|	ТаблицаОтбора.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ ТаблицаРезультата
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), (Номенклатура, ХарактеристикаЦО, СерияЦО,
		|		УпаковкаЦО, ВидЦены) В
		|		(ВЫБРАТЬ
		|			Т.Номенклатура,
		|			Т.ХарактеристикаЦО,
		|			Т.СерияЦО,
		|			Т.УпаковкаЦО,
		|			Т.ВидЦены
		|		ИЗ
		|			ТаблицаОтбора КАК Т)) КАК ЦеныНоменклатурыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК
		|			КурсыВалютыЦены
		|		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта
		|		И БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалюты
		|		ПО ИСТИНА
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
		|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ТаблицаОтбора.Номенклатура
		|		И ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО = ТаблицаОтбора.ХарактеристикаЦО
		|		И ЦеныНоменклатурыСрезПоследних.СерияЦО = ТаблицаОтбора.СерияЦО
		|		И ЦеныНоменклатурыСрезПоследних.УпаковкаЦО = ТаблицаОтбора.УпаковкаЦО
		|		И ЦеныНоменклатурыСрезПоследних.ВидЦены = ТаблицаОтбора.ВидЦены
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаЦО,
		|	СерияЦО,
		|	УпаковкаЦО,
		|	ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРезультата.ВидЦены КАК ВидЦены,
		|	ТаблицаРезультата.Цена КАК Цена
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаРезультата.Номенклатура КАК Номенклатура,
		|		ТаблицаРезультата.ХарактеристикаЦО КАК ХарактеристикаЦО,
		|		ТаблицаРезультата.СерияЦО КАК СерияЦО,
		|		ТаблицаРезультата.УпаковкаЦО КАК УпаковкаЦО,
		|		МИНИМУМ(ТаблицаРезультата.Приоритет) КАК Приоритет
		|	ИЗ
		|		ТаблицаРезультата КАК ТаблицаРезультата
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаРезультата.Номенклатура,
		|		ТаблицаРезультата.ХарактеристикаЦО,
		|		ТаблицаРезультата.СерияЦО,
		|		ТаблицаРезультата.УпаковкаЦО) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРезультата КАК ТаблицаРезультата
		|		ПО ВложенныйЗапрос.Номенклатура = ТаблицаРезультата.Номенклатура
		|		И ВложенныйЗапрос.ХарактеристикаЦО = ТаблицаРезультата.ХарактеристикаЦО
		|		И ВложенныйЗапрос.СерияЦО = ТаблицаРезультата.СерияЦО
		|		И ВложенныйЗапрос.УпаковкаЦО = ТаблицаРезультата.УпаковкаЦО
		|		И ВложенныйЗапрос.Приоритет = ТаблицаРезультата.Приоритет");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
		"ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыСрезПоследних.Упаковка",
		"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаИсточникаУсловияПродаж",
		ТекстЗапросаИсточникаУсловияПродаж(ЗаполнятьПоСоглашению));
		
		Если ЗаполнятьПоСоглашению Тогда
			Запрос.УстановитьПараметр("Соглашение"      , СтруктураПараметровДействия.Соглашение);

			Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ЗначениеВидаЦенПоИсточнику",
			"ВременнаяТаблицаВидыЦен.ВидЦены");
		Иначе	
			Запрос.УстановитьПараметр("Партнер"         , СтруктураПараметровДействия.Партнер);
		
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ЗначениеВидаЦенПоИсточнику",
			"ВЫБОР
			|		КОГДА ВременнаяТаблицаВидыЦен.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|			ТОГДА ТаблицаОтбора.ВидЦены
			|		ИНАЧЕ ВременнаяТаблицаВидыЦен.ВидЦены
			|	КОНЕЦ");

		КонецЕсли;
		Запрос.УстановитьПараметр("Дата"            , СтруктураПараметровДействия.Дата);
		Запрос.УстановитьПараметр("Номенклатура"    , ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика"  , ТекущаяСтрока.Характеристика);
		Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
			Если Не ТекущаяСтрока.Свойство("Серия") 
				Или ТипЗнч(ТекущаяСтрока.Серия) <> Тип("Справочникссылка.СерииНоменклатуры") Тогда
				Запрос.УстановитьПараметр("Серия"   , Справочники.СерииНоменклатуры.ПустаяСсылка());
			Иначе	
				Запрос.УстановитьПараметр("Серия"   , ТекущаяСтрока.Серия);
			КонецЕсли;
			Запрос.УстановитьПараметр("Упаковка"    , ТекущаяСтрока.Упаковка);
		Иначе	
			Запрос.УстановитьПараметр("Серия"       , Справочники.СерииНоменклатуры.ПустаяСсылка());
			Запрос.УстановитьПараметр("Упаковка"    , Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		КонецЕсли;
		Запрос.УстановитьПараметр("Валюта"          , СтруктураПараметровДействия.Валюта);
		Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
		Если ТекущаяСтрока.Свойство("ВидЦены") Тогда
			Запрос.УстановитьПараметр("ВидЦены"         , ТекущаяСтрока.ВидЦены);
		Иначе
			Запрос.УстановитьПараметр("ВидЦены"         , Справочники.ВидыЦен.ПустаяСсылка());
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			ТекущаяСтрока.Цена = Окр(Выборка.Цена, 2);
			
			Если ТекущаяСтрока.Свойство("ВидЦены") Тогда
				
				Если ЗначениеЗаполнено(Выборка.ВидЦены) Тогда
					ТекущаяСтрока.ВидЦены = Выборка.ВидЦены;
				Иначе
					ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекущаяСтрока.Цена = 0;
			Если ЗаполнятьПоСоглашению И ТекущаяСтрока.Свойство("ВидЦены") Тогда
				ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУсловияРозничныхПродажВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем СтруктураПараметровДействия;

	Если Не СтруктураДействий.Свойство("ЗаполнитьУсловияРозничныхПродаж", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
		
	Если ТипЗнч(СтруктураПараметровДействия.ОбъектХраненияУсловийПродаж) = Тип("Справочникссылка.ФорматыМагазинов") Тогда
		ЗаполнятьПоФорматуМагазинов = Истина;
	Иначе	
		ЗаполнятьПоФорматуМагазинов = Ложь;
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(&Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(&Серия КАК Справочник.СерииНоменклатуры) КАК Серия,
	|	ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА
	|			ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТовары.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
	|	КОНЕЦ КАК ХарактеристикаЦО,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоСерии = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТовары.Серия.СерияНоменклатурыДляЦенообразования
	|	КОНЕЦ, ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК СерияЦО,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТовары.Упаковка
	|	КОНЕЦ КАК УпаковкаЦО
	|ПОМЕСТИТЬ ТаблицаТоварыДоп
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ВидыНоменклатуры.Ссылка = ТаблицаТовары.Номенклатура.ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтбора.Номенклатура КАК Номенклатура,
	|	ТаблицаОтбора.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ТаблицаОтбора.СерияЦО КАК СерияЦО,
	|	ТаблицаОтбора.УпаковкаЦО КАК УпаковкаЦО,
	|	ВременнаяТаблицаВидыЦен.ВидЦены КАК ВидЦены,
	|	МИНИМУМ(ВременнаяТаблицаВидыЦен.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	ТаблицаТоварыДоп КАК ТаблицаОтбора
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.ВидЦены КАК ВидЦены,
	|			МИНИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет
	|		ИЗ
	|			&ТекстЗапросаИсточникаУсловияПродаж  КАК ВложенныйЗапрос
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.ВидЦены) КАК ВременнаяТаблицаВидыЦен
	|		ПО ИСТИНА
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОтбора.Номенклатура,
	|	ТаблицаОтбора.ХарактеристикаЦО,
	|	ТаблицаОтбора.СерияЦО,
	|	ТаблицаОтбора.УпаковкаЦО,
	|	ВременнаяТаблицаВидыЦен.ВидЦены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО,
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) /
	|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) * ВЫБОР
	|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
	|				И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
	|				И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|				И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|					ТОГДА КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель / (КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ЦеныНоменклатурыСрезПоследних.СерияЦО КАК СерияЦО,
	|	ЦеныНоменклатурыСрезПоследних.УпаковкаЦО КАК УпаковкаЦО,
	|	ТаблицаОтбора.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаРезультата
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), (Номенклатура, ХарактеристикаЦО,
	|		СерияЦО, УпаковкаЦО, ВидЦены) В
	|		(ВЫБРАТЬ
	|			Т.Номенклатура,
	|			Т.ХарактеристикаЦО,
	|			Т.СерияЦО,
	|			Т.УпаковкаЦО,
	|			Т.ВидЦены
	|		ИЗ
	|			ТаблицаОтбора КАК Т)) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
	|		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалюты
	|		ПО ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ТаблицаОтбора.Номенклатура
	|		И ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО = ТаблицаОтбора.ХарактеристикаЦО
	|		И ЦеныНоменклатурыСрезПоследних.СерияЦО = ТаблицаОтбора.СерияЦО
	|		И ЦеныНоменклатурыСрезПоследних.УпаковкаЦО = ТаблицаОтбора.УпаковкаЦО
	|		И ЦеныНоменклатурыСрезПоследних.ВидЦены = ТаблицаОтбора.ВидЦены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО,
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРезультата.ВидЦены КАК ВидЦены,
	|	ТаблицаРезультата.Цена КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаРезультата.Номенклатура КАК Номенклатура,
	|		ТаблицаРезультата.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|		ТаблицаРезультата.СерияЦО КАК СерияЦО,
	|		ТаблицаРезультата.УпаковкаЦО КАК УпаковкаЦО,
	|		МИНИМУМ(ТаблицаРезультата.Приоритет) КАК Приоритет
	|	ИЗ
	|		ТаблицаРезультата КАК ТаблицаРезультата
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаРезультата.Номенклатура,
	|		ТаблицаРезультата.ХарактеристикаЦО,
	|		ТаблицаРезультата.СерияЦО,
	|		ТаблицаРезультата.УпаковкаЦО) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРезультата КАК ТаблицаРезультата
	|		ПО ВложенныйЗапрос.Номенклатура = ТаблицаРезультата.Номенклатура
	|		И ВложенныйЗапрос.ХарактеристикаЦО = ТаблицаРезультата.ХарактеристикаЦО
	|		И ВложенныйЗапрос.СерияЦО = ТаблицаРезультата.СерияЦО
	|		И ВложенныйЗапрос.УпаковкаЦО = ТаблицаРезультата.УпаковкаЦО
	|		И ВложенныйЗапрос.Приоритет = ТаблицаРезультата.Приоритет");
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
	"&ТекстЗапросаКоэффициентУпаковки1",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
	"ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
	"ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
	"&ТекстЗапросаКоэффициентУпаковки2",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
	"ЦеныНоменклатурыСрезПоследних.Упаковка",
	"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
	"&ТекстЗапросаИсточникаУсловияПродаж",
	ТекстЗапросаИсточникаУсловияРозничныхПродаж(ЗаполнятьПоФорматуМагазинов));

	Запрос.УстановитьПараметр("ОбъектХраненияУсловийПродаж" , СтруктураПараметровДействия.ОбъектХраненияУсловийПродаж);
	Запрос.УстановитьПараметр("Дата"            , СтруктураПараметровДействия.Дата);
	Запрос.УстановитьПараметр("Номенклатура"    , ТекущаяСтрока.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика"  , ТекущаяСтрока.Характеристика);
	Если ТипЗнч(ТекущаяСтрока.Серия) <> Тип("Справочникссылка.СерииНоменклатуры") Тогда
		Запрос.УстановитьПараметр("Серия"   , Справочники.СерииНоменклатуры.ПустаяСсылка());
	Иначе	
		Запрос.УстановитьПараметр("Серия"   , ТекущаяСтрока.Серия);
	КонецЕсли;
	Запрос.УстановитьПараметр("Упаковка"    , ТекущаяСтрока.Упаковка);
	Запрос.УстановитьПараметр("Валюта"      , СтруктураПараметровДействия.Валюта);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		ТекущаяСтрока.Цена = Выборка.Цена;
		
		Если ТекущаяСтрока.Свойство("ВидЦены") Тогда
			
			Если ЗначениеЗаполнено(Выборка.ВидЦены) Тогда
				ТекущаяСтрока.ВидЦены = Выборка.ВидЦены;
			Иначе
				ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры

Функция ТекстЗапросаИсточникаУсловияПродаж(Знач ЗаполнятьПоСоглашению)
	Если ЗаполнятьПоСоглашению Тогда
		ТекстЗапроса = "(ВЫБРАТЬ
		|				СоглашенияСКлиентами.ИндивидуальныйВидЦены КАК ВидЦены,
		|				1 КАК Приоритет
		|			ИЗ
		|				Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|			ГДЕ
		|				СоглашенияСКлиентами.Ссылка = &Соглашение
		|
		|			ОБЪЕДИНИТЬ ВСЕ
		|
		|			ВЫБРАТЬ
		|				СоглашенияСКлиентами.ВидЦен,
		|				2
		|			ИЗ
		|				Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|			ГДЕ
		|				СоглашенияСКлиентами.Ссылка = &Соглашение)";
	Иначе
		ТекстЗапроса = "(ВЫБРАТЬ
		|				Партнеры.ИндивидуальныйВидЦены КАК ВидЦены,
		|				1 КАК Приоритет
		|			ИЗ
		|				Справочник.Партнеры КАК Партнеры
		|			ГДЕ
		|				Партнеры.Ссылка = &Партнер
		|
		|			ОБЪЕДИНИТЬ ВСЕ
		|
		|			ВЫБРАТЬ
		|				Партнеры.ВидЦен,
		|				2
		|			ИЗ
		|				Справочник.Партнеры КАК Партнеры
		|			ГДЕ
		|				Партнеры.Ссылка = &Партнер)"; 
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаИсточникаУсловияРозничныхПродаж(Знач ЗаполнятьПоФорматуМагазинов)
	Если ЗаполнятьПоФорматуМагазинов Тогда
		ТекстЗапроса = "(ВЫБРАТЬ
		|				ФорматыМагазинов.ИндивидуальныйВидЦены КАК ВидЦены,
		|				1 КАК Приоритет
		|			ИЗ
		|				Справочник.ФорматыМагазинов КАК ФорматыМагазинов
		|			ГДЕ
		|				ФорматыМагазинов.Ссылка = &ОбъектХраненияУсловийПродаж
		|
		|			ОБЪЕДИНИТЬ ВСЕ
		|
		|			ВЫБРАТЬ
		|				ФорматыМагазинов.РозничныйВидЦены,
		|				2
		|			ИЗ
		|				Справочник.ФорматыМагазинов КАК ФорматыМагазинов
		|			ГДЕ
		|				ФорматыМагазинов.Ссылка = &ОбъектХраненияУсловийПродаж)";
	Иначе
		ТекстЗапроса = "(ВЫБРАТЬ
		|				Склады.ИндивидуальныйВидЦены КАК ВидЦены,
		|				1 КАК Приоритет
		|			ИЗ
		|				Справочник.Склады КАК Склады
		|			ГДЕ
		|				Склады.Ссылка = &ОбъектХраненияУсловийПродаж
		|
		|			ОБЪЕДИНИТЬ ВСЕ
		|
		|			ВЫБРАТЬ
		|				Склады.РозничныйВидЦены,
		|				2
		|			ИЗ
		|				Справочник.Склады КАК Склады
		|			ГДЕ
		|				Склады.Ссылка = &ОбъектХраненияУсловийПродаж)"; 
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

Процедура ПроверитьЗаполнитьВидЦеныВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВидЦены", СтруктураПараметровДействия) Тогда
		
		Запрос = Новый Запрос;
		УсловияОтбора = Новый Массив;
		ЧислоПараметров = 0;
		
		Для Каждого Условие Из СтруктураПараметровДействия.ПараметрыОтбора Цикл
			УсловияОтбора.Добавить(Условие.Ключ + " В (&Значение" + ЧислоПараметров + ")");
			Запрос.УстановитьПараметр("Значение" + ЧислоПараметров, Условие.Значение);
			ЧислоПараметров = ЧислоПараметров + 1;
		КонецЦикла;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВидыЦен.Ссылка КАК Ссылка
			|ИЗ Справочник.ВидыЦен КАК ВидыЦен
			|ГДЕ
			|	ВидыЦен.Ссылка = &Ссылка
			|	И &ЗаменаУсловияОтбора";
		ЗаменаУсловияОтбора = СтрСоединить(УсловияОтбора, " И ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗаменаУсловияОтбора", ЗаменаУсловияОтбора);
		Запрос.УстановитьПараметр("Ссылка", СтруктураПараметровДействия.ВидЦены);
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ТекущаяСтрока.ВидЦены = Неопределено;
		Иначе
			ТекущаяСтрока.ВидЦены = СтруктураПараметровДействия.ВидЦены;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнитьВидЦеныВСтрокеТЧ()

Процедура ЗаполнитьЦенуПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	Если Не СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонкиУпаковка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровДействия, "ИмяКолонкиУпаковка", "Упаковка");
	ИмяПоляВидЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровДействия, "ИмяКолонкиВидЦены", "ВидЦены");
	
	// Получение параметров запроса
	СтруктураПараметровОтбора = ЦеныПредприятияЗаполнениеСервер.НовыйПараметрыОтбораПолучитьЦенуПоОтбору();
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ТекущаяСтрока);
	Если ИмяКолонкиУпаковка <> "Упаковка" Тогда
		СтруктураПараметровОтбора.Упаковка = ТекущаяСтрока[ИмяКолонкиУпаковка];
	КонецЕсли;
	Если ИмяПоляВидЦены <> "ВидЦены" Тогда
		СтруктураПараметровОтбора.ВидЦены = ТекущаяСтрока[ИмяПоляВидЦены];
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтруктураПараметровДействия);
	
	Если (СтруктураПараметровДействия.Свойство("ОбработатьШтрихкоды", ЗначениеСвойства)
			И ЗначениеСвойства.НеИспользоватьУпаковки)
		Или СтруктураПараметровОтбора.Упаковка = Неопределено Тогда
		СтруктураПараметровОтбора.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;
	
	ИмяПоляЦена = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровДействия, "ИмяПоляЦена", "Цена");
	
	Цена = ЦеныПредприятияЗаполнениеСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
	Если ЗначениеЗаполнено(Цена) Тогда
		ТекущаяСтрока[ИмяПоляЦена] = Цена;
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметровОтбора.ВидЦены) Тогда
		ТекущаяСтрока[ИмяПоляЦена] = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУсловияЗакупокВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия;
	Если Не СтруктураДействий.Свойство("ЗаполнитьУсловияЗакупок", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Свойство("ВидЦеныПоставщика") Тогда
		ВидЦеныПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметровДействия.Соглашение, "ВидЦеныПоставщика");
		ТекущаяСтрока.ВидЦеныПоставщика = ВидЦеныПоставщика;
	КонецЕсли;
	
	// Получение параметров запроса

	СтруктураПараметровОтбора = ЦеныПартнеровЗаполнениеСервер.НовыйПараметрыОтбораПолучитьЦенуПоОтбору();
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтруктураПараметровДействия);
	Если ЗначениеЗаполнено(СтруктураПараметровОтбора.ВидЦеныПоставщика) Тогда
		Цена = ЦеныПартнеровЗаполнениеСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
		Если ЗначениеЗаполнено(Цена) Тогда
			ТекущаяСтрока.Цена = Цена;
		ИначеЕсли ЗначениеЗаполнено(СтруктураПараметровОтбора.ВидЦеныПоставщика) Тогда
			ТекущаяСтрока.Цена = 0;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЦенуЗакупкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	Если Не СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	// Получение параметров запроса
	СтруктураПараметровОтбора = ЦеныПартнеровЗаполнениеСервер.НовыйПараметрыОтбораПолучитьЦенуПоОтбору();
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтруктураПараметровДействия);
	
	Если ЗначениеЗаполнено(СтруктураПараметровОтбора.ВидЦеныПоставщика) Тогда
		ТекущаяСтрока.Цена = ЦеныПартнеровЗаполнениеСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
	Иначе
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	СтруктураДействийЗаполнения = Новый Структура;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВидНоменклатуры", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВидНоменклатуры", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЕдиницаИзмерения", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипИзмеряемойВеличины", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВесУпаковки", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьВесУпаковки", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемУпаковки", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьОбъемУпаковки", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияВеса", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьЕдиницуИзмеренияВеса", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияОбъема", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("КоличествоУпаковокВЕдиницеИзмеренияВеса", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("КоличествоУпаковокВЕдиницеИзмеренияВеса", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакКод", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда

		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакКод", СтруктураПараметровДействия);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОписание", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда

		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакОписание", СтруктураПараметровДействия);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоРНПТ", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВедетсяУчетПоРНПТ", СтруктураПараметровДействия);
	
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", СтруктураПараметровДействия);
	КонецЕсли;	
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакСерииИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакСерииИспользуются", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем") Тогда
		СтруктураДействийЗаполнения.Вставить("ПересчитатьВесОбъем", СтруктураДействий.ПересчитатьВесОбъем);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиСерверЛокализация.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, СтруктураДействийЗаполнения);
	
	Если СтруктураДействийЗаполнения.Количество() <> 0 Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтруктуре(ТекущаяСтрока, СтруктураДействийЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруПоНоменклатуреПартнераВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПартнера") Тогда
		
		НоменклатураПартнеровСервер.ЗаполнитьНоменклатуруПоНоменклатуреПартнераВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьНоменклатуруПартнераПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем Партнер;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Партнер) Тогда
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров") Тогда
			Возврат;
		КонецЕсли;
		
		НоменклатураПартнеровСервер.ЗаполнитьНоменклатуруПартнераПоНоменклатуреВСтрокеТЧ(Партнер, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	ТекущаяСтрока 			- см. ОбработатьСтрокуТЧ.ТекущаяСтрока
// 	СтруктураДействий 		- см. ОбработатьСтрокуТЧ.СтруктураДействий
// 	КэшированныеЗначения 	- см. ОбработатьСтрокуТЧ.КэшированныеЗначения
//
Процедура ПроверитьСопоставленнуюНоменклатуруПартнераВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПартнера", СтруктураПараметровДействия) Тогда
		
		ВыводитьПредупреждение = Ложь;
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров") Тогда
			Возврат;
		ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(НоменклатураКонтрагентов.Ссылка) КАК КоличествоНоменклатурыПартнера,
		|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура,
		|	НоменклатураКонтрагентов.Характеристика КАК Характеристика,
		|	НоменклатураКонтрагентов.Упаковка КАК Упаковка
		|ИЗ
		|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|ГДЕ
		|	НоменклатураКонтрагентов.Владелец = &Партнер
		|	И (НЕ НоменклатураКонтрагентов.ПометкаУдаления)
		|	И НоменклатураКонтрагентов.Номенклатура = &Номенклатура
		|	И НоменклатураКонтрагентов.Характеристика = &Характеристика
		|	И НоменклатураКонтрагентов.Упаковка = &Упаковка
		|	И НоменклатураКонтрагентов.Ссылка <> &НоменклатураПартнера
		|	И ВЫРАЗИТЬ(&НоменклатураПартнера КАК Справочник.НоменклатураКонтрагентов).Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураКонтрагентов.Номенклатура,
		|	НоменклатураКонтрагентов.Характеристика,
		|	НоменклатураКонтрагентов.Упаковка");
		
		Запрос.УстановитьПараметр("Партнер",                СтруктураПараметровДействия.Партнер);
		Запрос.УстановитьПараметр("НоменклатураПартнера", ТекущаяСтрока.НоменклатураПартнера);
		Запрос.УстановитьПараметр("Номенклатура",           ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика",         ТекущаяСтрока.Характеристика);
		Запрос.УстановитьПараметр("Упаковка",               ТекущаяСтрока.Упаковка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
					
					ТекстОшибки = НСтр("ru = 'Номенклатуре ""%Номенклатура%"" с характеристикой ""%Характеристика%"" уже сопоставлена другая номенклатура поставщика (%КоличествоНоменклатурыПартнера%)'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",                     Выборка.Номенклатура);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%",                   Выборка.Характеристика);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоНоменклатурыПартнера%", Выборка.КоличествоНоменклатурыПартнера);
					
				Иначе
					
					ТекстОшибки = НСтр("ru = 'Номенклатуре ""%Номенклатура%"" уже сопоставлена другая номенклатура поставщика (%КоличествоНоменклатурыПартнера%)'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",                     Выборка.Номенклатура);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоНоменклатурыПартнера%", Выборка.КоличествоНоменклатурыПартнера);
					
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					СтруктураПараметровДействия.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура"),
					,
					ВыводитьПредупреждение);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Заполняет склад по умолчанию
// 
// Параметры:
// 	ТекущаяСтрока - Структура - структура со свойствами строки документа.
// 	СтруктураДействий - Структура
//
Процедура ПроверитьЗаполнитьСкладВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем ПараметрыДействия;
	
	Если Не СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	СкладГруппа = Ложь;
	Если ПараметрыДействия.Свойство("СкладГруппа") Тогда
		СкладГруппа = ПараметрыДействия.СкладГруппа;
	КонецЕсли;
	
	ИмяПоляСклад = "Склад";
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура")
		И ПараметрыДействия.Свойство("ИмяПоляСклад") Тогда
		ИмяПоляСклад = ПараметрыДействия.ИмяПоляСклад;
	КонецЕсли;
	
	ТипНоменклатуры = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ТипНоменклатуры") Тогда
		ТипНоменклатуры = ТекущаяСтрока.ТипНоменклатуры;
	Иначе
		ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ТипНоменклатуры")
	КонецЕсли;
	
	СкладПоУмолчанию = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
		И (ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			Или ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
		И ТипЗнч(ПараметрыДействия) = Тип("Структура")
		И ПараметрыДействия.Свойство("СкладПоУмолчанию") Тогда
		СкладПоУмолчанию = ПараметрыДействия.СкладПоУмолчанию;
	КонецЕсли;
	
	Если СкладГруппа Тогда
		
		// Проверка на вхождение склада в иерархию группы складов
		Если ЗначениеЗаполнено(ТекущаяСтрока[ИмяПоляСклад])
			И ПараметрыДействия.Свойство("СкладГруппаСсылка")
			И ЗначениеЗаполнено(ПараметрыДействия.СкладГруппаСсылка)
			И Не Справочники.Склады.СкладВГруппе(ПараметрыДействия.СкладГруппаСсылка, ТекущаяСтрока[ИмяПоляСклад]) Тогда
			ТекущаяСтрока[ИмяПоляСклад] = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяСтрока[ИмяПоляСклад] = СкладПоУмолчанию;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьОбеспечениеВСтрокеТЧДокументаПродажи(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия) Тогда
		
		Если ТипЗнч(ТекущаяСтрока) <> Тип("Структура")
				Или Не ТекущаяСтрока.Свойство("ДанныеПрограммногоОбъекта") Тогда
				
				ДанныеПрограммногоОбъекта = ОбеспечениеВДокументахКлиентСервер.ДанныеПрограммногоОбъекта(
					ПараметрыДействия,
					ТекущаяСтрока);
			
		Иначе
			
			ДанныеПрограммногоОбъекта = ТекущаяСтрока.ДанныеПрограммногоОбъекта;
			
		КонецЕсли;
		
		ОбеспечениеВДокументахСервер.ПроверитьЗаполнитьОбеспечениеВСтрокеТЧДокументаПродажи(ТекущаяСтрока,
		                                                                                    ДанныеПрограммногоОбъекта,
		                                                                                    ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация", ПараметрыДействия) Тогда
		
		Если ТекущаяСтрока.ВариантОформления = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг
				Или ТекущаяСтрока.ВариантОформления = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаПередачаТоваровХранителю Тогда
					ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках(ТекущаяСтрока, СтруктураДействий)
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках", ПараметрыДействия) Тогда
		
		ТекущаяСтрока.Поставщик = Неопределено;
		ТекущаяСтрока.ТипДокументаПриобретения = Новый ОписаниеТипов("Неопределено");
		
		Если Не ТекущаяСтрока.ДокументПриобретения = Неопределено Тогда
			
			СоставРеквизитов = "Ссылка,Организация,Контрагент,ХозяйственнаяОперация";
			Если ТипЗнч(ТекущаяСтрока.ДокументПриобретения) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
				СоставРеквизитов = "Ссылка,Организация,Контрагент,ВидКорректировки";
			КонецЕсли;	
			СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.ДокументПриобретения, СоставРеквизитов);
			ТекущаяСтрока.Поставщик = СтруктураРеквизитов.Контрагент;
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(ТекущаяСтрока.ДокументПриобретения));
			ТекущаяСтрока.ТипДокументаПриобретения = Новый ОписаниеТипов(МассивТипов);
			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры



Процедура ЗаполнитьСодержаниеУслуги(ТекущаяСтрока, СтруктураДействий) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание", СтруктураПараметровДействия) Тогда
		
		ЗаполнятьДляВсехУслуг = Неопределено;
		СтруктураПараметровДействия.Свойство("ЗаполнятьДляВсехУслуг", ЗаполнятьДляВсехУслуг);
		
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) И ЗаполнятьДляВсехУслуг <> Неопределено Тогда
		
			РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ТекущаяСтрока.Номенклатура,
				"ТипНоменклатуры, ВариантОформленияПродажи, НаименованиеПолное");
			
			Если ЗаполнятьДляВсехУслуг
				И РеквизитыНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар 
				И РеквизитыНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
				
				ТекущаяСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					РеквизитыНоменклатуры.НаименованиеПолное, 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Характеристика,"НаименованиеПолное"));
				
			ИначеЕсли Не ЗаполнятьДляВсехУслуг
				И (РеквизитыНоменклатуры.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот ИЛИ
				   РеквизитыНоменклатуры.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав) Тогда
				
				ТекущаяСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					РеквизитыНоменклатуры.НаименованиеПолное, 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Характеристика,"НаименованиеПолное"));
				
			Иначе
				ТекущаяСтрока.Содержание = "";
			КонецЕсли;
			
		Иначе
			ТекущаяСтрока.Содержание = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюАналитикуРасходовНоменклатуры(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовНоменклатуры", СтруктураПараметровДействия) Тогда
		
		ДоходыИРасходыСервер.ЗаполнитьСтатьюИАналитикуРасходовНоменклатуры(
			ТекущаяСтрока, 
			ТекущаяСтрока.Номенклатура,
			СтруктураПараметровДействия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСтатьюАналитикуРасходов(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ОчиститьСтатьюАналитикуРасходов", СтруктураПараметровДействия) Тогда
		ДоходыИРасходыСервер.ОчиститьСтатьюАналитикуРасходов(ТекущаяСтрока, СтруктураПараметровДействия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки", СтруктураПараметровДействия) Тогда
		ДоходыИРасходыСервер.ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки(ТекущаяСтрока, СтруктураПараметровДействия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуСчетовУчетаПоУмолчанию(ТекущаяСтрока, СтруктураДействий) Экспорт

	
	Возврат; // В УТ обработчик пустой
КонецПроцедуры

Процедура ЗаполнитьПредставлениеНастройкиСчетовУчета(ТекущаяСтрока, СтруктураДействий) Экспорт

	
	Возврат; // В УТ обработчик пустой
КонецПроцедуры

Процедура ЗаполнитьПомещение(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПомещение", ПараметрСтруктурыДействий)
		И Не ЗначениеЗаполнено(ТекущаяСтрока.Помещение) Тогда
		
		Параметры = Новый Структура("Склад, Номенклатура, Характеристика", ПараметрСтруктурыДействий.Склад, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
		ТекущаяСтрока.Помещение = СкладыСервер.ПомещениеДляНоменклатуры(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПродавца(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", ПараметрСтруктурыДействий)
		И Не ЗначениеЗаполнено(ТекущаяСтрока.Продавец) Тогда
		
		ТекущаяСтрока.Продавец = ПараметрСтруктурыДействий.Продавец;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУчетноеКоличествоНоменклатуры(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры", ПараметрСтруктурыДействий) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Аналитика.КлючАналитики КАК КлючАналитики
		|
		|ПОМЕСТИТЬ ВтАналитика
		|ИЗ
		|	РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|ГДЕ
		|	Аналитика.МестоХранения = &Склад
		|	И Аналитика.Номенклатура = &Номенклатура
		|	И Аналитика.Характеристика = &Характеристика
		|;
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры,
		|	ТоварыОрганизаций.КоличествоОстаток КАК КоличествоУчет
		|
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(&МоментВремени,
		|		Организация = &Организация
		|		И АналитикаУчетаНоменклатуры В (
		|			ВЫБРАТЬ
		|				Аналитика.КлючАналитики
		|			ИЗ
		|				ВтАналитика КАК Аналитика
		|		)
		|	) КАК ТоварыОрганизаций
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры,
		|	-ТоварыОрганизаций.Количество
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ВтАналитика КАК Аналитика
		|	ПО
		|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|ГДЕ
		|	ТоварыОрганизаций.Регистратор = &Регистратор
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица.АналитикаУчетаНоменклатуры,
		|	СУММА(ЕСТЬNULL(ВременнаяТаблица.КоличествоУчет, 0)) КАК КоличествоУчет
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблица.АналитикаУчетаНоменклатуры
		|");
		
		Запрос.УстановитьПараметр("Регистратор",    ПараметрСтруктурыДействий.Регистратор);
		Запрос.УстановитьПараметр("Склад",          ПараметрСтруктурыДействий.Склад);
		Запрос.УстановитьПараметр("Организация",    ПараметрСтруктурыДействий.Организация);
		Запрос.УстановитьПараметр("МоментВремени",  ПараметрСтруктурыДействий.МоментВремени);
		Запрос.УстановитьПараметр("Номенклатура",   ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.Характеристика);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
				Коэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекущаяСтрока.Упаковка, ТекущаяСтрока.Номенклатура);
			Иначе
				Коэффициент = 1;
			КонецЕсли;
			ТекущаяСтрока.КоличествоУпаковокУчет = Выборка.КоличествоУчет / Коэффициент;
			ТекущаяСтрока.КоличествоУпаковокФакт = Выборка.КоличествоУчет / Коэффициент;
		Иначе
			ТекущаяСтрока.КоличествоУпаковокУчет = 0;
			ТекущаяСтрока.КоличествоУпаковокФакт = 0;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПараметрСтруктурыДействий) Тогда
		
		Товары = Новый ТаблицаЗначений;
		Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ЗаполнитьЗначенияСвойств(Товары.Добавить(),ТекущаяСтрока);
		Товары = НоменклатураПродаваемаяСовместно.ПолучитьДанныеОНоменклатуреПродаваемойСовместно(Товары, ПараметрСтруктурыДействий);
		Если Товары.Количество() > 0 Тогда
			ТекущаяСтрока.ИндексСовместноПродаваемыеТовары = 1;
		Иначе
			ТекущаяСтрока.ИндексСовместноПродаваемыеТовары = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакПринимаетсяКНУ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем Параметры;
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПринимаетсяКНУ", Параметры) Тогда
		
		Если ПустаяСтрока(Параметры) Тогда
			Параметры = "СтатьяРасходов";
		КонецЕсли;
		
		СтруктураРеквизитов = Новый Структура(Параметры);
		Статья = Неопределено;
		Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
			Если Статья = Неопределено Тогда
				Статья = ТекущаяСтрока[КлючИЗначение.Ключ];
			КонецЕсли;
			
			Контроль = Ложь;
			Если ЗначениеЗаполнено(Статья) И ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
				Контроль = КэшированныеЗначения.ПринимаетсяКНУ[Статья];
				Если Контроль = Неопределено Тогда
					Контроль = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статья, "ПринятиеКНалоговомуУчету") = Истина);
					КэшированныеЗначения.ПринимаетсяКНУ.Вставить(Статья, Контроль);
				КонецЕсли;
			КонецЕсли;
			ТекущаяСтрока.ПринимаетсяКНУ = Контроль;
			Статья = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ПроверитьСериюРассчитатьСтатус(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус", ПараметрыДействия) Тогда
		
		РезультатРасчета = НоменклатураСервер.ПроверитьСериюРассчитатьСтатусПриИзмененииРеквизитаВТЧ(
								ТекущаяСтрока,
								ПараметрыДействия.Склад,
								ПараметрыДействия.ПараметрыУказанияСерий);
								
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, РезультатРасчета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПризнакДляЗаполненияТекстовогоОписания(ТекущаяСтрока, СтруктураДействий)
	
	Если СтруктураДействий.Свойство("УстановитьПризнакДляЗаполненияТекстовогоОписания") Тогда
		
		ТекущаяСтрока.ДляЗаполненияТекстовогоОписания = НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакАдресногоХранения(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрыИспользуетсяАдресноеХранение;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАдресногоХранения", ПараметрыИспользуетсяАдресноеХранение) Тогда
		
		ДатаДокумента = Неопределено;
		
		ПараметрыИспользуетсяАдресноеХранение.Свойство("Дата", ДатаДокумента);
		
		Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = ТекущаяДатаСеанса();				
		КонецЕсли;
		
		ТекущаяСтрока.ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(
			ПараметрыИспользуетсяАдресноеХранение.Склад, 
			ПараметрыИспользуетсяАдресноеХранение.Помещение,
			ДатаДокумента);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакИспользованияПомещений(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрыИспользуютсяПомещения;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакИспользованияПомещений", ПараметрыИспользуютсяПомещения) Тогда
		
		ДатаДокумента = Неопределено;
		
		ПараметрыИспользуютсяПомещения.Свойство("Дата", ДатаДокумента);
		
		Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = ТекущаяДатаСеанса();				
		КонецЕсли;
		
		ТекущаяСтрока.ИспользоватьСкладскиеПомещения = СкладыСервер.ИспользоватьСкладскиеПомещения(
			ПараметрыИспользуютсяПомещения.Склад, 
			ДатаДокумента);
			
		КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПризнакДвиженияПоСкладскимРегистрам(ТекущаяСтрока, СтруктураДействий)
	
	Перем ИмяПоля;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", ИмяПоля) Тогда
		ТекущаяСтрока[ИмяПоля] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущаяСтрока[СтруктураДействий.ЗаполнитьПризнакНазначения], "ДвиженияПоСкладскимРегистрам");
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьGTINВСтроке(ТекущаяСтрока, СтруктураДействий)
	Перем Параметры;
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьGTINВСтроке", Параметры) Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК GTIN
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ВЫБОР
	|		КОГДА &ХарактеристикаЗаполнена ТОГДА
	|			ШтрихкодыНоменклатуры.Характеристика = &Характеристика
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ");
	Запрос.УстановитьПараметр("Номенклатура",            ТекущаяСтрока.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",          ТекущаяСтрока.Характеристика);
	Запрос.УстановитьПараметр("ХарактеристикаЗаполнена", ЗначениеЗаполнено(ТекущаяСтрока.Характеристика));
	
	КорректныеGTIN = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДобавлятьЛидирующиеНули = Ложь;
	Если Параметры <> Неопределено Тогда
		ДобавлятьЛидирующиеНули = Параметры.ДобавлятьЛидирующиеНули;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(Выборка.GTIN) Тогда
			
			GTIN = Выборка.GTIN;
			Если ДобавлятьЛидирующиеНули Тогда
				GTIN = ДополнитьGTINЛидирующимиНулями(Выборка.GTIN);
			КонецЕсли;
			
			КорректныеGTIN.Добавить(GTIN);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КорректныеGTIN.Найти(ТекущаяСтрока.GTIN) <> Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли КорректныеGTIN.Количество() = 1 Тогда
		
		ТекущаяСтрока.GTIN = КорректныеGTIN[0];
		
	ИначеЕсли КорректныеGTIN.Количество() > 1 Тогда
		
		ТекущаяСтрока.GTIN = "";
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса выборки по служебным реквизитам номенклатуры
//
// Параметры:
// 		СтруктураДействий - Структура - Структура с именами служебных реквизитов в качестве полей
// 		СтруктураДопДанных - Структура - Структура с дополнительными данными.
//
// Возвращаемое значение:
// 		Строка - Строка с текстом запроса.
//
Функция ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных) Экспорт
	
	ШаблонЗапроса = "";
	
	// Формирование шаблона запроса временной таблицы по номенклатуре
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки, &ТекстВЫБРАТЬ
	|ПОМЕСТИТЬ втТаблицаНоменклатуры
	|ИЗ
	|	&КоллекцияДанных КАК Таблица;";
	
	ШаблонВЫБРАТЬ = ",
	|	Таблица.%ИмяПоля% КАК %ИмяПоля%";
	ШаблонВЫБРАТЬНоменклатура = ",
	|	ВЫРАЗИТЬ(Таблица.%ИмяПоля% КАК Справочник.Номенклатура) КАК %ИмяПоля%";
	
	ТекстВЫБРАТЬ = "";
	Для Каждого Поле Из СтруктураДопДанных.СтруктураИсточников Цикл
		Если Поле.Ключ = "Упаковка" Тогда
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + ",
			|	ВЫРАЗИТЬ(Таблица.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка";
		ИначеЕсли Поле.Ключ = "Назначение" Тогда
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + ",
			|	ВЫРАЗИТЬ(Таблица.Назначение КАК Справочник.Назначения) КАК Назначение";
		ИначеЕсли СтрНачинаетсяС(Поле.Ключ, "Номенклатура") Тогда
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + СтрЗаменить(ШаблонВЫБРАТЬНоменклатура, "%ИмяПоля%", Поле.Ключ);
		Иначе
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + СтрЗаменить(ШаблонВЫБРАТЬ, "%ИмяПоля%", Поле.Ключ);
		КонецЕсли;
	КонецЦикла;
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, ", &ТекстВЫБРАТЬ", ТекстВЫБРАТЬ);
	
	// Шаблон запроса основной выборки
	ШаблонЗапроса = ШаблонЗапроса + "
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки, &ТекстВЫБРАТЬ
	|ИЗ
	|	втТаблицаНоменклатуры КАК втТаблицаНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	// Формирование полей запроса основной выборки
	ТекстВЫБРАТЬ = "";
	Для Каждого Действие Из СтруктураДействий Цикл
		ШаблонВЫБРАТЬ = ШаблонПоляВыборкиПоКлючуДействия(Действие.Ключ);
		Если ШаблонВЫБРАТЬ <> Неопределено Тогда
			Для Каждого Поле Из Действие.Значение Цикл
				Если ЗначениеЗаполнено(Поле.Значение) Тогда
					ТекстВыбрать = ТекстВЫБРАТЬ + СтрЗаменить(СтрЗаменить(ШаблонВЫБРАТЬ, "%ЗначениеЗамены%", Поле.Значение), "%Ключ%", Поле.Ключ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрЗаменить(ШаблонЗапроса, ", &ТекстВЫБРАТЬ", ТекстВЫБРАТЬ);
	
КонецФункции

// Возвращает структуру дополнительной информации получения служебных реквизитов
//
// Параметры:
// 		СтруктураДействий - Структура - Структура с действиями по получения служебных реквизитов.
//
// Возвращаемое значение:
// 		Структура
//
Функция ОписаниеДополнительнойИнформации(СтруктураДействий) Экспорт
	
	СтруктураИсточников = Новый Структура;
	СтрокаРеквизитовЗаполнения = "";
	СтрокаРеквизитовВыгрузки = "";
	
	Для Каждого Действие Из СтруктураДействий Цикл
		Если ЗначениеЗаполнено(Действие.Значение) Тогда
			Для Каждого Поле Из Действие.Значение Цикл
				Если Не СтруктураИсточников.Свойство(Поле.Ключ) Тогда
					СтруктураИсточников.Вставить(Поле.Ключ);
					СтрокаРеквизитовВыгрузки = СтрокаРеквизитовВыгрузки + ", " + Поле.Ключ;
				КонецЕсли;
				Если ЗначениеЗаполнено(Поле.Значение) Тогда
					СтрокаРеквизитовЗаполнения = СтрокаРеквизитовЗаполнения + ", " + Поле.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура(
		"СтруктураИсточников, РеквизитыЗаполнения, РеквизитыВыгрузки",
		СтруктураИсточников,
		Сред(СтрокаРеквизитовЗаполнения, 2), // Отрезать первый символ строки, т.к. это запятая
		СтрокаРеквизитовВыгрузки);
	
КонецФункции


Процедура ЗаполнитьСлужебныеРеквизитыПоНазначениюВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Если СтруктураДействий.Свойство("ЗаполнитьСлужебныеРеквизитыПоНазначению") Тогда
		УстановитьПривилегированныйРежим(Истина);
		СоставРеквизитов = "ТипНазначения,Заказ,Партнер,Договор,НаправлениеДеятельности";
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.Назначение, СоставРеквизитов);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Результат);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНеобходимостьОбновленияКолонкиДоступно(ТекущаяСтрока, СтруктураДействий)
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьОбновленияКолонкиДоступно") Тогда
		
		ОбеспечениеВДокументахСервер.ПроверитьНеобходимостьОбновленияКолонкиДоступно(
			ТекущаяСтрока,
			СтруктураДействий.ПроверитьНеобходимостьОбновленияКолонкиДоступно); // вовзрат результата через параметры действия
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКэшНоменклатура(ТекущаяСтрока, СтруктураДействий)
	
	ПараметрыДействия = Неопределено;
	Если СтруктураДействий.Свойство("ОбновитьКэшНоменклатура", ПараметрыДействия) Тогда
		
		ОбеспечениеВДокументахСервер.ОбновитьКэшНоменклатура(
			ТекущаяСтрока,
			ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения", ПараметрыДействия) Тогда
		
		Если ТипЗнч(ТекущаяСтрока) <> Тип("Структура") Или Не ТекущаяСтрока.Свойство("ДанныеПрограммногоОбъекта") Тогда
			
			ДанныеПрограммногоОбъекта = ОбеспечениеВДокументахКлиентСервер.ДанныеПрограммногоОбъекта(
				ПараметрыДействия,
				ТекущаяСтрока);
			
		Иначе
			
			ДанныеПрограммногоОбъекта = ТекущаяСтрока.ДанныеПрограммногоОбъекта;
			
		КонецЕсли;
		
		ОбеспечениеВДокументахСервер.ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения(
			ТекущаяСтрока,
			ДанныеПрограммногоОбъекта,
			ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииТипаНоменклатуры(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатуры", ПараметрыДействия) Тогда
		
		Если ПараметрыДействия.Свойство("ЕстьОтменено")
			И ПараметрыДействия.ЕстьОтменено Тогда
			Отменено = ПараметрыДействия.ЕстьОтменено И ТекущаяСтрока.Отменено;
		Иначе
			Отменено = Ложь;
		КонецЕсли;
		ЭтоРабота = ПараметрыДействия.ЕстьРаботы
			И(ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
				Или ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
				
		ТекущаяСтрока.СкладОбязателен = ?(Не ЭтоРабота И Не Отменено, 1, 0);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкуДоступно(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКолонкуДоступно", ПараметрыДействия) Тогда
		
		Если СтруктураДействий.Свойство("ПроверитьНеобходимостьОбновленияКолонкиДоступно")
				И СтруктураДействий.ПроверитьНеобходимостьОбновленияКолонкиДоступно.ОбновитьКолонкуДоступно Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ТекущаяСтрока) <> Тип("Структура")
				Или Не ТекущаяСтрока.Свойство("ДанныеПрограммногоОбъекта") Тогда
			
			ДанныеПрограммногоОбъекта = ОбеспечениеВДокументахКлиентСервер.ДанныеПрограммногоОбъекта(
				ПараметрыДействия,
				ТекущаяСтрока);
			
		Иначе
			
			ДанныеПрограммногоОбъекта = ТекущаяСтрока.ДанныеПрограммногоОбъекта;
			
		КонецЕсли;
		
		ОбеспечениеВДокументахСервер.ЗаполнитьКолонкуДоступно(ТекущаяСтрока,
		                                                      ДанныеПрограммногоОбъекта,
		                                                      ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет служебный реквизит "РасхождениеЗаказ" в строке
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  СтруктураДействий	 - Структура - описывает действия, где Ключ - наименование действия,
//  														   Значение - Структура - параметры действия.
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ЗаполнитьПризнакРасхождениеЗаказ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем ПараметрыЗаполнения;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПризнакРасхождениеЗаказ", ПараметрыЗаполнения) Тогда
		Возврат;
	КонецЕсли;

	ЗаказыСервер.ЗаполнитьПризнакРасхождениеЗаказ(ТекущаяСтрока, ПараметрыЗаполнения, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Дополняет штрихкод EAN лидирующими нулями.
//
// Параметры:
//  ШтрихкодEAN - Строка - Значение штрихкода EAN.
// Возвращаемое значение:
//  Строка - GTIN.
Функция ДополнитьGTINЛидирующимиНулями(Знач ШтрихкодEAN) Экспорт
	
	GTIN = ШтрихкодEAN;
	Пока СтрДлина(GTIN) < 14 Цикл
		GTIN = "0" + GTIN;
	КонецЦикла;
	
	Возврат GTIN;
	
КонецФункции

Процедура ЗаполнитьЦенуПродажиПоАссортиментуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	Если Не СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	// Получение параметров запроса
	СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, Склад, Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтруктураПараметровДействия);
	
	Если (СтруктураПараметровДействия.Свойство("ОбработатьШтрихкоды", ЗначениеСвойства) И ЗначениеСвойства.НеИспользоватьУпаковки)
	Или СтруктураПараметровОтбора.Упаковка = Неопределено Тогда
		СтруктураПараметровОтбора.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;
	
	Цена = АссортиментСервер.ПолучитьЦенуПоАссортименту(СтруктураПараметровОтбора);
	ТекущаяСтрока.Цена = Цена;
	
КонецПроцедуры

// Параметры:
// 	ТекущаяСтрока - см. ОбработатьСтрокуТЧ.ТекущаяСтрока
// 	СтруктураДействий - см. ОбработатьСтрокуТЧ.СтруктураДействий
//
Процедура ПроверитьАссортиментСтроки(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	Если Не СтруктураДействий.Свойство("ПроверитьАссортиментСтроки", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	КонтролироватьАссортимент = АссортиментСерверПовтИсп.КонтролироватьАссортимент(
		СтруктураПараметровДействия.Склад, 
		СтруктураПараметровДействия.Дата);
	
	Если КонтролироватьАссортимент Тогда
		
		Если НЕ ТекущаяСтрока.Свойство("НоменклатураНабора") ИЛИ Не ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
			СтруктураСостояния = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(ТекущаяСтрока.Номенклатура,
																								СтруктураПараметровДействия.Склад,
																								СтруктураПараметровДействия.Дата);
		Иначе
			СтруктураСостояния = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(ТекущаяСтрока.НоменклатураНабора,
																								СтруктураПараметровДействия.Склад,
																								СтруктураПараметровДействия.Дата);
		КонецЕсли;
		
		Если НЕ СтруктураСостояния[СтруктураПараметровДействия.ИмяРесурсаАссортимента] Тогда
			
			ТекстСообщения = СтруктураПараметровДействия.ТекстСообщения;
			Если НЕ ТекущаяСтрока.Свойство("НоменклатураНабора") ИЛИ Не ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущаяСтрока.Номенклатура);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					СтруктураПараметровДействия.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура"),
					,
					Ложь);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущаяСтрока.НоменклатураНабора);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					СтруктураПараметровДействия.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "ИндексНабора"),
					,
					Ложь);
			КонецЕсли;
			
			Если НЕ СтруктураПараметровДействия.РазрешатьДобавление Тогда
				ТекущаяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКодТНВЭДПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий)
	
	Перем НалогообложениеНДС;

	Если СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД", НалогообложениеНДС) Тогда
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт 
			ИЛИ НалогообложениеНДС = Неопределено Тогда
			ТекущаяСтрока.КодТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура,"КодТНВЭД");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеОбУпаковке(Номенклатура, Упаковка, КэшированныеЗначения) Экспорт 
	
	ДанныеОбУпаковке = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(Упаковка, Номенклатура, , Ложь);
	
	КлючКоэффициента = ОбработкаТабличнойЧастиКлиентСервер.КлючКэшаУпаковки(Номенклатура, Упаковка);
	
	КэшированныеЗначения.КоэффициентыУпаковок.Вставить(КлючКоэффициента,	Новый Структура("Коэффициент, НужноОкруглятьКоличество",
																							ДанныеОбУпаковке.Коэффициент,
																							ДанныеОбУпаковке.НужноОкруглятьКоличество));
	КэшированныеЗначения.ОбъемУпаковок.Вставить(КлючКоэффициента, 			ДанныеОбУпаковке.Вес);
	КэшированныеЗначения.ВесУпаковок.Вставить(КлючКоэффициента, 			ДанныеОбУпаковке.Объем);
	
	Возврат ДанныеОбУпаковке;
	
КонецФункции

Процедура ЗаполнитьСтрануПроисхожденияДляНомераГТД(ТекущаяСтрока, СтруктураДействий)
	
	Перем Параметры;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияДляНомераГТД", Параметры) Тогда
		ТекущаяСтрока.СтранаПроисхождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.НомерГТД, "СтранаПроисхождения");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрануПроисхожденияНоменклатуры(ТекущаяСтрока, СтруктураДействий)
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияНоменклатуры") Тогда
		Если Не ТекущаяСтрока.ВедетсяУчетПоГТД Тогда
			ТекущаяСтрока.СтранаПроисхождения = Справочники.СтраныМира.ПустаяСсылка();
		ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.НомерГТД) Тогда
			ТекущаяСтрока.СтранаПроисхождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.НомерГТД,
																							"СтранаПроисхождения");
		Иначе
			ТекущаяСтрока.СтранаПроисхождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура,
																							"СтранаПроисхождения");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает коэффициенты по РНПТ для указанной Организации и списка товаров.
//
// Параметры:
//	ИсключаемыйДокумент - ДокументСсылка - документ, движения которого исключаются при расчета коэффициента по РНПТ.
//	Организация - СправочникСсылка.Организации - организация, для которой рассчитываются коэффициенты по РНПТ.
//	Товары - ТаблицаЗначений - таблица, содержащая сведения о товарах.
//	КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке данных.
//	Соглашение - СправочникСсылка.СоглашенияСКлиентами - соглашение, для которого рассчитываются коэффициенты по РНПТ.
//	
// Возвращаемое значение:
//	ТаблицаЗначений - см. описание УчетПрослеживаемыхТоваровЛокализация.ПолучитьКоэффициентыПрослеживаемыхТоваров().
//
Функция ПолучитьКоэффициентРНПТ(ИсключаемыйДокумент, Организация, Товары, КэшированныеЗначения, Соглашение = Неопределено) Экспорт
	
	Коэффициенты =
		УчетПрослеживаемыхТоваровЛокализация.ПолучитьКоэффициентыПрослеживаемыхТоваров(
			ИсключаемыйДокумент,
			Организация,
			Товары,
			Соглашение);
	
	Возврат Коэффициенты;
	
КонецФункции


Процедура ЗаполнитьНаправлениеДеятельности(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем ПараметрыДействия;

	Если Не СтруктураДействий.Свойство("ЗаполнитьНаправлениеДеятельности", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;

	НаправленияДеятельностиСервер.ЗаполнитьНаправлениеДеятельности(
		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ПараметрыДействия);

КонецПроцедуры

Процедура ЗаполнитьПодразделениеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем ПараметрыДействия;
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьПодразделениеВСтрокеТЧ", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	СписокТипов = ПродажиСервер.ТипыНоменклатурыСАналитикойПодразделение();
	Если СписокТипов.НайтиПоЗначению(ТекущаяСтрока.ТипНоменклатуры) = Неопределено Тогда
		ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	Иначе
		ТекущаяСтрока.Подразделение = ПараметрыДействия.Подразделение;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияСлужебныхРеквизитовПоНоменклатуре

Функция ПоддерживаемыеДействияЗаполненияТЧ() Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить("ЗаполнитьПризнакТипНоменклатуры");
	Действия.Добавить("ЗаполнитьПризнакВидНоменклатуры");
	Действия.Добавить("ЗаполнитьПризнакЕдиницаИзмерения");
	Действия.Добавить("ЗаполнитьПризнакТипИзмеряемойВеличины");
	Действия.Добавить("ЗаполнитьВесУпаковки");
	Действия.Добавить("ЗаполнитьОбъемУпаковки");
	Действия.Добавить("ЗаполнитьЕдиницуИзмеренияВеса");
	Действия.Добавить("ЗаполнитьЕдиницуИзмеренияОбъема");
	Действия.Добавить("ЗаполнитьПризнакАртикул");
	Действия.Добавить("ЗаполнитьПризнакКод");
	Действия.Добавить("ЗаполнитьПризнакОписание");
	Действия.Добавить("ЗаполнитьПризнакВариантОформленияПродажи");
	Действия.Добавить("ЗаполнитьПризнакХарактеристикиИспользуются");
	Действия.Добавить("ЗаполнитьПризнакВедетсяУчетПоГТД");
	Действия.Добавить("ЗаполнитьПризнакВедетсяУчетПоРНПТ");
	Действия.Добавить("ЗаполнитьПризнакЭтоУслуга");
	Действия.Добавить("ЗаполнитьПризнакСерииИспользуются");
	Действия.Добавить("ПересчитатьВесОбъем");
	Действия.Добавить("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиСерверЛокализация.ДополнитьПоддерживаемыеДействияЗаполненияТЧ(Действия);
	
	Возврат Действия;
	
КонецФункции

// Возвращает шаблон поля выборки соответствующий для указанного ключа действия
//
// Параметры:
//  КлючДействия						 - Строка	 - Строка имени ключа действия
//  ТолькоПроверитьПоддерживаемыеКлючи	 - Булево - признак проверки поддержки ключа действия.
// 
// Возвращаемое значение:
//  Строка, Неопределено - Строка шаблон поля запроса.
//
Функция ШаблонПоляВыборкиПоКлючуДействия(КлючДействия, ТолькоПроверитьПоддерживаемыеКлючи = Ложь)
	
	ШаблонЛокализация = "";
	ОбработкаТабличнойЧастиСерверЛокализация.ПриОпределенииШаблонаПоляВыборкиПоКлючуДействия(КлючДействия, ШаблонЛокализация);
	Если ЗначениеЗаполнено(ШаблонЛокализация) Тогда
		Возврат ШаблонЛокализация;
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакТипНоменклатуры" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ТипНоменклатуры КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВидНоменклатуры" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВидНоменклатуры КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакЕдиницаИзмерения" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ЕдиницаИзмерения КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакТипИзмеряемойВеличины" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьВесУпаковки" Тогда
		ТекстЗапроса = ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ТОГДА &ТекстЗапросаВесУпаковки
		|	ИНАЧЕ &ТекстЗапросаВесНоменклатуры
		|	КОНЕЦ КАК ВесУпаковки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаВесУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("втТаблицаНоменклатуры.Упаковка","втТаблицаНоменклатуры.Номенклатура", Ложь));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаВесНоменклатуры",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("втТаблицаНоменклатуры.Номенклатура.ЕдиницаИзмерения","втТаблицаНоменклатуры.Номенклатура", Ложь));
		Возврат ТекстЗапроса
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьОбъемУпаковки" Тогда
		ТекстЗапроса = ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ТОГДА &ТекстЗапросаОбъемУпаковки
		|	ИНАЧЕ &ТекстЗапросаОбъемНоменклатуры
		|	КОНЕЦ КАК ОбъемУпаковки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаОбъемУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("втТаблицаНоменклатуры.Упаковка","втТаблицаНоменклатуры.Номенклатура", Ложь));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаОбъемНоменклатуры",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("втТаблицаНоменклатуры.Номенклатура.ЕдиницаИзмерения","втТаблицаНоменклатуры.Номенклатура", Ложь));
		Возврат ТекстЗапроса
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьЕдиницуИзмеренияВеса" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.ВесЕдиницаИзмерения
		|	ИНАЧЕ втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмеренияВеса";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьЕдиницуИзмеренияОбъема" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.ОбъемЕдиницаИзмерения
		|	ИНАЧЕ втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмеренияОбъема";
	КонецЕсли;
	
	Если КлючДействия = "ПересчитатьВесОбъем" Тогда
		ТекстЗапроса = ",
		|	втТаблицаНоменклатуры.%Ключ%
		|	*(ВЫБОР
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес) И втТаблицаНоменклатуры.Номенклатура.ВесИспользовать
		|		ТОГДА 1
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем) И втТаблицаНоменклатуры.Номенклатура.ВесИспользовать
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.Упаковка.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения.Числитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЧислитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель,0) <> 0
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.Числитель / втТаблицаНоменклатуры.Упаковка.Знаменатель / (втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель) / (втТаблицаНоменклатуры.Номенклатура.ОбъемЧислитель / втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель) * (втТаблицаНоменклатуры.Номенклатура.ВесЧислитель / втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель)
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь) И втТаблицаНоменклатуры.Номенклатура.ВесИспользовать
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.Упаковка.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ПлощадьЧислитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ПлощадьЗнаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель,0) <> 0
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.Числитель / втТаблицаНоменклатуры.Упаковка.Знаменатель / (втТаблицаНоменклатуры.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / втТаблицаНоменклатуры.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель) / (втТаблицаНоменклатуры.Номенклатура.ПлощадьЧислитель / втТаблицаНоменклатуры.Номенклатура.ПлощадьЗнаменатель) * (втТаблицаНоменклатуры.Номенклатура.ВесЧислитель / втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель)
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина) И втТаблицаНоменклатуры.Номенклатура.ВесИспользовать
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.Упаковка.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ДлинаЕдиницаИзмерения.Числитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ДлинаЧислитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ДлинаЗнаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель,0) <> 0
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.Числитель / втТаблицаНоменклатуры.Упаковка.Знаменатель / (втТаблицаНоменклатуры.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / втТаблицаНоменклатуры.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель) / (втТаблицаНоменклатуры.Номенклатура.ДлинаЧислитель / втТаблицаНоменклатуры.Номенклатура.ДлинаЗнаменатель) * (втТаблицаНоменклатуры.Номенклатура.ВесЧислитель / втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель)
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.Вес
		|	КОГДА (втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|				ИЛИ втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(втТаблицаНоменклатуры.Упаковка.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		И втТаблицаНоменклатуры.Номенклатура.ВесИспользовать
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель,0) <> 0
		|		ТОГДА втТаблицаНоменклатуры.Номенклатура.ВесЧислитель / втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель
		|	ИНАЧЕ 0
		|	КОНЕЦ) КАК Вес,
		|
		|	втТаблицаНоменклатуры.%Ключ%
		|	*(ВЫБОР
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес) И втТаблицаНоменклатуры.Номенклатура.ОбъемИспользовать
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.Упаковка.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения.Числитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЧислитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель,0) <> 0
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.Числитель / втТаблицаНоменклатуры.Упаковка.Знаменатель / (втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения.Числитель / втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения.Знаменатель) / (втТаблицаНоменклатуры.Номенклатура.ВесЧислитель / втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель) * (втТаблицаНоменклатуры.Номенклатура.ОбъемЧислитель / втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель)
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем) И втТаблицаНоменклатуры.Номенклатура.ОбъемИспользовать
		|		ТОГДА 1
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь) И втТаблицаНоменклатуры.Номенклатура.ОбъемИспользовать
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.Упаковка.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ПлощадьЧислитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ПлощадьЗнаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель,0) <> 0
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.Числитель / втТаблицаНоменклатуры.Упаковка.Знаменатель / (втТаблицаНоменклатуры.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / втТаблицаНоменклатуры.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель) / (втТаблицаНоменклатуры.Номенклатура.ПлощадьЧислитель / втТаблицаНоменклатуры.Номенклатура.ПлощадьЗнаменатель) * (втТаблицаНоменклатуры.Номенклатура.ОбъемЧислитель / втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель)
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина) И втТаблицаНоменклатуры.Номенклатура.ОбъемИспользовать
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.Упаковка.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ДлинаЕдиницаИзмерения.Числитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ДлинаЧислитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ДлинаЗнаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель,0) <> 0
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.Числитель / втТаблицаНоменклатуры.Упаковка.Знаменатель / (втТаблицаНоменклатуры.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / втТаблицаНоменклатуры.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель) / (втТаблицаНоменклатуры.Номенклатура.ДлинаЧислитель / втТаблицаНоменклатуры.Номенклатура.ДлинаЗнаменатель) * (втТаблицаНоменклатуры.Номенклатура.ОбъемЧислитель / втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель)
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.Объем
		|	КОГДА (втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|				ИЛИ втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(втТаблицаНоменклатуры.Упаковка.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		И втТаблицаНоменклатуры.Номенклатура.ОбъемИспользовать
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель,0) <> 0
		|		ТОГДА втТаблицаНоменклатуры.Номенклатура.ОбъемЧислитель / втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель
		|	ИНАЧЕ 0
		|	КОНЕЦ) КАК Объем";
		
		Возврат ТекстЗапроса
	КонецЕсли;
	
	Если КлючДействия = "ПересчитатьКоличествоУпаковок" Тогда
		ТекстЗапроса = ",
		|	втТаблицаНоменклатуры.%Ключ% / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК %ЗначениеЗамены%";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"втТаблицаНоменклатуры.Упаковка",
				"втТаблицаНоменклатуры.Номенклатура"));
		
		Возврат ТекстЗапроса;
	КонецЕсли;

	Если КлючДействия = "ЗаполнитьПризнакАртикул" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.Артикул КАК %ЗначениеЗамены%";
	КонецЕсли;

	Если КлючДействия = "ЗаполнитьПризнакКод" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.Код КАК %ЗначениеЗамены%";
	КонецЕсли;

	Если КлючДействия = "ЗаполнитьПризнакОписание" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.Описание КАК %ЗначениеЗамены%";
	КонецЕсли;

	Если КлючДействия = "ЗаполнитьПризнакВариантОформленияПродажи" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВариантОформленияПродажи КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакХарактеристикиИспользуются" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.%Ключ%.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|																			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|																			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВедетсяУчетПоГТД" Тогда
		Возврат ",
		|	ЕСТЬNULL(втТаблицаНоменклатуры.%Ключ%.ВестиУчетПоГТД, ЛОЖЬ) КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВедетсяУчетПоРНПТ" Тогда
		Возврат ",
		|	ЕСТЬNULL(втТаблицаНоменклатуры.%Ключ%.ПрослеживаемыйТовар, ЛОЖЬ)
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.%Ключ%.ВестиУчетПоГТД, ЛОЖЬ) КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакЭтоУслуга" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.%Ключ%.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакСерииИспользуются" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВидНоменклатуры.ИспользоватьСерии КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если ТипЗнч(КлючДействия) = Тип("Строка")
		И Не ТолькоПроверитьПоддерживаемыеКлючи Тогда
		ТекстЗапроса =
			",
			|	втТаблицаНоменклатуры.%Ключ%.%ИмяПоля% КАК %ЗначениеЗамены%";
		Возврат СтрЗаменить(ТекстЗапроса, "%ИмяПоля%", КлючДействия);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Преобразует структуру действий для использования в ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(),
// чтобы рассчитывать нужные поля одним запросом по всей коллекции.
//
// Параметры:
// 		СтруктураДействий - Структура - Структура с действиями по получению служебных реквизитов.
//
Процедура НормализоватьДействия(СтруктураДействий) Экспорт
	
	Суффикс = Неопределено;
	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем", Суффикс)
		И ТипЗнч(Суффикс) <> Тип("Структура") Тогда
		КоличествоУпаковок = ОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(Суффикс).КоличествоУпаковок;
		СтруктураДействий.Вставить("ПересчитатьВесОбъем",
									Новый Структура(КоличествоУпаковок + ",Номенклатура,Упаковка", "Вес,Объем"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// << 08.08.2022, Федотов А.М., КРОК, Jira№ A2105505-314 
#Область КР_ДополнительныеПроцедурыИФункции

// << 30.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-862
Процедура КР_ЗаполнитьПризнакМаркируемаяПродукция(ТекущаяСтрока, СтруктураДействий)
	
	Перем Характеристика;
	
	Если Не СтруктураДействий.Свойство("КР_ЗаполнитьПризнакМаркируемаяПродукция", Характеристика) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Характеристика",
		?(ЗначениеЗаполнено(Характеристика), Характеристика, ТекущаяСтрока.Характеристика));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КлассификаторТНВЭД.КР_Маркируется, ЛОЖЬ) КАК КР_МаркируемаяПродукция
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ПО ХарактеристикиНоменклатуры.КР_КодТНВЭД = КлассификаторТНВЭД.Ссылка
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Ссылка = &Характеристика";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущаяСтрока["КР_МаркируемаяПродукция"] = Выборка.КР_МаркируемаяПродукция;
	КонецЕсли;
	
КонецПроцедуры // >> 30.12.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-862

// << 14.02.2023 Маскаев П.Ю., КРОК, JIRA№ A2105505-1166
Процедура КР_ЗаполнитьВыданоПринято(ТекущаяСтрока, СтруктураДействий)
	
	Если Не СтруктураДействий.Свойство("КР_ЗаполнитьКассираВСтроке") Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(ТекущаяСтрока.Документ);
	
	Если ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ТекущаяСтрока.КР_ВыданоПринято = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Документ, "ПринятоОт"); //НСтр("ru = 'Принято от'");
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ТекущаяСтрока.КР_ВыданоПринято = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Документ, "Выдать"); //НСтр("ru = 'Выдано'");
	Иначе
		ТекущаяСтрока.КР_ВыданоПринято = "";
	КонецЕсли;
	
КонецПроцедуры // >> 14.02.2023 Маскаев П.Ю., КРОК, JIRA№ A2105505-1166

// << 14.02.2023 Маскаев П.Ю., КРОК, JIRA№ A2105505-1166
Процедура КР_ЗаполнитьКассира(ТекущаяСтрока, СтруктураДействий)
	
	Если Не СтруктураДействий.Свойство("КР_ЗаполнитьКассираВСтроке") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
		ТекущаяСтрока.КР_Кассир = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Документ, "Кассир");
	КонецЕсли;
	
КонецПроцедуры // >> 14.02.2023 Маскаев П.Ю., КРОК, JIRA№ A2105505-1166

// << 16.03.2023 Маскаев П.Ю., КРОК, JIRA№ A2105505-1153
Процедура КР_ЗаполнитьСостояниеОтправкиВСБИС(ТекущаяСтрока, СтруктураДействий)
	
	Если Не СтруктураДействий.Свойство("КР_ЗаполнитьСостояниеОтправкиВСБИСВСтроке") Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.КР_ИсходящиеДокументыСБИС.ЕстьСостояниеИсходящегоДокументаСБИС(
		ТекущаяСтрока.Документ, ТекущаяСтрока.КР_СостояниеОтправкиВСБИС);
	
КонецПроцедуры // >> 16.03.2023 Маскаев П.Ю., КРОК, JIRA№ A2105505-1153

#КонецОбласти 

#КонецОбласти
