
#Область ОбщиеФункции

Функция ЭтоДокументМДЛП(ШаблонВидДокумента) Экспорт
	
	МассивВидовДокументовМДЛП = Новый Массив;
	МассивВидовДокументовМДЛП.Добавить("УведомлениеОПриемкеМДЛП");
	МассивВидовДокументовМДЛП.Добавить("УведомлениеОбОтгрузкеМДЛП");
	МассивВидовДокументовМДЛП.Добавить("УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП");
	МассивВидовДокументовМДЛП.Добавить("УведомлениеОбОприходованииМДЛП");
	МассивВидовДокументовМДЛП.Добавить("УведомлениеОВыбытииМДЛП");
	МассивВидовДокументовМДЛП.Добавить("РеализацияТоваровУслуг");
	
	Если МассивВидовДокументовМДЛП.Найти(ШаблонВидДокумента) <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ()

Функция УбратьИзМаркиУпрСимволы(ЦРПТМаркаСТСД) Экспорт
	
	Если Сред(ЦРПТМаркаСТСД, 1, 2) = "01" И Сред(ЦРПТМаркаСТСД, 17, 2) = "21" Тогда
		
		ЦРПТМаркаБезУпрСимволов = Сред(ЦРПТМаркаСТСД, 3, 14) + Сред(ЦРПТМаркаСТСД, 19, 13);		
		
	ИначеЕсли Сред(ЦРПТМаркаСТСД, 1, 2) = "00" И (СтрДлина(ЦРПТМаркаСТСД) = 20 Или Найти(ЦРПТМаркаСТСД, "/") = 21) Тогда
		
		ЦРПТМаркаБезУпрСимволов = Сред(ЦРПТМаркаСТСД, 3, 18);
		
	ИначеЕсли Сред(ЦРПТМаркаСТСД, 1, 4) = "(00)" Тогда
		
		ЦРПТМаркаБезУпрСимволов = Сред(ЦРПТМаркаСТСД, 5, 18);
		
	Иначе
		
		ЦРПТМаркаБезУпрСимволов = ЦРПТМаркаСТСД;	
		
	КонецЕсли;
	
	Возврат ЦРПТМаркаБезУпрСимволов;
	
КонецФункции // ()

Функция ДобавитьВМаркуУпрСимволы(ЦРПТМаркаБезУпрСимволов) Экспорт
	
	Если ЦРПТМаркаБезУпрСимволов = "" Тогда
		Возврат "";
	Иначе
		Возврат "01" + Сред(ЦРПТМаркаБезУпрСимволов, 1, 14) + "21" + Сред(ЦРПТМаркаБезУпрСимволов, 15, 13);
	КонецЕсли;
	
КонецФункции // ()

Процедура ОбработатьУпрСимволыВТЧМарки(ТЧМарок)
	
	Для каждого Стр Из ТЧМарок Цикл
		
		Стр.ЦРПТМарка = УбратьИзМаркиУпрСимволы(Стр.ЦРПТМарка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДеревоУпаковок(ИсходныйДокумент)
	
	ДеревоУпаковок = Документы.УведомлениеОПриемкеМДЛП.ВходящееДеревоУпаковок(ИсходныйДокумент.Ссылка);
	
	ДеревоУпаковок.Колонки.Добавить("ВсяУпаковкаПроверена", Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("ИдетПроверкаДаннойУпаковки", Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("ИндексКартинкиСтатусПроверки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("ИндексКартинкиШтрихкод", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхВНаличии", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхВсего", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхНеПроверялось", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхОтложено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхОтсутствует", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхПотребительскихУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПодчиненныхУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой)));
	ДеревоУпаковок.Колонки.Добавить("НеСодержитсяВДанныхДокумента", Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("НеСоответствуетОтбору", Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("НомерСтикераОтложено", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ДеревоУпаковок.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ДеревоУпаковок.Колонки.Добавить("ПредставлениеПроверкиПодчиненных", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ДеревоУпаковок.Колонки.Добавить("ПредставлениеСодержимоеУпаковки", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	
	Возврат ДеревоУпаковок;
	
КонецФункции // ()

Функция ПолучитьGTINПоНоменклатуре(Номенклатура)
	
	GTIN = "";
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Штрихкод<>""""";
	
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Штрихкод = Выборка.Штрихкод;
		Если ЗначениеЗаполнено(Штрихкод) Тогда
			Если СтрДлина(Штрихкод) < 14 Тогда
				GTIN = ДобавитьЛидирующиеНули(Штрихкод);
			Иначе
				GTIN = Лев(Штрихкод, 14);	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат GTIN;
	
КонецФункции

Функция ДобавитьЛидирующиеНули(Строка)
	
	СтрокаCНулями = Строка;
	Пока СтрДлина(СтрокаCНулями) < 14  Цикл
		СтрокаCНулями = "0" + СтрокаCНулями;	
	КонецЦикла;	
	
	Возврат СтрокаCНулями; 
	
КонецФункции

#КонецОбласти

#Область ВнесениеВБазу

Функция ТребуетсяСпецОбработка(Об) Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("УведомлениеОПриемкеМДЛП");
	Список.Добавить("УведомлениеОбОтгрузкеМДЛП");	
	Список.Добавить("УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП");
	Список.Добавить("УведомлениеОбОприходованииМДЛП");
	Список.Добавить("УведомлениеОВыбытииМДЛП");
	Список.Добавить("РеализацияТоваровУслуг");
	
	Возврат (Список.НайтиПоЗначению(Об.Шаблон.ВидДокумента) <> Неопределено Или Список.НайтиПоЗначению(Об.Шаблон.ВидДокументаНового) <> Неопределено);
	
КонецФункции // ()

Функция ПолучитьДокументМаркировки(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент, СтрокаОшибок) Экспорт
	
	Шаблон = ДокументТСД.Шаблон;
	ВидДокумента 		= Шаблон.ВидДокумента;
	ВидДокументаНового 	= Шаблон.ВидДокументаНового;
	
	Если ВидДокумента = "УведомлениеОПриемкеМДЛП" Или ВидДокумента = "УведомлениеОбОприходованииМДЛП" Тогда
		
		Возврат ДатаМобайл_МДЛП.ОбработатьВидДокументаУведомлениеОПриемкеМДЛП(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент);	
		
	ИначеЕсли ВидДокумента = "УведомлениеОбОтгрузкеМДЛП" Или ВидДокумента = "УведомлениеОВыбытииМДЛП" Тогда
		
		Возврат ДатаМобайл_МДЛП.ОбработатьВидДокументаУведомлениеОбОтгрузкеМДЛП(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент);	
		
	ИначеЕсли ВидДокумента = "УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП" Тогда	
		
		Возврат ДатаМобайл_МДЛП.ОбработатьВидДокументаУведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент);
		
	ИначеЕсли ВидДокумента = "РеализацияТоваровУслуг" Или ВидДокументаНового = "РеализацияТоваровУслуг" Тогда
		
		Возврат ДатаМобайл_МДЛП.ОбработатьВидДокументаРеализацияТоваровУслуг(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент);
		
	КонецЕсли;
	
КонецФункции // ()

//ПРИЕМКА И ОПРИХОДОВАНИЕ
Функция ОбработатьВидДокументаУведомлениеОПриемкеМДЛП(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент) Экспорт
		
	Шаблон = ДокументТСД.Шаблон;
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПодбор;
	
	ПеренестиВДокументНовыеЗначенияРеквизитов(ИсходныйДокумент, Шаблон);
	ЗаполнитьШапкуДокумента(ДокументТСД, ИсходныйДокумент, ЭтоНовыйДокумент);
	
	ЭтоПрямойПорядок = Ложь;
	Если Шаблон.ВидДокумента = "УведомлениеОПриемкеМДЛП" Тогда
		Если ИсходныйДокумент.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок Тогда
			ЭтоПрямойПорядок = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПрямойПорядок Тогда
		
		СтруктураСобранныхМарокИУпаковок = ПолучитьСтруктуруСобранныхМарокИУпаковок(ДокументТСД);
		ДеревоУпаковок = ПолучитьДеревоУпаковок(ИсходныйДокумент);
		ОбработатьСтрокиДереваУпаковок(ДеревоУпаковок.Строки, СтруктураСобранныхМарокИУпаковок);
		ЗаписатьДанныеПроверкиИПодбора(ИсходныйДокумент, ДеревоУпаковок);	
		
	Иначе
		
		ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ДокументТСД);
		Если ТЧПриЗагрузкеПодбор <> 0 И ТЧПриЗагрузкеПодбор <> 4 Тогда
			ОбработатьИзменениеТЧПодбор_Приемка(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор);
		КонецЕсли;
		ВыполнитьДополнительнуюОбработкуДокумента(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
		
		ТЧМарок = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
		ТЧМарок.Свернуть("ЦРПТМарка, Номенклатура, ХарактеристикаНоменклатуры","Количество");
		ОбработатьУпрСимволыВТЧМарки(ТЧМарок);
		ДобавитьМаркиВДокументУведомлениеОПриемкеМДЛП(ИсходныйДокумент, ТЧМарок);
		
		//упаковки
		ОбработатьИзменениеТЧПодбор_Отгрузка(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор, Ложь);
	КонецЕсли;
	
	ДобавитьКомментарий(ИсходныйДокумент, ДокументТСД, Шаблон);
	
	ИсходныйДокумент.Записать();	
	
	ДокументТСД.ДатаЗавершения = ТекущаяДата();
	ДокументТСД.ИсходныйДокумент = ИсходныйДокумент.Ссылка;
	ДокументТСД.Записать();
	
	//УДАЛЕНИЕ РЕГИСТРАЦИИ ДАННОГО ДОКУМЕНТА НА ДАННОМ УЗЛЕ 
	ДатаМобайл_ОбщийМодуль.УдалитьРегистрациюОбъекта(ДокументТСД, Ложь);
	
	Возврат ИсходныйДокумент.Ссылка;                      
	
КонецФункции

Функция ПолучитьСтруктуруСобранныхМарокИУпаковок(ДокументТСД)
	
	//МАРКИ
	МассивМарок = Новый Массив;	
	ТЗСобранныеДанныеМарки = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
	ТЗСобранныеДанныеМарки.Свернуть("ЦРПТМарка, Короб, УпаковочныйЛист", "Количество");
	
	Для каждого СтрокаДока Из ТЗСобранныеДанныеМарки Цикл
		Если СтрокаДока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;			
		Если Не ЗначениеЗаполнено(СтрокаДока.УпаковочныйЛист) И Не ЗначениеЗаполнено(СтрокаДока.Короб) И ЗначениеЗаполнено(СтрокаДока.ЦРПТМарка) Тогда		
			ИзвлеченнаяМарка = УбратьИзМаркиУпрСимволы(СтрокаДока.ЦРПТМарка);
			МассивМарок.Добавить(ИзвлеченнаяМарка);
		КонецЕсли;		
	КонецЦикла;
	
	//КОРОБА
	МассивКоробов = Новый Массив;	
	ТЗСобранныеДанныеКороба = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
	ТЗСобранныеДанныеКороба.Свернуть("Короб", "Количество");
	
	Для каждого СтрокаДока Из ТЗСобранныеДанныеКороба Цикл
		Если СтрокаДока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		Если ЗначениеЗаполнено(СтрокаДока.Короб) Тогда
			МассивКоробов.Добавить(УбратьИзМаркиУпрСимволы(СтрокаДока.Короб));
		КонецЕсли;		
	КонецЦикла;
	
	//ПАЛЕТЫ
	МассивПалет = Новый Массив;	
	ТЗСобранныеДанныеПалет = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
	ТЗСобранныеДанныеПалет.Свернуть("УпаковочныйЛист", "Количество");
	
	Для каждого СтрокаДока Из ТЗСобранныеДанныеПалет Цикл
		Если СтрокаДока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДока.УпаковочныйЛист) Тогда
			МассивПалет.Добавить(УбратьИзМаркиУпрСимволы(СтрокаДока.УпаковочныйЛист));
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Новый Структура("Марки, Короба, Палеты", МассивМарок, МассивКоробов, МассивПалет);
	
КонецФункции // ()

Процедура ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ДокументТСД)
	
	Шаблон = ДокументТСД.Шаблон;
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПодбор;
	
	Если ТЧПриЗагрузкеПодбор = 0 Тогда //не изменяем, только марки и упаковки чистим
		
		Попытка ИсходныйДокумент.НомераУпаковок.Очистить(); Исключение КонецПопытки;
		Попытка ИсходныйДокумент.УАС_НомераУпаковок.Очистить(); Исключение КонецПопытки;
		Попытка ИсходныйДокумент.ТранспортныеУпаковки.Очистить(); Исключение КонецПопытки;		
		Попытка ИсходныйДокумент.СоставТранспортныхУпаковок.Очистить(); Исключение КонецПопытки;
		
	ИначеЕсли ТЧПриЗагрузкеПодбор = 2 Тогда //замена
		
		Попытка ИсходныйДокумент.НомераУпаковок.Очистить(); Исключение КонецПопытки;
		Попытка ИсходныйДокумент.УАС_НомераУпаковок.Очистить(); Исключение КонецПопытки;
		Попытка ИсходныйДокумент.ТранспортныеУпаковки.Очистить(); Исключение КонецПопытки;
		Попытка ИсходныйДокумент[ИмяТЧПодбор].Очистить(); Исключение КонецПопытки;		
		Попытка ИсходныйДокумент.СоставТранспортныхУпаковок.Очистить(); Исключение КонецПопытки;
		
	ИначеЕсли ТЧПриЗагрузкеПодбор = 3 Тогда //изменение
		
		Попытка ИсходныйДокумент.НомераУпаковок.Очистить(); Исключение КонецПопытки;
		Попытка ИсходныйДокумент.УАС_НомераУпаковок.Очистить(); Исключение КонецПопытки;
		Попытка ИсходныйДокумент.ТранспортныеУпаковки.Очистить(); Исключение КонецПопытки;		
		Попытка ИсходныйДокумент.СоставТранспортныхУпаковок.Очистить(); Исключение КонецПопытки;
		
		Для каждого Стр Из ИсходныйДокумент[ИмяТЧПодбор] Цикл
			
			Попытка Стр.Количество = 0; Исключение КонецПопытки;
			Попытка Стр.КоличествоУпаковок = 0; Исключение КонецПопытки;
			
		КонецЦикла;
		
	ИначеЕсли ТЧПриЗагрузкеПодбор = 5 Тогда  //изменение только отсканированные
		
		ТЗСобранныеДанныеПодбор = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
		ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры");
		
		МассивИдентификаторовНаУдаление = Новый Массив;
		
		Для каждого Стр Из ТЗСобранныеДанныеПодбор Цикл
			
			СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
			Стр.Номенклатура, Стр.ХарактеристикаНоменклатуры));
			
			Если СтрокиПоиска.Количество() <> 0 Тогда
				Для каждого Строка Из СтрокиПоиска Цикл
					Строка.КоличествоУпаковок = 0;
					Строка.Количество = 0;
					МассивИдентификаторовНаУдаление.Добавить(Строка.ИдентификаторСтроки);					
				КонецЦикла;	
			КонецЕсли;
			
		КонецЦикла;	
		
		Для каждого ИдентификаторУдаления Из МассивИдентификаторовНаУдаление Цикл
			СтруктураДляПоиска = Новый Структура("ИдентификаторСтроки", ИдентификаторУдаления); 
			
			Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
				ТабличнаяЧастьДок = ИсходныйДокумент.УАС_НомераУпаковок;
			Иначе	
				ТабличнаяЧастьДок = ИсходныйДокумент.НомераУпаковок;
			КонецЕсли;
			
			МассивПустыхСтрок = ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска); 
			Для каждого Строка Из МассивПустыхСтрок Цикл 
				ТабличнаяЧастьДок.Удалить(Строка); 
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзменениеТЧПодбор_Приемка(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор)
	
	ТЗСобранныеДанныеПодбор = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
	ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "Количество");
	
	Для каждого Стр Из ТЗСобранныеДанныеПодбор Цикл
		
		Если Стр.Количество = 0 Или Не ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;	
		
		СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
		Стр.Номенклатура, Стр.ХарактеристикаНоменклатуры));
		
		Если СтрокиПоиска.Количество() <> 0 Тогда
			
			СтрокиПоиска[0].КоличествоУпаковок = СтрокиПоиска[0].КоличествоУпаковок + Стр.Количество;
			СтрокиПоиска[0].Количество = СтрокиПоиска[0].Количество + Стр.Количество;
			СтрокаТабТовары = СтрокиПоиска[0];
			
		Иначе
			
			НовСтрТовары = ИсходныйДокумент[ИмяТЧПодбор].Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрТовары, Стр);
			НовСтрТовары.КоличествоУпаковок = Стр.Количество;
			НовСтрТовары.Характеристика = Стр.ХарактеристикаНоменклатуры;
			НовСтрТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			СтрокаТабТовары = НовСтрТовары;
			
		КонецЕсли;
		
		МетаданныеРеквизитыТЧ = ИсходныйДокумент.Метаданные().ТабличныеЧасти[ИмяТЧПодбор].Реквизиты;
		
		Если МетаданныеРеквизитыТЧ.Найти("Сумма") <> Неопределено
			И МетаданныеРеквизитыТЧ.Найти("СуммаНДС") <> Неопределено
			И МетаданныеРеквизитыТЧ.Найти("СуммаСНДС") <> Неопределено Тогда
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоЕдиниц"   , );
			ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоУпаковок" , Ложь);
			ПараметрыЗаполнения.Вставить("ОбработатьУпаковки"            );
			
			ДМ_ОбработкаТабличнойЧастиСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбработкаТабличнойЧастиСервер");
			Попытка ДМ_ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТабТовары, ПараметрыЗаполнения, Неопределено);Исключение КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьМаркиВДокументУведомлениеОПриемкеМДЛП(ИсходныйДокумент, ТЧМарок)
	
	ТЧДокТовары = ИсходныйДокумент.Товары;
	
	Для каждого СтрТЧ Из ТЧМарок Цикл
		
		Если СтрТЧ.Количество=0 Тогда
			Продолжить;
		КонецЕсли;	
		
		РезультатыПоиска = ТЧДокТовары.НайтиСтроки(
		Новый Структура("Номенклатура, Характеристика", 
		СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры));
		РезПоиска = ИсходныйДокумент.НомераУпаковок.НайтиСтроки(Новый Структура("НомерКИЗ", СтрТЧ.ЦРПТМарка));
		
		Если РезультатыПоиска.Количество() > 0 И СтрДлина(СтрТЧ.ЦРПТМарка) > 18 И РезПоиска.Количество() = 0 Тогда
			
			НоваяСтрокаТЧ = ИсходныйДокумент.НомераУпаковок.Добавить();
			НоваяСтрокаТЧ.НомерКИЗ = СтрТЧ.ЦРПТМарка;
			НоваяСтрокаТЧ.ИдентификаторСтроки =	РезультатыПоиска[0].ИдентификаторСтроки;
			Попытка НоваяСтрокаТЧ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче; Исключение КонецПопытки;
			
		КонецЕсли;
		
		Если СтрДлина(СтрТЧ.ЦРПТМарка) = 18 Тогда
			НоваяСтрокаТЧ = ИсходныйДокумент.ТранспортныеУпаковки.Добавить();
			НоваяСтрокаТЧ.НомерУпаковки = СтрТЧ.ЦРПТМарка;
			Попытка НоваяСтрокаТЧ.ИдентификаторСтроки =	Новый УникальныйИдентификатор; Исключение КонецПопытки;
			Попытка НоваяСтрокаТЧ.ИдентификаторГрупповойУпаковки = Новый УникальныйИдентификатор; Исключение КонецПопытки;
			Попытка НоваяСтрокаТЧ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче; Исключение КонецПопытки;			
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьСтрокиДереваУпаковок(СтрокиДерева, СтруктураСобранныхМарокИУпаковок, ВерхнийУровеньПринят = Ложь)
	
	Для каждого Строка Из СтрокиДерева Цикл
		
		Попытка
			Представление = ?(ЗначениеЗаполнено(Строка.НомерУпаковки), Строка.НомерУпаковки, Строка.Родитель.НомерУпаковки);
		Исключение
			Представление = "";
		КонецПопытки;
		
		УстановитьПараметр(Строка, "НомерУпаковки", "");
		УстановитьПараметр(Строка, "Представление", Представление);
		УстановитьПараметр(Строка, "СостояниеПодтверждения", Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить);
		УстановитьПараметр(Строка, "СтатусПроверки", Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.НеПроверялась);
		УстановитьПараметр(Строка, "ТипУпаковки", Перечисления.ТипыУпаковокМДЛП.ПустаяСсылка());
		
		ПринятьНижестоящиеУпаковки = Ложь;
		Если Строка.НомерУпаковки <> Неопределено Тогда
			Если СтруктураСобранныхМарокИУпаковок.Марки.Найти(Строка.НомерУпаковки) <> Неопределено 
				Или СтруктураСобранныхМарокИУпаковок.Короба.Найти(Строка.НомерУпаковки) <> Неопределено
				Или СтруктураСобранныхМарокИУпаковок.Палеты.Найти(Строка.НомерУпаковки) <> Неопределено
				Или ВерхнийУровеньПринят
				Тогда
				
				Строка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии;
				ПринятьНижестоящиеУпаковки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.Строки.Количество() <> 0 Тогда
			
			ОбработатьСтрокиДереваУпаковок(Строка.Строки, СтруктураСобранныхМарокИУпаковок, ПринятьНижестоящиеУпаковки);	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметр(Строка, ИмяПараметра, ЗначениеДляУстановки)
	
	Если Строка[ИмяПараметра] = Неопределено Тогда
		Строка[ИмяПараметра] = ЗначениеДляУстановки;
	ИначеЕсли ИмяПараметра = "Представление" И Строка[ИмяПараметра] = "" Тогда
		Строка[ИмяПараметра] = ЗначениеДляУстановки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеПроверкиИПодбора(ИсходныйДокумент, ДеревоУпаковок)
	
	ДанныеПроверкиИПодбора = Новый Структура("ДеревоМаркированнойПродукции, НомерПроверяемойУпаковки, СледующийСтикерОтложено", ДеревоУпаковок, "", 1);
	
	ИсходныйДокумент.ДанныеПроверкиИПодбора = Новый ХранилищеЗначения(ДанныеПроверкиИПодбора);
	ИсходныйДокумент.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораМДЛП.Выполняется;
	ИсходныйДокумент.Записать();
	
КонецПроцедуры

//ОПРИХОДОВАНИЕ
Функция ОбработатьВидДокументаУведомлениеОбОприходованииМДЛП(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент) Экспорт
		
	Шаблон = ДокументТСД.Шаблон;
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПодбор;
	
	ПеренестиВДокументНовыеЗначенияРеквизитов(ИсходныйДокумент, Шаблон);
	ЗаполнитьШапкуДокумента(ДокументТСД, ИсходныйДокумент, ЭтоНовыйДокумент);
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ДокументТСД);
	Если ТЧПриЗагрузкеПодбор <> 0 И ТЧПриЗагрузкеПодбор <> 4 Тогда
		ОбработатьИзменениеТЧПодбор_Приемка(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор);
	КонецЕсли;
	ВыполнитьДополнительнуюОбработкуДокумента(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	
	ТЧМарок = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
	ТЧМарок.Свернуть("ЦРПТМарка, Номенклатура, ХарактеристикаНоменклатуры","Количество");
	ОбработатьУпрСимволыВТЧМарки(ТЧМарок);
	ДобавитьМаркиВДокументУведомлениеОПриемкеМДЛП(ИсходныйДокумент, ТЧМарок);	
	
	ДобавитьКомментарий(ИсходныйДокумент, ДокументТСД, Шаблон);
	
	ИсходныйДокумент.Записать();
	
	ДокументТСД.ДатаЗавершения = ТекущаяДата();
	ДокументТСД.ИсходныйДокумент = ИсходныйДокумент.Ссылка;
	ДокументТСД.Записать();
	
	//УДАЛЕНИЕ РЕГИСТРАЦИИ ДАННОГО ДОКУМЕНТА НА ДАННОМ УЗЛЕ 
	ДатаМобайл_ОбщийМодуль.УдалитьРегистрациюОбъекта(ДокументТСД, Ложь);
	
	Возврат ИсходныйДокумент.Ссылка;                      
	
КонецФункции

//ОГРУЗКА И ВЫБЫТИЕ
Функция ОбработатьВидДокументаУведомлениеОбОтгрузкеМДЛП(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент) Экспорт
	
	Шаблон = ДокументТСД.Шаблон;
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПодбор;
	
	ПеренестиВДокументНовыеЗначенияРеквизитов(ИсходныйДокумент, Шаблон);
	ЗаполнитьШапкуДокумента(ДокументТСД, ИсходныйДокумент, ЭтоНовыйДокумент);
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ДокументТСД);
	
	Если ТЧПриЗагрузкеПодбор <> 4 Тогда
		ОбработатьИзменениеТЧПодбор_Отгрузка(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	КонецЕсли;
	
	ВыполнитьДополнительнуюОбработкуДокумента(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);		
	
	ДобавитьКомментарий(ИсходныйДокумент, ДокументТСД, Шаблон);
	
	ИсходныйДокумент.Записать();
	
	ДокументТСД.ДатаЗавершения = ТекущаяДата();
	ДокументТСД.ИсходныйДокумент = ИсходныйДокумент.Ссылка;
	ДокументТСД.Записать();
	
	//УДАЛЕНИЕ РЕГИСТРАЦИИ ДАННОГО ДОКУМЕНТА НА ДАННОМ УЗЛЕ 
	ДатаМобайл_ОбщийМодуль.УдалитьРегистрациюОбъекта(ДокументТСД, Ложь);
	
	Возврат ИсходныйДокумент.Ссылка;  
	
КонецФункции // ()

Процедура ОбработатьИзменениеТЧПодбор_Отгрузка(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор, ЭтоОтгрузка = Истина)
	
	ТЗСобранныеДанныеПодбор = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
	ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,УпаковочныйЛист,ЦРПТМарка", "Количество");
	ТЗСобранныеДанныеПодбор.Сортировать("Номенклатура, ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения");
	
	Для каждого Стр Из ТЗСобранныеДанныеПодбор Цикл
		
		Если Стр.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Не ЭтоОтгрузка И Не ЗначениеЗаполнено(Стр.УпаковочныйЛист) Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			
			Сч = 0;
			
			СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия", Стр.Номенклатура, Стр.ХарактеристикаНоменклатуры, Стр.СерияСсылка));
			Если СтрокиПоиска.Количество() = 0 Тогда
				СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Стр.Номенклатура, Стр.ХарактеристикаНоменклатуры));
			КонецЕсли;		
			Если СтрокиПоиска.Количество() = 0 Тогда
				СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура", Стр.Номенклатура));
			КонецЕсли;		
			
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
			СтруктураСтроки.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());	
			СтруктураСтроки.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
			СтруктураСтроки.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
			СтруктураСтроки.Вставить("GTIN", "");
			СтруктураСтроки.Вставить("Цена", 0);
			СтруктураСтроки.Вставить("СуммаНДС", 0);
			СтруктураСтроки.Вставить("СтатусУказанияСерий", 0);
			СтруктураСтроки.Вставить("ИдентификаторСтроки", "");
			СтруктураСтроки.Вставить("ЦРПТМарка", УбратьИзМаркиУпрСимволы(Стр.ЦРПТМарка));
			СтруктураСтроки.Вставить("УпаковочныйЛист", УбратьИзМаркиУпрСимволы(Стр.УпаковочныйЛист));
			СтруктураСтроки.Вставить("Количество", Стр.Количество);
			
			Если СтрокиПоиска.Количество() = 0 Тогда
				Если ТЧПриЗагрузкеПодбор = 0 Тогда
					Возврат;
				КонецЕсли;
				
				СтруктураСтроки.Номенклатура = Стр.Номенклатура;
				СтруктураСтроки.Характеристика = Стр.ХарактеристикаНоменклатуры;
				СтруктураСтроки.Серия = Стр.СерияСсылка;
				СтруктураСтроки.Упаковка = Стр.ЕдиницаИзмерения;
				
				Если ЗначениеЗаполнено(СтруктураСтроки.ЦРПТМарка) Тогда
					СтруктураСтроки.GTIN = Лев(СтруктураСтроки.ЦРПТМарка, 14);
				Иначе
					СтруктураСтроки.GTIN = ПолучитьGTINПоНоменклатуре(Стр.Номенклатура);
				КонецЕсли;
				
				СтруктураСтроки.Цена = 0;
				СтруктураСтроки.СтатусУказанияСерий = 0;
				СтруктураСтроки.ИдентификаторСтроки = Новый УникальныйИдентификатор; 
			Иначе
				
				Если СтрокиПоиска.Количество() > 1 Тогда				
					КоличествоСтрок = СтрокиПоиска.Количество();
					
					СтрокиПоискаПоИдентификатору = ПоискПоТабЧастиНомераУпаковокПоИдентификатору(ИсходныйДокумент, СтрокиПоиска[Сч].ИдентификаторСтроки);
					
					Попытка
						Пока ПоискПоТабЧастиНомераУпаковокПоИдентификатору(ИсходныйДокумент, СтрокиПоиска[Сч].ИдентификаторСтроки).Количество() = СтрокиПоиска[Сч].Количество Цикл						
							Если КоличествоСтрок = Сч Тогда
								Прервать;	
							КонецЕсли; 
							
							Сч = Сч + 1;						
						КонецЦикла;	
					Исключение //отсканировали больше чем требовалось, по этому привязываю в последнюю строку
						Сч = Сч - 1;
					КонецПопытки; 					
					
				КонецЕсли;
				
				СтруктураСтроки.Номенклатура = СтрокиПоиска[Сч].Номенклатура;
				СтруктураСтроки.Характеристика = СтрокиПоиска[Сч].Характеристика;
				СтруктураСтроки.Серия = СтрокиПоиска[Сч].Серия;
				СтруктураСтроки.Упаковка = СтрокиПоиска[Сч].Упаковка;
				Попытка СтруктураСтроки.GTIN = СтрокиПоиска[Сч].GTIN; Исключение КонецПопытки;
				Попытка СтруктураСтроки.Цена = СтрокиПоиска[Сч].Цена; Исключение КонецПопытки;
				Попытка СтруктураСтроки.СуммаНДС = СтрокиПоиска[Сч].СуммаНДС; Исключение КонецПопытки;
				Попытка СтруктураСтроки.СтатусУказанияСерий = СтрокиПоиска[Сч].СтатусУказанияСерий; Исключение КонецПопытки; 
				Попытка СтруктураСтроки.ИдентификаторСтроки = СтрокиПоиска[Сч].ИдентификаторСтроки; Исключение КонецПопытки; 
			КонецЕсли;			
			
			Если Не ЭтоОтгрузка И СтруктураСтроки.GTIN = "" Тогда
				Если ЗначениеЗаполнено(СтруктураСтроки.ЦРПТМарка) Тогда
					СтруктураСтроки.GTIN = Лев(СтруктураСтроки.ЦРПТМарка, 14);
				Иначе
					СтруктураСтроки.GTIN = ПолучитьGTINПоНоменклатуре(Стр.Номенклатура);
				КонецЕсли;
			КонецЕсли;	
			
			Если СтруктураСтроки.УпаковочныйЛист <> "" Тогда
				Если ТЧПриЗагрузкеПодбор = 0 Тогда //заглушка, упаковки не тестили
					Возврат;
				КонецЕсли;
				
				ЗагрузитьДанныеУпаковки(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор, СтруктураСтроки);
			Иначе
				ЗагрузитьДанныеМарки(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор, СтруктураСтроки, ТЧПриЗагрузкеПодбор);			
			КонецЕсли;
			
		Иначе
			
			Если ТЧПриЗагрузкеПодбор = 0 Тогда //заглушка, упаковки не тестили
				Возврат;
			КонецЕсли;
			
			Если Не ЭтоОтгрузка Тогда
				Продолжить;
			КонецЕсли;	
			
			//Попробуем загрузить упаковки
			ТекущаяУпаковка = "";
			Если ЗначениеЗаполнено(Стр.ЦРПТМарка) Тогда
				ТекущаяУпаковка = УбратьИзМаркиУпрСимволы(Стр.ЦРПТМарка);	
			ИначеЕсли ЗначениеЗаполнено(Стр.УпаковочныйЛист) Тогда
				ТекущаяУпаковка = УбратьИзМаркиУпрСимволы(Стр.УпаковочныйЛист);	
			КонецЕсли;
						
			Если ЗначениеЗаполнено(ТекущаяУпаковка) Тогда
				СтруктураСтроки = Новый Структура;
				СтруктураСтроки.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
				СтруктураСтроки.Вставить("УпаковочныйЛист", ТекущаяУпаковка);	
				
				ЗагрузитьДанныеУпаковки(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор, СтруктураСтроки);
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

Функция ПоискПоТабЧастиНомераУпаковокПоИдентификатору(ИсходныйДокумент, ИдентификаторСтроки)
	
	Возврат ИсходныйДокумент.НомераУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
	
КонецФункции

Процедура ЗагрузитьДанныеУпаковки(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор, СтруктураСтроки)
	
	//УПАКОВКИ
	СтрокиПоиска = ИсходныйДокумент.ТранспортныеУпаковки.НайтиСтроки(Новый Структура("НомерУпаковки", СтруктураСтроки.УпаковочныйЛист)); 
	
	Если СтрокиПоиска.Количество() = 0 Тогда
		СтрокаТЧ = ИсходныйДокумент.ТранспортныеУпаковки.Добавить();
		СтрокаТЧ.НомерУпаковки = СтруктураСтроки.УпаковочныйЛист;
		Попытка СтрокаТЧ.ИдентификаторСтроки = Новый УникальныйИдентификатор; Исключение КонецПопытки;
	Иначе
		СтрокаТЧ = СтрокиПоиска[0];						
	КонецЕсли;
	
	Попытка СтрокаТЧ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче; Исключение КонецПопытки;			
			
	Если ЗначениеЗаполнено(СтруктураСтроки.Номенклатура) Тогда
		
		//ТОВАРЫ УПАКОВОК
		СтрокиПоискаТоварыУпаковок = ИсходныйДокумент.СоставТранспортныхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки,Номенклатура,Характеристика,Серия", СтрокаТЧ.ИдентификаторСтроки, СтруктураСтроки.Номенклатура, СтруктураСтроки.Характеристика, СтруктураСтроки.Серия)); 
		
		Если СтрокиПоискаТоварыУпаковок.Количество() = 0 Тогда
			СтрокаТЧТоварыУпаковок = ИсходныйДокумент.СоставТранспортныхУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧТоварыУпаковок,СтруктураСтроки);
			Попытка СтрокаТЧТоварыУпаковок.ИдентификаторСтроки = СтрокаТЧ.ИдентификаторСтроки; Исключение КонецПопытки;
			Попытка СтрокаТЧТоварыУпаковок.Количество = ПолучитьКоличествоПоУпаковке(СтрокаТЧ.НомерУпаковки); Исключение КонецПопытки;
		Иначе
			СтрокаТЧТоварыУпаковок = СтрокиПоискаТоварыУпаковок[0];						
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьКоличествоПоУпаковке(НомерУпаковки)
	
	КоличествоВУпаковке = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(1) КАК Количество
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК УпаковкиМДЛП
	|ГДЕ
	|	УпаковкиМДЛП.НомерГрупповойУпаковки = &НомерГрупповойУпаковки";
	
	Запрос.УстановитьПараметр("НомерГрупповойУпаковки", НомерУпаковки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		КоличествоВУпаковке = Выборка.Количество;
	КонецЕсли;
	
	Возврат КоличествоВУпаковке;
	
КонецФункции	

Процедура ЗагрузитьДанныеМарки(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор, СтруктураСтроки, ТЧПриЗагрузкеПодбор)
	
	//ТОВАРЫ
	СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтруктураСтроки.ИдентификаторСтроки)); 
	
	Если СтрокиПоиска.Количество() = 0 Тогда
		Если ТЧПриЗагрузкеПодбор = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТЧ = ИсходныйДокумент[ИмяТЧПодбор].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСтроки);
	Иначе
		СтрокаТЧ = СтрокиПоиска[0];						
	КонецЕсли;
	
	Если ТЧПриЗагрузкеПодбор <> 0 Тогда
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтруктураСтроки.Количество;
		СтрокаТЧ.Количество = СтрокаТЧ.КоличествоУпаковок;
		
		Попытка СтрокаТЧ.Сумма =  СтрокаТЧ.Цена * СтрокаТЧ.КоличествоУпаковок; Исключение КонецПопытки;
	КонецЕсли;		
	
	//КИЗ
	СтрокиПоискаКИЗ = ИсходныйДокумент.НомераУпаковок.НайтиСтроки(Новый Структура("НомерКИЗ", СтруктураСтроки.ЦРПТМарка));
	
	Если СтрокиПоискаКИЗ.Количество() = 0 Тогда
		СтрокаТЧКИЗ = ИсходныйДокумент.НомераУпаковок.Добавить();
		СтрокаТЧКИЗ.НомерКИЗ = СтруктураСтроки.ЦРПТМарка;
		СтрокаТЧКИЗ.ИдентификаторСтроки = СтруктураСтроки.ИдентификаторСтроки;
	Иначе
		СтрокаТЧКИЗ = СтрокиПоискаКИЗ[0];						
	КонецЕсли;
	
	Попытка СтрокаТЧКИЗ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче; Исключение КонецПопытки;	
			
КонецПроцедуры

//РТУ
Функция ОбработатьВидДокументаРеализацияТоваровУслуг(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент) Экспорт
	
	Модуль_ОбщегоНазначения = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ОбщегоНазначения");
	
	Шаблон 				= Модуль_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументТСД.Ссылка, "Шаблон");
	РеквизитыШаблона 	= Модуль_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "ТабличнуюЧастьПриЗагрузкеПодбор, ИмяТабличнойЧастиПодбор");
	ТЧПриЗагрузкеПодбор = РеквизитыШаблона.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор 		= РеквизитыШаблона.ИмяТабличнойЧастиПодбор;
	КопияТЧ				= ИсходныйДокумент[ИмяТЧПодбор].Выгрузить();
	
	ПеренестиВДокументНовыеЗначенияРеквизитов(ИсходныйДокумент, Шаблон);
	ЗаполнитьШапкуДокумента(ДокументТСД, ИсходныйДокумент, ЭтоНовыйДокумент);
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ДокументТСД);
	
	Если ТЧПриЗагрузкеПодбор <> 0 И ТЧПриЗагрузкеПодбор <> 4 Тогда
		ОбработатьИзменениеТЧПодбор_Реализация(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор, КопияТЧ, Шаблон);
		ЗаполнитьУАСНомераУпаковокПоРеализации(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор);
	КонецЕсли;
	
	ВыполнитьДополнительнуюОбработкуДокумента(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);	
	
	ДобавитьКомментарий(ИсходныйДокумент, ДокументТСД, Шаблон);
	
	ИсходныйДокумент.СкидкиРассчитаны = Истина;
	
	Попытка
		ИсходныйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ИсходныйДокумент.Записать();
	КонецПопытки;
	
	ДокументТСД.ДатаЗавершения = ТекущаяДата();
	ДокументТСД.ИсходныйДокумент = ИсходныйДокумент.Ссылка;
	ДокументТСД.Записать(); 
	
	//УДАЛЕНИЕ РЕГИСТРАЦИИ ДАННОГО ДОКУМЕНТА НА ДАННОМ УЗЛЕ 
	ДатаМобайл_ОбщийМодуль.УдалитьРегистрациюОбъекта(ДокументТСД, Ложь);
	
	Возврат ИсходныйДокумент.Ссылка;  
	
КонецФункции // ()

Процедура ОбработатьИзменениеТЧПодбор_Реализация(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор, КопияТЧ, Шаблон)
	
	МетаданныеДокумента = ИсходныйДокумент.Метаданные();
	ИмяДока = МетаданныеДокумента.Имя;
	
	Модуь_ИнтеграцияИСКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ИнтеграцияИСКлиентСервер");
	Модуь_ИнтеграцияИСУТКлиентСервер = ДатаМобайл_ОбщийМодуль.ОбщийМодуль("ИнтеграцияИСУТКлиентСервер");
	
	Шаблон = ДокументТСД.Шаблон;
		
	ТЗСобранныеДанныеПодбор = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
	ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, KM_GTIN", "Количество");	 
	
	лЕстьGTIN = (МетаданныеДокумента.ТабличныеЧасти[ИмяТЧПодбор].Реквизиты.Найти("GTIN") <> Неопределено);
	Если ИмяДока = "МаркировкаТоваровИСМП" Тогда 
		Если Не ИсходныйДокумент.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков") Тогда
			лЕстьGTIN = Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Если Не лЕстьGTIN Тогда
		ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения", "Количество");		
	КонецЕсли; 
	
	Если Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 5 Тогда
		КопияТЧ = Неопределено;		
	КонецЕсли; 
	
	ЭтоВыводИзОборотаИСМП = ИмяДока = "ВыводИзОборотаИСМП";
	
	Если ЭтоВыводИзОборотаИСМП Тогда
		ФильтрВидПродукции = Модуь_ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
		ОсобенностьУчетаМассив   = Новый Массив;
		Для каждого ВидПродукции Из ФильтрВидПродукции Цикл
			ОсобенностьУчетаМассив.Добавить(Модуь_ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;	
	КонецЕсли; 
	
	СерииВОтдельнойТЧ = Шаблон.СерииВОтдельнойТЧ;
	лЕстьСерия = (Шаблон.ИспользованиеСерийниковПодбор > 0 И (МетаданныеДокумента.ТабличныеЧасти.Товары.Реквизиты.Найти("Серия") <> Неопределено)) И Не СерииВОтдельнойТЧ;
	
	Если лЕстьСерия Тогда
		ТЗСобранныеДанныеПодбор = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
		ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, KM_GTIN, СерияСсылка", "Количество");	
	КонецЕсли;
	
	Для каждого СтрТЧ Из ТЗСобранныеДанныеПодбор Цикл
		
		Если СтрТЧ.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОсобенностьУчета = СтрТЧ.Номенклатура.ОсобенностьУчета;
		
		Если ЭтоВыводИзОборотаИСМП И (ОсобенностьУчета.Пустая() Или ОсобенностьУчетаМассив.Найти(ОсобенностьУчета) = Неопределено) Тогда	
			Продолжить;	
		КонецЕсли;
		
		Если Шаблон.БазовыеЕдиницыПриЗагрузке Тогда					
			ТекущаяЕдиницаИзмерения = СтрТЧ.Номенклатура.ЕдиницаИзмерения;
		Иначе
			ТекущаяЕдиницаИзмерения = СтрТЧ.ЕдиницаИзмерения;
		КонецЕсли;	
		
		лЕстьУпаковка = (МетаданныеДокумента.ТабличныеЧасти[ИмяТЧПодбор].Реквизиты.Найти("Упаковка") <> Неопределено);
		лЕстьИдентификаторСтроки = (МетаданныеДокумента.ТабличныеЧасти[ИмяТЧПодбор].Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено);
		
		лСтруктураПоиска = Новый Структура("Номенклатура, Характеристика", СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры);
		Если лЕстьУпаковка И Не Шаблон.БазовыеЕдиницыПриЗагрузке Тогда
			Если ИмяДока = "ПересчетТоваров" Тогда
				Если ИсходныйДокумент.Склад.ИспользоватьАдресноеХранение Или ИсходныйДокумент.Помещение.ИспользоватьАдресноеХранение Тогда
					лСтруктураПоиска.Вставить("Упаковка", ТекущаяЕдиницаИзмерения);
				КонецЕсли;	
			Иначе
				лСтруктураПоиска.Вставить("Упаковка", ТекущаяЕдиницаИзмерения);
			КонецЕсли;	
		КонецЕсли;
		Если лЕстьGTIN Тогда
			лСтруктураПоиска.Вставить("GTIN", СтрТЧ.KM_GTIN);
		КонецЕсли;
		
		Если лЕстьСерия Тогда
			лСтруктураПоиска.Вставить("Серия", СтрТЧ.СерияСсылка);
		КонецЕсли;
		
		Если КопияТЧ <> Неопределено И (ИмяДока = "РеализацияТоваровУслуг" Или ЭтоВыводИзОборотаИСМП) Тогда
			СтрокиПоиска = КопияТЧ.НайтиСтроки(лСтруктураПоиска);
			
			Если СтрокиПоиска.Количество() = 0 И лЕстьУпаковка Тогда
				лСтруктураПоиска.Удалить("Упаковка");
				СтрокиПоиска = КопияТЧ.НайтиСтроки(лСтруктураПоиска);	
			КонецЕсли;
			
			Если СтрокиПоиска.Количество() = 0 И лЕстьСерия Тогда
				лСтруктураПоиска.Удалить("Серия");
				СтрокиПоиска = КопияТЧ.НайтиСтроки(лСтруктураПоиска);
			КонецЕсли;
			
		Иначе	
			СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);
		КонецЕсли;
		
		Попытка 
			КоэффициентУпаковки = СтрТЧ.ЕдиницаИзмерения.Числитель / СтрТЧ.ЕдиницаИзмерения.Знаменатель;
			КоэффициентУпаковки = ?(КоэффициентУпаковки = 0, 1, КоэффициентУпаковки);
		Исключение
			КоэффициентУпаковки = ?(СтрТЧ.ЕдиницаИзмерения.Числитель = 0, 1, СтрТЧ.ЕдиницаИзмерения.Числитель);
		Конецпопытки;
		
		Если СтрокиПоиска.Количество() <> 0 Тогда
			
			Если КопияТЧ <> Неопределено Тогда						
				Если СтрТЧ.Количество > 0 Тогда
					СтрокаТабличнойЧасти = ИсходныйДокумент[ИмяТЧПодбор].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокиПоиска[0]);
					
					СтрокаТабличнойЧасти.Количество = СтрТЧ.Количество;
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.Количество;
					
					Обработки.ДатаМобайл_АРМДиспетчера.ОбработатьСтрокуТЧ(ИсходныйДокумент, ИмяТЧПодбор, СтрокаТабличнойЧасти, Шаблон);
				КонецЕсли;	
				
				Если Шаблон.БазовыеЕдиницыПриЗагрузке Тогда					
					СтрокаТабличнойЧасти.Упаковка = ТекущаяЕдиницаИзмерения;
					
					Попытка
						СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;  
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок;
					Исключение
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество * КоэффициентУпаковки;
					КонецПопытки;
					
					Обработки.ДатаМобайл_АРМДиспетчера.ОбработатьСтрокуТЧ(ИсходныйДокумент, ИмяТЧПодбор, СтрокаТабличнойЧасти, Шаблон);
				КонецЕсли;
				
				//проверка на нулевое количество			
				СтруктураДляПоиска = Новый Структура("Количество", 0); 			
				ТабличнаяЧастьДок = ИсходныйДокумент[ИмяТЧПодбор]; 
				
				//Получаем список строк соответсвтвующих отбору, и перебором удаляем. 			
				МассивПустыхСтрок = ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска); 
				
				Для каждого Строка Из МассивПустыхСтрок Цикл				
					ТабличнаяЧастьДок.Удалить(Строка);		
				КонецЦикла;
				
				Продолжить;	
			Иначе
				СтрокаТабличнойЧасти = СтрокиПоиска[0];	
			КонецЕсли;			
			
		Иначе
			
			СтрокаТабличнойЧасти = ИсходныйДокумент[ИмяТЧПодбор].Добавить();
			
			СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
			СтрокаТабличнойЧасти.Характеристика = СтрТЧ.ХарактеристикаНоменклатуры;
			
			Если лЕстьУпаковка И Не Шаблон.БазовыеЕдиницыПриЗагрузке Тогда
				Если ИмяДока = "ПересчетТоваров" Тогда
					Если ИсходныйДокумент.Склад.ИспользоватьАдресноеХранение Или ИсходныйДокумент.Помещение.ИспользоватьАдресноеХранение Тогда
						СтрокаТабличнойЧасти.Упаковка = ТекущаяЕдиницаИзмерения;
					КонецЕсли;	
				Иначе
					СтрокаТабличнойЧасти.Упаковка = ТекущаяЕдиницаИзмерения;
				КонецЕсли;
			КонецЕсли;
			Если лЕстьGTIN Тогда
				СтрокаТабличнойЧасти.GTIN = СтрТЧ.KM_GTIN;
			КонецЕсли;
			
			Если лЕстьСерия Тогда
				СтрокаТабличнойЧасти.Серия = СтрТЧ.СерияСсылка;
			КонецЕсли;
			
			Если лЕстьИдентификаторСтроки Тогда
				СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор();
			КонецЕсли;		
			
			Обработки.ДатаМобайл_АРМДиспетчера.ОбработатьНовуюСтрокуТЧ(Новый Структура("Об", ДокументТСД),ИсходныйДокумент, ИмяТЧПодбор, СтрокаТабличнойЧасти); 
			
		КонецЕсли;
				
		Если Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 5 Тогда
			Если Не Шаблон.БазовыеЕдиницыПриЗагрузке Тогда
				Попытка
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрТЧ.Количество;  
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;
				Исключение
					СтрокаТабличнойЧасти.Количество = СтрТЧ.Количество;
				КонецПопытки;
			Иначе
				Попытка
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрТЧ.Количество * КоэффициентУпаковки;  
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок;
				Исключение
					СтрокаТабличнойЧасти.Количество = СтрТЧ.Количество * КоэффициентУпаковки;
				КонецПопытки;
			КонецЕсли;			
		Иначе			
			Если Не Шаблон.БазовыеЕдиницыПриЗагрузке Тогда
				Попытка
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество;  
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок * КоэффициентУпаковки;
				Исключение
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрТЧ.Количество;
				КонецПопытки;
			Иначе
				Попытка
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрТЧ.Количество * КоэффициентУпаковки;  
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок;
				Исключение
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрТЧ.Количество * КоэффициентУпаковки;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
				
		Обработки.ДатаМобайл_АРМДиспетчера.ОбработатьСтрокуТЧ(ИсходныйДокумент, ИмяТЧПодбор, СтрокаТабличнойЧасти, Шаблон);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьУАСНомераУпаковокПоРеализации(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор)
	
	ТЗСобранныеДанныеПодборКИЗ = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
	ТЗСобранныеДанныеПодборКИЗ.Свернуть("Номенклатура, ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,УпаковочныйЛист,ЦРПТМарка", "Количество");
	
	Для каждого СтрТЧ Из ТЗСобранныеДанныеПодборКИЗ Цикл
		Если СтрТЧ.Количество = 0 Или ЗначениеЗаполнено(СтрТЧ.УпаковочныйЛист) Тогда
			Продолжить;
		КонецЕсли;	
		
		СтрокиПоискаКИЗ = ИсходныйДокумент.УАС_НомераУпаковок.НайтиСтроки(Новый Структура("НомерКИЗ", СтрТЧ.ЦРПТМарка));
		
		Если СтрокиПоискаКИЗ.Количество() = 0 Тогда
			
			СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия", СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры, СтрТЧ.СерияСсылка));
			Если СтрокиПоиска.Количество() = 0 Тогда
				СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрТЧ.Номенклатура, СтрТЧ.ХарактеристикаНоменклатуры));
			КонецЕсли;		
			Если СтрокиПоиска.Количество() = 0 Тогда
				СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура", СтрТЧ.Номенклатура));
			КонецЕсли;
			
			Если СтрокиПоиска.Количество() > 0 Тогда
				СтрокаТЧКИЗ = ИсходныйДокумент.УАС_НомераУпаковок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЧКИЗ, СтрокиПоиска[0], "ИдентификаторСтроки"); 
				СтрокаТЧКИЗ.НомерКИЗ = УбратьИзМаркиУпрСимволы(СтрТЧ.ЦРПТМарка);	
			КонецЕсли; 
			
		Иначе
			СтрокаТЧКИЗ = СтрокиПоискаКИЗ[0];						
		КонецЕсли;
		
	КонецЦикла; 
	
	ТЗУпаковочныхЛистов = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
	ТЗУпаковочныхЛистов.Свернуть("Номенклатура, ХарактеристикаНоменклатуры,СерияСсылка,УпаковочныйЛист, УпаковочныйЛистСсылка","Количество");
	
	Для каждого СтрТЗ Из ТЗУпаковочныхЛистов Цикл
		
		Если СтрТЗ.Количество = 0 Или Не ЗначениеЗаполнено(СтрТЗ.УпаковочныйЛист) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия", СтрТЗ.Номенклатура, СтрТЗ.ХарактеристикаНоменклатуры, СтрТЗ.СерияСсылка));
		Если СтрокиПоиска.Количество() = 0 Тогда
			СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрТЗ.Номенклатура, СтрТЗ.ХарактеристикаНоменклатуры));
		КонецЕсли;		
		Если СтрокиПоиска.Количество() = 0 Тогда
			СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура", СтрТЗ.Номенклатура));
		КонецЕсли;
		
		Если СтрокиПоиска.Количество() > 0 Тогда			
			СтрокаТЧКИЗ = ИсходныйДокумент.УАС_НомераУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧКИЗ, СтрокиПоиска[0], "ИдентификаторСтроки"); 
			СтрокаТЧКИЗ.НомерКИЗ = УбратьИзМаркиУпрСимволы(СтрТЗ.УпаковочныйЛист);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//АГРЕГИРОВАНИЕ
Функция ОбработатьВидДокументаУведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент) Экспорт
	
	Шаблон = ДокументТСД.Шаблон;
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПодбор;
	
	ПеренестиВДокументНовыеЗначенияРеквизитов(ИсходныйДокумент, Шаблон);
	ЗаполнитьШапкуДокумента(ДокументТСД, ИсходныйДокумент, ЭтоНовыйДокумент);
	
	ИсходныйДокумент[ИмяТЧПодбор].Очистить();
	ИсходныйДокумент.НомераУпаковок.Очистить();
	ИсходныйДокумент.ТранспортныеУпаковки.Очистить();
	ИсходныйДокумент.ГруппировочныеУпаковки.Очистить();
	
	Если ИсходныйДокумент.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование Тогда
		ЗаполнитьТаблицуМарокУпаковокАгрегации(ИсходныйДокумент, ДокументТСД);
		
		ДобавитьКомментарий(ИсходныйДокумент, ДокументТСД, Шаблон);
		
		ИсходныйДокумент.Записать();
		
		ДокументТСД.ДатаЗавершения = ТекущаяДата();
		ДокументТСД.ИсходныйДокумент = ИсходныйДокумент.Ссылка;
		ДокументТСД.Записать();
		
		//УДАЛЕНИЕ РЕГИСТРАЦИИ ДАННОГО ДОКУМЕНТА НА ДАННОМ УЗЛЕ 
		ДатаМобайл_ОбщийМодуль.УдалитьРегистрациюОбъекта(ДокументТСД, Ложь);
		
		Возврат ИсходныйДокумент.Ссылка; 
		
	ИначеЕсли ИсходныйДокумент.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Расформирование Тогда
		МассивУпаковок = Новый Массив;
		ТЧМарок = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
		ТЧМарок.Свернуть("ЦРПТМарка","Количество");
		
		Для каждого строка Из ТЧМарок Цикл
			Если строка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			Упаковка = УбратьИзМаркиУпрСимволы(строка.ЦРПТМарка);
			Если СтрДлина(Упаковка) = 18 Тогда
				МассивУпаковок.Добавить(Упаковка);		
			КонецЕсли;	
		КонецЦикла;	
		
		ТЧУпаковок = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
		ТЧУпаковок.Свернуть("УпаковочныйЛист","Количество");
		
		Для каждого строка Из ТЧУпаковок Цикл
			Если строка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			Упаковка = УбратьИзМаркиУпрСимволы(строка.УпаковочныйЛист);
			Если СтрДлина(Упаковка) = 18 Тогда
				МассивУпаковок.Добавить(Упаковка);		
			КонецЕсли;	
		КонецЦикла;	
		
		ОтдельнаяТЧУпаковок = Ложь;
		
		Для каждого НовЗнач Из Шаблон.НовыеЗначенияРеквизитов Цикл
			Попытка
				Если НовЗнач.ИмяРеквизита = "Отдельная ТЧ упаковок" Тогда
					Если НовЗнач.ЗначениеРеквизита = Истина Тогда
						ОтдельнаяТЧУпаковок = Истина;	
					КонецЕсли;
				КонецЕсли;	
			Исключение
			КонецПопытки;
		КонецЦикла;		
		
		//Если в документе есть ТЧ упаковок, то запишем в нее
		Если ОтдельнаяТЧУпаковок Тогда 
			Для каждого УпаковкаРасформирования Из МассивУпаковок Цикл
				СтрокаТЧУпаковок = ИсходныйДокумент.ТранспортныеУпаковки.Добавить();
				СтрокаТЧУпаковок.НомерУпаковки = УпаковкаРасформирования;
			КонецЦикла;			
			
			//Если в документе нет ТЧ упаковок то для каждой упаковки создаем отдельный документ, в АРМ пока только один попадет, остальные просто создадим
		Иначе			
			Сч = 1; 
			
			Для каждого УпаковкаРасформирования Из МассивУпаковок Цикл
				Если Сч = 1 Тогда
					ИсходныйДокумент.НомерУпаковки = УпаковкаРасформирования;	
				Иначе
					СоздатьДокументРасформирования(ДокументТСД, УпаковкаРасформирования);
				КонецЕсли;
				
				Сч = Сч + 1;
			КонецЦикла;			
		КонецЕсли;
		
		ДобавитьКомментарий(ИсходныйДокумент, ДокументТСД, Шаблон);
		ИсходныйДокумент.Записать();
		
		ДокументТСД.ДатаЗавершения = ТекущаяДата();
		ДокументТСД.ИсходныйДокумент = ИсходныйДокумент.Ссылка;
		ДокументТСД.Записать();
		
		//УДАЛЕНИЕ РЕГИСТРАЦИИ ДАННОГО ДОКУМЕНТА НА ДАННОМ УЗЛЕ 
		ДатаМобайл_ОбщийМодуль.УдалитьРегистрациюОбъекта(ДокументТСД, Ложь);
		
		Возврат ИсходныйДокумент.Ссылка; 			
	КонецЕсли; 
	
КонецФункции // ()

Процедура ЗаполнитьТаблицуМарокУпаковокАгрегации(ИсходныйДокумент, ДокументТСД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЦРПТМарка КАК ЦРПТМарка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист КАК УпаковочныйЛист,
	|	СУММА(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество) КАК Количество
	|ПОМЕСТИТЬ ТабСобранныхТоваров
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЦРПТМарка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ИдентификаторСтроки,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабСобранныхТоваров.Номенклатура КАК Номенклатура,
	|	ТабСобранныхТоваров.Характеристика КАК Характеристика,
	|	ТабСобранныхТоваров.ЦРПТМарка КАК ЦРПТМарка,
	|	ТабСобранныхТоваров.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ТабСобранныхТоваров.Количество КАК Количество,
	|	ТабСобранныхТоваров.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	ТабСобранныхТоваров КАК ТабСобранныхТоваров
	|ГДЕ
	|	ТабСобранныхТоваров.Количество > 0
	|	И ТабСобранныхТоваров.УпаковочныйЛист <>""""
	|	И ТабСобранныхТоваров.ЦРПТМарка <>"""" 
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументТСД.Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаРезультата Из Результат Цикл
		
		ГруппировочнаяУпаковка = УбратьИзМаркиУпрСимволы(СтрокаРезультата.УпаковочныйЛист); 
		КИЗ = УбратьИзМаркиУпрСимволы(СтрокаРезультата.ЦРПТМарка);		
		
		РезультатПоискаГруппировочнаяУпаковка = ИсходныйДокумент.ГруппировочныеУпаковки.НайтиСтроки(Новый Структура("НомерУпаковки", ГруппировочнаяУпаковка));
		Если РезультатПоискаГруппировочнаяУпаковка.Количество() = 0 Тогда
			НовСтрокаГруппировочнаяУпаковка = ИсходныйДокумент.ГруппировочныеУпаковки.Добавить();
			НовСтрокаГруппировочнаяУпаковка.НомерУпаковки = ГруппировочнаяУпаковка;
			ТекущийИдентификаторГруппировочнаяУпаковка = Новый УникальныйИдентификатор;
			НовСтрокаГруппировочнаяУпаковка.ИдентификаторСтроки = ТекущийИдентификаторГруппировочнаяУпаковка;
		Иначе
			ТекущийИдентификаторГруппировочнаяУпаковка = РезультатПоискаГруппировочнаяУпаковка[0].ИдентификаторСтроки;		
		КонецЕсли;		
		
		РезультатПоискаТовары = ИсходныйДокумент.Товары.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ИдентификаторГрупповойУпаковки,GTIN", СтрокаРезультата.Номенклатура, СтрокаРезультата.Характеристика, ТекущийИдентификаторГруппировочнаяУпаковка, Сред(КИЗ, 1, 14)));	
		Если РезультатПоискаТовары.Количество() = 0 Тогда			
			НовСтрокаТовары = ИсходныйДокумент.Товары.Добавить();
			НовСтрокаТовары.Номенклатура = СтрокаРезультата.Номенклатура;
			НовСтрокаТовары.Характеристика = СтрокаРезультата.Характеристика;
			НовСтрокаТовары.GTIN = Сред(КИЗ, 1, 14);
			
			ТекущийИдентификаторТовары = Новый УникальныйИдентификатор;
			НовСтрокаТовары.ИдентификаторСтроки = ТекущийИдентификаторТовары;
			НовСтрокаТовары.ИдентификаторГрупповойУпаковки = ТекущийИдентификаторГруппировочнаяУпаковка;
		Иначе
			НовСтрокаТовары = РезультатПоискаТовары[0];
			ТекущийИдентификаторТовары = НовСтрокаТовары.ИдентификаторСтроки;	
		КонецЕсли;
		НовСтрокаТовары.Количество = НовСтрокаТовары.Количество + 1;
		НовСтрокаТовары.КоличествоУпаковок = НовСтрокаТовары.КоличествоУпаковок + 1;
						
		РезультатПоискаМарки = ИсходныйДокумент.НомераУпаковок.НайтиСтроки(Новый Структура("НомерКИЗ", КИЗ));		
		Если РезультатПоискаМарки.Количество() = 0 Тогда	
			НовСтрока = ИсходныйДокумент.НомераУпаковок.Добавить();
			НовСтрока.НомерКИЗ = УбратьИзМаркиУпрСимволы(СтрокаРезультата.ЦРПТМарка);
			НовСтрока.ИдентификаторСтроки = ТекущийИдентификаторТовары;	
		КонецЕсли;
				
	КонецЦикла;
	
	ИсходныйДокумент.Записать();	
	
КонецПроцедуры

Процедура СоздатьДокументРасформирования(ДокументТСД, УпаковкаРасформирования)
	
	Шаблон = ДокументТСД.Шаблон;
	
	ИсходныйДокумент = Документы[Шаблон.ВидДокумента].СоздатьДокумент();
	ЭтоНовыйДокумент = Истина;
	ИсходныйДокумент.Дата = ТекущаяДата();
	ИсходныйДокумент.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Расформирование;
	
	ПеренестиВДокументНовыеЗначенияРеквизитов(ИсходныйДокумент, Шаблон);
	ЗаполнитьШапкуДокумента(ДокументТСД, ИсходныйДокумент, ЭтоНовыйДокумент);		
	
	ИсходныйДокумент.НомерУпаковки = УпаковкаРасформирования;	
	ДобавитьКомментарий(ИсходныйДокумент, ДокументТСД, Шаблон);
	
	ИсходныйДокумент.Записать();	
	
КонецПроцедуры

//ОБШИЕ ФУНКЦИИ ДОКУМЕНТОВ
Процедура ВыполнитьДополнительнуюОбработкуДокумента(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор)
	
	Если ТЧПриЗагрузкеПодбор = 3 Тогда	
		СтруктураДляПоиска = Новый Структура("Количество", 0); 
		ТабличнаяЧастьДок = ИсходныйДокумент[ИмяТЧПодбор]; 
		МассивПустыхСтрок = ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска); 
		Для каждого Строка Из МассивПустыхСтрок Цикл 
			ТабличнаяЧастьДок.Удалить(Строка); 
		КонецЦикла; 	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПеренестиВДокументНовыеЗначенияРеквизитов(ИсходныйДокумент, Шаблон)
	
	Для каждого НовЗнач Из Шаблон.НовыеЗначенияРеквизитов Цикл
		Попытка
			ИсходныйДокумент[НовЗнач.ИмяРеквизита] = НовЗнач.ЗначениеРеквизита;
		Исключение
		КонецПопытки;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДобавитьКомментарий(Док, Об, Шаблон)
	
	Попытка
		КомментДока = Об.Комментарий;
		КомментДока = СокрЛП(СтрЗаменить(КомментДока, СокрЛП(Док.Комментарий), ""));
		
		КомментарийБезСимволаПереносаСтроки = СтрЗаменить(СокрЛП(Док.Комментарий), Символы.ПС, "-");
		ДлинаКомментария = СтрДлина(СокрЛП(КомментарийБезСимволаПереносаСтроки));
		
		КомментарииРавны = Ложь;
		
		Если КомментарийБезСимволаПереносаСтроки = КомментДока Тогда
			КомментарииРавны = Истина;	
		КонецЕсли; 
		
		СпередиВвели = Лев(КомментДока, ДлинаКомментария);
		СзадиВвели	 = Прав(КомментДока, ДлинаКомментария);
		КомментарийИзШаблона = "" + СокрЛП(Об.Шаблон.АвтоматическийКомментарий) + " (" + ТекущаяДата() + "). " + Символы.ПС;
		
		Если Не Об.Шаблон.АвтоматическийКомментарийИспользовать Тогда
			Док.Комментарий = Док.Комментарий + ?(КомментДока = "", "", " " + КомментДока);
		ИначеЕсли КомментарийБезСимволаПереносаСтроки = СпередиВвели Тогда
			КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СпередиВвели, ""));
			Док.Комментарий = "" + КомментарийИзШаблона + КомментарийОператора + Символы.ПС + Док.Комментарий;
		ИначеЕсли КомментарийБезСимволаПереносаСтроки = СзадиВвели Тогда
			КомментарийОператора = СокрЛП(СтрЗаменить(КомментДока, СзадиВвели, ""));
			Док.Комментарий = "" + КомментарийИзШаблона + КомментарийОператора + Символы.ПС + Док.Комментарий;	
		Иначе	
			Док.Комментарий = "" + КомментарийИзШаблона + ?(КомментарииРавны, "", КомментДока) + Символы.ПС + Док.Комментарий;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьШапкуДокумента(ДокументТСД, ИсходныйДокумент, ЭтоНовыйДокумент)
	
	Шаблон = ДокументТСД.Шаблон;
	
	Если ЭтоНовыйДокумент Тогда
		Если Шаблон.ВидДокумента = "УведомлениеОПриемкеМДЛП" Тогда
			Если Не ЗначениеЗаполнено(ИсходныйДокумент.СхемаАкцептования) Тогда
				ИсходныйДокумент.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок;
			КонецЕсли;	
		КонецЕсли;
		
		Если Шаблон.ВидДокумента = "УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП" Тогда
			Если Не ЗначениеЗаполнено(ИсходныйДокумент.Операция) Тогда
				ИсходныйДокумент.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование;
			КонецЕсли;
			
			Если ИсходныйДокумент.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование Тогда
				ИсходныйДокумент.ВложеныПотребительскиеУпаковки = Истина;
			КонецЕсли;			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НеИспользуется
Процедура ПолучитьСодержимоеУпаковки_old(ОбъектСписка, Barcode) Экспорт
		
	Если Лев(Barcode, 2) = "00" И (СтрДлина(Barcode) = 20 Или Найти(Barcode, "/") = 21) Тогда
		Barcode1 = "(00)" + Сред(Barcode, 3, 18);
		Barcode2 = Сред(Barcode, 3, 18);
	ИначеЕсли Лев(Barcode, 4) = "(00)" И (СтрДлина(Barcode) = 22 Или Найти(Barcode, "/") = 23) Тогда
		Barcode1 = "(00)" + Сред(Barcode, 5, 18);
		Barcode2 = Сред(Barcode, 5, 18);	
	КонецЕсли;
	
	Запрос = Новый Запрос; 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК Короб
	|ПОМЕСТИТЬ КоробаПалеты	
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|ГДЕ
	|	(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода = &ЗначениеШтрихкода1
	|		ИЛИ ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода = &ЗначениеШтрихкода2)
	|	И (ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
	|		ИЛИ ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка))
	|	И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипШтрихкода <> ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)
	|;
	|////////////////////////////////////////////////////////////
	|
	//КОРОБА ИЗ ПАЛЕТЫ
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.Номенклатура.Наименование КАК Наименование,
	|	1 КАК Количество,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ЗначениеШтрихкода КАК Марка
	|ИЗ
	|	КоробаПалеты КАК КоробаПалеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО КоробаПалеты.Короб = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|ГДЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|	И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)
	|	И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	//КОРОБА БЕЗ ПАЛЕТ
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.Номенклатура.Наименование КАК Наименование,
	|	1 КАК Количество,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ЗначениеШтрихкода КАК Марка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|ГДЕ
	|	(ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода = &ЗначениеШтрихкода1
	|		ИЛИ ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода = &ЗначениеШтрихкода2)
	|	И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|	И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)
	|	И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
			
	Запрос.УстановитьПараметр("ЗначениеШтрихкода1", Barcode1);
	Запрос.УстановитьПараметр("ЗначениеШтрихкода2", Barcode2);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArtQueryItemUPL")); 
		ОбъектТовара.DMArt = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMArt")); 
		ОбъектТовара.DMBarcode = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.data-mobile.ru","DMBarcode")); 
		
		Если ЗначениеЗаполнено(Выборка.Наименование) Тогда
			ОбъектТовара.DMArt.DMArtName = Выборка.Наименование;
		Иначе
			Продолжить;
		КонецЕсли;	
		
		ОбъектТовара.DMQty = Выборка.Количество;   
		
		ЧистаяМарка = ДобавитьВМаркуУпрСимволы(Выборка.Марка);	
		ОбъектТовара.DMPDFBarcode = ЧистаяМарка;		
		
		ОбъектСписка.DMArtQueryItemUPL.Добавить(ОбъектТовара);
		
	КонецЦикла;
	
КонецПроцедуры
Функция ОбработатьВидДокументаУведомлениеОбОтгрузкеМДЛП_old(ИсходныйДокумент, ДокументТСД, ЭтоНовыйДокумент) Экспорт
	
	Шаблон = ДокументТСД.Шаблон;
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПодбор;
	
	ПеренестиВДокументНовыеЗначенияРеквизитов(ИсходныйДокумент, Шаблон);
	ЗаполнитьШапкуДокумента(ДокументТСД, ИсходныйДокумент, ЭтоНовыйДокумент);
	
	ОбработатьНастройкуТЧПриЗагрузкеПодбор(ИсходныйДокумент, ДокументТСД);
	
	Если ТЧПриЗагрузкеПодбор <> 0 И ТЧПриЗагрузкеПодбор <> 4 Тогда
		ОбработатьИзменениеТЧПодбор_Отгрузка(ДокументТСД, ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	КонецЕсли;
	
	ВыполнитьДополнительнуюОбработкуДокумента(ИсходныйДокумент, ИмяТЧПодбор, ТЧПриЗагрузкеПодбор);
	
	ЗаполнитьТаблицуМарокИсходногоДокумента(ИсходныйДокумент, ДокументТСД);
		
	ДобавитьКомментарий(ИсходныйДокумент, ДокументТСД, Шаблон);
	
	ИсходныйДокумент.Записать();
	
	ДокументТСД.ДатаЗавершения = ТекущаяДата();
	ДокументТСД.ИсходныйДокумент = ИсходныйДокумент.Ссылка;
	ДокументТСД.Записать();
	
	//УДАЛЕНИЕ РЕГИСТРАЦИИ ДАННОГО ДОКУМЕНТА НА ДАННОМ УЗЛЕ 
	ДатаМобайл_ОбщийМодуль.УдалитьРегистрациюОбъекта(ДокументТСД, Ложь);
	
	Возврат ИсходныйДокумент.Ссылка;  
	
КонецФункции // ()
Процедура ОбработатьНастройкуТЧПриЗагрузкеПодбор_old(ИсходныйДокумент, ДокументТСД)
	
	Шаблон = ДокументТСД.Шаблон;
	ТЧПриЗагрузкеПодбор = Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор;
	ИмяТЧПодбор = Шаблон.ИмяТабличнойЧастиПодбор;
	
	Если ТЧПриЗагрузкеПодбор = 0 Тогда //не изменяем, только марки
		
		ИсходныйДокумент.НомераУпаковок.Очистить();
		ИсходныйДокумент.ТранспортныеУпаковки.Очистить();		
		
	ИначеЕсли ТЧПриЗагрузкеПодбор = 2 Тогда //замена
		
		ИсходныйДокумент.НомераУпаковок.Очистить();
		ИсходныйДокумент.ТранспортныеУпаковки.Очистить();
		ИсходныйДокумент[ИмяТЧПодбор].Очистить();
		
	ИначеЕсли ТЧПриЗагрузкеПодбор = 3 Тогда //изменение
		
		ИсходныйДокумент.НомераУпаковок.Очистить();
		ИсходныйДокумент.ТранспортныеУпаковки.Очистить();
		Для каждого Стр Из ИсходныйДокумент[ИмяТЧПодбор] Цикл
			
			Попытка Стр.Количество = 0; Исключение КонецПопытки;
			Попытка Стр.КоличествоУпаковок = 0; Исключение КонецПопытки;
			
		КонецЦикла;
		
	ИначеЕсли ТЧПриЗагрузкеПодбор = 5 Тогда  //изменение только отсканированные
		
		ТЗСобранныеДанныеПодбор = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
		ТЗСобранныеДанныеПодбор.Свернуть("Номенклатура, ХарактеристикаНоменклатуры");
		
		МассивИдентификаторовНаУдаление = Новый Массив;
		
		Для каждого Стр Из ТЗСобранныеДанныеПодбор Цикл
			
			СтрокиПоиска = ИсходныйДокумент[ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
			Стр.Номенклатура, Стр.ХарактеристикаНоменклатуры));
			
			Если СтрокиПоиска.Количество() <> 0 Тогда
				Для каждого Строка Из СтрокиПоиска Цикл
					Строка.КоличествоУпаковок = 0;
					Строка.Количество = 0;
					МассивИдентификаторовНаУдаление.Добавить(Строка.ИдентификаторСтроки);					
				КонецЦикла;	
			КонецЕсли;
			
		КонецЦикла;	
		
		Для каждого ИдентификаторУдаления Из МассивИдентификаторовНаУдаление Цикл
			СтруктураДляПоиска = Новый Структура("ИдентификаторСтроки", ИдентификаторУдаления); 
			
			ТабличнаяЧастьДок = ИсходныйДокумент.НомераУпаковок; 
			МассивПустыхСтрок = ТабличнаяЧастьДок.НайтиСтроки(СтруктураДляПоиска); 
			Для каждого Строка Из МассивПустыхСтрок Цикл 
				ТабличнаяЧастьДок.Удалить(Строка); 
			КонецЦикла;			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗаполнитьТаблицуМарокИсходногоДокумента(ИсходныйДокумент, ДокументТСД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура КАК Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЦРПТМарка КАК ЦРПТМарка,
	|	СУММА(ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество) КАК Количество
	|ПОМЕСТИТЬ ТабСобранныхТоваров
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЦРПТМарка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабСобранныхТоваров.Номенклатура КАК Номенклатура,
	|	ТабСобранныхТоваров.Характеристика КАК Характеристика,
	|	ТабСобранныхТоваров.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ТабСобранныхТоваров.ЦРПТМарка КАК ЦРПТМарка,
	|	ТабСобранныхТоваров.Количество КАК Количество,
	|	ТабСобранныхТоваров.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	ТабСобранныхТоваров КАК ТабСобранныхТоваров
	|ГДЕ
	|	ТабСобранныхТоваров.Количество > 0";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументТСД.Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаРезультата Из Результат Цикл
				
		РезультатПоиска = ИсходныйДокумент.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
		СтрокаРезультата.Номенклатура, СтрокаРезультата.Характеристика));
		
		Если РезультатПоиска.Количество() <> 0 Тогда
			
			НовСтрока = ИсходныйДокумент.НомераУпаковок.Добавить();
			НовСтрока.НомерКИЗ = УбратьИзМаркиУпрСимволы(СтрокаРезультата.ЦРПТМарка);
			НовСтрока.ИдентификаторСтроки = РезультатПоиска[0].ИдентификаторСтроки;
			Попытка НовСтрока.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче; Исключение КонецПопытки;	
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИсходныйДокумент.Записать();	
	
КонецПроцедуры

#КонецОбласти
