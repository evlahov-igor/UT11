
#Область ПрограммныйИнтерфейс

// Выполняет локализованный расчет себестоимости.
//
// Параметры:
//	ПериодРасчета - Дата - начало периода (месяца), до которого надо выполнить расчет
//	МассивОрганизаций - Массив - организации, по которым надо выполнить расчет.
//	ВыполняетсяЗакрытиеМесяца - Булево - признак выполнения регламентных операций по закрытию месяца 
//	АвтоматическоеТестирование - Булево - признак выполнения автоматического тестирования себестоимости
//
// Возвращаемое значение:
//	Булево - признак выполнения локализованного расчета себестоимости.
//
Функция РассчитатьВсе(Знач ПериодРасчета, МассивОрганизаций, ВыполняетсяЗакрытиеМесяца, АвтоматическоеТестирование) Экспорт
	ВыполненЛокализованныйРасчет = Ложь;
	//++ Локализация
	Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(ПериодРасчета) Тогда
		// Расчет будет выполнен в версии 2.1
		ПартионныйУчет.РассчитатьВсе(ПериодРасчета, МассивОрганизаций, ВыполняетсяЗакрытиеМесяца, АвтоматическоеТестирование);
		ВыполненЛокализованныйРасчет = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат ВыполненЛокализованныйРасчет;
КонецФункции

// Обновления стоимости товаров регламентным заданием.
//
// Параметры:
//	Период - Дата - дата начала расчета.
//	
// Возвращаемое значение:
//	Булево - признак выполнения локализованного расчета себестоимости.
//
Функция ПредварительныйРасчетСебестоимости(Период = Неопределено) Экспорт
	ВыполненЛокализованныйРасчет = Ложь;
	//++ Локализация
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РасчетСебестоимости); // проверка возможности запуска задания
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Дата = ТекущаяДатаСеанса();
	Иначе
		Дата = Период;
	КонецЕсли;
	НачалоПериода = НачалоМесяца(Дата);
	КонецПериода  = КонецМесяца(Дата);
	
	Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоПериода) Тогда
		Если РасчетСебестоимостиПовтИсп.ПартионныйУчетНеИспользуется(НачалоПериода) Тогда
			ПартионныйУчет.ТестРассчитать("РассчитатьПартииПроизводства", НачалоПериода, КонецПериода);
			ПартионныйУчет.ТестРассчитать("РассчитатьСебестоимостьПроизводства", НачалоПериода, КонецПериода);
		ИначеЕсли РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии21(НачалоПериода) Тогда
			ПартионныйУчет.ТестРассчитать("РассчитатьПартииТоваров", НачалоПериода, КонецПериода);
			ПартионныйУчет.ТестРассчитать("РассчитатьПартииПроизводства", НачалоПериода, КонецПериода);
			ПартионныйУчет.ТестРассчитать("РассчитатьСебестоимостьПроизводства", НачалоПериода, КонецПериода);
		КонецЕсли;
		
		ПараметрыЗапускаРасчетаСебестоимости = Новый Структура;
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("Дата", 					Дата);
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("ПредварительныйРасчет", 	Истина);
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("МассивОрганизаций", 		Неопределено);
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("РегламентноеЗадание", 	Истина);
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("МестоВызоваРасчета", 	"РасчетСебестоимостиКорректировкаСтоимости.ПредварительныйРасчетСебестоимости");
		
		СебестоимостьРассчитана = РасчетСебестоимостиПартионныйУчет21.РассчитатьВсеВПопыткеИсключении(ПараметрыЗапускаРасчетаСебестоимости);
		ВыполненЛокализованныйРасчет = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат ВыполненЛокализованныйРасчет;
КонецФункции

#Область ЭтапыРасчета

// Вызов процедур локализованного расчета себестоимости.
//
// Параметры:
//	ПараметрыРасчета - Структура - Параметры операций закрытия месяца.
//	
// Возвращаемое значение:
//	Булево - признак выполнения локализованного расчета себестоимости
//
Функция РассчитатьСебестоимость(ПараметрыРасчета) Экспорт
	ВыполненЛокализованныйРасчет = Ложь;
	//++ Локализация
	ФИФОСкользящаяОценкаВерсии21 = НЕ ПараметрыРасчета.ПредварительныйРасчет И НЕ ПараметрыРасчета.ПартионныйУчетВерсии22
	 	И ПараметрыРасчета.МетодОценки = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка;
	Если ФИФОСкользящаяОценкаВерсии21 Тогда
		РасчетСебестоимостиПартионныйУчет21.РасчетСебестоимости_ФИФОСкользящаяОценкаВерсии21(ПараметрыРасчета);
		ВыполненЛокализованныйРасчет = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат ВыполненЛокализованныйРасчет;
КонецФункции

// Вызов процедур распределения материальных затрат в локализованной версии.
//
// Параметры:
//	ПараметрыРасчета - Структура - Параметры операций закрытия месяца
//
Процедура РаспределениеМатериальныхЗатрат(ПараметрыРасчета) Экспорт
	Если ПараметрыРасчета.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие Тогда
		Возврат;
	КонецЕсли;
	//++ Локализация
	//-- Локализация
	Возврат;
КонецПроцедуры

// Вызов процедур распределения партий НДС в локализованной версии.
//
// Параметры:
//	ПараметрыРасчета - Структура - Параметры операций закрытия месяца
//	СтрокаСхемыРасчета - СтрокаТаблицыЗначений - Строка схемы расчета партий
//	НомерЭтапа - Число - Номер этапа распределения партий НДС
//
Процедура РаспределениеПартийНДС(ПараметрыРасчета, СтрокаСхемыРасчета, НомерЭтапа) Экспорт
	
	Если ПараметрыРасчета.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие Тогда
		
		//++ Локализация
		Если НЕ РасчетСебестоимостиПрикладныеАлгоритмы.ВременнаяТаблицаСуществует(ПараметрыРасчета, "ВТСписаниеПостатейныхЗатрат") Тогда
			
			Запрос = Новый Запрос;
			РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
			
			Запрос.Текст = РасчетСебестоимостиНДС.ТекстОписаниеДанныхДляРаспределениеПартийНДСФИФОСкользящая();
			Запрос.Текст = РасчетСебестоимостиПрикладныеАлгоритмы.ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "ВТСписаниеПостатейныхЗатрат");
			
			Запрос.Выполнить();
			
		КонецЕсли;
		//-- Локализация
		Возврат;
		
	КонецЕсли;
	
	Если НомерЭтапа = 1 Тогда
		
		//++ Локализация
		// Этап 11
		// Формирует движения по регистрам:
		// - ДетализацияПартийТоваровДляНДСиУСН
		РасчетСебестоимостиНДС.ПодготовкаДанныхДляУчетаНДСиУСН(ПараметрыРасчета);
		//-- Локализация
		
		// Этап 11.3
		// Формирует движения по регистрам:
		// - ДетализацияСебестоимостиПартииТоваров
		// - ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты
		// - ДетализацияСебестоимостиТоваровПостатейныеЗатраты
		РасчетСебестоимостиНДС.РаспределениеПартийНДСФИФОСкользящая(ПараметрыРасчета);
		
		// Формирует временные таблицы:
		// - ВТДопрасходыДляПостатейныхЗатрат
		// Формирует движения по регистрам:
		// - ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты
		РасчетСебестоимостиНДС.РаспределениеПартийНДСФИФОСкользящаяПоДопРасходам(ПараметрыРасчета);
		
	ИначеЕсли НомерЭтапа = 2 Тогда
		
		//++ Локализация
		// Формирует движения по регистрам:
		// - ДетализацияСебестоимостиТоваровПостатейныеЗатраты
		// - ДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП
		РасчетСебестоимостиНДС.РаспределениеПартийНДСФИФОСкользящаяПоПартиямПрочихРасходов(ПараметрыРасчета);
		//-- Локализация
		
		// Этап 12.1
		// Формирует движения по регистрам:
		// - ПартииПрочихРасходов
		// - ПрочиеРасходы
		РасчетСебестоимостиНДС.ПодготовкаДанныхДляПартийПрочихРасходов(ПараметрыРасчета);
		//++ Локализация
		РасчетСебестоимостиНДС.ПодготовкаДанныхДляПрочихРасходов(ПараметрыРасчета);
		
		// Этап 12.2
		// Формирует движения по регистрам:
		// - ПартииНДСКРаспределению
		РасчетСебестоимостиНДС.ПодготовкаДанныхДляПартийНДСКРаспределению(ПараметрыРасчета);
		
		// Этап 13
		// Формирует документы РаспределениеНДС с движениями по регистрам:
		// - ПартииПрочихРасходов
		// - ПрочиеАктивыПассивы
		// - ПрочиеРасходы
		РасчетСебестоимостиНДС.РаспределениеНДСПоВидамНалогообложения(ПараметрыРасчета);
		//-- Локализация
		
	КонецЕсли;

	Возврат;
КонецПроцедуры

#КонецОбласти

#Область Инициализация

// Инициализирует общие параметры расчета, описывающие обслуживаемые механизмом расчета регистры.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета себестоимости
//	
Процедура ИнициализироватьОбслуживаемыеРегистры(ПараметрыРасчета) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.ИнициализироватьОбслуживаемыеРегистры(ПараметрыРасчета);
	//-- Локализация
	
КонецПроцедуры

// Дополняет перечень документов, которые могут иметь движения в разных месяцах или по нескольким организациям.
//
// Параметры:
//	РазныеПериоды - Булево - добавлять в результат документы с движениями в разных периодах
//	РазныеОрганизации - Булево - добавлять в результат документы с движениями по нескольким организациям
//	ИмяРегистра - Строка - имя регистра накопления, для которого нужно получить перечень документов;
//		пустое значение - перечень документов для всех регистров.
//	ОписаниеДокументов - Соответствие - Ключ - ОбъектМетаданных.
//
Процедура ДополнитьДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(РазныеПериоды, РазныеОрганизации, ИмяРегистра, ОписаниеДокументов) Экспорт
	//++ Локализация
	Значение = Истина;
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя Тогда
		
		Если РазныеПериоды Тогда
		КонецЕсли; 
	КонецЕсли;
	
	РасчетСебестоимостиНДС.ДополнитьДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(РазныеПериоды, РазныеОрганизации, ИмяРегистра, ОписаниеДокументов);
	//-- Локализация
	
КонецПроцедуры

// Формирует общие временные таблицы для отбора данных в запросах.
//
Процедура ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета) Экспорт
	//++ Локализация
	РасчетСебестоимостиНДС.ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#Область ПроцедурыЭтапа_ЗаполнениеПартийВРегистреСебестоимостьТоваров

Функция ТекстЗапросаДляПартийТоваров() Экспорт
	
	ТекстЗапроса = ""
		//++ Локализация
		+ РасчетСебестоимостиПартионныйУчет21.ТекстЗапросаДляПартийТоваров()
		//-- Локализация
		+ "";
	Возврат ТекстЗапроса;	
	
КонецФункции

#КонецОбласти

#Область ПроцедурыЭтапа10_РаспределениеДопРасходовМеждуПартиямиИТоварами

Функция ТекстТаможенныеДекларацииИПоступления() Экспорт // вт Декларации, КоличествоДеклараций
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НЕОПРЕДЕЛЕНО КАК Ссылка,
		|	НЕОПРЕДЕЛЕНО КАК Поступление
		|ПОМЕСТИТЬ
		|	Декларации
		|;
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Поступление,
		|	1 КАК Количество
		|ПОМЕСТИТЬ
		|	КоличествоДеклараций
		|";
	//++ Локализация
	ТекстЗапроса = РасчетСебестоимостиПартионныйУчет21.ТекстТаможенныеДекларацииИПоступления();
	//-- Локализация
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти


#Область ПроцедурыЭтапов_Контекстные

// Используется для всех вызовов заполнения расчетной партии.
//
Процедура ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход, ПартияЗаполнена) Экспорт
	
	Если ПартияЗаполнена Тогда
		Возврат;
	КонецЕсли;
	
	//++ Локализация
	//++ Устарело_Производство21
	//-- Устарело_Производство21
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ВключитьИсключитьНДСВСтоимость

Процедура ВключитьИсключитьНДСВСтоимость(ПараметрыРасчета) Экспорт
	
	//++ Локализация
	
	// Формирует движения по регистрам:
	// - СебестоимостьТоваров
	// - ПрочиеРасходы
	РасчетСебестоимостиНДС.ВключитьИсключитьНДСВСтоимость(ПараметрыРасчета);
	РасчетСебестоимостиНДС.ВключитьИсключитьНДСВСтоимость24(ПараметрыРасчета);
	
	Если ПараметрыРасчета.ПартионныйУчетВерсии22
	 И РасчетСебестоимостиПрикладныеАлгоритмы.ВременнаяТаблицаСуществует(ПараметрыРасчета, "ВТДопрасходыДляПостатейныхЗатрат") Тогда
		РасчетСебестоимостиНДС.ПодготовкаДанныхДляВключенияИсключенияНДСДопРасходовВСтоимость24(ПараметрыРасчета);
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

Процедура ВключитьИсключитьНДСВСтоимостьПродаж(ПараметрыРасчета) Экспорт
	
	//++ Локализация
	
	// Формирует движения по регистрам:
	// - ВыручкаИСебестоимостьПродаж
	// - ПрочиеРасходы
	// - ДвиженияНоменклатураДоходыРасходы
	РасчетСебестоимостиНДС.ВключитьИсключитьНДСВСтоимостьПродаж(ПараметрыРасчета);
	РасчетСебестоимостиНДС.ВключитьИсключитьНДСВСтоимостьПродаж24(ПараметрыРасчета);
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти


#Область ВосстановленияДвижений

Функция ВосстановитьДвиженияДокументовПоРегиструНакопления(Регистратор) Экспорт
	ВыполненоВосстановлениеДвижений = Ложь;
	//++ Локализация
	
	ЭтоРегламентнаяОперация = Ложь;
	
	Если ЭтоРегламентнаяОперация
	 ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.РаспределениеНДС") Тогда
		
		// Для этих документов частичное проведение по регистрам не поддерживается.
		ДокументОперации = Регистратор.ПолучитьОбъект();
		
		ДокументОперации.ДополнительныеСвойства.Вставить(РасчетСебестоимостиПрикладныеАлгоритмы.ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
		
		ДокументОперации.Записать(РежимЗаписиДокумента.Проведение);
		ВыполненоВосстановлениеДвижений = Истина;
		
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаРегистров")
		ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.РасчетСебестоимостиТоваров") Тогда
		// Для этих документов проведение не предусматривается.
		ВыполненоВосстановлениеДвижений = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат ВыполненоВосстановлениеДвижений;
КонецФункции


#КонецОбласти

#Область УниверсальныеПроцедурыОписанияДанныхМеханизма

// Возвращает перечень объектов метаданных, на основании данных которых выполняется расчет партий.
// В перечень не включаются объекты, которые являются одновременно и исходящими данными механизмов расчета партий и себестоимости.
//
// Параметры:
//	ВходящиеДанные - Соответствие - уже инициализированное хранилище для описания входящих данных
//	ТолькоТребующиеПерерасчета - Булево - если установлен, то будет возвращен перечень только тех данных,
//		изменение которых влечет за собой необходимость перерасчета партий и себестоимости
//		При изменении этих данных должна создаваться запись в регистре сведений ЗаданияКРасчетуСебестоимости.
//
Процедура ВходящиеДанныеМеханизма(ВходящиеДанные, ТолькоТребующиеПерерасчета) Экспорт
	
	//++ Локализация
	Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
		Если ТолькоТребующиеПерерасчета Тогда
			Значение = Истина; // чтобы можно было проверить вхождение объекта метаданных в это соответствие
		Иначе
			Значение = Неопределено;
		КонецЕсли;
		
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН, Значение);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4, Значение);
		
		
		//++ НЕ ПУ21
		РасчетСебестоимостиПартионныйУчет21.ВходящиеДанныеМеханизма(ВходящиеДанные, ТолькоТребующиеПерерасчета);
		// Добавим регистры партионного учета версии 2.1 (используются для формирования начальных остатков для версии 2.2).
		РасчетСебестоимостиПартионныйУчет21.НеиспользуемыеДанныеМеханизмаВерсии21(ВходящиеДанные, Значение);
		//-- НЕ ПУ21
	Иначе
		ПартионныйУчет.ВходящиеДанныеМеханизма(ВходящиеДанные, Истина);
	КонецЕсли;
	
	Если НЕ ТолькоТребующиеПерерасчета Тогда 
		ВходящиеДанные.Вставить(Метаданные.Справочники.КатегорииЭксплуатации, Значение);
		ВходящиеДанные.Вставить(Метаданные.Справочники.ПартииТМЦВЭксплуатации, Значение);
	КонецЕсли;
	//-- Локализация

КонецПроцедуры

// Возвращает перечень регистров, обслуживаемых механизмом расчета партий.
//
// Параметры:
//	ИсходящиеДанные - Соответствие - имена регистров, обслуживаемых механизмом расчета партий.
//
Процедура ИсходящиеДанныеМеханизма(ИсходящиеДанные) Экспорт
	
	Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
		//++ Локализация
		ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН, 		Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4,	Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.НДСПредъявленный, 						Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииНДСКРаспределению, 				Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваров,        	Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП, Истина);
		//-- Локализация
		ИсходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатраты, Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваров,        			  Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты, Истина);
		//++ Локализация
		//-- Локализация
	Иначе
		//++ Локализация
		ПартионныйУчет.ИсходящиеДанныеМеханизма(ИсходящиеДанные);
		//-- Локализация
	КонецЕсли;
	
КонецПроцедуры

// Возвращает перечень регистров, рассчитываемых механизмом партионного учета версии 2.2, и используемых при расчете себестоимости.
//
Процедура ИспользуемыеКэшиРегистровПартионногоУчета(ВходящиеДанные) Экспорт
	
	// Здесь перечислены регистры, которые (по И)
	// - рассчитываются механизмом партионного учета версии 2.2
	// - не рассчитываются механизмом расчета себестоимости
	// - являются входящими данными для механизма расчета себестоимости (используются кэши данных регистров)
	//
	// В случае, если выполняется отдельный запуск расчета себестоимости (не из партионного учета версии 2.2),
	// эти регистры не будут инициализированы - к их кэшам обращаться нельзя.
	//
	// Для этого делается следующее:
	// - перед началом расчета себестоимости "принудительно" инициализируются эти регистры (для того, чтобы сформировались их расчетные кэши)
	// - перед записью движений эти регистры удаляются из параметров расчета (записывать их не надо - движения по ним не формировались)
	
	//++ Локализация
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН, 	  Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4,  Истина);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсКорректировки

// Дополняет перечень регистров накопления, для которых предусмотрены корректировки.
//
// Параметры:
//	РегистрыСКорректировками - Массив - массив имен метаданных регистров с корректировками
//
Процедура ДополнитьРегистрыСКорректировкамиНачальныхОстатков(РегистрыСКорректировками) Экспорт
	//++ Локализация
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.ПолноеИмя());
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4.ПолноеИмя());
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыНакопления.НДСПредъявленный.ПолноеИмя());
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваров.ПолноеИмя());
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП.ПолноеИмя());
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов.ПолноеИмя());
	//-- Локализация
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатраты.ПолноеИмя());
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваров.ПолноеИмя());
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты.ПолноеИмя());
КонецПроцедуры

// Дополняет описание корректировок регистров накопления.
//
// Параметры:
//	ТаблицаВидовКорректировок - ТаблицаЗначений - таблица с описанием корректировок регистров
//
Процедура ДополнитьОписаниеКорректировокНачальныхОстатков(ТаблицаВидовКорректировок) Экспорт
	//++ Локализация
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеВключитьУправленческийУчетПоПравиламМФУ;
	НоваяСтрока.ИмяКонстантыВключения = Метаданные.Константы.ВестиУправленческийУчетОрганизаций.Имя;
	НоваяСтрока.ИмяКонстантыДатыНачалаДействия = Метаданные.Константы.ДатаНачалаВеденияУправленческогоУчетаОрганизаций.Имя;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеПереходНаРегистрДетализацияСебестоимостиТоваров;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеВключитьУчетПоВидамЗапасов;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеИзменениеПартнераВАналитикеУчетаНоменклатуры;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеДозаполнениеАналитикиУчетаПартийНДСиУСН2_4;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеОтключитьУправленческийУчетПоПравиламМФУ;
	НоваяСтрока.РодительскаяКорректировка = Перечисления.ТипыЗаписейПартий.СлужебноеВключитьУправленческийУчетПоПравиламМФУ;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеПереходНаПартионныйУчет22;
	НоваяСтрока.ИмяКонстантыВключения = Метаданные.Константы.ПартионныйУчетВерсии22.Имя;
	НоваяСтрока.ИмяКонстантыДатыНачалаДействия = Метаданные.Константы.ДатаПереходаНаПартионныйУчетВерсии22.Имя;

	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеКорректировкаОстатковПартийПрочихРасходов;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область УчетСебестоимости

// Дополняет перечень регистров, которые не используются при отключенном учете себестоимости.
//
// Параметры:
//	ПереченьРегистров - Соответствие - перечень регистров, которые не используются при отключенном учете себестоимости.
//
Процедура ДополнитьРегистрыНеИспользуемыеПриВыключенномУчетеСебестоимости(ПереченьРегистров) Экспорт
	//++ Локализация
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПартииЗатратНаВыпуск, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию, Истина);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область Тестирование

Процедура ДополнитьЭтапыСРаспределениемПартий(СписокЭтапов) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.ДополнитьЭтапыСРаспределениемПартий(СписокЭтапов);
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьЭтапыСТрансляциейПартий(СписокЭтапов) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.ДополнитьЭтапыСТрансляциейПартий(СписокЭтапов);
	//-- Локализация
	
КонецПроцедуры

Процедура ТекстЗапросаДляРасчетаЭтапа(ИмяЭтапа, ПараметрыРасчета, ТекстЗапроса) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.ТекстЗапросаДляРасчетаЭтапа(ИмяЭтапа, ПараметрыРасчета, ТекстЗапроса);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьДвижений

// Вызывается перед началом записи сформированных движений.
//
Процедура ПередЗаписьюСформированныхДвижений(ПараметрыРасчета, ПротоколыРасчета) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.ПодготовитьДанныеДляФормированияЗаданийДляМеханизмовУчетаНДСПартионныйУчет22(ПараметрыРасчета);
	//-- Локализация
	
КонецПроцедуры

// Записывает сформированные новые движения.
//
Процедура ЗаписатьСформированныеДвижения(ПараметрыРасчета, ПротоколыРасчета) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.СформироватьЗаданияДляМеханизмовУчетаНДСПартионныйУчет22(ПараметрыРасчета);
	
	//-- Локализация
	
КонецПроцедуры

//++ Локализация
//-- Локализация


#КонецОбласти

#Область КэшированиеДанныхРегистров

// Добавляет имена регистров в массив.
//
// Параметры:
//	Регистры - Структура - имена регистров с записями конвертации данных
//
Процедура ДополнитьРегистрыСЗаписямиКонвертацииДанных(Регистры) Экспорт
	
	//++ Локализация
	Регистры.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.Имя);
	Регистры.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4.Имя);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ЗаданияКРасчетуСебестоимости

// Добавляет описания регистров для их подключения к механизму дат запрета изменения.
//
Процедура ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиПартионныйУчет21.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область СуммыДокументовВВалютахУчета

// Возвращает структуру регистров учета партий, для которых нужно обновить движения по данным взаиморасчетов.
//
// Возвращаемое значение:
//	Структура - имена регистров учета партий
//
Функция РегистрыУчетаПартий() Экспорт
	
	РегистрыПартий = Новый Структура();
	//++ Локализация
	РегистрыПартий.Вставить("ПартииТоваровОрганизаций", РегистрыНакопления.ПартииТоваровОрганизаций.СоздатьНаборЗаписей());
	РегистрыПартий.Вставить("ПартииПроизводственныхЗатрат", РегистрыНакопления.ПартииПроизводственныхЗатрат.СоздатьНаборЗаписей());
	//-- Локализация
	Возврат РегистрыПартий;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиЭтаповЗакрытияМесяца

Процедура Использование_РасчетПартийИСебестоимости(ПараметрыОбработчика) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.Использование_РасчетПартийИСебестоимости(ПараметрыОбработчика);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область РежимыПартионногоУчета

// Определяет, используется ли партионный учет версии 2.2 на указанную дату.
//
// Параметры:
//	Дата - Дата - дата, для которой надо определить режим партионного учета.
//
// Возвращаемое значение:
//	Булево - признак использования партионного учета версии 2.2 на указанную дату
//	Если дата не указана, то определяется сам факт использования партионного учета версии 2.2.
//
Функция ПартионныйУчетВерсии22(Дата) Экспорт
	
	ВключенПартионныйУчетВерсии22 = Истина;
	//++ Локализация
	Если НЕ ПолучитьФункциональнуюОпцию("ПартионныйУчетВерсии22") Тогда
		Возврат Ложь; // партионный учет 2.2 выключен
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет") Тогда
		ВызватьИсключение НСтр("ru = 'Некорректно установлены функциональные опции партионного учета'", ОбщегоНазначения.КодОсновногоЯзыка()); // такого быть не должно - обе опции включаются синхронно
	КонецЕсли;
	
	ВключенПартионныйУчетВерсии22 =
		(Дата = Неопределено ИЛИ Дата >= ДатаПереходаНаПартионныйУчетВерсии22());
	
	//-- Локализация
	Возврат ВключенПартионныйУчетВерсии22;
	
КонецФункции

// Определяет "старый" режим партионного учета, до перехода на партионный учет версии 2.2.
//
// Параметры:
//	Дата - Дата - дата, для которой надо определить режим партионного учета.
//
// Возвращаемое значение:
//	Булево, Неопределено - признак использования партионного учета на указанную дату
// 		Если параметр Дата не передан, или Дата находится в периоде действия партионного учета версии 2.2,
//		то возвращается значение Неопределено - в такой проверке нет смысла.
//
Функция ИспользовалсяПартионныйУчетДоПереходаНаВерсию22(Дата) Экспорт
	
	БылВключенПартионныйУчет = Ложь;
	//++ Локализация
	Если НЕ ПолучитьФункциональнуюОпцию("ПартионныйУчетВерсии22") Тогда
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет"); // перехода на версию 2.2 не было - проверяем стандартно
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет") Тогда
		ВызватьИсключение НСтр("ru = 'Некорректно установлены функциональные опции партионного учета'", ОбщегоНазначения.КодОсновногоЯзыка()); // такого быть не должно - обе опции включаются синхронно
	ИначеЕсли Дата = Неопределено ИЛИ Дата >= РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22() Тогда
		Возврат Неопределено; // нет смысла проверять режим "старого" партионного учета, т.к. используется партионный учет версии 2.2
	КонецЕсли;
	
	// До даты перехода на версию 2.2 партионный учет версии 2.1 мог быть как включен, так и выключен.
	// Информация об этом не сохранилась, т.к. константа ИспользоватьПартионныйУчет при переходе установилась в значение Истина.
	// Наиболее достоверный способ узнать "старый" режим партионного учета - определить его по данным ИБ.
	// Например, если партионный учет не использовался, то не должно быть движений по регистру партий товаров.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК БылВключенПартионныйУчет
	|ИЗ
	|	РегистрНакопления.ПартииТоваровОрганизаций КАК Т";
	
	БылВключенПартионныйУчет = НЕ Запрос.Выполнить().Пустой();
	//-- Локализация
	Возврат БылВключенПартионныйУчет;
	
КонецФункции

// Возвращает дату перехода на партионный учет версии 2.2.
// Дата может быть пустой - значит партионный учет версии 2.2 включен для всех периодов.
//
// Возвращаемое значение:
//	Дата - начало месяца перехода на партионный учет версии 2.2.
//
Функция ДатаПереходаНаПартионныйУчетВерсии22() Экспорт
	
	ДатаПереходаНаПартионныйУчетВерсии22 = Дата(1,1,1);
	//++ Локализация
	ДатаПереходаНаПартионныйУчетВерсии22 = НачалоМесяца(Константы.ДатаПереходаНаПартионныйУчетВерсии22.Получить());
	//-- Локализация
	Возврат ДатаПереходаНаПартионныйУчетВерсии22;
	
КонецФункции

#КонецОбласти

#Область УправленческийУчетОрганизаций

// Определяет, включен ли управленческий учет организаций на указанную дату.
//
// Параметры:
//	Дата - Дата - дата, для которой надо определить ведение управленческого учета организаций.
//
// Возвращаемое значение:
//	Булево - признак использования управленческого учета организаций на указанную дату
//	Если дата не указана, то определяется сам факт включения партионного учета организаций.
//
Функция УправленческийУчетОрганизаций(Дата) Экспорт
	
	ВключенУправленческийУчетОрганизаций = Истина;
	//++ Локализация
	ВключенУправленческийУчетОрганизаций = ПолучитьФункциональнуюОпцию("ВестиУправленческийУчетОрганизаций")
		И ПартионныйУчетВерсии22(Дата)
		И (Дата = Неопределено
			ИЛИ Дата >= ДатаНачалаВеденияУправленческогоУчетаОрганизаций());
	//-- Локализация
	Возврат ВключенУправленческийУчетОрганизаций;
	
КонецФункции

// Возвращает дату начала ведения управленческого учета организаций.
// Дата может быть пустой - значит управленческий учет организаций включен для всех периодов.
//
// Возвращаемое значение:
//	Дата - начало месяца ведения управленческого учета организаций
//
Функция ДатаНачалаВеденияУправленческогоУчетаОрганизаций() Экспорт
	
	ДатаНачалаВеденияУправленческогоУчетаОрганизаций = Дата(1,1,1);
	//++ Локализация
	ДатаНачалаВеденияУправленческогоУчетаОрганизаций = НачалоМесяца(Константы.ДатаНачалаВеденияУправленческогоУчетаОрганизаций.Получить());
	//-- Локализация
	Возврат ДатаНачалаВеденияУправленческогоУчетаОрганизаций;
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Дополняет текст запроса отчета "Ведомость по партиям товаров" данными для партионного учета 2.1.
//
// Параметры:
//	ТекстЗапроса - Строка - Исходный текст запроса
//
Процедура ВедомостьПоПартиямТоваров_ДополнитьТекстЗапроса(ТекстЗапроса) Экспорт
	//++ Локализация
	РасчетСебестоимостиПартионныйУчет21.ВедомостьПоПартиямТоваров_ДополнитьТекстЗапроса(ТекстЗапроса);
	//-- Локализация
КонецПроцедуры


#КонецОбласти

#Область ПроверкаДанных

// Дополняет список проверок, которые необходимо выполнить после выполнения расчета.
//
// Параметры:
//	ВыполняемыеПроверки - Структура - идентификаторы проверок
//
Процедура ДополнитьСписокПроверокПослеРасчета(ВыполняемыеПроверки) Экспорт
	//++ Локализация
	ВыполняемыеПроверки.Вставить("СоответствиеРегистровСебестоимостиИПартийНДС");
	//-- Локализация
КонецПроцедуры

#КонецОбласти

// Дополняет имена функциональных опций в строку.
//
// Параметры:
//	ИменаФО - Строка - строка с перечислением имен функциональных опций
//
Процедура ДополнитьИменаФункциональныхОпций(ИменаФО) Экспорт
	//++ Локализация
	ИменаФО = ИменаФО + ",
	|ИспользоватьПартионныйУчет,
	|ПартионныйУчетВерсии22,
	|ДатаПереходаНаПартионныйУчетВерсии22";
	//-- Локализация
КонецПроцедуры

// Дополняет параметры расчета партий и себестоимости.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры, используемые при расчете партий и себестоимости
//
Процедура ДополнитьПараметрыРасчета(ПараметрыРасчета) Экспорт
	//++ Локализация
	
	#Область ОрганизацииИПолитики
	
	// Организации и их учетные политики.
	ПараметрыРасчета.УчетныеПолитики.Вставить("УСН", 	   	   			   Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.УСН.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
	
	ПараметрыРасчета.УчетныеПолитики.Вставить("УчетПартийНДСВерсии22", 	   Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.Вставить(
		"ИспользовалиВПрошломПериоде",
		Новый Массив);
	
	ПараметрыРасчета.УчетныеПолитики.Вставить("УчетПартийНДСВерсии24", 	   Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.Вставить(
		"ИспользовалиВПрошломПериоде",
		Новый Массив);
	
	ПараметрыРасчета.УчетныеПолитики.Вставить("УчетПартийНДСНеВедется",    Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.Вставить(
		"ИспользовалиВПрошломПериоде",
		Новый Массив);
	
	ПараметрыРасчета.УчетныеПолитики.Вставить("РаздельныйУчетПостатейныхЗатрат", Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.РаздельныйУчетПостатейныхЗатрат.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
	
	ЗапросУчетныеПолитики = Новый Запрос;
	ЗапросУчетныеПолитики.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрОрганизации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СпрОрганизации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВтГоловныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК СпрОрганизации
	|ГДЕ
	|	СпрОрганизации.Ссылка В (&Организации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГоловнаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.Организация КАК Организация,
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.ДетализироватьДополнительныеРасходыВСебестоимостиТоваров,
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.МетодОценкиСтоимостиТоваров
	|ПОМЕСТИТЬ ВТФинУчет
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаФинансовогоУчета.СрезПоследних(&Период, Организация В
	|		(ВЫБРАТЬ
	|			ГоловнаяОрганизация
	|		ИЗ
	|			ВтГоловныеОрганизации)) КАК УчетнаяПолитикаФинансовогоУчетаСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложенияСрезПоследних.Организация КАК Организация,
	|	НастройкиСистемыНалогообложенияСрезПоследних.СистемаНалогообложения,
	|	ВЫБОР КОГДА НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСН ТОГДА
	|		ЕСТЬNULL(НастройкиУчетаУСНСрезПоследних.РаздельныйУчетТоваров, ЛОЖЬ)
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РаздельныйУчетТоваровУСН
	|ПОМЕСТИТЬ ВТСистемаНалогообложения
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&Период, Организация В
	|		(ВЫБРАТЬ
	|			ГоловнаяОрганизация
	|		ИЗ
	|			ВтГоловныеОрганизации)) КАК НастройкиСистемыНалогообложенияСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаУСН.СрезПоследних(&Период, Организация В
	|			(ВЫБРАТЬ
	|				ГоловнаяОрганизация
	|			ИЗ
	|				ВтГоловныеОрганизации)) КАК НастройкиУчетаУСНСрезПоследних
	|		ПО НастройкиУчетаУСНСрезПоследних.Организация = НастройкиСистемыНалогообложенияСрезПоследних.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиУчетаНДССрезПоследних.Организация КАК Организация,
	|	НастройкиУчетаНДССрезПоследних.РаздельныйУчетТоваровПоНалогообложениюНДС,
	|	НастройкиУчетаНДССрезПоследних.РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС
	|ПОМЕСТИТЬ ВТУчетНДС
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС.СрезПоследних(&Период, Организация В
	|		(ВЫБРАТЬ
	|			ГоловнаяОрганизация
	|		ИЗ
	|			ВтГоловныеОрганизации)) КАК НастройкиУчетаНДССрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.Организация КАК Организация,
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.ДетализироватьДополнительныеРасходыВСебестоимостиТоваров,
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.МетодОценкиСтоимостиТоваров
	|ПОМЕСТИТЬ ВТФинУчетПрошлыйПериод
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаФинансовогоУчета.СрезПоследних(&ПрошлыйПериод, Организация В
	|		(ВЫБРАТЬ
	|			ГоловнаяОрганизация
	|		ИЗ
	|			ВтГоловныеОрганизации)) КАК УчетнаяПолитикаФинансовогоУчетаСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложенияСрезПоследних.Организация КАК Организация,
	|	НастройкиСистемыНалогообложенияСрезПоследних.СистемаНалогообложения,
	|	ВЫБОР КОГДА НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСН ТОГДА
	|		ЕСТЬNULL(НастройкиУчетаУСНСрезПоследних.РаздельныйУчетТоваров, ЛОЖЬ)
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РаздельныйУчетТоваровУСН
	|ПОМЕСТИТЬ ВТСистемаНалогообложенияПрошлыйПериод
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&ПрошлыйПериод, Организация В
	|		(ВЫБРАТЬ
	|			ГоловнаяОрганизация
	|		ИЗ
	|			ВтГоловныеОрганизации)) КАК НастройкиСистемыНалогообложенияСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаУСН.СрезПоследних(&ПрошлыйПериод, Организация В
	|			(ВЫБРАТЬ
	|				ГоловнаяОрганизация
	|			ИЗ
	|				ВтГоловныеОрганизации)) КАК НастройкиУчетаУСНСрезПоследних
	|		ПО НастройкиУчетаУСНСрезПоследних.Организация = НастройкиСистемыНалогообложенияСрезПоследних.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиУчетаНДССрезПоследних.Организация КАК Организация,
	|	НастройкиУчетаНДССрезПоследних.РаздельныйУчетТоваровПоНалогообложениюНДС,
	|	НастройкиУчетаНДССрезПоследних.РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС
	|ПОМЕСТИТЬ ВТУчетНДСПрошлыйПериод
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС.СрезПоследних(&ПрошлыйПериод, Организация В
	|		(ВЫБРАТЬ
	|			ГоловнаяОрганизация
	|		ИЗ
	|			ВтГоловныеОрганизации)) КАК НастройкиУчетаНДССрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтГоловныеОрганизации.Организация КАК Организация,
	|	ЕСТЬNULL(ВТСистемаНалогообложения.СистемаНалогообложения, ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)) КАК
	|		СистемаНалогообложения,
	|	ЕСТЬNULL(ВТСистемаНалогообложения.РаздельныйУчетТоваровУСН, ЛОЖЬ) КАК РаздельныйУчетТоваровУСН,
	|	ЕСТЬNULL(ВТФинУчет.ДетализироватьДополнительныеРасходыВСебестоимостиТоваров, ЛОЖЬ) КАК ДетализироватьДополнительныеРасходыВСебестоимостиТоваров,
	|	ЕСТЬNULL(ВТФинУчет.МетодОценкиСтоимостиТоваров,
	|		ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц)) КАК МетодОценкиСтоимостиТоваров,
	|	ЕСТЬNULL(ВТУчетНДС.РаздельныйУчетТоваровПоНалогообложениюНДС, ЛОЖЬ) КАК РаздельныйУчетТоваровПоНалогообложениюНДС,
	|	ЕСТЬNULL(ВТУчетНДС.РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС, ЛОЖЬ) КАК
	|		РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС
	|ИЗ
	|	ВтГоловныеОрганизации КАК ВтГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСистемаНалогообложения КАК ВТСистемаНалогообложения
	|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТСистемаНалогообложения.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФинУчет КАК ВТФинУчет
	|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТФинУчет.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетНДС КАК ВТУчетНДС
	|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТУчетНДС.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтГоловныеОрганизации.Организация КАК Организация,
	|	ЕСТЬNULL(ВТСистемаНалогообложенияПрошлыйПериод.СистемаНалогообложения,
	|		ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)) КАК СистемаНалогообложения,
	|	ЕСТЬNULL(ВТСистемаНалогообложенияПрошлыйПериод.РаздельныйУчетТоваровУСН,
	|		ЛОЖЬ) КАК РаздельныйУчетТоваровУСН,
	|	ЕСТЬNULL(ВТФинУчетПрошлыйПериод.ДетализироватьДополнительныеРасходыВСебестоимостиТоваров, ЛОЖЬ) КАК ДетализироватьДополнительныеРасходыВСебестоимостиТоваров,
	|	ЕСТЬNULL(ВТФинУчетПрошлыйПериод.МетодОценкиСтоимостиТоваров,
	|		ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц)) КАК МетодОценкиСтоимостиТоваров,
	|	ЕСТЬNULL(ВТУчетНДСПрошлыйПериод.РаздельныйУчетТоваровПоНалогообложениюНДС, ЛОЖЬ) КАК
	|		РаздельныйУчетТоваровПоНалогообложениюНДС,
	|	ЕСТЬNULL(ВТУчетНДСПрошлыйПериод.РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС, ЛОЖЬ) КАК
	|		РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС
	|ИЗ
	|	ВтГоловныеОрганизации КАК ВтГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСистемаНалогообложенияПрошлыйПериод КАК ВТСистемаНалогообложенияПрошлыйПериод
	|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТСистемаНалогообложенияПрошлыйПериод.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФинУчетПрошлыйПериод КАК ВТФинУчетПрошлыйПериод
	|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТФинУчетПрошлыйПериод.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетНДСПрошлыйПериод КАК ВТУчетНДСПрошлыйПериод
	|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТУчетНДСПрошлыйПериод.Организация";
	
	ЗапросУчетныеПолитики.УстановитьПараметр("Организации", ПараметрыРасчета.МассивОрганизаций);
	ЗапросУчетныеПолитики.УстановитьПараметр("Период", ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	ЗапросУчетныеПолитики.УстановитьПараметр("ПрошлыйПериод", ПараметрыРасчета.РасчетныйПериод.НачалоПредыдущегоПериода);
	
	Результат						= ЗапросУчетныеПолитики.ВыполнитьПакет();
	
	УчетныеПолитики					= Результат[7].Выгрузить();
	УчетныеПолитикиПрошлогоПериода	= Результат[8].Выгрузить();
	
	Для Каждого ПараметрыУчетнойПолитики Из УчетныеПолитики Цикл
		
		ПараметрУчетнойПолитикиПрошлогоПериода = УчетныеПолитикиПрошлогоПериода.Найти(
			ПараметрыУчетнойПолитики.Организация,
			"Организация");
		
		ПараметрыРасчета.УчетныеПолитики.МетодыОценкиСтоимости.Вставить(
			ПараметрыУчетнойПолитики.Организация,
			ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров);
		
		// УСН
		Если ПараметрыУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.УСН.ИспользуютВТекущемПериоде; // Массив
			ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
		// УчетПартийНДС...
		Если ПараметрыРасчета.ПартионныйУчетВерсии22
		 И (ПараметрыУчетнойПолитики.РаздельныйУчетТоваровПоНалогообложениюНДС
		 	ИЛИ ПараметрыУчетнойПолитики.ДетализироватьДополнительныеРасходыВСебестоимостиТоваров
		 	ИЛИ ПараметрыУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная
				И ПараметрыУчетнойПолитики.РаздельныйУчетТоваровУСН) Тогда
			
			Если ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
				ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.ИспользуютВТекущемПериоде; // Массив
				ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
			Иначе
				ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.ИспользуютВТекущемПериоде; // Массив
				ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
			КонецЕсли;
			
		Иначе
			ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.ИспользуютВТекущемПериоде; // Массив
			ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
		Если ПараметрыРасчета.ПартионныйУчетВерсии22
		 И (ПараметрУчетнойПолитикиПрошлогоПериода.РаздельныйУчетТоваровПоНалогообложениюНДС
		 	ИЛИ ПараметрУчетнойПолитикиПрошлогоПериода.ДетализироватьДополнительныеРасходыВСебестоимостиТоваров
		 	ИЛИ ПараметрУчетнойПолитикиПрошлогоПериода.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная
				И ПараметрУчетнойПолитикиПрошлогоПериода.РаздельныйУчетТоваровУСН) Тогда
			
			Если ПараметрУчетнойПолитикиПрошлогоПериода.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
				ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.ИспользовалиВПрошломПериоде; // Массив
				ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
			Иначе
				ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.ИспользовалиВПрошломПериоде; // Массив
				ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
			КонецЕсли;
			
		Иначе
			ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.ИспользовалиВПрошломПериоде; // Массив
			ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
		Если (ПараметрыУчетнойПолитики.РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС
		 	И ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка
		 ИЛИ ПараметрыУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная
			И ПараметрыУчетнойПолитики.РаздельныйУчетТоваровУСН) Тогда
			ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.РаздельныйУчетПостатейныхЗатрат.ИспользуютВТекущемПериоде; // Массив
			ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область РегламентированныйУчет
	
	ПараметрыРасчета.Вставить("НастройкиРеглУчета", Новый Структура);
	ПараметрыРасчета.НастройкиРеглУчета.Вставить("ДатаВозможностиВычетаПриОказанииУслугНеВРФ", УчетНДСУП.НастройкиУчета().ДатаВозможностиВычетаПриОказанииУслугНеВРФ);
	
	#КонецОбласти
	
	//-- Локализация
КонецПроцедуры

// Дополняет свойства запроса.
//
// Параметры:
//	Запрос - Запрос - Запрос для которого устанавливаются параметры
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//
Процедура ДополнитьСвойстваЗапроса(Запрос, ПараметрыРасчета) Экспорт
	//++ Локализация
	Запрос.УстановитьПараметр("ОрганизацииНаУСН", 									 ПараметрыРасчета.УчетныеПолитики.УСН.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСУчетомПартийНДСВерсии22", 				 ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСУчетомПартийНДСВерсии24", 				 ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСУчетомПартийНДСВерсии22ВПрошломПериоде",  ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.ИспользовалиВПрошломПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСУчетомПартийНДСВерсии24ВПрошломПериоде",  ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.ИспользовалиВПрошломПериоде);
	Запрос.УстановитьПараметр("ОрганизацииБезУчетаПартийНДС",  						 ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ОрганизацииБезУчетаПартийНДСВПрошломПериоде",  		 ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.ИспользовалиВПрошломПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСРаздельнымУчетомПостатейныхЗатрат",       ПараметрыРасчета.УчетныеПолитики.РаздельныйУчетПостатейныхЗатрат.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ЕстьОрганизацииСРаздельнымУчетомПостатейныхЗатрат",   ЗначениеЗаполнено(ПараметрыРасчета.УчетныеПолитики.РаздельныйУчетПостатейныхЗатрат.ИспользуютВТекущемПериоде));
	Запрос.УстановитьПараметр("ДатаВозможностиВычетаПриОказанииУслугНеВРФ",          ПараметрыРасчета.НастройкиРеглУчета.ДатаВозможностиВычетаПриОказанииУслугНеВРФ);


	//-- Локализация
КонецПроцедуры

// Дополняет параметры запроса для проведения документов.
//
// Параметры:
//	Реквизиты - Произвольный - реквизиты документа для определения параметров партионного учета
//	Период - Дата - период, в которых документ формирует движения
//	СтруктураПараметров - Структура - перечень параметров с установленными значениями
//
Процедура ДополнитьПараметрыЗапросаДляПроведения(Реквизиты, Период, СтруктураПараметров) Экспорт
	
	// Инициализация локализованных параметров значениями по умолчанию.
	СтруктураПараметров.Вставить("РаздельныйУчетТоваровПоНалогообложениюНДС", Ложь);
	СтруктураПараметров.Вставить("РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС", Ложь);
	СтруктураПараметров.Вставить("СтатьяРасходовСписаниеНДС", Неопределено);
	СтруктураПараметров.Вставить("АналитикаРасходовСписаниеНДС", Неопределено);
	
	//++ Локализация
	Организация = Неопределено;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "ОрганизацияПолучатель")
	 И ЗначениеЗаполнено(Реквизиты.ОрганизацияПолучатель) Тогда
		Организация = Реквизиты.ОрганизацияПолучатель;
	ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Организация") Тогда
		Организация = Реквизиты.Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) Тогда
	
		ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик("НастройкиУчетаНДС",
			Организация,
			Период);
		ПараметрыУчетнойПолитикиФинУчета = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик("УчетнаяПолитикаФинансовогоУчета",
			Организация,
			Период);
		
		СтруктураПараметров.Вставить("РаздельныйУчетТоваровПоНалогообложениюНДС", ПараметрыУчетнойПолитики <> Неопределено
				И ПараметрыУчетнойПолитики.РаздельныйУчетТоваровПоНалогообложениюНДС);
		СтруктураПараметров.Вставить("РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС",
			ПараметрыУчетнойПолитики <> Неопределено 
				И ПараметрыУчетнойПолитикиФинУчета <> Неопределено
				И ПараметрыУчетнойПолитикиФинУчета.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка
				И ПараметрыУчетнойПолитики.РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС);
		СтруктураПараметров.Вставить("СтатьяРасходовСписаниеНДС", ?(ПараметрыУчетнойПолитики <> Неопределено, 
			ПараметрыУчетнойПолитики.СтатьяРасходовСписаниеНДС, ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка()));
		СтруктураПараметров.Вставить("АналитикаРасходовСписаниеНДС", ?(ПараметрыУчетнойПолитики <> Неопределено,
				ПараметрыУчетнойПолитики.АналитикаРасходовСписаниеНДС, ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка()));
				
		ПараметрыУчетнойПолитикиУСН = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик("НастройкиУчетаУСН",
			Организация,
			Период);
		СтруктураПараметров.Вставить("РаздельныйУчетТоваровУСН", ПараметрыУчетнойПолитикиУСН <> Неопределено
			И ЗначениеЗаполнено(ПараметрыУчетнойПолитикиУСН.РаздельныйУчетТоваров)
			И ПараметрыУчетнойПолитикиУСН.РаздельныйУчетТоваров);
		
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Возвращает признак того, что указанный регистр является локализуемым.
//
// Параметры:
//	ИмяРегистра - Строка - имя проверяемого регистра
//
// Возвращаемое значение:
//	Булево - признак локализуемого регистра
//
Функция ЭтоЛокализуемыйРегистрСведений(ИмяРегистра) Экспорт
	
	Если ИмяРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваров.Имя
	 ИЛИ ИмяРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты.Имя
	//++ Локализация
	 ИЛИ ИмяРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваров.Имя
	 ИЛИ ИмяРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП.Имя
	//-- Локализация
	 ИЛИ ИмяРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатраты.Имя Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
