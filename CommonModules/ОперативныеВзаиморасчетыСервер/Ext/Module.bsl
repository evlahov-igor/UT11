
#Область ПрограммныйИнтерфейс

// Выполняет заполнение регистров взаиморасчетов в новой архитектуре по переданной структуре параметров.
//
// Параметры:
//	ОсновныеПараметры - Структура - Параметры пересчета, см. СтруктураПараметровЗаполненияВзаиморасчетов
//
Процедура ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры) Экспорт
	
	#Область ИнициализацияЗапросаИПеременных
	
	РеквизитыАналитики = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновныеПараметры.АналитикаУчетаПоПартнерам, "Организация, Контрагент");
	Организация = РеквизитыАналитики.Организация;
	Контрагент = РеквизитыАналитики.Контрагент;
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	ВалютаУправленческогоУчета     = Константы.ВалютаУправленческогоУчета.Получить();
	
	ЗапросГлобальныхПеременных = Новый Запрос;
	ЗапросГлобальныхПеременных.Текст = "
	|ВЫБРАТЬ
	|	Справочник.Объект КАК Объект,
	|	Справочник.ТипОбъектаРасчетов КАК ТипОбъектаРасчетов,
	|	ЕСТЬNULL(Справочник.Объект.ГрафикИсполненияДоговора, ЛОЖЬ) КАК ГрафикИсполненияДоговора
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК Справочник
	|ГДЕ
	|	Справочник.Ссылка = &ОбъектРасчетов
	|;
	|ВЫБРАТЬ
	|	КурсыВалют.КурсЗнаменатель КАК КратностьРегл,
	|	ЕСТЬNULL(КурсыВалютыУпр.КурсЗнаменатель, 1) КАК КратностьУпр
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(, БазоваяВалюта = &ВалютаРегл) КАК КурсыВалют
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(, БазоваяВалюта = &ВалютаРегл) КАК КурсыВалютыУпр
	|			ПО КурсыВалютыУпр.Валюта = &ВалютаУпр
	|ГДЕ
	|	КурсыВалют.Валюта = &ВалютаРасчетов
	|
	|";
	
	ЗапросГлобальныхПеременных.УстановитьПараметр("АналитикаУчетаПоПартнерам",  ОсновныеПараметры.АналитикаУчетаПоПартнерам);
	ЗапросГлобальныхПеременных.УстановитьПараметр("ОбъектРасчетов",             ОсновныеПараметры.ОбъектРасчетов);
	ЗапросГлобальныхПеременных.УстановитьПараметр("ВалютаРасчетов",             ОсновныеПараметры.ВалютаРасчетов);
	ЗапросГлобальныхПеременных.УстановитьПараметр("ВалютаУпр",                  ВалютаУправленческогоУчета);
	ЗапросГлобальныхПеременных.УстановитьПараметр("ВалютаРегл",                 ВалютаРегламентированногоУчета);
	Результаты =  ЗапросГлобальныхПеременных.ВыполнитьПакет();
	
	КурсыВалютСрезПоследних = Результаты[1].Выгрузить();
	КратностьРегл = ?(КурсыВалютСрезПоследних.Количество() > 0, КурсыВалютСрезПоследних[0].КратностьРегл, 1);
	КратностьУпр  = ?(КурсыВалютСрезПоследних.Количество() > 0, КурсыВалютСрезПоследних[0].КратностьУпр, 1);
	
	РеквизитыОбъектаРасчетов = Результаты[0].Выгрузить();
	Если РеквизитыОбъектаРасчетов.Количество() = 1 Тогда
		РасчетыПоЗаказу   = РеквизитыОбъектаРасчетов[0].ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.Заказ;
		РасчетыПоДоговору = РеквизитыОбъектаРасчетов[0].ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.Договор;
		Объект            = РеквизитыОбъектаРасчетов[0].Объект;
		ГрафикИсполненияДоговора = РеквизитыОбъектаРасчетов[0].ГрафикИсполненияДоговора;
	Иначе
		РасчетыПоЗаказу          = Ложь;
		РасчетыПоДоговору        = Ложь;
		Объект                   = Неопределено;
		ГрафикИсполненияДоговора = Неопределено;
	КонецЕсли;
	
	//Если график исполнения в договоре, то вместо графика заказа будет уточняться график договора.
	//Если пользователь каким-то образом ввел заказы с графиками по такому договору, то все этапы таких заказов будут отнесены к графику договора
	//и закрываться будут по ФИФО независимо от привязки накладных к заказам
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ГрафикВДоговоре = ЗначениеЗаполнено(ГрафикИсполненияДоговора);
	Иначе
		ГрафикВДоговоре = ЛОЖЬ;
	КонецЕсли;
	
	РазмерПорцииЗаписи = РазмерПорцииЗаписи();
	ХозяйственныеОперацииНеОтгрузка = ХозяйственныеОперацииНеОтгрузка();
	
	НастройкиХО = Новый Соответствие;
	
	//Хозяйственные операции для заполнения.
	ХозяйственныеОперации = Новый Соответствие; 
	
	Если ОсновныеПараметры.ЭтоРасчетыСКлиентами Тогда
		
		ХозяйственныеОперации.Вставить("ЗачетАванса",             Перечисления.ХозяйственныеОперации.ЗачетАвансаКлиента);
		ХозяйственныеОперации.Вставить("ПогашениеЗадолженности",  Перечисления.ХозяйственныеОперации.ПогашениеЗадолженностиКлиента);
		ХозяйственныеОперации.Вставить("ВозвратАванса",           Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		ХозяйственныеОперации.Вставить("ПереоценкаПоложительная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыПрибыль);
		ХозяйственныеОперации.Вставить("ПереоценкаОтрицательная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыУбыток);
		ХозяйственныеОперации.Вставить("Планирование",            Перечисления.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента);
		
		ИмяРегистраРасчетов = "РасчетыСКлиентамиПоСрокам";
		ИмяРегистраПланаОплат = "РасчетыСКлиентамиПланОплат";
		ИмяРегистраПланаОтгрузкиПоставки = "РасчетыСКлиентамиПланОтгрузок";
		
		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		НастройкиХО.Вставить("ЗачетОплаты", Справочники.НастройкиХозяйственныхОпераций.ЗачетАвансаКлиента);
		НастройкиХО.Вставить("ПереоценкаПоложительная", Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКлиентыПрибыль);
		НастройкиХО.Вставить("ПереоценкаОтрицательная", Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКлиентыУбыток);
	Иначе
		
		ХозяйственныеОперации.Вставить("ЗачетАванса",             Перечисления.ХозяйственныеОперации.ЗачетАвансаПоставщику);
		ХозяйственныеОперации.Вставить("ПогашениеЗадолженности",  Перечисления.ХозяйственныеОперации.ПогашениеЗадолженностиПоставщику);
		ХозяйственныеОперации.Вставить("ВозвратАванса",           Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
		ХозяйственныеОперации.Вставить("ПереоценкаПоложительная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиУбыток);
		ХозяйственныеОперации.Вставить("ПереоценкаОтрицательная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиПрибыль);
		ХозяйственныеОперации.Вставить("Планирование",            Перечисления.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику);
		
		ИмяРегистраРасчетов = "РасчетыСПоставщикамиПоСрокам";
		ИмяРегистраПланаОплат = "РасчетыСПоставщикамиПланОплат";
		ИмяРегистраПланаОтгрузкиПоставки = "РасчетыСПоставщикамиПланПоставок";
		
		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
		НастройкиХО.Вставить("ЗачетОплаты", Справочники.НастройкиХозяйственныхОпераций.ЗачетАвансаПоставщику);
		НастройкиХО.Вставить("ПереоценкаПоложительная", Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыПоставщикиУбыток);
		НастройкиХО.Вставить("ПереоценкаОтрицательная", Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыПоставщикиПрибыль);
	КонецЕсли;
		
	Если ОсновныеПараметры.ПорядокФакт = Неопределено Тогда
		ОсновныеПараметры.ПорядокФакт = "";
	КонецЕсли;
	
	Если ОсновныеПараметры.ПорядокПлан = Неопределено Тогда
		ОсновныеПараметры.ПорядокПлан = "";
	КонецЕсли;
	
	ГлобальныеПеременные = ОбщегоНазначения.СкопироватьРекурсивно(ОсновныеПараметры);
	ГлобальныеПеременные.Вставить("Организация", Организация);
	ГлобальныеПеременные.Вставить("ЕжедневнаяПереоценка", Константы.ПереоцениватьВалютныеСредстваПоДням.Получить());
	//Для уточнения плана оплат - в переменной хранится последний момент времени плана оплат,
	//чтобы при добавлении записи в план оплат можно было сразу определить есть ли планы оплат с датой больше, чем добавляемая запись.
	ГлобальныеПеременные.Вставить("МаксимальныйПорядокПланаОплат", "");
	ГлобальныеПеременные.Вставить("ГрафикВДоговоре",               ГрафикВДоговоре);
	ГлобальныеПеременные.Вставить("ПорядокПереоценки",             Новый Соответствие);
	ГлобальныеПеременные.Вставить("РазмерПорцииЗаписи",            РазмерПорцииЗаписи);
	ГлобальныеПеременные.Вставить("ХозяйственныеОперации",         ХозяйственныеОперации);
	ГлобальныеПеременные.Вставить("НастройкиХО",                   НастройкиХО);
	ГлобальныеПеременные.Вставить("РассчитыватьПланы",             Лев(ГлобальныеПеременные.ПорядокПлан, 4) <> "3000");
	ГлобальныеПеременные.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	ГлобальныеПеременные.Вставить("ВалютаУправленческогоУчета",     ВалютаУправленческогоУчета);
	ГлобальныеПеременные.Вставить("РазрядностьКурсаРегл",           3 + СтрДлина(Формат(КратностьРегл,"ЧГ=")));
	ГлобальныеПеременные.Вставить("РазрядностьКурсаУпр",            ГлобальныеПеременные.РазрядностьКурсаРегл + 3 + СтрДлина(Формат(КратностьУпр,"ЧГ=")));
	
	Запрос                         = Новый Запрос;
	Менеджер                       = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	
	Запрос.УстановитьПараметр("ОбъектРасчетов",             ГлобальныеПеременные.ОбъектРасчетов);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",  ГлобальныеПеременные.АналитикаУчетаПоПартнерам);
	Запрос.УстановитьПараметр("ВалютаРасчетов",             ГлобальныеПеременные.ВалютаРасчетов);
	Запрос.УстановитьПараметр("ЭтоРасчетыСКлиентами",       ГлобальныеПеременные.ЭтоРасчетыСКлиентами);
	Запрос.УстановитьПараметр("Регистратор",                ГлобальныеПеременные.Регистратор);
	ГлобальныеПеременные.Вставить("Порядок",Мин(ГлобальныеПеременные.ПорядокФакт, ГлобальныеПеременные.ПорядокПлан));
	Запрос.УстановитьПараметр("Порядок",                    ГлобальныеПеременные.Порядок);
	
	ПорядокЗачетаПоДатеПлатежа = Константы.ПорядокЗачетаДокументовПоДатеОперации.Получить() = 1;
	Если ПорядокЗачетаПоДатеПлатежа Тогда
		ГлобальныеПеременные.ПорядокФакт = Мин(ГлобальныеПеременные.ПорядокФакт, ГлобальныеПеременные.ПорядокПлан);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГлобальныеПеременные.Порядок) Тогда
		НачалоДняПорядкаФакт = Дата(Лев(ГлобальныеПеременные.ПорядокФакт,8));
		НачалоДняПорядка     = Дата(Лев(ГлобальныеПеременные.Порядок,8));
	Иначе
		НачалоДняПорядкаФакт = Дата(1,1,1,1,1,2);
		НачалоДняПорядка = Дата(1,1,1,1,1,2);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоДняПорядкаФакт",       НачалоДняПорядкаФакт);
	Запрос.УстановитьПараметр("НачалоДняПорядка",           НачалоДняПорядка);
	Запрос.УстановитьПараметр("ПорядокЗачетаПоДатеПлатежа", ПорядокЗачетаПоДатеПлатежа);
	Запрос.УстановитьПараметр("Объект",                     Объект);
	
	Запрос.УстановитьПараметр("ВалютаУпр",                  ВалютаУправленческогоУчета);
	Запрос.УстановитьПараметр("ВалютаРегл",                 ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ГрафикВДоговоре",            ГрафикВДоговоре);
	Запрос.УстановитьПараметр("ГрафикИсполненияДоговора",   ГрафикИсполненияДоговора);
	Запрос.УстановитьПараметр("РасчетыПоЗаказу",            РасчетыПоЗаказу);
	Запрос.УстановитьПараметр("РазмерПорцииЗаписи",         РазмерПорцииЗаписи);
	Запрос.УстановитьПараметр("ТипРасчетов",                ТипРасчетов);
	
	Запрос.УстановитьПараметр("СписокТиповЗаказов",         СписокТиповРегистраторовПланов());
	Запрос.УстановитьПараметр("НепересчитываемыеХО",        НепересчитываемыеХозяйственныеОперации());
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	#КонецОбласти
	
	//Движения до начала пересчета и остатки.
	СформироватьВТДанныхРегистровДоНачалаРасчетов(Запрос, ГлобальныеПеременные);
	//Данные регистров с порядком меньше порядка начала расчета, далее дополняются.
	ТаблицаРасчетовПоСрокам     = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяРегистраРасчетов);
	ТаблицаРасчетовПоСрокам.Колонки.Добавить("ЗаписьДоНачалаРасчета", Новый ОписаниеТипов("Булево"));
	ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(Истина,"ЗаписьДоНачалаРасчета");
	Если ГлобальныеПеременные.РассчитыватьПланы Тогда
		ТаблицаПланОплат            = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяРегистраПланаОплат);
		ТаблицаПланОтгрузокПоставок = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяРегистраПланаОтгрузкиПоставки);
	КонецЕсли;

	//Движения после начала пересчета и остатки до начала пересчета для распределения.
	РасчетыОтгрузкиПоставки     = ПолучитьОтгрузкиПоставки(Запрос, ГлобальныеПеременные);
	Если ПорядокЗачетаПоДатеПлатежа Тогда
		РасчетыОтгрузкиПоставки.Индексы.Добавить("ЕстьОстаток, ПорядокЗачетаПоДатеПлатежа");
		РасчетыОтгрузкиПоставки.Индексы.Добавить("Регистратор");
	КонецЕсли;
	
	//Учтены только приходы по заказам, графикам и предоплатным накладным.
	//Остальные расходы и приходы добавляются при распределении фактических взаиморасчетов.
	РасчетыОплаты              = ПолучитьОплаты(Запрос, ГлобальныеПеременные);
	Если ГлобальныеПеременные.РассчитыватьПланы Тогда
		ПланыОплат                 = ПолучитьПланыОплат(Запрос, ГлобальныеПеременные);
		ПланыОтгрузокПоставок      = ПолучитьПланыОтгрузокПоставок(Запрос, ГлобальныеПеременные);
	КонецЕсли;
	
	НужнаПереоценка = (ГлобальныеПеременные.ВалютаРасчетов <> ВалютаРегламентированногоУчета 
			ИЛИ ГлобальныеПеременные.ВалютаРасчетов <> ВалютаУправленческогоУчета)
		И РасчетыОтгрузкиПоставки.Количество() > 0
		И НЕ ОсновныеПараметры.НачальноеЗаполнение;
	
	Если НужнаПереоценка Тогда
		ДатаНачалаКурсов = Мин(РасчетыОтгрузкиПоставки[0].Период,
									?(РасчетыОплаты.Количество() > 0,
										РасчетыОплаты[0].Период,
										РасчетыОтгрузкиПоставки[0].Период));
		ТаблицаКурсовВалют = ПолучитьКурсыВалют(Запрос, ДатаНачалаКурсов, ГлобальныеПеременные);
		ГлобальныеПеременные.Вставить("ТаблицаКурсовВалют", ТаблицаКурсовВалют);
		
		ДатаНачалаКурсовыхРазниц = Макс(НачалоДняПорядка,
			?(РасчетыОтгрузкиПоставки.Количество() > 0, РасчетыОтгрузкиПоставки[0].ДатаВозникновения, ТекущаяДатаСеанса()));
		ДокументыРасчетаКурсовыхРазниц = Документы.РасчетКурсовыхРазниц.ДокументыПереоценки(Организация,
			ДатаНачалаКурсовыхРазниц,
			ТекущаяДатаСеанса(),
			ГлобальныеПеременные.ЭтоРасчетыСКлиентами);
		
		КоэффициентПересчетаРегл = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
			ГлобальныеПеременные.ВалютаРасчетов, ВалютаРегламентированногоУчета, ДатаНачалаКурсовыхРазниц, ВалютаРегламентированногоУчета);
		КоэффициентПересчетаУпр = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
			ГлобальныеПеременные.ВалютаРасчетов, ВалютаУправленческогоУчета, ДатаНачалаКурсовыхРазниц, ВалютаРегламентированногоУчета);
		
		ТочностьОбратногоПересчетаРегл = СтрДлина(Формат(КоэффициентПересчетаРегл,"ЧН=; ЧГ=")) - СтрДлина(Цел(Формат(КоэффициентПересчетаРегл,"ЧН=; ЧГ="))) - 1;
		ТочностьОбратногоПересчетаУпр = СтрДлина(Формат(КоэффициентПересчетаУпр,"ЧН=; ЧГ=")) - СтрДлина(Цел(Формат(КоэффициентПересчетаУпр,"ЧН=; ЧГ="))) - 1;
		МинимальнаяТочностьКурса = Метаданные.ОпределяемыеТипы.КурсВалюты.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		
		ТочностьОбратногоПересчетаРегл = Макс(ТочностьОбратногоПересчетаРегл, МинимальнаяТочностьКурса);
		ТочностьОбратногоПересчетаУпр = Макс(ТочностьОбратногоПересчетаУпр, МинимальнаяТочностьКурса);
	Иначе
		ТочностьОбратногоПересчетаРегл = 0;
		ТочностьОбратногоПересчетаУпр = 0;
	КонецЕсли;
	
	ГлобальныеПеременные.Вставить("ДокументыРасчетаКурсовыхРазниц", ДокументыРасчетаКурсовыхРазниц);
	
	Если ГлобальныеПеременные.РассчитыватьПланы Тогда
		//Добавляем приходные записи планов отгрузок.
		Для Каждого Стр Из ПланыОтгрузокПоставок Цикл
			Если НЕ Стр.ПриходДобавлен Тогда
				НовСтр = ТаблицаПланОтгрузокПоставок.Добавить();
				НовСтр.ВидДвижения               = ВидДвиженияНакопления.Приход;
				НовСтр.ДокументРегистратор       = Стр.Регистратор;
				НовСтр.ДокументПлан              = Стр.Регистратор;
				НовСтр.Период                    = Стр.Период;
				НовСтр.ДатаВозникновения         = Стр.ДатаВозникновения;
				НовСтр.ДатаПлановогоПогашения    = Стр.ДатаПлановогоПогашения;
				НовСтр.Сумма                     = Стр.КОтгрузкеПоставке;
				НовСтр.ПорядокЗачета             = Стр.ПорядокОперации;
				НовСтр.ПорядокОперации           = Стр.ПорядокОперации;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Для определения курса корректировки реализации в минус.
	//Ключ     - ДокументСсылка.РеализациТоваровУслуг, ДокументСсылка.АктВыполненныхРабот
	//Значение - Структура
	//     * СуммаДокумента, СуммаДокументаРегл, СуммаДокументаУпр - нужны для определения среднего курса реализации при проведении корректировок.
	ДанныеНакладных = Новый Соответствие;
	ТаблицаДанныхНакладных = ПолучитьДанныеНакладных(Запрос);
	Для Каждого Строка Из ТаблицаДанныхНакладных Цикл
		ДанныеНакладных.Вставить(Строка.Накладная,
									СтруктураСумм(Строка.Сумма,
													Строка.СуммаРегл,
													Строка.СуммаУпр));
	КонецЦикла;
	ГлобальныеПеременные.Вставить("ДанныеНакладных", ДанныеНакладных);
	
	ЗаписейОплаты           = РасчетыОплаты.Количество();
	ЗаписейОтгрузкиПоставки = РасчетыОтгрузкиПоставки.Количество();
	ЗаписейОбработать       = ЗаписейОплаты + ЗаписейОтгрузкиПоставки;
	
	Индексы = Новый Структура;
	//Индекс текущей обрабатываемой строки отгрузок.
	Индексы.Вставить("ИндексОтгрузкиПоставки", 0);
	//Индекс текущей обрабатываемой строки оплат.
	Индексы.Вставить("ИндексОплаты", 0);
	
	//Для распределения копеек в рамках документа.
	ТекущийДокументОплаты           = Неопределено;
	ТекущийДокументОтгрузкиПоставки = Неопределено;
	
	//Сколько строк отгрузки пропущено для зачета корректировкой реализации.
	ПропускОтгрузкиПоставки = 0;
	
	#Область РасчетФактическойЗадолженности
	
	Пока Индексы.ИндексОплаты + Индексы.ИндексОтгрузкиПоставки < ЗаписейОбработать Цикл
		
		Если Индексы.ИндексОплаты <= ЗаписейОплаты - 1 И Индексы.ИндексОтгрузкиПоставки <= ЗаписейОтгрузкиПоставки - 1 Тогда 
			
			СтрокаОплаты           = РасчетыОплаты[Индексы.ИндексОплаты];
			СтрокаОтгрузкиПоставки = РасчетыОтгрузкиПоставки[Индексы.ИндексОтгрузкиПоставки];
			
			Если СтрокаОтгрузкиПоставки.Сумма < 0 Или СтрокаОплаты.Сумма < 0 Тогда
				ВызватьИсключение(СтрШаблон(НСтр("ru = 'В регистрах взаиморасчетов обранужены отрицательные остатки на дату %1. Проведение невозможно.'"),
					НачалоДняПорядкаФакт));
			КонецЕсли;
			
			ЗачетВПределахРегистратора = 
					СтрокаОплаты.Регистратор = СтрокаОтгрузкиПоставки.Регистратор
					И (СтрокаОплаты.РасчетныйДокумент <> СтрокаОтгрузкиПоставки.РасчетныйДокумент
						ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера
						ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом
						ИЛИ СтрокаОтгрузкиПоставки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
					И Лев(СтрокаОплаты.ПорядокОперации,9) = Лев(СтрокаОтгрузкиПоставки.ПорядокОперации,9)
					//перенос задолженности - сначала надо отразить задолженность
					И СтрокаОплаты.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами
					// Возвраты оплат должны сначала проходить по долгу (реклассификация)
					И СтрокаОтгрузкиПоставки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
					И СтрокаОтгрузкиПоставки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
					И СтрокаОтгрузкиПоставки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту;
			
			//Оплата раньше отгрузки.
			Если СтрокаОплаты.ПорядокОперации < СтрокаОтгрузкиПоставки.ПорядокОперации 
				//В пределах регистратора (при расчетах по накладным) должен происходить зачет аванса.
				ИЛИ ЗачетВПределахРегистратора Тогда
				
				//Приход предоплаты.
				ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОплаты, "Оплата");
				
				//Уменьшаем план отгрузки, если есть.
				Если НЕ СтрокаОтгрузкиПоставки.ПланОтгрузокПоставокСписан Тогда
					СписатьПланОтгрузкиПоставки(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, СтрокаОтгрузкиПоставки, ПланыОтгрузокПоставок);
				КонецЕсли;
				
				Если СтрокаОтгрузкиПоставки.Сумма > 0 И СтрокаОплаты.Сумма > 0 Тогда
					
					//При порядке зачета по датам платежа могут быть документы отгрузки/поставки приоритетнее текущего
					//Поищем их и увеличим пропуск строк отгрузки поставки
					Если ПропускОтгрузкиПоставки = 0 И ПорядокЗачетаПоДатеПлатежа 
						И Индексы.ИндексОтгрузкиПоставки < ЗаписейОтгрузкиПоставки - 1 Тогда
						
						ПорядкиЗачета = РасчетыОтгрузкиПоставки.Скопировать(Новый Структура("ЕстьОстаток", ИСТИНА),"ПорядокЗачетаПоДатеПлатежа");
						ПорядкиЗачета.Сортировать("ПорядокЗачетаПоДатеПлатежа ВОЗР");
						СтрокаПорядков = РасчетыОтгрузкиПоставки.НайтиСтроки(Новый Структура("ЕстьОстаток, ПорядокЗачетаПоДатеПлатежа", ИСТИНА, ПорядкиЗачета[0].ПорядокЗачетаПоДатеПлатежа))[0];
						Индекс = РасчетыОтгрузкиПоставки.Индекс(СтрокаПорядков);
						
						Если Индекс <> Индексы.ИндексОтгрузкиПоставки Тогда
							ПропускОтгрузкиПоставки = Индекс - Индексы.ИндексОтгрузкиПоставки;
							Индексы.ИндексОтгрузкиПоставки = Индекс;
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;
					
					//Переброс аванса на расчетный документ - накладную.
					НеОтгрузка = ХозяйственныеОперацииНеОтгрузка.Найти(СтрокаОтгрузкиПоставки.ХозяйственнаяОперация) <> Неопределено И НЕ СтрокаОтгрузкиПоставки.Сторно;
					ДвойнаяЗаписьНеНужна = НеОтгрузка;
					
					Если ТекущийДокументОплаты <> СтрокаОплаты.РасчетныйДокумент Тогда
						ПредоплатаРаспределеноРегл = 0;
						ПредоплатаРаспределеноУпр  = 0;
						ТекущийДокументОплаты      = СтрокаОплаты.РасчетныйДокумент;
					КонецЕсли;
					
					Если ТекущийДокументОтгрузкиПоставки <> СтрокаОтгрузкиПоставки.РасчетныйДокумент Тогда
						ДолгРаспределеноРегл       = 0;
						ДолгРаспределеноУпр        = 0;
						ТекущийДокументОтгрузкиПоставки = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
					КонецЕсли;
					
					//Добавляем запись списания предоплаты.
					СуммаСписания = Мин(СтрокаОплаты.Сумма, СтрокаОтгрузкиПоставки.Сумма);
					
					//Возврат аванса отражаем по курсу возврата. Взаимозачет всегда по своему курсу.
					Если (СтрокаОтгрузкиПоставки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности
						И СтрокаОтгрузкиПоставки.РучнойКурсРегл)
						ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса И СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор Тогда
						ПредоплатаРеглПредв = СуммаСписания(СтрокаОтгрузкиПоставки.КурсРегл, СтрокаОтгрузкиПоставки.СуммаРегл,
							 СтрокаОтгрузкиПоставки.Сумма, СуммаСписания, ТочностьОбратногоПересчетаРегл);
					//Остальные авансы по курсу аванса.
					Иначе
						ПредоплатаРеглПредв = СуммаСписания(0, СтрокаОплаты.СуммаРегл, СтрокаОплаты.Сумма, СуммаСписания, ТочностьОбратногоПересчетаРегл);
					КонецЕсли;
					
					Если (СтрокаОтгрузкиПоставки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности
						И СтрокаОтгрузкиПоставки.РучнойКурсУпр)
						ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса И СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор Тогда
						ПредоплатаУпрПредв = СуммаСписания(СтрокаОтгрузкиПоставки.КурсУпр, СтрокаОтгрузкиПоставки.СуммаУпр,
							СтрокаОтгрузкиПоставки.Сумма, СуммаСписания, ТочностьОбратногоПересчетаУпр);
					Иначе
						ПредоплатаУпрПредв = СуммаСписания(0, СтрокаОплаты.СуммаУпр, СтрокаОплаты.Сумма, СуммаСписания, ТочностьОбратногоПересчетаУпр);
					КонецЕсли;
					
					СуммаСписанияРегл = Окр(ПредоплатаРеглПредв + ПредоплатаРаспределеноРегл - Окр(ПредоплатаРаспределеноРегл, 2), 2);
					СуммаСписанияУпр  = Окр(ПредоплатаУпрПредв + ПредоплатаРаспределеноУпр - Окр(ПредоплатаРаспределеноУпр, 2), 2);
					
					Если СтрокаОтгрузкиПоставки.ПорядокОперации >= ГлобальныеПеременные.ПорядокФакт Тогда
						
						НовСтр_Предоплата_Расход                          = ТаблицаРасчетовПоСрокам.Добавить();
						НовСтр_Предоплата_Расход.ВидДвижения              = ВидДвиженияНакопления.Расход;
						НовСтр_Предоплата_Расход.ДокументРегистратор      = СтрокаОтгрузкиПоставки.Регистратор;
						НовСтр_Предоплата_Расход.ВалютаДокумента          = СтрокаОтгрузкиПоставки.ВалютаДокумента;
						НовСтр_Предоплата_Расход.Период                   = СтрокаОтгрузкиПоставки.Период;
						НовСтр_Предоплата_Расход.РасчетныйДокумент        = СтрокаОплаты.РасчетныйДокумент;
						НовСтр_Предоплата_Расход.ДатаВозникновения        = СтрокаОплаты.ДатаВозникновения;
						НовСтр_Предоплата_Расход.ДатаПлановогоПогашения   = Дата(1,1,1);
						НовСтр_Предоплата_Расход.ПорядокЗачета            = СтрокаОплаты.ПорядокЗачетаПоДатеПлатежа;
						НовСтр_Предоплата_Расход.ПорядокОперации          = СтрокаОтгрузкиПоставки.ПорядокОперации;
						НовСтр_Предоплата_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
						НовСтр_Предоплата_Расход.СвязанныйДокумент        = СтрокаОплаты.СвязанныйДокумент;
						НовСтр_Предоплата_Расход.КорОбъектРасчетов        = СтрокаОплаты.КорОбъектРасчетов;
						НовСтр_Предоплата_Расход.КорАналитикаУчетаПоПартнерам = СтрокаОплаты.КорАналитикаУчетаПоПартнерам;
						НовСтр_Предоплата_Расход.Сторно                   = СтрокаОтгрузкиПоставки.Сторно;
						
						Если СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор
							И ТипЗнч(СтрокаОтгрузкиПоставки.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионера")
							И СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера Тогда
							ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера;
						ИначеЕсли СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор
							И ТипЗнч(СтрокаОтгрузкиПоставки.Регистратор) = Тип("ДокументСсылка.ОтчетКомитенту")
							И СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом Тогда
							ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту;
						ИначеЕсли СтрокаОтгрузкиПоставки.Регистратор = СтрокаОплаты.Регистратор
							И ТипЗнч(СтрокаОтгрузкиПоставки.Регистратор) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями")
							И (СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера
								ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом) Тогда
							Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
								ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера;
							Иначе
								ХозяйственнаяОперацияЗачетАванса = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту;
							КонецЕсли;
						Иначе
							ХозяйственнаяОперацияЗачетАванса = ХозяйственныеОперации["ЗачетАванса"];
						КонецЕсли;
						
						Если НеОтгрузка Тогда
							НовСтр_Предоплата_Расход.ХозяйственнаяОперация = СтрокаОтгрузкиПоставки.ХозяйственнаяОперация;
							НовСтр_Предоплата_Расход.НастройкаХозяйственнойОперации = СтрокаОтгрузкиПоставки.НастройкаХозяйственнойОперации;
							НовСтр_Предоплата_Расход.ИдентификаторФинЗаписи = СтрокаОтгрузкиПоставки.ИдентификаторФинЗаписи;
						Иначе
							НовСтр_Предоплата_Расход.ХозяйственнаяОперация = ХозяйственнаяОперацияЗачетАванса;
							ИдентификаторЗачетаАванса = Новый УникальныйИдентификатор;
							НовСтр_Предоплата_Расход.НастройкаХозяйственнойОперации = НастройкиХО["ЗачетОплаты"];
							НовСтр_Предоплата_Расход.ИдентификаторФинЗаписи = ИдентификаторЗачетаАванса;
						КонецЕсли;
						
						НовСтр_Предоплата_Расход.Предоплата     = СуммаСписания;
						НовСтр_Предоплата_Расход.ПредоплатаРегл = СуммаСписанияРегл;
						НовСтр_Предоплата_Расход.ПредоплатаУпр  = СуммаСписанияУпр;
						
						Если НЕ ДвойнаяЗаписьНеНужна Тогда
							//Отражаем приход на сумму долга по курсу предоплаты.
							НовСтр_Долг_Приход = ТаблицаРасчетовПоСрокам.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтр_Долг_Приход, НовСтр_Предоплата_Расход , ,"Предоплата, ПредоплатаУпр, ПредоплатаРегл, КорОбъектРасчетов, КорАналитикаУчетаПоПартнерам");
							
							НовСтр_Долг_Приход.ВидДвижения                   = ВидДвиженияНакопления.Приход;
							НовСтр_Долг_Приход.Период                        = СтрокаОтгрузкиПоставки.Период;
							НовСтр_Долг_Приход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.ДатаВозникновения;
							НовСтр_Долг_Приход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
							НовСтр_Долг_Приход.РасчетныйДокумент             = ?(СтрокаОтгрузкиПоставки.РасчетныйДокумент <> СтрокаОтгрузкиПоставки.Регистратор, СтрокаОтгрузкиПоставки.РасчетныйДокумент, СтрокаОтгрузкиПоставки.Регистратор);
							НовСтр_Долг_Приход.ПорядокЗачета                 = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
							НовСтр_Долг_Приход.ХозяйственнаяОперация         = СтрокаОтгрузкиПоставки.ХозяйственнаяОперация;
							НовСтр_Долг_Приход.НастройкаХозяйственнойОперации = СтрокаОтгрузкиПоставки.НастройкаХозяйственнойОперации;
							НовСтр_Долг_Приход.ИдентификаторФинЗаписи        = СтрокаОтгрузкиПоставки.ИдентификаторФинЗаписи;
							//возврат ДС, статья должна быть
							НовСтр_Долг_Приход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
							НовСтр_Долг_Приход.КорОбъектРасчетов             = СтрокаОтгрузкиПоставки.КорОбъектРасчетов;
							НовСтр_Долг_Приход.КорАналитикаУчетаПоПартнерам  = СтрокаОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам;
							НовСтр_Долг_Приход.СвязанныйДокумент             = Неопределено;
							
							НовСтр_Долг_Приход.Долг                          = НовСтр_Предоплата_Расход.Предоплата;
							
							Если СтрокаОтгрузкиПоставки.РучнойКурсУпр ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса Тогда
								НовСтр_Долг_Приход.ДолгУпр = СуммаСписания(СтрокаОтгрузкиПоставки.КурсУпр, 
									СтрокаОтгрузкиПоставки.СуммаУпр, СтрокаОтгрузкиПоставки.Сумма, СуммаСписания, ТочностьОбратногоПересчетаУпр);
							Иначе
								НовСтр_Долг_Приход.ДолгУпр = НовСтр_Предоплата_Расход.ПредоплатаУпр;
							КонецЕсли;
							Если СтрокаОтгрузкиПоставки.РучнойКурсРегл ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса Тогда
								НовСтр_Долг_Приход.ДолгРегл = СуммаСписания(СтрокаОтгрузкиПоставки.КурсРегл, 
									СтрокаОтгрузкиПоставки.СуммаРегл, СтрокаОтгрузкиПоставки.Сумма, СуммаСписания, ТочностьОбратногоПересчетаРегл);
							Иначе
								НовСтр_Долг_Приход.ДолгРегл = НовСтр_Предоплата_Расход.ПредоплатаРегл;
							КонецЕсли;
							
							//Переносим предоплату на расчетный документ отгрузки.
							НовСтр_Долг_Расход = ТаблицаРасчетовПоСрокам.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтр_Долг_Расход, НовСтр_Долг_Приход);
							НовСтр_Долг_Расход.ВидДвижения                   = ВидДвиженияНакопления.Расход;
							НовСтр_Долг_Расход.ХозяйственнаяОперация         = ХозяйственнаяОперацияЗачетАванса;
							НовСтр_Долг_Расход.НастройкаХозяйственнойОперации = НастройкиХО["ЗачетОплаты"];
							НовСтр_Долг_Расход.ИдентификаторФинЗаписи        = ИдентификаторЗачетаАванса;
							НовСтр_Долг_Расход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
							НовСтр_Долг_Расход.РасчетныйДокумент             = ?(СтрокаОтгрузкиПоставки.РасчетныйДокумент <> СтрокаОтгрузкиПоставки.Регистратор, СтрокаОтгрузкиПоставки.РасчетныйДокумент, СтрокаОтгрузкиПоставки.Регистратор);
							НовСтр_Долг_Расход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.ДатаВозникновения;
							НовСтр_Долг_Расход.ПорядокЗачета                 = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
							НовСтр_Долг_Расход.ДокументРегистратор           = СтрокаОтгрузкиПоставки.Регистратор;
							НовСтр_Долг_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
							НовСтр_Долг_Расход.КорОбъектРасчетов             = СтрокаОтгрузкиПоставки.КорОбъектРасчетов;
							НовСтр_Долг_Расход.КорАналитикаУчетаПоПартнерам  = СтрокаОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам;
							НовСтр_Долг_Расход.Сторно                        = СтрокаОплаты.Сторно ИЛИ СтрокаОтгрузкиПоставки.Сторно;
							
							НовСтр_Долг_Расход.Долг                          = НовСтр_Предоплата_Расход.Предоплата;
							НовСтр_Долг_Расход.ДолгУпр                       = НовСтр_Предоплата_Расход.ПредоплатаУпр;
							НовСтр_Долг_Расход.ДолгРегл                      = НовСтр_Предоплата_Расход.ПредоплатаРегл;
							
						КонецЕсли;
					КонецЕсли;
					
					ПредоплатаРаспределеноРегл = ПредоплатаРаспределеноРегл + ПредоплатаРеглПредв;
					ПредоплатаРаспределеноУпр  = ПредоплатаРаспределеноУпр  + ПредоплатаУпрПредв;
					
					//Уменьшаем строку оплаты на сумму зачета
					СтрокаОплаты.Сумма         = СтрокаОплаты.Сумма     - СуммаСписания;
					СтрокаОплаты.СуммаРегл     = СтрокаОплаты.СуммаРегл - СуммаСписанияРегл;
					СтрокаОплаты.СуммаУпр      = СтрокаОплаты.СуммаУпр  - СуммаСписанияУпр;
					
					Если СтрокаОтгрузкиПоставки.РучнойКурсРегл И НЕ ДвойнаяЗаписьНеНужна
						И СтрокаОтгрузкиПоставки.Сумма <> 0 И СтрокаОтгрузкиПоставки.ПорядокОперации >= ГлобальныеПеременные.ПорядокФакт Тогда
						//Остаток должен быть уменьшен ровно на ту сумму, на которую уже сформирован приход в двойной записи.
						ДолгРеглПредв = НовСтр_Долг_Приход.ДолгРегл;
						//Остаток для переоценки может отличаться от остатка к приходованию.
						СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки = СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки - НовСтр_Долг_Расход.ДолгРегл;
					Иначе
						//Иначе пропорционально уменьшаем остаток строки.
						ДолгРеглПредв = СуммаСписания(СтрокаОтгрузкиПоставки.КурсРегл, 
							СтрокаОтгрузкиПоставки.СуммаРегл, СтрокаОтгрузкиПоставки.Сумма, СуммаСписания, ТочностьОбратногоПересчетаРегл);
						Если СтрокаОтгрузкиПоставки.РучнойКурсРегл Тогда
							СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки  = СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки - Окр(ДолгРеглПредв + ДолгРаспределеноРегл - Окр(ДолгРаспределеноРегл,2),2);
						Иначе
							СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки  = Окр(СтрокаОтгрузкиПоставки.КурсРегл * (СтрокаОтгрузкиПоставки.Сумма - СуммаСписания),2);
						КонецЕсли;
						
					КонецЕсли;
					
					Если СтрокаОтгрузкиПоставки.РучнойКурсУпр И НЕ ДвойнаяЗаписьНеНужна
						И СтрокаОтгрузкиПоставки.Сумма <> 0 И СтрокаОтгрузкиПоставки.ПорядокОперации >= ГлобальныеПеременные.ПорядокФакт Тогда
						ДолгУпрПредв = НовСтр_Долг_Приход.ДолгУпр;
						СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки  = СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки - НовСтр_Долг_Расход.ДолгУпр;
					Иначе
						ДолгУпрПредв = СуммаСписания(СтрокаОтгрузкиПоставки.КурсУпр, 
							СтрокаОтгрузкиПоставки.СуммаУпр, СтрокаОтгрузкиПоставки.Сумма, СуммаСписания, ТочностьОбратногоПересчетаУпр);
						Если СтрокаОтгрузкиПоставки.РучнойКурсУпр Тогда
							СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки  = СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки - Окр(ДолгУпрПредв + ДолгРаспределеноУпр - Окр(ДолгРаспределеноУпр,2),2);
						Иначе
							СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки  = Окр(СтрокаОтгрузкиПоставки.КурсУпр * (СтрокаОтгрузкиПоставки.Сумма - СуммаСписания),2);
						КонецЕсли;
					КонецЕсли;
					
					Если ГлобальныеПеременные.ДанныеНакладных[СтрокаОтгрузкиПоставки.Регистратор] = Неопределено Тогда
						ГлобальныеПеременные.ДанныеНакладных.Вставить(СтрокаОтгрузкиПоставки.Регистратор, СтруктураСумм());
					КонецЕсли;
					
					СтрокаОтгрузкиПоставки.Сумма     = СтрокаОтгрузкиПоставки.Сумма - СуммаСписания;
					
					Если СтрокаОтгрузкиПоставки.РучнойКурсРегл Тогда
						СтрокаОтгрузкиПоставки.СуммаРегл = СтрокаОтгрузкиПоставки.СуммаРегл - Окр(ДолгРеглПредв + ДолгРаспределеноРегл - Окр(ДолгРаспределеноРегл,2),2);
						ДолгРаспределеноРегл = ДолгРаспределеноРегл + ДолгРеглПредв;
					Иначе
						СтрокаОтгрузкиПоставки.СуммаРегл = Окр(СтрокаОтгрузкиПоставки.КурсРегл * СтрокаОтгрузкиПоставки.Сумма,2);
					КонецЕсли;
					
					Если СтрокаОтгрузкиПоставки.РучнойКурсУпр Тогда
						СтрокаОтгрузкиПоставки.СуммаУпр  = СтрокаОтгрузкиПоставки.СуммаУпр - Окр(ДолгУпрПредв + ДолгРаспределеноУпр - Окр(ДолгРаспределеноУпр,2),2);
						ДолгРаспределеноУпр  = ДолгРаспределеноУпр  + ДолгУпрПредв;
					Иначе
						СтрокаОтгрузкиПоставки.СуммаУпр  = Окр(СтрокаОтгрузкиПоставки.КурсУпр * СтрокаОтгрузкиПоставки.Сумма,2);
					КонецЕсли;
					
					ДанныеНакладной                    = ГлобальныеПеременные.ДанныеНакладных[СтрокаОтгрузкиПоставки.Регистратор];
					ДанныеНакладной.СуммаДокумента     = ДанныеНакладной.СуммаДокумента     + СуммаСписания;
					ДанныеНакладной.СуммаДокументаРегл = ДанныеНакладной.СуммаДокументаРегл + СуммаСписанияРегл;
					ДанныеНакладной.СуммаДокументаУпр  = ДанныеНакладной.СуммаДокументаУпр  + СуммаСписанияУпр;
					
					//Уменьшаем график оплаты условной задолженности на сумму списания. Если это остаток, то платеж уже закрыл график.
					Если Не СтрокаОплаты.ЭтоОстаток Тогда
						ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат, СтрокаОплаты, -СуммаСписания);
					КонецЕсли;
					
				КонецЕсли;
				
				ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат,  СтрокаОтгрузкиПоставки, СтрокаОтгрузкиПоставки.КОплате, СтрокаОтгрузкиПоставки.Регистратор);
				
				Если СтрокаОплаты.Сумма = 0 Тогда
					ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат,  СтрокаОплаты, -СтрокаОплаты.КОплате);
					ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки.Период,
						СтрокаОплаты, "Предоплата", -Окр(СтрокаОплаты.СуммаРегл, 2), -Окр(СтрокаОплаты.СуммаУпр, 2));
					Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
				КонецЕсли;
				
				Если СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
					СтрокаОтгрузкиПоставки.ЕстьОстаток = Ложь;
					ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НачалоДня(СтрокаОтгрузкиПоставки.Период),
						СтрокаОтгрузкиПоставки, "Долг", -Окр(СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки, 2), -Окр(СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки, 2));
				КонецЕсли;
				
				//Если порядок зачета по дате платежа - возвращаемся к нужной строке.
				Если ПропускОтгрузкиПоставки <> 0 Тогда
					Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки - ПропускОтгрузкиПоставки;
					ПропускОтгрузкиПоставки = 0;
				ИначеЕсли СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
					Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
				КонецЕсли;
				
			//Отгрузка раньше оплаты.
			Иначе
				//Обычная оплата.
				Если НЕ СтрокаОплаты.ЭтоКорректировка Тогда
					
					//Добавляем строку прихода долга по отгрузке/поставке.
					ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, "ОтгрузкаПоставка", ПланыОплат);
					
					//Списываем план отгрузки если есть.
					Если НЕ СтрокаОтгрузкиПоставки.ПланОтгрузокПоставокСписан Тогда
						СписатьПланОтгрузкиПоставки(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, СтрокаОтгрузкиПоставки, ПланыОтгрузокПоставок);
					КонецЕсли;
					
					Если СтрокаОтгрузкиПоставки.Сумма > 0 И СтрокаОплаты.Сумма > 0 Тогда
						
						//При порядке зачета по датам платежа могут быть документы отгрузки/поставки приобритетнее текущего
						//Поищем их и увеличим пропуск строк отгрузки поставки
						Если ПропускОтгрузкиПоставки = 0 И ПорядокЗачетаПоДатеПлатежа 
							И Индексы.ИндексОтгрузкиПоставки < ЗаписейОтгрузкиПоставки - 1 Тогда
							
							ПорядкиЗачета = РасчетыОтгрузкиПоставки.Скопировать(Новый Структура("ЕстьОстаток", ИСТИНА),"ПорядокЗачетаПоДатеПлатежа, ПорядокОперации");
							ПорядкиЗачета.Сортировать("ПорядокЗачетаПоДатеПлатежа ВОЗР");
							МинимальныйПорядок = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
							Для Каждого СтрокаПорядка Из ПорядкиЗачета Цикл
								Если СтрокаПорядка.ПорядокОперации < СтрокаОплаты.ПорядокОперации Тогда
									МинимальныйПорядок = СтрокаПорядка.ПорядокЗачетаПоДатеПлатежа;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
							СтрокаПорядка = РасчетыОтгрузкиПоставки.НайтиСтроки(Новый Структура("ЕстьОстаток, ПорядокЗачетаПоДатеПлатежа", Истина, МинимальныйПорядок))[0];
							Индекс = РасчетыОтгрузкиПоставки.Индекс(СтрокаПорядка);
							
							Если Индекс <> Индексы.ИндексОтгрузкиПоставки Тогда
								ПропускОтгрузкиПоставки = Индекс - Индексы.ИндексОтгрузкиПоставки;
								Индексы.ИндексОтгрузкиПоставки = Индекс;
								Продолжить;
							КонецЕсли;
							
						КонецЕсли;
						
						//Переоценка накладной до даты оплаты.
						Если НужнаПереоценка Тогда
							ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, РасчетыОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Регистратор, СтрокаОплаты);
						КонецЕсли;
						
						//Если расчетный документ накладная изменился, то сбрасываем служебные реквизиты распределения копеек.
						Если ТекущийДокументОтгрузкиПоставки <> СтрокаОтгрузкиПоставки.РасчетныйДокумент Тогда
							ДолгРаспределеноРегл       = 0;
							ДолгРаспределеноУпр        = 0;
							ТекущийДокументОтгрузкиПоставки = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
						КонецЕсли;
						
						//Добавляем строку погашения задолженности.
						СуммаСписания = Мин(СтрокаОплаты.Сумма, СтрокаОтгрузкиПоставки.Сумма);
						
						//Списываем долг по курсу аванса.
						Если СтрокаОплаты.Сумма = СуммаСписания Тогда
							ДолгРегл = СтрокаОплаты.СуммаРегл;
							ДолгУпр = СтрокаОплаты.СуммаУпр;
						Иначе
							ДолгРегл = Окр(СтрокаОплаты.СуммаРегл / СтрокаОплаты.Сумма, ГлобальныеПеременные.РазрядностьКурсаРегл) * СуммаСписания;
							Если ВалютаРегламентированногоУчета = ВалютаУправленческогоУчета Тогда
								ДолгУпр  = Окр(СтрокаОплаты.СуммаУпр / СтрокаОплаты.Сумма, ГлобальныеПеременные.РазрядностьКурсаРегл) * СуммаСписания;
							Иначе
								ДолгУпр  = Окр(СтрокаОплаты.СуммаУпр / СтрокаОплаты.Сумма, ГлобальныеПеременные.РазрядностьКурсаУпр) * СуммаСписания;
							КонецЕсли;
						КонецЕсли;
						
						СуммаСписанияРегл = Окр(ДолгРегл + ДолгРаспределеноРегл - Окр(ДолгРаспределеноРегл,2),2);
						СуммаСписанияУпр = Окр(ДолгУпр + ДолгРаспределеноУпр - Окр(ДолгРаспределеноУпр,2),2);
						
						Если СтрокаОплаты.ПорядокОперации >= ГлобальныеПеременные.ПорядокФакт Тогда
						
							НовСтр_Долг_Расход = ТаблицаРасчетовПоСрокам.Добавить();
							НовСтр_Долг_Расход.ВидДвижения                   = ВидДвиженияНакопления.Расход;
							НовСтр_Долг_Расход.ДокументРегистратор           = СтрокаОплаты.Регистратор;
							//Взаимозачет считаем взаимозачетом
							Если СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности
								ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера
								ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом
								ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами
								ИЛИ СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносАванса Тогда
								НовСтр_Долг_Расход.ХозяйственнаяОперация         = СтрокаОплаты.ХозяйственнаяОперация;
							Иначе
								НовСтр_Долг_Расход.ХозяйственнаяОперация         = ХозяйственныеОперации["ПогашениеЗадолженности"];
							КонецЕсли;
							НовСтр_Долг_Расход.ВалютаДокумента               = СтрокаОплаты.ВалютаДокумента;
							НовСтр_Долг_Расход.Период                        = СтрокаОплаты.Период;
							НовСтр_Долг_Расход.ПорядокОперации               = СтрокаОплаты.ПорядокОперации;
							НовСтр_Долг_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОплаты.СтатьяДвиженияДенежныхСредств;
							НовСтр_Долг_Расход.НастройкаХозяйственнойОперации = СтрокаОплаты.НастройкаХозяйственнойОперации;
							НовСтр_Долг_Расход.ИдентификаторФинЗаписи        = СтрокаОплаты.ИдентификаторФинЗаписи;
							НовСтр_Долг_Расход.РасчетныйДокумент             = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
							НовСтр_Долг_Расход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.ДатаВозникновения;
							НовСтр_Долг_Расход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
							НовСтр_Долг_Расход.ПорядокЗачета                 = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
							НовСтр_Долг_Расход.КорОбъектРасчетов             = ?(ЗначениеЗаполнено(СтрокаОтгрузкиПоставки.КорОбъектРасчетов), СтрокаОтгрузкиПоставки.КорОбъектРасчетов, СтрокаОплаты.КорОбъектРасчетов);
							НовСтр_Долг_Расход.КорАналитикаУчетаПоПартнерам  = ?(ЗначениеЗаполнено(СтрокаОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам), СтрокаОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам, СтрокаОплаты.КорАналитикаУчетаПоПартнерам);
							НовСтр_Долг_Расход.Сторно                        = СтрокаОплаты.Сторно;
							
							НовСтр_Долг_Расход.Долг     = СуммаСписания;
							НовСтр_Долг_Расход.ДолгРегл = СуммаСписанияРегл;
							НовСтр_Долг_Расход.ДолгУпр  = СуммаСписанияУпр;
						
						КонецЕсли;
						
						ДолгРаспределеноРегл = ДолгРаспределеноРегл + ДолгРегл;
						ДолгРаспределеноУпр  = ДолгРаспределеноУпр + ДолгУпр;
						
						//Уменьшаем строку оплаты на зачтенную сумму.
						СтрокаОплаты.Сумма       = СтрокаОплаты.Сумма     - СуммаСписания;
						СтрокаОплаты.СуммаРегл   = СтрокаОплаты.СуммаРегл - СуммаСписанияРегл;
						СтрокаОплаты.СуммаУпр    = СтрокаОплаты.СуммаУпр  - СуммаСписанияУпр;
						
						//Уменьшаем строку отгрузки/поставки на зачтенную сумму.
						СтрокаОтгрузкиПоставки.Сумма     = СтрокаОтгрузкиПоставки.Сумма     - СуммаСписания;
						СтрокаОтгрузкиПоставки.СуммаРегл = СтрокаОтгрузкиПоставки.СуммаРегл - СуммаСписанияРегл;
						СтрокаОтгрузкиПоставки.СуммаУпр  = СтрокаОтгрузкиПоставки.СуммаУпр  - СуммаСписанияУпр;
						СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки = СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки - СуммаСписанияРегл;
						СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки = СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки - СуммаСписанияУпр;
						СтрокаОтгрузкиПоставки.КОплате   = СтрокаОтгрузкиПоставки.КОплате     - СуммаСписания;
						
						//Закрываем план оплаты накладной, которую зачли.
						ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат,  СтрокаОплаты, -Мин(СуммаСписания,СтрокаОплаты.КОплате), СтрокаОтгрузкиПоставки.РасчетныйДокумент);
						
					КонецЕсли;
					
					Если СтрокаОплаты.Сумма = 0 Тогда
						ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат,  СтрокаОплаты, -СтрокаОплаты.КОплате);
						Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
					КонецЕсли;
					
					Если СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
						
						Если СтрокаОтгрузкиПоставки.КОплате > 0 Тогда
							ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат, СтрокаОтгрузкиПоставки, СтрокаОтгрузкиПоставки.КОплате, СтрокаОтгрузкиПоставки.РасчетныйДокумент);
						КонецЕсли;
						
						СтрокаОтгрузкиПоставки.ЕстьОстаток = ЛОЖЬ;
						
						ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НачалоДня(СтрокаОплаты.Период),
							СтрокаОтгрузкиПоставки, "Долг", -Окр(СтрокаОтгрузкиПоставки.СуммаРеглДляПереоценки, 2), -Окр(СтрокаОтгрузкиПоставки.СуммаУпрДляПереоценки, 2));
					КонецЕсли;
					
					//Если порядок зачета по дате платежа - возвращаемся к нужной строке.
					Если ПропускОтгрузкиПоставки <> 0 Тогда
						Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки - ПропускОтгрузкиПоставки;
						ПропускОтгрузкиПоставки = 0;
					ИначеЕсли СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
						Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
					КонецЕсли;
					
				//Корректировка накладной в минус.
				Иначе
					
					ОстаткиСвязанногоДокумента = РасчетыОтгрузкиПоставки.НайтиСтроки(Новый Структура("ЕстьОстаток, Регистратор", ИСТИНА, СтрокаОплаты.СвязанныйДокумент));
					
					Для Каждого СтрокаОстаткаСвязанногоДокумента Из ОстаткиСвязанногоДокумента Цикл
						Если СтрокаОплаты.ПорядокОперации < СтрокаОстаткаСвязанногоДокумента.ПорядокОперации 
							ИЛИ СтрокаОстаткаСвязанногоДокумента.Сумма = 0 Тогда
							Продолжить;
						Иначе //Если это корректировка и накладная еще не оплачена полностью, то расчетным документом должна являться накладная.
						
							//Добавляем строку прихода по долгу для сторнируемой накладной.
							ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОстаткаСвязанногоДокумента, "ОтгрузкаПоставка", ПланыОплат);
							
							Если СтрокаОплаты.Сумма > 0 И СтрокаОстаткаСвязанногоДокумента.Сумма > 0 Тогда
							
								//Переоценка накладной до даты оплаты.
								Если НужнаПереоценка И НачалоМесяца(СтрокаОстаткаСвязанногоДокумента.ДатаВозникновения) < НачалоМесяца(СтрокаОплаты.ДатаВозникновения) Тогда
									ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, РасчетыОтгрузкиПоставки, СтрокаОстаткаСвязанногоДокумента.Регистратор, СтрокаОплаты, Ложь);
								КонецЕсли;
								
								СуммаСторно  = Мин(СтрокаОстаткаСвязанногоДокумента.Сумма, СтрокаОплаты.Сумма);
								
								Если СтрокаОплаты.РучнойКурсРегл Тогда
									СуммаСторноРегл = Окр(СуммаСторно * СтрокаОплаты.СуммаРегл / СтрокаОплаты.Сумма,2);
								Иначе
									СуммаСторноРегл = Окр(СуммаСторно * 
										(ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокументаРегл 
											/ ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокумента),2);
								КонецЕсли;
										
								Если СтрокаОплаты.РучнойКурсУпр Тогда
									СуммаСторноУпр = Окр(СуммаСторно * СтрокаОплаты.СуммаУпр / СтрокаОплаты.Сумма,2);
								Иначе
									СуммаСторноУпр = Окр(СуммаСторно * 
										(ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокументаУпр 
											/ ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокумента),2);
								КонецЕсли;
								
								Если СтрокаОплаты.ПорядокОперации >= ГлобальныеПеременные.ПорядокФакт Тогда
								
									НовСтр_Сторно = ТаблицаРасчетовПоСрокам.Добавить();
									НовСтр_Сторно.ВидДвижения = ВидДвиженияНакопления.Расход;
									
									НовСтр_Сторно.ДокументРегистратор   = СтрокаОплаты.Регистратор;
									НовСтр_Сторно.РасчетныйДокумент     = СтрокаОстаткаСвязанногоДокумента.РасчетныйДокумент;
									НовСтр_Сторно.ХозяйственнаяОперация = СтрокаОплаты.ХозяйственнаяОперация;
									НовСтр_Сторно.ВалютаДокумента       = СтрокаОплаты.ВалютаДокумента;
									НовСтр_Сторно.СвязанныйДокумент     = СтрокаОплаты.СвязанныйДокумент;
									
									НовСтр_Сторно.Долг     = СуммаСторно;
									НовСтр_Сторно.ДолгРегл = СуммаСторноРегл;
									НовСтр_Сторно.ДолгУпр  = СуммаСторноУпр;
									
									НовСтр_Сторно.Период                   = СтрокаОплаты.Период;
									НовСтр_Сторно.ДатаПлановогоПогашения   = СтрокаОстаткаСвязанногоДокумента.ДатаПлановогоПогашения;
									НовСтр_Сторно.ДатаВозникновения        = СтрокаОстаткаСвязанногоДокумента.ДатаВозникновения;
									НовСтр_Сторно.ПорядокЗачета            = СтрокаОстаткаСвязанногоДокумента.ПорядокЗачетаПоДатеПлатежа;
									НовСтр_Сторно.ПорядокОперации          = СтрокаОплаты.ПорядокОперации;
									НовСтр_Сторно.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
									НовСтр_Сторно.НастройкаХозяйственнойОперации = СтрокаОплаты.НастройкаХозяйственнойОперации;
									НовСтр_Сторно.ИдентификаторФинЗаписи   = СтрокаОплаты.ИдентификаторФинЗаписи;
									НовСтр_Сторно.КорОбъектРасчетов             = СтрокаОстаткаСвязанногоДокумента.КорОбъектРасчетов;
									НовСтр_Сторно.КорАналитикаУчетаПоПартнерам  = СтрокаОстаткаСвязанногоДокумента.КорАналитикаУчетаПоПартнерам;
									
								КонецЕсли;
								
								//Уменьшаем строку оплаты на сумму сторно.
								СтрокаОплаты.Сумма     = СтрокаОплаты.Сумма     - СуммаСторно;
								СтрокаОплаты.СуммаРегл = СтрокаОплаты.СуммаРегл - СуммаСторноРегл;
								СтрокаОплаты.СуммаУпр  = СтрокаОплаты.СуммаУпр  - СуммаСторноУпр;
								
								//Уменьшаем строку отгрузки на сумму сторно.
								СтрокаОстаткаСвязанногоДокумента.Сумма                  = СтрокаОстаткаСвязанногоДокумента.Сумма     - СуммаСторно;
								СтрокаОстаткаСвязанногоДокумента.СуммаРегл              = СтрокаОстаткаСвязанногоДокумента.СуммаРегл - СуммаСторноРегл; 
								СтрокаОстаткаСвязанногоДокумента.СуммаУпр               = СтрокаОстаткаСвязанногоДокумента.СуммаУпр  - СуммаСторноУпр;
								СтрокаОстаткаСвязанногоДокумента.СуммаРеглДляПереоценки = СтрокаОстаткаСвязанногоДокумента.СуммаРеглДляПереоценки - СуммаСторноРегл;
								СтрокаОстаткаСвязанногоДокумента.СуммаУпрДляПереоценки  = СтрокаОстаткаСвязанногоДокумента.СуммаУпрДляПереоценки - СуммаСторноУпр;
								СтрокаОстаткаСвязанногоДокумента.КОплате                = СтрокаОстаткаСвязанногоДокумента.КОплате     - СуммаСторно;
								
								//Уменьшаем график оплаты накладной, если есть.
								ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат, СтрокаОплаты, -Мин(СуммаСторно,СтрокаОплаты.КОплате), СтрокаОстаткаСвязанногоДокумента.РасчетныйДокумент);
								// В документ план надо писать только заказ, т.к. иначе при разных последовательностях проведения схемы "заказ оплата сторно оплата" по разному зачитываются документы.
								
								Если СтрокаОплаты.Сумма <> 0 Тогда
									//Остатка для сторно по реализации больше нет, строка сторно становится обычной оплатой.
									ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОплаты);
								КонецЕсли;
								
								Если СтрокаОстаткаСвязанногоДокумента.Сумма = 0 Тогда
									ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НачалоДня(СтрокаОплаты.Период),
										СтрокаОстаткаСвязанногоДокумента, "Долг", -Окр(СтрокаОстаткаСвязанногоДокумента.СуммаРеглДляПереоценки, 2), -Окр(СтрокаОстаткаСвязанногоДокумента.СуммаУпрДляПереоценки, 2));
										СтрокаОстаткаСвязанногоДокумента.СуммаРеглДляПереоценки = 0;
										СтрокаОстаткаСвязанногоДокумента.СуммаУпрДляПереоценки = 0;
								КонецЕсли;
								
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если СтрокаОплаты.Сумма = 0 Тогда
						ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат,  СтрокаОплаты, -СтрокаОплаты.КОплате, СтрокаОплаты.СвязанныйДокумент); ////
						Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
					Иначе
						ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОплаты);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		//Оплаты распределены, остальные отгрузки в приход.
		ИначеЕсли Индексы.ИндексОплаты = ЗаписейОплаты И Индексы.ИндексОтгрузкиПоставки <= ЗаписейОтгрузкиПоставки - 1 Тогда 
			
			СтрокаОтгрузкиПоставки = РасчетыОтгрузкиПоставки[Индексы.ИндексОтгрузкиПоставки];
			ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, "ОтгрузкаПоставка", ПланыОплат);
			
			Если НЕ СтрокаОтгрузкиПоставки.ПланОтгрузокПоставокСписан Тогда
				СписатьПланОтгрузкиПоставки(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, СтрокаОтгрузкиПоставки, ПланыОтгрузокПоставок);
			КонецЕсли;
			
			Если НужнаПереоценка Тогда
				ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, РасчетыОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Регистратор);
			КонецЕсли;
			
			Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
			
		//Отгрузки распределены, остальные оплаты в приход.
		ИначеЕсли Индексы.ИндексОплаты <= ЗаписейОплаты - 1 И Индексы.ИндексОтгрузкиПоставки = ЗаписейОтгрузкиПоставки Тогда
			
			СтрокаОплаты = РасчетыОплаты[Индексы.ИндексОплаты];
			ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОплаты, "Оплата");
			
			Если НЕ СтрокаОплаты.ЭтоОстаток Тогда
				ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат, СтрокаОплаты, -СтрокаОплаты.КОплате);
			КонецЕсли;
			
			Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ПланыОплат
	
	Если ГлобальныеПеременные.РассчитыватьПланы И ПланыОплат.Количество() > 0 Тогда
		
		ТипыЗаказов = СписокТиповРегистраторовПланов();
		
		ПланыОплат.Свернуть("Регистратор, ДокументПлан ,ВариантОплаты, Период, ДатаВозникновения, ДатаПлановогоПогашения, ПорядокОперации, ПорядокЗачетаПоДатеПлатежа, ХозяйственнаяОперация, ПриходДобавлен, ЕстьДокументПлан","КОплате, Оплачено");
		ПланыОплат.Сортировать("ПорядокОперации ВОЗР, ПорядокЗачетаПоДатеПлатежа ВОЗР, ЕстьДокументПлан УБЫВ");
		ПланыОплат.Индексы.Добавить("Регистратор");
		
		//С учетом документа плана
		
		сч = 0;
		РаспределеноСтрок = 0;
		ПриходЭтоКОплате = Истина;
		СтрокиКУдалению = Новый Массив;
		Пока сч < ПланыОплат.Количество() Цикл
			
			Если сч > ПланыОплат.Количество()-1 Тогда
				Прервать;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПланыОплат[сч].ДокументПлан) Тогда
				сч = сч + 1;
				Продолжить;
			КонецЕсли;
			
			Если РасчетыПоДоговору ИЛИ ТипыЗаказов.НайтиПоЗначению(ТипЗнч(ПланыОплат[сч].ДокументПлан)) = Неопределено Тогда
			
				СвязанныеСтроки = ПланыОплат.НайтиСтроки(Новый Структура("Регистратор", ПланыОплат[сч].ДокументПлан));
				Для Каждого СвязаннаяСтрока Из СвязанныеСтроки Цикл
				
					Если (СвязаннаяСтрока.КОплате > 0 И ПланыОплат[сч].Оплачено > 0
							ИЛИ ПланыОплат[сч].КОплате > 0 И СвязаннаяСтрока.Оплачено > 0)
						И СвязаннаяСтрока.ПорядокОперации < ПланыОплат[сч].ПорядокОперации
							ИЛИ СвязаннаяСтрока.ПорядокОперации = ПланыОплат[сч].ПорядокОперации Тогда
						
						ПриходЭтоКОплате = СвязаннаяСтрока.КОплате > 0;
						
						Если СвязаннаяСтрока.КОплате > 0 Тогда
							СуммаСписанияКОплате = Мин(СвязаннаяСтрока.КОплате, ПланыОплат[сч].Оплачено);
							СуммаСписанияОплачено = 0;
							ХозОперацияПланирования =  ГлобальныеПеременные.ХозяйственныеОперации["Планирование"];
						Иначе
							СуммаСписанияКОплате = 0;
							СуммаСписанияОплачено = Мин(СвязаннаяСтрока.Оплачено, ПланыОплат[сч].КОплате);
							ХозОперацияПланирования = СвязаннаяСтрока.ХозяйственнаяОперация;
						КонецЕсли;
						
						Если СвязаннаяСтрока.Регистратор <> ПланыОплат[сч].Регистратор Тогда
							//Приход по плану и расход по плану
							Если СвязаннаяСтрока.ПорядокОперации <= ПланыОплат[сч].ПорядокОперации  Тогда
								ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, СвязаннаяСтрока, ХозОперацияПланирования, СуммаСписанияКОплате, СуммаСписанияОплачено);
								ДобавитьРасходПланаОплат(ТаблицаПланОплат, СвязаннаяСтрока, ПланыОплат[сч], СуммаСписанияКОплате, СуммаСписанияОплачено, Истина);
							Иначе
								ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, ПланыОплат[сч], ПланыОплат[сч].ХозяйственнаяОперация, СуммаСписанияКОплате, СуммаСписанияОплачено);
								ДобавитьРасходПланаОплат(ТаблицаПланОплат, ПланыОплат[сч], СвязаннаяСтрока, СуммаСписанияКОплате, СуммаСписанияОплачено);
							КонецЕсли;
						КонецЕсли;
						
						Если СвязаннаяСтрока.КОплате > 0 Тогда
							СвязаннаяСтрока.КОплате = СвязаннаяСтрока.КОплате - СуммаСписанияКОплате;
							ПланыОплат[сч].Оплачено = ПланыОплат[сч].Оплачено - СуммаСписанияКОплате;
						Иначе
							ПланыОплат[сч].КОплате = ПланыОплат[сч].КОплате - СуммаСписанияОплачено;
							СвязаннаяСтрока.Оплачено = СвязаннаяСтрока.Оплачено - СуммаСписанияОплачено;
						КонецЕсли;
						
						Если СвязаннаяСтрока.КОплате = 0 И СвязаннаяСтрока.Оплачено = 0 Тогда
							СтрокиКУдалению.Добавить(СвязаннаяСтрока);
						КонецЕсли;
						
						Если ПланыОплат[сч].КОплате = 0 И ПланыОплат[сч].Оплачено = 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				//Если накладная проведена на сумму больше заказа то на ней образется Оплачено одновременно с КОплате, надо свернуть эти остатки.
				сч2 = сч+1;
				Пока сч2 < ПланыОплат.Количество()
					И ПланыОплат[сч].Оплачено > 0
					И ПланыОплат[сч2].Регистратор = ПланыОплат[сч].Регистратор Цикл
					
					Если ПланыОплат[сч2].КОплате > 0 Тогда
						СуммаСписания = Мин(ПланыОплат[сч2].КОплате,ПланыОплат[сч].Оплачено);
						ПланыОплат[сч2].КОплате = ПланыОплат[сч2].КОплате - СуммаСписания;
						ПланыОплат[сч].Оплачено = ПланыОплат[сч].Оплачено - СуммаСписания;
					КонецЕсли;
					
					Если ПланыОплат[сч2].КОплате = 0 И ПланыОплат[сч2].Оплачено = 0 Тогда
						ПланыОплат.Удалить(сч2)
					Иначе
						сч2 = сч2 +1;
					КонецЕсли;
					
				КонецЦикла;
			
			КонецЕсли;
			
			Если ПланыОплат[сч].КОплате = 0 И ПланыОплат[сч].Оплачено = 0 Тогда
				ПланыОплат.Удалить(сч);
			Иначе
				сч = сч + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Строка Из СтрокиКУдалению Цикл
			Если ПланыОплат.Индекс(Строка) <> -1 Тогда
				ПланыОплат.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		//Без учета документа плана
		
		счПриход = 0;
		счРасход = 0;
		РаспределеноСтрок = 0;
		ПриходЭтоКОплате = Истина;
		Пока счПриход < ПланыОплат.Количество() ИЛИ счРасход < ПланыОплат.Количество() Цикл
			
			Если счРасход > ПланыОплат.Количество()-1 Тогда
				Если РаспределеноСтрок = 0 Тогда
					Прервать;
				Иначе
					РаспределеноСтрок = 0;
				КонецЕсли;
				счПриход = счПриход + 1;
				счРасход = 0;
			КонецЕсли;
			
			Если счПриход > ПланыОплат.Количество()-1 Тогда
				Прервать;
			КонецЕсли;
			
			Если ПланыОплат[счПриход].КОплате > 0 И ПланыОплат[счРасход].Оплачено > 0
				ИЛИ ПланыОплат[счРасход].КОплате > 0 И ПланыОплат[счПриход].Оплачено > 0 Тогда
				РаспределеноСтрок = РаспределеноСтрок + 1;
				ПриходЭтоКОплате = ПланыОплат[счПриход].КОплате > 0;
				
				Если ПланыОплат[счПриход].КОплате > 0 Тогда
					СуммаСписанияКОплате = Мин(ПланыОплат[счПриход].КОплате, ПланыОплат[счРасход].Оплачено);
					СуммаСписанияОплачено = 0;
					ХозОперацияПланирования =  ГлобальныеПеременные.ХозяйственныеОперации["Планирование"];
				Иначе
					СуммаСписанияКОплате = 0;
					СуммаСписанияОплачено = Мин(ПланыОплат[счПриход].Оплачено, ПланыОплат[счРасход].КОплате);
					ХозОперацияПланирования =  ПланыОплат[счПриход].ХозяйственнаяОперация;
				КонецЕсли;
				
				Если ПланыОплат[счПриход].Регистратор <> ПланыОплат[счРасход].Регистратор Тогда
					//Приход по плану и расход по плану
					Если ПланыОплат[счПриход].ПорядокОперации <= ПланыОплат[счРасход].ПорядокОперации  Тогда
						ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, ПланыОплат[счПриход], ХозОперацияПланирования, СуммаСписанияКОплате, СуммаСписанияОплачено);
						ДобавитьРасходПланаОплат(ТаблицаПланОплат, ПланыОплат[счПриход], ПланыОплат[счРасход], СуммаСписанияКОплате, СуммаСписанияОплачено);
					Иначе
						ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, ПланыОплат[счРасход], ПланыОплат[счРасход].ХозяйственнаяОперация, СуммаСписанияКОплате, СуммаСписанияОплачено);
						ДобавитьРасходПланаОплат(ТаблицаПланОплат, ПланыОплат[счРасход], ПланыОплат[счПриход], СуммаСписанияКОплате, СуммаСписанияОплачено);
					КонецЕсли;
				КонецЕсли;
				
				Если ПланыОплат[счПриход].КОплате > 0 Тогда
					ПланыОплат[счПриход].КОплате = ПланыОплат[счПриход].КОплате - СуммаСписанияКОплате;
					ПланыОплат[счРасход].Оплачено = ПланыОплат[счРасход].Оплачено - СуммаСписанияКОплате;
				Иначе
					ПланыОплат[счРасход].КОплате = ПланыОплат[счРасход].КОплате - СуммаСписанияОплачено;
					ПланыОплат[счПриход].Оплачено = ПланыОплат[счПриход].Оплачено - СуммаСписанияОплачено;
				КонецЕсли;
				
				Если ПланыОплат[счРасход].КОплате = 0 И ПланыОплат[счРасход].Оплачено = 0 Тогда
					ПланыОплат.Удалить(счРасход);
				КонецЕсли;
				
				Если ПланыОплат[счПриход].КОплате = 0 И ПланыОплат[счПриход].Оплачено = 0 Тогда
					ПланыОплат.Удалить(счПриход);
					//Если тип прихода меняется, сбрасываем счетчик Расхода.
					Если ПриходЭтоКОплате И счПриход < ПланыОплат.Количество()
						И ПланыОплат[счПриход].Оплачено > 0 И счРасход <> 0 Тогда
						счРасход = 0;
					ИначеЕсли счРасход > 0 Тогда
						счРасход = счРасход - 1;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ПланыОплат[счПриход].КОплате = 0 И ПланыОплат[счПриход].Оплачено = 0 Тогда
				ПланыОплат.Удалить(счПриход);
				Если ПриходЭтоКОплате И счПриход < ПланыОплат.Количество() И ПланыОплат[счПриход].Оплачено > 0 И счРасход <> 0 Тогда
					счРасход = 0;
				ИначеЕсли счРасход > 0 Тогда
					счРасход = счРасход - 1;
				КонецЕсли;
			Иначе
				счРасход = счРасход + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		//Нераспределенные остатки
		счПриход = 0;
		счРасход = 0;
		
		Пока счПриход < ПланыОплат.Количество() Цикл
			Если ПланыОплат[счПриход].КОплате > 0 Тогда
				ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, ПланыОплат[счПриход], ГлобальныеПеременные.ХозяйственныеОперации["Планирование"], ПланыОплат[счПриход].КОплате);
			КонецЕсли;
			счПриход = счПриход + 1;
		КонецЦикла;
		
		Пока счРасход < ПланыОплат.Количество() Цикл
			Если ПланыОплат[счРасход].Оплачено > 0 Тогда
				ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, ПланыОплат[счРасход], ПланыОплат[счРасход].ХозяйственнаяОперация, 0, ПланыОплат[счРасход].Оплачено);
			КонецЕсли;
			счРасход = счРасход + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ФиксацияРезультатов
	
	НаборЗаписейПоСрокам = РегистрыНакопления[ИмяРегистраРасчетов].СоздатьНаборЗаписей();
	НаборЗаписейПланОплат = РегистрыНакопления[ИмяРегистраПланаОплат].СоздатьНаборЗаписей();
	НаборЗаписейПланОтгрузокПоставок = РегистрыНакопления[ИмяРегистраПланаОтгрузкиПоставки].СоздатьНаборЗаписей();
	
	ТаблицаРасчетовПоСрокам.Свернуть("Период, Регистратор, ВидДвижения, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, ДокументРегистратор,
			|РасчетныйДокумент, ХозяйственнаяОперация, ДатаПлановогоПогашения, ДатаВозникновения, ПорядокЗачета, ПорядокОперации,
			|ВалютаДокумента, СвязанныйДокумент, СтатьяДвиженияДенежныхСредств, КорОбъектРасчетов, КорАналитикаУчетаПоПартнерам, Сторно,
			|НастройкаХозяйственнойОперации,ИдентификаторФинЗаписи,ЗаписьДоНачалаРасчета",
			"Предоплата, ПредоплатаРегл, ПредоплатаУпр, Долг, ДолгРегл, ДолгУпр");
	
	ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
		ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
		ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
		ТаблицаРасчетовПоСрокам.Индексы.Добавить("Регистратор");
	
	Если ОсновныеПараметры.Свойство("ДополнительныеСвойстваПроведения") 
			И ОсновныеПараметры.ДополнительныеСвойстваПроведения <> Неопределено
			И ОсновныеПараметры.ДополнительныеСвойстваПроведения.Свойство("МенеджерВременныхТаблиц") Тогда
		
		// Передадим менеджер временных таблиц в набор записей по срокам для формирования таблиц изменений при записи.
		НаборЗаписейПоСрокам.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц",
			ОсновныеПараметры.ДополнительныеСвойстваПроведения.МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
	Если НЕ ОсновныеПараметры.НачальноеЗаполнение И ОсновныеПараметры.ЗаписыватьИзменения Тогда
		
		Если ГлобальныеПеременные.ПорядокФакт <> "" Тогда
			НаборЗаписейПоСрокам.ДополнительныеСвойства.Вставить("Порядок",ГлобальныеПеременные.ПорядокФакт );
		КонецЕсли;
		
		ПодготовитьДанныеДляЗаписи(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НаборЗаписейПоСрокам);
		
		#Область ПроверкаИзмененийРегистров
		
		ТаблицаИзменений = Неопределено;
		
		Если ОсновныеПараметры.Свойство("ДополнительныеСвойстваПроведения") И ОсновныеПараметры.ДополнительныеСвойстваПроведения <> Неопределено Тогда
			Запрос.Текст = "
			|ВЫБРАТЬ *
			|ПОМЕСТИТЬ ВтДвиженияПосле
			|ИЗ  &ТаблицаПоСрокам КАК ДвиженияПосле
			|;
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Период                        КАК Период,
			|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
			|	ВложенныйЗапрос.ОбъектРасчетов                КАК ОбъектРасчетов,
			|	ВложенныйЗапрос.Валюта                        КАК Валюта,
			|	ВложенныйЗапрос.РасчетныйДокумент             КАК РасчетныйДокумент,
			|	ВложенныйЗапрос.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
			|	ВложенныйЗапрос.ДатаВозникновения             КАК ДатаВозникновения,
			|	
			|	ВложенныйЗапрос.ПорядокЗачета                 КАК ПорядокЗачета,
			|	ВложенныйЗапрос.ПорядокОперации               КАК ПорядокОперации,
			|	ВложенныйЗапрос.ВалютаДокумента               КАК ВалютаДокумента,
			|	ВложенныйЗапрос.СвязанныйДокумент             КАК СвязанныйДокумент,
			|	ВложенныйЗапрос.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ВложенныйЗапрос.КорОбъектРасчетов             КАК КорОбъектРасчетов,
			|	ВложенныйЗапрос.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
			|	ВложенныйЗапрос.ДокументРегистратор           КАК ДокументРегистратор,
			|	ВложенныйЗапрос.КорАналитикаУчетаПоПартнерам  КАК КорАналитикаУчетаПоПартнерам,
			|	
			|	СУММА(ВложенныйЗапрос.Предоплата)                    КАК Предоплата,
			|	СУММА(ВложенныйЗапрос.ПредоплатаРегл)                КАК ПредоплатаРегл,
			|	СУММА(ВложенныйЗапрос.ПредоплатаУпр)                 КАК ПредоплатаУпр,
			|	СУММА(ВложенныйЗапрос.Долг)                          КАК Долг,
			|	СУММА(ВложенныйЗапрос.ДолгРегл)                      КАК ДолгРегл,
			|	СУММА(ВложенныйЗапрос.ДолгУпр)                       КАК ДолгУпр
			|ПОМЕСТИТЬ ТаблицаИзмененийРасчетыСКлиентамиПоСрокам
			|ИЗ
			|	(ВЫБРАТЬ
			|		РасчетыПоСрокам.Период                        КАК Период,
			|		РасчетыПоСрокам.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
			|		РасчетыПоСрокам.ОбъектРасчетов                КАК ОбъектРасчетов,
			|		РасчетыПоСрокам.Валюта                        КАК Валюта,
			|		РасчетыПоСрокам.РасчетныйДокумент             КАК РасчетныйДокумент,
			|		РасчетыПоСрокам.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
			|		РасчетыПоСрокам.ДатаВозникновения             КАК ДатаВозникновения,
			|		
			|		РасчетыПоСрокам.ПорядокЗачета                 КАК ПорядокЗачета,
			|		РасчетыПоСрокам.ПорядокОперации               КАК ПорядокОперации,
			|		РасчетыПоСрокам.ВалютаДокумента               КАК ВалютаДокумента,
			|		РасчетыПоСрокам.СвязанныйДокумент             КАК СвязанныйДокумент,
			|		РасчетыПоСрокам.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|		РасчетыПоСрокам.КорОбъектРасчетов             КАК КорОбъектРасчетов,
			|		РасчетыПоСрокам.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
			|		РасчетыПоСрокам.ДокументРегистратор           КАК ДокументРегистратор,
			|		РасчетыПоСрокам.КорАналитикаУчетаПоПартнерам  КАК КорАналитикаУчетаПоПартнерам,
			|		
			|		РасчетыПоСрокам.Предоплата                    КАК Предоплата,
			|		РасчетыПоСрокам.ПредоплатаРегл                КАК ПредоплатаРегл,
			|		РасчетыПоСрокам.ПредоплатаУпр                 КАК ПредоплатаУпр,
			|		РасчетыПоСрокам.Долг                          КАК Долг,
			|		РасчетыПоСрокам.ДолгРегл                      КАК ДолгРегл,
			|		РасчетыПоСрокам.ДолгУпр                       КАК ДолгУпр
			|		
			|	ИЗ
			|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
			|	ГДЕ
			|		РасчетыПоСрокам.ДокументРегистратор В (&МассивДокументов)
			|		И РасчетыПоСрокам.Активность
			|		И РасчетыПоСрокам.ОбъектРасчетов = &ОбъектРасчетов
			|		И РасчетыПоСрокам.Период >= &НачалоДняПорядкаФакт
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ДвиженияПосле.Период                        КАК Период,
			|		ДвиженияПосле.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
			|		ДвиженияПосле.ОбъектРасчетов                КАК ОбъектРасчетов,
			|		ДвиженияПосле.Валюта                        КАК Валюта,
			|		ДвиженияПосле.РасчетныйДокумент             КАК РасчетныйДокумент,
			|		ДвиженияПосле.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
			|		ДвиженияПосле.ДатаВозникновения             КАК ДатаВозникновения,
			|		
			|		ДвиженияПосле.ПорядокЗачета                 КАК ПорядокЗачета,
			|		ДвиженияПосле.ПорядокОперации               КАК ПорядокОперации,
			|		ДвиженияПосле.ВалютаДокумента               КАК ВалютаДокумента,
			|		ДвиженияПосле.СвязанныйДокумент             КАК СвязанныйДокумент,
			|		ДвиженияПосле.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|		ДвиженияПосле.КорОбъектРасчетов             КАК КорОбъектРасчетов,
			|		ДвиженияПосле.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
			|		ДвиженияПосле.ДокументРегистратор           КАК ДокументРегистратор,
			|		ВЫБОР КОГДА ДвиженияПосле.КорАналитикаУчетаПоПартнерам = Неопределено
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
			|			ИНАЧЕ ДвиженияПосле.КорАналитикаУчетаПоПартнерам
			|		КОНЕЦ                                       КАК КорАналитикаУчетаПоПартнерам,
			|		
			|		-ДвиженияПосле.Предоплата                    КАК Предоплата,
			|		-ДвиженияПосле.ПредоплатаРегл                КАК ПредоплатаРегл,
			|		-ДвиженияПосле.ПредоплатаУпр                 КАК ПредоплатаУпр,
			|		-ДвиженияПосле.Долг                          КАК Долг,
			|		-ДвиженияПосле.ДолгРегл                      КАК ДолгРегл,
			|		-ДвиженияПосле.ДолгУпр                       КАК ДолгУпр
			|	ИЗ
			|		ВтДвиженияПосле КАК ДвиженияПосле) КАК ВложенныйЗапрос
			|СГРУППИРОВАТЬ ПО
			|	Период,
			|	АналитикаУчетаПоПартнерам,
			|	ОбъектРасчетов,
			|	Валюта,
			|	РасчетныйДокумент,
			|	ДатаПлановогоПогашения,
			|	ДатаВозникновения,
			|	ПорядокЗачета,
			|	ПорядокОперации,
			|	ВалютаДокумента,
			|	СвязанныйДокумент,
			|	СтатьяДвиженияДенежныхСредств,
			|	КорОбъектРасчетов,
			|	ХозяйственнаяОперация,
			|	ДокументРегистратор,
			|	КорАналитикаУчетаПоПартнерам
			|ИМЕЮЩИЕ
			|	СУММА(ВложенныйЗапрос.Предоплата) <> 0
			|	ИЛИ СУММА(ВложенныйЗапрос.ПредоплатаРегл) <> 0
			|	ИЛИ СУММА(ВложенныйЗапрос.ПредоплатаУпр) <> 0
			|	ИЛИ СУММА(ВложенныйЗапрос.Долг) <> 0
			|	ИЛИ СУММА(ВложенныйЗапрос.ДолгРегл) <> 0
			|	ИЛИ СУММА(ВложенныйЗапрос.ДолгУпр) <> 0";
			
			Если НЕ ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"РегистрНакопления.РасчетыСКлиентамиПоСрокам",
					"РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"ТаблицаИзмененийРасчетыСКлиентамиПоСрокам",
					"ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам");
			КонецЕсли;
			
			РасчетыДляПроверки = ТаблицаРасчетовПоСрокам.Скопировать(Новый Структура("ЗаписьДоНачалаРасчета",Ложь));
			
			МассивДокументов = РасчетыДляПроверки.ВыгрузитьКолонку("ДокументРегистратор");
			МассивДокументов.Добавить(ОсновныеПараметры.Регистратор);
			
			Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
			Запрос.УстановитьПараметр("ТаблицаПоСрокам", РасчетыДляПроверки);
			Запрос.УстановитьПараметр("МассивЗадействованныхРегистраторов",
				ГлобальныеПеременные["МассивЗадействованныхРегистраторов"
					+ ?(ГлобальныеПеременные.ЭтоРасчетыСКлиентами,"РасчетыСКлиентамиПоСрокам","РасчетыСПоставщикамиПоСрокам")]);
			
			Запрос.Выполнить();
			
			// Не анализируем изменения по документу, инициирующему перерасчет:
			НеотражаемыйДокумент = ОсновныеПараметры.Регистратор;
			
			Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
				
				Запрос.УстановитьПараметр("НеотражаемыйДокумент", НеотражаемыйДокумент);
				
				ТекстАктуализацииОтражения =
				"ВЫБРАТЬ
				|	ТаблицаИзменений.ДокументРегистратор КАК Регистратор
				|ИЗ
				|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК ТаблицаИзменений
				|
				|ГДЕ
				|	ТаблицаИзменений.ДокументРегистратор <> &НеотражаемыйДокумент
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаИзменений.ДокументРегистратор";
						
					
				Запрос.Текст = ТекстАктуализацииОтражения;
				
				ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
				
				#Область ПроверкаДатыЗапрета
				
				ЗапросПроверкиДатыЗапрета = Новый Запрос("
				|ВЫБРАТЬ
				|	ЕСТЬNULL(МИНИМУМ(ТаблицаИзменений.Период),ДАТАВРЕМЯ(3999,1,1)) КАК Период,
				|	ЕСТЬNULL(ТаблицаИзменений.ОбъектРасчетов.Организация, НЕОПРЕДЕЛЕНО) КАК Организация
				|ИЗ
				|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК ТаблицаИзменений
				|СГРУППИРОВАТЬ ПО
				|	ЕСТЬNULL(ТаблицаИзменений.ОбъектРасчетов.Организация, НЕОПРЕДЕЛЕНО)");
				
				ЗапросПроверкиДатыЗапрета.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
				ВыборкаМинимальногоПериода = ЗапросПроверкиДатыЗапрета.Выполнить().Выбрать();
				ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
				Пока ВыборкаМинимальногоПериода.Следующий() Цикл
					НоваяСтрока = ДанныеДляПроверки.Добавить();
					НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
					НоваяСтрока.Объект = ВыборкаМинимальногоПериода.Организация;
					НоваяСтрока.Раздел = "ФинансовыйКонтур";
				КонецЦикла;
				
				ОписаниеОшибки = НСтр("ru = 'Изменяемые данные взаиморасчетов находятся в закрытом периоде.'");
				
				Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, НаборЗаписейПоСрокам) Тогда
					ВызватьИсключение ОписаниеОшибки;
				КонецЕсли;
				#КонецОбласти
				
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	НАЧАЛОПЕРИОДА(Изменения.Период, МЕСЯЦ)         КАК Период,
				|	Изменения.РасчетныйДокумент                    КАК Документ,
				|	Изменения.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
				|ИЗ
				|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК Изменения";
				
				ИзмененияНДСУП = Запрос.Выполнить().Выгрузить();
				
				ЭмуляцияДокумента = ПроведениеДокументов.ЭмуляцияДокумента(Неопределено, Неопределено);
				ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента =
					Новый Структура(ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента);
				ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента.РежимЗаписи =
					ОсновныеПараметры.ДополнительныеСвойстваПроведения.СвойстваДокумента.РежимЗаписи;
				ЗакрытиеМесяцаСервер.ОтразитьЗаданияКЗакрытиюМесяца(ЭмуляцияДокумента, Запрос.МенеджерВременныхТаблиц);
				
			Иначе
				
				Запрос.УстановитьПараметр("НеотражаемыйДокумент", НеотражаемыйДокумент);
				
				ТекстАктуализацииОтражения =
				"ВЫБРАТЬ
				|	ТаблицаИзменений.ДокументРегистратор КАК Регистратор
				|ИЗ
				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК ТаблицаИзменений
				|
				|ГДЕ
				|	ТаблицаИзменений.ДокументРегистратор <> &НеотражаемыйДокумент
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаИзменений.ДокументРегистратор";
				
					
				Запрос.Текст = ТекстАктуализацииОтражения;
					
				ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
				
				#Область ПроверкаДатыЗапрета
				
				ЗапросПроверкиДатыЗапрета = Новый Запрос("ВЫБРАТЬ
				|	ЕСТЬNULL(МИНИМУМ(ТаблицаИзменений.Период), ДАТАВРЕМЯ(3999, 1, 1)) КАК Период,
				|	ЕСТЬNULL(ТаблицаИзменений.ОбъектРасчетов.Организация, НЕОПРЕДЕЛЕНО) КАК Организация
				|ИЗ
				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК ТаблицаИзменений
				|СГРУППИРОВАТЬ ПО
				|	ЕСТЬNULL(ТаблицаИзменений.ОбъектРасчетов.Организация, НЕОПРЕДЕЛЕНО)");
				
				ЗапросПроверкиДатыЗапрета.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
				ВыборкаМинимальногоПериода = ЗапросПроверкиДатыЗапрета.Выполнить().Выбрать();
				ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
				
				Пока ВыборкаМинимальногоПериода.Следующий() Цикл
					НоваяСтрока = ДанныеДляПроверки.Добавить();
					НоваяСтрока.Дата = НачалоДня(ВыборкаМинимальногоПериода.Период);
					НоваяСтрока.Объект = ВыборкаМинимальногоПериода.Организация;
					НоваяСтрока.Раздел = "ФинансовыйКонтур";
				КонецЦикла;
				ОписаниеОшибки = НСтр("ru = 'Изменяемые данные взаиморасчетов находятся в закрытом периоде.'");
				Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, НаборЗаписейПоСрокам) Тогда
					ВызватьИсключение ОписаниеОшибки;
				КонецЕсли;
				#КонецОбласти
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	НАЧАЛОПЕРИОДА(Изменения.Период, МЕСЯЦ)         КАК Период,
				|	Изменения.ДокументРегистратор                          КАК Документ,
				|	Изменения.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
				|ИЗ
				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК Изменения
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	НАЧАЛОПЕРИОДА(Изменения.Период, МЕСЯЦ)         КАК Период,
				|	Изменения.РасчетныйДокумент                    КАК Документ,
				|	Изменения.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
				|ИЗ
				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК Изменения";
				
				ИзмененияНДСУП = Запрос.Выполнить().Выгрузить();
				
				ЭмуляцияДокумента = ПроведениеДокументов.ЭмуляцияДокумента(Неопределено, Неопределено);
				ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента =
					Новый Структура(ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента);
				ЭмуляцияДокумента.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента.РежимЗаписи =
					ОсновныеПараметры.ДополнительныеСвойстваПроведения.СвойстваДокумента.РежимЗаписи;
				ЗакрытиеМесяцаСервер.ОтразитьЗаданияКЗакрытиюМесяца(ЭмуляцияДокумента, Запрос.МенеджерВременныхТаблиц);
				
			КонецЕсли;
			
			РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ВтДвиженияПосле");
			
		КонецЕсли;
		
		#КонецОбласти
		
		ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НаборЗаписейПоСрокам);
		
		Если ОсновныеПараметры.Свойство("ДополнительныеСвойстваПроведения") И ОсновныеПараметры.ДополнительныеСвойстваПроведения <> Неопределено Тогда
			Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
				УчетНДСУП.ОтразитьВУчетеНДСИзменениеРасчетовСКлиентами(ИзмененияНДСУП);
				// Уничтожаем временную таблицу изменений, т.к. могут записываться разные наборы записей с одним менеджером запросов.
				РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ТаблицаИзмененийРасчетыСКлиентамиПоСрокам");
			Иначе
				УчетНДСУП.ОтразитьВУчетеНДСИзменениеРасчетовСПоставщиками(ИзмененияНДСУП);
				// Уничтожаем временную таблицу изменений, т.к. могут записываться разные наборы записей с одним менеджером запросов.
				РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам");
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаИзменений <> Неопределено И ТаблицаИзменений.Количество() > 0 Тогда
			УдалитьСистемныеКорректировкиРегистров(НачалоДняПорядкаФакт, Организация,, Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОсновныеПараметры.ЗаписыватьИзменения И ГлобальныеПеременные.РассчитыватьПланы Тогда
	
		ТаблицаПланОплат.Свернуть("Период, Регистратор, ВидДвижения, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, ДокументРегистратор,
				|ДокументПлан, ХозяйственнаяОперация, ДатаПлановогоПогашения, ДатаВозникновения, ВариантОплаты, ПорядокЗачета, ПорядокОперации",
				"КОплате, Оплачено");
		
		ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
		ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
		ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
		ТаблицаПланОплат.Индексы.Добавить("Регистратор");
	
		ПодготовитьДанныеДляЗаписи(ГлобальныеПеременные, ТаблицаПланОплат, НаборЗаписейПланОплат);
		ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаПланОплат, НаборЗаписейПланОплат);
	КонецЕсли;
	
	Если ОсновныеПараметры.ЗаписыватьИзменения И ГлобальныеПеременные.РассчитыватьПланы Тогда
	
		ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
		ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
		ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
		ТаблицаПланОтгрузокПоставок.Индексы.Добавить("Регистратор");
	
		ПодготовитьДанныеДляЗаписи(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, НаборЗаписейПланОтгрузокПоставок);
		ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, НаборЗаписейПланОтгрузокПоставок);
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено И НЕ ОсновныеПараметры.НачальноеЗаполнение И ОсновныеПараметры.ЗаписыватьИзменения Тогда
		УдалитьНеиспользуемыеРегистраторыРасчетов(Запрос, ИмяРегистраРасчетов, ИмяРегистраПланаОплат, ИмяРегистраПланаОтгрузкиПоставки);
	КонецЕсли;
	
	Если НЕ ОсновныеПараметры.НачальноеЗаполнение И ОсновныеПараметры.ДополнительныеСвойстваПроведения <> Неопределено Тогда
		
		Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
			ИмяРегистра = "РасчетыСКлиентамиПоСрокам";
		Иначе 
			ИмяРегистра = "РасчетыСПоставщикамиПоСрокам";
		КонецЕсли;
		ОсновныеПараметры.ДополнительныеСвойстваПроведения.Вставить(
			ИмяРегистра,
			ТаблицаРасчетовПоСрокам);
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

//Вызывает пересчет измененных расчетов по временной таблице изменений.
//
// Параметры:
//	Параметры - см. ПараметрыРаспределенияРасчетов
//	ДополнительныеСвойства - Структура - Дополнительные свойства проведения.
//
Процедура РаспределитьПоИзменениям(Параметры, ДополнительныеСвойства = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Параметры.МенеджерВременныхТаблиц;
	ЭтоРасчетыСКлиентами = Параметры.ЭтоРасчетыСКлиентами;
	Регистратор = Параметры.Регистратор;
	ТаблицаИзменений = Параметры.ТаблицаИзменений;
	
	Если ТаблицаИзменений = Неопределено Тогда
		ТаблицаИзменений = ТаблицаИзмененийДляПересчета(МенеджерВременныхТаблиц, ЭтоРасчетыСКлиентами, Регистратор);
	КонецЕсли;
	
	Для Каждого СтрокаИзменений Из ТаблицаИзменений Цикл
		ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
		
		ЗаполнитьЗначенияСвойств(ОсновныеПараметры, СтрокаИзменений);
		Если СтрокаИзменений.ПорядокФакт <> "" Тогда
			ОсновныеПараметры.ПорядокФакт = Лев(СтрокаИзменений.ПорядокФакт, 8) + "000000000";
		КонецЕсли;
		Если СтрокаИзменений.ПорядокПлан <> "" Тогда
			ОсновныеПараметры.ПорядокПлан = Лев(СтрокаИзменений.ПорядокПлан, 8) + "000000000";
		КонецЕсли;
		ОсновныеПараметры.ЭтоРасчетыСКлиентами = ЭтоРасчетыСКлиентами;
		ОсновныеПараметры.Регистратор = Регистратор;
		ОсновныеПараметры.ДополнительныеСвойстваПроведения = ДополнительныеСвойства;
		
		ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
	КонецЦикла;
	
	Если ДополнительныеСвойства <> Неопределено И ТаблицаИзменений.Количество() > 0 Тогда
		
		МассивРассчитываемыхОбъектовРасчетов = ТаблицаИзменений.ВыгрузитьКолонку("ОбъектРасчетов");
		Если ДополнительныеСвойства.Свойство("МассивРассчитываемыхОбъектовРасчетов") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДополнительныеСвойства.МассивРассчитываемыхОбъектовРасчетов, МассивРассчитываемыхОбъектовРасчетов);
		Иначе
			ДополнительныеСвойства.Вставить("МассивРассчитываемыхОбъектовРасчетов",МассивРассчитываемыхОбъектовРасчетов);
		КонецЕсли;
		
		МенеджерВременныхТаблицКорИзменений = Новый МенеджерВременныхТаблиц();
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКорИзменений;
		Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
		Запрос.УстановитьПараметр("РассчитываемыеОбъектыРасчетов", ДополнительныеСвойства.МассивРассчитываемыхОбъектовРасчетов);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаИзменений.ПорядокФакт КАК ПорядокОперации,
		|	ТаблицаИзменений.ПорядокФакт КАК ПорядокЗачетаПоДатеПлатежа,
		|	ТаблицаИзменений.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ТаблицаИзменений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаИзменений.ВалютаРасчетов КАК ВалютаРасчетов
		|ПОМЕСТИТЬ ТаблицаИзменений
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений
		|;
		|ВЫБРАТЬ
		|	МИНИМУМ(Изменения.ПорядокОперации)                  КАК ПорядокОперации,
		|	МИНИМУМ(Изменения.ПорядокЗачетаПоДатеПлатежа)       КАК ПорядокЗачетаПоДатеПлатежа,
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСКлиентами.ОбъектРасчетов                    КАК ОбъектРасчетов,
		|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)   КАК КорОбъектРасчетов,
		|	Изменения.ВалютаРасчетов                            КАК ВалютаРасчетов,
		|	Неопределено                                        КАК Заказ,
		|	Неопределено                                        КАК Документ,
		|	1                                                   КАК Сумма,
		|	1                                                   КАК СуммаРегл,
		|	1                                                   КАК СуммаУпр
		|ПОМЕСТИТЬ РасчетыСКлиентамиИзменения
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИзменений КАК Изменения
		|			ПО РасчетыСКлиентами.КорАналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
		|				И РасчетыСКлиентами.КорОбъектРасчетов = Изменения.ОбъектРасчетов
		|				И РасчетыСКлиентами.Валюта = Изменения.ВалютаРасчетов
		|				И РасчетыСКлиентами.ПорядокОперации > Изменения.ПорядокОперации
		|ГДЕ
		|	НЕ РасчетыСКлиентами.ОбъектРасчетов В (&РассчитываемыеОбъектыРасчетов)
		|	И РасчетыСКлиентами.Активность
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
		|	РасчетыСКлиентами.ОбъектРасчетов,
		|	Изменения.ВалютаРасчетов";
		
		Если НЕ ЭтоРасчетыСКлиентами Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыСКлиентамиИзменения", "РасчетыСПоставщикамиИзменения");
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентами", "РегистрНакопления.РасчетыСПоставщиками");
		КонецЕсли;
		
		Запрос.Выполнить();
		Параметры.МенеджерВременныхТаблиц = МенеджерВременныхТаблицКорИзменений;
		Параметры.ТаблицаИзменений = Неопределено;
		РаспределитьПоИзменениям(Параметры, ДополнительныеСвойства);
		
	КонецЕсли;
	
КонецПроцедуры

//Пересчитывает все курсовые разницы за указанный период.
//
// Параметры:
//	МассивОрганизаций - Массив из СправочникСсылка.Организации- Перечень организаций по которым необходимо выполнить переоценку.
//	НачалоПериода - Дата - Начало периода пересчета курсовых разниц.
//	КонецПериода - Дата - Конец периода пересчета курсовых разниц.
//  Параметры - см. ПараметрыПереоценки
//
Процедура ВыполнитьПереоценкуЗаПериод(МассивОрганизаций, Знач НачалоПериода, Знач КонецПериода, Параметры) Экспорт
	
	НачалоПериода = НачалоМесяца(НачалоПериода);
	КонецПериода = КонецМесяца(НачалоПериода);
	
	ЭтоРасчетыСКлиентами = Параметры.ЭтоРасчетыСКлиентами;
	ПереоценкаПодНям = Параметры.ПереоценкаПодНям;

	УдалитьКурсовыеРазницыЗаПериод(МассивОрганизаций, НачалоПериода, КонецПериода, ЭтоРасчетыСКлиентами);
	ДниПереоценки = ДниПереоценки(МассивОрганизаций, НачалоПериода, КонецПериода, ЭтоРасчетыСКлиентами, ПереоценкаПодНям);
	Для Каждого День Из ДниПереоценки Цикл
		Дата = День.Дата;
		Если КонецДня(День.Дата) = КонецМесяца(День.Дата) Тогда
			Дата = КонецДня(День.Дата);
		КонецЕсли;
		ВыполнитьПереоценкуНаДату(МассивОрганизаций, Дата, Параметры);
	КонецЦикла;
	
КонецПроцедуры

//Добавляет записи переоценки на одну дату.
//
// Параметры:
//	МассивОрганизаций - Массив из СправочникСсылка.Организации - Перечень организаций по которым необходимо выполнить переоценку.
//	Период - Дата - Дата, на конец которой необходимо выполнить переоценку.
//  Параметры - см. ПараметрыПереоценки 
//
Процедура ВыполнитьПереоценкуНаДату(МассивОрганизаций, Период, Параметры) Экспорт

	ЭтоРасчетыСКлиентами = Параметры.ЭтоРасчетыСКлиентами;
	ПереоценкаПоДням = Параметры.ПереоценкаПоДням;
	
	Запрос = Новый Запрос;
	#Область ТекстЗапроса
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналитикиУчетаПоПартнерам.Ссылка КАК АналитикаУчетаПоПартнерам,
	|	АналитикиУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|ПОМЕСТИТЬ ВтАналитикиУчетаПоПартнерам
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам 
	|ГДЕ
	|	АналитикиУчетаПоПартнерам.Организация В (&МассивОрганизаций)
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ВалютаРегламентированногоУчета
	|;
	|
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Обороты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Обороты.Валюта КАК Валюта,
	|	Обороты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Обороты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Обороты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	Обороты.ДатаВозникновения КАК ДатаВозникновения,
	|	СУММА(Обороты.ДолгРасход) КАК ДолгРасход,
	|	СУММА(Обороты.ДолгРеглРасход) КАК ДолгРеглРасход,
	|	СУММА(Обороты.ДолгОборот) КАК ДолгОборот,
	|	СУММА(Обороты.ДолгРеглОборот) КАК ДолгРеглОборот,
	|	Обороты.ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами
	|
	|ПОМЕСТИТЬ втОборотыЗаДень
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|		Расчеты.Валюта КАК Валюта,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|		Расчеты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|		Расчеты.ДатаВозникновения КАК ДатаВозникновения,
	|		ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА Расчеты.Долг
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ДолгРасход,
	|		ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА Расчеты.ДолгРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ДолгРеглРасход,
	|		ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -Расчеты.Долг
	|			ИНАЧЕ Расчеты.Долг
	|		КОНЕЦ КАК ДолгОборот,
	|		ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -Расчеты.ДолгРегл
	|			ИНАЧЕ Расчеты.ДолгРегл
	|		КОНЕЦ КАК ДолгРеглОборот,
	|		ИСТИНА КАК ЭтоРасчетыСКлиентами
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикиУчетаПоПартнерам КАК Аналитика
	|			ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитика.АналитикаУчетаПоПартнерам
	|				И (Расчеты.Валюта <> Аналитика.ВалютаРегламентированногоУчета
	|					ИЛИ Расчеты.Валюта <> &ВалютаУправленческогоУчета)
	|		ГДЕ
	|			&РасчетыСКлиентами
	|			И Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|			И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И Расчеты.Долг <> 0
	|			И НЕ Расчеты.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|		Расчеты.Валюта КАК Валюта,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|		Расчеты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|		Расчеты.ДатаВозникновения КАК ДатаВозникновения,
	|		ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА Расчеты.Долг
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ДолгРасход,
	|		ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА Расчеты.ДолгРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ДолгРеглРасход,
	|		ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -Расчеты.Долг
	|			ИНАЧЕ Расчеты.Долг
	|		КОНЕЦ КАК ДолгОборот,
	|		ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -Расчеты.ДолгРегл
	|			ИНАЧЕ Расчеты.ДолгРегл
	|		КОНЕЦ КАК ДолгРеглОборот,
	|		ЛОЖЬ КАК ЭтоРасчетыСКлиентами
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикиУчетаПоПартнерам КАК Аналитика
	|			ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитика.АналитикаУчетаПоПартнерам
	|				И (Расчеты.Валюта <> Аналитика.ВалютаРегламентированногоУчета
	|					ИЛИ Расчеты.Валюта <> &ВалютаУправленческогоУчета)
	|		ГДЕ
	|			&РасчетыСПоставщиками
	|			И Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|			И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И Расчеты.Долг <> 0
	|			И НЕ Расчеты.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику))
	|	) КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.АналитикаУчетаПоПартнерам,
	|	Обороты.ОбъектРасчетов,
	|	Обороты.Валюта,
	|	Обороты.ВалютаРегламентированногоУчета,
	|	Обороты.РасчетныйДокумент,
	|	Обороты.ДатаПлановогоПогашения,
	|	Обороты.ДатаВозникновения,
	|	Обороты.ЭтоРасчетыСКлиентами
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	Валюта,
	|	РасчетныйДокумент,
	|	ДатаПлановогоПогашения,
	|	ДатаВозникновения
	|;
	|
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	РасчетыСКлиентамиПоСрокамОстатки.Валюта                                         КАК Валюта,
	|	РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент                              КАК РасчетныйДокумент,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения                         КАК ДатаПлановогоПогашения,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДатаВозникновения                              КАК ДатаВозникновения,
	|	РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаОстаток                              КАК ПредоплатаОстаток,
	|	РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаРеглОстаток                          КАК ПредоплатаРеглОстаток,
	|	РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаУпрОстаток                           КАК ПредоплатаУпрОстаток,
	|	ЕСТЬNULL(ОборотыЗаДень.ДолгРасход, 0)                                           КАК ДолгРасход,
	|	ЕСТЬNULL(ОборотыЗаДень.ДолгРеглРасход, 0)                                       КАК ДолгРеглРасход,
	|	ЕСТЬNULL(ОборотыЗаДень.ДолгОборот, 0)                                           КАК ДолгОборот,
	|	ЕСТЬNULL(ОборотыЗаДень.ДолгРеглОборот, 0)                                       КАК ДолгРеглОборот,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток                                    КАК ДолгОстаток,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДолгРеглОстаток                                КАК ДолгРеглОстаток,
	|	КурсыВалютРасчетов.КурсЧислитель / КурсыВалютРасчетов.КурсЗнаменатель           КАК КурсРегл,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток 
	|		* КурсыВалютРасчетов.КурсЧислитель / КурсыВалютРасчетов.КурсЗнаменатель КАК ЧИСЛО(31,2)) КАК ДолгРеглОстатокРасчетный,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДолгУпрОстаток                                 КАК ДолгУпрОстаток,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток 
	|		* КурсыВалютРасчетов.КурсЧислитель / КурсыВалютРасчетов.КурсЗнаменатель
	|			/ КурсыВалютУпр.КурсЧислитель * КурсыВалютУпр.КурсЗнаменатель КАК ЧИСЛО(31,2)) КАК ДолгУпрОстатокРасчетный,
	|	ИСТИНА                                                                          КАК ЭтоРасчетыСКлиентами
	|ПОМЕСТИТЬ ВтКРасчету
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
	|			&Период,
	|			(АналитикаУчетаПоПартнерам) В 
	|				(ВЫБРАТЬ 
	|					АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам
	|				ИЗ
	|					ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам)
	|			И (НЕ (АналитикаУчетаПоПартнерам, Валюта) В (
	|				ВЫБРАТЬ 
	|					АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам,
	|					АналитикиУчетаПоПартнерам.ВалютаРегламентированногоУчета
	|				ИЗ
	|					ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
	|				)
	|				ИЛИ Валюта <> &ВалютаУправленческогоУчета)
	|		) КАК РасчетыСКлиентамиПоСрокамОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОборотыЗаДень КАК ОборотыЗаДень
	|		ПО РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам = ОборотыЗаДень.АналитикаУчетаПоПартнерам
	|			И РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов = ОборотыЗаДень.ОбъектРасчетов
	|			И РасчетыСКлиентамиПоСрокамОстатки.Валюта = ОборотыЗаДень.Валюта
	|			И РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент = ОборотыЗаДень.РасчетныйДокумент
	|			И РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения = ОборотыЗаДень.ДатаПлановогоПогашения
	|			И РасчетыСКлиентамиПоСрокамОстатки.ДатаВозникновения = ОборотыЗаДень.ДатаВозникновения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУправленческогоУчета) КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.БазоваяВалюта = РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютРасчетов
	|		ПО РасчетыСКлиентамиПоСрокамОстатки.Валюта = КурсыВалютРасчетов.Валюта
	|			И КурсыВалютРасчетов.БазоваяВалюта = РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета
	|ГДЕ
	|	&РасчетыСКлиентами
	|	И (НЕ ОборотыЗаДень.ОбъектРасчетов ЕСТЬ NULL
	|		ИЛИ &ДатаРасчета = КОНЕЦПЕРИОДА(&ДатаРасчета, МЕСЯЦ)
	|		ИЛИ &ПереоценкаПоДням)
	|	И (РасчетыСКлиентамиПоСрокамОстатки.ДолгРеглОстаток
	|		- ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток 
	|		* КурсыВалютРасчетов.КурсЧислитель / КурсыВалютРасчетов.КурсЗнаменатель КАК ЧИСЛО(31,2)) >= 0.01 
	|	ИЛИ РасчетыСКлиентамиПоСрокамОстатки.ДолгРеглОстаток
	|		- ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток 
	|		* КурсыВалютРасчетов.КурсЧислитель / КурсыВалютРасчетов.КурсЗнаменатель КАК ЧИСЛО(31,2)) <= -0.01 
	|	ИЛИ РасчетыСКлиентамиПоСрокамОстатки.ДолгУпрОстаток
	|		- ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток 
	|			* ЕСТЬNULL(КурсыВалютРасчетов.КурсЧислитель,1) / ЕСТЬNULL(КурсыВалютРасчетов.КурсЗнаменатель,1)
	|				/ ЕСТЬNULL(КурсыВалютУпр.КурсЧислитель,1) * ЕСТЬNULL(КурсыВалютУпр.КурсЗнаменатель,1) КАК ЧИСЛО(31,2)) >= 0.01
	|	ИЛИ РасчетыСКлиентамиПоСрокамОстатки.ДолгУпрОстаток
	|		- ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток 
	|			* ЕСТЬNULL(КурсыВалютРасчетов.КурсЧислитель,1) / ЕСТЬNULL(КурсыВалютРасчетов.КурсЗнаменатель,1)
	|				/ ЕСТЬNULL(КурсыВалютУпр.КурсЧислитель,1) * ЕСТЬNULL(КурсыВалютУпр.КурсЗнаменатель,1) КАК ЧИСЛО(31,2)) <= -0.01
	|	ИЛИ РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаОстаток = 0
	|		И (РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаРеглОстаток <> 0
	|			ИЛИ РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаУпрОстаток <> 0)
	|	ИЛИ РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток = 0
	|		И (РасчетыСКлиентамиПоСрокамОстатки.ДолгРеглОстаток <> 0
	|			ИЛИ РасчетыСКлиентамиПоСрокамОстатки.ДолгУпрОстаток <> 0))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	РасчетыСПоставщикамиПоСрокам.Валюта                                         КАК Валюта,
	|	РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент                              КАК РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоСрокам.ДатаПлановогоПогашения                         КАК ДатаПлановогоПогашения,
	|	РасчетыСПоставщикамиПоСрокам.ДатаВозникновения                              КАК ДатаВозникновения,
	|	РасчетыСПоставщикамиПоСрокам.ПредоплатаОстаток                              КАК ПредоплатаОстаток,
	|	РасчетыСПоставщикамиПоСрокам.ПредоплатаРеглОстаток                          КАК ПредоплатаРеглОстаток,
	|	РасчетыСПоставщикамиПоСрокам.ПредоплатаУпрОстаток                           КАК ПредоплатаУпрОстаток,
	|	ЕСТЬNULL(ОборотыЗаДень.ДолгРасход, 0)                                       КАК ДолгРасход,
	|	ЕСТЬNULL(ОборотыЗаДень.ДолгРеглРасход, 0)                                   КАК ДолгРеглРасход,
	|	ЕСТЬNULL(ОборотыЗаДень.ДолгОборот, 0)                                       КАК ДолгОборот,
	|	ЕСТЬNULL(ОборотыЗаДень.ДолгРеглОборот, 0)                                   КАК ДолгРеглОборот,
	|	РасчетыСПоставщикамиПоСрокам.ДолгОстаток                                    КАК ДолгОстаток,
	|	РасчетыСПоставщикамиПоСрокам.ДолгРеглОстаток                                КАК ДолгРеглОстаток,
	|	КурсыВалютРасчетов.КурсЧислитель / КурсыВалютРасчетов.КурсЗнаменатель       КАК КурсРегл,
	|	ВЫРАЗИТЬ(РасчетыСПоставщикамиПоСрокам.ДолгОстаток 
	|		* КурсыВалютРасчетов.КурсЧислитель / КурсыВалютРасчетов.КурсЗнаменатель КАК ЧИСЛО(31,2)) КАК ДолгРеглОстатокРасчетный,
	|	РасчетыСПоставщикамиПоСрокам.ДолгУпрОстаток                                 КАК ДолгУпрОстаток,
	|	ВЫРАЗИТЬ(РасчетыСПоставщикамиПоСрокам.ДолгОстаток 
	|		* КурсыВалютРасчетов.КурсЧислитель / КурсыВалютРасчетов.КурсЗнаменатель
	|			/ КурсыВалютУпр.КурсЧислитель * КурсыВалютУпр.КурсЗнаменатель КАК ЧИСЛО(31,2))      КАК ДолгУпрОстатокРасчетный,
	|	ЛОЖЬ                                                                         КАК ЭтоРасчетыСКлиентами
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(
	|			&Период,
	|			(АналитикаУчетаПоПартнерам) В 
	|				(ВЫБРАТЬ 
	|					АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам
	|				ИЗ
	|					ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам)
	|			И (НЕ (АналитикаУчетаПоПартнерам, Валюта) В (
	|				ВЫБРАТЬ 
	|					АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам,
	|					АналитикиУчетаПоПартнерам.ВалютаРегламентированногоУчета
	|				ИЗ
	|					ВтАналитикиУчетаПоПартнерам КАК АналитикиУчетаПоПартнерам
	|				)
	|				ИЛИ Валюта <> &ВалютаУправленческогоУчета)
	|		) КАК РасчетыСПоставщикамиПоСрокам
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОборотыЗаДень КАК ОборотыЗаДень
	|		ПО РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам = ОборотыЗаДень.АналитикаУчетаПоПартнерам
	|			И РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов = ОборотыЗаДень.ОбъектРасчетов
	|			И РасчетыСПоставщикамиПоСрокам.Валюта = ОборотыЗаДень.Валюта
	|			И РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент = ОборотыЗаДень.РасчетныйДокумент
	|			И РасчетыСПоставщикамиПоСрокам.ДатаПлановогоПогашения = ОборотыЗаДень.ДатаПлановогоПогашения
	|			И РасчетыСПоставщикамиПоСрокам.ДатаВозникновения = ОборотыЗаДень.ДатаВозникновения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУправленческогоУчета) КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.БазоваяВалюта = РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютРасчетов
	|		ПО РасчетыСПоставщикамиПоСрокам.Валюта = КурсыВалютРасчетов.Валюта
	|			И КурсыВалютРасчетов.БазоваяВалюта = РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета
	|ГДЕ
	|	&РасчетыСПоставщиками
	|	И (НЕ ОборотыЗаДень.ОбъектРасчетов ЕСТЬ NULL
	|		ИЛИ &ДатаРасчета = КОНЕЦПЕРИОДА(&ДатаРасчета, МЕСЯЦ)
	|		ИЛИ &ПереоценкаПоДням)
	|	И (РасчетыСПоставщикамиПоСрокам.ДолгРеглОстаток
	|		- ВЫРАЗИТЬ(РасчетыСПоставщикамиПоСрокам.ДолгОстаток 
	|		* КурсыВалютРасчетов.КурсЧислитель / КурсыВалютРасчетов.КурсЗнаменатель КАК ЧИСЛО(31,2)) >= 0.01 
	|	ИЛИ РасчетыСПоставщикамиПоСрокам.ДолгРеглОстаток
	|		- ВЫРАЗИТЬ(РасчетыСПоставщикамиПоСрокам.ДолгОстаток 
	|		* КурсыВалютРасчетов.КурсЧислитель / КурсыВалютРасчетов.КурсЗнаменатель КАК ЧИСЛО(31,2)) <= -0.01 
	|	ИЛИ РасчетыСПоставщикамиПоСрокам.ДолгУпрОстаток
	|		- ВЫРАЗИТЬ(РасчетыСПоставщикамиПоСрокам.ДолгОстаток 
	|			* ЕСТЬNULL(КурсыВалютРасчетов.КурсЧислитель,1) / ЕСТЬNULL(КурсыВалютРасчетов.КурсЗнаменатель,1)
	|				/ ЕСТЬNULL(КурсыВалютУпр.КурсЧислитель,1) * ЕСТЬNULL(КурсыВалютУпр.КурсЗнаменатель,1) КАК ЧИСЛО(31,2)) >= 0.01
	|	ИЛИ РасчетыСПоставщикамиПоСрокам.ДолгУпрОстаток
	|		- ВЫРАЗИТЬ(РасчетыСПоставщикамиПоСрокам.ДолгОстаток 
	|			* ЕСТЬNULL(КурсыВалютРасчетов.КурсЧислитель,1) / ЕСТЬNULL(КурсыВалютРасчетов.КурсЗнаменатель,1)
	|				/ ЕСТЬNULL(КурсыВалютУпр.КурсЧислитель,1) * ЕСТЬNULL(КурсыВалютУпр.КурсЗнаменатель,1) КАК ЧИСЛО(31,2)) <= -0.01
	|	ИЛИ РасчетыСПоставщикамиПоСрокам.ПредоплатаОстаток = 0
	|		И (РасчетыСПоставщикамиПоСрокам.ПредоплатаРеглОстаток <> 0
	|			ИЛИ РасчетыСПоставщикамиПоСрокам.ПредоплатаУпрОстаток <> 0)
	|	ИЛИ РасчетыСПоставщикамиПоСрокам.ДолгОстаток = 0
	|		И (РасчетыСПоставщикамиПоСрокам.ДолгРеглОстаток <> 0
	|			ИЛИ РасчетыСПоставщикамиПоСрокам.ДолгУпрОстаток <> 0))
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	Валюта,
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|	Т.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	Т.ВалютаРасчетов                                 КАК ВалютаРасчетов,
	|	Т.ЭтоРасчетыСКлиентами                           КАК ЭтоРасчетыСКлиентами,
	|	Т.Организация                                    КАК Организация
	|ИЗ (
	|	ВЫБРАТЬ
	|		ВтКРасчету.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|		ВтКРасчету.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|		ВтКРасчету.Валюта                                         КАК ВалютаРасчетов,
	|		ВтКРасчету.ЭтоРасчетыСКлиентами                           КАК ЭтоРасчетыСКлиентами,
	|		Аналитика.Организация                                     КАК Организация
	|	ИЗ ВтКРасчету КАК ВтКРасчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|			ПО ВтКРасчету.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтКРасчету.ЭтоРасчетыСКлиентами                           КАК ЭтоРасчетыСКлиентами,
	|	ВтКРасчету.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|	ВтКРасчету.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	ВтКРасчету.Валюта                                         КАК ВалютаРасчетов,
	|	ВтКРасчету.РасчетныйДокумент                              КАК РасчетныйДокумент,
	|	ВтКРасчету.ДатаПлановогоПогашения                         КАК ДатаПлановогоПогашения,
	|	ВтКРасчету.ДатаВозникновения                              КАК ДатаВозникновения,
	|	ВтКРасчету.ДолгРеглОстаток                                КАК ДолгРеглОстаток,
	|	ВтКРасчету.ДолгРеглОстатокРасчетный                       КАК ДолгРеглОстатокРасчетный,
	|	ВтКРасчету.ДолгУпрОстаток                                 КАК ДолгУпрОстаток,
	|	ВтКРасчету.ДолгУпрОстатокРасчетный                        КАК ДолгУпрОстатокРасчетный,
	|	ВтКРасчету.ПредоплатаОстаток                              КАК ПредоплатаОстаток,
	|	ВтКРасчету.ПредоплатаРеглОстаток                          КАК ПредоплатаРеглОстаток,
	|	ВтКРасчету.ПредоплатаУпрОстаток                           КАК ПредоплатаУпрОстаток,
	|	МАКСИМУМ(ЕСТЬNULL(РасчетыСКлиентами.ПорядокЗачета, ЕСТЬNULL(РасчетыСПоставщиками.ПорядокЗачета,""""""""))) КАК ПорядокЗачета,
	|	МАКСИМУМ(ЕСТЬNULL(РасчетыСКлиентами.ВалютаДокумента, ЕСТЬNULL(РасчетыСПоставщиками.ВалютаДокумента,""""""""))) КАК ВалютаДокумента
	|ИЗ ВтКРасчету КАК ВтКРасчету
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентами
	|		ПО ВтКРасчету.ЭтоРасчетыСКлиентами
	|			И ВтКРасчету.АналитикаУчетаПоПартнерам = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
	|			И ВтКРасчету.ОбъектРасчетов = РасчетыСКлиентами.ОбъектРасчетов
	|			И ВтКРасчету.Валюта = РасчетыСКлиентами.Валюта
	|			И ВтКРасчету.РасчетныйДокумент = РасчетыСКлиентами.РасчетныйДокумент
	|			И ВтКРасчету.ДатаПлановогоПогашения = РасчетыСКлиентами.ДатаПлановогоПогашения
	|			И РасчетыСКлиентами.Активность
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщиками
	|		ПО НЕ ВтКРасчету.ЭтоРасчетыСКлиентами
	|			И ВтКРасчету.АналитикаУчетаПоПартнерам = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
	|			И ВтКРасчету.ОбъектРасчетов = РасчетыСПоставщиками.ОбъектРасчетов
	|			И ВтКРасчету.Валюта = РасчетыСПоставщиками.Валюта
	|			И ВтКРасчету.РасчетныйДокумент = РасчетыСПоставщиками.РасчетныйДокумент
	|			И ВтКРасчету.ДатаПлановогоПогашения = РасчетыСПоставщиками.ДатаПлановогоПогашения
	|			И РасчетыСПоставщиками.Активность
	|СГРУППИРОВАТЬ ПО
	|	ВтКРасчету.ЭтоРасчетыСКлиентами,
	|	ВтКРасчету.АналитикаУчетаПоПартнерам,
	|	ВтКРасчету.ОбъектРасчетов,
	|	ВтКРасчету.Валюта,
	|	ВтКРасчету.РасчетныйДокумент,
	|	ВтКРасчету.ДатаПлановогоПогашения,
	|	ВтКРасчету.ДатаВозникновения,
	|	ВтКРасчету.ПредоплатаОстаток,
	|	ВтКРасчету.ПредоплатаРеглОстаток,
	|	ВтКРасчету.ПредоплатаУпрОстаток,
	|	ВтКРасчету.ДолгРеглОстаток,
	|	ВтКРасчету.ДолгРеглОстатокРасчетный,
	|	ВтКРасчету.ДолгУпрОстаток,
	|	ВтКРасчету.ДолгУпрОстатокРасчетный";
	#КонецОбласти

	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("РасчетыСКлиентами", ЭтоРасчетыСКлиентами = Неопределено ИЛИ ЭтоРасчетыСКлиентами);
	Запрос.УстановитьПараметр("РасчетыСПоставщиками", ЭтоРасчетыСКлиентами = Неопределено ИЛИ НЕ ЭтоРасчетыСКлиентами);
	
	ГраницаКонецДня = Новый Граница(КонецДня(Период),ВидГраницы.Включая);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Период));
	Запрос.УстановитьПараметр("Период", ГраницаКонецДня);
	Запрос.УстановитьПараметр("ДатаРасчета", Период);
	Если ПереоценкаПоДням = Неопределено Тогда
		ПереоценкаПоДням = Константы.ПереоцениватьВалютныеСредстваПоДням.Получить();
	КонецЕсли;
	Запрос.УстановитьПараметр("ПереоценкаПоДням", ПереоценкаПоДням);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ПоследнийИндекс = РезультатыЗапроса.ВГраница(); 
	
	ОбъектыКПереоценке = РезультатыЗапроса[ПоследнийИндекс-1].Выгрузить();
	ДетальныеЗаписи    = РезультатыЗапроса[ПоследнийИндекс].Выгрузить();
	ДетальныеЗаписи.Индексы.Добавить("ЭтоРасчетыСКлиентами");
	ДетальныеЗаписи.Индексы.Добавить("АналитикаУчетаПоПартнерам");
	ДетальныеЗаписи.Индексы.Добавить("ОбъектРасчетов");
	ДетальныеЗаписи.Индексы.Добавить("ВалютаРасчетов");
	СтруктураПоиска = Новый Структура("ЭтоРасчетыСКлиентами, АналитикаУчетаПоПартнерам, ОбъектРасчетов, ВалютаРасчетов");
	
	Порядок = Порядок(Период,"",Тип("ДокументСсылка.РасчетКурсовыхРазниц"),"9","99");
	РазмерПорцииЗаписи = РазмерПорцииЗаписи();
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	
	
	Для Каждого СтрокаПереоценки Из ОбъектыКПереоценке Цикл
		
		Если СтрокаПереоценки.ЭтоРасчетыСКлиентами Тогда
			ПереоценкаПоложительная 	= Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыПрибыль;
			ПереоценкаОтрицательная 	= Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыУбыток;
			ПереоценкаПоложительнаяСпр 	= Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКлиентыПрибыль;
			ПереоценкаОтрицательнаяСпр 	= Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКлиентыУбыток;
			НаборЗаписей = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
		Иначе
			ПереоценкаПоложительная 	= Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиУбыток;
			ПереоценкаОтрицательная 	= Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиПрибыль;
			ПереоценкаПоложительнаяСпр 	= Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыПоставщикиУбыток;
			ПереоценкаОтрицательнаяСпр 	= Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыПоставщикиПрибыль;
			НаборЗаписей = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
		КонецЕсли;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверятьИзмененияРегистра", Истина);
		
		ДокументыРасчетаКурсовыхРазниц = Документы.РасчетКурсовыхРазниц.ДокументыПереоценки(СтрокаПереоценки.Организация,
			Период, Период,
			СтрокаПереоценки.ЭтоРасчетыСКлиентами);
		ДокументРегистратор = ДокументыРасчетаКурсовыхРазниц[НачалоМесяца(Период)]; //ДокументСсылка
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПереоценки);
		СтрокиДетальныхЗаписей = ДетальныеЗаписи.НайтиСтроки(СтруктураПоиска);
		
		НовСтр = ТаблицаИзменений.Добавить();
		НовСтр.Регистратор = ДокументРегистратор.Ссылка;
		
		Если СтрокиДетальныхЗаписей.Количество() > 0 Тогда
			ТаблицаСвободныхРегистраторов = СвободныеРегистраторыРасчетов(СтрокаПереоценки, НаборЗаписей.Метаданные().Имя, СтрокиДетальныхЗаписей.Количество() * 4);
			счРегистратор = 0;
			счСтрок = 0;
			
			НаборЗаписей.Отбор.Регистратор.Установить(ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка);
			НаборЗаписей.Прочитать();
			
			Для Каждого СтрокаДетальныхЗаписей Из СтрокиДетальныхЗаписей Цикл
				
				#Область ПоложительнаяКурсоваяРазница
				Если СтрокаДетальныхЗаписей.ДолгРеглОстаток < СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный 
					ИЛИ СтрокаДетальныхЗаписей.ДолгУпрОстаток < СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный Тогда
					НовСтр = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
					
					НовСтр.Регистратор           = ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка;
					НовСтр.ДокументРегистратор   = ДокументРегистратор;
					НовСтр.Период                = НачалоДня(Период);
					НовСтр.ПорядокОперации       = Порядок;
					НовСтр.ВидДвижения           = ВидДвиженияНакопления.Приход;
					НовСтр.ХозяйственнаяОперация = ПереоценкаПоложительная;
					НовСтр.Валюта                = СтрокаДетальныхЗаписей.ВалютаРасчетов;
					НовСтр.НастройкаХозяйственнойОперации 	= ПереоценкаПоложительнаяСпр;
					НовСтр.ИдентификаторФинЗаписи			= Строка(Новый УникальныйИдентификатор);

					Если СтрокаДетальныхЗаписей.ДолгРеглОстаток < СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный Тогда
						НовСтр.ДолгРегл = СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный - СтрокаДетальныхЗаписей.ДолгРеглОстаток;
					КонецЕсли;
					Если СтрокаДетальныхЗаписей.ДолгУпрОстаток < СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный Тогда
						НовСтр.ДолгУпр = СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный - СтрокаДетальныхЗаписей.ДолгУпрОстаток;
					КонецЕсли;
					
					счСтрок = счСтрок + 1;
					Если счСтрок = РазмерПорцииЗаписи Тогда
						счСтрок = 0;
						счРегистратор = счРегистратор + 1;
						НаборЗаписей.Записать();
						НаборЗаписей.Отбор.Регистратор.Установить(ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка);
						НаборЗаписей.Прочитать();
					КонецЕсли;
					
				КонецЕсли;
				#КонецОбласти
				
				#Область ОтрицательнаяКурсоваяРазница
				Если СтрокаДетальныхЗаписей.ДолгРеглОстаток > СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный 
					ИЛИ СтрокаДетальныхЗаписей.ДолгУпрОстаток > СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный Тогда
					НовСтр = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
					
					НовСтр.Регистратор           = ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка;
					НовСтр.ДокументРегистратор   = ДокументРегистратор;
					НовСтр.Период                = НачалоДня(Период);
					НовСтр.ПорядокОперации       = Порядок;
					НовСтр.ВидДвижения           = ВидДвиженияНакопления.Расход;
					НовСтр.ХозяйственнаяОперация = ПереоценкаОтрицательная;
					НовСтр.Валюта                = СтрокаДетальныхЗаписей.ВалютаРасчетов;
					НовСтр.НастройкаХозяйственнойОперации 	= ПереоценкаОтрицательнаяСпр;
					НовСтр.ИдентификаторФинЗаписи			= Строка(Новый УникальныйИдентификатор);

					Если СтрокаДетальныхЗаписей.ДолгРеглОстаток > СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный Тогда
						НовСтр.ДолгРегл = СтрокаДетальныхЗаписей.ДолгРеглОстаток - СтрокаДетальныхЗаписей.ДолгРеглОстатокРасчетный;
					КонецЕсли;
					Если СтрокаДетальныхЗаписей.ДолгУпрОстаток > СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный Тогда
						НовСтр.ДолгУпр = СтрокаДетальныхЗаписей.ДолгУпрОстаток - СтрокаДетальныхЗаписей.ДолгУпрОстатокРасчетный;
					КонецЕсли;
					
					счСтрок = счСтрок + 1;
					Если счСтрок = РазмерПорцииЗаписи Тогда
						счСтрок = 0;
						счРегистратор = счРегистратор + 1;
						НаборЗаписей.Записать();
						НаборЗаписей.Отбор.Регистратор.Установить(ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка);
						НаборЗаписей.Прочитать();
					КонецЕсли;
					
				КонецЕсли;
				#КонецОбласти
				
				#Область КорректировкаПредоплатыВНоль
				Если СтрокаДетальныхЗаписей.ПредоплатаОстаток = 0
					И (СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток > 0
						ИЛИ СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток > 0) Тогда
					
					НовСтр = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
					
					НовСтр.Регистратор           = ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка;
					НовСтр.ДокументРегистратор   = ДокументРегистратор;
					НовСтр.Период                = НачалоДня(Период);
					НовСтр.ПорядокОперации       = Порядок;
					НовСтр.ВидДвижения           = ВидДвиженияНакопления.Расход;
					НовСтр.ХозяйственнаяОперация = ПереоценкаПоложительная;
					НовСтр.Валюта                = СтрокаДетальныхЗаписей.ВалютаРасчетов;
					НовСтр.НастройкаХозяйственнойОперации 	= ПереоценкаПоложительнаяСпр;
					НовСтр.ИдентификаторФинЗаписи			= Строка(Новый УникальныйИдентификатор);

					Если СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток > 0 Тогда
						НовСтр.ПредоплатаРегл = СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток;
					КонецЕсли;
					Если СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток > 0 Тогда
						НовСтр.ПредоплатаУпр = СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток;
					КонецЕсли;
					
					счСтрок = счСтрок + 1;
					Если счСтрок = РазмерПорцииЗаписи Тогда
						счСтрок = 0;
						счРегистратор = счРегистратор + 1;
						НаборЗаписей.Записать();
						НаборЗаписей.Отбор.Регистратор.Установить(ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка);
						НаборЗаписей.Прочитать();
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаДетальныхЗаписей.ПредоплатаОстаток = 0
					И (СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток < 0
						ИЛИ СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток < 0) Тогда
					
					НовСтр = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
					
					НовСтр.Регистратор           = ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка;
					НовСтр.ДокументРегистратор   = ДокументРегистратор;
					НовСтр.Период                = НачалоДня(Период);
					НовСтр.ПорядокОперации       = Порядок;
					НовСтр.ВидДвижения           = ВидДвиженияНакопления.Приход;
					НовСтр.ХозяйственнаяОперация = ПереоценкаОтрицательная;
					НовСтр.Валюта                = СтрокаДетальныхЗаписей.ВалютаРасчетов;
					НовСтр.НастройкаХозяйственнойОперации 	= ПереоценкаОтрицательнаяСпр;
					НовСтр.ИдентификаторФинЗаписи			= Строка(Новый УникальныйИдентификатор);
					
					Если СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток < 0 Тогда
						НовСтр.ПредоплатаРегл = -СтрокаДетальныхЗаписей.ПредоплатаРеглОстаток;
					КонецЕсли;
					Если СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток < 0 Тогда
						НовСтр.ПредоплатаУпр = -СтрокаДетальныхЗаписей.ПредоплатаУпрОстаток;
					КонецЕсли;
					
					счСтрок = счСтрок + 1;
					Если счСтрок = РазмерПорцииЗаписи Тогда
						счСтрок = 0;
						счРегистратор = счРегистратор + 1;
						НаборЗаписей.Записать();
						НаборЗаписей.Отбор.Регистратор.Установить(ТаблицаСвободныхРегистраторов[счРегистратор].Ссылка);
						НаборЗаписей.Прочитать();
					КонецЕсли;
					
				КонецЕсли;
				#КонецОбласти
				
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла; // по объектам переоценки
	
	ПоляСворачивания = "Регистратор";
	ТаблицаИзменений.Свернуть(ПоляСворачивания);
	
	Если ЭтоРасчетыСКлиентами <> Неопределено Тогда
		Для Каждого Организация Из МассивОрганизаций Цикл
			
			ДокументыРасчетаКурсовыхРазниц = Документы.РасчетКурсовыхРазниц.ДокументыПереоценки(Организация,
				Период, Период,
				ЭтоРасчетыСКлиентами);
			ДокументРегистратор = ДокументыРасчетаКурсовыхРазниц[НачалоМесяца(Период)];
			
			Если ЭтоРасчетыСКлиентами Тогда
				НаборДвиженийПоДокументам = РегистрыНакопления.РасчетыСКлиентамиПоДокументам.СоздатьНаборЗаписей();
			Иначе
				НаборДвиженийПоДокументам = РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.СоздатьНаборЗаписей();
			КонецЕсли;
			
			НаборДвиженийПоДокументам.Отбор.Регистратор.Установить(ДокументРегистратор);
			НаборДвиженийПоДокументам.Прочитать();
			Если НаборДвиженийПоДокументам.Количество() > 0 Тогда
				НаборДвиженийПоДокументам.Очистить();
				НаборДвиженийПоДокументам.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Возвращает строковый порядок документа по переданным параметрам.
// 
// Параметры:
// 	Дата - Дата - Дата по которой нужно сделать строковый порядок.
// 	Номер - Строка - Номер документа.
// 	ТипДокумента - Тип - Тип ссылки документа.
// 	Вид - Строка - 1 Заказы, график исполнения договора.
//									2 Накладные;
//									3 Корректировки реализации в минус;
//									4 Оплаты, возвраты.
// 	Тип - Строка,Число - см. НомерТипа.
// Возвращаемое значение:
// 	Строка - Описание
Функция Порядок(Дата, Номер, ТипДокумента, Вид, Тип = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(Дата) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	ДатаСтрокой = Формат(Дата, "ДФ=yyyyMMddHHmmss");
	Если Тип = Неопределено Тогда
		Тип = НомерТипа(ТипДокумента);
	КонецЕсли;
	Возврат Лев(ДатаСтрокой, 8) + Вид + Прав(ДатаСтрокой, 6) + Тип + Номер;
КонецФункции

//Возвращает структуру параметров, необходимых для заполнения регистров взаиморасчетов в новой архитектуре.
//
// Возвращаемое значение:
// 		Структура:
// 			* ОбъектРасчетов - ОпределяемыйТип.ОбъектРасчетов - объект расчетов, в рамках которого происходит распределение взаиморасчетов.
// 			* АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - аналитика, в рамках которой происходит распределение взаиморасчетов.
// 			* ВалютаРасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов.
// 			* ЭтоРасчетыСКлиентами - Булево - Определяет регистры для заполнения - с клиентами или с поставщиками.
// 			* ПорядокФакт - Строка - Момент времени начиная с которого необходимо выполнить распределение, подробнее в ОперативныеВзаиморасчетыСервер.Порядок().
// 			* ПорядокПлан - Строка - Момент времени начиная с которого необходимо выполнить распределение, подробнее в ОперативныеВзаиморасчетыСервер.Порядок().
// 			* НачальноеЗаполнение - Булево - Истина, если это начальное заполнение.
// 			* Регистратор - ДокументСсылка - Документ регистратор, инициировавший распределение.
// 			* ДополнительныеСвойстваПроведения - Структура - Структура дополнительных свойств проведения, транслируемая из регистров накопления РасчетыСКлиентами РасчетыСПоставщиками:
// 				** МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Дополняется таблицей сформированных движений для дальнейшего использования в регл и упр учете
// 			* ЗаписыватьИзменения - Булево - Ложь, если требуется получить таблицу сформированных движений без записи документов.
//
Функция СтруктураПараметровЗаполненияВзаиморасчетов() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ОбъектРасчетов");
	Структура.Вставить("АналитикаУчетаПоПартнерам");
	Структура.Вставить("ВалютаРасчетов");
	Структура.Вставить("ЭтоРасчетыСКлиентами");
	Структура.Вставить("ПорядокФакт","");
	Структура.Вставить("ПорядокПлан","");
	Структура.Вставить("НачальноеЗаполнение", Ложь);
	Структура.Вставить("Регистратор", Неопределено);
	Структура.Вставить("ДополнительныеСвойстваПроведения", Неопределено);
	Структура.Вставить("ЗаписыватьИзменения", Истина);
	
	Возврат Структура;
	
КонецФункции

//Возвращает таблицу служебных документов РегистраторРасчетов для перезаписи по переданным параметрам.
//
// Параметры:
//	- Параметры - Структура - Описание:
//		* ОбъектРасчетов - ОпределяемыйТип.ОбъектРасчетов - Объект расчетов.
//		* АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - Аналитика взаиморасчетов.
//		* Валюта - СправочникСсылка.Валюты - Валюта взаиморасчетов.
//		* ЭтоРасчетыСКлиентами - Булево - это расчеты с клиентами, а не с поставщиками.
//		* Организация - Неопределено, СправочникСсылка.Организации - Организация расчета.
//	- ИмяТаблицы - Строка - Имя регистра накопления, по которому определятся свободный регистратор или нет.
//	- КоличествоЗаписей - Число - Количество записей для последующей записи в регистр.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица со следующими колонками:
//		* Ссылка - ДокументСсылка.РегистраторРасчетов - найденный служебный документ;
//		* ТребуетсяОчистка - Булево - У данного документа есть движения в переданной таблице.
//
Функция СвободныеРегистраторыРасчетов(Параметры, ИмяТаблицы, КоличествоЗаписей)
	
	Если КоличествоЗаписей = 0 Тогда
		КоличествоРегистраторов = 0;
	Иначе
		КоличествоРегистраторов = Цел(КоличествоЗаписей/РазмерПорцииЗаписи()) + 1;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры,ИмяТаблицы + "Регистраторы") Тогда
		СписокПолныхРегистраторов = Параметры[ИмяТаблицы + "Регистраторы"];
	Иначе
		СписокПолныхРегистраторов = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Валюта",                    Параметры.ВалютаРасчетов);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", Параметры.АналитикаУчетаПоПартнерам);
	Запрос.УстановитьПараметр("ОбъектРасчетов",            Параметры.ОбъектРасчетов);
	Запрос.УстановитьПараметр("СписокПолныхРегистраторов", СписокПолныхРегистраторов);
	
	ТипРасчетов = ?(Параметры.ЭтоРасчетыСКлиентами, Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом, Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	Запрос.УстановитьПараметр("ТипРасчетов", ТипРасчетов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РегистраторРасчетов.Ссылка                КАК Ссылка,
	|	СУММА(ЕСТЬNULL(Таблица.НомерСтроки,0)) > 0 КАК ТребуетсяОчистка
	|ИЗ
	|	Документ.РегистраторРасчетов КАК РегистраторРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ &ИмяТаблицы КАК Таблица
	|			ПО Таблица.Регистратор = РегистраторРасчетов.Ссылка
	|ГДЕ
	|	РегистраторРасчетов.ОбъектРасчетов              = &ОбъектРасчетов
	|	И РегистраторРасчетов.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РегистраторРасчетов.Валюта                    = &Валюта
	|	И РегистраторРасчетов.ТипРасчетов               = &ТипРасчетов
	|	И НЕ РегистраторРасчетов.Ссылка В (&СписокПолныхРегистраторов)
	|СГРУППИРОВАТЬ ПО
	|	РегистраторРасчетов.Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", "РегистрНакопления."+ИмяТаблицы);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить(); // см.СвободныеРегистраторыРасчетов
	
	Пока ТаблицаДокументов.Количество() < КоличествоРегистраторов Цикл
		ДокументОбъект = Документы.РегистраторРасчетов.СоздатьДокумент();
		ДокументОбъект.Валюта = Параметры.ВалютаРасчетов;
		ДокументОбъект.АналитикаУчетаПоПартнерам = Параметры.АналитикаУчетаПоПартнерам;
		ДокументОбъект.Организация = ?(Параметры.Организация = Неопределено,
										ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.АналитикаУчетаПоПартнерам, "Организация"),
										Параметры.Организация);
		ДокументОбъект.ОбъектРасчетов = Параметры.ОбъектРасчетов;
		ДокументОбъект.ТипРасчетов = ТипРасчетов;
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НовСтр = ТаблицаДокументов.Добавить();
		НовСтр.Ссылка = ДокументОбъект.Ссылка;
		НовСтр.ТребуетсяОчистка = Ложь;
	КонецЦикла;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

//Выполняет первоначальное заполнение регистров новой архитектуры
//
// Параметры:
//	Параметры - Структура - параметры обработчика ожидания
//	УникальныйИдентификатор - УникальныйИдентификатор - идентификатор обработчика ожидания.
//
Процедура ЗаполнитьРегистрыПриВключенииНовойАрхитектуры(Параметры, УникальныйИдентификатор) Экспорт
	
	Если НЕ ОбновлениеИнформационнойБазы.ОтложенноеОбновлениеЗавершено() Тогда
		Текст = НСтр("ru = 'Включение онлайн взаиморасчетов с партнерами возможно только после завершения отложенного обновления.'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(ТекущаяДатаСеанса());
		РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками(ТекущаяДатаСеанса());
		
		Если НЕ Параметры.Свойство("ПовторныйЗапуск") Тогда
			ЗаполнитьРегистрПереходаНаОнлайн();
		КонецЕсли;
		Константы.НачатПереходНаНовуюАрхитектуруВзаиморасчетов.Установить(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Текст = НСтр("ru = 'Включение онлайн взаиморасчетов с партнерами. Не удалось заполнить регистр перехода.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(Текст,
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	ОписаниеЗамераПерехода = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ПереходНаНовуюАрхитектуру.Многопоточный");
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ОписаниеЗамераПерехода = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ПереходНаНовуюАрхитектуру.ФайловаяБаза");
	КонецЕсли;
	Если НЕ Параметры.Свойство("ПовторныйЗапуск") Тогда
		ОчиститьРегистрыВзаиморасчетов();
		ВключитьИтогиРегистровРасчетов();
	КонецЕсли;
	
	//Фаза 1 - основной перенос
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ВсегоОбработано = ВыполнитьПереносОфлайнВзаиморасчетов();
	Иначе
		ПараметрыМП = ПараметрыМногопоточнойОбработкиРасчетов();
		ПараметрыМП.Процедура.Имя = "ОперативныеВзаиморасчетыСервер.ВыполнитьПереносОфлайнВзаиморасчетов";
		ПараметрыМП.Процедура.ПредставлениеЗадания = НСтр("ru = 'Перенос офлайн взаиморасчетов'");
		ПараметрыМП.Данные.УсловиеЗапроса = "Задания.ДатаПересчета = ДАТАВРЕМЯ(1,1,1)";
		
		ВсегоОбработано = МногопоточнаяОбработкаЗаданийКРаспределениюРасчетов(ПараметрыМП);
	КонецЕсли;
	
	
	//Фаза 2 - перенос хвостов (перепроведенные за время основного переноса)
	НомерПопытки = 0;
	Пока НомерПопытки < 5 Цикл
		Константы.НачатПереходНаНовуюАрхитектуруВзаиморасчетов.Установить(Ложь);
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами");
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(ТекущаяДатаСеанса());
			РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками(ТекущаяДатаСеанса());
			
			Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
				ВсегоОбработано = ВсегоОбработано + ВыполнитьПереносОфлайнВзаиморасчетов();
			Иначе
				ПараметрыМП.Данные.УсловиеЗапроса = "";
				КоличествоЗаписей = МногопоточнаяОбработкаЗаданийКРаспределениюРасчетов(ПараметрыМП);
				
				ВсегоОбработано = ВсегоОбработано + КоличествоЗаписей; 
			КонецЕсли;
			
			// Исправим развернутое сальдо.
			ИсправитьРазвернутоеСальдо(НачалоМесяца(ТекущаяДатаСеанса()));
			
			Константы.НоваяАрхитектураВзаиморасчетов.Установить(Истина);
			ХранилищеОбщихНастроек.Удалить("ПереходНаНовуюАрхитектуруВзаиморасчетов", "ВсегоКПереносу", Неопределено);
			
			ЗафиксироватьТранзакцию();
			
			Прервать;// Выходим из цикла попыток блокировки
			
		Исключение
			ОтменитьТранзакцию();
			
			НомерПопытки = НомерПопытки + 1;
			Текст =  НСтр("ru = 'Попытка'", ОбщегоНазначения.КодОсновногоЯзыка())+ " №" + НомерПопытки + Символы.ПС + Символы.ПС;
			Событие = НСтр("ru = 'Включение онлайн взаиморасчетов с партнерами. Этап 2.'", 
							ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(Событие,
				УровеньЖурналаРегистрации.Ошибка,,, Текст + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Если НомерПопытки >= 5 Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось завершить переход на онлайн взаиморасчеты. 
				|Ошибки см. в журнале регистрации.'");
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамераПерехода, ВсегоОбработано);
	
КонецПроцедуры

//Очищает новые регистры расчетов в транзакции с блокировкой всех расчетов.
Процедура ОчиститьРегистрыПриВыключенииНовойАрхитектуры(Параметры = Неопределено, УникальныйИдентификатор = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ВернутьДвиженияПоРасчетамСКлиентами();
		Константы.НоваяАрхитектураВзаиморасчетов.Установить(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выключение онлайн взаиморасчетов с партнерами.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
	ОчиститьРегистрыВзаиморасчетов();
	
	УдалитьСистемныеКорректировкиРегистров(Дата(1,1,1));
		
	ВключитьИтогиРегистровРасчетов();
	
КонецПроцедуры

//Заполнение новых регистров по всем объектам расчетов.
Процедура ЗаполнитьПоВсемРасчетам(НачальноеЗаполнение = Ложь) Экспорт
	
	ОчиститьРегистрыВзаиморасчетов();
	
	ТаблицаОбъектов = ПолучитьВсеОбъекты();
	Для Каждого Стр из ТаблицаОбъектов Цикл
		ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
		ЗаполнитьЗначенияСвойств(ОсновныеПараметры,Стр);
		ОсновныеПараметры.НачальноеЗаполнение = НачальноеЗаполнение;
		ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
	КонецЦикла;
	
КонецПроцедуры

#Область ИсправлениеОшибок

// Формирует текст запроса для поиска некорректных данных в расчетных регистрах. 
// 
// Параметры:
// 	ИмяВТ - Строка - Имя временной таблицы для помещения результата
// 	БезРучныхКорректировок - Булево - необходимость исключения из результата запроса Аналитик расчетов по партнерам 
// 	                                  и Объектов расчетов, по которым введены ручные корректировки регистров.
// Возвращаемое значение:
// 	Строка - Текст запроса
Функция ТекстЗапросаНекорректныхОстаткиВзаиморасчетовПоСрокам(ИмяВТ = "", БезРучныхКорректировок = Истина) Экспорт
	
	МассивТекстовЗапросов = Новый Массив;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ключи.Ссылка      КАК АналитикаУчетаПоПартнерам,
		|	Ключи.Организация КАК Организация
		|ПОМЕСТИТЬ ВтАналитика
		|ИЗ
		|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
		|ГДЕ
		|	Ключи.Организация В (&МассивОрганизаций)
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	МИНИМУМ(ВложенныйЗапрос.Период) КАК Период
		|ПОМЕСТИТЬ ПериодВводаОстатков
		|ИЗ (
		|	ВЫБРАТЬ
		|		Ввод.Дата КАК Период
		|	ИЗ
		|		Документ.ВводОстатковВзаиморасчетов КАК Ввод
		|	ГДЕ
		|		Ввод.Проведен
		|	) КАК ВложенныйЗапрос
		|;
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ТипРасчетов                           КАК ТипРасчетов,
		|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	ВложенныйЗапрос.ОбъектРасчетов                        КАК ОбъектРасчетов,
		|	ВложенныйЗапрос.Валюта                                КАК Валюта,
		|	СУММА(ВложенныйЗапрос.Сумма)                          КАК Сумма,
		|	СУММА(ВложенныйЗапрос.СуммаПоСрокам)                  КАК СуммаПоСрокам
		|ПОМЕСТИТЬ ВтОстатки
		|ИЗ (ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
		|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам                     КАК АналитикаУчетаПоПартнерам,
		|		РасчетыСКлиентами.ОбъектРасчетов                                КАК ОбъектРасчетов,
		|		РасчетыСКлиентами.Валюта                                        КАК Валюта,
		|		
		|		РасчетыСКлиентами.СуммаОстаток                                  КАК Сумма,
		|		0                                                               КАК СуммаПоСрокам
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентами.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСКлиентами
		|	ГДЕ
		|		РасчетыСКлиентами.СуммаОстаток <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)                     КАК ТипРасчетов,
		|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам                                 КАК АналитикаУчетаПоПартнерам,
		|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов                                            КАК ОбъектРасчетов,
		|		РасчетыСКлиентамиПоСрокам.Валюта                                                    КАК Валюта,
		|		
		|		0                                                                                   КАК Сумма,
		|		РасчетыСКлиентамиПоСрокам.ДолгОстаток - РасчетыСКлиентамиПоСрокам.ПредоплатаОстаток КАК СуммаПоСрокам
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСКлиентамиПоСрокам
		|	ГДЕ
		|		РасчетыСКлиентамиПоСрокам.ДолгОстаток <> 0
		|		ИЛИ РасчетыСКлиентамиПоСрокам.ПредоплатаОстаток <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
		|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам                     КАК АналитикаУчетаПоПартнерам,
		|		РасчетыСПоставщиками.ОбъектРасчетов                                КАК ОбъектРасчетов,
		|		РасчетыСПоставщиками.Валюта                                        КАК Валюта,
		|		
		|		РасчетыСПоставщиками.СуммаОстаток                                  КАК Сумма,
		|		0                                                                  КАК СуммаПоСрокам
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСПоставщиками
		|	ГДЕ
		|		РасчетыСПоставщиками.СуммаОстаток <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)                        КАК ТипРасчетов,
		|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам                                    КАК АналитикаУчетаПоПартнерам,
		|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов                                               КАК ОбъектРасчетов,
		|		РасчетыСПоставщикамиПоСрокам.Валюта                                                       КАК Валюта,
		|		
		|		0                                                                                         КАК Сумма,
		|		РасчетыСПоставщикамиПоСрокам.ПредоплатаОстаток - РасчетыСПоставщикамиПоСрокам.ДолгОстаток КАК СуммаПоСрокам
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСПоставщикамиПоСрокам
		|	ГДЕ
		|		РасчетыСПоставщикамиПоСрокам.ДолгОстаток <> 0
		|		ИЛИ РасчетыСПоставщикамиПоСрокам.ПредоплатаОстаток <> 0) КАК ВложенныйЗапрос
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПериодВводаОстатков КАК ПериодВводаОстатков
		|		ПО ИСТИНА
		|ГДЕ
		|	&НачалоМесяца > ЕСТЬNULL(ПериодВводаОстатков.Период, ДАТАВРЕМЯ(1,1,1))
		|СГРУППИРОВАТЬ ПО 
		|	ВложенныйЗапрос.ТипРасчетов,
		|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
		|	ВложенныйЗапрос.ОбъектРасчетов,
		|	ВложенныйЗапрос.Валюта
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.СуммаПоСрокам) <> СУММА(ВложенныйЗапрос.Сумма)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)    КАК ТипРасчетов,
		|	РасчетыПоСрокам.АналитикаУчетаПоПартнерам                          КАК АналитикаУчетаПоПартнерам,
		|	РасчетыПоСрокам.ОбъектРасчетов                                     КАК ОбъектРасчетов,
		|	РасчетыПоСрокам.Валюта                                             КАК Валюта,
		|	ВЫБОР КОГДА НЕ РасчетыПоСрокам.РасчетныйДокумент ЕСТЬ NULL
		|		И НЕ РасчетыПоСрокам.ДатаПлановогоПогашения ЕСТЬ NULL
		|		И НЕ РасчетыПоСрокам.ДатаВозникновения ЕСТЬ NULL
		|		ТОГДА 0
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                                              КАК Сумма,
		|	РасчетыПоСрокам.ДолгОстаток + РасчетыПоСрокам.ПредоплатаОстаток    КАК СуммаПоСрокам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыПоСрокам
		|ГДЕ
		|	РасчетыПоСрокам.ДолгОстаток < 0
		|	ИЛИ РасчетыПоСрокам.ПредоплатаОстаток < 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
		|	РасчетыПоСрокам.АналитикаУчетаПоПартнерам                          КАК АналитикаУчетаПоПартнерам,
		|	РасчетыПоСрокам.ОбъектРасчетов                                     КАК ОбъектРасчетов,
		|	РасчетыПоСрокам.Валюта                                             КАК Валюта,
		|	ВЫБОР КОГДА НЕ РасчетыПоСрокам.РасчетныйДокумент ЕСТЬ NULL
		|		И НЕ РасчетыПоСрокам.ДатаПлановогоПогашения ЕСТЬ NULL
		|		И НЕ РасчетыПоСрокам.ДатаВозникновения ЕСТЬ NULL
		|		ТОГДА 0
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                                              КАК Сумма,
		|	РасчетыПоСрокам.ДолгОстаток + РасчетыПоСрокам.ПредоплатаОстаток    КАК СуммаПоСрокам
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыПоСрокам
		|ГДЕ
		|	РасчетыПоСрокам.ДолгОстаток < 0
		|	ИЛИ РасчетыПоСрокам.ПредоплатаОстаток < 0";
	Если Не БезРучныхКорректировок Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоМесяца", "&НачалоПериода");
	КонецЕсли;
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "УНИЧТОЖИТЬ ПериодВводаОстатков";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапросаВтРучныхКорректировок();
	Если Не БезРучныхКорректировок Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоМесяца", "&НачалоПериода");
	КонецЕсли;
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	Если БезРучныхКорректировок Тогда
		ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Аналитика.Организация             КАК Организация,
			|	Остатки.ТипРасчетов               КАК ТипРасчетов,
			|	Остатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	Остатки.ОбъектРасчетов            КАК ОбъектРасчетов,
			|	Остатки.Валюта                    КАК ВалютаРасчетов
			|ПОМЕСТИТЬ ИмяВТ
			|ИЗ ВтОстатки КАК Остатки
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
			|		ПО Аналитика.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам
			|ГДЕ
			|	НЕ (Остатки.АналитикаУчетаПоПартнерам, Остатки.ОбъектРасчетов) В
			|				(ВЫБРАТЬ
			|					ВтРучныеКорректировки.АналитикаУчетаПоПартнерам,
			|					ВтРучныеКорректировки.ОбъектРасчетов
			|				ИЗ
			|					ВтРучныеКорректировки)
			|	И НЕ Остатки.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)";
	Иначе
		ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Аналитика.Организация             КАК Организация,
			|	Остатки.ТипРасчетов               КАК ТипРасчетов,
			|	Остатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	Остатки.ОбъектРасчетов            КАК ОбъектРасчетов,
			|	Остатки.Валюта                    КАК ВалютаРасчетов,
			|	ВтРучныеКорректировки.Регистратор КАК РучнаяКорректировка
			|ПОМЕСТИТЬ ИмяВТ
			|ИЗ
			|	ВтОстатки КАК Остатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
			|		ПО (Аналитика.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРучныеКорректировки КАК ВтРучныеКорректировки
			|		ПО Остатки.АналитикаУчетаПоПартнерам = ВтРучныеКорректировки.АналитикаУчетаПоПартнерам
			|			И Остатки.ОбъектРасчетов = ВтРучныеКорректировки.ОбъектРасчетов
			|ГДЕ
			|	&ПериодВДиапазонеПересчета";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяВТ) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ ИмяВТ","ПОМЕСТИТЬ "+ИмяВТ);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ ИмяВТ","");
	КонецЕсли;
	
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапросов, ";");
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для поиска записей с развернутым сальдо в расчетных регистрах. 
// 
// Параметры:
// 	ИмяВТ - Строка - Имя временной таблицы для помещения результата
// 	БезРучныхКорректировок - Булево - необходимость исключения из результата запроса Аналитик расчетов по партнерам 
// Возвращаемое значение:
// 	Строка - Текст запроса
Функция ТекстЗапросаРазвернутоеСальдо(ИмяВт = "", БезРучныхКорректировок = Истина) Экспорт
	
	МассивТекстовЗапросов = Новый Массив;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ключи.Ссылка      КАК АналитикаУчетаПоПартнерам,
		|	Ключи.Организация КАК Организация
		|ПОМЕСТИТЬ ВтАналитика
		|ИЗ
		|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
		|ГДЕ
		|	Ключи.Организация В (&МассивОрганизаций)
		|	И &ПорядокЗачетаДокументовПоДатеОперации
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам";
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам              КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСКлиентамиОстатки.ОбъектРасчетов                         КАК ОбъектРасчетов,
		|	РасчетыСКлиентамиОстатки.Валюта                                 КАК Валюта,
		|	РасчетыСКлиентамиОстатки.ДолгОстаток                            КАК ДолгОстаток,
		|	РасчетыСКлиентамиОстатки.ПредоплатаОстаток                      КАК ПредоплатаОстаток
		|ПОМЕСТИТЬ ВтСальдо
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСКлиентамиОстатки
		|ГДЕ
		|	РасчетыСКлиентамиОстатки.ДолгОстаток > 0 
		|	И РасчетыСКлиентамиОстатки.ПредоплатаОстаток > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам              КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСПоставщикамиОстатки.ОбъектРасчетов                         КАК ОбъектРасчетов,
		|	РасчетыСПоставщикамиОстатки.Валюта                                 КАК Валюта,
		|	РасчетыСПоставщикамиОстатки.ДолгОстаток                            КАК ДолгОстаток,
		|	РасчетыСПоставщикамиОстатки.ПредоплатаОстаток                      КАК ПредоплатаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&НачалоМесяца, АналитикаУчетаПоПартнерам В
		|			(ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)) КАК РасчетыСПоставщикамиОстатки
		|ГДЕ
		|	РасчетыСПоставщикамиОстатки.ДолгОстаток > 0 
		|	И РасчетыСПоставщикамиОстатки.ПредоплатаОстаток > 0";
	Если Не БезРучныхКорректировок Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоМесяца", "&НачалоПериода");
	КонецЕсли;
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапросаВтРучныхКорректировок();
	Если Не БезРучныхКорректировок Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоМесяца", "&НачалоПериода");
	КонецЕсли;
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	Если БезРучныхКорректировок Тогда
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Аналитика.Организация             КАК Организация,
			|	Сальдо.ТипРасчетов                КАК ТипРасчетов,
			|	Сальдо.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
			|	Сальдо.ОбъектРасчетов             КАК ОбъектРасчетов,
			|	Сальдо.Валюта                     КАК ВалютаРасчетов,
			|	Сальдо.ДолгОстаток                КАК ДолгОстаток,
			|	Сальдо.ПредоплатаОстаток          КАК ПредоплатаОстаток
			|ПОМЕСТИТЬ ИмяВТ
			|ИЗ ВтСальдо КАК Сальдо
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
			|		ПО Аналитика.АналитикаУчетаПоПартнерам = Сальдо.АналитикаУчетаПоПартнерам
			|ГДЕ
			|	НЕ (Сальдо.АналитикаУчетаПоПартнерам, Сальдо.ОбъектРасчетов) В
			|				(ВЫБРАТЬ
			|					ВтРучныеКорректировки.АналитикаУчетаПоПартнерам,
			|					ВтРучныеКорректировки.ОбъектРасчетов
			|				ИЗ
			|					ВтРучныеКорректировки)
			|	И НЕ Сальдо.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)";
	Иначе
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Аналитика.Организация             КАК Организация,
			|	Сальдо.ТипРасчетов                КАК ТипРасчетов,
			|	Сальдо.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
			|	Сальдо.ОбъектРасчетов             КАК ОбъектРасчетов,
			|	Сальдо.Валюта                     КАК ВалютаРасчетов,
			|	Сальдо.ДолгОстаток                КАК ДолгОстаток,
			|	Сальдо.ПредоплатаОстаток          КАК ПредоплатаОстаток,
			|	ВтРучныеКорректировки.Регистратор КАК РучнаяКорректировка
			|ПОМЕСТИТЬ ИмяВТ
			|ИЗ
			|	ВтСальдо КАК Сальдо
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
			|		ПО (Аналитика.АналитикаУчетаПоПартнерам = Сальдо.АналитикаУчетаПоПартнерам)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРучныеКорректировки КАК ВтРучныеКорректировки
			|		ПО Сальдо.АналитикаУчетаПоПартнерам = ВтРучныеКорректировки.АналитикаУчетаПоПартнерам
			|			И Сальдо.ОбъектРасчетов = ВтРучныеКорректировки.ОбъектРасчетов
			|ГДЕ
			|	&ПериодВДиапазонеПересчета";
	КонецЕсли;
	
	Если ИмяВт <> "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ ИмяВТ","ПОМЕСТИТЬ "+ИмяВт);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ ИмяВТ","");
	КонецЕсли;
	
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапросов, ";");
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Временная таблица для определения наличичия ручных корректировок регистров 
// при проверке развернутого сальдо и некорректных остатков
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаВтРучныхКорректировок()
	
	Возврат "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов КАК ОбъектРасчетов,
	|	МАКСИМУМ(ВложенныйЗапрос.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ВтРучныеКорректировки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		РасчетыСКлиентамиПоСрокам.Регистратор               КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|	ГДЕ
	|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.АналитикаУчетаПоПартнерам
	|			ИЗ
	|				ВтАналитика КАК Т)
	|		И РасчетыСКлиентамиПоСрокам.Активность
	|		И РасчетыСКлиентамиПоСрокам.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|		И ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокам.Регистратор КАК Документ.КорректировкаРегистров).Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиРегистров.РучнаяКорректировка)
	|		И РасчетыСКлиентамиПоСрокам.Период <= &НачалоМесяца
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов,
	|		РасчетыСПоставщикамиПоСрокам.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|	ГДЕ
	|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.АналитикаУчетаПоПартнерам
	|			ИЗ
	|				ВтАналитика КАК Т)
	|		И РасчетыСПоставщикамиПоСрокам.Активность
	|		И РасчетыСПоставщикамиПоСрокам.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|		И ВЫРАЗИТЬ(РасчетыСПоставщикамиПоСрокам.Регистратор КАК Документ.КорректировкаРегистров).Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиРегистров.РучнаяКорректировка)
	|		И РасчетыСПоставщикамиПоСрокам.Период <= &НачалоМесяца
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентами.ОбъектРасчетов,
	|		РасчетыСКлиентами.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|	ГДЕ
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация В
	|			(ВЫБРАТЬ
	|				Т.АналитикаУчетаПоПартнерам
	|			ИЗ
	|				ВтАналитика КАК Т)
	|		И РасчетыСКлиентами.Активность
	|		И РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|		И ВЫРАЗИТЬ(РасчетыСКлиентами.Регистратор КАК Документ.КорректировкаРегистров).Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиРегистров.РучнаяКорректировка)
	|		И РасчетыСКлиентами.Период <= &НачалоМесяца
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщиками.ОбъектРасчетов,
	|		РасчетыСПоставщиками.Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|	ГДЕ
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация В
	|			(ВЫБРАТЬ
	|				Т.АналитикаУчетаПоПартнерам
	|			ИЗ
	|				ВтАналитика КАК Т)
	|		И РасчетыСПоставщиками.Активность
	|		И РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|		И ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.КорректировкаРегистров).Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииКорректировкиРегистров.РучнаяКорректировка)
	|		И РасчетыСПоставщиками.Период <= &НачалоМесяца) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов
	|";
	
КонецФункции

// Исправление остатков по взаиморасчетам
// 
// Параметры:
// 	Период - Дата - Период проверки, на начало месяца периода будут проверены остатки, 
//		если они некорректные, то будет создана корректировка на конец предыдущего месяца.
//		Если на начало периода остатки в порядке, а на начало следующего месяца - нет, то будет запущен частичный пересчет расчетов.
// 	МассивОрганизаций - Массив - Массив организация, по которым требуется исправить остатки взаиморасчетов
Процедура ИсправитьОстаткиВзаиморасчетов(Период, ЗНАЧ МассивОрганизаций = Неопределено) Экспорт
	
	ДатаКорректировки    = НачалоМесяца(Период)-1; //Для корректировки и движений
	ПорядокКорректировки = Формат(ДатаКорректировки,"ДФ=ггггММдд9ЧЧммсс99"); //Для запроса данных остатков.
	ПериодРасчета        = НачалоМесяца(Период); //Для сравнения остатков
	ПорядокРасчета       = Формат(ПериодРасчета, "ДФ=ггггММдд00000000"); //Для запуска пересчета
	
	МассивОрганизаций = ?(МассивОрганизаций = Неопределено,
							Справочники.Организации.ДоступныеОрганизации(),
							МассивОрганизаций);
	
	ТипыРасчетов = Новый Массив;
	ТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	ТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = ТекстЗапросаНекорректныхОстаткиВзаиморасчетовПоСрокам();
	Запрос.УстановитьПараметр("НачалоМесяца",       ПериодРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций",  МассивОрганизаций);
	Запрос.УстановитьПараметр("Порядок",            ПорядокКорректировки);
	
	//Удалим корректировки
	НекорректныеОстатки = Запрос.Выполнить().Выгрузить();
	
	Если НекорректныеОстатки.Количество() > 0 Тогда
		МассивОрганизацийДляОбработки = НекорректныеОстатки.Скопировать(,"Организация");
		МассивОрганизацийДляОбработки.Свернуть("Организация");
		МассивОрганизацийДляОбработки = МассивОрганизацийДляОбработки.ВыгрузитьКолонку("Организация");
		Для Каждого Организация Из МассивОрганизаций Цикл
			УдалитьСистемныеКорректировкиРегистров(ДатаКорректировки,Организация)
		КонецЦикла;
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика; УНИЧТОЖИТЬ ВтОстатки; УНИЧТОЖИТЬ ВтРучныеКорректировки";
		Запрос.Выполнить();
		
		//Перечитываем остатки
		Запрос.Текст = ТекстЗапросаНекорректныхОстаткиВзаиморасчетовПоСрокам();
		
		НекорректныеОстатки = Запрос.Выполнить().Выгрузить();
		НекорректныеОстатки.Индексы.Добавить("ТипРасчетов, Организация");
		СтруктураПоиска = Новый Структура("ТипРасчетов, Организация");
		
		МассивОрганизацийДляОбработки = НекорректныеОстатки.Скопировать(,"Организация");
		МассивОрганизацийДляОбработки.Свернуть("Организация");
		МассивОрганизацийДляОбработки = МассивОрганизацийДляОбработки.ВыгрузитьКолонку("Организация");
		
		Для Каждого Организация Из МассивОрганизацийДляОбработки Цикл
			
			//удалим корректировки развернутого сальдо, т.к. они могут быть уже неактуальны
			КорректировкаОбъект = КорректировкаРегистров(ДатаКорректировки, Организация, Перечисления.ОперацииКорректировкиРегистров.ИсправлениеРазвернутогоСальдоВзаиморасчетов);
			КорректировкаОбъект.Удалить();
			
			КорректировкаОбъект = КорректировкаРегистров(ДатаКорректировки, Организация, Перечисления.ОперацииКорректировкиРегистров.ИсправлениеРазрывовОстатковВзаиморасчетов);
			
			Для Каждого ТипРасчетов Из ТипыРасчетов Цикл
				
				Если ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
					Движения = КорректировкаОбъект.Движения["РасчетыСКлиентамиПоСрокам"]; // РегистрНакопленияНаборЗаписей
				Иначе
					Движения = КорректировкаОбъект.Движения["РасчетыСПоставщикамиПоСрокам"]; // РегистрНакопленияНаборЗаписей
				КонецЕсли;
				
				СтруктураПоиска.ТипРасчетов = ТипРасчетов;
				СтруктураПоиска.Организация = Организация;
				ЗаписиНекорректныхОстатков = НекорректныеОстатки.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого ЗаписьНекорректныхОстатков Из ЗаписиНекорректныхОстатков Цикл
					
					//Рассчитаем корректные остатки.
					
					ДополнительныеСвойства = Новый Структура;
					
					ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
					
					ЗаполнитьЗначенияСвойств(ОсновныеПараметры, ЗаписьНекорректныхОстатков);
					ОсновныеПараметры.ЭтоРасчетыСКлиентами             = ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
					ОсновныеПараметры.ДополнительныеСвойстваПроведения = ДополнительныеСвойства;
					ОсновныеПараметры.ЗаписыватьИзменения              = Ложь;
					
					ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
					
					//Сравним с остатками до и рассчитаем записи корректировки.
					
					Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", ЗаписьНекорректныхОстатков.АналитикаУчетаПоПартнерам);
					Запрос.УстановитьПараметр("ОбъектРасчетов",            ЗаписьНекорректныхОстатков.ОбъектРасчетов);
					Запрос.УстановитьПараметр("Валюта",                    ЗаписьНекорректныхОстатков.ВалютаРасчетов);
					Если ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
						Запрос.УстановитьПараметр("РасчетыПоСрокам",           ДополнительныеСвойства["РасчетыСКлиентамиПоСрокам"]);
					Иначе
						Запрос.УстановитьПараметр("РасчетыПоСрокам",           ДополнительныеСвойства["РасчетыСПоставщикамиПоСрокам"]);
					КонецЕсли;
					
					Запрос.Текст = "
						//Записи после
						|ВЫБРАТЬ
						|	РасчетыПоСрокамПосле.Период                        КАК Период,
						|	РасчетыПоСрокамПосле.ВидДвижения                   КАК ВидДвижения,
						|	
						|	РасчетыПоСрокамПосле.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
						|	РасчетыПоСрокамПосле.ОбъектРасчетов                КАК ОбъектРасчетов,
						|	РасчетыПоСрокамПосле.Валюта                        КАК Валюта,
						|	РасчетыПоСрокамПосле.РасчетныйДокумент             КАК РасчетныйДокумент,
						|	РасчетыПоСрокамПосле.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
						|	РасчетыПоСрокамПосле.ДатаВозникновения             КАК ДатаВозникновения,
						|	
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.Предоплата КАК ЧИСЛО(31,2))     КАК Предоплата,
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.ПредоплатаРегл КАК ЧИСЛО(31,2)) КАК ПредоплатаРегл,
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.ПредоплатаУпр КАК ЧИСЛО(31,2))  КАК ПредоплатаУпр,
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.Долг КАК ЧИСЛО(31,2))           КАК Долг,
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.ДолгРегл КАК ЧИСЛО(31,2))       КАК ДолгРегл,
						|	ВЫРАЗИТЬ(РасчетыПоСрокамПосле.ДолгУпр КАК ЧИСЛО(31,2))        КАК ДолгУпр,
						|	
						|	РасчетыПоСрокамПосле.ПорядокЗачета                 КАК ПорядокЗачета,
						|	РасчетыПоСрокамПосле.ПорядокОперации               КАК ПорядокОперации,
						|	РасчетыПоСрокамПосле.СвязанныйДокумент             КАК СвязанныйДокумент,
						|	РасчетыПоСрокамПосле.ВалютаДокумента               КАК ВалютаДокумента,
						|	РасчетыПоСрокамПосле.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
						|ПОМЕСТИТЬ РасчетыПоСрокамПосле
						|ИЗ &РасчетыПоСрокам КАК РасчетыПоСрокамПосле
						|ИНДЕКСИРОВАТЬ ПО
						|	АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, РасчетныйДокумент
						|;
						//Расхождения
						|ВЫБРАТЬ
						|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
						|	ВложенныйЗапрос.ОбъектРасчетов            КАК ОбъектРасчетов,
						|	ВложенныйЗапрос.Валюта                    КАК Валюта,
						|	ВложенныйЗапрос.РасчетныйДокумент         КАК РасчетныйДокумент,
						|	ВложенныйЗапрос.ДатаПлановогоПогашения    КАК ДатаПлановогоПогашения,
						|	ВложенныйЗапрос.ДатаВозникновения         КАК ДатаВозникновения,
						|	СУММА(ВложенныйЗапрос.Предоплата)         КАК Предоплата,
						|	СУММА(ВложенныйЗапрос.ПредоплатаРегл)     КАК ПредоплатаРегл,
						|	СУММА(ВложенныйЗапрос.ПредоплатаУпр)      КАК ПредоплатаУпр,
						|	СУММА(ВложенныйЗапрос.Долг)               КАК Долг,
						|	СУММА(ВложенныйЗапрос.ДолгРегл)           КАК ДолгРегл,
						|	СУММА(ВложенныйЗапрос.ДолгУпр)            КАК ДолгУпр
						|ПОМЕСТИТЬ ТаблицаИзменений
						|ИЗ
						|	(ВЫБРАТЬ
						|		РасчетыПоСрокамДо.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
						|		РасчетыПоСрокамДо.ОбъектРасчетов            КАК ОбъектРасчетов,
						|		РасчетыПоСрокамДо.Валюта                    КАК Валюта,
						|		РасчетыПоСрокамДо.РасчетныйДокумент         КАК РасчетныйДокумент,
						|		РасчетыПоСрокамДо.ДатаПлановогоПогашения    КАК ДатаПлановогоПогашения,
						|		РасчетыПоСрокамДо.ДатаВозникновения         КАК ДатаВозникновения,
						|		-РасчетыПоСрокамДо.ПредоплатаОстаток        КАК Предоплата,
						|		-РасчетыПоСрокамДо.ПредоплатаРеглОстаток    КАК ПредоплатаРегл,
						|		-РасчетыПоСрокамДо.ПредоплатаУпрОстаток     КАК ПредоплатаУпр,
						|		-РасчетыПоСрокамДо.ДолгОстаток              КАК Долг,
						|		-РасчетыПоСрокамДо.ДолгРеглОстаток          КАК ДолгРегл,
						|		-РасчетыПоСрокамДо.ДолгУпрОстаток           КАК ДолгУпр
						|	ИЗ
						|		РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоМесяца, 
						|			АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
						|			И ОбъектРасчетов = &ОбъектРасчетов
						|			И Валюта = &Валюта) КАК РасчетыПоСрокамДо
						|		
						|	ОБЪЕДИНИТЬ ВСЕ
						|	
						|	ВЫБРАТЬ
						|		РасчетыПоСрокамПосле.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
						|		РасчетыПоСрокамПосле.ОбъектРасчетов            КАК ОбъектРасчетов,
						|		РасчетыПоСрокамПосле.Валюта                    КАК Валюта,
						|		РасчетыПоСрокамПосле.РасчетныйДокумент         КАК РасчетныйДокумент,
						|		РасчетыПоСрокамПосле.ДатаПлановогоПогашения    КАК ДатаПлановогоПогашения,
						|		РасчетыПоСрокамПосле.ДатаВозникновения         КАК ДатаВозникновения,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.Предоплата
						|			ИНАЧЕ РасчетыПоСрокамПосле.Предоплата
						|		КОНЕЦ                                          КАК Предоплата,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.ПредоплатаРегл
						|			ИНАЧЕ РасчетыПоСрокамПосле.ПредоплатаРегл
						|		КОНЕЦ                                          КАК ПредоплатаРегл,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.ПредоплатаУпр
						|			ИНАЧЕ РасчетыПоСрокамПосле.ПредоплатаУпр
						|		КОНЕЦ                                          КАК ПредоплатаУпр,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.Долг
						|			ИНАЧЕ РасчетыПоСрокамПосле.Долг
						|		КОНЕЦ                                          КАК Долг,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.ДолгРегл
						|			ИНАЧЕ РасчетыПоСрокамПосле.ДолгРегл
						|		КОНЕЦ                                          КАК ДолгРегл,
						|		ВЫБОР КОГДА РасчетыПоСрокамПосле.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
						|				ТОГДА -РасчетыПоСрокамПосле.ДолгУпр
						|			ИНАЧЕ РасчетыПоСрокамПосле.ДолгУпр
						|		КОНЕЦ                                          КАК ДолгУпр
						|	ИЗ
						|		РасчетыПоСрокамПосле КАК РасчетыПоСрокамПосле
						|	ГДЕ
						|		РасчетыПоСрокамПосле.Период < &НачалоМесяца) КАК ВложенныйЗапрос
						|СГРУППИРОВАТЬ ПО
						|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
						|	ВложенныйЗапрос.ОбъектРасчетов,
						|	ВложенныйЗапрос.Валюта,
						|	ВложенныйЗапрос.РасчетныйДокумент,
						|	ВложенныйЗапрос.ДатаПлановогоПогашения,
						|	ВложенныйЗапрос.ДатаВозникновения
						|ИМЕЮЩИЕ
						|	СУММА(ВложенныйЗапрос.Предоплата) <> 0 ИЛИ СУММА(ВложенныйЗапрос.Долг) <> 0
						|ИНДЕКСИРОВАТЬ ПО
						|	АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, РасчетныйДокумент
						|;
						|
						//Данные для движений
						|ВЫБРАТЬ
						|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                       КАК ВидДвижения,
						|	
						|	Изменения.АналитикаУчетаПоПартнерам                          КАК АналитикаУчетаПоПартнерам,
						|	Изменения.ОбъектРасчетов                                     КАК ОбъектРасчетов,
						|	Изменения.Валюта                                             КАК Валюта,
						|	Изменения.РасчетныйДокумент                                  КАК РасчетныйДокумент,
						|	Изменения.ДатаПлановогоПогашения                             КАК ДатаПлановогоПогашения,
						|	Изменения.ДатаВозникновения                                  КАК ДатаВозникновения,
						|	
						|	Изменения.Предоплата                                         КАК Предоплата,
						|	Изменения.ПредоплатаРегл                                     КАК ПредоплатаРегл,
						|	Изменения.ПредоплатаУпр                                      КАК ПредоплатаУпр,
						|	Изменения.Долг                                               КАК Долг,
						|	Изменения.ДолгРегл                                           КАК ДолгРегл,
						|	Изменения.ДолгУпр                                            КАК ДолгУпр,
						|	
						|	МИНИМУМ(РасчетыПоСрокамПосле.ПорядокЗачета)                  КАК ПорядокЗачета,
						|	МИНИМУМ(РасчетыПоСрокамПосле.ПорядокОперации)                КАК ПорядокОперации,
						|	МАКСИМУМ(РасчетыПоСрокамПосле.СвязанныйДокумент)             КАК СвязанныйДокумент,
						|	МИНИМУМ(РасчетыПоСрокамПосле.ВалютаДокумента)                КАК ВалютаДокумента,
						|	МАКСИМУМ(РасчетыПоСрокамПосле.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
						|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)    КАК ХозяйственнаяОперация
						|
						|ИЗ
						|	ТаблицаИзменений КАК Изменения
						|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетыПоСрокамПосле КАК РасчетыПоСрокамПосле
						|			ПО РасчетыПоСрокамПосле.АналитикаУчетаПоПартнерам    = Изменения.АналитикаУчетаПоПартнерам
						|				И РасчетыПоСрокамПосле.ОбъектРасчетов            = Изменения.ОбъектРасчетов
						|				И РасчетыПоСрокамПосле.Валюта                    = Изменения.Валюта
						|				И РасчетыПоСрокамПосле.РасчетныйДокумент         = Изменения.РасчетныйДокумент
						|ГДЕ
						|	Изменения.Предоплата > 0 ИЛИ Изменения.Долг > 0
						|СГРУППИРОВАТЬ ПО
						|	Изменения.АналитикаУчетаПоПартнерам,
						|	Изменения.ОбъектРасчетов,
						|	Изменения.Валюта,
						|	Изменения.РасчетныйДокумент,
						|	Изменения.ДатаПлановогоПогашения,
						|	Изменения.ДатаВозникновения,
						|	Изменения.Предоплата,
						|	Изменения.ПредоплатаРегл,
						|	Изменения.ПредоплатаУпр,
						|	Изменения.Долг,
						|	Изменения.ДолгРегл,
						|	Изменения.ДолгУпр
						|	
						|ОБЪЕДИНИТЬ ВСЕ
						|	
						|ВЫБРАТЬ
						|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
						|	
						|	Изменения.АналитикаУчетаПоПартнерам                       КАК АналитикаУчетаПоПартнерам,
						|	Изменения.ОбъектРасчетов                                  КАК ОбъектРасчетов,
						|	Изменения.Валюта                                          КАК Валюта,
						|	Изменения.РасчетныйДокумент                               КАК РасчетныйДокумент,
						|	Изменения.ДатаПлановогоПогашения                          КАК ДатаПлановогоПогашения,
						|	Изменения.ДатаВозникновения                               КАК ДатаВозникновения,
						|	
						|	-Изменения.Предоплата                                     КАК Предоплата,
						|	-Изменения.ПредоплатаРегл                                 КАК ПредоплатаРегл,
						|	-Изменения.ПредоплатаУпр                                  КАК ПредоплатаУпр,
						|	-Изменения.Долг                                           КАК Долг,
						|	-Изменения.ДолгРегл                                       КАК ДолгРегл,
						|	-Изменения.ДолгУпр                                        КАК ДолгУпр,
						|	
						|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокЗачета)                  КАК ПорядокЗачета,
						|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокОперации)                КАК ПорядокОперации,
						|	МАКСИМУМ(РасчетыПоСрокамДо.СвязанныйДокумент)             КАК СвязанныйДокумент,
						|	МИНИМУМ(РасчетыПоСрокамДо.ВалютаДокумента)                КАК ВалютаДокумента,
						|	МАКСИМУМ(РасчетыПоСрокамДо.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
						|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация
						|
						|ИЗ
						|	ТаблицаИзменений КАК Изменения
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокамДо
						|			ПО РасчетыПоСрокамДо.АналитикаУчетаПоПартнерам    = Изменения.АналитикаУчетаПоПартнерам
						|				И РасчетыПоСрокамДо.ОбъектРасчетов            = Изменения.ОбъектРасчетов
						|				И РасчетыПоСрокамДо.Валюта                    = Изменения.Валюта
						|				И РасчетыПоСрокамДо.РасчетныйДокумент         = Изменения.РасчетныйДокумент
						|				И РасчетыПоСрокамДо.Период                    < &НачалоМесяца
						|				И РасчетыПоСрокамДо.Активность
						|ГДЕ
						|	Изменения.Предоплата < 0 ИЛИ Изменения.Долг < 0
						|СГРУППИРОВАТЬ ПО
						|	Изменения.АналитикаУчетаПоПартнерам,
						|	Изменения.ОбъектРасчетов,
						|	Изменения.Валюта,
						|	Изменения.РасчетныйДокумент,
						|	Изменения.ДатаПлановогоПогашения,
						|	Изменения.ДатаВозникновения,
						|	-Изменения.Предоплата,
						|	-Изменения.ПредоплатаРегл,
						|	-Изменения.ПредоплатаУпр,
						|	-Изменения.Долг,
						|	-Изменения.ДолгРегл,
						|	-Изменения.ДолгУпр";
						
						Если ТипРасчетов <> Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
							Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"РегистрНакопления.РасчетыСКлиентамиПоСрокам",
								"РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
						КонецЕсли;
						
						
						Результат = Запрос.Выполнить();
						Выборка = Результат.Выбрать();
						
						Запрос.Текст = "УНИЧТОЖИТЬ РасчетыПоСрокамПосле; УНИЧТОЖИТЬ ТаблицаИзменений";
						Запрос.Выполнить();
						
						Пока Выборка.Следующий() Цикл
							
							НовСтр = Движения.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
							
							НовСтр.ДокументРегистратор = КорректировкаОбъект.Ссылка;
							НовСтр.Период = ДатаКорректировки;
							
						КонецЦикла;
						
				КонецЦикла;
				
				Движения.Записать();
				
				Для Каждого ЗаписьНекорректныхОстатков Из ЗаписиНекорректныхОстатков Цикл
					
					ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
					
					ЗаполнитьЗначенияСвойств(ОсновныеПараметры, ЗаписьНекорректныхОстатков);
					ОсновныеПараметры.ЭтоРасчетыСКлиентами = ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
					ОсновныеПараметры.ПорядокФакт              = ПорядокРасчета;
					ОсновныеПараметры.ПорядокПлан              = ПорядокРасчета;
					
					ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если КорректировкаОбъект.Движения.РасчетыСКлиентамиПоСрокам.Количество() = 0 
				И КорректировкаОбъект.Движения.РасчетыСПоставщикамиПоСрокам.Количество() = 0 Тогда
				КорректировкаОбъект.Удалить();
			Иначе
				ДополнитьКорректировкуДвижениямиПоПрочимДоходамРасходам(КорректировкаОбъект);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика; УНИЧТОЖИТЬ ВтОстатки; УНИЧТОЖИТЬ ВтРучныеКорректировки";
	Запрос.Выполнить();
	
	ПроверитьИсправитьПлановыеОплаты(ПериодРасчета);
	
	//Если на начало периода все хорошо, а на конец есть некорректные остатки - пересчитаем их.
	Запрос.Текст = ТекстЗапросаНекорректныхОстаткиВзаиморасчетовПоСрокам();
	Запрос.УстановитьПараметр("НачалоМесяца",       КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("Порядок",            Формат(КонецМесяца(ПериодРасчета),"ДФ=ггггММдд9ЧЧммсс99"));
	НекорректныеОстатки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из НекорректныеОстатки Цикл
		
		ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
		
		ЗаполнитьЗначенияСвойств(ОсновныеПараметры, Стр);
		ОсновныеПараметры.ЭтоРасчетыСКлиентами = Стр.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		ОсновныеПараметры.ПорядокПлан              = ПорядокРасчета;
		ОсновныеПараметры.ПорядокФакт              = ПорядокРасчета;
		
		ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьИсправитьПлановыеОплаты(НачалоМесяца)
	 //Проверим плановые оплаты на развернутый остаток, если есть - пересчитаем с начала ведения учета.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПланОплатОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентамиПланОплатОстатки.ОбъектРасчетов            КАК ОбъектРасчетов,
	|	РасчетыСКлиентамиПланОплатОстатки.Валюта                    КАК ВалютаРасчетов,
	|	РасчетыСКлиентамиПланОплатОстатки.КОплатеОстаток            КАК КОплатеОстаток,
	|	РасчетыСКлиентамиПланОплатОстатки.ОплаченоОстаток           КАК ОплаченоОстаток,
	|	ИСТИНА                                                      КАК ЭтоРасчетыСКлиентами
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОплат.Остатки(&НачалоМесяца, ) КАК РасчетыСКлиентамиПланОплатОстатки
	|ГДЕ
	|	РасчетыСКлиентамиПланОплатОстатки.КОплатеОстаток <> 0
	|	И РасчетыСКлиентамиПланОплатОстатки.ОплаченоОстаток <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПланОплат.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПланОплат.ОбъектРасчетов            КАК ОбъектРасчетов,
	|	РасчетыСПоставщикамиПланОплат.Валюта                    КАК ВалютаРасчетов,
	|	РасчетыСПоставщикамиПланОплат.КОплатеОстаток            КАК КОплатеОстаток,
	|	РасчетыСПоставщикамиПланОплат.ОплаченоОстаток           КАК ОплаченоОстаток,
	|	ЛОЖЬ                                                    КАК ЭтоРасчетыСКлиентами
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПланОплат.Остатки(&НачалоМесяца, ) КАК РасчетыСПоставщикамиПланОплат
	|ГДЕ
	|	РасчетыСПоставщикамиПланОплат.КОплатеОстаток <> 0
	|	И РасчетыСПоставщикамиПланОплат.ОплаченоОстаток <> 0";
	
	НекорректныеОстаткиПланов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из НекорректныеОстаткиПланов Цикл
		
		ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
		ЗаполнитьЗначенияСвойств(ОсновныеПараметры, Стр);
		ОсновныеПараметры.НачальноеЗаполнение = Истина;
		ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

// Исправление развернутого сальдо по взаиморасчетам
// 
// Параметры:
// 	Период - Дата - Период проверки, требуется указать конец месяца
// 	МассивОрганизаций - Массив - Массив организация, по которым требуется исправить развернутое сальдо взаиморасчетов
Процедура ИсправитьРазвернутоеСальдо(Период, ЗНАЧ МассивОрганизаций = Неопределено) Экспорт
	
	ДатаКорректировки    = НачалоМесяца(Период)-1; //Для корректировки и движений
	ПорядокКорректировки = Формат(ДатаКорректировки,"ДФ=ггггММдд9ЧЧммсс99"); //Для запроса данных остатков.
	ПериодРасчета        = НачалоМесяца(Период); //Для сравнения остатков
	ПорядокРасчета       = Формат(ПериодРасчета, "ДФ=ггггММдд00000000"); //Для запуска пересчета
	
	МассивОрганизаций = ?(МассивОрганизаций = Неопределено,
							Справочники.Организации.ДоступныеОрганизации(),
							МассивОрганизаций);
	
	ТипыРасчетов = Новый Массив;
	ТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	ТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = ТекстЗапросаРазвернутоеСальдо("АналитикиСуммы");
	Запрос.УстановитьПараметр("НачалоМесяца",       ПериодРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций",  МассивОрганизаций);
	Запрос.УстановитьПараметр("Порядок",            ПорядокКорректировки);
	Запрос.УстановитьПараметр("ПорядокЗачетаДокументовПоДатеОперации", 
	                          Константы.ПорядокЗачетаДокументовПоДатеОперации.Получить() = 0);
	Запрос.Выполнить();
	
	РазвернутоеСальдо = Запрос.МенеджерВременныхТаблиц.Таблицы["АналитикиСуммы"].ПолучитьДанные().Выгрузить();
	
	МассивОрганизацийДляОбработки = РазвернутоеСальдо.Скопировать(,"Организация");
	МассивОрганизацийДляОбработки.Свернуть("Организация");
	МассивОрганизацийДляОбработки = МассивОрганизацийДляОбработки.ВыгрузитьКолонку("Организация");
	
	Если РазвернутоеСальдо.Количество() > 0 Тогда
		Для Каждого Организация Из МассивОрганизаций Цикл
			УдалитьСистемныеКорректировкиРегистров(ДатаКорректировки, Организация, Перечисления.ОперацииКорректировкиРегистров.ИсправлениеРазвернутогоСальдоВзаиморасчетов)
		КонецЦикла;
		ПроверитьИсправитьПлановыеОплаты(ПериодРасчета);
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика; УНИЧТОЖИТЬ ВтСальдо; УНИЧТОЖИТЬ АналитикиСуммы; УНИЧТОЖИТЬ ВтРучныеКорректировки";
		Запрос.Выполнить();
		
		//Перечитываем остатки
		
		Запрос.Текст = ТекстЗапросаРазвернутоеСальдо("АналитикиСуммы");
		Запрос.Выполнить();
		РазвернутоеСальдо = Запрос.МенеджерВременныхТаблиц.Таблицы["АналитикиСуммы"].ПолучитьДанные().Выгрузить(); //ТаблицаЗначений
		
		РазвернутоеСальдо.Индексы.Добавить("ТипРасчетов, Организация");
		СтруктураПоиска = Новый Структура("ТипРасчетов, Организация");
		
		Запрос.Текст = "ВЫБРАТЬ
			|	РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
			|	РасчетыСКлиентамиПоСрокамОстатки.Валюта КАК Валюта,
			|	РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
			|	РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
			|	РасчетыСКлиентамиПоСрокамОстатки.ДатаВозникновения КАК ДатаВозникновения,
			|	РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаОстаток КАК Предоплата,
			|	РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаРеглОстаток КАК ПредоплатаРегл,
			|	РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаУпрОстаток КАК ПредоплатаУпр,
			|	РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток КАК Долг,
			|	РасчетыСКлиентамиПоСрокамОстатки.ДолгРеглОстаток КАК ДолгРегл,
			|	РасчетыСКлиентамиПоСрокамОстатки.ДолгУпрОстаток КАК ДолгУпр
			|ПОМЕСТИТЬ ВТРасчетыСКлиентамиПоСрокамОстатки
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоМесяца, 
			|		(АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта)
			|			В (ВЫБРАТЬ АналитикаУчетаПоПартнерам, ОбъектРасчетов, ВалютаРасчетов 
			|				ИЗ АналитикиСуммы
			|				ГДЕ ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
			|				)) КАК РасчетыСКлиентамиПоСрокамОстатки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, РасчетныйДокумент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РасчетыСПоставщикамиПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
			|	РасчетыСПоставщикамиПоСрокамОстатки.Валюта КАК Валюта,
			|	РасчетыСПоставщикамиПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ДатаВозникновения КАК ДатаВозникновения,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ПредоплатаОстаток КАК ПредоплатаОстаток,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ПредоплатаРеглОстаток КАК ПредоплатаРеглОстаток,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ПредоплатаУпрОстаток КАК ПредоплатаУпрОстаток,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ДолгОстаток КАК ДолгОстаток,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ДолгРеглОстаток КАК ДолгРеглОстаток,
			|	РасчетыСПоставщикамиПоСрокамОстатки.ДолгУпрОстаток КАК ДолгУпрОстаток
			|ПОМЕСТИТЬ ВТРасчетыСПоставщикамиПоСрокамОстатки
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&НачалоМесяца, 
			|		(АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта)
			|			В (ВЫБРАТЬ АналитикаУчетаПоПартнерам, ОбъектРасчетов, ВалютаРасчетов 
			|					ИЗ АналитикиСуммы
			|					ГДЕ ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
			|					)) КАК РасчетыСПоставщикамиПоСрокамОстатки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, РасчетныйДокумент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
			|	РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
			|	РасчетыПоСрокамОстатки.Валюта КАК Валюта,
			|	РасчетыПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
			|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
			|	РасчетыПоСрокамОстатки.ДатаВозникновения КАК ДатаВозникновения,
			|	РасчетыПоСрокамОстатки.Предоплата КАК Предоплата,
			|	РасчетыПоСрокамОстатки.ПредоплатаРегл КАК ПредоплатаРегл,
			|	РасчетыПоСрокамОстатки.ПредоплатаУпр КАК ПредоплатаУпр,
			|	РасчетыПоСрокамОстатки.Долг КАК Долг,
			|	РасчетыПоСрокамОстатки.ДолгРегл КАК ДолгРегл,
			|	РасчетыПоСрокамОстатки.ДолгУпр КАК ДолгУпр,
			|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокЗачета) КАК ПорядокЗачета,
			|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокОперации) КАК ПорядокОперации,
			|	МАКСИМУМ(РасчетыПоСрокамДо.СвязанныйДокумент) КАК СвязанныйДокумент,
			|	МИНИМУМ(РасчетыПоСрокамДо.ВалютаДокумента) КАК ВалютаДокумента,
			|	МАКСИМУМ(РасчетыПоСрокамДо.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
			|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация
			|ИЗ
			|	ВТРасчетыСКлиентамиПоСрокамОстатки КАК РасчетыПоСрокамОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокамДо
			|		ПО (РасчетыПоСрокамДо.АналитикаУчетаПоПартнерам = РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам)
			|			И (РасчетыПоСрокамДо.ОбъектРасчетов = РасчетыПоСрокамОстатки.ОбъектРасчетов)
			|			И (РасчетыПоСрокамДо.Валюта = РасчетыПоСрокамОстатки.Валюта)
			|			И (РасчетыПоСрокамДо.РасчетныйДокумент = РасчетыПоСрокамОстатки.РасчетныйДокумент)
			|			И (РасчетыПоСрокамДо.Период < &НачалоМесяца)
			|			И (РасчетыПоСрокамДо.Активность)
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам,
			|	РасчетыПоСрокамОстатки.ОбъектРасчетов,
			|	РасчетыПоСрокамОстатки.Валюта,
			|	РасчетыПоСрокамОстатки.РасчетныйДокумент,
			|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения,
			|	РасчетыПоСрокамОстатки.ДатаВозникновения,
			|	РасчетыПоСрокамОстатки.Предоплата,
			|	РасчетыПоСрокамОстатки.ПредоплатаРегл,
			|	РасчетыПоСрокамОстатки.ПредоплатаУпр,
			|	РасчетыПоСрокамОстатки.Долг,
			|	РасчетыПоСрокамОстатки.ДолгРегл,
			|	РасчетыПоСрокамОстатки.ДолгУпр
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком),
			|	РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам,
			|	РасчетыПоСрокамОстатки.ОбъектРасчетов,
			|	РасчетыПоСрокамОстатки.Валюта,
			|	РасчетыПоСрокамОстатки.РасчетныйДокумент,
			|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения,
			|	РасчетыПоСрокамОстатки.ДатаВозникновения,
			|	РасчетыПоСрокамОстатки.ПредоплатаОстаток,
			|	РасчетыПоСрокамОстатки.ПредоплатаРеглОстаток,
			|	РасчетыПоСрокамОстатки.ПредоплатаУпрОстаток,
			|	РасчетыПоСрокамОстатки.ДолгОстаток,
			|	РасчетыПоСрокамОстатки.ДолгРеглОстаток,
			|	РасчетыПоСрокамОстатки.ДолгУпрОстаток,
			|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокЗачета),
			|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокОперации),
			|	МАКСИМУМ(РасчетыПоСрокамДо.СвязанныйДокумент),
			|	МИНИМУМ(РасчетыПоСрокамДо.ВалютаДокумента),
			|	МАКСИМУМ(РасчетыПоСрокамДо.СтатьяДвиженияДенежныхСредств),
			|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
			|ИЗ
			|	ВТРасчетыСПоставщикамиПоСрокамОстатки КАК РасчетыПоСрокамОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыПоСрокамДо
			|		ПО (РасчетыПоСрокамДо.АналитикаУчетаПоПартнерам = РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам)
			|			И (РасчетыПоСрокамДо.ОбъектРасчетов = РасчетыПоСрокамОстатки.ОбъектРасчетов)
			|			И (РасчетыПоСрокамДо.Валюта = РасчетыПоСрокамОстатки.Валюта)
			|			И (РасчетыПоСрокамДо.РасчетныйДокумент = РасчетыПоСрокамОстатки.РасчетныйДокумент)
			|			И (РасчетыПоСрокамДо.Период < &НачалоМесяца)
			|			И (РасчетыПоСрокамДо.Активность)
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыПоСрокамОстатки.АналитикаУчетаПоПартнерам,
			|	РасчетыПоСрокамОстатки.ОбъектРасчетов,
			|	РасчетыПоСрокамОстатки.Валюта,
			|	РасчетыПоСрокамОстатки.РасчетныйДокумент,
			|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения,
			|	РасчетыПоСрокамОстатки.ДатаВозникновения,
			|	РасчетыПоСрокамОстатки.ПредоплатаОстаток,
			|	РасчетыПоСрокамОстатки.ПредоплатаРеглОстаток,
			|	РасчетыПоСрокамОстатки.ПредоплатаУпрОстаток,
			|	РасчетыПоСрокамОстатки.ДолгОстаток,
			|	РасчетыПоСрокамОстатки.ДолгРеглОстаток,
			|	РасчетыПоСрокамОстатки.ДолгУпрОстаток
			|
			|УПОРЯДОЧИТЬ ПО
			|	МИНИМУМ(РасчетыПоСрокамДо.ПорядокОперации)";
		
		ДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
		ДетальныеЗаписи.Индексы.Добавить("ТипРасчетов, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта");
		СтруктураПоискаДетальныхЗаписей = Новый Структура("ТипРасчетов, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта");
		
		МассивОрганизацийДляОбработки = РазвернутоеСальдо.Скопировать(,"Организация");
		МассивОрганизацийДляОбработки.Свернуть("Организация");
		МассивОрганизацийДляОбработки = МассивОрганизацийДляОбработки.ВыгрузитьКолонку("Организация");
		
		Для Каждого Организация Из МассивОрганизацийДляОбработки Цикл
			
			КорректировкаОбъект = КорректировкаРегистров(ДатаКорректировки, Организация, Перечисления.ОперацииКорректировкиРегистров.ИсправлениеРазвернутогоСальдоВзаиморасчетов);
			
			Для Каждого ТипРасчетов Из ТипыРасчетов Цикл
				
				ТипРасчетовСтрокой = ?(ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом,"РасчетыСКлиентами","РасчетыСПоставщиками");
				
				Движения = КорректировкаОбъект.Движения[ТипРасчетовСтрокой + "ПоСрокам"]; // РегистрНакопленияНаборЗаписей
				
				СтруктураПоиска.ТипРасчетов = ТипРасчетов;
				СтруктураПоиска.Организация = Организация;
				ЗаписиРазвернутогоСальдо = РазвернутоеСальдо.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого ЗаписьРазвернутогоСальдо Из ЗаписиРазвернутогоСальдо Цикл
					ЗаполнитьЗначенияСвойств(СтруктураПоискаДетальныхЗаписей, ЗаписьРазвернутогоСальдо);
					СтруктураПоискаДетальныхЗаписей.Валюта = ЗаписьРазвернутогоСальдо.ВалютаРасчетов;
					ДетальныеЗаписиАналитики = ДетальныеЗаписи.НайтиСтроки(СтруктураПоискаДетальныхЗаписей);
					
					СуммаКРаспределениюДолг = Мин(ЗаписьРазвернутогоСальдо.ДолгОстаток, ЗаписьРазвернутогоСальдо.ПредоплатаОстаток);
					СуммаКРаспределениюПредоплата = СуммаКРаспределениюДолг;
					
					Для Каждого СтрокаДетальныхЗаписей Из ДетальныеЗаписиАналитики Цикл
						
						Если СуммаКРаспределениюДолг = 0 И СуммаКРаспределениюПредоплата = 0 Тогда
							Прервать;
						КонецЕсли;
						
						НовСтр = Движения.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДетальныхЗаписей);
						
						НовСтр.Период              = ДатаКорректировки;
						НовСтр.ВидДвижения         = ВидДвиженияНакопления.Расход;
						НовСтр.ДокументРегистратор = КорректировкаОбъект.Ссылка;
						НовСтр.ПорядокОперации     = ПорядокКорректировки;
						
						Если СтрокаДетальныхЗаписей.Долг > 0 Тогда
							СуммаСписания = Мин(СуммаКРаспределениюДолг, СтрокаДетальныхЗаписей.Долг);
							
							НовСтр.ДолгРегл = СтрокаДетальныхЗаписей.ДолгРегл / СтрокаДетальныхЗаписей.Долг * СуммаСписания;
							НовСтр.ДолгУпр  = СтрокаДетальныхЗаписей.ДолгУпр / СтрокаДетальныхЗаписей.Долг * СуммаСписания;
							НовСтр.Долг     = СуммаСписания;
							
							СуммаКРаспределениюДолг = СуммаКРаспределениюДолг - СуммаСписания;
						КонецЕсли;
						
						Если СтрокаДетальныхЗаписей.Предоплата > 0 Тогда
							СуммаСписания = Мин(СуммаКРаспределениюПредоплата, СтрокаДетальныхЗаписей.Предоплата);
							
							НовСтр.ПредоплатаРегл = СтрокаДетальныхЗаписей.ПредоплатаРегл / СтрокаДетальныхЗаписей.Предоплата * СуммаСписания;
							НовСтр.ПредоплатаУпр  = СтрокаДетальныхЗаписей.ПредоплатаУпр / СтрокаДетальныхЗаписей.Предоплата * СуммаСписания;
							НовСтр.Предоплата     = СуммаСписания;
							
							СуммаКРаспределениюПредоплата = СуммаКРаспределениюПредоплата - СуммаСписания;
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
				Движения.Записать();
				
				Для Каждого СтрокаАналитики Из ЗаписиРазвернутогоСальдо Цикл
					
					ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
					
					ЗаполнитьЗначенияСвойств(ОсновныеПараметры, СтрокаАналитики);
					ОсновныеПараметры.ЭтоРасчетыСКлиентами = ТипРасчетовСтрокой = "РасчетыСКлиентами";
					ОсновныеПараметры.ПорядокФакт              = ПорядокРасчета;
					ОсновныеПараметры.ПорядокПлан              = ПорядокРасчета;
					
					ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если КорректировкаОбъект.Движения.РасчетыСКлиентамиПоСрокам.Количество() = 0 
				И КорректировкаОбъект.Движения.РасчетыСПоставщикамиПоСрокам.Количество() = 0 Тогда
				КорректировкаОбъект.Удалить();
			Иначе
				ДополнитьКорректировкуДвижениямиПоПрочимДоходамРасходам(КорректировкаОбъект);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика; УНИЧТОЖИТЬ ВтСальдо; УНИЧТОЖИТЬ ВтРучныеКорректировки";
	Запрос.Выполнить();
	
	//Если на начало периода все хорошо, а на конец есть развернутое сальдо - пересчитаем их.
	Запрос.Текст = ТекстЗапросаРазвернутоеСальдо();
	Запрос.УстановитьПараметр("НачалоМесяца",       КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("Порядок",            Формат(КонецМесяца(ПериодРасчета),"ДФ=ггггММдд9ЧЧммсс99"));
	НекорректныеОстатки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из НекорректныеОстатки Цикл
		
		ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
		
		ЗаполнитьЗначенияСвойств(ОсновныеПараметры, Стр);
		ОсновныеПараметры.ЭтоРасчетыСКлиентами = Стр.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		ОсновныеПараметры.ПорядокПлан              = ПорядокРасчета;
		ОсновныеПараметры.ПорядокФакт              = ПорядокРасчета;
		
		ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в движения данные по прочим доходам/расходам 
// 
// Параметры:
// 	КорректировкаОбъект - ДокументОбъект.КорректировкаРегистров - ДокументОбъект, с уже записанными движениями по расчетам.
Процедура ДополнитьКорректировкуДвижениямиПоПрочимДоходамРасходам(КорректировкаОбъект) Экспорт
	
	Если КорректировкаОбъект.ТаблицаРегистров.Найти("ПрочиеДоходы","Имя") = Неопределено Тогда
		НовСтр = КорректировкаОбъект.ТаблицаРегистров.Добавить();
		НовСтр.Имя = "ПрочиеДоходы";
	КонецЕсли;
	
	Если КорректировкаОбъект.ТаблицаРегистров.Найти("ПрочиеРасходы","Имя") = Неопределено Тогда
		НовСтр = КорректировкаОбъект.ТаблицаРегистров.Добавить();
		НовСтр.Имя = "ПрочиеРасходы";
	КонецЕсли;
	
	Если КорректировкаОбъект.ТаблицаРегистров.Найти("ПрочиеАктивыПассивы","Имя") = Неопределено Тогда
		НовСтр = КорректировкаОбъект.ТаблицаРегистров.Добавить();
		НовСтр.Имя = "ПрочиеАктивыПассивы";
	КонецЕсли;
	
	НачалоТекущегоПериода = КонецМесяца(КорректировкаОбъект.Дата)+1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КорректировкаСсылка", КорректировкаОбъект.Ссылка);
	Запрос.УстановитьПараметр("Период", НачалоТекущегоПериода);
	Запрос.УстановитьПараметр("СтатьяДоходов", ПланыВидовХарактеристик.СтатьиДоходов.ПрибыльУбытокПрошлыхЛет);
	Запрос.УстановитьПараметр("СтатьяРасходов", ПланыВидовХарактеристик.СтатьиРасходов.ПрибыльУбытокПрошлыхЛет);
	Запрос.УстановитьПараметр("УправленческийУчетОрганизаций", РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций(НачалоТекущегоПериода));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	&Период                                 КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	ВложенныйЗапрос.Организация             КАК Организация,
	|	ВложенныйЗапрос.Подразделение           КАК Подразделение,
	|	ВложенныйЗапрос.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяДоходов                          КАК СтатьяДоходов,
	|	ВложенныйЗапрос.Организация             КАК АналитикаДоходов,
	|	СУММА(ВложенныйЗапрос.Сумма)            КАК Сумма,
	|	СУММА(ВложенныйЗапрос.СуммаРегл)        КАК СуммаРегл,
	|	СУММА(ВЫБОР КОГДА &УправленческийУчетОрганизаций 
	|				ТОГДА ВложенныйЗапрос.СуммаУпр
	|				ИНАЧЕ 0
	|		КОНЕЦ)                              КАК СуммаУпр
	|ИЗ (ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация             КАК Организация,
	|		ЕСТЬNULL(Расчеты.ОбъектРасчетов.Подразделение,
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|		Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		
	|		ВЫБОР КОГДА Расчеты.Долг < 0
	|			ТОГДА -Расчеты.Долг
	|			ИНАЧЕ Расчеты.Долг
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.Предоплата < 0
	|			ТОГДА -Расчеты.Предоплата
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ                                                     КАК Сумма,
	|		ВЫБОР КОГДА Расчеты.ДолгРегл < 0
	|			ТОГДА -Расчеты.ДолгРегл
	|			ИНАЧЕ Расчеты.ДолгРегл
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаРегл < 0
	|			ТОГДА -Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.ПредоплатаРегл
	|		КОНЕЦ                                                     КАК СуммаРегл,
	|		ВЫБОР КОГДА Расчеты.ДолгУпр < 0
	|			ТОГДА -Расчеты.ДолгУпр
	|			ИНАЧЕ Расчеты.ДолгУпр
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаУпр < 0
	|			ТОГДА -Расчеты.ПредоплатаУпр
	|			ИНАЧЕ Расчеты.ПредоплатаУпр
	|		КОНЕЦ                                                     КАК СуммаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ГДЕ
	|		Расчеты.Активность
	|		И Расчеты.Регистратор = &КорректировкаСсылка
	|		И ((Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Расчеты.Предоплата > 0 ИЛИ Расчеты.Долг < 0))
	|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И (Расчеты.Долг > 0 ИЛИ Расчеты.Предоплата < 0)))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация             КАК Организация,
	|		ЕСТЬNULL(Расчеты.ОбъектРасчетов.Подразделение,
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|		Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		
	|		ВЫБОР КОГДА Расчеты.Долг < 0
	|				ТОГДА -Расчеты.Долг
	|			ИНАЧЕ Расчеты.Долг
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.Предоплата < 0
	|			ТОГДА -Расчеты.Предоплата
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ                                                     КАК Сумма,
	|		ВЫБОР КОГДА Расчеты.ДолгРегл < 0
	|			ТОГДА -Расчеты.ДолгРегл
	|			ИНАЧЕ Расчеты.ДолгРегл
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаРегл < 0
	|			ТОГДА -Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.ПредоплатаРегл
	|		КОНЕЦ                                                     КАК СуммаРегл,
	|		ВЫБОР КОГДА Расчеты.ДолгУпр < 0
	|			ТОГДА -Расчеты.ДолгУпр
	|			ИНАЧЕ Расчеты.ДолгУпр
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаУпр < 0
	|			ТОГДА -Расчеты.ПредоплатаУпр
	|			ИНАЧЕ Расчеты.ПредоплатаУпр
	|		КОНЕЦ                                                     КАК СуммаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|	ГДЕ	
	|		Расчеты.Активность
	|		И Расчеты.Регистратор = &КорректировкаСсылка
	|		И ((Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И (Расчеты.Предоплата > 0 ИЛИ Расчеты.Долг < 0))
	|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Расчеты.Долг > 0 ИЛИ Расчеты.Предоплата < 0)))) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.НаправлениеДеятельности
	|;
	|ВЫБРАТЬ
	|	&Период                                 КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	ВложенныйЗапрос.Организация             КАК Организация,
	|	ВложенныйЗапрос.Подразделение           КАК Подразделение,
	|	ВложенныйЗапрос.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяРасходов                         КАК СтатьяРасходов,
	|	ВложенныйЗапрос.Организация             КАК АналитикаРасходов,
	|	СУММА(ВложенныйЗапрос.Сумма)            КАК Сумма,
	|	СУММА(ВложенныйЗапрос.Сумма)            КАК СуммаБезНДС,
	|	СУММА(ВложенныйЗапрос.СуммаРегл)        КАК СуммаРегл,
	|	СУММА(ВЫБОР КОГДА &УправленческийУчетОрганизаций
	|				ТОГДА ВложенныйЗапрос.СуммаУпр
	|				ИНАЧЕ 0
	|		КОНЕЦ)                              КАК СуммаУпр,
	|	0                                       КАК ПостояннаяРазница,
	|	0                                       КАК ВременнаяРазница
	|ИЗ (ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация             КАК Организация,
	|		ЕСТЬNULL(Расчеты.ОбъектРасчетов.Подразделение,
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|		Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		
	|		ВЫБОР КОГДА Расчеты.Долг < 0
	|			ТОГДА -Расчеты.Долг
	|			ИНАЧЕ Расчеты.Долг
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.Предоплата < 0
	|			ТОГДА -Расчеты.Предоплата
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ                                                     КАК Сумма,
	|		ВЫБОР КОГДА Расчеты.ДолгРегл < 0
	|			ТОГДА -Расчеты.ДолгРегл
	|			ИНАЧЕ Расчеты.ДолгРегл
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаРегл < 0
	|			ТОГДА -Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.ПредоплатаРегл
	|		КОНЕЦ                                                     КАК СуммаРегл,
	|		ВЫБОР КОГДА Расчеты.ДолгУпр < 0
	|			ТОГДА -Расчеты.ДолгУпр
	|			ИНАЧЕ Расчеты.ДолгУпр
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаУпр < 0
	|			ТОГДА -Расчеты.ПредоплатаУпр
	|			ИНАЧЕ Расчеты.ПредоплатаУпр
	|		КОНЕЦ                                                     КАК СуммаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ГДЕ
	|		Расчеты.Активность
	|		И Расчеты.Регистратор = &КорректировкаСсылка
	|		И ((Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И (Расчеты.Предоплата > 0 ИЛИ Расчеты.Долг < 0))
	|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Расчеты.Долг > 0 ИЛИ Расчеты.Предоплата < 0)))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация             КАК Организация,
	|		ЕСТЬNULL(Расчеты.ОбъектРасчетов.Подразделение,
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|		Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		
	|		ВЫБОР КОГДА Расчеты.Долг < 0
	|				ТОГДА -Расчеты.Долг
	|			ИНАЧЕ Расчеты.Долг
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.Предоплата < 0
	|			ТОГДА -Расчеты.Предоплата
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ                                                     КАК Сумма,
	|		ВЫБОР КОГДА Расчеты.ДолгРегл < 0
	|			ТОГДА -Расчеты.ДолгРегл
	|			ИНАЧЕ Расчеты.ДолгРегл
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаРегл < 0
	|			ТОГДА -Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.ПредоплатаРегл
	|		КОНЕЦ                                                     КАК СуммаРегл,
	|		ВЫБОР КОГДА Расчеты.ДолгУпр < 0
	|			ТОГДА -Расчеты.ДолгУпр
	|			ИНАЧЕ Расчеты.ДолгУпр
	|		КОНЕЦ +
	|		ВЫБОР КОГДА Расчеты.ПредоплатаУпр < 0
	|			ТОГДА -Расчеты.ПредоплатаУпр
	|			ИНАЧЕ Расчеты.ПредоплатаУпр
	|		КОНЕЦ                                                     КАК СуммаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|	ГДЕ	
	|		Расчеты.Активность
	|		И Расчеты.Регистратор = &КорректировкаСсылка
	|		И ((Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И (Расчеты.Предоплата > 0 ИЛИ Расчеты.Долг < 0))
	|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И (Расчеты.Долг > 0 ИЛИ Расчеты.Предоплата < 0)))) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.НаправлениеДеятельности
	|";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Доходы = Результаты[0].Выгрузить();
	Расходы = Результаты[1].Выгрузить();
	
	ДвиженияДоходы = КорректировкаОбъект.Движения.ПрочиеДоходы;
	ДвиженияДоходы.Загрузить(Доходы);
	ДвиженияДоходы.Записать();
	
	ДвиженияРасходы = КорректировкаОбъект.Движения.ПрочиеРасходы;
	ДвиженияРасходы.Загрузить(Расходы);
	ДвиженияРасходы.Записать();
	
	КорректировкаОбъект.Записать();
	
	УправленческийУчетПроведениеСервер.ОбновитьДвиженияАктивовПассивов(КорректировкаОбъект.Ссылка, КорректировкаОбъект.Движения);
	
	АктивыПассивы = КорректировкаОбъект.Движения.ПрочиеАктивыПассивы.Выгрузить();
	АктивыПассивы.ЗаполнитьЗначения(НачалоТекущегоПериода, "Период");
	КорректировкаОбъект.Движения.ПрочиеАктивыПассивы.Загрузить(АктивыПассивы);
	КорректировкаОбъект.Движения.ПрочиеАктивыПассивы.Записать();
	
КонецПроцедуры

#КонецОбласти

// Возвращает структуру параметров необходимых для регистрации документа к отложенному распределению расчетов.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ЭтоРасчетыСКлиентами - Булево - Истина если это расчеты с клиентами.
// * МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер с таблицей РасчетыСКлиентамиИзменения или РасчетыСПоставщикамиИзменения.
// * Регистратор - ДокументСсылка - Документ по которому необходимо зарегистрировать отложенные расчеты.
// * ДатаРегистратора - Дата - (Необязательный) по умолчанию текущая дата сеанса.
// * Загрузка - Булево - Значение флага ОбменДанными.Загрузка
// * ТаблицаИзменений - ТаблицаЗначений - (Необязательный) Объекты расчетов по которым есть изменения 
//                                        с рассчитанными датами начала расчета факта и плана:
//                                        ** ПорядокФакт - Строка.
//                                        ** ПорядокПлан - Строка.
//                                        ** АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам.
//                                        ** ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов.
//                                        ** ПустойКорОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов.
//                                        ** ВалютаРасчетов - СправочникСсылка.Валюты.
// * РасчетПлановФоновымЗаданием - Булево - Истина если необходимо расчитывать плановые расчеты в фоновом задании
Функция ПараметрыРаспределенияРасчетов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоРасчетыСКлиентами", Ложь);
	Результат.Вставить("МенеджерВременныхТаблиц", Неопределено);
	Результат.Вставить("Регистратор", Неопределено);
	Результат.Вставить("ДатаРегистратора", ТекущаяДатаСеанса());
	Результат.Вставить("Загрузка", Ложь);
	Результат.Вставить("ТаблицаИзменений", Неопределено);
	Результат.Вставить("РасчетПлановФоновымЗаданием", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Регистрирует объекты расчетов для отложенного расчета по срокам и планом
// 
// Параметры:
// 	Параметры - см. ПараметрыРаспределенияРасчетов
Процедура ЗарегистрироватьИзмененияКОтложенномуРаспределению(Параметры) Экспорт
	
	НачатПереходНаНовуюАрхитектуру = Константы.НачатПереходНаНовуюАрхитектуруВзаиморасчетов.Получить();
	Если НЕ Константы.НоваяАрхитектураВзаиморасчетов.Получить() И НЕ НачатПереходНаНовуюАрхитектуру Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоРасчетыСКлиентами = Параметры.ЭтоРасчетыСКлиентами;
	МенеджерВременныхТаблиц = Параметры.МенеджерВременныхТаблиц;
	Регистратор = Параметры.Регистратор;
	Загрузка = Параметры.Загрузка;
	НеоперативноеПроведение = КонецДня(ТекущаяДатаСеанса()) > КонецДня(Параметры.ДатаРегистратора);
	
	РегистрацияДляПереноса = НЕ Загрузка И НачатПереходНаНовуюАрхитектуру;
	РегистрацияДляРасчетаПланов = НЕ Загрузка И Константы.РаспределятьПлановыеРасчетыФоновымЗаданием.Получить() 
									И НеоперативноеПроведение И НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Если НЕ (Загрузка ИЛИ РегистрацияДляПереноса ИЛИ РегистрацияДляРасчетаПланов) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаИзменений = ТаблицаИзмененийДляПересчета(МенеджерВременныхТаблиц, ЭтоРасчетыСКлиентами, Регистратор);
	Параметры.ТаблицаИзменений = ТаблицаИзменений;
	Параметры.РасчетПлановФоновымЗаданием = РегистрацияДляРасчетаПланов;
	
	Если ЭтоРасчетыСКлиентами Тогда
		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
	Иначе
		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
	КонецЕсли;
	
	Для Каждого СтрокаИзменений Из ТаблицаИзменений Цикл
		
		НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ТипРасчетов.Установить(ТипРасчетов);
		НаборЗаписей.Отбор.АналитикаУчетаПоПартнерам.Установить(СтрокаИзменений.АналитикаУчетаПоПартнерам);
		НаборЗаписей.Отбор.ОбъектРасчетов.Установить(СтрокаИзменений.ОбъектРасчетов);
		НаборЗаписей.Отбор.Валюта.Установить(СтрокаИзменений.ВалютаРасчетов);
		
		Если СтрокаИзменений.ПорядокПлан = "" Тогда
			ДатаПлан = Дата(1,1,1);
		Иначе
			ДатаПлан = Дата(Лев(СтрокаИзменений.ПорядокПлан, 8));
		КонецЕсли;
		
		Если РегистрацияДляРасчетаПланов Тогда
			ДатаФакт = Дата(3000,1,1);
			СтрокаИзменений.ПорядокПлан = "30000101";
		ИначеЕсли СтрокаИзменений.ПорядокФакт = "" Тогда
			ДатаФакт = Дата(1,1,1);
		Иначе
			ДатаФакт = Дата(Лев(СтрокаИзменений.ПорядокФакт, 8));
		КонецЕсли;
		
		НаборЗаписей.Отбор.ДатаПересчетаПлан.Установить(ДатаПлан);
		НаборЗаписей.Отбор.ДатаПересчета.Установить(ДатаФакт);
		НаборЗаписей.Отбор.Документ.Установить(Регистратор);
		
		НовСтр = НаборЗаписей.Добавить();
		НовСтр.ТипРасчетов = ТипРасчетов;
		НовСтр.АналитикаУчетаПоПартнерам = СтрокаИзменений.АналитикаУчетаПоПартнерам;
		НовСтр.ОбъектРасчетов = СтрокаИзменений.ОбъектРасчетов;
		НовСтр.Валюта = СтрокаИзменений.ВалютаРасчетов;
		НовСтр.ДатаПересчета = ДатаФакт;
		НовСтр.ДатаПересчетаПлан = ДатаПлан;
		НовСтр.Документ = Регистратор;
		НовСтр.Приоритет = ?(СтрокаИзменений.ПустойКорОбъектРасчетов, 1, 2);
		НовСтр.КоличествоДокументов = 1;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет распределение расчетов по текущим заданиям к распределению в регистре ЗаданияКРаспределениюРасчетов
// 
// Параметры:
// 	Параметры - Структура, Неопределено - В структуре передается таблица заданий для распределения:
// 	 *ДанныеКОтработке - см. ДанныеДляОбработки.
// 	АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен результат работы процедуры.
Процедура ВыполнитьОтложенноеРаспределение(Параметры = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если НЕ Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры <> Неопределено И Параметры.Свойство("ДанныеКОбработке") Тогда
		ДанныеКОбработке = Параметры.ДанныеКОбработке;
	Иначе
		ПараметрыДанных = ПараметрыДанныхМногопоточнойОбработки();
		ДанныеКОбработке = ДанныеДляОбработки(ПараметрыДанных);
	КонецЕсли;
	
	ТаблицаОбъектовОплаты = Новый ТаблицаЗначений;
	ТаблицаОбъектовОплаты.Колонки.Добавить("ОбъектОплаты", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОбъектРасчетов.Тип));
	ТаблицаОбъектовОплаты.Колонки.Добавить("ОбъектРасчетов", Новый ОписаниеТипов("СправочникСсылка.ОбъектыРасчетов"));
	ТаблицаОбъектовОплаты.Колонки.Добавить("ЭтоРасчетыСКлиентами", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Запись Из ДанныеКОбработке Цикл
		
		ПараметрыРаспределения = СтруктураПараметровЗаполненияВзаиморасчетов();
		ЗаполнитьЗначенияСвойств(ПараметрыРаспределения, Запись);
		
		ПараметрыРаспределения.ПорядокФакт = Порядок(Запись.ДатаПересчета,"", Тип("ДокументСсылка.КорректировкаРегистров"),"1","21");
		ПараметрыРаспределения.ПорядокПлан = Порядок(Запись.ДатаПересчетаПлан,"", Тип("ДокументСсылка.КорректировкаРегистров"),"1","21");
		
		НачатьТранзакцию();
		Попытка
			ОтметитьВыполнениеЗадания(Запись);
			ЗаполнитьОперативныеВзаиморасчеты(ПараметрыРаспределения);
			Если ЗначениеЗаполнено(Запись.Объект) Тогда
				НовСтр = ТаблицаОбъектовОплаты.Добавить();
				НовСтр.ЭтоРасчетыСКлиентами = Запись.ЭтоРасчетыСКлиентами;
				НовСтр.ОбъектРасчетов = Запись.ОбъектРасчетов;
				НовСтр.ОбъектОплаты = Запись.Объект;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
	КонецЦикла;
	
	РегистрыСведений.ГрафикПлатежей.РассчитатьГрафикПлатежейПоРасчетамСКлиентами(
				ТаблицаОбъектовОплаты.Скопировать(Новый Структура("ЭтоРасчетыСКлиентами", Истина)));
	РегистрыСведений.ГрафикПлатежей.РассчитатьГрафикПлатежейПоРасчетамСПоставщиками(
				ТаблицаОбъектовОплаты.Скопировать(Новый Структура("ЭтоРасчетыСКлиентами", Ложь)));
КонецПроцедуры

// Запускает распределение плановых расчетов по текущим заданиям к распределению в регистре ЗаданияКРаспределениюРасчетов
// в фоновом задании.
// 
// Параметры:
// 	РаспределитьФактическиеРасчеты - Булево - Истина, запуск распределения фактических расчетов
//
Процедура ЗапуститьОтложенноеРаспределениеВзаиморасчетов(РаспределитьФактическиеРасчеты = Ложь) Экспорт
	
	Если (Константы.РаспределятьПлановыеРасчетыФоновымЗаданием.Получить() ИЛИ РаспределитьФактическиеРасчеты)
		И НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И НЕ МенеджерОтложенногоРаспределенияВзаиморасчетовАктивен() Тогда
		
		ПараметрыЭкспортнойПроцедуры = Новый Структура("РаспределитьФактическиеРасчеты", РаспределитьФактическиеРасчеты);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполняется фоновое распределение планов по расчетам'");
		
		ДлительныеОперации.ВыполнитьВФоне(ИмяМетодаОтложенногоРаспределенияВзаиморасчетов(), ПараметрыЭкспортнойПроцедуры, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Запускает распределение фактических расчетов по текущим заданиям к распределению в регистре ЗаданияКРаспределениюРасчетов
// в фоновом задании.
//
// Метод предназначен для вызова из регламентного задания.
//
Процедура ЗапуститьОтложенноеРаспределениеФактическихВзаиморасчетов() Экспорт
	
	ЗапуститьОтложенноеРаспределениеВзаиморасчетов(Истина);
	
КонецПроцедуры

// Запускает отложенное распределение взаиморасчетов по срокам
Процедура ПослеОбновленияРегистровВзаиморасчетов() Экспорт
	
	Если ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСКлиентами)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСПоставщиками)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам)
			И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, Метаданные.РегистрыСведений.ВспомогательнаяИнформацияВзаиморасчетов)
			И НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая()
		Тогда
		ОбъектыРасчетовСервер.ПерезаполнитьПустые();
		ЗапуститьОтложенноеРаспределениеВзаиморасчетов(Истина);
		ИспользоватьРегламентноеЗаданиеФактическоеРаспределение(Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяМетодаОтложенногоРаспределенияВзаиморасчетов()
	Возврат "ОперативныеВзаиморасчетыСервер.ВыполнитьФоновоеРаспределениеРасчетов";
КонецФункции

// Проверяет активность фонового задания по распределению расчетов.
//
// Возвращаемое значение:
//   Булево - Истина, если есть активные задания.
//
Функция МенеджерОтложенногоРаспределенияВзаиморасчетовАктивен() Экспорт
	
	ИмяМетодаЗадания = ИмяМетодаОтложенногоРаспределенияВзаиморасчетов();
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("ИмяМетода", ИмяМетодаЗадания);
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
	
	Возврат АктивныеЗадания.Количество() > 0;
	
КонецФункции  

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанных

//Формирует временные таблицы остатков и записей для распределения
Процедура СформироватьВТДанныхРегистровДоНачалаРасчетов(Запрос, ГлобальныеПеременные)
	
	//Данные расчетов до начала пересчета.
	ТекстЗапросаРасчетыПоСрокамОстатки = "
	|ВЫБРАТЬ
	|	РасчетыПоСрокамОстатки.РасчетныйДокумент                             КАК РасчетныйДокумент,
	|	РасчетыПоСрокамОстатки.ДатаВозникновения                             КАК Период,
	|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения                        КАК ДатаПлановогоПогашения,
	|	РасчетыПоСрокамОстатки.ДатаВозникновения                             КАК ДатаВозникновения,
	|	ЕСТЬNULL(ВспомогательнаяИнформация.ПорядокЗачета, &Порядок)          КАК ПорядокЗачета,
	|	ЕСТЬNULL(ВспомогательнаяИнформация.ПорядокОперации, &Порядок)        КАК ПорядокОперации,
	|	ЕСТЬNULL(ВспомогательнаяИнформация.СвязанныйДокумент,Неопределено)   КАК СвязанныйДокумент,
	|	ЕСТЬNULL(ВспомогательнаяИнформация.ВалютаДокумента, &ВалютаРасчетов) КАК ВалютаДокумента,
	|	ЕСТЬNULL(ВспомогательнаяИнформация.СтатьяДвиженияДенежныхСредств,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) КАК СтатьяДвиженияДенежныхСредств,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)            КАК ХозяйственнаяОперация,
	|	ЕСТЬNULL(ВспомогательнаяИнформация.ДокументРегистратор,
	|		РасчетыПоСрокамОстатки.РасчетныйДокумент)                        КАК ДокументРегистратор,
	|	
	|	РасчетыПоСрокамОстатки.ПредоплатаОстаток                             КАК Предоплата,
	|	РасчетыПоСрокамОстатки.ПредоплатаРеглОстаток                         КАК ПредоплатаРегл,
	|	РасчетыПоСрокамОстатки.ПредоплатаУпрОстаток                          КАК ПредоплатаУпр,
	|	РасчетыПоСрокамОстатки.ДолгОстаток                                   КАК Долг,
	|	РасчетыПоСрокамОстатки.ДолгРеглОстаток                               КАК ДолгРегл,
	|	РасчетыПоСрокамОстатки.ДолгУпрОстаток                                КАК ДолгУпр,
	|	РасчетыПоСрокамОстатки.ПредоплатаОстаток <> 0                        КАК ЕстьПредоплата,
	|	РасчетыПоСрокамОстатки.ДолгОстаток <> 0                              КАК ЕстьДолг
	|ПОМЕСТИТЬ ВТРасчетыПоСрокамОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&НачалоДняПорядка, 
	|															АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
	|															И ОбъектРасчетов            = &ОбъектРасчетов
	|															И Валюта                    = &ВалютаРасчетов) КАК РасчетыПоСрокамОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВспомогательнаяИнформацияВзаиморасчетов КАК ВспомогательнаяИнформация
	|			ПО РасчетыПоСрокамОстатки.РасчетныйДокумент         = ВспомогательнаяИнформация.РасчетныйДокумент
	|				И ВЫБОР КОГДА РасчетыПоСрокамОстатки.ДатаПлановогоПогашения = ДАТАВРЕМЯ(1,1,1)
	|						ТОГДА РасчетыПоСрокамОстатки.ДатаВозникновения = ВспомогательнаяИнформация.ДатаПлановогоПогашения
	|						ИНАЧЕ РасчетыПоСрокамОстатки.ДатаПлановогоПогашения  = ВспомогательнаяИнформация.ДатаПлановогоПогашения
	|					КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	ЕстьПредоплата,
	|	ЕстьДолг";
	
	//Планы оплат.
	ТекстЗапросаРасчетыПланОплатОстатки = "
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1,1,1)                                          КАК Период,
	|	РасчетыПланыОплатОстатки.ДокументПлан                     КАК ДокументПлан,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
	|	РасчетыПланыОплатОстатки.ДатаПлановогоПогашения           КАК ДатаПлановогоПогашения,
	|	РасчетыПланыОплатОстатки.ДатаВозникновения                КАК ДатаВозникновения,
	|	ЕСТЬNULL(ВспомогательнаяИнформация.ПорядокЗачета,"""")    КАК ПорядокЗачета,
	|	РасчетыПланыОплатОстатки.ВариантОплаты                    КАК ВариантОплаты,
	|	РасчетыПланыОплатОстатки.КОплатеОстаток                   КАК КОплате,
	|	РасчетыПланыОплатОстатки.ОплаченоОстаток                  КАК Оплачено
	|	
	|ПОМЕСТИТЬ ВТРасчетыПланОплатОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОплат.Остатки(&НачалоДняПорядка, 
	|															АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
	|															И ОбъектРасчетов            = &ОбъектРасчетов
	|															И Валюта                    = &ВалютаРасчетов) КАК РасчетыПланыОплатОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВспомогательнаяИнформацияВзаиморасчетов КАК ВспомогательнаяИнформация
	|			ПО РасчетыПланыОплатОстатки.ДокументПлан              = ВспомогательнаяИнформация.РасчетныйДокумент
	|				И ВЫБОР КОГДА РасчетыПланыОплатОстатки.ДатаПлановогоПогашения = ДАТАВРЕМЯ(1,1,1)
	|							ТОГДА РасчетыПланыОплатОстатки.ДатаВозникновения = ВспомогательнаяИнформация.ДатаПлановогоПогашения
	|						ИНАЧЕ РасчетыПланыОплатОстатки.ДатаПлановогоПогашения  = ВспомогательнаяИнформация.ДатаПлановогоПогашения
	|					КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПлан,
	|	ДатаПлановогоПогашения";
	
	//Планы отгрузок.
	ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки = "
	|ВЫБРАТЬ
	|	РасчетыПланОтгрузокОстатки.ДокументПлан           КАК ДокументПлан,
	|	ДАТАВРЕМЯ(1,1,1)                                  КАК Период,
	|	РасчетыПланОтгрузокОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	РасчетыПланОтгрузокОстатки.ДатаВозникновения      КАК ДатаВозникновения,
	|	ЕСТЬNULL(ВспомогательнаяИнформация.ПорядокЗачета,"""") КАК ПорядокЗачета,
	|	
	|	РасчетыПланОтгрузокОстатки.СуммаОстаток           КАК Сумма
	|	
	|ПОМЕСТИТЬ ВТРасчетыПланОтгрузокПоставокОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОтгрузок.Остатки(&НачалоДняПорядка, 
	|															АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
	|															И ОбъектРасчетов            = &ОбъектРасчетов
	|															И Валюта                    = &ВалютаРасчетов) КАК РасчетыПланОтгрузокОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВспомогательнаяИнформацияВзаиморасчетов КАК ВспомогательнаяИнформация
	|			ПО РасчетыПланОтгрузокОстатки.ДокументПлан              = ВспомогательнаяИнформация.РасчетныйДокумент
	|				И ВЫБОР КОГДА РасчетыПланОтгрузокОстатки.ДатаПлановогоПогашения = ДАТАВРЕМЯ(1,1,1)
	|							ТОГДА РасчетыПланОтгрузокОстатки.ДатаВозникновения = ВспомогательнаяИнформация.ДатаПлановогоПогашения
	|						ИНАЧЕ РасчетыПланОтгрузокОстатки.ДатаПлановогоПогашения  = ВспомогательнаяИнформация.ДатаПлановогоПогашения
	|					КОНЕЦ";
	
	Тексты = Новый Массив;
	Тексты.Добавить(ТекстЗапросаРасчетыПоСрокамОстатки);
	Если ГлобальныеПеременные.РассчитыватьПланы Тогда
		Тексты.Добавить(ТекстЗапросаРасчетыПланОплатОстатки);
		Тексты.Добавить(ТекстЗапросаРасчетыПланОтгрузокПоставокОстатки);
	КонецЕсли;
	ТекстЗапроса = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.Текст = ТекстЗапроса;
	
	Если НЕ ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"РегистрНакопления.РасчетыСКлиентамиПоСрокам",
			"РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"РегистрНакопления.РасчетыСКлиентамиПланОплат",
			"РегистрНакопления.РасчетыСПоставщикамиПланОплат");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"РегистрНакопления.РасчетыСКлиентамиПланОтгрузок",
			"РегистрНакопления.РасчетыСПоставщикамиПланПоставок");
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

//Возвращает записи до начала расчета (порядка), количество которых в служебном документе регистраторе меньше размера порции записи
Функция ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяТаблицы)
	
	Запрос.УстановитьПараметр("НачальноеЗаполнение", ГлобальныеПеременные.НачальноеЗаполнение);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Таблица.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВтПолныеРегистраторы
	|ИЗ
	|	&ИмяТаблицы КАК Таблица
	|ГДЕ
	|	Таблица.АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
	|	И Таблица.ОбъектРасчетов            = &ОбъектРасчетов
	|	И Таблица.Валюта                    = &ВалютаРасчетов
	|	И Таблица.Период                    < &НачалоДняПорядка
	|	И Таблица.Активность
	|	И НЕ &НачальноеЗаполнение
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Регистратор
	|ИМЕЮЩИЕ 
	|	КОЛИЧЕСТВО(Таблица.НомерСтроки) = &РазмерПорцииЗаписи
	|;
	|ВЫБРАТЬ
	|	Регистраторы.Регистратор КАК Регистратор
	|ИЗ
	|	ВтПолныеРегистраторы КАК Регистраторы
	|;
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	&ИмяТаблицы КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПолныеРегистраторы КАК ВтПолныеРегистраторы
	|			ПО ВтПолныеРегистраторы.Регистратор = Таблица.Регистратор
	|ГДЕ
	|	ВтПолныеРегистраторы.Регистратор ЕСТЬ NULL //Если количество записей <> порции то они будут перераспределены.
	|	И Таблица.АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
	|	И Таблица.ОбъектРасчетов            = &ОбъектРасчетов
	|	И Таблица.Валюта                    = &ВалютаРасчетов
	|	И Таблица.Период                    < &НачалоДняПорядка
	|	И Таблица.Активность
	|;
	|УНИЧТОЖИТЬ ВтПолныеРегистраторы";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", "РегистрНакопления." + ИмяТаблицы);
	Если ИмяТаблицы = "РасчетыСКлиентамиПоСрокам" ИЛИ ИмяТаблицы = "РасчетыСПоставщикамиПоСрокам" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НачалоДняПорядка", "&НачалоДняПорядкаФакт");
	КонецЕсли;
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ПолныеРегистраторы = Результаты[1].Выгрузить().ВыгрузитьКолонку("Регистратор");
	ГлобальныеПеременные.Вставить(ИмяТаблицы + "Регистраторы", ПолныеРегистраторы);
	
	Возврат Результаты[2].Выгрузить();
	
КонецФункции

//Возвращает таблицу планов оплат для распределения.
Функция ПолучитьПланыОплат(Запрос, ГлобальныеПеременные)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Расчеты.Период                 КАК Период,
	|	Расчеты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	Расчеты.ДатаВозникновения      КАК ДатаВозникновения,
	|	Расчеты.ПорядокОперации        КАК ПорядокОперации,
	|	Расчеты.ПорядокЗачетаПоДатеПлатежа КАК ПорядокЗачетаПоДатеПлатежа,
	|	Расчеты.Регистратор            КАК Регистратор,
	|	Расчеты.РасчетныйДокумент      КАК ДокументПлан,
	|	Расчеты.ХозяйственнаяОперация  КАК ХозяйственнаяОперация,
	|	Расчеты.ВариантОплаты          КАК ВариантОплаты,
	|	Расчеты.ВариантОплаты.Порядок  КАК ВариантОплатыПорядок,
	|	Расчеты.КОплате                КАК КОплате,
	|	0                              КАК Оплачено,
	|	ЛОЖЬ                           КАК ПриходДобавлен,
	|	Расчеты.РасчетныйДокумент <> Неопределено КАК ЕстьДокументПлан
	|ИЗ
	|	ВТРасчетыОтгрузкиПоставки КАК Расчеты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (&СписокТиповЗаказов)
	|	И Расчеты.КОплате <> 0 
	|	И &УсловиеПорядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиПланаОплат.Период                 КАК Период,
	|	ОстаткиПланаОплат.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	ОстаткиПланаОплат.ДатаВозникновения      КАК ДатаВозникновения,
	|	&Порядок                                 КАК ПорядокОперации,
	|	ОстаткиПланаОплат.ПорядокЗачета          КАК ПорядокЗачетаПоДатеПлатежа,
	|	ОстаткиПланаОплат.ДокументПлан           КАК Регистратор,
	|	ОстаткиПланаОплат.ДокументПлан           КАК ДокументПлан,
	|	ОстаткиПланаОплат.ХозяйственнаяОперация  КАК ХозяйственнаяОперация,
	|	ОстаткиПланаОплат.ВариантОплаты          КАК ВариантОплаты,
	|	ОстаткиПланаОплат.ВариантОплаты.Порядок  КАК ВариантОплатыПорядок,
	|	ОстаткиПланаОплат.КОплате                КАК КОплате,
	|	ОстаткиПланаОплат.Оплачено               КАК Оплачено,
	|	ИСТИНА                                   КАК ПриходДобавлен,
	|	ИСТИНА                                   КАК ЕстьДокументПлан
	|ИЗ 
	|	ВТРасчетыПланОплатОстатки КАК ОстаткиПланаОплат
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЗачетаПоДатеПлатежа ВОЗР,
	|	ВариантОплатыПорядок ВОЗР";
	
	Если ГлобальныеПеременные.Порядок <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеПорядок", "И Расчеты.ПорядокОперации >= &Порядок");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеПорядок", "");
	КонецЕсли;
	
	Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеПоСтатусуРеализации", 
		"ИЛИ ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) = ТИП(Документ.РеализацияТоваровУслуг)
		|			И ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.РеализацияТоваровУслуг).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеПоСтатусуРеализации", "");
	КонецЕсли;
	
	Результат  = Запрос.Выполнить();
	ПланыОплат = Результат.Выгрузить();
	
	Возврат ПланыОплат;
	
КонецФункции

//Возвращает таблицу планов отгрузок/поставок для распределения.
Функция ПолучитьПланыОтгрузокПоставок(Запрос, ГлобальныеПеременные)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Расчеты.Период                 КАК Период,
	|	Расчеты.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	Расчеты.ДатаВозникновения      КАК ДатаВозникновения,
	|	Расчеты.ПорядокОперации        КАК ПорядокОперации,
	|	Расчеты.ПорядокЗачетаПоДатеПлатежа КАК ПорядокЗачетаПоДатеПлатежа,
	|	Расчеты.Регистратор            КАК Регистратор,
	|	Расчеты.КОтгрузкеПоставке      КАК КОтгрузкеПоставке,
	|	ЛОЖЬ                           КАК ПриходДобавлен
	|ИЗ
	|	ВТРасчетыОтгрузкиПоставки КАК Расчеты
	|ГДЕ
	|	(ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (&СписокТиповЗаказов) ИЛИ Расчеты.Регистратор ССЫЛКА Документ.Сторно)
	|	И Расчеты.КОтгрузкеПоставке > 0
	|	И &УсловиеПорядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиПланаОтгрузокПоставок.Период                 КАК Период,
	|	ОстаткиПланаОтгрузокПоставок.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	ОстаткиПланаОтгрузокПоставок.ДатаВозникновения      КАК ДатаВозникновения,
	|	ОстаткиПланаОтгрузокПоставок.ПорядокЗачета          КАК ПорядокОперации,
	|	ОстаткиПланаОтгрузокПоставок.ПорядокЗачета          КАК ПорядокЗачетаПоДатеПлатежа,
	|	ОстаткиПланаОтгрузокПоставок.ДокументПлан           КАК Регистратор,
	|	ОстаткиПланаОтгрузокПоставок.Сумма                  КАК КОтгрузкеПоставке,
	|	ИСТИНА                                              КАК ПриходДобавлен
	|ИЗ
	|	ВТРасчетыПланОтгрузокПоставокОстатки КАК ОстаткиПланаОтгрузокПоставок
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлановогоПогашения ВОЗР";
	
	Если ГлобальныеПеременные.Порядок <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &УсловиеПорядок","И Расчеты.ПорядокОперации >= &Порядок");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеПорядок", "");
	КонецЕсли;
	
	Результат  = Запрос.Выполнить();
	ПланыОтгрузокПоставок = Результат.Выгрузить();
	
	Возврат ПланыОтгрузокПоставок;
	
КонецФункции

//Возвращает таблицу оплат для распределения.
Функция ПолучитьОплаты(Запрос, ГлобальныеПеременные)
	
	//Внутри получаем все подходящие записи, неподходящие маркируются минусом.
	//Снаружи в выборке убираем минусовые показатели.
	//Снаружи в условии фильтруем записи со всеми нулевыми ресурсами.
	//Снаружи группируем только положительные записи
	//Группировки фактической задолженности не должны обязательно совпадать с группировками плановых, группировки только для сворачивания одинаковых записей.
	
	//В записи должна быть либо только КОплате либо Сумма и КОплате (уточнение плана и реальная оплата) Не должно быть суммы без "КОплате".
	
	//При переносе сумма "к оплате" равна сумме переносимой, т.к. отдельную взять неоткуда. Как вариант можно рассмотреть пересчет по коэффициенту с распределением.
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Период                                      КАК Период,
	|	ВложенныйЗапрос.ДатаВозникновения                           КАК ДатаВозникновения,
	|	ВложенныйЗапрос.ПорядокОперации                             КАК ПорядокОперации,
	|	ВложенныйЗапрос.ПорядокЗачетаПоДатеПлатежа                  КАК ПорядокЗачетаПоДатеПлатежа,
	|	ВложенныйЗапрос.Регистратор                                 КАК Регистратор,
	|	ВложенныйЗапрос.РасчетныйДокумент                           КАК РасчетныйДокумент,
	|	ВложенныйЗапрос.КорОбъектРасчетов                           КАК КорОбъектРасчетов,
	|	ВложенныйЗапрос.КорАналитикаУчетаПоПартнерам                КАК КорАналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.Сторно                                      КАК Сторно,
	|	ВложенныйЗапрос.СвязанныйДокумент                           КАК СвязанныйДокумент,
	|	ВложенныйЗапрос.ЭтоКорректировка                            КАК ЭтоКорректировка,
	|	ВложенныйЗапрос.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	ВложенныйЗапрос.РучнойКурсРегл                              КАК РучнойКурсРегл,
	|	ВложенныйЗапрос.РучнойКурсУпр                               КАК РучнойКурсУпр,
	|	ВложенныйЗапрос.ВалютаДокумента                             КАК ВалютаДокумента,
	|	ВложенныйЗапрос.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
	|	ВложенныйЗапрос.НастройкаХозяйственнойОперации              КАК НастройкаХозяйственнойОперации,
	|	ВложенныйЗапрос.ИдентификаторФинЗаписи                      КАК ИдентификаторФинЗаписи,
	|	ВложенныйЗапрос.ПриходДобавлен                              КАК ПриходДобавлен,
	|	ВложенныйЗапрос.ГрафикСписан                                КАК ГрафикСписан,
	|	СУММА(ВЫБОР КОГДА ВложенныйЗапрос.КОплате < 0 
	|		ТОГДА 0
	|		ИНАЧЕ ВложенныйЗапрос.КОплате
	|	КОНЕЦ)                                                       КАК КОплате,
	|	СУММА(ВЫБОР КОГДА ВложенныйЗапрос.Сумма < 0 
	|		ТОГДА 0
	|		ИНАЧЕ ВложенныйЗапрос.Сумма
	|	КОНЕЦ)                                                       КАК Сумма,
	|	СУММА(ВЫБОР КОГДА ВложенныйЗапрос.СуммаРегл < 0 
	|		ТОГДА 0
	|		ИНАЧЕ ВложенныйЗапрос.СуммаРегл
	|	КОНЕЦ)                                                       КАК СуммаРегл,
	|	СУММА(ВЫБОР КОГДА ВложенныйЗапрос.СуммаУпр < 0 
	|		ТОГДА 0
	|		ИНАЧЕ ВложенныйЗапрос.СуммаУпр
	|	КОНЕЦ)                                                       КАК СуммаУпр,
	|	ВложенныйЗапрос.ЭтоОстаток                                   КАК ЭтоОстаток
	|ПОМЕСТИТЬ ВТРасчетыОплаты
	|ИЗ (
	|	ВЫБРАТЬ
	|		Расчеты.Период                                                   КАК Период,
	|		ВЫБОР
	|			КОГДА НЕ РасчетыПоСрокам.Регистратор ЕСТЬ NULL
	|				ТОГДА РасчетыПоСрокам.ДатаВозникновения
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)
	|		КОНЕЦ                                                            КАК ДатаВозникновения,
	|		Расчеты.ПорядокОперации                                          КАК ПорядокОперации,
	|		Расчеты.ПорядокЗачетаПоДатеПлатежа                               КАК ПорядокЗачетаПоДатеПлатежа,
	|		Расчеты.ВалютаДокумента                                          КАК ВалютаДокумента,
	|		ВЫБОР
	|			КОГДА НЕ РасчетыПоСрокам.Регистратор ЕСТЬ NULL
	|				ТОГДА РасчетыПоСрокам.СтатьяДвиженияДенежныхСредств
	|			ИНАЧЕ Расчеты.СтатьяДвиженияДенежныхСредств
	|		КОНЕЦ                                                            КАК СтатьяДвиженияДенежныхСредств,
	|		Расчеты.НастройкаХозяйственнойОперации                           КАК НастройкаХозяйственнойОперации,
	|		Расчеты.ИдентификаторФинЗаписи                                   КАК ИдентификаторФинЗаписи,
	|		Расчеты.Регистратор                                              КАК Регистратор,
	|		Расчеты.СвязанныйДокумент                                        КАК СвязанныйДокумент,
	|		ВЫБОР 
	|			КОГДА НЕ РасчетыПоСрокам.Регистратор ЕСТЬ NULL
	|				ТОГДА РасчетыПоСрокам.РасчетныйДокумент
	|			КОГДА Расчеты.РасчетныйДокумент = Неопределено 
	|					ИЛИ Расчеты.РасчетныйДокумент = ЗНАЧЕНИЕ(Документ.ПервичныйДокумент.ПустаяСсылка)
	|				ТОГДА Расчеты.Регистратор 
	|			ИНАЧЕ Расчеты.РасчетныйДокумент
	|		КОНЕЦ                                                            КАК РасчетныйДокумент,
	|		Расчеты.КорОбъектРасчетов                                        КАК КорОбъектРасчетов,
	|		Расчеты.КорАналитикаУчетаПоПартнерам                             КАК КорАналитикаУчетаПоПартнерам,
	|		Расчеты.Сторно                                                   КАК Сторно,
	|		
	|		Расчеты.ХозяйственнаяОперация                                    КАК ХозяйственнаяОперация,
	|		ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В
	|			(ТИП(Документ.КорректировкаРеализации),ТИП(Документ.КорректировкаПриобретения)) КАК ЭтоКорректировка,
	|		ЛОЖЬ                                                             КАК ПриходДобавлен,
	|		ЛОЖЬ                                                             КАК ГрафикСписан,
	|		ВЫБОР
	|			КОГДА НЕ РасчетыПоСрокам.Регистратор ЕСТЬ NULL
	|				ТОГДА РасчетыПоСрокам.Предоплата + РасчетыПоСрокам.Долг
	|			КОГДА Расчеты.КОплате < 0 
	|					И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами)
	|				ТОГДА -Расчеты.КОплате
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
	|				ТОГДА 0
	|			ИНАЧЕ Расчеты.КОплате
	|		КОНЕЦ                                                           КАК КОплате,
	|		ВЫБОР
	|			КОГДА НЕ РасчетыПоСрокам.Регистратор ЕСТЬ NULL
	|				ТОГДА РасчетыПоСрокам.Предоплата + РасчетыПоСрокам.Долг
	|			КОГДА Расчеты.Сумма < 0 
	|					И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами)
	|				ТОГДА -Расчеты.Сумма
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
	|				ТОГДА 0
	|			ИНАЧЕ Расчеты.Сумма
	|		КОНЕЦ                                                           КАК Сумма,
	|		ВЫБОР
	|			КОГДА НЕ РасчетыПоСрокам.Регистратор ЕСТЬ NULL
	|				ТОГДА РасчетыПоСрокам.ПредоплатаРегл + РасчетыПоСрокам.ДолгРегл
	|			КОГДА Расчеты.СуммаРегл < 0 
	|					И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами)
	|				ТОГДА -Расчеты.СуммаРегл
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
	|				ТОГДА 0
	|			ИНАЧЕ Расчеты.СуммаРегл
	|		КОНЕЦ                                                           КАК СуммаРегл,
	|		ВЫБОР
	|			КОГДА НЕ РасчетыПоСрокам.Регистратор ЕСТЬ NULL
	|				ТОГДА РасчетыПоСрокам.ПредоплатаУпр + РасчетыПоСрокам.ДолгУпр
	|			КОГДА Расчеты.СуммаУпр < 0 
	|					И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами)
	|				ТОГДА -Расчеты.СуммаУпр
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
	|				ТОГДА 0
	|			ИНАЧЕ Расчеты.СуммаУпр
	|		КОНЕЦ                                                           КАК СуммаУпр,
	|		ВЫБОР
	|			КОГДА НЕ РасчетыПоСрокам.Регистратор ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ Расчеты.ВалютаДокумента = &ВалютаРегл 
	|					ИЛИ &ВалютаРасчетов = &ВалютаРегл
	|					ИЛИ Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|		КОНЕЦ                                                                             КАК РучнойКурсРегл,
	|		ВЫБОР
	|			КОГДА НЕ РасчетыПоСрокам.Регистратор ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ Расчеты.ВалютаДокумента = &ВалютаУпр 
	|					ИЛИ &ВалютаРасчетов = &ВалютаУпр
	|					ИЛИ Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|		КОНЕЦ                                                                             КАК РучнойКурсУпр,
	|		ЛОЖЬ                                                                              КАК ЭтоОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам 
	|				ПО Расчеты.Регистратор = РасчетыПоСрокам.ДокументРегистратор
	|					И Расчеты.КорОбъектРасчетов = РасчетыПоСрокам.ОбъектРасчетов
	|					И Расчеты.КорАналитикаУчетаПоПартнерам = РасчетыПоСрокам.АналитикаУчетаПоПартнерам
	|					И РасчетыПоСрокам.ОбъектРасчетов <> &ОбъектРасчетов
	|					И РасчетыПоСрокам.Активность
	|					И (РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И РасчетыПоСрокам.Долг > 0 
	|						ИЛИ РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И РасчетыПоСрокам.Предоплата > 0 )
	|					И Расчеты.Сторно = РасчетыПоСрокам.Сторно
	|	ГДЕ
	|		Расчеты.Активность
	|		И Расчеты.ОбъектРасчетов            = &ОбъектРасчетов
	|		И Расчеты.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|		И Расчеты.Валюта                    = &ВалютаРасчетов
	|		И НЕ Расчеты.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|		И &УсловиеПорядок
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстаткиОплат.Период                                                                    КАК Период,
	|		ОстаткиОплат.ДатаВозникновения                                                         КАК ДатаВозникновения,
	|		ОстаткиОплат.ПорядокЗачета                                                             КАК ПорядокОперации,
	|		ОстаткиОплат.ПорядокЗачета                                                             КАК ПорядокЗачетаПоДатеПлатежа,
	|		ОстаткиОплат.ВалютаДокумента                                                           КАК ВалютаДокумента,
	|		ОстаткиОплат.СтатьяДвиженияДенежныхСредств                                             КАК СтатьяДвиженияДенежныхСредств,
	|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)                       КАК НастройкаХозяйственнойОперации,
	|		&ИдентификаторНеиспользуемойФинЗаписи                                                  КАК ИдентификаторФинЗаписи,
	|		ОстаткиОплат.ДокументРегистратор                                                       КАК Регистратор,
	|		ОстаткиОплат.СвязанныйДокумент                                                         КАК СвязанныйДокумент,
	|		ОстаткиОплат.РасчетныйДокумент                                                         КАК РасчетныйДокумент,
	|		ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)                                      КАК КорОбъектРасчетов,
	|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)                       КАК КорАналитикаУчетаПоПартнерам,
	|		ЛОЖЬ                                                                                   КАК Сторно,
	|		ОстаткиОплат.ХозяйственнаяОперация                                                     КАК ХозяйственнаяОперация,
	|	
	|		ТИПЗНАЧЕНИЯ(ОстаткиОплат.РасчетныйДокумент) В (ТИП(Документ.КорректировкаРеализации),
	|		                                              ТИП(Документ.КорректировкаПриобретения)) КАК ЭтоКорректировка,
	|		ИСТИНА                                                                                 КАК ПриходДобавлен,
	|		ИСТИНА                                                                                 КАК ГрафикСписан,
	|
	|		0                                                                                      КАК КОплате,
	|		ОстаткиОплат.Предоплата                                                                КАК Сумма,
	|		ОстаткиОплат.ПредоплатаРегл                                                            КАК СуммаРегл,
	|		ОстаткиОплат.ПредоплатаУпр                                                             КАК СуммаУпр,
	|		ОстаткиОплат.ВалютаДокумента = &ВалютаРегл 
	|			ИЛИ &ВалютаРасчетов = &ВалютаРегл
	|			ИЛИ ОстаткиОплат.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности      КАК РучнойКурсРегл,
	|		ОстаткиОплат.ВалютаДокумента = &ВалютаУпр 
	|			ИЛИ &ВалютаРасчетов = &ВалютаУпр
	|			ИЛИ ОстаткиОплат.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности      КАК РучнойКурсУпр,
	|		ИСТИНА                                                                                 КАК ЭтоОстаток
	|	ИЗ
	|		ВТРасчетыПоСрокамОстатки КАК ОстаткиОплат
	|	ГДЕ
	|		ОстаткиОплат.ЕстьПредоплата) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.ДатаВозникновения,
	|	ВложенныйЗапрос.ПорядокОперации,
	|	ВложенныйЗапрос.ПорядокЗачетаПоДатеПлатежа,
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.РасчетныйДокумент,
	|	ВложенныйЗапрос.КорОбъектРасчетов,
	|	ВложенныйЗапрос.КорАналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.Сторно,
	|	ВложенныйЗапрос.СвязанныйДокумент,
	|	ВложенныйЗапрос.ЭтоКорректировка,
	|	ВложенныйЗапрос.ХозяйственнаяОперация,
	|	ВложенныйЗапрос.РучнойКурсРегл,
	|	ВложенныйЗапрос.РучнойКурсУпр,
	|	ВложенныйЗапрос.ВалютаДокумента,
	|	ВложенныйЗапрос.СтатьяДвиженияДенежныхСредств,
	|	ВложенныйЗапрос.ПриходДобавлен,
	|	ВложенныйЗапрос.ГрафикСписан,
	|	ВложенныйЗапрос.ЭтоОстаток,
	|	ВложенныйЗапрос.НастройкаХозяйственнойОперации,
	|	ВложенныйЗапрос.ИдентификаторФинЗаписи
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР КОГДА ВложенныйЗапрос.КОплате < 0 
	|		ТОГДА 0
	|		ИНАЧЕ ВложенныйЗапрос.КОплате
	|	КОНЕЦ) > 0
	|	ИЛИ СУММА(ВЫБОР КОГДА ВложенныйЗапрос.Сумма < 0 
	|		ТОГДА 0
	|		ИНАЧЕ ВложенныйЗапрос.Сумма
	|	КОНЕЦ) > 0
	|	ИЛИ СУММА(ВЫБОР КОГДА ВложенныйЗапрос.СуммаРегл < 0 
	|		ТОГДА 0
	|		ИНАЧЕ ВложенныйЗапрос.СуммаРегл
	|	КОНЕЦ) > 0
	|	ИЛИ СУММА(ВЫБОР КОГДА ВложенныйЗапрос.СуммаУпр < 0 
	|		ТОГДА 0
	|		ИНАЧЕ ВложенныйЗапрос.СуммаУпр
	|	КОНЕЦ) > 0
	|;
	//В расчетах получателе - должна быть 1 строчка, чтобы не задвоились суммы регл и упр из расчетов по срокам.
	//Суммируются только строки-источники 
	|ВЫБРАТЬ
	|	РасчетыОплаты.Период                                      КАК Период,
	|	РасчетыОплаты.ДатаВозникновения                           КАК ДатаВозникновения,
	|	РасчетыОплаты.ПорядокОперации                             КАК ПорядокОперации,
	//Остатки сворачиваются по порядку зачета, он должен быть один на расчетный документ
	|	РасчетыОплаты.ПорядокЗачетаПоДатеПлатежа                  КАК ПорядокЗачетаПоДатеПлатежа,
	|	РасчетыОплаты.Регистратор                                 КАК Регистратор,
	|	РасчетыОплаты.СвязанныйДокумент                           КАК СвязанныйДокумент,
	|	РасчетыОплаты.РасчетныйДокумент                           КАК РасчетныйДокумент,
	|	РасчетыОплаты.КорОбъектРасчетов                           КАК КорОбъектРасчетов,
	|	РасчетыОплаты.КорАналитикаУчетаПоПартнерам                КАК КорАналитикаУчетаПоПартнерам,
	|	РасчетыОплаты.Сторно                                      КАК Сторно,
	|
	|	РасчетыОплаты.ЭтоКорректировка                            КАК ЭтоКорректировка,
	|	РасчетыОплаты.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	РасчетыОплаты.ВалютаДокумента                             КАК ВалютаДокумента,
	|	РасчетыОплаты.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыОплаты.НастройкаХозяйственнойОперации              КАК НастройкаХозяйственнойОперации,
	|	РасчетыОплаты.ИдентификаторФинЗаписи                      КАК ИдентификаторФинЗаписи,
	|
	|	РасчетыОплаты.КОплате                                     КАК КОплате,
	|	РасчетыОплаты.Сумма                                       КАК Сумма,
	|	РасчетыОплаты.СуммаРегл                                   КАК СуммаРегл,
	|	РасчетыОплаты.СуммаУпр                                    КАК СуммаУпр,
	|
	|	РасчетыОплаты.РучнойКурсРегл                              КАК РучнойКурсРегл,
	|	РасчетыОплаты.РучнойКурсУпр                               КАК РучнойКурсУпр,
	|
	|	РасчетыОплаты.ПриходДобавлен                              КАК ПриходДобавлен,
	|	РасчетыОплаты.ГрафикСписан                                КАК ГрафикСписан,
	|	РасчетыОплаты.ЭтоОстаток                                  КАК ЭтоОстаток
	|ИЗ
	|	ВТРасчетыОплаты КАК РасчетыОплаты
	|ГДЕ
	|	РасчетыОплаты.Сумма <> 0
	|	ИЛИ РасчетыОплаты.КОплате <> 0
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОперации ВОЗР
	|";
	
	Если ГлобальныеПеременные.Порядок<>"" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &УсловиеПорядок","И Расчеты.ПорядокОперации >= &Порядок");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеПорядок", "");
	КонецЕсли;
	Если НЕ Запрос.Параметры.ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентамиПоСрокам","РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентами","РегистрНакопления.РасчетыСПоставщиками");
	КонецЕсли;
	
	Результат     = Запрос.Выполнить();
	РасчетыОплаты = Результат.Выгрузить();
	
	Возврат РасчетыОплаты;
	
КонецФункции

//Возвращает таблицу отгрузок/поставок для распределения.
Функция ПолучитьОтгрузкиПоставки(Запрос, ГлобальныеПеременные)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МИНИМУМ(ВЫБОР КОГДА (Расчеты.Регистратор ССЫЛКА Документ.ВводОстатков
	|						ИЛИ Расчеты.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов)
	|					И Расчеты.Период > Расчеты.ДатаРегистратора
	|			ТОГДА Расчеты.Период
	|		ИНАЧЕ Расчеты.ДатаРегистратора
	|	КОНЕЦ)                                              КАК Период,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА Расчеты.Период
	|		ИНАЧЕ Расчеты.ДатаПлатежа
	|	КОНЕЦ , ДЕНЬ)                                       КАК ДатаПлановогоПогашения,
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)       КАК ДатаВозникновения,
	|	Расчеты.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	Расчеты.ВариантОплаты                               КАК ВариантОплаты,
	|	Расчеты.ВалютаДокумента                             КАК ВалютаДокумента,
	|	Расчеты.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ИдентификаторФинЗаписи                      КАК ИдентификаторФинЗаписи,
	|	Расчеты.НастройкаХозяйственнойОперации              КАК НастройкаХозяйственнойОперации,
	|	Расчеты.ПорядокОперации                             КАК ПорядокОперации,
	|	Расчеты.ПорядокЗачетаПоДатеПлатежа                  КАК ПорядокЗачетаПоДатеПлатежа,
	|	Расчеты.Регистратор                                 КАК Регистратор,
	|	Расчеты.СвязанныйДокумент                           КАК СвязанныйДокумент,
	|	Расчеты.КорОбъектРасчетов                           КАК КорОбъектРасчетов,
	|	Расчеты.КорАналитикаУчетаПоПартнерам                КАК КорАналитикаУчетаПоПартнерам,
	|	Расчеты.Сторно                                      КАК Сторно,
	|
	|	ВЫБОР
	|		КОГДА &ГрафикВДоговоре И НЕ Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности ТОГДА &ГрафикИсполненияДоговора
	|		КОГДА &РасчетыПоЗаказу И НЕ Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности ТОГДА &Объект
	|		ИНАЧЕ Расчеты.ПродажаПоЗаказу 
	|	КОНЕЦ                                               КАК Заказ,
	|	ВЫБОР 
	|		КОГДА Расчеты.РасчетныйДокумент = Неопределено ИЛИ Расчеты.РасчетныйДокумент = ЗНАЧЕНИЕ(Документ.ПервичныйДокумент.ПустаяСсылка)
	|			ТОГДА Расчеты.Регистратор 
	|		ИНАЧЕ Расчеты.РасчетныйДокумент
	|	КОНЕЦ                                               КАК РасчетныйДокумент,
	|	
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.Сумма
	|						ИНАЧЕ Расчеты.Сумма
	|					КОНЕЦ) < 0 ТОГДА 0
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.Сумма
	|						ИНАЧЕ Расчеты.Сумма
	|					КОНЕЦ)
	|	КОНЕЦ КАК Сумма,
	|	
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.СуммаРегл
	|						ИНАЧЕ Расчеты.СуммаРегл
	|					КОНЕЦ) < 0 ТОГДА 0 
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.СуммаРегл
	|						ИНАЧЕ Расчеты.СуммаРегл
	|					КОНЕЦ)
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	ВЫБОР КОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.СуммаУпр
	|						ИНАЧЕ Расчеты.СуммаУпр
	|					КОНЕЦ) < 0 ТОГДА 0 
	|		ИНАЧЕ СУММА(ВЫБОР
	|						КОГДА  Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
	|						ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
	|							ТОГДА -Расчеты.СуммаУпр
	|						ИНАЧЕ Расчеты.СуммаУпр
	|					КОНЕЦ)
	|	КОНЕЦ КАК СуммаУпр,
	|	
	|	СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами И Расчеты.КОплате > 0 
	|					ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами И Расчеты.КОплате < 0
	|					ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами И Расчеты.КОплате > 0 
	|					ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами И Расчеты.КОплате < 0
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР КОГДА Расчеты.КОплате < 0 ТОГДА -Расчеты.КОплате ИНАЧЕ Расчеты.КОплате КОНЕЦ
	|		КОНЕЦ) КАК КОплате,
	|
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
	|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
	|				ТОГДА -Расчеты.КОтгрузке 
	|			ИНАЧЕ Расчеты.КОтгрузке 
	|		КОНЕЦ) КАК КОтгрузкеПоставке
	|	
	|ПОМЕСТИТЬ ВТРасчетыОтгрузкиПоставки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.Активность
	|	И Расчеты.ОбъектРасчетов            = &ОбъектРасчетов
	|	И Расчеты.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И Расчеты.Валюта                    = &ВалютаРасчетов
	|	И НЕ Расчеты.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И &УсловиеПорядок
	|	И (ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами
	|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами
	|				ТОГДА -Расчеты.Сумма
	|			ИНАЧЕ Расчеты.Сумма
	|		КОНЕЦ > 0 
	|		ИЛИ ВЫБОР
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И &ЭтоРасчетыСКлиентами И Расчеты.КОплате > 0 
	|					ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами И Расчеты.КОплате < 0
	|					ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ &ЭтоРасчетыСКлиентами И Расчеты.КОплате > 0 
	|					ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами И Расчеты.КОплате < 0
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР КОГДА Расчеты.КОплате < 0 ТОГДА -Расчеты.КОплате ИНАЧЕ Расчеты.КОплате КОНЕЦ
	|			КОНЕЦ > 0
	|		ИЛИ ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И &ЭтоРасчетыСКлиентами
	|				ИЛИ Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ &ЭтоРасчетыСКлиентами
	|				ТОГДА -Расчеты.КОтгрузке 
	|			ИНАЧЕ Расчеты.КОтгрузке 
	|			КОНЕЦ <> 0)
	|	
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ),
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА Расчеты.Период
	|		ИНАЧЕ Расчеты.ДатаПлатежа
	|	КОНЕЦ , ДЕНЬ),
	|	Расчеты.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА &ГрафикВДоговоре И НЕ Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности ТОГДА &ГрафикИсполненияДоговора
	|		КОГДА &РасчетыПоЗаказу И НЕ Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности ТОГДА &Объект
	|		ИНАЧЕ Расчеты.ПродажаПоЗаказу 
	|	КОНЕЦ,
	|	Расчеты.ВариантОплаты,
	|	Расчеты.ВалютаДокумента,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ИдентификаторФинЗаписи,
	|	Расчеты.НастройкаХозяйственнойОперации,
	|	Расчеты.ПорядокОперации,
	|	Расчеты.ПорядокЗачетаПоДатеПлатежа,
	|	Расчеты.Регистратор,
	|	Расчеты.СвязанныйДокумент,
	|	Расчеты.КорОбъектРасчетов,
	|	Расчеты.КорАналитикаУчетаПоПартнерам,
	|	Расчеты.Сторно,
	|	ВЫБОР 
	|		КОГДА Расчеты.РасчетныйДокумент = Неопределено ИЛИ Расчеты.РасчетныйДокумент = ЗНАЧЕНИЕ(Документ.ПервичныйДокумент.ПустаяСсылка)
	|		ТОГДА Расчеты.Регистратор 
	|	ИНАЧЕ Расчеты.РасчетныйДокумент
	|	КОНЕЦ
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыОтгрузкиПоставки.Регистратор КАК Регистратор,
	|	РасчетыОтгрузкиПоставки.Период КАК Период,
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента КАК ВалютаДокумента,
	|	РасчетыОтгрузкиПоставки.ВариантОплаты КАК ВариантОплаты,
	|	РасчетыОтгрузкиПоставки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	РасчетыОтгрузкиПоставки.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасчетыОтгрузкиПоставки.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	РасчетыОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	РасчетыОтгрузкиПоставки.Сторно КАК Сторно,
	|	СУММА(Сумма) КАК Сумма,
	|	СУММА(КОплате) КАК КОплате,
	|	СУММА(КОтгрузкеПоставке) КАК КОтгрузкеПоставке
	|ПОМЕСТИТЬ ОтборыКорДвижений
	|ИЗ ВТРасчетыОтгрузкиПоставки КАК РасчетыОтгрузкиПоставки
	|ГДЕ 
	|	РасчетыОтгрузкиПоставки.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И (РасчетыОтгрузкиПоставки.Сумма <> 0
	|		ИЛИ РасчетыОтгрузкиПоставки.КОтгрузкеПоставке < 0
	|		ИЛИ РасчетыОтгрузкиПоставки.КОплате <> 0 И НЕ ТИПЗНАЧЕНИЯ(РасчетыОтгрузкиПоставки.Регистратор) В (&СписокТиповЗаказов))
	|СГРУППИРОВАТЬ ПО
	|	РасчетыОтгрузкиПоставки.Регистратор,
	|	РасчетыОтгрузкиПоставки.Период,
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента,
	|	РасчетыОтгрузкиПоставки.ВариантОплаты,
	|	РасчетыОтгрузкиПоставки.ИдентификаторФинЗаписи,
	|	РасчетыОтгрузкиПоставки.ХозяйственнаяОперация,
	|	РасчетыОтгрузкиПоставки.КорОбъектРасчетов,
	|	РасчетыОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам,
	|	РасчетыОтгрузкиПоставки.Сторно
	|;
	|ВЫБРАТЬ
	|	РасчетыОтгрузкиПоставки.Период                        КАК Период,
	|	РасчетыОтгрузкиПоставки.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|	РасчетыОтгрузкиПоставки.ДатаВозникновения             КАК ДатаВозникновения,
	|	РасчетыОтгрузкиПоставки.ПорядокОперации               КАК ПорядокОперации,
	|	РасчетыОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа    КАК ПорядокЗачетаПоДатеПлатежа,
	|	РасчетыОтгрузкиПоставки.Регистратор                   КАК Регистратор,
	|	РасчетыОтгрузкиПоставки.Заказ                         КАК Заказ,
	|	РасчетыОтгрузкиПоставки.РасчетныйДокумент             КАК РасчетныйДокумент,
	|	РасчетыОтгрузкиПоставки.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	РасчетыОтгрузкиПоставки.КорОбъектРасчетов             КАК КорОбъектРасчетов,
	|	РасчетыОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам  КАК КорАналитикаУчетаПоПартнерам,
	|	РасчетыОтгрузкиПоставки.Сторно                        КАК Сторно,
	|	
	|	РасчетыОтгрузкиПоставки.Сумма                         КАК Сумма,
	|	РасчетыОтгрузкиПоставки.СуммаРегл                     КАК СуммаРегл,
	|	РасчетыОтгрузкиПоставки.СуммаУпр                      КАК СуммаУпр,
	|	РасчетыОтгрузкиПоставки.СуммаРегл                     КАК СуммаРеглДляПереоценки,
	|	РасчетыОтгрузкиПоставки.СуммаУпр                      КАК СуммаУпрДляПереоценки,
	|	РасчетыОтгрузкиПоставки.КОплате                       КАК КОплате,
	|	РасчетыОтгрузкиПоставки.КОтгрузкеПоставке             КАК КОтгрузкеПоставке,
	|	
	|	ЛОЖЬ                                                  КАК ПриходДобавлен,
	|	ЛОЖЬ                                                  КАК ПланОтгрузокПоставокСписан,
	|	РасчетыОтгрузкиПоставки.Сумма <> 0                    КАК ЕстьОстаток,
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента = &ВалютаРегл
	|		ИЛИ &ВалютаРасчетов =&ВалютаРегл
	|		ИЛИ РасчетыОтгрузкиПоставки.ХозяйственнаяОперация В (&НепересчитываемыеХО) КАК РучнойКурсРегл,
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента = &ВалютаУпр
	|		ИЛИ &ВалютаРасчетов = &ВалютаУпр
	|		ИЛИ РасчетыОтгрузкиПоставки.ХозяйственнаяОперация В (&НепересчитываемыеХО) КАК РучнойКурсУпр,
	|	ВЫБОР
	|		КОГДА РасчетыОтгрузкиПоставки.Сумма = 0 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыОтгрузкиПоставки.СуммаРегл
	|				/ РасчетыОтгрузкиПоставки.Сумма КАК ЧИСЛО(31,&РазрядностьКурсаРегл))
	|	КОНЕЦ                                                 КАК КурсРегл,
	|	ВЫБОР
	|		КОГДА РасчетыОтгрузкиПоставки.Сумма = 0 
	|			ТОГДА 0
	|		КОГДА &ВалютаРасчетов = &ВалютаУпр ИЛИ &ВалютаУпр = &ВалютаРегл
	|			ТОГДА ВЫРАЗИТЬ(РасчетыОтгрузкиПоставки.СуммаУпр
	|				/ РасчетыОтгрузкиПоставки.Сумма КАК ЧИСЛО(31,&РазрядностьКурсаРегл))
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыОтгрузкиПоставки.СуммаУпр
	|				/ РасчетыОтгрузкиПоставки.Сумма КАК ЧИСЛО(31,&РазрядностьКурсаУпр))
	|	КОНЕЦ                                                 КАК КурсУпр,
	|	
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента               КАК ВалютаДокумента,
	|	РасчетыОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыОтгрузкиПоставки.ИдентификаторФинЗаписи         КАК ИдентификаторФинЗаписи,
	|	РасчетыОтгрузкиПоставки.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации,
	|	РасчетыОтгрузкиПоставки.Период                        КАК ДатаПереоценки,
	|	ВЫБОР 
	|		КОГДА &ЭтоРасчетыСКлиентами
	|			 	И (РасчетыОтгрузкиПоставки.Регистратор Ссылка Документ.СписаниеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыОтгрузкиПоставки.Регистратор Ссылка Документ.РасходныйКассовыйОрдер)
	|			ИЛИ НЕ &ЭтоРасчетыСКлиентами 
	|				И (РасчетыОтгрузкиПоставки.Регистратор Ссылка Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыОтгрузкиПоставки.Регистратор Ссылка Документ.ПриходныйКассовыйОрдер)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                               КАК ЭтоВозвратАванса,
	|	ТИПЗНАЧЕНИЯ(РасчетыОтгрузкиПоставки.Регистратор) В 
	|		(ТИП(Документ.КорректировкаРеализации),ТИП(Документ.КорректировкаПриобретения)) КАК ЭтоКорректировка,
	|	РасчетыОтгрузкиПоставки.СвязанныйДокумент                                           КАК СвязанныйДокумент,
	|	РасчетыОтгрузкиПоставки.ВариантОплаты                                               КАК ВариантОплаты,
	|	ЛОЖЬ                                                                                КАК ЭтоОстаток
	|	
	|ИЗ ВТРасчетыОтгрузкиПоставки КАК РасчетыОтгрузкиПоставки
	|ГДЕ
	|	(РасчетыОтгрузкиПоставки.Сумма <> 0
	|		ИЛИ РасчетыОтгрузкиПоставки.КОтгрузкеПоставке < 0
	|		ИЛИ РасчетыОтгрузкиПоставки.КОплате <> 0 И НЕ ТИПЗНАЧЕНИЯ(РасчетыОтгрузкиПоставки.Регистратор) В (&СписокТиповЗаказов))
	|	И РасчетыОтгрузкиПоставки.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыОтгрузкиПоставки.Период                                                      КАК Период,
	|	ВЫБОР КОГДА РасчетыПоСрокам.ДатаПлановогоПогашения = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА РасчетыПоСрокам.ДатаВозникновения
	|		ИНАЧЕ РасчетыПоСрокам.ДатаПлановогоПогашения
	|	КОНЕЦ                                                                               КАК ДатаПлановогоПогашения,
	|	РасчетыПоСрокам.ДатаВозникновения                                                   КАК ДатаВозникновения,
	|	РасчетыПоСрокам.ПорядокОперации                                                     КАК ПорядокОперации,
	|	РасчетыПоСрокам.ПорядокЗачета                                                       КАК ПорядокЗачетаПоДатеПлатежа,
	|	РасчетыОтгрузкиПоставки.Регистратор                                                 КАК Регистратор,
	|	Неопределено                                                                        КАК Заказ,
	|	РасчетыПоСрокам.РасчетныйДокумент                                                   КАК РасчетныйДокумент,
	|	РасчетыОтгрузкиПоставки.ХозяйственнаяОперация                                       КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)                                   КАК КорОбъектРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)                    КАК КорАналитикаУчетаПоПартнерам,
	|	РасчетыОтгрузкиПоставки.Сторно                                                      КАК Сторно,
	|
	|	СУММА(РасчетыПоСрокам.Долг + РасчетыПоСрокам.Предоплата)                            КАК Сумма,
	|	СУММА(РасчетыПоСрокам.ДолгРегл + РасчетыПоСрокам.ПредоплатаРегл)                    КАК СуммаРегл,
	|	СУММА(РасчетыПоСрокам.ДолгУпр + РасчетыПоСрокам.ПредоплатаУпр)                      КАК СуммаУпр,
	|	СУММА(РасчетыПоСрокам.ДолгРегл + РасчетыПоСрокам.ПредоплатаРегл)                    КАК СуммаРеглДляПереоценки,
	|	СУММА(РасчетыПоСрокам.ДолгУпр + РасчетыПоСрокам.ПредоплатаУпр)                      КАК СуммаУпрДляПереоценки,
	|	ВЫБОР КОГДА РасчетыОтгрузкиПоставки.КОплате = 0 
	|			ТОГДА 0
	|		ИНАЧЕ РасчетыОтгрузкиПоставки.Сумма 
	|				/ РасчетыОтгрузкиПоставки.КОплате
	|				* СУММА(РасчетыПоСрокам.Долг + РасчетыПоСрокам.Предоплата)
	|	КОНЕЦ                                                                               КАК КОплате,
	|	РасчетыОтгрузкиПоставки.КОтгрузкеПоставке                                           КАК КОтгрузкеПоставке,
	|	
	|	ЛОЖЬ                                                                                КАК ПриходДобавлен,
	|	ЛОЖЬ                                                                                КАК ПланОтгрузокПоставокСписан,
	|	РасчетыОтгрузкиПоставки.Сумма <> 0                                                  КАК ЕстьОстаток,
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента = &ВалютаРегл
	|		ИЛИ &ВалютаРасчетов =&ВалютаРегл
	|		ИЛИ РасчетыОтгрузкиПоставки.ХозяйственнаяОперация В (&НепересчитываемыеХО)  КАК РучнойКурсРегл,
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента = &ВалютаУпр
	|		ИЛИ &ВалютаРасчетов = &ВалютаУпр
	|		ИЛИ РасчетыОтгрузкиПоставки.ХозяйственнаяОперация В (&НепересчитываемыеХО)  КАК РучнойКурсУпр,
	|	ВЫБОР
	|		КОГДА РасчетыПоСрокам.Долг = 0 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыПоСрокам.ДолгРегл
	|				/ РасчетыПоСрокам.Долг КАК ЧИСЛО(31,17))
	|	КОНЕЦ                                                 КАК КурсРегл,
	|	ВЫБОР
	|		КОГДА РасчетыПоСрокам.Долг = 0 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыПоСрокам.ДолгУпр
	|				/ РасчетыПоСрокам.Долг КАК ЧИСЛО(31,17))
	|	КОНЕЦ                                                 КАК КурсУпр,
	|	
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента               КАК ВалютаДокумента,
	|	РасчетыПоСрокам.СтатьяДвиженияДенежныхСредств         КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыПоСрокам.ИдентификаторФинЗаписи                КАК ИдентификаторФинЗаписи,
	|	РасчетыПоСрокам.НастройкаХозяйственнойОперации        КАК НастройкаХозяйственнойОперации,
	|	РасчетыОтгрузкиПоставки.Период                        КАК ДатаПереоценки,
	|	ВЫБОР 
	|		КОГДА &ЭтоРасчетыСКлиентами
	|			 	И (РасчетыОтгрузкиПоставки.Регистратор Ссылка Документ.СписаниеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыОтгрузкиПоставки.Регистратор Ссылка Документ.РасходныйКассовыйОрдер)
	|			ИЛИ НЕ &ЭтоРасчетыСКлиентами 
	|				И (РасчетыОтгрузкиПоставки.Регистратор Ссылка Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыОтгрузкиПоставки.Регистратор Ссылка Документ.ПриходныйКассовыйОрдер)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                 КАК ЭтоВозвратАванса,
	|	ЛОЖЬ                                  КАК ЭтоКорректировка,
	|	Неопределено                          КАК СвязанныйДокумент,
	|	РасчетыОтгрузкиПоставки.ВариантОплаты КАК ВариантОплаты,
	|	ЛОЖЬ                                  КАК ЭтоОстаток
	|	
	|ИЗ ОтборыКорДвижений КАК РасчетыОтгрузкиПоставки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам 
	|				ПО РасчетыОтгрузкиПоставки.Регистратор = РасчетыПоСрокам.ДокументРегистратор
	|				И РасчетыОтгрузкиПоставки.КорОбъектРасчетов = РасчетыПоСрокам.ОбъектРасчетов
	|				И РасчетыОтгрузкиПоставки.КорАналитикаУчетаПоПартнерам = РасчетыПоСрокам.АналитикаУчетаПоПартнерам
	|				И РасчетыПоСрокам.ОбъектРасчетов <> &ОбъектРасчетов
	|				И РасчетыОтгрузкиПоставки.Сторно = РасчетыПоСрокам.Сторно
	|				И РасчетыПоСрокам.Активность
	|СГРУППИРОВАТЬ ПО
	|	РасчетыОтгрузкиПоставки.Период,
	|	ВЫБОР КОГДА РасчетыПоСрокам.ДатаПлановогоПогашения = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА РасчетыПоСрокам.ДатаВозникновения
	|		ИНАЧЕ РасчетыПоСрокам.ДатаПлановогоПогашения
	|	КОНЕЦ,
	|	РасчетыПоСрокам.ДатаВозникновения,
	|	РасчетыПоСрокам.ПорядокОперации,
	|	РасчетыПоСрокам.ПорядокЗачета,
	|	РасчетыОтгрузкиПоставки.Регистратор,
	|	РасчетыПоСрокам.РасчетныйДокумент,
	|	РасчетыОтгрузкиПоставки.ХозяйственнаяОперация,
	|	РасчетыОтгрузкиПоставки.Сумма,
	|	РасчетыОтгрузкиПоставки.КОплате,
	|	РасчетыОтгрузкиПоставки.КОтгрузкеПоставке,
	|	РасчетыОтгрузкиПоставки.Сумма <> 0,
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента = &ВалютаРегл 
	|		ИЛИ &ВалютаРасчетов =&ВалютаРегл
	|		ИЛИ РасчетыОтгрузкиПоставки.ХозяйственнаяОперация В (&НепересчитываемыеХО),
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента = &ВалютаУпр 
	|		ИЛИ &ВалютаРасчетов = &ВалютаУпр
	|		ИЛИ РасчетыОтгрузкиПоставки.ХозяйственнаяОперация В (&НепересчитываемыеХО),
	|	ВЫБОР
	|		КОГДА РасчетыПоСрокам.Долг = 0 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыПоСрокам.ДолгРегл
	|				/ РасчетыПоСрокам.Долг КАК ЧИСЛО(31,17))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыПоСрокам.Долг = 0 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыПоСрокам.ДолгУпр
	|				/ РасчетыПоСрокам.Долг КАК ЧИСЛО(31,17))
	|	КОНЕЦ,
	|	РасчетыОтгрузкиПоставки.ВалютаДокумента,
	|	РасчетыПоСрокам.СтатьяДвиженияДенежныхСредств,
	|	РасчетыПоСрокам.ИдентификаторФинЗаписи,
	|	РасчетыПоСрокам.НастройкаХозяйственнойОперации,
	|	РасчетыОтгрузкиПоставки.Сторно,
	|	РасчетыОтгрузкиПоставки.ВариантОплаты,
	|	ВЫБОР 
	|		КОГДА &ЭтоРасчетыСКлиентами
	|			 	И (РасчетыОтгрузкиПоставки.Регистратор Ссылка Документ.СписаниеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыОтгрузкиПоставки.Регистратор Ссылка Документ.РасходныйКассовыйОрдер)
	|			ИЛИ НЕ &ЭтоРасчетыСКлиентами 
	|				И (РасчетыОтгрузкиПоставки.Регистратор Ссылка Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыОтгрузкиПоставки.Регистратор Ссылка Документ.ПриходныйКассовыйОрдер)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоСрокамОстатки.Период                                   КАК Период,
	|	РасчетыПоСрокамОстатки.ДатаПлановогоПогашения                   КАК ДатаПлановогоПогашения,
	|	РасчетыПоСрокамОстатки.ДатаВозникновения                        КАК ДатаВозникновения,
	|	РасчетыПоСрокамОстатки.ПорядокОперации                          КАК ПорядокОперации,
	|	РасчетыПоСрокамОстатки.ПорядокЗачета                            КАК ПорядокЗачетаПоДатеПлатежа,
	|	РасчетыПоСрокамОстатки.ДокументРегистратор                      КАК Регистратор,
	|	Неопределено                                                    КАК Заказ,
	|	РасчетыПоСрокамОстатки.РасчетныйДокумент                        КАК РасчетныйДокумент,
	|	РасчетыПоСрокамОстатки.ХозяйственнаяОперация                    КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)                КАК КорОбъектРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК КорАналитикаУчетаПоПартнерам,
	|	ЛОЖЬ                                                             КАК Сторно,
	|
	|	РасчетыПоСрокамОстатки.Долг                              КАК Сумма,
	|	РасчетыПоСрокамОстатки.ДолгРегл                          КАК СуммаРегл,
	|	РасчетыПоСрокамОстатки.ДолгУпр                           КАК СуммаУпр,
	|	РасчетыПоСрокамОстатки.ДолгРегл                          КАК СуммаРеглДляПереоценки,
	|	РасчетыПоСрокамОстатки.ДолгУпр                           КАК СуммаУпрДляПереоценки,
	|	0                                                               КАК КОплате,
	|//План по отгрузке/поставке остаток в ВТРасчетыПланОтгрузокПоставокОстатки
	|	0                                                               КАК КОтгрузкеПоставке, 
	|
	|	ИСТИНА                                                          КАК ПриходДобавлен,
	|	ИСТИНА                                                          КАК ПланОтгрузокПоставокСписан,
	|	ИСТИНА                                                          КАК ЕстьОстаток,
	|
	|	РасчетыПоСрокамОстатки.ВалютаДокумента = &ВалютаРегл 
	|		ИЛИ &ВалютаРасчетов =&ВалютаРегл
	|		ИЛИ РасчетыПоСрокамОстатки.ХозяйственнаяОперация В (&НепересчитываемыеХО)  КАК РучнойКурсРегл,
	|	РасчетыПоСрокамОстатки.ВалютаДокумента = &ВалютаУпр 
	|		ИЛИ &ВалютаРасчетов =&ВалютаУпр
	|		ИЛИ РасчетыПоСрокамОстатки.ХозяйственнаяОперация В (&НепересчитываемыеХО) КАК РучнойКурсУпр,
	|	ВЫБОР 
	|		КОГДА РасчетыПоСрокамОстатки.Долг = 0 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыПоСрокамОстатки.ДолгРегл 
	|					/ РасчетыПоСрокамОстатки.Долг КАК ЧИСЛО(31,17))
	|	КОНЕЦ                                                           КАК КурсРегл,
	|	ВЫБОР 
	|		КОГДА РасчетыПоСрокамОстатки.Долг = 0 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыПоСрокамОстатки.ДолгУпр
	|					/ РасчетыПоСрокамОстатки.Долг КАК ЧИСЛО(31,17))
	|	КОНЕЦ                                                           КАК КурсУпр,
	|
	|	РасчетыПоСрокамОстатки.ВалютаДокумента                          КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) КАК СтатьяДвиженияДенежныхСредств,
	|	&ИдентификаторНеиспользуемойФинЗаписи                            КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозяйственнойОперации,
	|	&ДатаПереоценки                                                 КАК ДатаПереоценки,
	|	ВЫБОР 
	|		КОГДА &ЭтоРасчетыСКлиентами
	|			 	И (РасчетыПоСрокамОстатки.РасчетныйДокумент Ссылка Документ.СписаниеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыПоСрокамОстатки.РасчетныйДокумент Ссылка Документ.РасходныйКассовыйОрдер)
	|			ИЛИ НЕ &ЭтоРасчетыСКлиентами 
	|				И (РасчетыПоСрокамОстатки.РасчетныйДокумент Ссылка Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыПоСрокамОстатки.РасчетныйДокумент Ссылка Документ.ПриходныйКассовыйОрдер)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратАванса,
	|	ТИПЗНАЧЕНИЯ(РасчетыПоСрокамОстатки.РасчетныйДокумент)= ТИП(Документ.КорректировкаРеализации)
	|	ИЛИ ТИПЗНАЧЕНИЯ(РасчетыПоСрокамОстатки.РасчетныйДокумент)= ТИП(Документ.КорректировкаПриобретения) КАК ЭтоКорректировка,
	|	РасчетыПоСрокамОстатки.СвязанныйДокумент КАК СвязанныйДокумент,
	|	Неопределено КАК ВариантОплаты,
	|	ИСТИНА КАК ЭтоОстаток
	|ИЗ
	|	ВТРасчетыПоСрокамОстатки КАК РасчетыПоСрокамОстатки
	|ГДЕ
	|	РасчетыПоСрокамОстатки.ЕстьДолг
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОперации ВОЗР,
	|	ПорядокЗачетаПоДатеПлатежа ВОЗР,
	|	Заказ ВОЗР";
	
	Если ГлобальныеПеременные.Порядок <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &УсловиеПорядок","И Расчеты.ПорядокОперации          >= &Порядок");
		Если Запрос.Параметры.Регистратор = Тип("ДокументСсылка.ВводОстатков") 
			Или Запрос.Параметры.Регистратор = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов") Тогда
			Запрос.УстановитьПараметр("ДатаПереоценки", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГлобальныеПеременные.Регистратор, "Дата"));
		Иначе
			Запрос.УстановитьПараметр("ДатаПереоценки",НачалоДня(Дата(Лев(ГлобальныеПеременные.Порядок,8))-1));
		КонецЕсли;
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ДатаПереоценки","РасчетыПоСрокамОстатки.Период");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &УсловиеПорядок","");
	КонецЕсли;
	
	Если НЕ Запрос.Параметры.ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентамиПоСрокам","РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентами","РегистрНакопления.РасчетыСПоставщиками");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"КОтгрузке ","КПоступлению ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПродажаПоЗаказу ","ЗакупкаПоЗаказу ");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&РазрядностьКурсаРегл",ГлобальныеПеременные.РазрядностьКурсаРегл);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&РазрядностьКурсаУпр",ГлобальныеПеременные.РазрядностьКурсаУпр);
	
	Результат       = Запрос.Выполнить();
	РасчетыОтгрузки = Результат.Выгрузить();
	
	Возврат РасчетыОтгрузки;
	
КонецФункции

//Возвращает таблицу курсов валют на промежуток между первой записью расчетов и текущей датой.
Функция ПолучитьКурсыВалют(Запрос, ДатаНачала, ГлобальныеПеременные)
	
	ДатаОкончания = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Курсы.Дата КАК Дата,
	|	СУММА(Курсы.КурсРегл) КАК КурсРегл,
	|	СУММА(Курсы.КурсУпр) КАК КурсУпр
	|ИЗ
	|	(ВЫБРАТЬ
	|		КурсыВалютыРасчетов.Период КАК Дата,
	|		КурсыВалютыРасчетов.КурсЧислитель / КурсыВалютыРасчетов.КурсЗнаменатель  КАК КурсРегл,
	|		0 КАК КурсУпр
	|	ИЗ
	|		РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютыРасчетов
	|	ГДЕ КурсыВалютыРасчетов.Валюта = &ВалютаРасчетов
	|		И КурсыВалютыРасчетов.БазоваяВалюта = &ВалютаРегл
	|		И КурсыВалютыРасчетов.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	
	|	ОБЪЕДИНИТЬ ВСЕ 
	|	
	|	ВЫБРАТЬ
	|		КурсыВалютыУпр.Период КАК Дата,
	|		0  КАК КурсРегл,
	|		КурсыВалютыУпр.КурсЧислитель / КурсыВалютыУпр.КурсЗнаменатель КАК КурсУпр
	|	ИЗ
	|		РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютыУпр
	|	ГДЕ КурсыВалютыУпр.Валюта = &ВалютаУпр
	|		И КурсыВалютыУпр.БазоваяВалюта = &ВалютаРегл
	|		И КурсыВалютыУпр.Период МЕЖДУ &ДатаНачала И &ДатаОкончания) КАК Курсы
	|СГРУППИРОВАТЬ ПО
	|	Дата
	|УПОРЯДОЧИТЬ ПО
	|	Дата ВОЗР
	|;
	|ВЫБРАТЬ
	|	СУММА(Курсы.КурсРегл) КАК КурсРегл,
	|	СУММА(Курсы.КурсУпр) КАК КурсУпр
	|ИЗ
	|	(ВЫБРАТЬ
	|		КурсыВалютыРасчетов.Период КАК Дата,
	|		КурсыВалютыРасчетов.КурсЧислитель / КурсыВалютыРасчетов.КурсЗнаменатель  КАК КурсРегл,
	|		0 КАК КурсУпр
	|	ИЗ
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ДатаНачала, БазоваяВалюта = &ВалютаРегл) КАК КурсыВалютыРасчетов
	|	ГДЕ КурсыВалютыРасчетов.Валюта = &ВалютаРасчетов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ 
	|	
	|	ВЫБРАТЬ
	|		КурсыВалютыУпр.Период КАК Дата,
	|		0  КАК КурсРегл,
	|		КурсыВалютыУпр.КурсЧислитель / КурсыВалютыУпр.КурсЗнаменатель КАК КурсУпр
	|	ИЗ
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ДатаНачала, БазоваяВалюта = &ВалютаРегл) КАК КурсыВалютыУпр
	|	ГДЕ КурсыВалютыУпр.Валюта = &ВалютаУпр) КАК Курсы
	|;";
	
	Запрос.УстановитьПараметр("ДатаНачала",           НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",        ДатаОкончания);
	Запрос.УстановитьПараметр("ВалютаРасчетов",       ГлобальныеПеременные.ВалютаРасчетов);
	Запрос.УстановитьПараметр("ВалютаУпр",            ГлобальныеПеременные.ВалютаУправленческогоУчета);
	Запрос.УстановитьПараметр("ВалютаРегл",           ГлобальныеПеременные.ВалютаРегламентированногоУчета);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	КурсыВалюты = Результаты[0].Выгрузить();
	КурсыВалютСрезПоследних = Результаты[1].Выгрузить();
	
	ТекущийКурсРегл = ?(КурсыВалютСрезПоследних.Количество() > 0, КурсыВалютСрезПоследних[0].КурсРегл, 1);
	ТекущийКурсУпр = ?(КурсыВалютСрезПоследних.Количество() > 0, КурсыВалютСрезПоследних[0].КурсУпр, 1);
	
	ТекущийКурсРегл = ?(ЗначениеЗаполнено(ТекущийКурсРегл), ТекущийКурсРегл, 1);
	ТекущийКурсУпр = ?(ЗначениеЗаполнено(ТекущийКурсУпр), ТекущийКурсУпр, 1);
	
	ТекущаяДата = НачалоДня(ДатаНачала);
	сч = 0;
	Пока ТекущаяДата <= ДатаОкончания Цикл
		Если КурсыВалюты.Количество() = 0
			ИЛИ сч >= КурсыВалюты.Количество()
			ИЛИ КурсыВалюты[сч].Дата <> ТекущаяДата Тогда
			НовСтр = КурсыВалюты.Вставить(сч);
			НовСтр.Дата = ТекущаяДата;
			НовСтр.КурсРегл = ТекущийКурсРегл;
			НовСтр.КурсУпр = ТекущийКурсРегл / ТекущийКурсУпр;
		Иначе
			Если КурсыВалюты[сч].КурсРегл = 0 Тогда
				КурсыВалюты[сч].КурсРегл = ТекущийКурсРегл;
			Иначе
				ТекущийКурсРегл = КурсыВалюты[сч].КурсРегл;
			КонецЕсли;
			Если КурсыВалюты[сч].КурсУпр <> 0 Тогда
				ТекущийКурсУпр = КурсыВалюты[сч].КурсУпр ;
			КонецЕсли;
			КурсыВалюты[сч].КурсУпр = ТекущийКурсРегл / ТекущийКурсУпр;
		КонецЕсли;
		ТекущаяДата = ТекущаяДата + 24*60*60;
		сч = сч + 1 ;
	КонецЦикла;
	
	КурсыВалюты.Индексы.Добавить("Дата");
	
	Возврат КурсыВалюты;
	
КонецФункции

//Возвращает таблицу накладных и зачтенных на них, на момент пересчета, авансов.
Функция ПолучитьДанныеНакладных(Запрос)
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.СвязанныйДокумент КАК СвязанныйДокумент
	|ПОМЕСТИТЬ ВтСвязанныеДокументы
	|ИЗ (
	|	ВЫБРАТЬ
	|		Оплаты.СвязанныйДокумент КАК СвязанныйДокумент
	|	ИЗ ВТРасчетыОплаты КАК Оплаты
	|	ГДЕ ТИПЗНАЧЕНИЯ(Оплаты.Регистратор) В (ТИП(Документ.КорректировкаРеализации),ТИП(Документ.КорректировкаПриобретения))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ 
	|		Отгрузки.СвязанныйДокумент КАК СвязанныйДокумент
	|	ИЗ ВТРасчетыОтгрузкиПоставки КАК Отгрузки
	|	ГДЕ ТИПЗНАЧЕНИЯ(Отгрузки.Регистратор) В (ТИП(Документ.КорректировкаРеализации),ТИП(Документ.КорректировкаПриобретения))) КАК Расчеты
	|;
	|ВЫБРАТЬ
	|	СвязанныеДокументы.СвязанныйДокумент КАК Накладная,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТРасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ВТРасчетыПоСрокамДо.Предоплата - ВТРасчетыПоСрокамДо.Долг
	|			ИНАЧЕ ВТРасчетыПоСрокамДо.Долг
	|		КОНЕЦ,0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТРасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ВТРасчетыПоСрокамДо.ПредоплатаРегл - ВТРасчетыПоСрокамДо.ДолгРегл
	|			ИНАЧЕ ВТРасчетыПоСрокамДо.ДолгРегл
	|		КОНЕЦ,0)) КАК СуммаРегл,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТРасчетыПоСрокамДо.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ВТРасчетыПоСрокамДо.ПредоплатаУпр - ВТРасчетыПоСрокамДо.ДолгУпр
	|			ИНАЧЕ ВТРасчетыПоСрокамДо.ДолгУпр
	|		КОНЕЦ,0)) КАК СуммаУпр
	|ИЗ
	|	ВтСвязанныеДокументы КАК СвязанныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК ВТРасчетыПоСрокамДо
	|			ПО СвязанныеДокументы.СвязанныйДокумент = ВТРасчетыПоСрокамДо.ДокументРегистратор
	|				И ВТРасчетыПоСрокамДо.АналитикаУчетаПоПартнерам   = &АналитикаУчетаПоПартнерам
	|				И ВТРасчетыПоСрокамДо.ОбъектРасчетов              = &ОбъектРасчетов
	|				И ВТРасчетыПоСрокамДо.Валюта                      = &ВалютаРасчетов
	|				И ВТРасчетыПоСрокамДо.ПорядокОперации             < &Порядок
	|				И НЕ ВТРасчетыПоСрокамДо.ДокументРегистратор      = &Регистратор
	|				И ВТРасчетыПоСрокамДо.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязанныеДокументы.СвязанныйДокумент
	|";
	
	Если НЕ Запрос.Параметры.ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.РасчетыСКлиентамиПоСрокам", "РегистрНакопления.РасчетыСПоставщикамиПоСрокам");		
	КонецЕсли;
	
	ДанныеНакладных = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеНакладных
	
КонецФункции

#КонецОбласти

#Область ОбщиеМетодыДобавленияСтрок

//Переоценивает долг до момента оплаты.
Процедура ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, РасчетыОтгрузкиПоставки, Регистратор, СтрокаОплаты = Неопределено, ПереоценкаНаДатуОплаты = ИСТИНА)
	
	СтрокиОтгрузки = РасчетыОтгрузкиПоставки.НайтиСтроки(Новый Структура("Регистратор",Регистратор));
	
	Для Каждого СтрокаОтгрузки Из СтрокиОтгрузки Цикл
		
		Если СтрокаОтгрузки.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ГлобальныеПеременные.ЕжедневнаяПереоценка Тогда
			ДатаКэш = НачалоДня(СтрокаОтгрузки.ДатаПереоценки);
		Иначе
			ДатаКэш = НачалоДня(КонецМесяца(СтрокаОтгрузки.ДатаПереоценки));
		КонецЕсли;
		
		ОкончательнаяДатаПереоценки = ?(СтрокаОплаты <> Неопределено, НачалоДня(СтрокаОплаты.Период), ТекущаяДатаСеанса());
		
		Пока ДатаКэш < ОкончательнаяДатаПереоценки Цикл
			
			//Отгрузку могли уже переоценить до даты предыдущей оплаты.
			Если ДатаКэш > СтрокаОтгрузки.ДатаПереоценки Тогда
				СтрокаКурса = ГлобальныеПеременные.ТаблицаКурсовВалют.Найти(ДатаКэш, "Дата");
				
				Если СтрокаКурса <> Неопределено Тогда
					СуммаПереоценкиРегл = Окр(СтрокаОтгрузки.Сумма * СтрокаКурса.КурсРегл, 2) - СтрокаОтгрузки.СуммаРеглДляПереоценки;
					СуммаПереоценкиУпр = Окр(СтрокаОтгрузки.Сумма * СтрокаКурса.КурсУпр, 2) - СтрокаОтгрузки.СуммаУпрДляПереоценки;
					ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, КонецДня(ДатаКэш), СтрокаОтгрузки, "Долг", СуммаПереоценкиРегл, СуммаПереоценкиУпр);
					
					СтрокаОтгрузки.СуммаРеглДляПереоценки      = СтрокаОтгрузки.СуммаРеглДляПереоценки + СуммаПереоценкиРегл;
					СтрокаОтгрузки.СуммаУпрДляПереоценки       = СтрокаОтгрузки.СуммаУпрДляПереоценки + СуммаПереоценкиУпр;
					
					СтрокаОтгрузки.ДатаПереоценки = ДатаКэш;
				КонецЕсли;
			КонецЕсли;
			
			Если ГлобальныеПеременные.ЕжедневнаяПереоценка Тогда
				ДатаКэш = ДатаКэш + 86400;
			Иначе
				ДатаКэш = НачалоДня(КонецМесяца(КонецМесяца(ДатаКэш)+1));
			КонецЕсли;
			
		КонецЦикла;
		
		//Требуется переоценка на дату оплаты.
		Если СтрокаОплаты <> Неопределено И НачалоДня(СтрокаОплаты.Период) > СтрокаОтгрузки.ДатаПереоценки И ПереоценкаНаДатуОплаты Тогда
			
			СтрокаКурса = ГлобальныеПеременные.ТаблицаКурсовВалют.Найти(НачалоДня(СтрокаОплаты.Период), "Дата");
			Если СтрокаКурса <> Неопределено Тогда 
				//Долг всегда переоценивается на дату оплаты.
				СуммаПереоценкиРегл = Окр(СтрокаОтгрузки.Сумма * СтрокаКурса.КурсРегл, 2) - СтрокаОтгрузки.СуммаРеглДляПереоценки;
				СуммаПереоценкиУпр = Окр(СтрокаОтгрузки.Сумма * СтрокаКурса.КурсУпр, 2) - СтрокаОтгрузки.СуммаУпрДляПереоценки;
				ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, НачалоДня(СтрокаОплаты.Период), СтрокаОтгрузки, "Долг", СуммаПереоценкиРегл, СуммаПереоценкиУпр);
				
				СтрокаОтгрузки.СуммаРеглДляПереоценки      = СтрокаОтгрузки.СуммаРеглДляПереоценки + СуммаПереоценкиРегл;
				СтрокаОтгрузки.СуммаУпрДляПереоценки       = СтрокаОтгрузки.СуммаУпрДляПереоценки + СуммаПереоценкиУпр;
				
				СтрокаОтгрузки.ДатаПереоценки = НачалоДня(СтрокаОплаты.Период);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Добавляет записи прихода по ресурсам долг и предоплата.
Процедура ДобавитьПриход(ГлобальныеПеременные, ТаблицаДвиженийРасчетов, СтрокаРасчетов, ТипИсточника, ПланыОплат = Неопределено)
	
	Если СтрокаРасчетов.Сумма = 0 И СтрокаРасчетов.КОплате = 0 ИЛИ СтрокаРасчетов.ПриходДобавлен Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаРасчетов, ТипИсточника);
	
	Если ТипИсточника = "ОтгрузкаПоставка" Тогда
		ДобавитьУточнениеЗаказаКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат,СтрокаРасчетов);
	КонецЕсли;
	
	Если СтрокаРасчетов.Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРасчетов.ПорядокОперации >= ГлобальныеПеременные.ПорядокФакт Тогда
	
		НовСтр = ТаблицаДвиженийРасчетов.Добавить();
		НовСтр.ВидДвижения                   = ВидДвиженияНакопления.Приход;
		НовСтр.ДокументРегистратор           = СтрокаРасчетов.Регистратор;
		НовСтр.РасчетныйДокумент             = СтрокаРасчетов.РасчетныйДокумент;
		НовСтр.ХозяйственнаяОперация         = СтрокаРасчетов.ХозяйственнаяОперация;
		НовСтр.ВалютаДокумента               = СтрокаРасчетов.ВалютаДокумента;
		НовСтр.ДатаВозникновения             = СтрокаРасчетов.ДатаВозникновения;
		НовСтр.Период                        = СтрокаРасчетов.Период;
		НовСтр.ПорядокЗачета                 = СтрокаРасчетов.ПорядокЗачетаПоДатеПлатежа;
		НовСтр.ПорядокОперации               = СтрокаРасчетов.ПорядокОперации;
		НовСтр.СтатьяДвиженияДенежныхСредств = СтрокаРасчетов.СтатьяДвиженияДенежныхСредств;
		НовСтр.НастройкаХозяйственнойОперации = СтрокаРасчетов.НастройкаХозяйственнойОперации;
		НовСтр.ИдентификаторФинЗаписи        = СтрокаРасчетов.ИдентификаторФинЗаписи;
		НовСтр.КорОбъектРасчетов             = СтрокаРасчетов.КорОбъектРасчетов;
		НовСтр.КорАналитикаУчетаПоПартнерам  = СтрокаРасчетов.КорАналитикаУчетаПоПартнерам;
		НовСтр.Сторно                        = СтрокаРасчетов.Сторно;
		
		Если ТипИсточника = "Оплата" Тогда
		
			НовСтр.СвязанныйДокумент     = СтрокаРасчетов.СвязанныйДокумент;
		
			НовСтр.Долг           = 0;
			НовСтр.ДолгРегл       = 0;
			НовСтр.ДолгУпр        = 0;
		
			НовСтр.Предоплата     = СтрокаРасчетов.Сумма;
			НовСтр.ПредоплатаРегл = СтрокаРасчетов.СуммаРегл;
			НовСтр.ПредоплатаУпр  = СтрокаРасчетов.СуммаУпр;
			НовСтр.ДатаПлановогоПогашения = Дата(1,1,1);
			
		ИначеЕсли ТипИсточника = "ОтгрузкаПоставка" Тогда
		
			НовСтр.Долг           = СтрокаРасчетов.Сумма;
			НовСтр.ДолгРегл       = СтрокаРасчетов.СуммаРегл;
			НовСтр.ДолгУпр        = СтрокаРасчетов.СуммаУпр;
			НовСтр.Предоплата     = 0;
			НовСтр.ПредоплатаРегл = 0;
			НовСтр.ПредоплатаУпр  = 0;
		
			НовСтр.ДатаПлановогоПогашения = СтрокаРасчетов.ДатаПлановогоПогашения;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипИсточника = "ОтгрузкаПоставка" Тогда
		//Записи в ДанныеНакладных может не быть.
		Если ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.Регистратор] = Неопределено Тогда
			ГлобальныеПеременные.ДанныеНакладных.Вставить(СтрокаРасчетов.Регистратор, СтруктураСумм());
		КонецЕсли;
		
		//Если добавляем приход, значит авансы уже зачтены, и осталась часть долга по курсу накладной.
		ДанныеНакладной = ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.Регистратор];
		ДанныеНакладной.СуммаДокумента     = ДанныеНакладной.СуммаДокумента + СтрокаРасчетов.Сумма;
		ДанныеНакладной.СуммаДокументаРегл = ДанныеНакладной.СуммаДокументаРегл + СтрокаРасчетов.СуммаРегл;
		ДанныеНакладной.СуммаДокументаУпр  = ДанныеНакладной.СуммаДокументаУпр  + СтрокаРасчетов.СуммаУпр;
	КонецЕсли;
	
	СтрокаРасчетов.ПриходДобавлен = Истина;
	
КонецПроцедуры

//Добавляет записи переоценки долга.
Процедура ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоДокументам, Период, СтрокаРасчетов, Тип, СуммаРегл, СуммаУпр)
	
	Если НЕ ГлобальныеПеременные.Свойство("ТаблицаКурсовВалют")
		ИЛИ СуммаРегл = 0 И СуммаУпр = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПорядокПереоценки = ГлобальныеПеременные.ПорядокПереоценки.Получить(Период);
	Если ПорядокПереоценки = Неопределено Тогда
		ПорядокПереоценки = Порядок(Период,"", Тип("ДокументСсылка.РасчетКурсовыхРазниц"),"9","99");
		ГлобальныеПеременные.ПорядокПереоценки.Вставить(Период, ПорядокПереоценки);
	КонецЕсли;
	
	Если ПорядокПереоценки < ГлобальныеПеременные.ПорядокФакт Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаРегл < 0 ИЛИ СуммаУпр < 0 Тогда
		СтрокаПереоценки = ТаблицаРасчетовПоДокументам.Добавить();
		СтрокаПереоценки.ВидДвижения              = ВидДвиженияНакопления.Расход;
		СтрокаПереоценки.ДокументРегистратор      = ГлобальныеПеременные.ДокументыРасчетаКурсовыхРазниц[НачалоМесяца(Период)];
		СтрокаПереоценки.ХозяйственнаяОперация    = ГлобальныеПеременные.ХозяйственныеОперации["ПереоценкаОтрицательная"];
		СтрокаПереоценки.РасчетныйДокумент        = СтрокаРасчетов.РасчетныйДокумент;
		СтрокаПереоценки.ВалютаДокумента          = СтрокаРасчетов.ВалютаДокумента;
		СтрокаПереоценки.ДатаВозникновения        = СтрокаРасчетов.ДатаВозникновения;
		СтрокаПереоценки.НастройкаХозяйственнойОперации = ГлобальныеПеременные.НастройкиХО["ПереоценкаОтрицательная"];
		СтрокаПереоценки.ИдентификаторФинЗаписи   = Новый УникальныйИдентификатор;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаРасчетов,"ПорядокЗачетаПоДатеПлатежа") Тогда
			СтрокаПереоценки.ПорядокЗачета            = СтрокаРасчетов.ПорядокЗачетаПоДатеПлатежа;
		Иначе
			СтрокаПереоценки.ПорядокЗачета            = СтрокаРасчетов.ПорядокЗачета;
		КонецЕсли;
		СтрокаПереоценки.Период                   = Период;
		СтрокаПереоценки.ПорядокОперации          = ПорядокПереоценки;
		СтрокаПереоценки.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		
		Если Тип = "Долг" Тогда
			СтрокаПереоценки.ДолгРегл             = ?(СуммаРегл < 0, -СуммаРегл, 0);
			СтрокаПереоценки.ДолгУпр              = ?(СуммаУпр < 0, -СуммаУпр, 0);
			СтрокаПереоценки.ДатаПлановогоПогашения   = СтрокаРасчетов.ДатаПлановогоПогашения;
		Иначе
			СтрокаПереоценки.ПредоплатаРегл       = ?(СуммаРегл < 0, -СуммаРегл, 0);
			СтрокаПереоценки.ПредоплатаУпр        = ?(СуммаУпр < 0, -СуммаУпр, 0);
			СтрокаПереоценки.ДатаПлановогоПогашения   = Дата(1,1,1);
		КонецЕсли;
		
		СтрокаПереоценки.КорОбъектРасчетов            = Справочники.ОбъектыРасчетов.ПустаяСсылка();
		СтрокаПереоценки.КорАналитикаУчетаПоПартнерам = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка();
		
	КонецЕсли;
	
	Если СуммаРегл > 0 ИЛИ СуммаУпр > 0 Тогда
		СтрокаПереоценки = ТаблицаРасчетовПоДокументам.Добавить();
		СтрокаПереоценки.ВидДвижения              = ВидДвиженияНакопления.Приход;
		СтрокаПереоценки.ДокументРегистратор      = ГлобальныеПеременные.ДокументыРасчетаКурсовыхРазниц[НачалоМесяца(Период)];
		СтрокаПереоценки.ХозяйственнаяОперация    = ГлобальныеПеременные.ХозяйственныеОперации["ПереоценкаПоложительная"];
		СтрокаПереоценки.РасчетныйДокумент        = СтрокаРасчетов.РасчетныйДокумент;
		СтрокаПереоценки.ВалютаДокумента          = СтрокаРасчетов.ВалютаДокумента;
		СтрокаПереоценки.ДатаВозникновения        = СтрокаРасчетов.ДатаВозникновения;
		СтрокаПереоценки.НастройкаХозяйственнойОперации = ГлобальныеПеременные.НастройкиХО["ПереоценкаПоложительная"];
		СтрокаПереоценки.ИдентификаторФинЗаписи   = Новый УникальныйИдентификатор;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаРасчетов,"ПорядокЗачетаПоДатеПлатежа") Тогда
			СтрокаПереоценки.ПорядокЗачета            = СтрокаРасчетов.ПорядокЗачетаПоДатеПлатежа;
		Иначе
			СтрокаПереоценки.ПорядокЗачета            = СтрокаРасчетов.ПорядокЗачета;
		КонецЕсли;
		СтрокаПереоценки.Период                   = Период;
		СтрокаПереоценки.ПорядокОперации          = ПорядокПереоценки;
		СтрокаПереоценки.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		
		Если Тип = "Долг" Тогда
			СтрокаПереоценки.ДолгРегл               = ?(СуммаРегл > 0, СуммаРегл, 0);
			СтрокаПереоценки.ДолгУпр                = ?(СуммаУпр > 0, СуммаУпр, 0);
			СтрокаПереоценки.ДатаПлановогоПогашения = СтрокаРасчетов.ДатаПлановогоПогашения;
		Иначе
			СтрокаПереоценки.ПредоплатаРегл         = ?(СуммаРегл > 0, СуммаРегл, 0);
			СтрокаПереоценки.ПредоплатаУпр          = ?(СуммаУпр > 0, СуммаУпр, 0);
			СтрокаПереоценки.ДатаПлановогоПогашения   = Дата(1,1,1);
		КонецЕсли;
		
		СтрокаПереоценки.КорОбъектРасчетов            = Справочники.ОбъектыРасчетов.ПустаяСсылка();
		СтрокаПереоценки.КорАналитикаУчетаПоПартнерам = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

//Добавляет расходные движения по плану отгрузок.
Процедура СписатьПланОтгрузкиПоставки(ГлобальныеПеременные, ТаблицаДвиженийПланОтгрузокПоставок, СтрокаРасчетов, ПланыОтгрузок)
	
	СуммаКРаспределению = -СтрокаРасчетов.КОтгрузкеПоставке;
	
	//Расчеты по договору, график по заказу.
	//Строки плана подбираются по заказу накладной, а не по объекту расчетов в общем.
	Если ГлобальныеПеременные.РассчитыватьПланы
		И (ЗначениеЗаполнено(СтрокаРасчетов.Заказ) ИЛИ ГлобальныеПеременные.ГрафикВДоговоре) И СуммаКРаспределению > 0 Тогда
		
		СтрокиПлана = ПланыОтгрузок.НайтиСтроки(Новый Структура("Регистратор", СтрокаРасчетов.Заказ));
		Для Каждого СтрокаПланаОтгрузкиПоставки Из СтрокиПлана Цикл
			Если СтрокаПланаОтгрузкиПоставки.КОтгрузкеПоставке = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НовСтр = ТаблицаДвиженийПланОтгрузокПоставок.Добавить();
			НовСтр.ВидДвижения              = ВидДвиженияНакопления.Расход;
			
			НовСтр.ДокументРегистратор      = СтрокаРасчетов.Регистратор;
			НовСтр.ДокументПлан             = СтрокаПланаОтгрузкиПоставки.Регистратор;
			НовСтр.Период                   = СтрокаРасчетов.Период;
			НовСтр.ДатаПлановогоПогашения   = СтрокаПланаОтгрузкиПоставки.ДатаПлановогоПогашения;
			НовСтр.ДатаВозникновения        = СтрокаПланаОтгрузкиПоставки.ДатаВозникновения;
			НовСтр.ПорядокОперации          = СтрокаРасчетов.ПорядокОперации;
			НовСтр.ПорядокЗачета            = СтрокаПланаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
			
			НовСтр.Сумма = ВзаиморасчетыСервер.СписатьСумму(СтрокаПланаОтгрузкиПоставки.КОтгрузкеПоставке, СуммаКРаспределению);
		КонецЦикла;
		Для каждого СтрокаПланаОтгрузкиПоставки Из СтрокиПлана Цикл
			Если СтрокаПланаОтгрузкиПоставки.КОтгрузкеПоставке=0 Тогда
				ПланыОтгрузок.Удалить(СтрокаПланаОтгрузкиПоставки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаРасчетов.ПланОтгрузокПоставокСписан = Истина;
	
КонецПроцедуры

//Пересчитывает сумму регл. и упр. учета строки расчетов по курсу связанного документа, если он проведен.
Процедура ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаРасчетов, ТипИсточника = "")
	
	Если СтрокаРасчетов.ЭтоКорректировка
		И ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент] <> Неопределено
		И ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокумента <> 0 Тогда
		
		Если НЕ ТипИсточника = "ОтгрузкаПоставка" 
			ИЛИ ГлобальныеПеременные.ВалютаРегламентированногоУчета <> СтрокаРасчетов.ВалютаДокумента
				И ГлобальныеПеременные.ВалютаРегламентированногоУчета <> ГлобальныеПеременные.ВалютаРасчетов Тогда
			СтрокаРасчетов.СуммаРегл = Окр(СтрокаРасчетов.Сумма *
				(ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокументаРегл
					/ ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокумента),2);
		КонецЕсли;
		Если НЕ ТипИсточника = "ОтгрузкаПоставка" 
			ИЛИ ГлобальныеПеременные.ВалютаУправленческогоУчета <> СтрокаРасчетов.ВалютаДокумента
				И ГлобальныеПеременные.ВалютаУправленческогоУчета <> ГлобальныеПеременные.ВалютаРасчетов Тогда
			СтрокаРасчетов.СуммаУпр = Окр(СтрокаРасчетов.Сумма *
				(ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокументаУпр
					/ ГлобальныеПеременные.ДанныеНакладных[СтрокаРасчетов.СвязанныйДокумент].СуммаДокумента),2);
		КонецЕсли;
		
		Если ТипИсточника = "ОтгрузкаПоставка" Тогда
			СтрокаРасчетов.СуммаРеглДляПереоценки = СтрокаРасчетов.СуммаРегл;
			СтрокаРасчетов.СуммаУпрДляПереоценки = СтрокаРасчетов.СуммаУпр;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаРасчетов.ЭтоКорректировка = Ложь;
	
КонецПроцедуры

//Если в записи есть сумма для плана оплаты - корректируем ее, если нет, то идем дальше по этому же регистратору
Процедура ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат, СтрокаРасчетов, Сумма, ДокументПлан = Неопределено)
	
	Если Сумма = 0 ИЛИ НЕ ГлобальныеПеременные.РассчитыватьПланы Тогда
		Возврат;
	КонецЕсли;
	
	НовСтр = ПланыОплат.Добавить();
	НовСтр.Регистратор                = СтрокаРасчетов.Регистратор;
	НовСтр.Период                     = СтрокаРасчетов.Период;
	НовСтр.ДатаВозникновения          = СтрокаРасчетов.ДатаВозникновения;

	НовСтр.ПорядокОперации            = СтрокаРасчетов.ПорядокОперации;
	НовСтр.ПорядокЗачетаПоДатеПлатежа = СтрокаРасчетов.ПорядокЗачетаПоДатеПлатежа;

	НовСтр.ХозяйственнаяОперация      = СтрокаРасчетов.ХозяйственнаяОперация;
	Если Не ЗначениеЗаполнено(ДокументПлан) И СтрокаРасчетов.Регистратор <> СтрокаРасчетов.РасчетныйДокумент Тогда
		НовСтр.ДокументПлан = СтрокаРасчетов.РасчетныйДокумент;
	Иначе
		НовСтр.ДокументПлан               = ДокументПлан;
	КонецЕсли;
	НовСтр.ЕстьДокументПлан = ЗначениеЗаполнено(НовСтр.ДокументПлан);
	
	НовСтр.ПриходДобавлен             = ЛОЖЬ;
	
	Если Сумма < 0 Тогда
		НовСтр.Оплачено                 = -Сумма;
		СуммаСписания = Мин(-Сумма,СтрокаРасчетов.КОплате);
	Иначе
		
		Если ЗначениеЗаполнено(СтрокаРасчетов.ВариантОплаты) Тогда
			НовСтр.ВариантОплаты              = СтрокаРасчетов.ВариантОплаты;
		Иначе
			Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
				НовСтр.ВариантОплаты              = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки;
			Иначе
				НовСтр.ВариантОплаты              = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления;
			КонецЕсли;
		КонецЕсли;
		
		НовСтр.ДатаПлановогоПогашения   = СтрокаРасчетов.ДатаПлановогоПогашения;
		НовСтр.КОплате                  = Сумма;
		СуммаСписания = Мин(Сумма,СтрокаРасчетов.КОплате);
		
	КонецЕсли;
	
	СтрокаРасчетов.КОплате = СтрокаРасчетов.КОплате - СуммаСписания;
	
КонецПроцедуры

// Добавлена так как в оперативных регистрах этих движений нет
Процедура ДобавитьУточнениеЗаказаКРасчетуПланаОплат(ГлобальныеПеременные, ПланыОплат, СтрокаРасчетов)
	
	Если НЕ ГлобальныеПеременные.РассчитыватьПланы Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРасчетов.Сумма - СтрокаРасчетов.КОплате <> 0 И ЗначениеЗаполнено(СтрокаРасчетов.Заказ) Тогда
	
		НовСтр = ПланыОплат.Добавить();
		НовСтр.Регистратор                = СтрокаРасчетов.Регистратор;
		НовСтр.Период                     = СтрокаРасчетов.Период;
		НовСтр.ДатаВозникновения          = СтрокаРасчетов.ДатаВозникновения;

		НовСтр.ПорядокОперации            = СтрокаРасчетов.ПорядокОперации;
		НовСтр.ПорядокЗачетаПоДатеПлатежа = СтрокаРасчетов.ПорядокЗачетаПоДатеПлатежа;

		НовСтр.ХозяйственнаяОперация      = СтрокаРасчетов.ХозяйственнаяОперация;
		НовСтр.ДокументПлан               = СтрокаРасчетов.Заказ;
		НовСтр.ЕстьДокументПлан           = ИСТИНА;
		НовСтр.ПриходДобавлен             = ЛОЖЬ;
		
		НовСтр.Оплачено                 = СтрокаРасчетов.Сумма - СтрокаРасчетов.КОплате;
	
	КонецЕсли;
	
	Если СтрокаРасчетов.Сумма  <> 0 И ЗначениеЗаполнено(СтрокаРасчетов.Заказ)  Тогда
	
		НовСтр = ПланыОплат.Добавить();
		НовСтр.Регистратор                = СтрокаРасчетов.Регистратор;
		НовСтр.Период                     = СтрокаРасчетов.Период;
		НовСтр.ДатаВозникновения          = СтрокаРасчетов.ДатаВозникновения;

		НовСтр.ПорядокОперации            = СтрокаРасчетов.ПорядокОперации;
		НовСтр.ПорядокЗачетаПоДатеПлатежа = СтрокаРасчетов.ПорядокЗачетаПоДатеПлатежа;

		НовСтр.ХозяйственнаяОперация      = СтрокаРасчетов.ХозяйственнаяОперация;
		НовСтр.ПриходДобавлен             = ЛОЖЬ;
		
		НовСтр.КОплате                    = СтрокаРасчетов.Сумма;
		Если ЗначениеЗаполнено(СтрокаРасчетов.ВариантОплаты) Тогда
			НовСтр.ВариантОплаты              = СтрокаРасчетов.ВариантОплаты;
		Иначе
			Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
				НовСтр.ВариантОплаты              = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки;
			Иначе
				НовСтр.ВариантОплаты              = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления;
			КонецЕсли;
		КонецЕсли;
		НовСтр.ДатаПлановогоПогашения     = СтрокаРасчетов.ДатаПлановогоПогашения;
	
	КонецЕсли;
	
	Если СтрокаРасчетов.КОплате <> 0 И НЕ ЗначениеЗаполнено(СтрокаРасчетов.Заказ)  Тогда
	
		НовСтр = ПланыОплат.Добавить();
		НовСтр.Регистратор                = СтрокаРасчетов.Регистратор;
		НовСтр.Период                     = СтрокаРасчетов.Период;
		НовСтр.ДатаВозникновения          = СтрокаРасчетов.ДатаВозникновения;

		НовСтр.ПорядокОперации            = СтрокаРасчетов.ПорядокОперации;
		НовСтр.ПорядокЗачетаПоДатеПлатежа = СтрокаРасчетов.ПорядокЗачетаПоДатеПлатежа;

		НовСтр.ХозяйственнаяОперация      = СтрокаРасчетов.ХозяйственнаяОперация;
		НовСтр.ПриходДобавлен             = ЛОЖЬ;
		
		НовСтр.КОплате                    = СтрокаРасчетов.КОплате;
		Если ЗначениеЗаполнено(СтрокаРасчетов.ВариантОплаты) Тогда
			НовСтр.ВариантОплаты              = СтрокаРасчетов.ВариантОплаты;
		Иначе
			Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
				НовСтр.ВариантОплаты              = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки;
			Иначе
				НовСтр.ВариантОплаты              = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления;
			КонецЕсли;
		КонецЕсли;
		НовСтр.ДатаПлановогоПогашения     = СтрокаРасчетов.ДатаПлановогоПогашения;
	
		Если СтрокаРасчетов.Регистратор <> СтрокаРасчетов.РасчетныйДокумент Тогда
			НовСтр.ДокументПлан = СтрокаРасчетов.РасчетныйДокумент;
			Если ЗначениеЗаполнено(НовСтр.ДокументПлан) Тогда
				НовСтр.ЕстьДокументПлан = Истина;
			КонецЕсли;
		КонецЕсли;
	
		СтрокаРасчетов.КОплате = СтрокаРасчетов.КОплате - НовСтр.КОплате;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, СтрокаПлана, ХозяйственнаяОперация, КОплате = 0, Оплачено = 0)
	
	Если НЕ СтрокаПлана.ПриходДобавлен Тогда
		НовСтр = ТаблицаПланОплат.Добавить();
		НовСтр.ВидДвижения               = ВидДвиженияНакопления.Приход;
		НовСтр.ДокументРегистратор       = СтрокаПлана.Регистратор;
		Если (ТипЗнч(СтрокаПлана.Регистратор) = Тип("ДокументСсылка.ВводОстатков") 
			ИЛИ ТипЗнч(СтрокаПлана.Регистратор) = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов"))
			И ЗначениеЗаполнено(СтрокаПлана.ДокументПлан) Тогда
			НовСтр.ДокументПлан              = СтрокаПлана.ДокументПлан;
		Иначе
			НовСтр.ДокументПлан              = СтрокаПлана.Регистратор;
		КонецЕсли;
		НовСтр.ВариантОплаты             = СтрокаПлана.ВариантОплаты;
		НовСтр.Период                    = СтрокаПлана.Период;
		НовСтр.ДатаВозникновения         = СтрокаПлана.ДатаВозникновения;
		НовСтр.ДатаПлановогоПогашения    = СтрокаПлана.ДатаПлановогоПогашения;
		НовСтр.КОплате                   = КОплате;
		НовСтр.Оплачено                  = Оплачено;
		НовСтр.ПорядокОперации           = СтрокаПлана.ПорядокОперации;
		НовСтр.ПорядокЗачета             = СтрокаПлана.ПорядокЗачетаПоДатеПлатежа;
		НовСтр.ХозяйственнаяОперация     = ХозяйственнаяОперация;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРасходПланаОплат(ТаблицаПланОплат, Приход, Расход, СуммаКОплате, СуммаОплачено, ДокументПланРасхода = Ложь)
	
	НовСтр = ТаблицаПланОплат.Добавить();
	НовСтр.ВидДвижения               = ВидДвиженияНакопления.Расход;
	НовСтр.ДокументРегистратор       = Расход.Регистратор;
	Если НЕ ДокументПланРасхода Тогда
		Если (ТипЗнч(Приход.Регистратор) = Тип("ДокументСсылка.ВводОстатков") 
			ИЛИ ТипЗнч(Приход.Регистратор) = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов"))
			И ЗначениеЗаполнено(Приход.ДокументПлан) Тогда
			НовСтр.ДокументПлан              = Приход.ДокументПлан;
		Иначе
			НовСтр.ДокументПлан              = Приход.Регистратор;
		КонецЕсли;
	Иначе
		НовСтр.ДокументПлан              = Расход.ДокументПлан;
	КонецЕсли;
	НовСтр.ВариантОплаты             = Приход.ВариантОплаты;
	НовСтр.Период                    = Расход.Период;
	НовСтр.ДатаВозникновения         = Приход.ДатаВозникновения;
	НовСтр.ДатаПлановогоПогашения    = Приход.ДатаПлановогоПогашения;
	НовСтр.КОплате                   = СуммаКОплате;
	НовСтр.Оплачено                  = СуммаОплачено;
	НовСтр.ПорядокОперации           = Расход.ПорядокОперации;
	НовСтр.ПорядокЗачета             = Приход.ПорядокЗачетаПоДатеПлатежа;
	НовСтр.ХозяйственнаяОперация     = Расход.ХозяйственнаяОперация;
	
КонецПроцедуры

#КонецОбласти

#Область ПереходНаОнлайнВзаиморасчеты

Процедура ЗаполнитьРегистрПереходаНаОнлайн()
	
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(РасчетыСКлиентами.ДатаДвижения) КАК ДатаДвижения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта КАК Валюта,
	|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов,
	|	МАКСИМУМ(РасчетыСКлиентами.Приоритет) КАК Приоритет
	|ИЗ 
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыСПартнерами.Период КАК ДатаДвижения,
	|		РасчетыСПартнерами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПартнерами.ЗаказКлиента КАК ОбъектРасчетов,
	|		РасчетыСПартнерами.Валюта КАК Валюта,
	|		РасчетыСПартнерами.Регистратор КАК Регистратор,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(Расчеты.КорОбъектРасчетов, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка))
	|					= ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ КАК Приоритет
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСПартнерами
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|				ПО Расчеты.Регистратор = РасчетыСПартнерами.Регистратор
	|					И Расчеты.АналитикаУчетаПоПартнерам = РасчетыСПартнерами.АналитикаУчетаПоПартнерам
	|					И Расчеты.ОбъектРасчетов = РасчетыСПартнерами.ЗаказКлиента
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыСПартнерами.Период КАК ДатаДвижения,
	|		РасчетыСПартнерами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПартнерами.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСПартнерами.Валюта КАК Валюта,
	|		РасчетыСПартнерами.Регистратор КАК Регистратор,
	|		ВЫБОР
	|			КОГДА РасчетыСПартнерами.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ КАК Приоритет
	|	ИЗ 
	|		РегистрНакопления.РасчетыСКлиентами КАК РасчетыСПартнерами
	|	ГДЕ
	|		НЕ ИСТИНА В (
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыПоДокументам
	|			ГДЕ
	|				РасчетыСПартнерами.АналитикаУчетаПоПартнерам = РасчетыПоДокументам.АналитикаУчетаПоПартнерам
	|				И РасчетыСПартнерами.ОбъектРасчетов = РасчетыПоДокументам.ЗаказКлиента
	|				И РасчетыСПартнерами.Валюта = РасчетыПоДокументам.Валюта
	|		)
	|
	|	) КАК РасчетыСКлиентами
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(РасчетыСПоставщиками.ДатаДвижения) КАК ДатаДвижения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта КАК Валюта,
	|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов,
	|	МАКСИМУМ(РасчетыСПоставщиками.Приоритет) КАК Приоритет
	|ИЗ 
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыСПартнерами.Период КАК ДатаДвижения,
	|		РасчетыСПартнерами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПартнерами.ЗаказПоставщику КАК ОбъектРасчетов,
	|		РасчетыСПартнерами.Валюта КАК Валюта,
	|		РасчетыСПартнерами.Регистратор КАК Регистратор,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(Расчеты.КорОбъектРасчетов, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка))
	|					= ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ КАК Приоритет
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПартнерами
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|				ПО Расчеты.Регистратор = РасчетыСПартнерами.Регистратор
	|					И Расчеты.АналитикаУчетаПоПартнерам = РасчетыСПартнерами.АналитикаУчетаПоПартнерам
	|					И Расчеты.ОбъектРасчетов = РасчетыСПартнерами.ЗаказПоставщику
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыСПартнерами.Период КАК ДатаДвижения,
	|		РасчетыСПартнерами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПартнерами.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСПартнерами.Валюта КАК Валюта,
	|		РасчетыСПартнерами.Регистратор КАК Регистратор,
	|		ВЫБОР
	|			КОГДА РасчетыСПартнерами.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ КАК Приоритет
	|	ИЗ 
	|		РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПартнерами
	|	ГДЕ
	|		НЕ ИСТИНА В (
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыПоДокументам
	|			ГДЕ
	|				РасчетыСПартнерами.АналитикаУчетаПоПартнерам = РасчетыПоДокументам.АналитикаУчетаПоПартнерам
	|				И РасчетыСПартнерами.ОбъектРасчетов = РасчетыПоДокументам.ЗаказПоставщику
	|				И РасчетыСПартнерами.Валюта = РасчетыПоДокументам.Валюта
	|		)
	|
	|	) КАК РасчетыСПоставщиками
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоДокументов УБЫВ,
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Набор = РегистрыСведений.ЗаданияКРаспределениюРасчетов.СоздатьНаборЗаписей();
	Набор.Записать();
	НомерСтроки = 0;
	Пока Выборка.Следующий() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
		Если НомерСтроки = 1000 Тогда
			Набор.Записать(Ложь);
			Набор.Очистить();
			НомерСтроки = 0;
		КонецЕсли;
		
	КонецЦикла;
	Набор.Записать(Ложь);
	ВсегоКПереносу = Выборка.Количество();
	
	ХранилищеОбщихНастроек.Сохранить("ПереходНаНовуюАрхитектуруВзаиморасчетов", "ВсегоКПереносу", ВсегоКПереносу);
	
	Текст = НСтр("ru = 'Включение онлайн взаиморасчетов с партнерами.'", ОбщегоНазначения.КодОсновногоЯзыка());
	ВсегоЗаписей = НСтр("ru = 'Всего кортежей к переносу'")+": %1";
	ЗаписьЖурналаРегистрации(Текст,
		УровеньЖурналаРегистрации.Информация,,,СтрШаблон(ВсегоЗаписей, ВсегоКПереносу));
	
КонецПроцедуры

// Выполняет заполнение оперативных взаиморасчетов при включении опции Онлайн взаиморасчетов
// 
// Параметры:
//   Параметры - Структура - Необязательный.
//   АдресРезультата - Строка - Необязательный
//
// Возвращаемое значение:
//   Число - Количество обработанных записей
//
Функция ВыполнитьПереносОфлайнВзаиморасчетов(Параметры = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	Если Параметры <> Неопределено И Параметры.Свойство("ДанныеКОбработке") Тогда
		ДанныеКОбработке = Параметры.ДанныеКОбработке;
	Иначе
		ПараметрыДанных = ПараметрыДанныхМногопоточнойОбработки();
		ДанныеКОбработке = ДанныеДляОбработки(ПараметрыДанных);
	КонецЕсли;
	
	КоличествоОбработанныхЗаписей = 0;
	ПорядокОперации = Новый Соответствие();
	Запрос = Новый Запрос();
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ХозяйственныеОперацииНеОтгрузка", ХозяйственныеОперацииНеОтгрузка());
	Для Каждого Отбор Из ДанныеКОбработке Цикл
		
		НачатьТранзакцию();
		Попытка
			
			//1. Перенесем РасчетыПоДокументам.
			ЭтоРасчетыСКлиентами = Отбор.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
			Если ЭтоРасчетыСКлиентами Тогда
				Запрос.Текст = ТекстЗапросаРасчетыСКлиентамиПоДокументам();
			Иначе
				Запрос.Текст = ТекстЗапросаРасчетыСПоставщикамиПоДокументам();
			КонецЕсли;
			Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", Отбор.АналитикаУчетаПоПартнерам);
			Запрос.УстановитьПараметр("ОбъектРасчетов", Отбор.ОбъектРасчетов);
			Запрос.УстановитьПараметр("Валюта", Отбор.ВалютаРасчетов);
			ТаблицаДетальныхЗаписей = Запрос.Выполнить().Выгрузить();
			
			Если ТаблицаДетальныхЗаписей.Количество() > 0 Тогда
				ЗаписатьНовыеЗаписиРасчетовПоСрокам(ЭтоРасчетыСКлиентами, ТаблицаДетальныхЗаписей, ПорядокОперации);
				КоличествоОбработанныхЗаписей = КоличествоОбработанныхЗаписей + ТаблицаДетальныхЗаписей.Количество();
			КонецЕсли;
			
			Запрос.Текст = "УНИЧТОЖИТЬ ВтРегистраторы; УНИЧТОЖИТЬ ПорядокДокументов; УНИЧТОЖИТЬ ВтРасчеты";
			Запрос.Выполнить();
			
			//2. Заполняем планы по новому алгоритму за весь период.
			ОсновныеПараметры = СтруктураПараметровЗаполненияВзаиморасчетов();
			ЗаполнитьЗначенияСвойств(ОсновныеПараметры, Отбор);
			ОсновныеПараметры.ЭтоРасчетыСКлиентами = ЭтоРасчетыСКлиентами;
			ОсновныеПараметры.НачальноеЗаполнение = НЕ ЗначениеЗаполнено(Отбор.ДатаПересчета);
			Если ЗначениеЗаполнено(Отбор.ДатаПересчета) Тогда
				ОсновныеПараметры.ПорядокФакт = Формат(Отбор.ДатаПересчета, "ДФ=yyyyMMdd000000");
			КонецЕсли;
			Если ЗначениеЗаполнено(Отбор.ДатаПересчетаПлан) Тогда
				ОсновныеПараметры.ПорядокПлан = Формат(Отбор.ДатаПересчетаПлан, "ДФ=yyyyMMdd000000");
			КонецЕсли;
			ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры);
			
			ДопИзмеренияОтбора = "";
			Если Отбор.ДатаПересчета = Дата('00010101') Тогда
				ДопИзмеренияОтбора = "ДатаПересчета";
			КонецЕсли;
			ОтметитьВыполнениеЗадания(Отбор, ДопИзмеренияОтбора);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Включение онлайн взаиморасчетов с партнерами. Работа потока.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецПопытки
		
	КонецЦикла;
	
	Если АдресРезультата <> Неопределено Тогда
		Результат = Новый Структура("КоличествоОбработанныхЗаписей", КоличествоОбработанныхЗаписей);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
	Возврат КоличествоОбработанныхЗаписей;
	
КонецФункции

Процедура ЗаписатьНовыеЗаписиРасчетовПоСрокам(ЭтоРасчетыСКлиентами, ТаблицаДетальныхЗаписей, ПорядокОперации)
	
	Если ЭтоРасчетыСКлиентами Тогда
		НаборЗаписей = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписей = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
	КонецЕсли;
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	Для Каждого СтрокаДвижений Из ТаблицаДетальныхЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаДвижений.ПорядокОперации) Тогда
			Если ПорядокОперации.Получить(СтрокаДвижений.Период) = Неопределено Тогда
				ПорядокОперации.Вставить(СтрокаДвижений.Период, Порядок(СтрокаДвижений.Период, "", Тип("ДокументСсылка.РасчетКурсовыхРазниц"),"9","99"));
			КонецЕсли;
			СтрокаДвижений.ПорядокОперации = ПорядокОперации[СтрокаДвижений.Период];
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДетальныхЗаписей.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.РегистраторРасчетов"));
	ТаблицаДетальныхЗаписей.Индексы.Добавить("Регистратор");
	
	ТаблицаАналитик = ТаблицаДетальныхЗаписей.Скопировать();
	ТаблицаАналитик.Свернуть("АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, Организация");
	Отбор = ТаблицаАналитик[0];
	
	СтруктураПараметровРегистраторов = Новый Структура;
	СтруктураПараметровРегистраторов.Вставить("ОбъектРасчетов",            Отбор.ОбъектРасчетов);
	СтруктураПараметровРегистраторов.Вставить("АналитикаУчетаПоПартнерам", Отбор.АналитикаУчетаПоПартнерам);
	СтруктураПараметровРегистраторов.Вставить("ВалютаРасчетов",            Отбор.Валюта);
	СтруктураПараметровРегистраторов.Вставить("Организация",               Отбор.Организация);
	СтруктураПараметровРегистраторов.Вставить("ЭтоРасчетыСКлиентами",      ЭтоРасчетыСКлиентами);
	
	ПодготовитьДанныеДляЗаписи(СтруктураПараметровРегистраторов, ТаблицаДетальныхЗаписей, НаборЗаписей);
	ЗаписатьПорционно(СтруктураПараметровРегистраторов, ТаблицаДетальныхЗаписей, НаборЗаписей);

КонецПроцедуры

Функция ТекстЗапросаРасчетыСКлиентамиПоДокументам()
	
	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВтРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|ГДЕ
	|	Расчеты.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И Расчеты.ЗаказКлиента = &ОбъектРасчетов
	|	И Расчеты.Валюта = &Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР КОГДА РасчетыСКлиентами.РасчетныйДокумент <> Неопределено 
	|		ТОГДА РасчетыСКлиентами.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСКлиентами.Регистратор 
	|	КОНЕЦ                                      КАК Регистратор,
	|	МИНИМУМ(РасчетыСКлиентами.ПорядокОперации) КАК ПорядокОперации,
	|	МИНИМУМ(РасчетыСКлиентами.ПорядокЗачетаПоДатеПлатежа) КАК ПорядокЗачетаПоДатеПлатежа,
	|	МИНИМУМ(ВЫБОР КОГДА РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ВводОстатков
	|					ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов
	|						ТОГДА РасчетыСКлиентами.ДатаРегистратора
	|				ИНАЧЕ РасчетыСКлиентами.Период
	|			КОНЕЦ)                             КАК ДатаВозникновения,
	|	МИНИМУМ(РасчетыСКлиентами.ВалютаДокумента) КАК ВалютаДокумента,
	|	МАКСИМУМ(РасчетыСКлиентами.ДатаПлатежа)    КАК ДатаПлатежа
	|ПОМЕСТИТЬ ПорядокДокументов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРегистраторы КАК Регистраторы
	|			ПО Регистраторы.Регистратор = РасчетыСКлиентами.Регистратор
	|ГДЕ
	|	РасчетыСКлиентами.Активность
	|	И НЕ РасчетыСКлиентами.ПорядокОперации = """"
	|	И РасчетыСКлиентами.Сумма <> 0
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА РасчетыСКлиентами.РасчетныйДокумент <> Неопределено 
	|		ТОГДА РасчетыСКлиентами.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСКлиентами.Регистратор 
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентамиПоДокументам.ЗаказКлиента                          КАК ОбъектРасчетов,
	|	РасчетыСКлиентамиПоДокументам.ЗаказКлиента.ТипОбъектаРасчетов       КАК ТипОбъектаРасчетов,
	|	РасчетыСКлиентамиПоДокументам.Валюта                                КАК Валюта,
	|	РасчетыСКлиентамиПоДокументам.Регистратор                           КАК ДокументРегистратор,
	|	РасчетыСКлиентамиПоДокументам.Период                                КАК Период,
	|	РасчетыСКлиентамиПоДокументам.РасчетныйДокумент                     КАК РасчетныйДокумент,
	|	РасчетыСКлиентамиПоДокументам.ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	РасчетыСКлиентамиПоДокументам.СтатьяДвиженияДенежныхСредств         КАК СтатьяДвиженияДенежныхСредств,
	|	ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСКлиентамиПоДокументам.Долг > 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр > 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.Предоплата < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0)
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСКлиентамиПоДокументам.Предоплата > 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр > 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.Долг < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 
	|			ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр < 0) ТОГДА
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ                                                               КАК ВидДвижения,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.РасчетныйДокумент КАК Документ.КорректировкаРеализации).ДокументОснование КАК СвязанныйДокумент,
	|
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Предоплата < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.Предоплата 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.Предоплата
	|	КОНЕЦ                                                               КАК Предоплата,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ПредоплатаУпр 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ПредоплатаУпр
	|	КОНЕЦ                                                               КАК ПредоплатаУпр,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ПредоплатаРегл 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ПредоплатаРегл
	|	КОНЕЦ                                                               КАК ПредоплатаРегл,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Долг < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.Долг 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.Долг
	|	КОНЕЦ                                                               КАК Долг,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ДолгУпр < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ДолгУпр 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ДолгУпр
	|	КОНЕЦ                                                               КАК ДолгУпр,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ДолгРегл 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ДолгРегл
	|	КОНЕЦ                                                               КАК ДолгРегл,
	|
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Предоплата <> 0 ТОГДА ДАТАВРЕМЯ(1,1,1)
	|		КОГДА (ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСКлиентамиПоДокументам.Долг > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.Предоплата < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0)
	|			ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСКлиентамиПоДокументам.Предоплата > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.Долг < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр < 0))
	|			И НЕ ((РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков ИЛИ
	|					РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов) И 
	|					РасчетыСКлиентамиПоДокументам.РасчетныйДокумент <> Неопределено)
	|			И НЕ РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц ТОГДА
	|			ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ                                                               КАК ДатаПлановогоПогашения,
	|	ЕСТЬNULL(ДатыВозникновения.ДатаВозникновения,ДАТАВРЕМЯ(1,1,1))      КАК ДатаВозникновения,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокОперации,"""")                    КАК ПорядокОперации,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")         КАК ПорядокЗачетаРегистратора,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")         КАК ПорядокЗачета,
	|	ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|		ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))                  КАК ВалютаДокумента
	|ПОМЕСТИТЬ ВтРасчеты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ПорядокДокументов
	|		ПО РасчетыСКлиентамиПоДокументам.Регистратор = ПорядокДокументов.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|		ПО РасчетыСКлиентамиПоДокументам.РасчетныйДокумент = ДатыВозникновения.Регистратор
	|ГДЕ
	|	(РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков
	|		ИЛИ РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов)
	|	И РасчетыСКлиентамиПоДокументам.Регистратор <> РасчетыСКлиентамиПоДокументам.РасчетныйДокумент
	|	И (РасчетыСКлиентамиПоДокументам.Предоплата <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.Долг <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр <> 0)
	|	И РасчетыСКлиентамиПоДокументам.Активность
	|	И РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РасчетыСКлиентамиПоДокументам.ЗаказКлиента = &ОбъектРасчетов
	|	И РасчетыСКлиентамиПоДокументам.Валюта = &Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентамиПоДокументам.ЗаказКлиента                          КАК ОбъектРасчетов,
	|	РасчетыСКлиентамиПоДокументам.ЗаказКлиента.ТипОбъектаРасчетов       КАК ТипОбъектаРасчетов,
	|	РасчетыСКлиентамиПоДокументам.Валюта                                КАК Валюта,
	|	РасчетыСКлиентамиПоДокументам.Регистратор                           КАК ДокументРегистратор,
	|	РасчетыСКлиентамиПоДокументам.Период                                КАК Период,
	|	РасчетыСКлиентамиПоДокументам.РасчетныйДокумент                     КАК РасчетныйДокумент,
	|	РасчетыСКлиентамиПоДокументам.ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	РасчетыСКлиентамиПоДокументам.СтатьяДвиженияДенежныхСредств         КАК СтатьяДвиженияДенежныхСредств,
	|	ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСКлиентамиПоДокументам.Долг > 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр > 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.Предоплата < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0)
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСКлиентамиПоДокументам.Предоплата > 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр > 0
	|			ИЛИ РасчетыСКлиентамиПоДокументам.Долг < 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 
	|			ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр < 0) ТОГДА
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ                                                               КАК ВидДвижения,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.КорректировкаРеализации 
	|		ТОГДА ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСКлиентамиПоДокументам.РасчетныйДокумент КАК Документ.КорректировкаРеализации).ДокументОснование
	|	КОНЕЦ КАК СвязанныйДокумент,
	|
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Предоплата < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.Предоплата 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.Предоплата
	|	КОНЕЦ                                                               КАК Предоплата,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаУпр < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ПредоплатаУпр 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ПредоплатаУпр
	|	КОНЕЦ                                                               КАК ПредоплатаУпр,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ПредоплатаРегл < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ПредоплатаРегл 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ПредоплатаРегл
	|	КОНЕЦ                                                               КАК ПредоплатаРегл,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Долг < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.Долг 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.Долг
	|	КОНЕЦ                                                               КАК Долг,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ДолгУпр < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ДолгУпр 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ДолгУпр
	|	КОНЕЦ                                                               КАК ДолгУпр,
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.ДолгРегл < 0 ТОГДА
	|		-РасчетыСКлиентамиПоДокументам.ДолгРегл 
	|	ИНАЧЕ
	|		РасчетыСКлиентамиПоДокументам.ДолгРегл
	|	КОНЕЦ                                                               КАК ДолгРегл,
	|
	|	ВЫБОР КОГДА РасчетыСКлиентамиПоДокументам.Предоплата <> 0 ТОГДА ДАТАВРЕМЯ(1,1,1)
	|		КОГДА (ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСКлиентамиПоДокументам.Долг > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр > 0)
	|			ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСКлиентамиПоДокументам.Предоплата > 0
	|				ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл > 0 ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр > 0))
	|			И НЕ ((РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков ИЛИ
	|					РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов) И
	|					РасчетыСКлиентамиПоДокументам.РасчетныйДокумент <> Неопределено)
	|			И НЕ РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц ТОГДА
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1)) = ДАТАВРЕМЯ(1,1,1)
	|					ТОГДА ЕСТЬNULL(ПорядокДокументов.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|				ИНАЧЕ ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ                                                               КАК ДатаПлановогоПогашения,
	|	ЕСТЬNULL(ДатыВозникновения.ДатаВозникновения,ДАТАВРЕМЯ(1,1,1))      КАК ДатаВозникновения,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокОперации,"""")                    КАК ПорядокОперации,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокЗачетаПоДатеПлатежа,"""")         КАК ПорядокЗачетаРегистратора,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")         КАК ПорядокЗачета,
	|	ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|		ЕСТЬNULL(ПорядокДокументов.ВалютаДокумента,
	|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))                  КАК ВалютаДокумента
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ПорядокДокументов
	|			ПО РасчетыСКлиентамиПоДокументам.Регистратор = ПорядокДокументов.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО РасчетыСКлиентамиПоДокументам.РасчетныйДокумент = ДатыВозникновения.Регистратор
	|ГДЕ
	|	(НЕ (РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков
	|		ИЛИ РасчетыСКлиентамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов)
	|	ИЛИ РасчетыСКлиентамиПоДокументам.Регистратор = РасчетыСКлиентамиПоДокументам.РасчетныйДокумент)
	|	И (РасчетыСКлиентамиПоДокументам.Предоплата <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаРегл <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ПредоплатаУпр <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.Долг <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ДолгРегл <> 0
	|		ИЛИ РасчетыСКлиентамиПоДокументам.ДолгУпр <> 0)
	|	И РасчетыСКлиентамиПоДокументам.Активность
	|	И РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РасчетыСКлиентамиПоДокументам.ЗаказКлиента = &ОбъектРасчетов
	|	И РасчетыСКлиентамиПоДокументам.Валюта = &Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов                КАК ОбъектРасчетов,
	|	Расчеты.Валюта                        КАК Валюта,
	|	Расчеты.ДокументРегистратор           КАК ДокументРегистратор,
	|	Расчеты.РасчетныйДокумент             КАК РасчетныйДокумент,
	|	Расчеты.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	Расчеты.Период                        КАК Период,
	|	Расчеты.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|	Расчеты.ДатаВозникновения             КАК ДатаВозникновения,
	|	Расчеты.ВидДвижения                   КАК ВидДвижения,
	|	СУММА(Расчеты.Предоплата)             КАК Предоплата,
	|	СУММА(Расчеты.ПредоплатаУпр)          КАК ПредоплатаУпр,
	|	СУММА(Расчеты.ПредоплатаРегл)         КАК ПредоплатаРегл,
	|	СУММА(Расчеты.Долг)                   КАК Долг,
	|	СУММА(Расчеты.ДолгУпр)                КАК ДолгУпр,
	|	СУММА(Расчеты.ДолгРегл)               КАК ДолгРегл,
	|	Расчеты.СвязанныйДокумент             КАК СвязанныйДокумент,
	|	Расчеты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ПорядокОперации               КАК ПорядокОперации,
	|	Расчеты.ПорядокЗачета                 КАК ПорядокЗачета,
	|	Расчеты.ВалютаДокумента               КАК ВалютаДокумента,
	|	Расчеты.Организация                   КАК Организация
	|ИЗ (
	|	ВЫБРАТЬ
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам                            КАК АналитикаУчетаПоПартнерам,
	|		ЗачетыОплат.ОбъектРасчетов                                       КАК ОбъектРасчетов,
	|		ЗачетыОплат.Валюта                                               КАК Валюта,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК ДокументРегистратор,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК РасчетныйДокумент,
	|		ЗачетыОплат.ХозяйственнаяОперация                                КАК ХозяйственнаяОперация,
	|		ЗачетыОплат.Период                                               КАК Период,
	|		ДатыВозникновения.ДатаПлатежа                                    КАК ДатаПлановогоПогашения,
	|		ЗачетыОплат.Период                                               КАК ДатаВозникновения,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                           КАК ВидДвижения,
	|		0                                                                КАК Предоплата,
	|		0                                                                КАК ПредоплатаУпр,
	|		0                                                                КАК ПредоплатаРегл,
	|		ЗачетыОплат.Предоплата                                           КАК Долг,
	|		ЗачетыОплат.ПредоплатаУпр                                        КАК ДолгУпр,
	|		ЗачетыОплат.ПредоплатаРегл                                       КАК ДолгРегл,
	|		Неопределено                                                     КАК СвязанныйДокумент,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)  КАК СтатьяДвиженияДенежныхСредств,
	|		ЗачетыОплат.ПорядокОперации                                      КАК ПорядокОперации,
	|		ЗачетыОплат.ПорядокЗачетаРегистратора                            КАК ПорядокЗачета,
	|		ЗачетыОплат.ВалютаДокумента                                      КАК ВалютаДокумента,
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам.Организация                КАК Организация
	|	ИЗ ВтРасчеты КАК ЗачетыОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО ЗачетыОплат.ДокументРегистратор = ДатыВозникновения.Регистратор
	|	ГДЕ	ЗачетыОплат.Предоплата > 0 
	|		И ЗачетыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ЗачетыОплат.ХозяйственнаяОперация НЕ В (&ХозяйственныеОперацииНеОтгрузка)
	|		И ЗачетыОплат.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам                            КАК АналитикаУчетаПоПартнерам,
	|		ЗачетыОплат.ОбъектРасчетов                                       КАК ОбъектРасчетов,
	|		ЗачетыОплат.Валюта                                               КАК Валюта,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК ДокументРегистратор,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК РасчетныйДокумент,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)  КАК ХозяйственнаяОперация,
	|		ЗачетыОплат.Период                                               КАК Период,
	|		ДатыВозникновения.ДатаПлатежа                                    КАК ДатаПлановогоПогашения,
	|		ЗачетыОплат.Период                                               КАК ДатаВозникновения,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                           КАК ВидДвижения,
	|		0                                                                КАК Предоплата,
	|		0                                                                КАК ПредоплатаУпр,
	|		0                                                                КАК ПредоплатаРегл,
	|		ЗачетыОплат.Предоплата                                           КАК Долг,
	|		ЗачетыОплат.ПредоплатаУпр                                        КАК ДолгУпр,
	|		ЗачетыОплат.ПредоплатаРегл                                       КАК ДолгРегл,
	|		Неопределено                                                     КАК СвязанныйДокумент,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)  КАК СтатьяДвиженияДенежныхСредств,
	|		ЗачетыОплат.ПорядокОперации                                      КАК ПорядокОперации,
	|		ЗачетыОплат.ПорядокЗачетаРегистратора                            КАК ПорядокЗачета,
	|		ЗачетыОплат.ВалютаДокумента                                      КАК ВалютаДокумента,
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам.Организация                КАК Организация
	|	ИЗ ВтРасчеты КАК ЗачетыОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО ЗачетыОплат.ДокументРегистратор = ДатыВозникновения.Регистратор
	|	ГДЕ
	|		ЗачетыОплат.Предоплата > 0 
	|		И ЗачетыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ЗачетыОплат.ХозяйственнаяОперация НЕ В (&ХозяйственныеОперацииНеОтгрузка)
	|		И ЗачетыОплат.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|		РасчетыПоДокументам.ОбъектРасчетов                КАК ОбъектРасчетов,
	|		РасчетыПоДокументам.Валюта                        КАК Валюта,
	|		РасчетыПоДокументам.ДокументРегистратор           КАК ДокументРегистратор,
	|		РасчетыПоДокументам.РасчетныйДокумент             КАК РасчетныйДокумент,
	|		ВЫБОР КОГДА РасчетыПоДокументам.Предоплата <> 0 И РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация НЕ В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности))
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|			КОГДА РасчетыПоДокументам.Долг <> 0 И РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПогашениеЗадолженностиКлиента)
	|			ИНАЧЕ РасчетыПоДокументам.ХозяйственнаяОперация 
	|		КОНЕЦ КАК ХозяйственнаяОперация,
	|		РасчетыПоДокументам.Период                        КАК Период,
	|		РасчетыПоДокументам.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|		РасчетыПоДокументам.ДатаВозникновения             КАК ДатаВозникновения,
	|		РасчетыПоДокументам.ВидДвижения                   КАК ВидДвижения,
	|		РасчетыПоДокументам.Предоплата                    КАК Предоплата,
	|		РасчетыПоДокументам.ПредоплатаУпр                 КАК ПредоплатаУпр,
	|		РасчетыПоДокументам.ПредоплатаРегл                КАК ПредоплатаРегл,
	|		РасчетыПоДокументам.Долг                          КАК Долг,
	|		РасчетыПоДокументам.ДолгУпр                       КАК ДолгУпр,
	|		РасчетыПоДокументам.ДолгРегл                      КАК ДолгРегл,
	|		ВЫБОР КОГДА (РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И РасчетыПоДокументам.Предоплата > 0)
	|			ИЛИ (РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И РасчетыПоДокументам.Долг > 0)
	|			ТОГДА РасчетыПоДокументам.СвязанныйДокумент
	|			ИНАЧЕ Неопределено
	|		КОНЕЦ                                             КАК СвязанныйДокумент,
	|		РасчетыПоДокументам.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|		РасчетыПоДокументам.ПорядокОперации               КАК ПорядокОперации,
	|		РасчетыПоДокументам.ПорядокЗачета                 КАК ПорядокЗачета,
	|		РасчетыПоДокументам.ВалютаДокумента               КАК ВалютаДокумента,
	|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам.Организация КАК Организация
	|	ИЗ ВтРасчеты КАК РасчетыПоДокументам) КАК Расчеты
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.Валюта,
	|	Расчеты.ДокументРегистратор,
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ХозяйственнаяОперация,
	|	Расчеты.Период,
	|	Расчеты.ДатаПлановогоПогашения,
	|	Расчеты.ДатаВозникновения,
	|	Расчеты.ВидДвижения,
	|	Расчеты.СвязанныйДокумент,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ПорядокОперации,
	|	Расчеты.ПорядокЗачета,
	|	Расчеты.ВалютаДокумента,
	|	Расчеты.Организация
	|";
	
КонецФункции

Функция ТекстЗапросаРасчетыСПоставщикамиПоДокументам()
	
	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВтРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|ГДЕ
	|	Расчеты.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И Расчеты.ЗаказПоставщику = &ОбъектРасчетов
	|	И Расчеты.Валюта = &Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР КОГДА РасчетыСПоставщиками.РасчетныйДокумент <> Неопределено 
	|		ТОГДА РасчетыСПоставщиками.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСПоставщиками.Регистратор 
	|	КОНЕЦ                                         КАК Регистратор,
	|	МИНИМУМ(РасчетыСПоставщиками.ПорядокОперации) КАК ПорядокОперации,
	|	МИНИМУМ(РасчетыСПоставщиками.ПорядокЗачетаПоДатеПлатежа) КАК ПорядокЗачетаПоДатеПлатежа,
	|	МИНИМУМ(ВЫБОР КОГДА РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВводОстатков ИЛИ
	|					РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов
	|						ТОГДА РасчетыСПоставщиками.ДатаРегистратора
	|				ИНАЧЕ РасчетыСПоставщиками.Период
	|			КОНЕЦ)                                КАК ДатаВозникновения,
	|	МИНИМУМ(РасчетыСПоставщиками.ВалютаДокумента) КАК ВалютаДокумента,
	|	МАКСИМУМ(РасчетыСПоставщиками.ДатаПлатежа)    КАК ДатаПлатежа
	|ПОМЕСТИТЬ ПорядокДокументов
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРегистраторы КАК Регистраторы
	|			ПО Регистраторы.Регистратор = РасчетыСПоставщиками.Регистратор
	|ГДЕ
	|	РасчетыСПоставщиками.Активность
	|	И НЕ РасчетыСПоставщиками.ПорядокОперации = """"
	|	И (РасчетыСПоставщиками.Сумма <> 0 ИЛИ РасчетыСПоставщиками.КОплате <> 0)
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА РасчетыСПоставщиками.РасчетныйДокумент <> Неопределено 
	|		ТОГДА РасчетыСПоставщиками.РасчетныйДокумент
	|		ИНАЧЕ РасчетыСПоставщиками.Регистратор 
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам      КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику                КАК ОбъектРасчетов,
	|	РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику.ТипОбъектаРасчетов КАК ТипОбъектаРасчетов,
	|	РасчетыСПоставщикамиПоДокументам.Валюта                         КАК Валюта,
	|	РасчетыСПоставщикамиПоДокументам.Регистратор                    КАК ДокументРегистратор,
	|	РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент              КАК РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
	|	РасчетыСПоставщикамиПоДокументам.СтатьяДвиженияДенежныхСредств  КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыСПоставщикамиПоДокументам.Период                         КАК Период,
	|	ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСПоставщикамиПоДокументам.Долг < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.Предоплата > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0)
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСПоставщикамиПоДокументам.Предоплата < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.Долг > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл > 0 
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр > 0) ТОГДА
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ                                                           КАК ВидДвижения,
	|	ВЫРАЗИТЬ(РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент КАК Документ.КорректировкаПриобретения).ДокументОснование КАК СвязанныйДокумент,
	|
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Предоплата < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.Предоплата 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.Предоплата
	|	КОНЕЦ                                                           КАК Предоплата,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр
	|	КОНЕЦ                                                           КАК ПредоплатаУпр,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл
	|	КОНЕЦ                                                           КАК ПредоплатаРегл,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Долг < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.Долг 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.Долг
	|	КОНЕЦ                                                           КАК Долг,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ДолгУпр 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ДолгУпр
	|	КОНЕЦ                                                           КАК ДолгУпр,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ДолгРегл 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ДолгРегл
	|	КОНЕЦ                                                           КАК ДолгРегл,
	|
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Предоплата <> 0 ТОГДА ДАТАВРЕМЯ(1,1,1)
	|		КОГДА (ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСПоставщикамиПоДокументам.Долг < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.Предоплата > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0)
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСПоставщикамиПоДокументам.Предоплата < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.Долг > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл > 0 
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр > 0)) 
	|			И НЕ ((РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков ИЛИ
	|					РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов) И 
	|					РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент <> Неопределено)
	|			И НЕ РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц ТОГДА
	|			ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ                                                           КАК ДатаПлановогоПогашения,
	|	ЕСТЬNULL(ДатыВозникновения.ДатаВозникновения, ДАТАВРЕМЯ(1,1,1)) КАК ДатаВозникновения,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокОперации,"""")                КАК ПорядокОперации,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")     КАК ПорядокЗачетаРегистратора,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")     КАК ПорядокЗачета,
	|	ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|		ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))              КАК ВалютаДокумента
	|ПОМЕСТИТЬ ВтРасчеты
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ПорядокДокументов
	|		ПО РасчетыСПоставщикамиПоДокументам.Регистратор = ПорядокДокументов.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|		ПО РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент = ДатыВозникновения.Регистратор
	|ГДЕ
	|	(РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов)
	|	И РасчетыСПоставщикамиПоДокументам.Регистратор <> РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент
	|	И (РасчетыСПоставщикамиПоДокументам.Предоплата <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.Долг <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр <> 0)
	|	И РасчетыСПоставщикамиПоДокументам.Активность
	|	И РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику = &ОбъектРасчетов
	|	И РасчетыСПоставщикамиПоДокументам.Валюта = &Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам      КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику                КАК ОбъектРасчетов,
	|	РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику.ТипОбъектаРасчетов КАК ТипОбъектаРасчетов,
	|	РасчетыСПоставщикамиПоДокументам.Валюта                         КАК Валюта,
	|	РасчетыСПоставщикамиПоДокументам.Регистратор                    КАК ДокументРегистратор,
	|	РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент              КАК РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
	|	РасчетыСПоставщикамиПоДокументам.СтатьяДвиженияДенежныхСредств  КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыСПоставщикамиПоДокументам.Период                         КАК Период,
	|	ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И (РасчетыСПоставщикамиПоДокументам.Долг < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.Предоплата > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0)
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И (РасчетыСПоставщикамиПоДокументам.Предоплата < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.Долг > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл > 0 
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр > 0) ТОГДА
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ                                                           КАК ВидДвижения,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.КорректировкаПриобретения 
	|		ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиПоДокументам.Регистратор КАК Документ.КорректировкаПриобретения).ДокументОснование
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент КАК Документ.КорректировкаПриобретения).ДокументОснование
	|	КОНЕЦ КАК СвязанныйДокумент,
	|
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Предоплата < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.Предоплата 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.Предоплата
	|	КОНЕЦ                                                           КАК Предоплата,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр
	|	КОНЕЦ                                                           КАК ПредоплатаУпр,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл
	|	КОНЕЦ                                                           КАК ПредоплатаРегл,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Долг < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.Долг 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.Долг
	|	КОНЕЦ                                                           КАК Долг,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ДолгУпр < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ДолгУпр 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ДолгУпр
	|	КОНЕЦ                                                           КАК ДолгУпр,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.ДолгРегл < 0  ТОГДА
	|		-РасчетыСПоставщикамиПоДокументам.ДолгРегл 
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиПоДокументам.ДолгРегл
	|	КОНЕЦ                                                           КАК ДолгРегл,
	|
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоДокументам.Предоплата <> 0 ТОГДА ДАТАВРЕМЯ(1,1,1)
	|		КОГДА (ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И 
	|				(РасчетыСПоставщикамиПоДокументам.Предоплата > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр > 0)
	|		ИЛИ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И 
	|				(РасчетыСПоставщикамиПоДокументам.Долг > 0 ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл > 0 
	|				ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр > 0)) 
	|			И НЕ ((РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков ИЛИ
	|					РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов) И 
	|					РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент <> Неопределено)
	|			И НЕ РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.РасчетКурсовыхРазниц ТОГДА
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1)) = ДАТАВРЕМЯ(1,1,1)
	|					ТОГДА ЕСТЬNULL(ПорядокДокументов.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|				ИНАЧЕ ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДатыВозникновения.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ                                                           КАК ДатаПлановогоПогашения,
	|	ЕСТЬNULL(ДатыВозникновения.ДатаВозникновения, ДАТАВРЕМЯ(1,1,1)) КАК ДатаВозникновения,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокОперации,"""")                КАК ПорядокОперации,
	|	ЕСТЬNULL(ПорядокДокументов.ПорядокЗачетаПоДатеПлатежа,"""")     КАК ПорядокЗачетаРегистратора,
	|	ЕСТЬNULL(ДатыВозникновения.ПорядокЗачетаПоДатеПлатежа,"""")     КАК ПорядокЗачета,
	|	ЕСТЬNULL(ДатыВозникновения.ВалютаДокумента,
	|		ЕСТЬNULL(ПорядокДокументов.ВалютаДокумента,
	|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))              КАК ВалютаДокумента
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ПорядокДокументов
	|		ПО РасчетыСПоставщикамиПоДокументам.Регистратор = ПорядокДокументов.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|		ПО РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент = ДатыВозникновения.Регистратор
	|ГДЕ
	|	(НЕ (РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатков 
	|			ИЛИ РасчетыСПоставщикамиПоДокументам.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов)
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.Регистратор = РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент)
	|	И (РасчетыСПоставщикамиПоДокументам.Предоплата <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ПредоплатаУпр <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.Долг <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгРегл <> 0
	|		ИЛИ РасчетыСПоставщикамиПоДокументам.ДолгУпр <> 0)
	|	И РасчетыСПоставщикамиПоДокументам.Активность
	|	И РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику = &ОбъектРасчетов
	|	И РасчетыСПоставщикамиПоДокументам.Валюта = &Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов                КАК ОбъектРасчетов,
	|	Расчеты.Валюта                        КАК Валюта,
	|	Расчеты.ДокументРегистратор           КАК ДокументРегистратор,
	|	Расчеты.РасчетныйДокумент             КАК РасчетныйДокумент,
	|	Расчеты.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	Расчеты.Период                        КАК Период,
	|	Расчеты.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|	Расчеты.ДатаВозникновения             КАК ДатаВозникновения,
	|	Расчеты.ВидДвижения                   КАК ВидДвижения,
	|	СУММА(Расчеты.Предоплата)             КАК Предоплата,
	|	СУММА(Расчеты.ПредоплатаУпр)          КАК ПредоплатаУпр,
	|	СУММА(Расчеты.ПредоплатаРегл)         КАК ПредоплатаРегл,
	|	СУММА(Расчеты.Долг)                   КАК Долг,
	|	СУММА(Расчеты.ДолгУпр)                КАК ДолгУпр,
	|	СУММА(Расчеты.ДолгРегл)               КАК ДолгРегл,
	|	Расчеты.СвязанныйДокумент             КАК СвязанныйДокумент,
	|	Расчеты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ПорядокОперации               КАК ПорядокОперации,
	|	Расчеты.ПорядокЗачета                 КАК ПорядокЗачета,
	|	Расчеты.ВалютаДокумента               КАК ВалютаДокумента,
	|	Расчеты.Организация                   КАК Организация
	|ИЗ (
	|	ВЫБРАТЬ
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам                            КАК АналитикаУчетаПоПартнерам,
	|		ЗачетыОплат.ОбъектРасчетов                                       КАК ОбъектРасчетов,
	|		ЗачетыОплат.Валюта                                               КАК Валюта,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК ДокументРегистратор,
	|		ЗачетыОплат.ДокументРегистратор                                  КАК РасчетныйДокумент,
	|		ЗачетыОплат.ХозяйственнаяОперация                                КАК ХозяйственнаяОперация,
	|		ЗачетыОплат.Период                                               КАК Период,
	|		ДатыВозникновения.ДатаПлатежа                                    КАК ДатаПлановогоПогашения,
	|		ЗачетыОплат.Период                                               КАК ДатаВозникновения,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                           КАК ВидДвижения,
	|		0                                                                КАК Предоплата,
	|		0                                                                КАК ПредоплатаУпр,
	|		0                                                                КАК ПредоплатаРегл,
	|		ЗачетыОплат.Предоплата                                           КАК Долг,
	|		ЗачетыОплат.ПредоплатаУпр                                        КАК ДолгУпр,
	|		ЗачетыОплат.ПредоплатаРегл                                       КАК ДолгРегл,
	|		Неопределено                                                     КАК СвязанныйДокумент,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)  КАК СтатьяДвиженияДенежныхСредств,
	|		ЗачетыОплат.ПорядокОперации                                      КАК ПорядокОперации,
	|		ЗачетыОплат.ПорядокЗачетаРегистратора                            КАК ПорядокЗачета,
	|		ЗачетыОплат.ВалютаДокумента                                      КАК ВалютаДокумента,
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам.Организация                КАК Организация
	|	ИЗ ВтРасчеты КАК ЗачетыОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО ЗачетыОплат.ДокументРегистратор = ДатыВозникновения.Регистратор
	|	ГДЕ
	|		ЗачетыОплат.Предоплата > 0 
	|		И ЗачетыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ЗачетыОплат.ХозяйственнаяОперация НЕ В (&ХозяйственныеОперацииНеОтгрузка)
	|		И ЗачетыОплат.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам                              КАК АналитикаУчетаПоПартнерам,
	|		ЗачетыОплат.ОбъектРасчетов                                         КАК ОбъектРасчетов,
	|		ЗачетыОплат.Валюта                                                 КАК Валюта,
	|		ЗачетыОплат.ДокументРегистратор                                    КАК ДокументРегистратор,
	|		ЗачетыОплат.ДокументРегистратор                                    КАК РасчетныйДокумент,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику) КАК ХозяйственнаяОперация,
	|		ЗачетыОплат.Период                                                 КАК Период,
	|		ДатыВозникновения.ДатаПлатежа                                      КАК ДатаПлановогоПогашения,
	|		ЗачетыОплат.Период                                                 КАК ДатаВозникновения,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                             КАК ВидДвижения,
	|		0                                                                  КАК Предоплата,
	|		0                                                                  КАК ПредоплатаУпр,
	|		0                                                                  КАК ПредоплатаРегл,
	|		ЗачетыОплат.Предоплата                                             КАК Долг,
	|		ЗачетыОплат.ПредоплатаУпр                                          КАК ДолгУпр,
	|		ЗачетыОплат.ПредоплатаРегл                                         КАК ДолгРегл,
	|		Неопределено                                                       КАК СвязанныйДокумент,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)    КАК СтатьяДвиженияДенежныхСредств,
	|		ЗачетыОплат.ПорядокОперации                                        КАК ПорядокОперации,
	|		ЗачетыОплат.ПорядокЗачетаРегистратора                            КАК ПорядокЗачета,
	|		ЗачетыОплат.ВалютаДокумента                                        КАК ВалютаДокумента,
	|		ЗачетыОплат.АналитикаУчетаПоПартнерам.Организация                  КАК Организация
	|	ИЗ ВтРасчеты КАК ЗачетыОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокДокументов КАК ДатыВозникновения
	|			ПО ЗачетыОплат.ДокументРегистратор = ДатыВозникновения.Регистратор
	|	ГДЕ
	|		ЗачетыОплат.Предоплата > 0 
	|		И ЗачетыОплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ЗачетыОплат.ХозяйственнаяОперация НЕ В (&ХозяйственныеОперацииНеОтгрузка)
	|		И ЗачетыОплат.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|		РасчетыПоДокументам.ОбъектРасчетов                КАК ОбъектРасчетов,
	|		РасчетыПоДокументам.Валюта                        КАК Валюта,
	|		РасчетыПоДокументам.ДокументРегистратор           КАК ДокументРегистратор,
	|		РасчетыПоДокументам.РасчетныйДокумент             КАК РасчетныйДокумент,
	|		ВЫБОР КОГДА РасчетыПоДокументам.Предоплата <> 0 И РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация НЕ В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности))
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|			КОГДА РасчетыПоДокументам.Долг <> 0 И РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПогашениеЗадолженностиПоставщику)
	|			ИНАЧЕ РасчетыПоДокументам.ХозяйственнаяОперация 
	|		КОНЕЦ КАК ХозяйственнаяОперация,
	|		РасчетыПоДокументам.Период                        КАК Период,
	|		РасчетыПоДокументам.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|		РасчетыПоДокументам.ДатаВозникновения             КАК ДатаВозникновения,
	|		РасчетыПоДокументам.ВидДвижения                   КАК ВидДвижения,
	|		РасчетыПоДокументам.Предоплата                    КАК Предоплата,
	|		РасчетыПоДокументам.ПредоплатаУпр                 КАК ПредоплатаУпр,
	|		РасчетыПоДокументам.ПредоплатаРегл                КАК ПредоплатаРегл,
	|		РасчетыПоДокументам.Долг                          КАК Долг,
	|		РасчетыПоДокументам.ДолгУпр                       КАК ДолгУпр,
	|		РасчетыПоДокументам.ДолгРегл                      КАК ДолгРегл,
	|		ВЫБОР КОГДА (РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И РасчетыПоДокументам.Предоплата > 0)
	|			ИЛИ (РасчетыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И РасчетыПоДокументам.Долг > 0)
	|			ТОГДА РасчетыПоДокументам.СвязанныйДокумент
	|			ИНАЧЕ Неопределено
	|		КОНЕЦ                                             КАК СвязанныйДокумент,
	|		РасчетыПоДокументам.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|		РасчетыПоДокументам.ПорядокОперации               КАК ПорядокОперации,
	|		РасчетыПоДокументам.ПорядокЗачета                 КАК ПорядокЗачета,
	|		РасчетыПоДокументам.ВалютаДокумента               КАК ВалютаДокумента,
	|		РасчетыПоДокументам.АналитикаУчетаПоПартнерам.Организация КАК Организация
	|	ИЗ ВтРасчеты КАК РасчетыПоДокументам) КАК Расчеты
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.Валюта,
	|	Расчеты.ДокументРегистратор,
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ХозяйственнаяОперация,
	|	Расчеты.Период,
	|	Расчеты.ДатаПлановогоПогашения,
	|	Расчеты.ДатаВозникновения,
	|	Расчеты.ВидДвижения,
	|	Расчеты.СвязанныйДокумент,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ПорядокОперации,
	|	Расчеты.ПорядокЗачета,
	|	Расчеты.ВалютаДокумента,
	|	Расчеты.Организация
	|";
	
КонецФункции

#КонецОбласти

#Область ОчисткаРегистровВзаиморасчетов

//Очищает все новые регистры расчетов.
Процедура ОчиститьРегистрыВзаиморасчетов() Экспорт
	
	ОписаниеЗамераОчистки = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ОчисткаРегистров.Многопоточный");
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ОписаниеЗамераОчистки = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ОчисткаРегистров.ФайловаяБаза");
	КонецЕсли;
	
	ОписаниеЗамераОтключениеИтогов = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ОчисткаРегистров.ОтключениеИтогов");
	ОтключитьИтогиРегистровРасчетов();
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамераОтключениеИтогов, 1);
	
	ОписаниеЗамераУдалениеДвижений = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ОчисткаРегистров.УдалениеДвижений");
	ВсегоОбработано = 0;
	ОчиститьРегистр("РасчетыСКлиентамиПоСрокам", ВсегоОбработано);
	ОчиститьРегистр("РасчетыСКлиентамиПланОплат", ВсегоОбработано);
	ОчиститьРегистр("РасчетыСКлиентамиПланОтгрузок", ВсегоОбработано);
	ОчиститьРегистр("РасчетыСПоставщикамиПоСрокам", ВсегоОбработано);
	ОчиститьРегистр("РасчетыСПоставщикамиПланОплат", ВсегоОбработано);
	ОчиститьРегистр("РасчетыСПоставщикамиПланПоставок", ВсегоОбработано);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамераУдалениеДвижений, ВсегоОбработано / 100);
	
	ОписаниеЗамераВключитьИтоги = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Взаиморасчеты.ОчисткаРегистров.ВключениеИтогов");
	ВключитьИтогиРегистровРасчетов();
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамераВключитьИтоги, 1);
	
	УдалитьСлужебныеРегистраторыМногопоточно();
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамераОчистки, ВсегоОбработано / 100);
	
КонецПроцедуры

//Очищает переданный регистр расчетов.
Процедура ОчиститьРегистр(ИмяРегистра, ВсегоОбработано = 0) Экспорт
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		КоличествоЗаписей = ВыполнитьОчисткуРегистраМногопоточно(ИмяРегистра);
		ВсегоОбработано = ВсегоОбработано + КоличествоЗаписей;
		
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
		|ГДЕ
		|	НЕ Расчеты.Регистратор ССЫЛКА Документ.КорректировкаРегистров";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.РасчетыСКлиентамиПоСрокам", "РегистрНакопления." + ИмяРегистра);
		Запрос = Новый Запрос(ТекстЗапроса);
		Выборка = Запрос.Выполнить().Выбрать();
		ВсегоОбработано = ВсегоОбработано + Выборка.Количество();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Очищает переданный регистр расчетов в несколько потоков.
// 
// Параметры:
// 	ИмяРегистра - Строка - Имя очищаемого регистра накопления
// Возвращаемое значение:
// 	Число - Количество обработанных регистраторов
//
Функция ВыполнитьОчисткуРегистраМногопоточно(ИмяРегистра) Экспорт
	
	Потоки = Новый Массив;
	КоличествоСвободныхПотоков = 1; // КоличествоПотоковРаспределенияВзаиморасчетов(); до исправления 10231410
	КоличествоОбъектовДляОчистки = РазмерПорцииОбработкиВОдномПотоке() * КоличествоСвободныхПотоков;
	// для избежания взаимоблокировок при записи даты минимальных итогов в таблицу AccumRegOpt
	Первый = ДанныеДляОчистки(ИмяРегистра, Неопределено, 1);
	Если Первый.Следующий() Тогда
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей
		НаборЗаписей.Отбор.Регистратор.Установить(Первый.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЕсли;
	МоментВремени = Неопределено;
	КонтрольныйЗапуск = 3;
	КоличествоОбработанныхЗаписей = 0;
	Пока КоличествоОбъектовДляОчистки > 0 И КонтрольныйЗапуск > 0 Цикл
		
		Если КоличествоСвободныхПотоков > 0 Тогда
			
			РазмерВыборки = РазмерПорцииОбработкиВОдномПотоке() * КоличествоСвободныхПотоков;
			ВыборкаДляОчистки = ДанныеДляОчистки(ИмяРегистра, МоментВремени, РазмерВыборки);
			КоличествоОбработанныхЗаписей = КоличествоОбработанныхЗаписей + ВыборкаДляОчистки.Количество();
			КоличествоОбъектовДляОчистки = ВыборкаДляОчистки.Количество();
			Если КоличествоОбъектовДляОчистки > 0 Тогда
				
				ДанныеПотока = Новый Массив;
				Пока ВыборкаДляОчистки.Следующий() Цикл
					
					МоментВремени = ВыборкаДляОчистки.МоментВремени;
					ДанныеПотока.Добавить(ВыборкаДляОчистки.Регистратор);
					Если ДанныеПотока.Количество() = РазмерПорцииОбработкиВОдномПотоке() Тогда
						Поток = НовоеОписаниеПотока("ОперативныеВзаиморасчетыСервер.УдалитьЗаписиДокументов");
						Поток.НаименованиеЗадания = НСтр("ru = 'Очистка регистра'") + " " + ИмяРегистра;
						Поток.ПараметрыПроцедуры.Вставить("ДанныеКОбработке", ДанныеПотока);
						Поток.ПараметрыПроцедуры.Вставить("ИмяРегистра", ИмяРегистра);
						ЗапуститьОбработкуВФоне(Поток);
						Потоки.Добавить(Поток);
						ДанныеПотока = Новый Массив;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ДанныеПотока.Количество() > 0 Тогда
					Поток = НовоеОписаниеПотока("ОперативныеВзаиморасчетыСервер.УдалитьЗаписиДокументов");
					Поток.НаименованиеЗадания = НСтр("ru = 'Очистка регистра'") + " " + ИмяРегистра;
					Поток.ПараметрыПроцедуры.Вставить("ДанныеКОбработке", ДанныеПотока);
					Поток.ПараметрыПроцедуры.Вставить("ИмяРегистра", ИмяРегистра);
					ЗапуститьОбработкуВФоне(Поток);
					Потоки.Добавить(Поток);
				КонецЕсли;
				
			ИначеЕсли КонтрольныйЗапуск > 0 Тогда
				МоментВремени = Неопределено;
				КонтрольныйЗапуск = КонтрольныйЗапуск - 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ОжидатьЗавершениеПотока(Поток);
		
		ЗавершитьПотокиВыполнившиеФЗ(Потоки);
		
		КоличествоДоступныхПотоков = 1; // КоличествоПотоковРаспределенияВзаиморасчетов(); до исправления 10231410
		КоличествоСвободныхПотоков = Макс(КоличествоДоступныхПотоков - Потоки.Количество(), 0);
		
	КонецЦикла;
	
	ОжидатьЗавершениеВсехПотоков(Потоки);
	
	Возврат КоличествоОбработанныхЗаписей;
	
КонецФункции

//Удаляет служебные регистраторы.
//
Процедура УдалитьСлужебныеРегистраторыМногопоточно() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистраторРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегистраторРасчетов КАК РегистраторРасчетов";
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоОбработанныхЗаписей = Выборка.Количество();
	РазмерПорцииОдномПотоке = Цел(Выборка.Количество()/КоличествоПотоковРаспределенияВзаиморасчетов()) + 1;
	Потоки = Новый Массив;
	ДанныеПотока = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ДанныеПотока.Добавить(Выборка.Ссылка);
		Если ДанныеПотока.Количество() = РазмерПорцииОдномПотоке Тогда
			Поток = НовоеОписаниеПотока("ОперативныеВзаиморасчетыСервер.УдалитьСлужебныеРегистраторы");
			Поток.НаименованиеЗадания = НСтр("ru = 'Удаление служебных регистраторов'");
			Поток.ПараметрыПроцедуры.Вставить("ДанныеКОбработке", ДанныеПотока);
			ЗапуститьОбработкуВФоне(Поток);
			Потоки.Добавить(Поток);
			ДанныеПотока = Новый Массив;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеПотока.Количество() > 0 Тогда
		Поток = НовоеОписаниеПотока("ОперативныеВзаиморасчетыСервер.УдалитьСлужебныеРегистраторы");
		Поток.НаименованиеЗадания = НСтр("ru = 'Удаление служебных регистраторов'");
		Поток.ПараметрыПроцедуры.Вставить("ДанныеКОбработке", ДанныеПотока);
		ЗапуститьОбработкуВФоне(Поток);
		Потоки.Добавить(Поток);
		ДанныеПотока = Новый Массив;
	КонецЕсли;
	
	ОжидатьЗавершениеВсехПотоков(Потоки, КоличествоОбработанныхЗаписей);
	
КонецПроцедуры

Функция ДанныеДляОчистки(ИмяРегистра, МоментВремени, РазмерПорции = 0)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Расчеты.МоментВремени КАК МоментВремени,
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|ГДЕ
	|	НЕ Расчеты.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И (&БезОтбора ИЛИ Расчеты.МоментВремени > &МоментВремени)
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.МоментВремени,
	|	Расчеты.Регистратор
	|УПОРЯДОЧИТЬ ПО
	|	Расчеты.МоментВремени"; // сортировать только по возрастанию периода для избежания взаимоблокировок при записи даты минимальных итогов в таблицу AccumRegOpt 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.РасчетыСКлиентамиПоСрокам", "РегистрНакопления."+ИмяРегистра);
	Если РазмерПорции > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "1000", Формат(РазмерПорции, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Если МоментВремени = Неопределено Тогда
		Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени('00010101'));
	КонецЕсли;
	Запрос.УстановитьПараметр("БезОтбора", МоментВремени = Неопределено);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка;
	
КонецФункции

Процедура УдалитьЗаписиДокументов(Параметры, АдресРезультата = Неопределено) Экспорт
	
	ДанныеКОбработке = Параметры.ДанныеКОбработке;
	ИмяРегистра = Параметры.ИмяРегистра;
	КоличествоРегистраторов = ДанныеКОбработке.Количество();
	Для Каждого Регистратор Из ДанныеКОбработке Цикл
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Если АдресРезультата <> Неопределено Тогда
		Результат = Новый Структура("КоличествоОбработанныхЗаписей", КоличествоРегистраторов);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСлужебныеРегистраторы(Параметры, АдресРезультата = Неопределено) Экспорт
	
	ДанныеКОбработке = Параметры.ДанныеКОбработке;
	КоличествоРегистраторов = ДанныеКОбработке.Количество();
	Для Каждого Регистратор Из ДанныеКОбработке Цикл
		ДокументОбъект = Регистратор.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Удалить();
	КонецЦикла;
	
	Если АдресРезультата <> Неопределено Тогда
		Результат = Новый Структура("КоличествоОбработанныхЗаписей", КоличествоРегистраторов);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФоновоеРаспределениеПлановыхОплат

Процедура ВыполнитьФоновоеРаспределениеРасчетов(Параметры = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	РаспределитьФактическиеРасчеты = Ложь;
	Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("РаспределитьФактическиеРасчеты") Тогда
		РаспределитьФактическиеРасчеты = Параметры.РаспределитьФактическиеРасчеты;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		Константы.ВыполняетсяРаспределениеПлановыхРасчетов.Установить(Истина);
		
		КоличествоПопыток = 0;
		Пока КоличествоПопыток < 10 Цикл
			
			ОбщегоНазначенияБТС.Пауза(1);
			
			ПараметрыМП = ПараметрыМногопоточнойОбработкиРасчетов();
			ПараметрыМП.Процедура.Имя = "ОперативныеВзаиморасчетыСервер.ВыполнитьОтложенноеРаспределение";
			ПараметрыМП.Процедура.ПредставлениеЗадания = НСтр("ru = 'Распределение плановых расчетов'");
			ПараметрыМП.Данные.УсловиеЗапроса = "Задания.ДатаПересчета = ДАТАВРЕМЯ(3000,1,1)";
			Если РаспределитьФактическиеРасчеты Тогда
				ПараметрыМП.Данные.УсловиеЗапроса = "";
				ПараметрыМП.Процедура.ПредставлениеЗадания = НСтр("ru = 'Распределение фактических расчетов'");
			КонецЕсли;
			
			ВсегоОбработано = МногопоточнаяОбработкаЗаданийКРаспределениюРасчетов(ПараметрыМП);
			
			КоличествоПопыток = КоличествоПопыток + 1;
			Если ВсегоОбработано > 0 Тогда
				КоличествоПопыток = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Событие = НСтр("ru = 'Фоновое распределение плановых расчетов'", ОбщегоНазначения.КодОсновногоЯзыка());
		Если РаспределитьФактическиеРасчеты Тогда
			Событие = НСтр("ru = 'Фоновое распределение фактических расчетов'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	Константы.ВыполняетсяРаспределениеПлановыхРасчетов.Установить(Ложь);
	Если РаспределитьФактическиеРасчеты Тогда
		Константы.РаспределятьФактическиеРасчетыФоновымЗаданием.Установить(Ложь);
		ИспользоватьРегламентноеЗаданиеФактическоеРаспределение(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеФункции

#Область МенеджерМногопоточнойОбработкиРасчетов

Функция МногопоточнаяОбработкаЗаданийКРаспределениюРасчетов(Параметры)
	
	ПроцедураОбработки = Параметры.Процедура;
	ПараметрыДанных = Параметры.Данные;
	РазмерПорцииОбработкиВОдномПотоке = Параметры.РазмерПорцииОбработкиВОдномПотоке;
	
	Потоки = Новый Массив;
	КоличествоСвободныхПотоков = КоличествоПотоковРаспределенияВзаиморасчетов();
	КоличествоОбъектовДляОбработки = РазмерПорцииОбработкиВОдномПотоке * КоличествоСвободныхПотоков;
	ПараметрыДанных.ПоследняяЗапись = НовыйКурсор();
	КоличествоОбработанныхЗаписей = 0;
	КоличествоОбработанныхЗаданий = 0;
	Пока КоличествоОбъектовДляОбработки > 0 Цикл
		
		Если КоличествоСвободныхПотоков > 0 Тогда
			
			ПараметрыДанных.РазмерПорции = РазмерПорцииОбработкиВОдномПотоке * КоличествоСвободныхПотоков;
			Выборка = ДанныеДляОбработки(ПараметрыДанных);
			ПараметрыДанных.ПоследняяЗапись = НовыйКурсор();
			Если Выборка.Количество() = ПараметрыДанных.РазмерПорции Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыДанных.ПоследняяЗапись, Выборка[Выборка.Количество() - 1]);
			КонецЕсли;
			
			ПараметрыДанных.РазмерПорции = 1;
			Если Выборка.Количество()/КоличествоСвободныхПотоков > 1 Тогда
				ПараметрыДанных.РазмерПорции = Окр(Выборка.Количество()/КоличествоСвободныхПотоков,0,РежимОкругления.Окр15как20);
			КонецЕсли;
			КоличествоОбъектовДляОбработки = 0;
			Пока Выборка.Количество() > 0 Цикл
				
				ДанныеПотока = ВыбратьДанныеДляПотока(Выборка, ПараметрыДанных.РазмерПорции);
				Поток = НовоеОписаниеПотока(ПроцедураОбработки.Имя);
				Поток.НаименованиеЗадания = ПроцедураОбработки.ПредставлениеЗадания;
				Поток.ПараметрыПроцедуры.Вставить("ДанныеКОбработке", ДанныеПотока);
				Для Каждого Параметр Из ПроцедураОбработки.Параметры Цикл
					Поток.ПараметрыПроцедуры.Вставить(Параметр.Ключ, Параметр.Значение);
				КонецЦикла;
				ЗапуститьОбработкуВФоне(Поток);
				КоличествоОбъектовДляОбработки = КоличествоОбъектовДляОбработки + ДанныеПотока.Количество();
				КоличествоОбработанныхЗаданий = КоличествоОбработанныхЗаданий + ДанныеПотока.Количество();
				Потоки.Добавить(Поток);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОжидатьЗавершениеПотока(Поток);
		
		ЗавершитьПотокиВыполнившиеФЗ(Потоки, КоличествоОбработанныхЗаписей);
		Если ПараметрыДанных.ПоследняяЗапись.ОбъектРасчетов = Неопределено Тогда
			ОжидатьЗавершениеВсехПотоков(Потоки, КоличествоОбработанныхЗаписей);
		КонецЕсли;
		
		КоличествоДоступныхПотоков = КоличествоПотоковРаспределенияВзаиморасчетов();
		КоличествоСвободныхПотоков = Макс(КоличествоДоступныхПотоков - Потоки.Количество(), 0);
		
	КонецЦикла;
	
	ОжидатьЗавершениеВсехПотоков(Потоки, КоличествоОбработанныхЗаписей);
	
	Если КоличествоОбработанныхЗаписей = 0 Тогда
		Возврат КоличествоОбработанныхЗаданий;
	КонецЕсли;
	
	Возврат КоличествоОбработанныхЗаписей;
	
КонецФункции

Функция ПараметрыМногопоточнойОбработкиРасчетов(РазмерПорцииВОдномПотоке = Неопределено)
	
	Результат = Новый Структура;
	
	ПроцедураОбработки = Новый Структура;
	ПроцедураОбработки.Вставить("Имя", "");
	ПроцедураОбработки.Вставить("ПредставлениеЗадания", "");
	ПроцедураОбработки.Вставить("Параметры", Новый Структура);
	
	ДанныеОбработки = ПараметрыДанныхМногопоточнойОбработки();
	
	Результат.Вставить("РазмерПорцииОбработкиВОдномПотоке", РазмерПорцииОбработкиВОдномПотоке());
	Если РазмерПорцииВОдномПотоке <> Неопределено Тогда
		Результат.РазмерПорцииОбработкиВОдномПотоке = РазмерПорцииВОдномПотоке;
	КонецЕсли;
	Результат.Вставить("Процедура", ПроцедураОбработки);
	Результат.Вставить("Данные", ДанныеОбработки);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыДанныхМногопоточнойОбработки()
	
	ДанныеОбработки = Новый Структура;
	ДанныеОбработки.Вставить("ПоследняяЗапись", Неопределено);
	ДанныеОбработки.Вставить("РазмерПорции", Неопределено);
	ДанныеОбработки.Вставить("УсловиеЗапроса", "");
	ДанныеОбработки.Вставить("ПараметрыЗапроса", Новый Структура);
	
	Возврат ДанныеОбработки;
	
КонецФункции

Функция НовыйКурсор()
	
	ПоследняяЗапись = Новый Структура("КоличествоДокументов,АналитикаУчетаПоПартнерам,ОбъектРасчетов");
	ПоследняяЗапись.КоличествоДокументов = 0;
	
	Возврат ПоследняяЗапись;
	
КонецФункции

Функция ДанныеДляОбработки(Параметры)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Задания.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ЭтоРасчетыСКлиентами,
	|	Задания.ТипРасчетов КАК ТипРасчетов,
	|	Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Задания.ОбъектРасчетов.Объект КАК Объект,
	|	Задания.Валюта КАК ВалютаРасчетов,
	|	МИНИМУМ(Задания.ДатаПересчета) КАК ДатаПересчета,
	|	МИНИМУМ(Задания.ДатаПересчетаПлан) КАК ДатаПересчетаПлан,
	|	СУММА(Задания.КоличествоДокументов) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюРасчетов КАК Задания
	|ГДЕ
	|	Задания.Обработка = 0
	|	И (Задания.КоличествоДокументов <= &КоличествоДокументов ИЛИ &КоличествоДокументов = 0)
	|	И (Задания.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|			И Задания.ОбъектРасчетов > &ОбъектРасчетов
	|		ИЛИ Задания.АналитикаУчетаПоПартнерам > &АналитикаУчетаПоПартнерам
	|		ИЛИ &БезАналитики)
	|	И &Условие
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.ТипРасчетов,
	|	Задания.АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов,
	|	Задания.Валюта,
	|	Задания.Приоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет ВОЗР,
	|	КоличествоДокументов УБЫВ,
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов";
	
	Если Параметры.РазмерПорции = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "1000", Формат(Параметры.РазмерПорции, "ЧН=0; ЧГ=0"));
	УсловиеЗапроса = Параметры.УсловиеЗапроса;
	Если НЕ ЗначениеЗаполнено(УсловиеЗапроса) Тогда
		УсловиеЗапроса = "ИСТИНА";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", УсловиеЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КоличествоДокументов", 0);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", Неопределено);
	Запрос.УстановитьПараметр("ОбъектРасчетов", Неопределено);
	Запрос.УстановитьПараметр("БезАналитики", Истина);
	
	ПоследняяЗапись = Параметры.ПоследняяЗапись;
	Если ПоследняяЗапись <> Неопределено Тогда
		Запрос.УстановитьПараметр("КоличествоДокументов", ПоследняяЗапись.КоличествоДокументов);
		Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", ПоследняяЗапись.АналитикаУчетаПоПартнерам);
		Запрос.УстановитьПараметр("ОбъектРасчетов", ПоследняяЗапись.ОбъектРасчетов);
		Запрос.УстановитьПараметр("БезАналитики", НЕ ЗначениеЗаполнено(ПоследняяЗапись.АналитикаУчетаПоПартнерам));
	КонецЕсли;
	
	Для Каждого Параметр Из Параметры.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ВыбратьДанныеДляПотока(ДанныеКОбработке, РазмерПорции)
	
	ДанныеПотока = ДанныеКОбработке.СкопироватьКолонки();
	Индекс = 0;
	Пока (ДанныеПотока.Количество() < РазмерПорции 
			ИЛИ ДанныеКОбработке.Количество()/РазмерПорции <= 1) // это последняя порция
		 И ДанныеКОбработке.Количество() > 0 Цикл
		Запись = ДанныеКОбработке[Индекс];
		ЗаполнитьЗначенияСвойств(ДанныеПотока.Добавить(), Запись);
		ДанныеКОбработке.Удалить(Запись);
		Индекс = Индекс + РазмерПорции;
		Если Индекс >= ДанныеКОбработке.Количество() Тогда
			Индекс = 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеПотока;
	
КонецФункции

Процедура ОтметитьВыполнениеЗадания(ОтборПоИзмерениям, ДополнительныеИзмеренияОтбора = "")
	
	ИзмеренияОтбораСтрокой =  
	"ТипРасчетов,
	|АналитикаУчетаПоПартнерам,
	|ОбъектРасчетов,
	|Валюта,
	|ВалютаРасчетов";
	Если НЕ ПустаяСтрока(ДополнительныеИзмеренияОтбора)  Тогда
		ИзмеренияОтбораСтрокой = ИзмеренияОтбораСтрокой + "," + ДополнительныеИзмеренияОтбора;
	КонецЕсли;
	
	ИзмеренияОтбора = Новый Структура(ИзмеренияОтбораСтрокой);
	ЗаполнитьЗначенияСвойств(ИзмеренияОтбора, ОтборПоИзмерениям);
	
	Набор = РегистрыСведений.ЗаданияКРаспределениюРасчетов.СоздатьНаборЗаписей();
	Для Каждого Измерение Из ИзмеренияОтбора Цикл
		Если Измерение.Значение <> Неопределено Тогда
			ИмяИзмерения = ?(Измерение.Ключ = "ВалютаРасчетов", "Валюта", Измерение.Ключ);
			Набор.Отбор[ИмяИзмерения].Установить(Измерение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПотоками

Функция РазмерПорцииОбработкиВОдномПотоке()
	
	Возврат 1000;
	
КонецФункции

Функция КоличествоПотоковРаспределенияВзаиморасчетов()
	
	Количество = Константы.КоличествоПотоковРаспределенияВзаиморасчетов.Получить();
	Если Количество = 0 Тогда
		Количество = 8;
	КонецЕсли;
	Возврат Количество;
	
КонецФункции

Функция НовоеОписаниеПотока(ИмяМетода = "")
	
	Описание = Новый Структура;
	Описание.Вставить("ИдентификаторЗадания", Неопределено);
	Описание.Вставить("Процедура", ИмяМетода);
	Описание.Вставить("АдресРезультата", "");
	Описание.Вставить("НаименованиеЗадания", "");
	Описание.Вставить("ПараметрыПроцедуры", Новый Структура);
	Возврат Описание;
	
КонецФункции

Процедура ЗапуститьОбработкуВФоне(Поток)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Поток.НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне(Поток.Процедура, Поток.ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Поток.АдресРезультата = РезультатЗапуска.АдресРезультата;
	Статус = РезультатЗапуска.Статус;
	
	Если Статус = "Выполняется" Тогда
		Поток.ИдентификаторЗадания = РезультатЗапуска.ИдентификаторЗадания;
	ИначеЕсли Статус <> "Выполняется" И Статус <> "Выполнено" Тогда
		ВызватьИсключение РезультатЗапуска.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОжидатьЗавершениеВсехПотоков(Потоки, КоличествоОбработанныхЗаписей = 0)
	Пока Потоки.Количество() > 0 Цикл
		Если НЕ ЗавершитьПотокиВыполнившиеФЗ(Потоки, КоличествоОбработанныхЗаписей) Тогда
			ОжидатьЗавершениеПотока(Потоки[0]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗавершитьПотокиВыполнившиеФЗ(Потоки, КоличествоОбработанныхЗаписей = 0)
	
	ЕстьЗавершенныеПотоки = Ложь;
	
	Индекс = Потоки.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Поток = Потоки[Индекс];
		ИдентификаторЗадания = Поток.ИдентификаторЗадания;
		
		Если ИдентификаторЗадания <> Неопределено Тогда
			ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
		КонецЕсли;
		
		Если ИдентификаторЗадания = Неопределено ИЛИ ЗаданиеВыполнено Тогда
			Если ЗначениеЗаполнено(Поток.АдресРезультата) Тогда
				Результат = ПолучитьИзВременногоХранилища(Поток.АдресРезультата);
				Если Результат <> Неопределено И Результат.Свойство("КоличествоОбработанныхЗаписей") Тогда
					КоличествоОбработанныхЗаписей = КоличествоОбработанныхЗаписей + Результат.КоличествоОбработанныхЗаписей;
				КонецЕсли;
				УдалитьИзВременногоХранилища(Поток.АдресРезультата);
			КонецЕсли;
			Потоки.Удалить(Индекс);
			ЕстьЗавершенныеПотоки = Истина;
		КонецЕсли;
		
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат ЕстьЗавершенныеПотоки;
	
КонецФункции

Функция ОжидатьЗавершениеПотока(Поток, Длительность = 1)
	
	Если Поток <> Неопределено И Поток.ИдентификаторЗадания <> Неопределено Тогда
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Поток.ИдентификаторЗадания);
		
		Если Задание <> Неопределено Тогда
			Попытка
				Задание.ОжидатьЗавершенияВыполнения(Длительность);
				Возврат Истина;
			Исключение
				// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

//Возвращает таблицу объектов расчетов по которым есть движения по ресурсам "Сумма", "КОплате", "КОтгрузке"
//
// Параметры:
//	Период - Дата - Необязательный, дата, после которой искать движения по регистрам.
//	
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица объектов расчетов:
//			* АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам.
//			* ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов.
//			* ВалютаРасчетов - СправочникСсылка.Валюты.
//			* ЭтоРасчетыСКлиентами - Булево.
//			* ПорядокОбработки - Число.
//
Функция ПолучитьВсеОбъекты(Период = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта КАК ВалютаРасчетов,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
	|	МАКСИМУМ(ВЫБОР КОГДА РасчетыСКлиентами.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ) КАК ПорядокОбработки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	(РасчетыСКлиентами.Сумма <> 0 ИЛИ РасчетыСКлиентами.КОплате <> 0 ИЛИ РасчетыСКлиентами.КОтгрузке <> 0)
	|	И РасчетыСКлиентами.Период >= &Период
	|	И РасчетыСКлиентами.Активность
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаРасчетов,
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
	|	МАКСИМУМ(ВЫБОР КОГДА РасчетыСПоставщиками.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ)
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	(РасчетыСПоставщиками.Сумма <> 0 ИЛИ РасчетыСПоставщиками.КОплате <> 0 ИЛИ РасчетыСПоставщиками.КПоступлению <> 0)
	|	И РасчетыСПоставщиками.Период >= &Период
	|	И РасчетыСПоставщиками.Активность
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОбработки
	|";
	Запрос.УстановитьПараметр("Период", ?(Период = Неопределено,Дата(1,1,1),Период));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//Для целей сортировки документов в пределах 1 секунды.
// 
// Параметры:
// 	ТипДокумента - Тип - Тип документ, для которого подбирается номер.
// Возвращаемое значение:
// 	Строка - Номер для порядка.
Функция НомерТипа(ТипДокумента) Экспорт
	
	//	При добавлении документа - добавить в конец с новым номером, не меняя типы других документов.
	
	Если ТипДокумента = Тип("ДокументСсылка.РасчетКурсовыхРазниц") ИЛИ ТипДокумента = Тип("ДокументСсылка.РегистраторРасчетов")Тогда
		Тип="99";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Тип="01";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Тип="14";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Тип="16";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Тип="39";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Тип="35";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		Тип="02";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		Тип="41";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		Тип="22";
	//++ Локализация
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОперацияПоЯндексКассе") Тогда
		Тип="23";
	//-- Локализация
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		Тип="33";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВводОстатков")
		Или ТипДокумента = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов") Тогда
		Тип="03";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		Тип="04";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		Тип="07";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Тип="06";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Тип="07";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом") Тогда
		Тип="09";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыкупВозвратнойТарыУПоставщика") Тогда
		Тип="10";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ГрафикИсполненияДоговора") Тогда
		Тип="12";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Тип="17";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		Тип="18";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		Тип="19";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Тип="20";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаРегистров") Тогда
		Тип="21";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		Тип="25";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
		Тип="26";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		Тип="27";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
		Тип="28";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		Тип="30";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациямиОСписании") Тогда
		Тип="31";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		Тип="32";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		Тип="36";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Тип="37";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Тип="38";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		Тип="40";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаЗадолженности") Тогда
		Тип="42";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		Тип="43";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыкупПринятыхНаХранениеТоваров") Тогда
		Тип="11";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВыкупТоваровХранителем") Тогда
		Тип="45";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеПринятыхНаХранениеТоваров") Тогда
		Тип="46";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомитентуОЗакупках") Тогда
		 Тип="47";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.Бронирование") Тогда
		Тип="49";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.Сторно") Тогда
		Тип="50";
	КонецЕсли;
	
	Если Тип = "" Тогда
		
		ПодробноеПредставлениеОшибки = СтрЗаменить(
			НСтр("ru = 'Не определен порядок распределения типа документа в пределах дня %1.'"),
			"%1",
			ТипДокумента);
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Оперативные взаиморасчеты с контрагентами'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
			
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	Иначе
		Возврат Тип;
	КонецЕсли;
	
КонецФункции

//Возвращает структуру данных реализации для передачи между служебными процедурами.
//
// Возвращаемое значение:
//	Структура - структура данных реализации.
//		* СуммаОстаток для корректировок - при первом упоминании формируется запись с первоначальной суммой, далее из нее вычитаются оплаты и корректировки.
//		* Остальные суммы для расчета среднего курса и, наверное, формирования движений по Суммам документов в валюте регл.
Функция СтруктураСумм(СуммаДокумента = 0, СуммаДокументаРегл = 0, СуммаДокументаУпр = 0)
	СтруктураСумм = Новый Структура;
	СтруктураСумм.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураСумм.Вставить("СуммаДокументаРегл", СуммаДокументаРегл);
	СтруктураСумм.Вставить("СуммаДокументаУпр", СуммаДокументаУпр);
	Возврат СтруктураСумм;
КонецФункции

//Типы регистраторов, которые двигают план оплат, отгрузок и поставок в приход.
//
// Возвращаемое значение:
// 	СписокЗначений - Список типов документов, которые двигают только плановые регистры расчетов. Используется для распредедления плановых расчетов.
Функция СписокТиповРегистраторовПланов() Экспорт
	СписокТиповРегистраторовПланов = Новый СписокЗначений;
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
	СписокТиповРегистраторовПланов.Добавить(Тип("ДокументСсылка.ГрафикИсполненияДоговора"));
	Возврат СписокТиповРегистраторовПланов;
КонецФункции

//Для данных хоз операций не будет сформирована двойная запись в регистрах расчетов по срокам.
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ХозяйственныеОперации - Массив операций, для которых не нужно делать запись по переносу аванса.
//
Функция ХозяйственныеОперацииНеОтгрузка() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.РезервированиеАвансаКлиента);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПереносАванса);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПереносДолга);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОтражениеОплатыЧерезКомиссионера);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОтражениеВозвратаОплатыЧерезКомиссионера);
	Возврат Массив;
КонецФункции

//По данным хоз. операциям суммы в валюте регламентированного и управленческого учета не будут пересчитаны с учетом авансов.
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ХозяйственныеОперации - Массив непересчитываемых операций.
Функция НепересчитываемыеХозяйственныеОперации() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика);
	Возврат Массив;
КонецФункции

//Возвращает движения документов Реализация товаров и услуг с хоз. операцией Товары в пути к движениям,
//пригодным для офлайн взаиморасчетов.
//
Процедура ВернутьДвиженияПоРасчетамСКлиентами()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.Регистратор                  КАК Регистратор,
	|	МАКСИМУМ(РасчетыСКлиентами.Период)             КАК МаксимальныйПериод
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента),
	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав),
	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности))
	|	И ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.Регистратор) В (ТИП(Документ.РеализацияТоваровУслуг),
	|													ТИП(Документ.РеализацияУслугПрочихАктивов))
	|	И РасчетыСКлиентами.Сумма <> 0
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.Регистратор
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетыСКлиентами.Период) > 1");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.РасчетыСКлиентами.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = ИСТИНА;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.Сумма <> 0 Тогда
				Запись.Период = Выборка.МаксимальныйПериод;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры

//Количество одновременно записываемых записей регистров под одним служебным документом регистратором.
Функция РазмерПорцииЗаписи()
	Возврат 1000;
КонецФункции

Процедура ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаЗаписей, НаборЗаписей) 
	
	ИмяРегистра = НаборЗаписей.Метаданные().Имя;
	
	Для Каждого РегистраторРасчетов Из ГлобальныеПеременные["МассивЗадействованныхРегистраторов"+ИмяРегистра] Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(РегистраторРасчетов);
		НаборЗаписей.Загрузить(ТаблицаЗаписей.Скопировать(Новый Структура("Регистратор", РегистраторРасчетов)));
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Для Каждого СтрокаСвободныхРегистраторов Из ГлобальныеПеременные["МассивСвободныхРегистраторов"+ИмяРегистра] Цикл
		
		Если СтрокаСвободныхРегистраторов.ТребуетсяОчистка Тогда
			НаборЗаписей.Отбор.Регистратор.Установить(СтрокаСвободныхРегистраторов.Ссылка);
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляЗаписи(ГлобальныеПеременные, ТаблицаЗаписей, НаборЗаписей)
	РазмерПорцииЗаписи = РазмерПорцииЗаписи();
	ИмяРегистра = НаборЗаписей.Метаданные().Имя;
	
	МассивСвободныхРегистраторов = СвободныеРегистраторыРасчетов(ГлобальныеПеременные, ИмяРегистра, ТаблицаЗаписей.Количество());
	МассивЗадействованныхРегистраторов = Новый Массив;
	
	Если МассивСвободныхРегистраторов.Количество() > 0 Тогда
		
		счСтрок = 1;
		счРегистраторов = 0;
		
		МассивСвободныхРегистраторов[счРегистраторов].ТребуетсяОчистка = Ложь;
		МассивЗадействованныхРегистраторов.Добавить(МассивСвободныхРегистраторов[счРегистраторов].Ссылка);
		
		Для Каждого Строка Из ТаблицаЗаписей Цикл
			Если ТипЗнч(Строка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаРегистров") Тогда
				Продолжить;
			КонецЕсли;
			Если счСтрок > РазмерПорцииЗаписи Тогда
				счСтрок = 1;
				счРегистраторов = счРегистраторов + 1;
				МассивСвободныхРегистраторов[счРегистраторов].ТребуетсяОчистка = Ложь;
				МассивЗадействованныхРегистраторов.Добавить(МассивСвободныхРегистраторов[счРегистраторов].Ссылка);
			КонецЕсли;
			Строка.Регистратор = МассивСвободныхРегистраторов[счРегистраторов].Ссылка;
			счСтрок = счСтрок + 1;
		КонецЦикла;
	КонецЕсли;
	
	ГлобальныеПеременные.Вставить("МассивСвободныхРегистраторов" + ИмяРегистра, МассивСвободныхРегистраторов);
	ГлобальныеПеременные.Вставить("МассивЗадействованныхРегистраторов" + ИмяРегистра, МассивЗадействованныхРегистраторов);
КонецПроцедуры

Процедура УдалитьНеиспользуемыеРегистраторыРасчетов(Запрос, ИмяРегистраРасчетов, ИмяРегистраПланаОплат, ИмяРегистраПланаОтгрузкиПоставки)
	
	Запрос.Текст = "
	|
	|ВЫБРАТЬ
	|	РегистраторРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегистраторРасчетов КАК РегистраторРасчетов
	|ГДЕ            
	|	РегистраторРасчетов.ОбъектРасчетов              = &ОбъектРасчетов
	|	И РегистраторРасчетов.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РегистраторРасчетов.Валюта                    = &ВалютаРасчетов
	|	И РегистраторРасчетов.ТипРасчетов               = &ТипРасчетов
	|	И НЕ ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			&ТаблицаПланаОплат КАК РасчетыПланОплат
	|		ГДЕ
	|			РасчетыПланОплат.Регистратор = РегистраторРасчетов.Ссылка
	|	)
	|	И НЕ ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			&ТаблицаПланаОтгрузкиПоставки КАК РасчетыПланОтгрузокПоставок
	|		ГДЕ
	|			РасчетыПланОтгрузокПоставок.Регистратор = РегистраторРасчетов.Ссылка
	|	)
	|	И НЕ ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			&ТаблицаРасчетов КАК РасчетыПоСрокам
	|		ГДЕ
	|			РасчетыПоСрокам.Регистратор = РегистраторРасчетов.Ссылка
	|	)
	|	
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТаблицаРасчетов", "РегистрНакопления." + ИмяРегистраРасчетов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТаблицаПланаОтгрузкиПоставки", "РегистрНакопления." + ИмяРегистраПланаОтгрузкиПоставки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТаблицаПланаОплат", "РегистрНакопления." + ИмяРегистраПланаОплат);
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьВсе(ПараметрыВыполнения, АдресХранилища) Экспорт
	
	РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(ПараметрыВыполнения.ОкончаниеПериодаРасчета, Неопределено);
	РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками(ПараметрыВыполнения.ОкончаниеПериодаРасчета, Неопределено);
	
КонецПроцедуры

// Находит по указанным параметрам корректировки регистров, очищает их и возвращает новую корректировку.
//
// Параметры:
//   ПериодКорректировки - Дата - Все корректировки позже этой даты будут очищены, а с равной датой еще и удалены.
//   Организация - СправочникСсылка.Организации.
//   Операция - ПеречислениеСсылка.ОперацииКорректировкиРегистров.
//
// Возвращаемое значение:
//   ДокументОбъект.КорректировкаРегистров - Пустой документ корректировки, с заполненными реквизитами.
//
Функция КорректировкаРегистров(ПериодКорректировки, Организация, Операция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КорректировкаРегистров.Ссылка КАК Ссылка,
	|	КорректировкаРегистров.Дата КАК Дата
	|ИЗ
	|	Документ.КорректировкаРегистров КАК КорректировкаРегистров
	|ГДЕ
	|	КорректировкаРегистров.Дата >= &Дата
	|	И КорректировкаРегистров.Операция = &Операция
	|	И КорректировкаРегистров.Организация = &Организация
	|УПОРЯДОЧИТЬ ПО
	|	КорректировкаРегистров.Дата ВОЗР";
	Запрос.УстановитьПараметр("Дата", КонецМесяца(ПериодКорректировки));
	Запрос.УстановитьПараметр("Операция", Операция);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	КорректировкаОбъект = Неопределено;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект.КорректировкаРегистров
		Для Каждого Регистр Из ДокументОбъект.ТаблицаРегистров Цикл
			Движения = ДокументОбъект.Движения[Регистр.Имя]; // РегистрНакопленияНаборЗаписей
			Движения.Записать();
		КонецЦикла;
		
		Если Выборка.Дата = КонецМесяца(ПериодКорректировки) Тогда
			КорректировкаОбъект = ДокументОбъект;
			КорректировкаОбъект.УстановитьПометкуУдаления(Ложь);
		Иначе
			ДокументОбъект.Удалить();
		КонецЕсли;
		
	КонецЦикла;
	
	Если КорректировкаОбъект = Неопределено Тогда
		КорректировкаОбъект = Документы.КорректировкаРегистров.СоздатьДокумент();
		КорректировкаОбъект.Дата        = ПериодКорректировки;
		КорректировкаОбъект.Операция    = Операция;
		КорректировкаОбъект.Организация = Организация;
		КорректировкаОбъект.УстановитьСсылкуНового(Документы.КорректировкаРегистров.ПолучитьСсылку());
		
		НовСтр = КорректировкаОбъект.ТаблицаРегистров.Добавить();
		НовСтр.Имя = "РасчетыСКлиентамиПоСрокам";
		НовСтр = КорректировкаОбъект.ТаблицаРегистров.Добавить();
		НовСтр.Имя = "РасчетыСПоставщикамиПоСрокам";
		
		КорректировкаОбъект.Записать();
	КонецЕсли;
	
	Возврат КорректировкаОбъект;
	
КонецФункции

Процедура УдалитьСистемныеКорректировкиРегистров(ДатаПересчета, Организация = Неопределено, Операция = Неопределено, Контрагент = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КорректировкаРегистров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаРегистров КАК КорректировкаРегистров
	|ГДЕ
	|	КорректировкаРегистров.Дата >= &Дата
	|	И (КорректировкаРегистров.Организация = &Организация ИЛИ &ПоВсемОрганизациям)
	|	И КорректировкаРегистров.Операция В (&Операции)
	|	И &ПоВсемКонтрагентам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючАналитики
	|			ПО КлючАналитики.Ссылка = Расчеты.АналитикаУчетаПоПартнерам
	|ГДЕ
	|	Расчеты.Период >= &Дата
	|	И КлючАналитики.Контрагент = &Контрагент
	|	И (КлючАналитики.Организация = &Организация ИЛИ &ПоВсемОрганизациям)
	|	И НЕ &ПоВсемКонтрагентам
	|	И Расчеты.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.КорректировкаРегистров).Операция В (&Операции)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючАналитики
	|			ПО КлючАналитики.Ссылка = Расчеты.АналитикаУчетаПоПартнерам
	|ГДЕ
	|	Расчеты.Период >= &Дата
	|	И КлючАналитики.Контрагент = &Контрагент
	|	И (КлючАналитики.Организация = &Организация ИЛИ &ПоВсемОрганизациям)
	|	И НЕ &ПоВсемКонтрагентам
	|	И Расчеты.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.КорректировкаРегистров).Операция В (&Операции)
	|
	|;
	|
	|ВЫБРАТЬ
	|	КлючиАналитикиУчетаПоПартнерам.Ссылка КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|ГДЕ
	|	(КлючиАналитикиУчетаПоПартнерам.Организация = &Организация ИЛИ &ПоВсемОрганизациям)
	|	И КлючиАналитикиУчетаПоПартнерам.Контрагент = &Контрагент
	|	И НЕ &ПоВсемКонтрагентам";
	Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаПересчета));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Организация = Неопределено);
	Запрос.УстановитьПараметр("ПоВсемКонтрагентам", Контрагент = Неопределено);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Операции = Новый Массив;
	Если ЗначениеЗаполнено(Операция) Тогда
		Операции.Добавить(Операция);
	Иначе
		Операции.Добавить(Перечисления.ОперацииКорректировкиРегистров.ИсправлениеРазрывовОстатковВзаиморасчетов);
		Операции.Добавить(Перечисления.ОперацииКорректировкиРегистров.ИсправлениеРазвернутогоСальдоВзаиморасчетов);
	КонецЕсли;
	Запрос.УстановитьПараметр("Операции", Операции);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	ТаблицаАналитик = Результат[1].Выгрузить();
	ТаблицаАналитик.Индексы.Добавить("АналитикаУчетаПоПартнерам");
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект.КорректировкаРегистров
		
		Для Каждого Регистр Из ДокументОбъект.ТаблицаРегистров Цикл
			Движения = ДокументОбъект.Движения[Регистр.Имя]; // РегистрНакопленияНаборЗаписей
			Если ЗначениеЗаполнено(Контрагент) 
				И (Регистр.Имя = Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя 
					Или Регистр.Имя = Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.Имя) Тогда
					Движения.Прочитать();
					Счетчик = Движения.Количество();
					Пока Счетчик > 0 Цикл
						Счетчик = Счетчик - 1;
						Если ТаблицаАналитик.Найти(Движения[Счетчик].АналитикаУчетаПоПартнерам) <> Неопределено Тогда
							Движения.Удалить(Счетчик);
						КонецЕсли;
					КонецЦикла;
					
			КонецЕсли;
			Движения.Записать();
		КонецЦикла;
		
		Если ДокументОбъект.Движения.РасчетыСКлиентамиПоСрокам.Количество() = 0 
			И ДокументОбъект.Движения.РасчетыСПоставщикамиПоСрокам.Количество() = 0 Тогда
			ДокументОбъект.Удалить();
		Иначе
			ДополнитьКорректировкуДвижениямиПоПрочимДоходамРасходам(ДокументОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаИзмененийДляПересчета(МенеджерВременныхТаблиц, ЭтоРасчетыСКлиентами, Регистратор) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.ДокументПлан КАК ДокументПлан,
	|	РасчетыИзменения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыИзменения.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыИзменения.ВалютаРасчетов КАК ВалютаРасчетов
	|ПОМЕСТИТЬ ВтДокументыПланаПослеИзменения
	|ИЗ
	|	&РасчетыПланОплат КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &РасчетыСИзменения КАК РасчетыИзменения
	|			ПО Расчеты.ОбъектРасчетов = РасчетыИзменения.ОбъектРасчетов
	|				И Расчеты.АналитикаУчетаПоПартнерам = РасчетыИзменения.АналитикаУчетаПоПартнерам
	|				И Расчеты.Валюта = РасчетыИзменения.ВалютаРасчетов
	|				И Расчеты.ПорядокОперации > ВЫРАЗИТЬ(РасчетыИзменения.ПорядокОперации КАК Строка(8))
	|				И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И Расчеты.КОплате <> 0
	|;
	|ВЫБРАТЬ
	|	МИНИМУМ(ВложенныйЗапрос.ПорядокФакт)      КАК ПорядокФакт,
	|	МИНИМУМ(ВложенныйЗапрос.ПорядокПлан)      КАК ПорядокПлан,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов            КАК ОбъектРасчетов,
	|	МИНИМУМ(ВложенныйЗапрос.ПустойКорОбъектРасчетов) КАК ПустойКорОбъектРасчетов,
	|	ВложенныйЗапрос.ВалютаРасчетов            КАК ВалютаРасчетов
	|ИЗ (
	|	//Порядок зачета может быть меньше порядка оплаты только в вводе остатков.
	|	//Порядок операции для не суммовых строк не учитываем.
	|	ВЫБРАТЬ
	|		РасчетыПоСрокам.ПорядокОперации                                                 КАК ПорядокФакт,
	|		""30000101""                                                                    КАК ПорядокПлан,
	|		Изменения.АналитикаУчетаПоПартнерам                                             КАК АналитикаУчетаПоПартнерам,
	|		Изменения.ОбъектРасчетов                                                        КАК ОбъектРасчетов,
	|		Изменения.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка) КАК ПустойКорОбъектРасчетов,
	|		Изменения.ВалютаРасчетов                                                        КАК ВалютаРасчетов
	|	ИЗ
	|		&РасчетыПоСрокам КАК РасчетыПоСрокам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ &РасчетыСИзменения КАК Изменения
	|				ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
	|					И РасчетыПоСрокам.ОбъектРасчетов = Изменения.ОбъектРасчетов
	|					И РасчетыПоСрокам.Валюта = Изменения.ВалютаРасчетов
	|					И РасчетыПоСрокам.РасчетныйДокумент = Изменения.Документ
	|					И РасчетыПоСрокам.Активность
	|					И (Изменения.Сумма <> 0 ИЛИ Изменения.СуммаРегл <> 0 ИЛИ Изменения.СуммаУпр<> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""30000101""                                                                    КАК ПорядокФакт,
	|		РасчетыПланОплат.ПорядокОперации                                                КАК ПорядокПлан,
	|		Изменения.АналитикаУчетаПоПартнерам                                             КАК АналитикаУчетаПоПартнерам,
	|		Изменения.ОбъектРасчетов                                                        КАК ОбъектРасчетов,
	|		Изменения.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка) КАК ПустойКорОбъектРасчетов,
	|		Изменения.ВалютаРасчетов                                                        КАК ВалютаРасчетов 
	|	ИЗ
	|		&РасчетыПланОплат КАК РасчетыПланОплат
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ &РасчетыСИзменения КАК Изменения
	|				ПО РасчетыПланОплат.АналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
	|					И РасчетыПланОплат.ОбъектРасчетов = Изменения.ОбъектРасчетов
	|					И РасчетыПланОплат.Валюта = Изменения.ВалютаРасчетов
	|					И РасчетыПланОплат.ДокументПлан = Изменения.Документ
	|					И РасчетыПланОплат.Активность
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""30000101""                                                                    КАК ПорядокФакт,
	|		РасчетыПлан.ПорядокОперации                                                     КАК ПорядокПлан,
	|		Изменения.АналитикаУчетаПоПартнерам                                             КАК АналитикаУчетаПоПартнерам,
	|		Изменения.ОбъектРасчетов                                                        КАК ОбъектРасчетов,
	|		Изменения.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка) КАК ПустойКорОбъектРасчетов,
	|		Изменения.ВалютаРасчетов                                                        КАК ВалютаРасчетов 
	|	ИЗ
	|		&РасчетыПлан КАК РасчетыПлан
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ &РасчетыСИзменения КАК Изменения
	|				ПО РасчетыПлан.АналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
	|					И РасчетыПлан.ОбъектРасчетов = Изменения.ОбъектРасчетов
	|					И РасчетыПлан.Валюта = Изменения.ВалютаРасчетов
	|					И РасчетыПлан.ДокументПлан = Изменения.Документ
	|					И РасчетыПлан.Активность
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	//Порядок операции самого документа регистратора, порядок зачета не берется, т.к. может уходить в закрытые периоды (оплата долга).
	|	ВЫБРАТЬ
	|		ВЫБОР КОГДА РасчетыПоСрокам.ДокументРегистратор ССЫЛКА Документ.ВводОстатков
	|				ИЛИ РасчетыПоСрокам.ДокументРегистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов
	|			ТОГДА """"
	|			ИНАЧЕ РасчетыПоСрокам.ПорядокОперации
	|		КОНЕЦ                                                                           КАК ПорядокФакт,
	|		""30000101""                                                                    КАК ПорядокПлан,
	|		Изменения.АналитикаУчетаПоПартнерам                                             КАК АналитикаУчетаПоПартнерам,
	|		Изменения.ОбъектРасчетов                                                        КАК ОбъектРасчетов,
	|		Изменения.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка) КАК ПустойКорОбъектРасчетов,
	|		Изменения.ВалютаРасчетов                                                        КАК ВалютаРасчетов
	|	ИЗ
	|		&РасчетыПоСрокам КАК РасчетыПоСрокам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ &РасчетыСИзменения КАК Изменения
	|				ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
	|					И РасчетыПоСрокам.ОбъектРасчетов = Изменения.ОбъектРасчетов
	|					И РасчетыПоСрокам.Валюта = Изменения.ВалютаРасчетов
	|					И РасчетыПоСрокам.ДокументРегистратор = Изменения.Документ
	|					И РасчетыПоСрокам.Активность
	|					И (Изменения.Сумма <> 0 ИЛИ Изменения.СуммаРегл <> 0 ИЛИ Изменения.СуммаУпр<> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	//Минимальные непустые порядки изменений
	|	ВЫБРАТЬ
	|		ВЫБОР 
	|			КОГДА (Изменения.Сумма <> 0 ИЛИ Изменения.СуммаРегл <> 0 ИЛИ Изменения.СуммаУпр<> 0)
	|				ТОГДА Изменения.ПорядокОперации
	|			ИНАЧЕ ""30000101""
	|		КОНЕЦ                                                                           КАК ПорядокФакт,
	|		Изменения.ПорядокОперации                                                       КАК ПорядокПлан,
	|		Изменения.АналитикаУчетаПоПартнерам                                             КАК АналитикаУчетаПоПартнерам,
	|		Изменения.ОбъектРасчетов                                                        КАК ОбъектРасчетов,
	|		Изменения.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка) КАК ПустойКорОбъектРасчетов,
	|		Изменения.ВалютаРасчетов                                                        КАК ВалютаРасчетов
	|	ИЗ
	|		&РасчетыСИзменения КАК Изменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	//При расчетах по договорам и использовании заказов план надо пересчитывать с минимальной даты оплаты заказа.
	|	ВЫБРАТЬ
	|		""30000101""                                                                    КАК ПорядокФакт,
	|		ПлановыеОплатыРегистратора.ПорядокОперации                                      КАК ПорядокПлан,
	|		Изменения.АналитикаУчетаПоПартнерам                                             КАК АналитикаУчетаПоПартнерам,
	|		Изменения.ОбъектРасчетов                                                        КАК ОбъектРасчетов,
	|		Изменения.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка) КАК ПустойКорОбъектРасчетов,
	|		Изменения.ВалютаРасчетов                                                        КАК ВалютаРасчетов
	|	ИЗ
	|		&РасчетыСИзменения КАК Изменения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ &РасчетыПланОплат КАК ПлановыеОплатыРегистратора
	|				ПО ПлановыеОплатыРегистратора.АналитикаУчетаПоПартнерам = Изменения.АналитикаУчетаПоПартнерам
	|					И ПлановыеОплатыРегистратора.ОбъектРасчетов = Изменения.ОбъектРасчетов
	|					И ПлановыеОплатыРегистратора.Валюта = Изменения.ВалютаРасчетов
	|					И ПлановыеОплатыРегистратора.Активность
	|					И ПлановыеОплатыРегистратора.ДокументРегистратор = Изменения.Заказ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""30000101""                                 КАК ПорядокФакт,
	|		Порядки.ПорядокОперации                      КАК ПорядокПлан,
	|		ДокументыПлан.АналитикаУчетаПоПартнерам      КАК АналитикаУчетаПоПартнерам,
	|		ДокументыПлан.ОбъектРасчетов                 КАК ОбъектРасчетов,
	|		ИСТИНА                                       КАК ПустойКорОбъектРасчетов,
	|		ДокументыПлан.ВалютаРасчетов                 КАК ВалютаРасчетов
	|	ИЗ
	|		ВтДокументыПланаПослеИзменения КАК ДокументыПлан
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ &РасчетыПланОплат КАК Порядки
	|				ПО ДокументыПлан.АналитикаУчетаПоПартнерам = Порядки.АналитикаУчетаПоПартнерам
	|					И ДокументыПлан.ОбъектРасчетов = Порядки.ОбъектРасчетов
	|					И ДокументыПлан.ВалютаРасчетов = Порядки.Валюта
	|					И ДокументыПлан.ДокументПлан = Порядки.ДокументПлан
	|					И Порядки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					И Порядки.КОплате <> 0
	|
	|) ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов,
	|	ВложенныйЗапрос.ПустойКорОбъектРасчетов,
	|	ВложенныйЗапрос.ВалютаРасчетов
	|УПОРЯДОЧИТЬ ПО
	|	МИНИМУМ(ВложенныйЗапрос.ПустойКорОбъектРасчетов) УБЫВ
	|;
	|УНИЧТОЖИТЬ ВтДокументыПланаПослеИзменения";
	
	Если ЭтоРасчетыСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&РасчетыСИзменения", "РасчетыСКлиентамиИзменения");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&РасчетыПланОплат", "РегистрНакопления.РасчетыСКлиентамиПланОплат");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&РасчетыПлан", "РегистрНакопления.РасчетыСКлиентамиПланОтгрузок");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&РасчетыПоСрокам", "РегистрНакопления.РасчетыСКлиентамиПоСрокам");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&РасчетыСИзменения", "РасчетыСПоставщикамиИзменения");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&РасчетыПланОплат", "РегистрНакопления.РасчетыСПоставщикамиПланОплат");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&РасчетыПлан", "РегистрНакопления.РасчетыСПоставщикамиПланПоставок");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&РасчетыПоСрокам", "РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипыЗаказов",СписокТиповРегистраторовПланов());
	
	ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаИзменений;
	
КонецФункции

Процедура ОтключитьИтогиРегистровРасчетов()
	
	РегистрыНакопления.РасчетыСКлиентамиПланОплат.УстановитьИспользованиеИтогов(Ложь);
	РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.УстановитьИспользованиеИтогов(Ложь);
	РегистрыНакопления.РасчетыСКлиентамиПоСрокам.УстановитьИспользованиеИтогов(Ложь);
	РегистрыНакопления.РасчетыСПоставщикамиПланОплат.УстановитьИспользованиеИтогов(Ложь);
	РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.УстановитьИспользованиеИтогов(Ложь);
	РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.УстановитьИспользованиеИтогов(Ложь);
	
КонецПроцедуры

Процедура ВключитьИтогиРегистровРасчетов()
	
	РегистрыНакопления.РасчетыСКлиентамиПланОплат.УстановитьИспользованиеИтогов(Истина);
	РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.УстановитьИспользованиеИтогов(Истина);
	РегистрыНакопления.РасчетыСКлиентамиПоСрокам.УстановитьИспользованиеИтогов(Истина);
	РегистрыНакопления.РасчетыСПоставщикамиПланОплат.УстановитьИспользованиеИтогов(Истина);
	РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.УстановитьИспользованиеИтогов(Истина);
	РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.УстановитьИспользованиеИтогов(Истина);
	
	РегистрыНакопления.РасчетыСКлиентамиПланОплат.ПересчитатьИтоги();
	РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ПересчитатьИтоги();
	РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПересчитатьИтоги();
	РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ПересчитатьИтоги();
	РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ПересчитатьИтоги();
	РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПересчитатьИтоги();
	
КонецПроцедуры

#Область РасчетКурсовыхРазниц

// Возвращает структуру параметров необходимых для регистрации документа к отложенному распределению расчетов.
// 
// Возвращаемое значение:
// 	Структура - Описание:
//  *ЭтоРасчетыСКлиентами - Булево - Истина если это расчеты с клиентами.
//  *ПереоценкаПодням - Булево - Истина если необходимо переоценивать каждый день, иначе только по дням оплаты.
//
Функция ПараметрыПереоценки(ЭтоРасчетыСКлиентами = Неопределено, ПереоценкаПоДням = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
	Результат.Вставить("ПереоценкаПодням", ПереоценкаПоДням);
	Если ПереоценкаПоДням = Неопределено ТОгда
		Результат.Вставить("ПереоценкаПодням", Константы.ПереоцениватьВалютныеСредстваПоДням.Получить());
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Процедура УдалитьКурсовыеРазницыЗаПериод(МассивОрганизаций, НачалоПериода, Знач КонецПериода, ЭтоРасчетыСКлиентами = Неопределено)
	
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
	|	РасчетыПоСрокам.Регистратор КАК РегистраторРасчетов
	|ПОМЕСТИТЬ втРегистраторыРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитики
	|	ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = КлючиАналитики.Ссылка
	|ГДЕ
	|	&РасчетыСКлиентами
	|	И РасчетыПоСрокам.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КлючиАналитики.Организация В (&Организации)
	|	И ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) = ТИП(Документ.РасчетКурсовыхРазниц)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
	|	РасчетыПоСрокам.Регистратор КАК РегистраторРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыПоСрокам
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитики
	|	ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = КлючиАналитики.Ссылка
	|ГДЕ
	|	&РасчетыСПоставщиками
	|	И РасчетыПоСрокам.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КлючиАналитики.Организация В (&Организации)
	|	И ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) = ТИП(Документ.РасчетКурсовыхРазниц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
	|	*
	|ПОМЕСТИТЬ втДвиженияРегистраторов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРегистраторыРасчетов КАК РегистраторыРасчетов
	|		ПО РасчетыСПоСрокам.Регистратор = РегистраторыРасчетов.РегистраторРасчетов
	|ГДЕ
	|	НЕ (ТИПЗНАЧЕНИЯ(РасчетыСПоСрокам.ДокументРегистратор) = ТИП(Документ.РасчетКурсовыхРазниц)
	|		И РасчетыСПоСрокам.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
	|	*
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРегистраторыРасчетов КАК РегистраторыРасчетов
	|		ПО РасчетыСПоСрокам.Регистратор = РегистраторыРасчетов.РегистраторРасчетов
	|ГДЕ
	|	НЕ (ТИПЗНАЧЕНИЯ(РасчетыСПоСрокам.ДокументРегистратор) = ТИП(Документ.РасчетКурсовыхРазниц)
	|		И РасчетыСПоСрокам.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистраторыРасчетов.ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами,
	|	РегистраторыРасчетов.РегистраторРасчетов КАК Регистратор
	|ИЗ
	|	втРегистраторыРасчетов КАК РегистраторыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДвиженияРегистраторов КАК ДвиженияРегистраторов
	|		ПО РегистраторыРасчетов.РегистраторРасчетов = ДвиженияРегистраторов.Регистратор
	|ГДЕ
	|	ДвиженияРегистраторов.Регистратор ЕСТЬ NULL
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	втДвиженияРегистраторов КАК ДвиженияРегистраторов
	|
	|ИТОГИ
	|	МАКСИМУМ(ЭтоРасчетыСКлиентами)
	|ПО
	|	Регистратор";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организации", МассивОрганизаций);
	Запрос.УстановитьПараметр("РасчетыСКлиентами", ЭтоРасчетыСКлиентами = Неопределено ИЛИ ЭтоРасчетыСКлиентами);
	Запрос.УстановитьПараметр("РасчетыСПоставщиками", ЭтоРасчетыСКлиентами = Неопределено ИЛИ НЕ ЭтоРасчетыСКлиентами);
	РезультатПакета = Запрос.ВыполнитьПакет();
	ПоследнийПакет = РезультатПакета.ВГраница();
	
	Выборка = РезультатПакета[ПоследнийПакет].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоРасчетыСКлиентами Тогда
			НаборЗаписей = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
		Иначе
			НаборЗаписей = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
		КонецЕсли;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		Движения = Выборка.Выбрать();
		Пока Движения.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Движения);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// Регистраторы которые остались без движений
	Выборка = РезультатПакета[ПоследнийПакет-1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоРасчетыСКлиентами Тогда
			НаборЗаписей = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
		Иначе
			НаборЗаписей = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
		КонецЕсли;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ДниПереоценки(МассивОрганизаций, НачалоПериода, КонецПериода, ЭтоРасчетыСКлиентами = Неопределено, ПереоценкаПоДням = Неопределено)
	
	ТекстЗапроса = "
	|// Оплаты клиентов в валюте
	|ВЫБРАТЬ
	|	Расчеты.Валюта КАК Валюта,
	|	Расчеты.Период КАК Период
	|ПОМЕСТИТЬ втОборотыВалюты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|	ПО
	|		Расчеты.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Организации КАК Организации
	|	ПО
	|		КлючиАналитикиУчетаПоПартнерам.Организация = Организации.Ссылка
	|ГДЕ
	|	&РасчетыСКлиентами
	|	И Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Организации.Ссылка В (&Организации)
	|	И (Расчеты.Валюта <> &ВалютаУправленческогоУчета ИЛИ Расчеты.Валюта <> Организации.ВалютаРегламентированногоУчета)
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Расчеты.Долг <> 0
	|	И НЕ Расчеты.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Оплаты поставщикам в валюте
	|ВЫБРАТЬ
	|	Расчеты.Валюта КАК Валюта,
	|	Расчеты.Период КАК Период
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|	ПО
	|		Расчеты.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Организации КАК Организации
	|	ПО
	|		КлючиАналитикиУчетаПоПартнерам.Организация = Организации.Ссылка
	|ГДЕ
	|	&РасчетыСПоставщиками
	|	И Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Организации.Ссылка В (&Организации)
	|	И (Расчеты.Валюта <> &ВалютаУправленческогоУчета ИЛИ Расчеты.Валюта <> Организации.ВалютаРегламентированногоУчета)
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Расчеты.Долг <> 0
	|	И НЕ Расчеты.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(втОборотыВалюты.Период, ДЕНЬ) КАК Дата
	|ИЗ
	|	втОборотыВалюты КАК втОборотыВалюты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КурсыВалют.Период
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ПереоценкаПоДням
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(&КонецПериода, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организации",  МассивОрганизаций);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",  Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("РасчетыСКлиентами", ЭтоРасчетыСКлиентами = Неопределено ИЛИ ЭтоРасчетыСКлиентами);
	Запрос.УстановитьПараметр("РасчетыСПоставщиками", ЭтоРасчетыСКлиентами = Неопределено ИЛИ НЕ ЭтоРасчетыСКлиентами);
	Если ПереоценкаПоДням = Неопределено Тогда
		ПереоценкаПоДням = Константы.ПереоцениватьВалютныеСредстваПоДням.Получить();
	КонецЕсли;
	Запрос.УстановитьПараметр("ПереоценкаПоДням",  ПереоценкаПоДням);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выборка;
	
КонецФункции

#КонецОбласти

Функция СуммаСписания(Курс, СуммаВВалюте, СуммаВзаиморасчетов, СуммаКСписанию, Точность)
	
	Если Точность < 0 Тогда
		Точность = 0;
	КонецЕсли;
	
	Если СуммаКСписанию = СуммаВзаиморасчетов Тогда
		Возврат СуммаВВалюте;
	Иначе
		Если Курс = 0 Тогда
			Возврат Окр(СуммаВВалюте/СуммаВзаиморасчетов,Точность) * СуммаКСписанию;
		Иначе
			Возврат Курс * СуммаКСписанию;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ИспользоватьРегламентноеЗаданиеФактическоеРаспределение(Включить)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Метаданные", "РаспределениеФактическихВзаиморасчетов");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Задания.Количество() = 1 Тогда
		Параметры = Новый Структура();
		Параметры.Вставить("Использование", Включить);
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задания[0].УникальныйИдентификатор, Параметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

