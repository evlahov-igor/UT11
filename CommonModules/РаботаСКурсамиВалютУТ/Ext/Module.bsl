
#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииРаботыСВалютами

// Функция получает коэффициент пересчета из текущей валюты в новую валюту.
//
// Параметры:
//	ТекущаяВалюта - СправочникСсылка.Валюты - Текущая валюта документа
//	НоваяВалюта - СправочникСсылка.Валюты - Новая валюта документа
//	Дата - Дата - Дата документа.
//	БазоваяВалюта - СправочникСсылка.Валюты - Базовая валюта, относительно которой необходимо получить курс.
//											Если Неопределено, то курсы получаются относительно значения из константы БазоваяВалютаПоУмолчанию.
//
// Возвращаемое значение:
//	Число - Коэффициент пересчета в новую валюту.
//
Функция ПолучитьКоэффициентПересчетаИзВалютыВВалюту(ТекущаяВалюта, НоваяВалюта, Дата, Знач БазоваяВалюта = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(БазоваяВалюта) Тогда
		БазоваяВалюта = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	КонецЕсли;
	
	Если ТекущаяВалюта <> НоваяВалюта Тогда
		КурсТекущейВалюты = ПолучитьКурсВалюты(ТекущаяВалюта, Дата, БазоваяВалюта);
		КурсНовойВалюты = ПолучитьКурсВалюты(НоваяВалюта, Дата, БазоваяВалюта);
		Если КурсНовойВалюты.КурсЧислитель * КурсТекущейВалюты.КурсЗнаменатель <> 0 Тогда
			КоэффициентПересчета = 
				(КурсТекущейВалюты.КурсЧислитель * КурсНовойВалюты.КурсЗнаменатель) 
				/ (КурсНовойВалюты.КурсЧислитель * КурсТекущейВалюты.КурсЗнаменатель);
		Иначе
			КоэффициентПересчета = 1;
		КонецЕсли;
	Иначе
		КоэффициентПересчета = 1;
	КонецЕсли;
	
	Возврат КоэффициентПересчета;
	
КонецФункции // ПолучитьКоэффициентПересчетаИзВалютыВВалюту()

// Возвращает курс валюты на дату.
//
// Параметры:
//   Валюта    - СправочникСсылка.Валюты - валюта, для которой получается курс.
//   ДатаКурса - Дата - дата, на которую получается курс.
//   БазоваяВалюта - СправочникСсылка.Валюты - Валюта, относительно которой необходимо получить курс
//   
// Возвращаемое значение: 
//   Структура:
//    * КурсЧислитель - Число - Числитель курса валюты на указанную дату.
//    * КурсЗнаменатель - Число - Знаменатель курса валюты на указанную дату.
//    * Валюта    - СправочникСсылка.Валюты - ссылка валюты.
//    * ДатаКурса - Дата - дата получения курса.
//    * БазоваяВалюта - СправочникСсылка.Валюты - Валюта, относительно которой получены  курс.
//
Функция ПолучитьКурсВалюты(Знач Валюта, Знач ДатаКурса, Знач БазоваяВалюта = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(БазоваяВалюта) Тогда
		БазоваяВалюта = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	КонецЕсли;
	
	Если Валюта = БазоваяВалюта Тогда
		Результат = Новый Структура();
		Результат.Вставить("Валюта",    Валюта);
		Результат.Вставить("ДатаКурса", ДатаКурса);
		Результат.Вставить("БазоваяВалюта", БазоваяВалюта);
		Результат.Вставить("КурсЧислитель", 1);
		Результат.Вставить("КурсЗнаменатель", 1);
	Иначе
		Результат = РегистрыСведений.ОтносительныеКурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта, БазоваяВалюта", Валюта, БазоваяВалюта));
		Результат.Вставить("Валюта",    Валюта);
		Результат.Вставить("ДатаКурса", ДатаКурса);
		Результат.Вставить("БазоваяВалюта", БазоваяВалюта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция получает коэффициенты пересчета сумм из валюты документа в валюту взаиморасчетов,
// в валюты управленческого и регламентированного учета.
//
// Параметры:
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа
//	ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа
//	Период - Дата - Дата документа
//	Организация - СправочникСсылка.Организации - Организация документа
//	КурсЧислительДокумента - Число - Необязательный, курс-числитель валюты документа
//	КурсЗнаменательДокумента - Число - Необязательный, курс-знаменатель валюты документа.
//
// Возвращаемое значение:
//   Структура - Параметры курса валюты:
//	   * КоэффициентПересчетаВВалютуВзаиморасчетов 	- Число - Коэффициент пересчета в валюту взаиморасчетов.
//	   * КоэффициентПересчетаВВалютуУПР 			- Число - Коэффициент пересчета в валюту управленческого учета.
//	   * КоэффициентПересчетаВВалютуРегл 			- Число - Коэффициент пересчета в валюту регламентированного учета.
//
Функция ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, ВалютаВзаиморасчетов, Период, Организация, КурсЧислительДокумента = Неопределено, КурсЗнаменательДокумента = Неопределено) Экспорт

	ВалютаУпр  = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ОтносительныеКурсыВалют.Валюта КАК Валюта,
	|	ОтносительныеКурсыВалют.КурсЧислитель КАК КурсЧислитель,
	|	ОтносительныеКурсыВалют.КурсЗнаменатель КАК КурсЗнаменатель
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Период,
	|		(Валюта = &ВалютаУпр ИЛИ Валюта = &ВалютаРегл ИЛИ Валюта = &ВалютаВзаиморасчетов ИЛИ Валюта = &ВалютаДокумента) И БазоваяВалюта = &ВалютаРегл
	|	) КАК ОтносительныеКурсыВалют
	|");
	Запрос.УстановитьПараметр("Период",               Период);
	Запрос.УстановитьПараметр("ВалютаУпр",            ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаРегл",           ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаДокумента",      ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);

	КурсЧислительВалютыУпр = 1;
	КурсЗнаменательВалютыУпр = 1;

	КурсЧислительВалютыРегл = 1;
	КурсЗнаменательВалютыРегл = 1;

	КурсЧислительВзаиморасчетов = 1;
	КурсЗнаменательВзаиморасчетов = 1;

	КурсЧислительВалютыДокумента = 1;
	КурсЗнаменательВалютыДокумента = 1;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.Валюта = ВалютаУпр Тогда

			КурсЧислительВалютыУпр = Выборка.КурсЧислитель;
			КурсЗнаменательВалютыУпр = Выборка.КурсЗнаменатель;

		КонецЕсли;

		Если Выборка.Валюта = ВалютаРегл Тогда

			КурсЧислительВалютыРегл = Выборка.КурсЧислитель;
			КурсЗнаменательВалютыРегл = Выборка.КурсЗнаменатель;

		КонецЕсли;

		Если Выборка.Валюта = ВалютаВзаиморасчетов Тогда

			КурсЧислительВзаиморасчетов = Выборка.КурсЧислитель;
			КурсЗнаменательВзаиморасчетов = Выборка.КурсЗнаменатель;

		КонецЕсли;

		Если Выборка.Валюта = ВалютаДокумента Тогда

			КурсЧислительВалютыДокумента = Выборка.КурсЧислитель;
			КурсЗнаменательВалютыДокумента = Выборка.КурсЗнаменатель;

		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(КурсЧислительДокумента) Тогда
		
		ВалютаРегУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
		
		Если ВалютаДокумента = ВалютаРегУчета И НЕ ВалютаВзаиморасчетов = ВалютаРегУчета Тогда
			КурсЧислительВзаиморасчетов = КурсЧислительДокумента;
			КурсЗнаменательВзаиморасчетов = КурсЗнаменательДокумента;
			КурсЧислительВалютыДокумента = 1;
			КурсЗнаменательВалютыДокумента = 1;
		Иначе
			КурсЧислительВалютыДокумента = КурсЧислительДокумента;
			КурсЗнаменательВалютыДокумента = КурсЗнаменательДокумента;
			КурсЧислительВзаиморасчетов = 1;
			КурсЗнаменательВзаиморасчетов = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура("КоэффициентПересчетаВВалютуВзаиморасчетов, КоэффициентПересчетаВВалютуУПР, КоэффициентПересчетаВВалютуРегл");

	Результат.КоэффициентПересчетаВВалютуУпр  = КурсЧислительВалютыДокумента * КурсЗнаменательВалютыУпр / (КурсЗнаменательВалютыДокумента * КурсЧислительВалютыУпр); 
	Результат.КоэффициентПересчетаВВалютуРегл = КурсЧислительВалютыДокумента * КурсЗнаменательВалютыРегл / (КурсЗнаменательВалютыДокумента * КурсЧислительВалютыРегл);
	Результат.КоэффициентПересчетаВВалютуВзаиморасчетов = КурсЧислительВалютыДокумента * КурсЗнаменательВзаиморасчетов / (КурсЗнаменательВалютыДокумента * КурсЧислительВзаиморасчетов);

	Возврат Результат;

КонецФункции

// Функция пересчитывает сумму документа из текущей валюты в новую валюту.
//
// Параметры:
//	СуммаДокумента - Число - Текущая сумма документа
//	ТекущаяВалюта - СправочникСсылка.Валюты - Текущая валюта документа
//	НоваяВалюта - СправочникСсылка.Валюты - Новая валюта документа
//	Дата - Дата - Дата документа.
//	БазоваяВалюта - СправочникСсылка.Валюты - Валюта, относительно которой необходимо получать курсы.
//
// Возвращаемое значение:
//	Число - Новая сумма документа
//
Функция ПересчитатьСуммуДокументаВВалюту(СуммаДокумента, ТекущаяВалюта, НоваяВалюта, Дата, БазоваяВалюта) Экспорт
	
	СтруктураКурсовТекущейВалюты = ПолучитьКурсВалюты(ТекущаяВалюта, Дата, БазоваяВалюта);
	СтруктураКурсовНовойВалюты = ПолучитьКурсВалюты(НоваяВалюта, Дата, БазоваяВалюта);
	
	НоваяСуммаДокумента = ПересчитатьПоКурсу(СуммаДокумента, СтруктураКурсовТекущейВалюты, СтруктураКурсовНовойВалюты);
	
	Возврат НоваяСуммаДокумента;
	
КонецФункции // ПересчитатьСуммуДокументаВВалюту()

// Возвращает курс валюты управленческого учета относительно валюты регламентированного.
//
// Параметры:
//  Дата - Дата - Дата на которую необходимо получить курс валюты.
//  ВалютаРегламентированногоУчета - СправочникСсылка.Валюты - Валюта регламентированного учета.
//  
// Возвращаемое значение:
//  Число - Курс валюты управленческого учета
//
Функция ПолучитьКурсВалютыУправленческогоУчета(Дата, ВалютаРегламентированногоУчета) Экспорт

	Отбор = Новый Структура("Валюта, БазоваяВалюта", 
				Константы.ВалютаУправленческогоУчета.Получить(), ВалютаРегламентированногоУчета);
	СтруктураКурса  = РегистрыСведений.ОтносительныеКурсыВалют.ПолучитьПоследнее(Дата, Отбор);
	Курс = СтруктураКурса.КурсЧислитель / СтруктураКурса.КурсЗнаменатель;
	Возврат Курс;

КонецФункции

// Процедура заполняет КурсЧислитель и КурсЗнаменатель документа по умолчанию
//
// Параметры:
//	КурсЧислитель - Число - КурсЧислитель для расчета
//	КурсЗнаменатель - Число - КурсЗнаменатель для расчета
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа
//	ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов документа
//	Организация - СправочникСсылка.Организации - Организация документа
//	Дата - Дата - Необязательный, дата документа.
//
Процедура ЗаполнитьКурсДокументаПоУмолчанию(КурсЧислитель, КурсЗнаменатель, ВалютаДокумента, ВалютаВзаиморасчетов, Организация, Дата = Неопределено) Экспорт
	
	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	Если ЗначениеЗаполнено(Организация) Тогда
		БазоваяВалюта = ВалютаРеглУчета;
	Иначе
		БазоваяВалюта = Константы.БазоваяВалютаПоУмолчанию.Получить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ВалютаДокумента = ВалютаВзаиморасчетов 
		ИЛИ НЕ ЗначениеЗаполнено(ВалютаДокумента) 
		ИЛИ НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		
		КурсЧислитель = 1;
		КурсЗнаменатель = 1;
		Возврат;
		
	ИначеЕсли ВалютаДокумента = ВалютаРеглУчета И НЕ ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
		
		СтруктураКурса = ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Дата, БазоваяВалюта);
		
	ИначеЕсли НЕ ВалютаДокумента = ВалютаРеглУчета И ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
		
		СтруктураКурса = ПолучитьКурсВалюты(ВалютаДокумента, Дата, БазоваяВалюта);
		
	Иначе
		
		КурсВалютыВзаиморасчетов = ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Дата, БазоваяВалюта);
		КурсВалютыДокумента      = ПолучитьКурсВалюты(ВалютаДокумента, Дата, БазоваяВалюта);
		СтруктураКурса           = ПолучитьКроссКурсВалют(КурсВалютыДокумента, КурсВалютыВзаиморасчетов);
		
	КонецЕсли;
	
	КурсЧислитель      = СтруктураКурса.КурсЧислитель;
	КурсЗнаменатель = СтруктураКурса.КурсЗнаменатель;
	
КонецПроцедуры

// Функция возвращает кросс-курс двух валют
//
// Параметры:
//	Валюта1 - Структура - Параметры курса валюты, относительно которой рассчитывается курс:
//       * КурсЧислитель      - Число - Курс валюты относительно валюты регламентированного учета.
//       * КурсЗнаменатель - Число - Кратность валюты относительно валюты регламентированного учета.
//	Валюта2 - Структура - Параметры курса валюты, курс которой рассчитывается:
//       * КурсЧислитель      - Число - Курс валюты относительно валюты регламентированного учета.
//       * КурсЗнаменатель - Число - Кратность относительно валюты регламентированного учета.
//
// Возвращаемое значение: 
//   Структура - Параметры кросс-курса:
//       * КурсЧислитель - Число - Числитель кросс-курса
//       * КурсЗнаменатель - Число - Знаменатель кросс-курса
//
Функция ПолучитьКроссКурсВалют(Валюта1, Валюта2) Экспорт
	
	Если Валюта1.КурсЧислитель <> 0
		И Валюта1.КурсЗнаменатель <> 0
		И Валюта2.КурсЧислитель <> 0
		И Валюта2.КурсЗнаменатель <> 0 Тогда
			
			ЧислительПриведенный = Валюта1.КурсЧислитель * Валюта2.КурсЗнаменатель / (Валюта2.КурсЧислитель * Валюта1.КурсЗнаменатель);
			ЗнаменательПриведенный = 1;
			
			Если ЧислительПриведенный < 1 Тогда
				Пока ЧислительПриведенный * 10 < 1 Цикл
					ЧислительПриведенный = ЧислительПриведенный * 10;
					ЗнаменательПриведенный = ЗнаменательПриведенный * 10;
				КонецЦикла;
			КонецЕсли;
	Иначе
		ЧислительПриведенный = 1;
		ЗнаменательПриведенный = 1;
	КонецЕсли;
	
	Точность = Метаданные.ОпределяемыеТипы.КурсВалюты.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
	
	СтруктураКурса = СтруктураКурсаВалюты();
	СтруктураКурса.КурсЧислитель = Окр(ЧислительПриведенный, Точность);
	СтруктураКурса.КурсЗнаменатель = ЗнаменательПриведенный;
	
	Возврат СтруктураКурса;
	
КонецФункции

// Функция возвращает структуру параметров курса валюты
//
// Параметры:
//	КурсЧислитель - Число - Необязательный, числитель курса валюты.
//	КурсЗнаменатель - Число - Необязательный, Знаменатель курса валюты.
//
// Возвращаемое значение: 
//   Структура - Параметры курса валюты:
//	   * КурсЧислитель - Число - курс валюты.
//	   * КурсЗнаменатель - Число - кратность курса.
//
Функция СтруктураКурсаВалюты(КурсЧислитель = 0, КурсЗнаменатель = 0) Экспорт
	Структура = Новый Структура;
	Структура.Вставить("КурсЧислитель", КурсЧислитель);
	Структура.Вставить("КурсЗнаменатель", КурсЗнаменатель);
	Возврат Структура;
КонецФункции

// Пересчитывает сумму из одной валюты в другую.
//
// Параметры:
//  Сумма          - Число - сумма, которую необходимо пересчитать;
//  БазоваяВалюта - СправочникСсылка.Валюты - валюта, относительно которой получается курс;
//  ИсходнаяВалюта - СправочникСсылка.Валюты - пересчитываемая валюта;
//  НоваяВалюта    - СправочникСсылка.Валюты - валюта, в которую необходимо пересчитать;
//  Дата           - Дата - дата курсов валют.
//
// Возвращаемое значение:
//  Число - пересчитанная сумма.
//
Функция ПересчитатьВВалюту(Сумма, БазоваяВалюта, ИсходнаяВалюта, НоваяВалюта, Дата) Экспорт
	
	Возврат ПересчитатьПоКурсу(Сумма,
		ПолучитьКурсВалюты(ИсходнаяВалюта, Дата, БазоваяВалюта),
		ПолучитьКурсВалюты(НоваяВалюта, Дата, БазоваяВалюта));
	
КонецФункции

// Пересчитывает сумму из текущей валюты в новую валюту по параметрам их курсов. 
// Параметры курсов валют можно получить функцией РаботаСКурсамиВалют.ПолучитьКурсВалюты.
//
// Параметры:
//   Сумма - Число     - сумма, которую следует пересчитать.
//
//   ПараметрыТекущегоКурса - Структура - параметры курса валюты, из которой надо пересчитать:
//    * Валюта - СправочникСсылка.Валюты - ссылка пересчитываемой валюты.
//    * КурсЧислитель - Число - курс пересчитываемой валюты.
//    * КурсЗнаменатель - Число - кратность пересчитываемой валюты.
//
//   ПараметрыНовогоКурса   - Структура - параметры курса валюты, в  которую надо пересчитать:
//    * Валюта - СправочникСсылка.Валюты - ссылка валюты, в которую идет пересчет.
//    * КурсЧислитель - Число - курс числитель валюты, в которую идет пересчет.
//    * КурсЗнаменатель - Число - курс знаменатель валюты, в которую идет пересчет.
//
// Возвращаемое значение: 
//   Число - сумма, пересчитанная по новому курсу.
//
Функция ПересчитатьПоКурсу(Сумма, ПараметрыТекущегоКурса, ПараметрыНовогоКурса) Экспорт
	Если ПараметрыТекущегоКурса.Валюта = ПараметрыНовогоКурса.Валюта
		Или (ПараметрыТекущегоКурса.КурсЧислитель = ПараметрыНовогоКурса.КурсЧислитель 
			И ПараметрыТекущегоКурса.КурсЗнаменатель = ПараметрыНовогоКурса.КурсЗнаменатель) Тогда
		
		Возврат Сумма;
	КонецЕсли;
	
	Если ПараметрыТекущегоКурса.КурсЧислитель = 0
		Или ПараметрыТекущегоКурса.КурсЗнаменатель = 0
		Или ПараметрыНовогоКурса.КурсЧислитель = 0
		Или ПараметрыНовогоКурса.КурсЗнаменатель = 0 Тогда
		
		Возврат 0;
	КонецЕсли;
	
	Возврат Окр((Сумма * ПараметрыТекущегоКурса.КурсЧислитель * ПараметрыНовогоКурса.КурсЗнаменатель) 
		/ (ПараметрыНовогоКурса.КурсЧислитель * ПараметрыТекущегоКурса.КурсЗнаменатель), 2);
КонецФункции

// Формирует представление суммы прописью в указанной валюте.
//
// Параметры:
//   СуммаЧислом - Число - сумма, которую надо представить прописью.
//   Валюта - СправочникСсылка.Валюты - валюта, в которой нужно представить сумму.
//   БезДробнойЧасти - Булево - указать Истина, если требуется получить сумму без дробной части (без копеек).
//   КодЯзыка - Строка - язык, на котором требуется получить сумму прописью.
//                       Состоит из кода языка по ISO 639-1 и, опционально, кода страны по ISO 3166-1, разделенных
//                       символом подчеркивания. Примеры: "en", "en_US", "en_GB", "ru", "ru_RU".
//                       Значение по умолчанию - язык конфигурации.
//
// Возвращаемое значение:
//   Строка - сумма прописью.
//
Функция СформироватьСуммуПрописью(СуммаЧислом, Валюта, БезДробнойЧасти = Ложь, Знач КодЯзыка = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(КодЯзыка) Тогда
		КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	КонецЕсли;
	
	Сумма = ?(СуммаЧислом < 0, -СуммаЧислом, СуммаЧислом);
	ПараметрыПрописи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "ПараметрыПрописи", , КодЯзыка);
	Результат = ЧислоПрописью(Сумма, "L=" + КодЯзыка + ";ДП=Ложь", ПараметрыПрописи); // АПК:1297 АПК:1357
	Если БезДробнойЧасти И Цел(Сумма) = Сумма Тогда
		Результат = Лев(Результат, СтрНайти(Результат, "0") - 1);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет синхронизацию между РС.КурсыВалют и РС.ОтносительныеКурсыВалют.
//
// Параметры:
//  Источник - РегистрСведенийНаборЗаписей - Набор записей РС.КурсыВалют или РС.ОтносительныеКурсыВалют.
//
Процедура СинхронизоватьКурсыВалют(Источник) Экспорт
	
	БазоваяВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Не ЗначениеЗаполнено(БазоваяВалюта) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.КурсыВалют") Тогда
		Приемник = РегистрыСведений.ОтносительныеКурсыВалют.СоздатьНаборЗаписей();
		ИмяРегистра = Метаданные.РегистрыСведений.ОтносительныеКурсыВалют.Имя;
	Иначе
		Если Источник.Отбор.БазоваяВалюта.Значение <> БазоваяВалюта Тогда
			Возврат;
		КонецЕсли;
		Приемник = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
		БазоваяВалюта = Неопределено;
		ИмяРегистра = Метаданные.РегистрыСведений.КурсыВалют.Имя;
	КонецЕсли;
	
	Если Источник.Количество() > 0 Тогда
		ОбновитьСинхронизируемыеКурсы(Источник, Приемник, ИмяРегистра, БазоваяВалюта);
	Иначе
		УдалитьСинхронизируемыеКурсы(Источник, Приемник, БазоваяВалюта)
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие установленного относительного курса на 1 января 1980 года.
// В случае отсутствия устанавливает курс числитель и курс знаменатель равными единице.
//
// Параметры:
//  Валюта - СправочникСсылка.Валюты - ссылка на элемент справочника Валют.
//
Процедура ПроверитьКорректностьОтносительногоКурсаНа01_01_1980(Валюта) Экспорт
	
	ДатаКурса = Дата("19800101");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОтносительныеКурсыВалют");
	ЭлементБлокировки.УстановитьЗначение("Период", ДатаКурса);
	ЭлементБлокировки.УстановитьЗначение("Валюта", Валюта);
	ЭлементБлокировки.УстановитьЗначение("БазоваяВалюта", Валюта);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		СтруктураКурса = РегистрыСведений.ОтносительныеКурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта, БазоваяВалюта", Валюта, Валюта));
		
		Если (СтруктураКурса.КурсЧислитель = 0) Или (СтруктураКурса.КурсЗнаменатель = 0) Тогда
			НаборЗаписей = РегистрыСведений.ОтносительныеКурсыВалют.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(ДатаКурса);
			НаборЗаписей.Отбор.Валюта.Установить(Валюта);
			НаборЗаписей.Отбор.БазоваяВалюта.Установить(Валюта);
			Запись = НаборЗаписей.Добавить();
			Запись.Период = ДатаКурса;
			Запись.Валюта = Валюта;
			Запись.БазоваяВалюта = Валюта;
			Запись.КурсЧислитель = 1;
			Запись.КурсЗнаменатель = 1;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьКонтрольПодчиненныхВалют");
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#Область КэшКурсовВалют

// Функция возвращает таблицу - кэш курсов валют
//
// Возвращаемое значение: 
//  ТаблицаЗначений - Таблица, содержащая колонки:
//     * Валюта 	- СправочникСсылка.Валюты -  элемент справочника "Валюты".
//     
//	   * ДатаКурса 	- Дата - дата курса.
//	   * КурсЧислитель - Число - Числитель курса валюты.
//	   * КурсЗнаменатель - Число - Знаменатель курса валюты.
//
Функция ИнициализироватьКэшКурсовВалют() Экспорт
	
	КэшКурсов = Новый ТаблицаЗначений;
	КэшКурсов.Колонки.Добавить("Валюта");
	КэшКурсов.Колонки.Добавить("БазоваяВалюта");
	КэшКурсов.Колонки.Добавить("ДатаКурса");
	КэшКурсов.Колонки.Добавить("КурсЧислитель");
	КэшКурсов.Колонки.Добавить("КурсЗнаменатель");
	
	КэшКурсов.Индексы.Добавить("Валюта, ДатаКурса, БазоваяВалюта");
	
	Возврат КэшКурсов;
	
КонецФункции // ИнициализироватьКэшКурсовВалют()

// Функция возвращает отношение курса к кратности курса валюты на дату
//
// Параметры:
//  Валюта - СправочникСсылка.Валюты - - Валюта, курс которой необходимо получить
//  ДатаКурса - Дата-  Дата, на которую следует получить курс
//  КэшКурсов - см. ИнициализироватьКэшКурсовВалют
//	БазоваяВалюта - СправочникСсылка.Валюты - Базовая валюта, относительно которой необходимо получить курс.
//											Если Неопределено, то курсы получаются относительно значения из константы БазоваяВалютаПоУмолчанию.
//	
// Возвращаемое значение: 
//	Число      - Курс валюты
//
Функция ПолучитьКурсВалютыИзКэша(Знач Валюта, Знач ДатаКурса, КэшКурсов, Знач БазоваяВалюта = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка получения курса валют: передана пустая валюта'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ДатаКурса = НачалоДня(ДатаКурса);
	
	Если Не ЗначениеЗаполнено(БазоваяВалюта) Тогда
		БазоваяВалюта = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Валюта, ДатаКурса, БазоваяВалюта",
									   Валюта, ДатаКурса, БазоваяВалюта);
	РезультатПоиска = КэшКурсов.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() = 0 Тогда
		СтруктураКурса = ПолучитьКурсВалюты(Валюта, ДатаКурса, БазоваяВалюта);
		ЗаписьКэша = КэшКурсов.Добавить();
		ЗаписьКэша.Валюта = СтруктураПоиска.Валюта;
		ЗаписьКэша.ДатаКурса = СтруктураПоиска.ДатаКурса;
		ЗаписьКэша.БазоваяВалюта  = СтруктураПоиска.БазоваяВалюта;
		ЗаписьКэша.КурсЧислитель  = СтруктураКурса.КурсЧислитель;
		ЗаписьКэша.КурсЗнаменатель = СтруктураКурса.КурсЗнаменатель;
	Иначе
		СтруктураКурса = РезультатПоиска[0];
	КонецЕсли;
	
	Если СтруктураКурса.КурсЧислитель = 0 Или СтруктураКурса.КурсЗнаменатель = 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Получение курса валют: обнаружен нулевой курс валюты %1 относительно базовой валюты %2.'"), Валюта, БазоваяВалюта);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат 0;
	КонецЕсли;
	
	Возврат СтруктураКурса.КурсЧислитель / СтруктураКурса.КурсЗнаменатель;
	
КонецФункции // ПолучитьКурсВалютыИзКэша()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьДанныеКурсаЕЦБДляВалюты(ВыбраннаяВалюта, БазоваяВалюта) Экспорт
	
	ДанныеКурса = Новый Структура("ДатаКурса, КурсЧислитель, КурсЗнаменатель");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегКурсы.Период КАК Период,
	               |	РегКурсы.КурсЧислитель КАК КурсЧислитель,
	               |	РегКурсы.КурсЗнаменатель КАК КурсЗнаменатель
	               |ИЗ
	               |	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(
	               |			&ОкончаниеПериодаЗагрузки,
	               |			Валюта = &ВыбраннаяВалюта
	               |				И БазоваяВалюта = &БазоваяВалюта) КАК РегКурсы";
	Запрос.УстановитьПараметр("ВыбраннаяВалюта", ВыбраннаяВалюта);
	Запрос.УстановитьПараметр("БазоваяВалюта", БазоваяВалюта);
	Запрос.УстановитьПараметр("ОкончаниеПериодаЗагрузки", ТекущаяДатаСеанса());
	
	ВыборкаКурс = Запрос.Выполнить().Выбрать();
	ВыборкаКурс.Следующий();
	
	ДанныеКурса.ДатаКурса = ВыборкаКурс.Период;
	ДанныеКурса.КурсЧислитель = ВыборкаКурс.КурсЧислитель;
	ДанныеКурса.КурсЗнаменатель = ВыборкаКурс.КурсЗнаменатель;
	
	Возврат ДанныеКурса;
	
КонецФункции

Процедура ЗагрузитьАктуальныйКурсЕЦБ(ПараметрыЗагрузки = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаКурсовВалютЕЦБ);
	
	Если Метаданные.Обработки.Найти("ЗагрузкаКурсовВалютЕЦБ") <> Неопределено И ПолучитьФункциональнуюОпцию("ИспользоватьЗагрузкуКурсовВалютЕЦБ") Тогда
		Обработки["ЗагрузкаКурсовВалютЕЦБ"].ЗагрузитьАктуальныйКурс(ПараметрыЗагрузки, АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗапись(Приемник)
	
	Приемник.ДополнительныеСвойства.Вставить("СинхронизацияКурсовВалют");
	Приемник.Записать();
	
КонецПроцедуры

Процедура ОбновитьСинхронизируемыеКурсы(Источник, Приемник, ИмяРегистра, БазоваяВалюта)
	
	Период = Источник.Отбор.Период.Значение;
	Валюта = Источник.Отбор.Валюта.Значение;
	
	Если ЗначениеЗаполнено(Период) Тогда
		Приемник.Отбор.Период.Установить(Период);
	КонецЕсли;
	Если ЗначениеЗаполнено(Валюта) Тогда
		Приемник.Отбор.Валюта.Установить(Валюта);
	КонецЕсли;
	Если ЗначениеЗаполнено(БазоваяВалюта) Тогда
		Приемник.Отбор.БазоваяВалюта.Установить(БазоваяВалюта);
	КонецЕсли;
	
	Для Каждого ЗаписьИсточник Из Источник Цикл
		
		НоваяПриемник = Приемник.Добавить();
		НоваяПриемник.Период = ЗаписьИсточник.Период;
		НоваяПриемник.Валюта = ЗаписьИсточник.Валюта;
		
		Если ЗначениеЗаполнено(БазоваяВалюта) Тогда
			НоваяПриемник.БазоваяВалюта = БазоваяВалюта;
		КонецЕсли;
		
		Если ИмяРегистра = Метаданные.РегистрыСведений.КурсыВалют.Имя Тогда
			НоваяПриемник.Курс = ЗаписьИсточник.КурсЧислитель;
			НоваяПриемник.Кратность = ЗаписьИсточник.КурсЗнаменатель;
		Иначе
			НоваяПриемник.КурсЧислитель = ЗаписьИсточник.Курс;
			НоваяПриемник.КурсЗнаменатель = ЗаписьИсточник.Кратность;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыполнитьЗапись(Приемник);
	
КонецПроцедуры

Процедура УдалитьСинхронизируемыеКурсы(Источник, Приемник, БазоваяВалюта)
	
	Период = Источник.Отбор.Период.Значение;
	Валюта = Источник.Отбор.Валюта.Значение;
	
	Приемник.Отбор.Период.Установить(Период);
	Приемник.Отбор.Валюта.Установить(Валюта);
	Если ЗначениеЗаполнено(БазоваяВалюта) Тогда
		Приемник.Отбор.БазоваяВалюта.Установить(БазоваяВалюта);
	КонецЕсли;
	
	ВыполнитьЗапись(Приемник);
	
КонецПроцедуры

Функция ОтносительныеКурсыАктуальны(БазоваяВалюта) Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втВалюты
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
	|	И Валюты.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	втВалюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК ОтносительныеКурсыВалют
	|		ПО Валюты.Ссылка = ОтносительныеКурсыВалют.Валюта
	|			И (ОтносительныеКурсыВалют.Период = &ТекущаяДата)
	|			И (ОтносительныеКурсыВалют.БазоваяВалюта = &БазоваяВалюта)
	|ГДЕ
	|	ОтносительныеКурсыВалют.Валюта ЕСТЬ NULL";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("БазоваяВалюта", БазоваяВалюта);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

Функция ЗагружаемыеВалюты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
	|	И НЕ Валюты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюты.НаименованиеПолное";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция СписокЗависимыхВалют(ВалютаБазовая, ДополнительныеСвойства = Неопределено) Экспорт
	
	Кэшировать = (ТипЗнч(ДополнительныеСвойства) = Тип("Структура"));
	
	Если Кэшировать Тогда
		
		ЗависимыеВалюты = ДополнительныеСвойства.ЗависимыеВалюты.Получить(ВалютаБазовая);
		
		Если ТипЗнч(ЗависимыеВалюты) = Тип("ТаблицаЗначений") Тогда
			Возврат ЗависимыеВалюты;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпрВалюты.Ссылка,
	|	СпрВалюты.Наценка,
	|	СпрВалюты.СпособУстановкиКурса,
	|	СпрВалюты.ФормулаРасчетаКурса
	|ИЗ
	|	Справочник.Валюты КАК СпрВалюты
	|ГДЕ
	|	СпрВалюты.ОсновнаяВалюта = &ВалютаБазовая
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпрВалюты.Ссылка,
	|	СпрВалюты.Наценка,
	|	СпрВалюты.СпособУстановкиКурса,
	|	СпрВалюты.ФормулаРасчетаКурса
	|ИЗ
	|	Справочник.Валюты КАК СпрВалюты
	|ГДЕ
	|	СпрВалюты.ФормулаРасчетаКурса ПОДОБНО &СимвольныйКод";
	
	Запрос.УстановитьПараметр("ВалютаБазовая", ВалютаБазовая);
	Запрос.УстановитьПараметр("СимвольныйКод", "%" + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВалютаБазовая, "Наименование") + "%");
	
	ЗависимыеВалюты = Запрос.Выполнить().Выгрузить();
	
	Если Кэшировать Тогда
		
		ДополнительныеСвойства.ЗависимыеВалюты.Вставить(ВалютаБазовая, ЗависимыеВалюты);
		
	КонецЕсли;
	
	Возврат ЗависимыеВалюты;
	
КонецФункции

// См. подписку на событие "ПриЗаписиКурсовВалют"
Процедура ПриЗаписиКурсовВалютПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписьПриОбновленииИнформационнойБазы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("СинхронизацияКурсовВалют") Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСКурсамиВалютУТ.СинхронизоватьКурсыВалют(Источник);
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

#Область УстановкаКонстанты_БазоваяВалютаПоУмолчанию

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РаботаСКурсамиВалютУТ.БазоваяВалютаПоУмолчанию_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.7.141";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b733eecc-032c-4449-acaf-7947a4e3f604");
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает новую константу ""Базовая валюта по умолчанию"".'");
	
КонецПроцедуры

Процедура БазоваяВалютаПоУмолчанию_ОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт
	
	БазоваяВалютаПоУмолчанию = Константы.БазоваяВалютаПоУмолчанию.СоздатьМенеджерЗначения();
	БазоваяВалютаПоУмолчанию.Значение = Константы.ВалютаРегламентированногоУчета.Получить();
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(БазоваяВалютаПоУмолчанию);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
