#Область ПрограммныйИнтерфейс

#Область ИнтеграцияСБЭД

// См. ПодключаемыеКомандыЭДОСобытия.ПриОпределенииСоставаКомандЭДО.
Процедура ПриОпределенииСоставаКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Входящие.Добавить("Документ.АктПриемкиВходящийЕИС");
	
КонецПроцедуры

// Заполнить описание объекта учета.
// 
// Параметры:
//  ИсточникДанныхСсылка - СправочникСсылка, ДокументСсылка - ссылка на источник данных.
//  Описание - ТаблицаЗначений - см. ИнтеграцияЭДО.НовоеОписаниеОбъектаУчета.
// 
// Возвращаемое значение:
//  Булево - Истина, если это объект учета электронного актирования.
Функция ЗаполнитьОписаниеОбъектаУчета(ИсточникДанныхСсылка, Описание) Экспорт
	
	Результат = Ложь;
	
	Если НЕ ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ИсточникДанныхСсылка) = Тип("ДокументСсылка.АктПриемкиВходящийЕИС") Тогда

		СтрокаОписания = Описание.Добавить();
		
		СтрокаОписания.ОбъектУчета = ИсточникДанныхСсылка;
		
		Если ИсточникДанныхСсылка.ЭтоКорректировка Тогда
			СтрокаОписания.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД;
		Иначе
			СтрокаОписания.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД;
		КонецЕсли;
		
		СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Входящий;
		СтрокаОписания.Контрагент = ИсточникДанныхСсылка.Контрагент;
		СтрокаОписания.Организация = ИсточникДанныхСсылка.Организация;
			
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСБСП

// См. СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании.
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Документы.АктПриемкиВходящийЕИС);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Настройки обмена ЕИС для заказчика.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация заказчика.
// 
// Возвращаемое значение:
//  Неопределено, Структура - Настройки обмена ЕИС заказчика.
Функция НастройкиОбменаЕИСЗаказчика(Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменаЕИС.Организация КАК Организация,
	|	НастройкиОбменаЕИС.ТокенАвторизации КАК ТокенАвторизации,
	|	НастройкиОбменаЕИС.КодПоСПЗ КАК КодПоСПЗ,
	|	НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота КАК ИдентификаторУчастникаДокументооборота,
	|	НастройкиОбменаЕИС.ОбменВключен КАК ОбменВключен,
	|	ИСТИНА КАК ИспользоватьУПД,
	|	ИСТИНА КАК ИспользоватьУКД,
	|	НастройкиОбменаЕИС.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	НастройкиОбменаЕИС.ЛогинАльтернативнойИнтеграции,
	|	НастройкиОбменаЕИС.ПарольАльтернативнойИнтеграции
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков КАК НастройкиОбменаЕИС
	|ГДЕ
	|	НастройкиОбменаЕИС.Организация = &Организация";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выгрузить();
	
	Настройки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Выборка[0]);
	
	Возврат Настройки;
	
КонецФункции

// Текст запроса по настройкам для получения входящих.
// 
// Возвращаемое значение:
//  Строка - Текст запроса по настройкам для получения входящих.
Функция ТекстЗапросаПоНастройкамДляПолученияВходящих() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	НастройкиОбменаЕИС.Организация КАК Организация,
	|	НастройкиОбменаЕИС.ТокенАвторизации КАК ТокенАвторизации,
	|	НастройкиОбменаЕИС.КодПоСПЗ КАК КодПоСПЗ,
	|	НастройкиОбменаЕИС.ОбменВключен КАК ОбменВключен,
	|	НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота,
	|	НастройкиОбменаЕИС.ДатаПоследнегоПолученияДокументов КАК ДатаПоследнегоПолученияДокументов
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков КАК НастройкиОбменаЕИС";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст запроса есть возможность отправки получения ЭД.
// 
// Возвращаемое значение:
//  Строка -- Текст запроса есть возможность отправки получения ЭД.
Функция ТекстЗапросаЕстьВозможностьОтправкиПолученияЭД() Экспорт
	
	ТекстЗапроса = "////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменаЕИСДляЗаказчиков.Организация,
	|	НастройкиОбменаЕИСДляЗаказчиков.ДатаПоследнегоПолученияДокументов,
	|	НастройкиОбменаЕИСДляЗаказчиков.ИдентификаторУчастникаДокументооборота,
	|	НастройкиОбменаЕИСДляЗаказчиков.КодПоСПЗ,
	|	НастройкиОбменаЕИСДляЗаказчиков.НаименованиеОрганизации,
	|	НастройкиОбменаЕИСДляЗаказчиков.ОбменВключен,
	|	НастройкиОбменаЕИСДляЗаказчиков.ТокенАвторизации
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков КАК НастройкиОбменаЕИСДляЗаказчиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС КАК
	|			ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС
	|		ПО ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС.Значение = ИСТИНА
	|ГДЕ
	|	НастройкиОбменаЕИСДляЗаказчиков.ОбменВключен = ИСТИНА";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст запроса по настройкам заказчика.
// 
// Возвращаемое значение:
//  Строка - Текст запроса по настройкам заказчика.
Функция ТекстЗапросаПоНастройкамЗаказчика() Экспорт

	ТекстЗапросаПоНастройкамЗаказчика = "ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
	|	ОписанияОбъектовУчета.Организация КАК Отправитель,
	|	ОписанияОбъектовУчета.Контрагент КАК Получатель,
	|	ОписанияОбъектовУчета.ДоговорКонтрагента КАК Договор,
	|	ОписанияОбъектовУчета.Направление КАК Направление,
	|	ОписанияОбъектовУчета.ТипДокумента КАК ТипДокумента,
	|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
	|	ФорматыТиповДокументовЕИС.Формат КАК Формат,
	|	ЗНАЧЕНИЕ(Справочник.МаршрутыПодписания.ОднойДоступнойПодписью) КАК МаршрутПодписания,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСерверЕИС) КАК СпособОбмена,
	|	НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота КАК ИдентификаторОтправителя,
	|	КонтрагентыЕИС.ИдентификаторУчастника КАК ИдентификаторПолучателя,
	|	ЛОЖЬ КАК ТребуетсяОтветнаяПодпись,
	|	ЛОЖЬ КАК ТребуетсяИзвещениеОПолучении,
	|	ЛОЖЬ КАК ВыгружатьДополнительныеСведения,
	|	ИСТИНА КАК ОбменБезПодписи,
	|	ИСТИНА КАК Формировать,
	|	ЛОЖЬ КАК ЗаполнениеКодаТовара
	|ИЗ
	|	ОписанияОбъектовУчета КАК ОписанияОбъектовУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (Константы.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС = ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
	|		ПО ОписанияОбъектовУчета.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
	|		И ОписанияОбъектовУчета.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента
	|		И ОписанияОбъектовУчета.Направление <> &НаправлениеВнутренний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков КАК НастройкиОбменаЕИС
	|		ПО ОписанияОбъектовУчета.Организация = НастройкиОбменаЕИС.Организация
	|		И НастройкиОбменаЕИС.ОбменВключен = ИСТИНА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрагентыЕИС КАК КонтрагентыЕИС
	|		ПО ОписанияОбъектовУчета.Контрагент = КонтрагентыЕИС.Контрагент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФорматыТиповДокументовЕИС КАК ФорматыТиповДокументовЕИС
	|		ПО ФорматыТиповДокументовЕИС.ТипДокумента = ОписанияОбъектовУчета.ТипДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ПО ОписанияОбъектовУчета.ОбъектУчета = ОбъектыУчетаДокументовЭДО.ОбъектУчета
	|		И ВидыДокументовЭДО.Ссылка = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента
	|		И ОписанияОбъектовУчета.Контрагент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Контрагент
	|		И ОписанияОбъектовУчета.ДоговорКонтрагента = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ДоговорКонтрагента";
	
	Возврат ТекстЗапросаПоНастройкамЗаказчика;
	
КонецФункции


// Найти создать документ приемки.
// См. ЭлектронноеАктированиеЕИСПолучениеВходящих.СохранитьДанныеОбъектаВБД.
Функция НайтиСоздатьДокументПриемки(ДеревоДляСовместимостиСБЭД, ДеревоРазбора, ПараметрыОбработки, НайденныйОбъект) Экспорт
	
	ДокументПриемки = НайденныйОбъект;
	
	ЭлектронныйДокумент = ПараметрыОбработки.ЭлектронныйДокумент;
	
	ИдентификаторДокумента = Прав(ПараметрыОбработки.ДанныеОсновногоФайла.ИмяФайла, 40);
	ИдентификаторДокумента = Лев(ИдентификаторДокумента, 36);
			
	Если НЕ ЗначениеЗаполнено(ДокументПриемки) Тогда
		РезультатПоиска = Документы.АктПриемкиВходящийЕИС.НайтиПоРеквизиту(
			"ИдентификаторДокумента", ИдентификаторДокумента);
		Если НЕ ЗначениеЗаполнено(РезультатПоиска) Тогда
			ДокументОбъект = Документы.АктПриемкиВходящийЕИС.СоздатьДокумент();
		Иначе
			ДокументОбъект = РезультатПоиска.ПолучитьОбъект();
		КонецЕсли;
	Иначе
		ДокументОбъект = ДокументПриемки.ПолучитьОбъект();
	КонецЕсли;
	
	ДокументОбъект.ДатаЭлектронногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоРазбора, "ДатаДокумента");
	ДокументОбъект.НомерЭлектронногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоРазбора, "НомерДокумента");
	ДокументОбъект.Организация = ПараметрыОбработки.Получатель;
	ДокументОбъект.Контрагент = ПараметрыОбработки.Отправитель;
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	
	ЗаполнитьАктПриемкиНаОснованииПриложения(ДокументОбъект, ЭлектронныйДокумент);
	
	ДокументОбъект.Записать();
	
	Если НЕ ЗначениеЗаполнено(ДокументПриемки) Тогда
		ДокументПриемки = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	ИзвлечьПриложенияДокументаПриемки(ЭлектронныйДокумент, ДокументПриемки);
	
	Возврат ДокументПриемки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Преобразует значение в Массив в случае необходимости.
// Для типов Массив, ТаблицаЗначений, СписокXDTO возвращается исходый объект.
Функция ЗначениеВКоллекцию(Значение)
	
	Если ТипЗнч(Значение) <> Тип("Массив")
		И ТипЗнч(Значение) <> Тип("ТаблицаЗначений")
		И ТипЗнч(Значение) <> Тип("СписокXDTO") Тогда
		Коллекция = Новый Массив;
		Коллекция.Добавить(Значение);
		Возврат Коллекция;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Процедура ЗаполнитьАктПриемкиНаОснованииПриложения(ДокументОбъект, ЭлектронныйДокумент)
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент);
	
	ТаблицаФайловЭлектронныхДокументов = 
		ЭлектронныеДокументыЭДО.ПрисоединенныеФайлыЭлектронныхДокументов(ЭлектронныеДокументы); 
	
	МассивСообщений = ТаблицаФайловЭлектронныхДокументов.ВыгрузитьКолонку("СообщениеЭДО");
	
	// Получение сообщений относящихся к приложениям ЕИС 
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СообщениеЭДО.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|ГДЕ
	|	СообщениеЭДО.Ссылка В (&МассивСообщений)
	|	И СообщениеЭДО.ТипЭлементаРегламента В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ПриложениеУПДДляЕИС),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ПриложениеУКДДляЕИС))
	|	И Не СообщениеЭДО.ПометкаУдаления");
	Запрос.УстановитьПараметр("МассивСообщений", МассивСообщений);
	
	МассивСообщений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если МассивСообщений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПрисоединенныйФайл = ТаблицаФайловЭлектронныхДокументов.Найти(МассивСообщений[0], "СообщениеЭДО");
	Если СтрокаПрисоединенныйФайл = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	ПрисоединенныйФайл = СтрокаПрисоединенныйФайл.ПрисоединенныйФайл;
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	СодержимоеПакета = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные, 
		ЭлектронноеАктированиеЕИС.КодировкаТекстаСервисаЕИС());
		
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СодержимоеПакета);
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.Имя = ЭлектронноеАктированиеЕИС.ИмяТипаXDTOПриложениеУКДПродавца() Тогда
		
		ДокументОбъект.ЭтоКорректировка = Истина;	
		Возврат;
		 	
	КонецЕсли;
	
	ЧтениеXML.ПервоеОбъявление();
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Если ТипЗнч(ОбъектXDTO.СведТов.СведТРУ) <> Тип("СписокXDTO") Тогда
		СведенияОТоварах = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектXDTO.СведТов.СведТРУ);
	Иначе
		СведенияОТоварах = ОбъектXDTO.СведТов.СведТРУ;
	КонецЕсли;
			 
	Для Каждого СтрокаСведенийОТоварах Из СведенияОТоварах Цикл
		НоваяСтрока = ДокументОбъект.ТРУОбъектовЗакупки.Добавить();
			
		Если СтрокаСведенийОТоварах.Свойства().Получить("НедеталТРУ") <> Неопределено Тогда
			НедеталТРУ = СтрокаСведенийОТоварах.НедеталТРУ;
			НоваяСтрока.Идентификатор = НедеталТРУ.ИдТРУ;
			НоваяСтрока.Наименование = НедеталТРУ.НаимТовИсх;
			
			Если НедеталТРУ.Свойства().Получить("НеЛПСвед") <> Неопределено Тогда
				НеЛПСвед = НедеталТРУ.НеЛПСвед;
				
				Если НеЛПСвед.Свойства().Получить("ЦенаИзКонтСНДС") <> Неопределено Тогда
					ЦенаИзКонтракта = XMLЗначение(Тип("Число"), НеЛПСвед.ЦенаИзКонтСНДС);
				Иначе
					ЦенаИзКонтракта = 0;
				КонецЕсли;
				
				Если НеЛПСвед.Свойства().Получить("СведПоставкиТов") <> Неопределено Тогда
					НоваяСтрока.Количество = XMLЗначение(Тип("Число"), НеЛПСвед.СведПоставкиТов.ПостКол);
					НоваяСтрока.Всего = ЦенаИзКонтракта * НоваяСтрока.Количество;
				Иначе
					НоваяСтрока.Всего = ЦенаИзКонтракта;	 
				КонецЕсли;
				 
				Если НеЛПСвед.Свойства().Получить("ОбРабУсл") <> Неопределено Тогда
					НоваяСтрока.ОбъемРаботыУслуги = НеЛПСвед.ОбРабУсл; 	
				КонецЕсли;
			КонецЕсли;
			 
		Иначе
			// Сведения о детализированных ТРУ
		КонецЕсли;
		
	КонецЦикла;
				
КонецПроцедуры

// Извлечь приложения документа приемки.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Электронный документ.
//  ДокументПриемки - ДокументСсылка.АктПриемкиВходящийЕИС - Документ приемки.
Процедура ИзвлечьПриложенияДокументаПриемки(ЭлектронныйДокумент, ДокументПриемки)

	ЗапросПоКонтейнерам = Новый Запрос;
	ЗапросПоКонтейнерам.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПакетЭДПрисоединенныеФайлы.Ссылка КАК ПрисоединенныеФайлПакета,
	|	ПакетЭДПрисоединенныеФайлы.Наименование КАК ПрисоединенныеФайлПакетаНаименование,
	|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭДПрисоединенныеФайл,
	|	ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер КАК ТранспортныйКонтейнер,
	|	ТранспортныйКонтейнерЭДОПрисоединенныеФайлы.Ссылка КАК ФайлКонтейнера
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортныхКонтейнеровЭДО КАК ОбъектыТранспортныхКонтейнеровЭДО
	|		ПО (СообщениеЭДО.Ссылка = ОбъектыТранспортныхКонтейнеровЭДО.Объект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПакетЭДПрисоединенныеФайлы
	|		ПО (СообщениеЭДО.Ссылка = ПакетЭДПрисоединенныеФайлы.ВладелецФайла)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы КАК
	|			ТранспортныйКонтейнерЭДОПрисоединенныеФайлы
	|		ПО (ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер = ТранспортныйКонтейнерЭДОПрисоединенныеФайлы.ВладелецФайла)
	|ГДЕ
	|	СообщениеЭДО.ЭлектронныйДокумент.Ссылка = &ЭлектронныйДокумент
	|	И СообщениеЭДО.ТипЭлементаРегламента = &ТипЭлементаРегламента";
	
	ЗапросПоКонтейнерам.УстановитьПараметр("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ЗапросПоКонтейнерам.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Контейнеры = ЗапросПоКонтейнерам.Выполнить().Выгрузить();
	Если Контейнеры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Контейнер = Контейнеры[0].ФайлКонтейнера;
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(Контейнер);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	СодержимоеПакета = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные, 
		ЭлектронноеАктированиеЕИС.КодировкаТекстаСервисаЕИС());
	
	ЧтениеФайла = Новый ЧтениеXML;
	ЧтениеФайла.УстановитьСтроку(СодержимоеПакета);
	ДанныеКонтейнера = ФабрикаXDTO.ПрочитатьXML(ЧтениеФайла);
	ЧтениеФайла.Закрыть();
	
	Если НЕ ЭлектронноеАктированиеЕИС.ЕстьСвойство(ДанныеКонтейнера, "Вложен") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = ЭлектронноеАктированиеЕИС.НастройкиОбменаЕИСЗаказчика(ДокументПриемки.Организация);
	Если ЗначениеЗаполнено(Настройки) Тогда
		Токен = Настройки.ТокенАвторизации;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не определены настройки подключения к личному кабинету ЕИС заказчика.'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("user_token", Токен);
	ПараметрыЗагрузкиФайла = Новый Структура("ФорматОтвета", 2);
	ПараметрыЗагрузкиФайла.Вставить("Заголовки", Заголовки);
	
	Для Каждого Вложение Из ЗначениеВКоллекцию(ДанныеКонтейнера.Вложен) Цикл
		
		Ссылка = Вложение.Ссылка;
		РезультатЗагрузки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			Ссылка, , , ПараметрыЗагрузкиФайла);
		Если НЕ ЗначениеЗаполнено(РезультатЗагрузки.КодОшибки) Тогда
			
			// Добавляем вложение в присоединенные файлы документа.
			Содержимое = РезультатЗагрузки.Содержимое;
			
			ИмяРасширениеФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Вложение.ИмяФайл);
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайла.Автор = Пользователи.АвторизованныйПользователь();
			ПараметрыФайла.ВладелецФайлов = ДокументПриемки;
			ПараметрыФайла.ИмяБезРасширения = ИмяРасширениеФайла.Имя;
			ПараметрыФайла.РасширениеБезТочки = ИмяРасширениеФайла.Расширение;
			АдресДанных = ПоместитьВоВременноеХранилище(Содержимое);
			
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресДанных);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти