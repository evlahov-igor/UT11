#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваБезналичные);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВКассахККМ);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВПути);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваНаличные);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыПоЭквайрингу);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваБезналичные);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВКассахККМ);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВПути);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваНаличные);
		
	КонецЕсли;
	// Контроль даты запрета
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваБезналичные);
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВКассахККМ);
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваВПути);
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваНаличные);
	КонецЕсли;
		
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДенежныеСредстваБезналичные;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
		ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДенежныеСредстваВКассахККМ;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДенежныеСредстваВПути;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДенежныеСредстваНаличные;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.РасчетыПоЭквайрингу;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам учета денежных средств.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ДенежныеСредстваБезналичные");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ДенежныеСредстваВКассахККМ");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ДенежныеСредстваВПути");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ДенежныеСредстваНаличные");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РасчетыПоЭквайрингу");
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийДенежныеСредстваБезналичные", 
		РегистрыНакопления.ДенежныеСредстваБезналичные.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийДенежныеСредстваВКассахККМ", 
		РегистрыНакопления.ДенежныеСредстваВКассахККМ.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийДенежныеСредстваВПути", 
		РегистрыНакопления.ДенежныеСредстваВПути.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийДенежныеСредстваНаличные", 
		РегистрыНакопления.ДенежныеСредстваНаличные.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

#КонецОбласти

#Область УправлениеИнтерфейснымиЭлементами

// Процедура устанавливает видимость элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается видимость
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть видны на форме.
//
Процедура УстановитьВидимостьЭлементовПоМассиву(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(ЭлементМассива, ".", "");
		
		// Если реквизита нет в массиве видимых реквизитов, снимаем видимость элемента формы.
		ВидимостьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
		 И Элементы[ИмяРеквизита].Видимость <> ВидимостьРеквизита Тогда
			Элементы[ИмяРеквизита].Видимость = ВидимостьРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьЭлементовПоМассиву()

// Процедура устанавливает видимость элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается видимость
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть видны на форме
//	ИмяТЧ - Строка - Имя табличной части, текущая строка которой выводится в виде отдельных реквизитов
//	ИмяЗаменыТЧ - Строка - Наименование подстроки замены наименования реквизитов табличной части.
//
Процедура УстановитьВидимостьЭлементовПоМассивуРасширенный(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов,
	Знач ИмяТЧ, Знач ИмяЗаменыТЧ) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(СтрЗаменить(ЭлементМассива, ИмяТЧ, ИмяЗаменыТЧ), ".", "");
		
		ВидимостьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
			И Элементы[ИмяРеквизита].Видимость <> ВидимостьРеквизита Тогда
			Элементы[ИмяРеквизита].Видимость = ВидимостьРеквизита;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает доступность элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы.
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается доступность.
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть доступны на форме.
//
Процедура УстановитьДоступностьЭлементовПоМассиву(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	МассивВсехЭлементов = НазванияЭлементовФорм(Элементы, МассивВсехРеквизитов);
	МассивВидимыхЭлементов = НазванияЭлементовФорм(Элементы, МассивВидимыхРеквизитов);
	
	Для Каждого ИмяРеквизита Из МассивВсехЭлементов Цикл
		
		// Если элемента нет в массиве видимых элементов, снимаем видимость элемента формы.
		ДоступностьРеквизита = (МассивВидимыхЭлементов.Найти(ИмяРеквизита) <> Неопределено);
		
		ЭлементФормы = Элементы[ИмяРеквизита]; // ПолеФормы
		
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
			И ЭлементФормы.Доступность <> ДоступностьРеквизита Тогда
				ЭлементФормы.Доступность = ДоступностьРеквизита;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает видимость подбора по остаткам расчетов в форме.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	Кнопка - КнопкаФормы - Кнопка формы для открытия подбора.
//
Процедура УстановитьВидимостьПодбораПоОстаткамРасчетов(ХозяйственнаяОперация, Кнопка) Экспорт
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	
	Кнопка.Видимость = (МассивОпераций.Найти(ХозяйственнаяОперация) <> Неопределено);
	
КонецПроцедуры // УстановитьВидимостьПодбораПоОстаткамРасчетов()

Процедура УправлениеЭлементамиФормыПриЧтенииСозданииНаСервере(Форма) Экспорт

	ИмяОбъекта = "";
	Если Форма.Параметры.Свойство("Ключ") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Форма.Параметры.Ключ));
		Если ОбъектМетаданных <> Неопределено Тогда
			ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
		КонецЕсли;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИмяОбъекта) Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось выполнить настройку полей формы'");
	КонецЕсли;

	НастройкиПолейФормы = ИнициализироватьНастройкиПолейФормы();
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяОбъекта);
	Менеджер.ЗаполнитьНастройкиПолейФормы(НастройкиПолейФормы);

	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "НастройкиПолей") Тогда
		Реквизиты = Новый Массив;
		Реквизиты.Добавить(Новый РеквизитФормы("НастройкиПолей", Новый ОписаниеТипов("ТаблицаЗначений")));
		Реквизиты.Добавить(Новый РеквизитФормы("Поля", Новый ОписаниеТипов(), "НастройкиПолей"));
		Реквизиты.Добавить(Новый РеквизитФормы("Условие", Новый ОписаниеТипов("ОтборКомпоновкиДанных"), "НастройкиПолей"));
		Реквизиты.Добавить(Новый РеквизитФормы("Свойства", Новый ОписаниеТипов(), "НастройкиПолей"));
		Форма.ИзменитьРеквизиты(Реквизиты);
	КонецЕсли;
	Форма.ЗначениеВРеквизитФормы(НастройкиПолейФормы, "НастройкиПолей");

	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЗависимостиПолей") Тогда
		Реквизиты = Новый Массив;
		Реквизиты.Добавить(Новый РеквизитФормы("ЗависимостиПолей", Новый ОписаниеТипов("ТаблицаЗначений")));
		Реквизиты.Добавить(Новый РеквизитФормы("ИмяРеквизита", Новый ОписаниеТипов("Строка"), "ЗависимостиПолей"));
		Реквизиты.Добавить(Новый РеквизитФормы("ЗависимыеПоля", Новый ОписаниеТипов(), "ЗависимостиПолей"));
		Форма.ИзменитьРеквизиты(Реквизиты);
	КонецЕсли;
	ЗависимостиПолейФормы = ЗависимостиПолейФормы(НастройкиПолейФормы);
	Форма.ЗначениеВРеквизитФормы(ЗависимостиПолейФормы, "ЗависимостиПолей");

КонецПроцедуры

Функция ЗависимостиПолейФормы(НастройкиПолей) Экспорт
	
	ЗависимостиПолей = ИнициализироватьЗависимостиПолейФормы();
	
	Для каждого СтрокаНастройки Из НастройкиПолей Цикл
		
		Реквизиты = Новый Массив;
		ЗаполнитьРеквизитыПоОтбору(СтрокаНастройки.Условие, Реквизиты);
		
		Для каждого Реквизит Из Реквизиты Цикл
			ПозТочки = СтрНайти(Реквизит, ".");
			Если ПозТочки = 0 Тогда
				ИмяРеквизита = Реквизит;
			Иначе
				ИмяРеквизита = Сред(Реквизит, ПозТочки + 1);
			КонецЕсли;
			СтрокаТаблицы = ЗависимостиПолей.Найти(ИмяРеквизита, "ИмяРеквизита");
			Если СтрокаТаблицы = Неопределено Тогда
				СтрокаТаблицы = ЗависимостиПолей.Добавить();
				СтрокаТаблицы.ИмяРеквизита = ИмяРеквизита;
			КонецЕсли;
			Для каждого Поле Из СтрокаНастройки.Поля Цикл
				СтрокаТаблицы.ЗависимыеПоля.Добавить(Поле);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЗависимостиПолей;
	
КонецФункции

// Дабавляет реквизиты в массив непроверяемых, если свойства элемента не позволяют проверить реквизит
//
// Параметры:
//    СвойстваЭлементов - Массив - свойства элементов
//    МассивНепроверяемыхРеквизитов - Массив - непроверяемые реквизиты
Процедура ОтключитьПроверкуЗаполненияРеквизитовОбъекта(СвойстваЭлементов, МассивНепроверяемыхРеквизитов) Экспорт
	
	Для каждого СвойстваЭлемента Из СвойстваЭлементов Цикл
		Если ЗначениеЗаполнено(СвойстваЭлемента.ИмяЭлемента)
			И (СвойстваЭлемента.Свойство = "Видимость"
				Или СвойстваЭлемента.Свойство = "ТолькоПросмотр"
				Или СвойстваЭлемента.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного"
				Или СвойстваЭлемента.Свойство = "ОтметкаНезаполненного"
				Или СвойстваЭлемента.Свойство = "АвтоОтметкаНезаполненного") Тогда
			
			Если (СвойстваЭлемента.Свойство = "Видимость"
				Или СвойстваЭлемента.Свойство = "ОтметкаНезаполненного"
				Или СвойстваЭлемента.Свойство = "АвтоОтметкаНезаполненного")
					И СвойстваЭлемента.Значение = Ложь
				Или СвойстваЭлемента.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного"
					И СвойстваЭлемента.Значение = Истина
				Или СвойстваЭлемента.Свойство = "ТолькоПросмотр"
					И СвойстваЭлемента.Значение = Истина Тогда
					
				МассивНепроверяемыхРеквизитов.Добавить(СвойстваЭлемента.ИмяЭлемента);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеРеквизитыОбъекта(Объект, СвойстваЭлементов, РеквизитыИсключения = Неопределено) Экспорт
	
	Реквизиты = Объект.Метаданные().Реквизиты;
	ТабличныеЧасти = Объект.Метаданные().ТабличныеЧасти;
	
	Для каждого СвойстваЭлемента Из СвойстваЭлементов Цикл
		
		Если РеквизитыИсключения <> Неопределено
			И РеквизитыИсключения.Найти(СвойстваЭлемента.ИмяЭлемента) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвойстваЭлемента.ИмяЭлемента)
			И СвойстваЭлемента.Свойство = "Видимость"
			И Не СвойстваЭлемента.Значение Тогда
		
			Если Реквизиты.Найти(СвойстваЭлемента.ИмяЭлемента) <> Неопределено
				И ЗначениеЗаполнено(Объект[СвойстваЭлемента.ИмяЭлемента]) Тогда
				
				Объект[СвойстваЭлемента.ИмяЭлемента] = Неопределено;
				
			ИначеЕсли ТабличныеЧасти.Найти(СвойстваЭлемента.ИмяЭлемента) <> Неопределено
				И Объект[СвойстваЭлемента.ИмяЭлемента].Количество() Тогда
				
				Объект[СвойстваЭлемента.ИмяЭлемента].Очистить();
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пустую таблицу настроек полей формы
// 
// Возвращаемое значение:
//     ТаблицаЗначений - таблица с колонками:
//         * Поля - Массив из Строка - Поля, для которых действует настройка.
//         * Условие - ОтборКомпоновкиДанных - Определяет действительность настройки.
//         * Свойства - Структура - Свойства полей.
//
Функция ИнициализироватьНастройкиПолейФормы() Экспорт
	
	НастройкиПолейФормы = Новый ТаблицаЗначений;
	НастройкиПолейФормы.Колонки.Добавить("Поля", Новый ОписаниеТипов("Массив"));
	НастройкиПолейФормы.Колонки.Добавить("Условие", Новый ОписаниеТипов("ОтборКомпоновкиДанных"));
	НастройкиПолейФормы.Колонки.Добавить("Свойства", Новый ОписаниеТипов("Структура"));
	
	Возврат НастройкиПолейФормы;
	
КонецФункции

// Инициализирует табличную часть для отображения одной строкой или несколькими
// 
// Параметры:
//     Форма - ФормаКлиентскогоПриложения - Форма.
//     ИмяТЧ - Строка - Имя таблично части.
//     Переключатель - Число - Флаг взведения переключателя.
//
Процедура ИнициализироватьТабличнуюЧасть(Форма, ИмяТЧ, Переключатель) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект[ИмяТЧ].Количество() = 0 Тогда
		НоваяСтрока = Объект[ИмяТЧ].Добавить();
		ЭлементФормы = Элементы[ИмяТЧ]; // ТаблицаФормы
		ЭлементФормы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Переключатель = 0;
	ИначеЕсли Объект[ИмяТЧ].Количество() = 1 Тогда
		ЭлементФормы = Элементы[ИмяТЧ]; // ТаблицаФормы
		ЭлементФормы.ТекущаяСтрока = Объект[ИмяТЧ][0].ПолучитьИдентификатор();
		Переключатель = 0;
	Иначе
		Переключатель = 1;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет настройки данные настроек для банковских счетов
//
// Параметры:
//	Настройки - ТаблицаЗначений - таблица с колонками:
//		* Поля - Массив - поля, для которых определяются настройки отображения
//		* Условие - ОтборКомпоновкиДанных - условия применения настройки
//		* Свойства - Структура - имена и значения свойств
// 
Процедура НастройкиЭлементовБанков(Настройки) Экспорт
	
	Финансы = ФинансоваяОтчетностьСервер;
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ОтступРеквизитыБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользуетсяБанкДляРасчетов", Истина);
	Элемент.Свойства.Вставить("Ширина", 12);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ОтступРеквизитыБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользуетсяБанкДляРасчетов", Ложь);
	Элемент.Свойства.Вставить("Ширина", 9);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанкДляРасчетовВГруппе");
	Финансы.НовыйОтбор(Элемент.Условие, "РучноеИзменениеРеквизитовБанкаДляРасчетов", Ложь);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СчетВБанкеДляРасчетов");
	Элемент.Поля.Добавить("БИКБанкаДляРасчетов");
	Элемент.Поля.Добавить("НаименованиеБанкаДляРасчетовМеждународное");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользуетсяБанкДляРасчетов", Истина);
	Элемент.Свойства.Вставить("Доступность");

	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГруппаВыборБанкаДляРасчетов");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользуетсяБанкДляРасчетов", Истина);
	Элемент.Свойства.Вставить("Видимость");

	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НомерСчета");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.МеждународныеРеквизитыБанковскихСчетов", Истина);
	Элемент.Свойства.Вставить("Маска", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БИКБанка");
	Элемент.Поля.Добавить("БИКБанкаПоСсылке");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'БИК'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БИКБанка");
	Элемент.Поля.Добавить("БИКБанкаПоСсылке");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Истина);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Код'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БИКБанкаДляРасчетов");
	Элемент.Поля.Добавить("БИКБанкаДляРасчетовПоСсылке");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'БИК'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БИКБанкаДляРасчетов");
	Элемент.Поля.Добавить("БИКБанкаДляРасчетовПоСсылке");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Истина);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Код'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КоррСчетБанка");
	Элемент.Поля.Добавить("КоррСчетБанкаДляРасчетов");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СчетВБанкеДляРасчетов");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Ложь);
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЭтоIBAN");
	Финансы.НовыйОтбор(Элемент.Условие, "СтранаБанка", Справочники.СтраныМира.Россия);
	Элемент.Свойства.Вставить("Доступность", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтранаБанкаМеждународный");
	Элемент.Поля.Добавить("СтранаБанкаМеждународныйПоСсылке");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.НациональныеРеквизитыБанковскихСчетов", Истина);
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЭтоIBAN");
	Элемент.Поля.Добавить("ГруппаБанкМеждународный");
	Элемент.Поля.Добавить("ГруппаБанкМеждународныйПоСсылке");
	Элемент.Поля.Добавить("ГруппаБанкДляРасчетовМеждународный");
	Элемент.Поля.Добавить("ГруппаБанкДляРасчетовМеждународныйПоСсылке");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.МеждународныеРеквизитыБанковскихСчетов", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГруппаБанкМеждународный");
	Элемент.Поля.Добавить("ГруппаБанкМеждународныйПоСсылке");
	Элемент.Поля.Добавить("ГруппаБанкДляРасчетовМеждународный");
	Элемент.Поля.Добавить("ГруппаБанкДляРасчетовМеждународныйПоСсылке");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.НациональныеРеквизитыБанковскихСчетов", Истина);
	Элемент.Свойства.Вставить("ОтображатьЗаголовок");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГруппаБанк");
	Элемент.Поля.Добавить("ГруппаБанкПоСсылке");
	Элемент.Поля.Добавить("ГруппаБанкДляРасчетов");
	Элемент.Поля.Добавить("ГруппаБанкДляРасчетовПоСсылке");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.МеждународныеРеквизитыБанковскихСчетов", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.НациональныеРеквизитыБанковскихСчетов", Истина);
	Элемент.Свойства.Вставить("ОтображатьЗаголовок", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГруппаБанк");
	Элемент.Поля.Добавить("ГруппаБанкПоСсылке");
	Элемент.Поля.Добавить("ГруппаБанкДляРасчетов");
	Элемент.Поля.Добавить("ГруппаБанкДляРасчетовПоСсылке");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.НациональныеРеквизитыБанковскихСчетов", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КоррСчетБанкаДляРасчетовМеждународный");
	Элемент.Поля.Добавить("КоррСчетБанкаДляРасчетовМеждународныйПоСсылке");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.НациональныеРеквизитыБанковскихСчетов", Истина);
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтранаБанкаДляРасчетовМеждународный");
	Элемент.Поля.Добавить("СтранаБанкаДляРасчетовМеждународныйПоСсылке");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.НациональныеРеквизитыБанковскихСчетов", Истина);
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
КонецПроцедуры

// Управляет элементами формы в режиме "без разбиения"
// 
// Параметры:
//     Форма - ФормаКлиентскогоПриложения - Форма.
//
Процедура УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.РасшифровкаПлатежа.Количество() Тогда
		
		ТекСтрока = Объект.РасшифровкаПлатежа[0];
		
		ТипДокумента = ТипЗнч(Объект.Ссылка);
		СписокХозОперацияПродажи = ПолучитьСписокХозяйственныхОперацийПродажДляДокумента(ТипДокумента);
		СписокХозОперацийЗакупки = ПолучитьСпосокХозяйственныхОперацийЗакупкиДляДокумента(ТипДокумента);
		СписокХозОперацийВозврата = ПолучитьСпосокХозяйственныхОперацийВозвратаДляДокумента(ТипДокумента);
		СписокНалогообложенийБезНДС = УчетНДСУПКлиентСервер.ТипыНалогообложенияСкрывающиеРеквизитыНДС();
		
		ТолькоПросмотрПартнераВалюты = ТекСтрока.Свойство("ОбъектРасчетов") И ЗначениеЗаполнено(ТекСтрока.ОбъектРасчетов)
			Или ТекСтрока.Свойство("ДоговорКредитаДепозита") И ЗначениеЗаполнено(ТекСтрока.ДоговорКредитаДепозита);
			
		РазрешенаРаботаСДочернимиПартнерами = Ложь;
		Если ТекСтрока.Свойство("ОбъектРасчетов") И ЗначениеЗаполнено(ТекСтрока.ОбъектРасчетов) Тогда
			ОбъектРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.ОбъектРасчетов, "Объект");
			Если ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				РазрешенаРаботаСДочернимиПартнерами = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРасчетов, "РазрешенаРаботаСДочернимиПартнерами");
			КонецЕсли;
		КонецЕсли;
		
		ОбъектНалогообложенияНеСовпадаетСДокументом = ТекСтрока.Свойство("ОбъектРасчетов") И ЗначениеЗаполнено(ТекСтрока.ОбъектРасчетов)
			И НЕ Объект.Ссылка = ОбъектРасчетов;
		
		СкрытьНалогообложениеНДС = ОбъектНалогообложенияНеСовпадаетСДокументом
			Или (СписокХозОперацияПродажи.Найти(Объект.ХозяйственнаяОперация) = Неопределено
				И СписокХозОперацийЗакупки.Найти(Объект.ХозяйственнаяОперация) = Неопределено)
			Или Не СписокХозОперацийВозврата.Найти(Объект.ХозяйственнаяОперация) = Неопределено;
		СкрытьНалогообложениеНДСВозврата = ОбъектНалогообложенияНеСовпадаетСДокументом
			Или СписокХозОперацийВозврата.Найти(Объект.ХозяйственнаяОперация) = Неопределено;
			
		Элементы.РасшифровкаБезРазбиенияПартнер.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты И НЕ РазрешенаРаботаСДочернимиПартнерами;
		Элементы.РасшифровкаБезРазбиенияВалютаВзаиморасчетов.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		Элементы.РасшифровкаБезРазбиенияНалогообложениеНДС.Видимость = НЕ СкрытьНалогообложениеНДС;
		Элементы.РасшифровкаБезРазбиенияНалогообложениеНДСВозврата.Видимость = Не СкрытьНалогообложениеНДСВозврата; 
			
		НалогообложениеБезНДС = ?(СписокНалогообложенийБезНДС.Найти(ТекСтрока.НалогообложениеНДС) = Неопределено
			Или НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС), Ложь, Истина);
			
		Элементы.РасшифровкаБезРазбиенияСтавкаНДС.ТолькоПросмотр = НалогообложениеБезНДС;
		Элементы.РасшифровкаБезРазбиенияСуммаНДС.ТолькоПросмотр = НалогообложениеБезНДС;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ВидимостьОпераций

// Процедура устанавливает видимость выбора оплаты платежной картой в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора формы оплаты.
//
Процедура УстановитьВидимостьОплатыПлатежнойКартой(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ФормыОплаты.ПлатежнаяКарта);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению("ПлатежнаяКарта");
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции поступления из другой кассы
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийПередачиМеждуКассами(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
		
		Для каждого ХозяйственнаяОперация Из МассивОпераций Цикл
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции перечисления на другой счет
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийПеречисленияНаДругойСчет(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета);
		
		Для каждого ХозяйственнаяОперация Из МассивОпераций Цикл
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций с кассами ККМ в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийСКассамиККМ(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций оплаты ДС в другую организацию в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийПередачиМеждуОрганизациями(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
		
		Для каждого ХозяйственнаяОперация Из МассивОпераций Цикл
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций внутренней передачи ДС в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийВнутреннейПередачи(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций оплаты ДС по договорам кредитов и депозитов.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПереоценкаФинансовыхИнструментов);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам);
		
		Для каждого ХозяйственнаяОперация Из МассивОпераций Цикл
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииКонвертацияВалютыНаличные(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииКонвертацияВалютыБезналичные(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииКонвертацияВалюты(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций по зарплате в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииПоЗарплате(Поле) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		
		МассивОперацийПоЗарплате = Новый Массив;
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС);
		
		Для каждого Элемент Из МассивОперацийПоЗарплате Цикл
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Элемент);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций эквайринга в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийЭквайринга(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций выдачи и погашения займов сотрудникам в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийЗаймамСотрудникам(Поле) Экспорт
	
	ОперацииПоЗаймамДоступны = Не ПолучитьФункциональнуюОпцию("УправлениеТорговлей");

	Если Не ОперацииПоЗаймамДоступны Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "ПрочееПоступлениеДенежныхСредств" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииПрочееПоступлениеДенежныхСредств(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "ПрочаяВыдачаДенежныхСредств" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииПрочаяВыдачаДенежныхСредств(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Оплата арендодателю" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииОплатаАрендодателю(Поле) Экспорт
	
	ИспользоватьАренду = Ложь;
	Если Не ИспользоватьАренду Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ОплатаАрендодателю);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтАрендодателя);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура устанавливает заголовок колонки "Сумма платежа".
//
// Параметры:
//    Валюта - СправочникСсылка.Валюты - Валюта документа
//    Элементы - ВсеЭлементыФормы - Коллекция элементов управляемой формы
//    ЭлементыКИзменению - Массив - Имена элементов формы для изменения заголовка
//
Процедура УстановитьЗаголовокСуммыПлатежа(Валюта, Элементы, ЭлементыКИзменению = Неопределено) Экспорт
	
	ЭлементФормы = Элементы.РасшифровкаПлатежаСумма; // ПолеФормы
	ЭлементФормы.Заголовок = СтрШаблон(НСтр("ru = 'Сумма (%1)'"), Строка(Валюта));
	
	Если Элементы.Найти("РасшифровкаПлатежаСуммаНДС") <> Неопределено Тогда
		ЭлементФормы = Элементы.РасшифровкаПлатежаСуммаНДС; // ПолеФормы
		ЭлементФормы.Заголовок = СтрШаблон(НСтр("ru = 'Сумма НДС (%1)'"), Строка(Валюта));
	КонецЕсли;
	
	Если ЭлементыКИзменению <> Неопределено И ТипЗнч(ЭлементыКИзменению) = Тип("Массив") Тогда
		Для каждого ЭлементФормы Из ЭлементыКИзменению Цикл
			ЭлементФормы = Элементы[ЭлементФормы]; // ПолеФормы
			ЭлементФормы.Заголовок = СтрШаблон(НСтр("ru = 'Сумма (%1)'"), Строка(Валюта));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для кассы.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементКасса - ПолеФормы - Поле для ввода кассы.
//
Процедура УстановитьПараметрыВыбораКассы(Объект, ЭлементКасса) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда

		Если Не ЗначениеЗаполнено(Объект.Касса) Или УказанЗаказВРасшифровкеПлатежа(Объект) Тогда
			НуженОтборПоОрганизации = Истина;
		ИначеЕсли Объект.Свойство("ЗаявкаНаРасходованиеДенежныхСредств")
			И ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		МассивПараметров = Новый Массив;
		Если НуженОтборПоОрганизации Тогда
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		КонецЕсли;
		ЭлементКасса.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Иначе
		ЭлементКасса.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец",
			Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций())));
	КонецЕсли;
	
	ЭлементКасса.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для банковского счета.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементБанковскийСчет - ПолеФормы - Поле для ввода банковского счета.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчета(Объект, ЭлементБанковскийСчет) Экспорт
	
	МассивОрганизаций = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		Если Объект.Свойство("ЗаявкаНаРасходованиеДенежныхСредств")
			И ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		МассивПараметров = Новый Массив;
		Если НуженОтборПоОрганизации Тогда
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		КонецЕсли;
		ЭлементБанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		МассивОрганизаций = Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация);
		МассивОрганизаций.Добавить(Объект.Организация);
	Иначе
		ЭлементБанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец",
			Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций())));
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств",
			ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация)));
	ИначеЕсли МассивОрганизаций.Количество() > 0 Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец",
			Новый ФиксированныйМассив(МассивОрганизаций)));
	КонецЕсли;
	
	ЭлементБанковскийСчет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчета()

// Процедура устанавливает параметры выбора для банковского счета получателя.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	Элемент - ПолеФормы - Поле для ввода банковского счета.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчетаКассыПолучателя(Объект, Элемент) Экспорт
	
	МассивСвязиПараметров = Новый Массив;
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.ВалютаКонвертации"));
	Иначе
		Если Не Объект.Свойство("ПланированиеСуммы")
			Или Объект.Свойство("ПланированиеСуммы") И Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
			МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта"));
		КонецЕсли;
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию) Тогда
		
		Если Объект.Свойство("ОрганизацияПолучатель") И ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
			МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ОрганизацияПолучатель"));
		Иначе
			СписокОрганизаций = Новый СписокЗначений;
			ПараметрыВыбораОрганизации = Новый Структура;
			ПараметрыВыбораОрганизации.Вставить("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоНеВзаимосвязанные");
			ПараметрыВыбораОрганизации.Вставить("Организация", Объект.Организация);
			ПараметрыВыбораОрганизации.Вставить("СтрокаПоиска", Неопределено);
			СтандартнаяОбработка = Ложь;
			ОрганизацииВызовСервера.ОрганизацииОбработкаПолученияДанныхВыбора(СписокОрганизаций, ПараметрыВыбораОрганизации, СтандартнаяОбработка);
			
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(СписокОрганизаций.ВыгрузитьЗначения())));
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
		МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец",
			Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация))));
	КонецЕсли;
	
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязиПараметров);
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчетаПолучателя()

// Процедура устанавливает параметры выбора для партнера.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементПартнер - ПолеФормы - Поле для ввода партнера.
//
Процедура УстановитьПараметрыВыбораПартнера(Объект, ЭлементПартнер) Экспорт
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
	Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПрочиеОтношения", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств Тогда
		
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		
	КонецЕсли;
	
	ЭлементПартнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораПартнера()

// Процедура устанавливает параметры выбора для банковского счета контрагента.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	Элемент - ПолеФормы - Поле для ввода банковского счета контрагента.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Элемент) Экспорт
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ПодотчетноеЛицо"));
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		
		Если Объект.ПеречислениеСотрудникуЧерезБанк Тогда
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент"));
		Иначе
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ПодотчетноеЛицо"));
		КонецЕсли;
		
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент"));
	КонецЕсли;
	
	МассивПараметровВыбора = Новый Массив;
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Закрыт", Ложь);
	МассивПараметровВыбора.Добавить(ПараметрВыбора);
	
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для заявки на расходование денежных средств.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементЗаявка - ПолеФормы - Поле для ввода заявки на расходование денежных средств.
//
Процедура УстановитьПараметрыВыбораЗаявки(Объект, ЭлементЗаявка) Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперацияПоЗарплате", "Объект.ХозяйственнаяОперация",
			РежимИзмененияСвязанногоЗначения.НеИзменять));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком
		Или  Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперацияПоЗарплате",
			Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация",
			РежимИзмененияСвязанногоЗначения.НеИзменять));
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент"));
	КонецЕсли;
	
	ЭлементЗаявка.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	ЭлементЗаявка.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		ЭлементЗаявка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств, ДокументСсылка.ЗаявкаНаКомандировку");
	Иначе
		ЭлементЗаявка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств");
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для списания денежных средств.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементСписание - ПолеФормы - Поле для ввода списания денежных средств.
//
Процедура УстановитьПараметрыВыбораСписанияДенежныхСредств(Объект, ЭлементСписание) Экспорт
	
	МассивПараметров = Новый Массив;
	
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Новый ФиксированныйМассив(МассивОпераций));
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.БанковскийСчет", "Объект.БанковскийСчет"));
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Новый ФиксированныйМассив(МассивОпераций));
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.БанковскийСчет", "Объект.БанковскийСчет"));
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		
	Иначе
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаКонвертации", "Объект.Валюта"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ПодотчетноеЛицо", "Объект.ПодотчетноеЛицо"));
	КонецЕсли;
	
	ЭлементСписание.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	ЭлементСписание.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для статьи движения денежных средств.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементСтатья - ПолеФормы - Поле для ввода статьи движения денежных средств.
//
Процедура УстановитьПараметрыВыбораСтатьяДвиженияДенежныхСредств(Объект, ЭлементСтатья) Экспорт
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		МассивПараметров.Добавить(
			Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперацияПоЗарплате",
				РежимИзмененияСвязанногоЗначения.НеИзменять));
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация"));
	КонецЕсли;
	ЭлементСтатья.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для статьи расходов
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	Элемент - ПолеФормы - Поле для ввода статьи расходов.
//
Процедура УстановитьПараметрыВыбораСтатьиРасходов(Объект, Элемент) Экспорт
	
	МассивПараметровВыбора = Новый Массив;
	
	Если (ТипЗнч(Объект["Ссылка"]) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
			Или ТипЗнч(Объект["Ссылка"]) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"))
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	Иначе
		
		ПараметрВыбора = Новый ПараметрВыбора("ДополнитьСтатьямиРасходов", Истина);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		ПараметрВыбора = Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора договора кредита(депозита, займа)
// и очищает договора кредита (депозита, займа) не соответствующие текущей хозяйственной операции, организации.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//  ЭлементРасшифровкаПлатежаДоговор - ПолеФормы - Поле для ввода договора кредита (депозита)
//  ОчиститьДоговора - Булево - Если истина тогда очищать в таб.части расшифровка платежа договора кредита (депозита) 
//								не соответствующие текущей хозяйственной операции.
//
Процедура УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, ЭлементРасшифровкаПлатежаДоговор, ОчиститьДоговора = Истина) Экспорт
	
	ХарактерДоговора = Справочники.ДоговорыКредитовИДепозитов.ХарактерДоговораПоОперации(Объект.ХозяйственнаяОперация);
	Если ХарактерДоговора = Неопределено Тогда// это не кредитно\депозитная хоз.операция
		Возврат;
	КонецЕсли;
	
	// Определим параметры выбора
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХарактерДоговора", ХарактерДоговора));
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	КонецЕсли;
	
	// Определимся с отбором по организации
	Организация = Неопределено;
	Если ТипЗнч(Объект["Ссылка"]) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") 
		ИЛИ ТипЗнч(Объект["Ссылка"]) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		Если НЕ Объект.БанковскийСчет.Пустая() Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БанковскийСчет,"ВалютаДенежныхСредств,Владелец");
			Организация = Реквизиты.Владелец;
			Валюта = Реквизиты.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект["Ссылка"]) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(Объект["Ссылка"]) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Если НЕ Объект.Касса.Пустая() Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Касса,"ВалютаДенежныхСредств,Владелец");
			Организация = Реквизиты.Владелец;
			Валюта = Реквизиты.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Объект.Организация) Тогда
		Организация = Объект.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Организация));
	КонецЕсли;
	
	// Определимся с отбором по валюте
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДоговора.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК ДанныеДоговора
	|ГДЕ
	|	НЕ ДанныеДоговора.ПометкаУдаления
	|	И (ДанныеДоговора.Организация = &Организация ИЛИ &ЛюбаяОрганизация)
	|	И (ДанныеДоговора.Контрагент = &Контрагент ИЛИ &ЛюбойКонтрагент)
	|	И ДанныеДоговора.ХарактерДоговора = &ХарактерДоговора
	|	И ДанныеДоговора.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И (ДанныеДоговора.ВалютаВзаиморасчетов = ДанныеДоговора.Организация.ВалютаРегламентированногоУчета И ДанныеДоговора.ОплатаВВалюте
	|	ИЛИ ДанныеДоговора.ВалютаВзаиморасчетов <> &ВалютаРегл И НЕ ДанныеДоговора.ОплатаВВалюте)");
	Запрос.УстановитьПараметр("Организация"     , Организация);
	Запрос.УстановитьПараметр("ЛюбаяОрганизация", НЕ ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("Контрагент"      , Объект.Контрагент);
	Запрос.УстановитьПараметр("ЛюбойКонтрагент" , НЕ ЗначениеЗаполнено(Объект.Контрагент));
	Запрос.УстановитьПараметр("ХарактерДоговора", ХарактерДоговора);
	Запрос.УстановитьПараметр("ВалютаРегл", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));
	
	ИмеютсяРасчетыВВалютеОплатаВРублях = Запрос.Выполнить().Выбрать().Следующий();
	Если НЕ ИмеютсяРасчетыВВалютеОплатаВРублях Тогда
		Если НЕ ЗначениеЗаполнено(Валюта) И ЗначениеЗаполнено(Объект.Валюта) Тогда
			Валюта = Объект.Валюта;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Валюта) Тогда
			МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Валюта));
		КонецЕсли;
	КонецЕсли;
	
	// Установим параметры выбора
	ЭлементРасшифровкаПлатежаДоговор.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Определим связей параметров выбора
	МассивСвязей = Новый Массив;
	ОчищатьДоговор = РежимИзмененияСвязанногоЗначения.Очищать;
	Если НЕ Объект.Организация.Пустая() Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", ОчищатьДоговор));
	КонецЕсли;
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент","Объект.Контрагент", ОчищатьДоговор));
		Партнеры = Объект.РасшифровкаПлатежа.Выгрузить().ВыгрузитьКолонку("Партнер");
		Если Партнеры.Количество() > 0 И ЗначениеЗаполнено(Партнеры[0]) Тогда
			МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Партнер","Элементы.РасшифровкаПлатежа.ТекущиеДанные.Партнер", ОчищатьДоговор));
		КонецЕсли;
	КонецЕсли;
	ЭлементРасшифровкаПлатежаДоговор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);

	// Очистим договора не соответствующие текущей хозяйственной операции
	Если ОчиститьДоговора Тогда
		МассивДоговоров = Объект.РасшифровкаПлатежа.Выгрузить().ВыгрузитьКолонку("ДоговорКредитаДепозита");
		РеквизитыДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДоговоров, "Организация,ХарактерДоговора");
		Если РеквизитыДоговоров.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКредитаДепозита) Тогда
					Продолжить;
				КонецЕсли;
				Если РеквизитыДоговоров[СтрокаТаблицы.ДоговорКредитаДепозита].Организация <> Организация
					ИЛИ РеквизитыДоговоров[СтрокаТаблицы.ДоговорКредитаДепозита].ХарактерДоговора <> ХарактерДоговора Тогда
					СтрокаТаблицы.ДоговорКредитаДепозита = Неопределено;
					СтрокаТаблицы.СтатьяДвиженияДенежныхСредств = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;// есть что очищать
	КонецЕсли;// Необходимо очистить договора кредитов (депозитов)
	
КонецПроцедуры

// Процедура список выбора типов сумм текущей хозяйственной операции.
//
// Параметры:
//	Список - СписокЗначений - список выбора элемента формы
//  ХозОперация - ПеречислениеСсылка.ХозяйственныеОперации - текущая хозяйственная операция.
//
Процедура ЗаполнитьСписокТиповСуммКредитовДепозитов(Список, ХозОперация) Экспорт
	
	ТипыСумм = Перечисления.ТипыСуммГрафикаКредитовИДепозитов;
	Список.Очистить();
	Список.Добавить(ТипыСумм.ОсновнойДолг);
	Список.Добавить(ТипыСумм.Проценты);
	Если ХозОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
		Список.Добавить(ТипыСумм.Комиссия);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет организацию владельца объекта расчета в табличной части.
//
// Параметры:
//  ТабличнаяЧасть - ТабличнаяЧасть - Расшифровка платежа, должна содержать поля "Заказ" и "Организация"
//  Организация - СправочникСсылка.Организации - Организация документа
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//
Процедура ЗаполнитьОрганизациюВТабличнойЧасти(ТабличнаяЧасть, Организация, ХозяйственнаяОперация) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Организация КАК Организация,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.Ссылка В (&МассивОбъектовРасчетов)");
	Запрос.УстановитьПараметр("МассивОбъектовРасчетов", ТабличнаяЧасть.ВыгрузитьКолонку("ОбъектРасчетов"));
	ТаблицаОрганизаций = Запрос.Выполнить().Выгрузить();
	ТаблицаОрганизаций.Индексы.Добавить("ОбъектРасчетов");
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		СтруктураПоиска = Новый Структура("ОбъектРасчетов", СтрокаТЧ.ОбъектРасчетов);
		
		СтрокиОрганизаций = ТаблицаОрганизаций.НайтиСтроки(СтруктураПоиска);
		Если СтрокиОрганизаций.Количество() = 1 Тогда
			СтрокаТЧ.Организация = СтрокиОрганизаций[0].Организация;
		Иначе
			СтрокаТЧ.Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет установку значений и параметров реквизитов документа при переключении тумблера "Получатель".
// 
// Параметры:
//  Объект - ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств, ДокументОбъект.СписаниеБезналичныхДенежныхСредств - документ,
//           для которого выполняется изменение реквизитов.
//  Форма - ФормаКлиентскогоПриложения - форма документа, на которой переключили тумблер.
Процедура ПеречислениеСотрудникуЧерезБанкПриИзмененииНаСервере(Объект, Форма) Экспорт

	Объект.ПеречислениеСотрудникуЧерезБанк = Булево(Форма.ПеречислениеСотрудникуЧерезБанк);
	УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Форма.Элементы.БанковскийСчетКонтрагента);
	
	Если НЕ Объект.ПеречислениеСотрудникуЧерезБанк Тогда
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
			ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику
			ИЛИ (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты
			И Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) Тогда
			Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Объект.ПодотчетноеЛицо, Объект.Валюта);
		
	Иначе
		Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Объект.Контрагент, Объект.Валюта);
	КонецЕсли;
	
	Форма.НастроитьЗависимыеЭлементыФормыНаСервере("ПеречислениеСотрудникуЧерезБанк");

КонецПроцедуры


// Устанавливает параметры выбора и связи параметров выбора для поля "Договор эквайринга".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - документ, в котором выполняется установка параметров.
//  Элемент - ПолеФормы - поле, для которого выполняется установка параметров.
//
Процедура УстановитьПараметрыВыбораДоговораЭквайринга(Объект, Элемент) Экспорт

	МассивСвязей = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");
		МассивСвязей.Добавить(НоваяСвязь);
	
	КонецЕсли;
	
	СвязиВыбора = Новый ФиксированныйМассив(МассивСвязей);
	Элемент.СвязиПараметровВыбора = СвязиВыбора;
	
	МассивПараметров = Новый Массив;
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь);
	МассивПараметров.Добавить(НовыйПараметр);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
	МассивПараметров.Добавить(НовыйПараметр);
	
	ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элемент.ПараметрыВыбора = ПараметрыВыбора;

КонецПроцедуры

#КонецОбласти

#Область ФункцииЗаполненияДокументов

// Функция определяет партнера, соответствующего выбранному контрагенту.
//
// Возвращает ссылку на партнера или Неопределено, если заданный для контрагента партнер не удовлетворяет условиям отбора.
//
// Параметры:
//    Контрагент - СправочникСсылка.Контрагенты - контрагент, партнера которого нужно найти
//    ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - необязательное ограничение по хозяйственной операции.
//
// Возвращаемое значение:
//    СправочникСсылка.Партнеры - Партнер.
//
Функция ПолучитьПартнераПоКонтрагенту(Контрагент, ХозяйственнаяОперация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Партнер КАК Партнер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|	И (ВЫБОР КОГДА &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту))
	|	ТОГДА
	|		Контрагенты.Партнер.Клиент
	|	КОГДА &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеНаДепозиты),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймов))
	|	ТОГДА
	|		Контрагенты.Партнер.ПрочиеОтношения
	|	ИНАЧЕ
	|		Контрагенты.Партнер.Поставщик
	|	КОНЕЦ
	|		ИЛИ &ХозяйственнаяОперация = НЕОПРЕДЕЛЕНО
	|		ИЛИ &ИспользоватьПартнеровКакКонтрагентов)
	|";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ИспользоватьПартнеровКакКонтрагентов", ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Партнер = Выборка.Партнер;
	Иначе
		Партнер = Неопределено;
	КонецЕсли;
	
	Возврат Партнер;

КонецФункции // ПолучитьПартнераПоКонтрагенту()

// Процедура заполняет значения полей "БИК" и "КоррСчет".
//
// Параметры:
//    Банк - СправочникСсылка.КлассификаторБанков - Банк
//    Бик - Строка - БИК банка
//    Свифт - Строка - Swift банка
//    КоррСчет - Строка - Корреспондентский счет банка.
//
Процедура ЗаполнитьБИКиКоррСчет(Банк, Бик, Свифт, КоррСчет) Экспорт

	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Код КАК БИК,
	|	СВИФТБИК КАК Свифт,
	|	КоррСчет КАК КоррСчет
	|ИЗ
	|	Справочник.КлассификаторБанков КАК Банки
	|ГДЕ
	|	Банки.Ссылка = &Ссылка
	|";
	Запрос.УстановитьПараметр("Ссылка", Банк);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Бик = Выборка.БИК;
		Свифт = Выборка.Свифт;
		КоррСчет = Выборка.КоррСчет;
	КонецЕсли;

КонецПроцедуры

// Процедура получает банк по указанному БИК или корреспондентскому счету.
//
// Параметры:
//	Поле - Строка - Имя поля, в котором произведен выбор значения.
//	Значение - Строка - Значение, выбранное в поле.
//	Банк - СправочникСсылка.КлассификаторБанков - Значение поля для указания банка
//	БИК - Строка - БИК банка
//	КоррСчет - Строка - Корреспондентский счет банка.
//
// Возвращаемое значение:
//	СписокЗначений - Список банков для интерактивного выбора.
//
Функция ПолучитьСписокБанковПоРеквизитам(Поле, Значение, Банк, БИК, КоррСчет) Экспорт

	СписокБанков = Новый СписокЗначений;
	
	// Если значение не выбрано, очистим значение банка.
	Если ПустаяСтрока(Значение) Тогда
	
		Банк = Справочники.КлассификаторБанков.ПустаяСсылка();
		БИК = "";
		КоррСчет = "";
		
		Возврат СписокБанков;
		
	КонецЕсли;
		
	ТаблицаБанков = Новый ТаблицаЗначений;
	Колонки = ТаблицаБанков.Колонки;
	Колонки.Добавить("Ссылка");
	Колонки.Добавить("Код");
	Колонки.Добавить("КоррСчет");
	
	ЭтоБИК = Ложь;
	ЭтоКоррСчет = Ложь;
	Если СтрНайти(Поле, "БИК") <> 0 Тогда
		ЭтоБИК = Истина;
	ИначеЕсли СтрНайти(Поле, "КоррСчет") <> 0 Тогда
		ЭтоКоррСчет = Истина;
	КонецЕсли;
	
	Если (ЭтоБИК И СтрДлина(Значение) = 9)
	 ИЛИ (ЭтоКоррСчет И СтрДлина(Значение) = 20)
	Тогда
		
		Если ЭтоБИК Тогда
			СтруктураОтбора = Новый Структура("Код", Значение);
			
		ИначеЕсли ЭтоКоррСчет Тогда
			СтруктураОтбора = Новый Структура("КоррСчет", Значение);
			
		КонецЕсли;
		
		Выборка = Справочники.КлассификаторБанков.Выбрать(,, СтруктураОтбора, "Код Возр");
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаБанков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
				
	КонецЕсли;
	
	Если ТаблицаБанков.Количество() = 1 Тогда
		ДанныеБанка = ТаблицаБанков[0];
		
		Банк = ДанныеБанка.Ссылка;
		БИК = ДанныеБанка.Код;
		КоррСчет = ДанныеБанка.КоррСчет;
		СписокБанков.Добавить(Банк);
		
	ИначеЕсли ТаблицаБанков.Количество() > 1 Тогда
		МассивБанков = ТаблицаБанков.ВыгрузитьКолонку("Ссылка");
		СписокБанков.ЗагрузитьЗначения(МассивБанков);
		
	КонецЕсли;
	
	Возврат СписокБанков;
	
КонецФункции

// Функция помещает расшифровку платежа во временное хранилище и возвращает адрес.
//
// Параметры:
//    РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть расшифровки
//    УникальныйИдентификатор - Строка - Идентификатор.
//
// Возвращаемое значение:
//    Строка - Адрес временного хранилища.
//
Функция ПоместитьРасшифровкуПлатежаВХранилище(Знач РасшифровкаПлатежа, УникальныйИдентификатор) Экспорт

	АдресПлатежейВХранилище = ПоместитьВоВременноеХранилище(
		РасшифровкаПлатежа.Выгрузить(),
		УникальныйИдентификатор);
		
	Возврат АдресПлатежейВХранилище;
	
КонецФункции // ПоместитьРасшифровкуПлатежаВХранилище()

// Процедура заполняет кассу, банковский счет, договор эквайринга и эквайринговый терминал в зависимости от формы оплаты документа.
//
// Параметры:
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Фактическая форма оплаты заявки
//	ДанныеЗаполнения - Структура - Данные для заполнения документа.
//	ВалютаПлатежа - СправочникСсылка.Валюты
//
Процедура ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения, ВалютаПлатежа = Неопределено) Экспорт
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		
		СтруктураПараметров = ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация = ДанныеЗаполнения.Организация;
		СтруктураПараметров.ФормаОплаты = ФормаОплаты;
		СтруктураПараметров.Касса       = ДанныеЗаполнения.Касса;
		СтруктураПараметров.Валюта      = ВалютаПлатежа;

		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		Если Не ЗначениеЗаполнено(Касса) Тогда
			ТекущаяКасса = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяКасса", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.Кассы.ПолучитьРеквизитыКассы(ТекущаяКасса).Организация
				Тогда
					Касса = ТекущаяКасса;
				КонецЕсли;
			Иначе
				Касса = ТекущаяКасса;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Касса) Тогда
			ДанныеЗаполнения.Вставить("Касса", Касса);
			Если Не ЗначениеЗаполнено(ВалютаПлатежа) Тогда
				Валюта = Справочники.Кассы.ПолучитьРеквизитыКассы(Касса).Валюта;
				ДанныеЗаполнения.Вставить("Валюта", Валюта);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
		
		СтруктураПараметров = ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    = ДанныеЗаполнения.Организация;
		СтруктураПараметров.ФормаОплаты    = ФормаОплаты;
		СтруктураПараметров.БанковскийСчет = ДанныеЗаполнения.БанковскийСчет;
		СтруктураПараметров.Валюта         = ВалютаПлатежа;
		
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			ТекущийБанковскийСчет = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийБанковскийСчет", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ТекущийБанковскийСчет).Организация
				Тогда
					БанковскийСчет = ТекущийБанковскийСчет;
				КонецЕсли;
			Иначе
				БанковскийСчет = ТекущийБанковскийСчет;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчет);
			РеквизитыБанковскогоСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
			Если Не ЗначениеЗаполнено(ВалютаПлатежа) Тогда
				Валюта = РеквизитыБанковскогоСчета.Валюта;
				ДанныеЗаполнения.Вставить("Валюта", Валюта);
			КонецЕсли;
			Если Не РеквизитыБанковскогоСчета.РазрешитьПлатежиБезУказанияЗаявок
				И ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств") Тогда
				ДанныеЗаполнения.Вставить("ОплатаПоЗаявкам", Истина);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
		
		ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.ДоговорПоУмолчанию(ДанныеЗаполнения.Организация);
		
		Если ЗначениеЗаполнено(ДоговорЭквайринга) Тогда
			ЗначенияРеквизитов = Справочники.ДоговорыЭквайринга.РеквизитыДоговора(ДоговорЭквайринга);
			ДанныеЗаполнения.Вставить("ДоговорЭквайринга", ДоговорЭквайринга);
			ДанныеЗаполнения.Вставить("Валюта", ЗначенияРеквизитов.Валюта);
			
			ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ЭквайринговыйТерминалПоУмолчанию(
				ДанныеЗаполнения.Организация, ДанныеЗаполнения.ДоговорЭквайринга);
			Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
				ДанныеЗаполнения.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет документ на основании заявок на расходование денежных средств.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения
//	ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть документа
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Фактическая форма оплаты (зависит от вводимого документа оплаты).
//
Процедура ЗаполнитьДокументПоЗаявкамНаРасходованиеДенежныхСредств(ДанныеЗаполнения, ТабличнаяЧасть, ФормаОплаты) Экспорт
	
	МассивСсылок = Новый Массив; СуммыКОплате = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
		Или ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаКомандировку") Тогда
		МассивСсылок.Добавить(ДанныеЗаполнения);
		БанковскийСчетКасса = Неопределено;
		СуммаПлатежа = 0;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
			Или ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаКомандировку") Тогда
			МассивСсылок.Добавить(ДанныеЗаполнения.ДокументОснование);
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив") Тогда
			МассивСсылок = ДанныеЗаполнения.ДокументОснование;
		КонецЕсли;
		БанковскийСчетКасса = ДанныеЗаполнения.БанковскийСчетКасса;
		СуммаПлатежа = ДанныеЗаполнения.Сумма;
		ДанныеЗаполнения.Свойство("СуммыКОплате", СуммыКОплате);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Заявка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|			Заявка.ХозяйственнаяОперацияПоЗарплате
	|		ИНАЧЕ
	|			Заявка.ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	Заявка.Валюта КАК Валюта,
	|	Заявка.Валюта КАК ВалютаЗаявки,
	|	Заявка.БанковскийСчет КАК БанковскийСчет,
	|	Заявка.Касса КАК Касса,
	|	Заявка.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Заявка.Контрагент КАК Контрагент,
	|	ВЫБОР КОГДА НЕ Заявка.БанковскийСчетКонтрагента.Закрыт ТОГДА
	|		Заявка.БанковскийСчетКонтрагента
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетКонтрагента,
	|	Заявка.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ВЫБОР КОГДА НЕ Заявка.БанковскийСчетПолучатель.Закрыт ТОГДА
	|		Заявка.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетПолучатель,
	|	Заявка.КассаПолучатель КАК КассаПолучатель,
	|	Заявка.Подразделение КАК Подразделение,
	|	Заявка.ФормаОплатыЗаявки КАК ФормаОплатыЗаявки,
	|	Заявка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Заявка.ВалютаКонвертации КАК ВалютаКонвертации,
	|	Заявка.СуммаКонвертации КАК СуммаКонвертации,
	|	Заявка.КурсКонвертации КАК КурсКонвертации,
	|	Заявка.ПланированиеСуммы КАК ПланированиеСуммы,
	|	Заявка.НомерВедомостиНаВыплатуЗарплаты КАК НомерВедомостиНаВыплатуЗарплаты,
	|	Заявка.ДатаВедомостиНаВыплатуЗарплаты КАК ДатаВедомостиНаВыплатуЗарплаты,
	|	Заявка.СтатьяАктивовПассивов КАК СтатьяАктивовПассивов,
	|	Заявка.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	Заявка.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	Заявка.ДатаАвансовогоОтчета КАК ДатаАвансовогоОтчета,
	|	Заявка.ПеречислениеВБюджет КАК ПеречислениеВБюджет,
	|	Заявка.ТипНалога КАК ТипНалога,
	|	Заявка.НДФЛПоВедомостям КАК НДФЛПоВедомостям,
	|	Заявка.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Заявка.ВидПеречисленияВБюджет КАК ВидПеречисленияВБюджет,
	|	Заявка.КодОКАТО КАК КодОКАТО,
	|	Заявка.ПоказательОснования КАК ПоказательОснования,
	|	Заявка.ПоказательПериода КАК ПоказательПериода,
	|	Заявка.ПоказательНомера КАК ПоказательНомера,
	|	Заявка.ПоказательДаты КАК ПоказательДаты,
	|	Заявка.ПоказательТипа КАК ПоказательТипа,
	|	Заявка.СтатусСоставителя КАК СтатусСоставителя,
	|	Заявка.КодБК КАК КодБК,
	|	Заявка.КодВидаДохода КАК КодВидаДохода,
	|	Заявка.КодВыплат КАК КодВыплат,
	|	Заявка.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	Заявка.ОтражатьКомиссию КАК ОтражатьКомиссию,
	|	Заявка.СуммаКомиссии КАК СуммаКомиссии,
	|	Заявка.СтатьяРасходов КАК СтатьяРасходов,
	|	Заявка.АналитикаРасходов КАК АналитикаРасходов,
	|	Заявка.Подразделение КАК ПодразделениеРасходов,
	|	Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) КАК ЭтоВыплатаЗарплаты,
	|	ВЫБОР
	|		КОГДА Заявка.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику))
	|		ТОГДА
	|			Заявка.ПодотчетноеЛицо.Наименование
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА Заявка.Контрагент.НаименованиеПолное <> """" ТОГДА
	|					Заявка.Контрагент.НаименованиеПолное
	|				ИНАЧЕ
	|					Заявка.Контрагент.Наименование
	|			КОНЕЦ
	|	КОНЕЦ КАК Выдать,
	|	ИСТИНА КАК ОплатаПоЗаявкам,
	|	Заявка.ИННПлательщика КАК ИННПлательщика,
	|	Заявка.КПППлательщика КАК КПППлательщика,
	|	Заявка.ТекстПлательщика КАК ТекстПлательщика,
	|	Заявка.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	Заявка.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Заявка.Договор КАК Договор,
	|	Заявка.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ВЫБОР
	|		КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|			3
	|	КОНЕЦ КАК ОчередностьПлатежа,
	|	Заявка.ТипКомиссииЗаПеревод КАК ТипКомиссииЗаПеревод,
	|	Заявка.ИнформацияПолучателюПлатежа КАК ИнформацияПолучателюПлатежа,
	|	Заявка.УсловиеСделкиКонвертации КАК УсловиеСделкиКонвертации,
	|	Заявка.БанковскийСчетСписанияКомиссии КАК БанковскийСчетСписанияКомиссии,
	|	Заявка.НалогообложениеНДС КАК НалогообложениеНДС,
	|	Заявка.ПеречислениеСотрудникуЧерезБанк КАК ПеречислениеСотрудникуЧерезБанк
	|
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|	
	|ГДЕ
	|	Заявка.Ссылка В (&МассивСсылок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Заявка.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику) КАК ХозяйственнаяОперация,
	|	Заявка.Валюта КАК Валюта,
	|	Заявка.Валюта КАК ВалютаЗаявки,
	|	Заявка.БанковскийСчет КАК БанковскийСчет,
	|	Заявка.Касса КАК Касса,
	|	"""" КАК НазначениеПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	Заявка.ЛицевойСчет КАК БанковскийСчетКонтрагента,
	|	Заявка.Сотрудник КАК ПодотчетноеЛицо,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчетПолучатель,
	|	НЕОПРЕДЕЛЕНО КАК КассаПолучатель,
	|	Заявка.Подразделение КАК Подразделение,
	|	Заявка.ФормаОплатыЗаявки КАК ФормаОплатыЗаявки,
	|	Заявка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКонвертации,
	|	НЕОПРЕДЕЛЕНО КАК СуммаКонвертации,
	|	НЕОПРЕДЕЛЕНО КАК КурсКонвертации,
	|	НЕОПРЕДЕЛЕНО КАК ПланированиеСуммы,
	|	НЕОПРЕДЕЛЕНО КАК НомерВедомостиНаВыплатуЗарплаты,
	|	НЕОПРЕДЕЛЕНО КАК ДатаВедомостиНаВыплатуЗарплаты,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК ДатаАвансовогоОтчета,
	|	НЕОПРЕДЕЛЕНО КАК ПеречислениеВБюджет,
	|	НЕОПРЕДЕЛЕНО КАК ТипНалога,
	|	НЕОПРЕДЕЛЕНО КАК НДФЛПоВедомостям,
	|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
	|	НЕОПРЕДЕЛЕНО КАК ВидПеречисленияВБюджет,
	|	НЕОПРЕДЕЛЕНО КАК КодОКАТО,
	|	НЕОПРЕДЕЛЕНО КАК ПоказательОснования,
	|	НЕОПРЕДЕЛЕНО КАК ПоказательПериода,
	|	НЕОПРЕДЕЛЕНО КАК ПоказательНомера,
	|	НЕОПРЕДЕЛЕНО КАК ПоказательДаты,
	|	НЕОПРЕДЕЛЕНО КАК ПоказательТипа,
	|	НЕОПРЕДЕЛЕНО КАК СтатусСоставителя,
	|	НЕОПРЕДЕЛЕНО КАК КодБК,
	|	НЕОПРЕДЕЛЕНО КАК КодВидаДохода,
	|	НЕОПРЕДЕЛЕНО КАК КодВыплат,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорЭквайринга,
	|	НЕОПРЕДЕЛЕНО КАК ОтражатьКомиссию,
	|	НЕОПРЕДЕЛЕНО КАК СуммаКомиссии,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеРасходов,
	|	ЛОЖЬ КАК ЭтоВыплатаЗарплаты,
	|	Заявка.Сотрудник.Наименование КАК Выдать,
	|	ИСТИНА КАК ОплатаПоЗаявкам,
	|	НЕОПРЕДЕЛЕНО КАК ИННПлательщика,
	|	НЕОПРЕДЕЛЕНО КАК КПППлательщика,
	|	""""         КАК ТекстПлательщика,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	Заявка.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	НЕОПРЕДЕЛЕНО КАК ОчередностьПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК ТипКомиссииЗаПеревод,
	|	""""         КАК ИнформацияПолучателюПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК УсловиеСделкиКонвертации,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчетСписанияКомиссии,
	|	НЕОПРЕДЕЛЕНО КАК НалогообложениеНДС,
	|	ЛОЖЬ
	|
	|ИЗ
	|	Документ.ЗаявкаНаКомандировку КАК Заявка
	|	
	|ГДЕ
	|	Заявка.Ссылка В (&МассивСсылок)
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредства.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|		ЗаявкаНаРасходованиеДенежныхСредств В (&МассивСсылок)
	|		И (БанковскийСчетКасса В (&БанковскиеСчетаКассы) ИЛИ &НеОграничиватьПоБанковскомуСчетуКассе)
	|	) КАК ДенежныеСредства
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	БанковскиеСчетаКассы = Новый Массив;
	Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
		БанковскиеСчетаКассы.Добавить(БанковскийСчетКасса);
		БанковскиеСчетаКассы.Добавить(Неопределено);
		Запрос.УстановитьПараметр("БанковскиеСчетаКассы", БанковскиеСчетаКассы);
		Запрос.УстановитьПараметр("НеОграничиватьПоБанковскомуСчетуКассе", Ложь);
	Иначе
		Запрос.УстановитьПараметр("БанковскиеСчетаКассы", БанковскиеСчетаКассы);
		Запрос.УстановитьПараметр("НеОграничиватьПоБанковскомуСчетуКассе", Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ФормаОплатыЗаявки)
		И ФормаОплаты <> Выборка.ФормаОплатыЗаявки Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Форма оплаты ""%1"" вводимого документа отличается от формы оплаты ""%2"" заявки.'"),
			ФормаОплаты,
			Выборка.ФормаОплатыЗаявки);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта
		И Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		Текст = НСтр("ru = 'Выбранная операция не соответствует операции возврата оплаты клиенту, для которой предусмотрен эквайринговый платеж.'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
		Если ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчетКасса);
		ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			ДанныеЗаполнения.Вставить("Касса", БанковскийСчетКасса);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			ДанныеЗаполнения.Организация,
			ДанныеЗаполнения.ВалютаКонвертации);
		ДанныеЗаполнения.Вставить("БанковскийСчетПолучатель", БанковскийСчетПолучатель);
		КассаПолучатель = Справочники.Кассы.ПолучитьКассуПоУмолчанию(
			ДанныеЗаполнения.Организация,
			ДанныеЗаполнения.ВалютаКонвертации);
		ДанныеЗаполнения.Вставить("КассаПолучатель", КассаПолучатель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СуммаПлатежа) Тогда
		ДанныеЗаполнения.Вставить("СуммаДокумента", СуммаПлатежа);
	Иначе
		ДанныеЗаполнения.Вставить("СуммаДокумента", РезультатЗапроса[1].Выгрузить()[0].Сумма);
	КонецЕсли;
	
	Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДокументФизическогоЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(Выборка.ПодотчетноеЛицо).Представление;
		Если Не ЗначениеЗаполнено(ДокументФизическогоЛица) Тогда
			ДокументФизическогоЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(
				Выборка.ПодотчетноеЛицо,
				Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ).Представление;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		ДанныеЗаполнения.Вставить("ПоДокументу", ДокументФизическогоЛица);
	КонецЕсли;
	
	Если Выборка.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов Тогда
		ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения);
	Иначе
		ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения, Выборка.Валюта);
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		И ДанныеЗаполнения.КурсКонвертации <> 0
		И ДанныеЗаполнения.СуммаКонвертации = 0 Тогда
		ДанныеЗаполнения.Вставить("СуммаКонвертации", ДанныеЗаполнения.СуммаДокумента / ДанныеЗаполнения.КурсКонвертации);
	КонецЕсли;
	
	//++ Локализация
	//-- Локализация

	Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
			Выборка.ВалютаЗаявки, ДанныеЗаполнения.Валюта, ТекущаяДатаСеанса(), Выборка.Организация);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.КурсЧислитель * КурсВалютыПересчета.КурсЗнаменатель / (КурсВалюты.КурсЗнаменатель * КурсВалютыПересчета.КурсЧислитель) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ТекущаяДата, БазоваяВалюта = &БазоваяВалюта) КАК КурсВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыПересчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.КурсЗнаменатель <> 0
	|	И КурсВалютыПересчета.КурсЧислитель <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.Партнер,
	|	РасшифровкаПлатежа.ОбъектРасчетов,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|			СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета
	|		ИНАЧЕ
	|			СУММА(РасшифровкаПлатежа.Сумма)
	|	КОНЕЦ КАК Сумма,
	|	СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежа.СтатьяРасходов,
	|	РасшифровкаПлатежа.АналитикаРасходов,
	|	РасшифровкаПлатежа.АналитикаАктивовПассивов,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.ТипСуммыКредитаДепозита,
	|	РасшифровкаПлатежа.ДоговорАренды,
	|	РасшифровкаПлатежа.ТипПлатежаПоАренде,
	|	РасшифровкаПлатежа.ДоговорЗаймаСотруднику,
	|	РасшифровкаПлатежа.Подразделение,
	|	РасшифровкаПлатежа.НаправлениеДеятельности,
	|	РасшифровкаПлатежа.Ведомость,
	|	РасшифровкаПлатежа.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|			(СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета *
	|					(РасшифровкаПлатежа.СтавкаНДС.Ставка / 100) / ((РасшифровкаПлатежа.СтавкаНДС.Ставка / 100) + 1))
	|	ИНАЧЕ
	|		СУММА(РасшифровкаПлатежа.СуммаНДС)
	|	КОНЕЦ КАК СуммаНДС,
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств
	|
	|ИЗ (
	|	ВЫБРАТЬ
	|		РасшифровкаДокумента.Партнер,
	|		РасшифровкаДокумента.ОбъектРасчетов,
	|		ЕСТЬNULL(РасшифровкаДокумента.Сумма, Заявка.СуммаДокумента) КАК Сумма,
	|		ВЫБОР
	|			КОГДА Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|				РасшифровкаДокумента.СуммаВзаиморасчетов
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ КАК СуммаВзаиморасчетов,
	|		РасшифровкаДокумента.ВалютаВзаиморасчетов,
	|		РасшифровкаДокумента.СтатьяРасходов,
	|		РасшифровкаДокумента.АналитикаРасходов,
	|		РасшифровкаДокумента.АналитикаАктивовПассивов,
	|		РасшифровкаДокумента.СтатьяДвиженияДенежныхСредств,
	|		РасшифровкаДокумента.ДоговорКредитаДепозита,
	|		РасшифровкаДокумента.ТипСуммыКредитаДепозита,
	|		РасшифровкаДокумента.ДоговорАренды,
	|		РасшифровкаДокумента.ТипПлатежаПоАренде,
	|		РасшифровкаДокумента.ДоговорЗаймаСотруднику,
	|		РасшифровкаДокумента.Подразделение,
	|		РасшифровкаДокумента.НаправлениеДеятельности,
	|		РасшифровкаДокумента.Ведомость,
	|		РасшифровкаДокумента.СтавкаНДС,
	|		РасшифровкаДокумента.СуммаНДС КАК СуммаНДС,
	|		Заявка.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|		Заявка.ПланированиеСуммы КАК ПланированиеСуммы,
	|		Заявка.Валюта КАК Валюта
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаДокумента
	|		ПО
	|			РасшифровкаДокумента.Ссылка = Заявка.Ссылка
	|		
	|	ГДЕ
	|		Заявка.Ссылка В(&МассивСсылок)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		ЕСТЬNULL(РасшифровкаПлатежа.Сумма, Заявка.СуммаДокумента) КАК Сумма,
	|		0 КАК СуммаВзаиморасчетов,
	|		Заявка.Валюта,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС),
	|		0,
	|		Заявка.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|		НЕОПРЕДЕЛЕНО КАК ПланированиеСуммы,
	|		Заявка.Валюта КАК Валюта
	|	ИЗ
	|		Документ.ЗаявкаНаКомандировку КАК Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.ЗаявкаНаКомандировку.ВыдачаПодОтчет КАК РасшифровкаПлатежа
	|		ПО
	|			РасшифровкаПлатежа.Ссылка = Заявка.Ссылка
	|	ГДЕ
	|		Заявка.Ссылка В(&МассивСсылок)
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасшифровкаДокумента.Партнер,
	|		РасшифровкаДокумента.ОбъектРасчетов,
	|		-РасшифровкаДокумента.Сумма,
	|		ВЫБОР
	|			КОГДА РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|				-РасшифровкаДокумента.СуммаВзаиморасчетов
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ КАК СуммаВзаиморасчетов,
	|		РасшифровкаДокумента.ВалютаВзаиморасчетов,
	|		РасшифровкаДокумента.СтатьяРасходов,
	|		РасшифровкаДокумента.АналитикаРасходов,
	|		РасшифровкаДокумента.АналитикаАктивовПассивов,
	|		РасшифровкаДокумента.СтатьяДвиженияДенежныхСредств,
	|		РасшифровкаДокумента.ДоговорКредитаДепозита,
	|		РасшифровкаДокумента.ТипСуммыКредитаДепозита,
	|		РасшифровкаДокумента.ДоговорАренды,
	|		РасшифровкаДокумента.ТипПлатежаПоАренде,
	|		РасшифровкаДокумента.ДоговорЗаймаСотруднику,
	|		РасшифровкаДокумента.Подразделение,
	|		РасшифровкаДокумента.НаправлениеДеятельности,
	|		РасшифровкаДокумента.Ведомость,
	|		РасшифровкаДокумента.СтавкаНДС,
	|		-РасшифровкаДокумента.СуммаНДС,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.Валюта
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаДокумента
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|		ПО
	|			ДенежныеСредства.Регистратор = РасшифровкаДокумента.Ссылка
	|			
	|	ГДЕ
	|		ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасшифровкаДокумента.Партнер,
	|		РасшифровкаДокумента.ОбъектРасчетов,
	|		-РасшифровкаДокумента.Сумма,
	|		ВЫБОР
	|			КОГДА РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|				-РасшифровкаДокумента.СуммаВзаиморасчетов
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ КАК СуммаВзаиморасчетов,
	|		РасшифровкаДокумента.ВалютаВзаиморасчетов,
	|		РасшифровкаДокумента.СтатьяРасходов,
	|		РасшифровкаДокумента.АналитикаРасходов,
	|		РасшифровкаДокумента.АналитикаАктивовПассивов,
	|		РасшифровкаДокумента.СтатьяДвиженияДенежныхСредств,
	|		РасшифровкаДокумента.ДоговорКредитаДепозита,
	|		РасшифровкаДокумента.ТипСуммыКредитаДепозита,
	|		РасшифровкаДокумента.ДоговорАренды,
	|		РасшифровкаДокумента.ТипПлатежаПоАренде,
	|		РасшифровкаДокумента.ДоговорЗаймаСотруднику,
	|		РасшифровкаДокумента.Подразделение,
	|		РасшифровкаДокумента.НаправлениеДеятельности,
	|		РасшифровкаДокумента.Ссылка.Ведомость,
	|		РасшифровкаДокумента.СтавкаНДС,
	|		-РасшифровкаДокумента.СуммаНДС,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы,
	|		РасшифровкаДокумента.ЗаявкаНаРасходованиеДенежныхСредств.Валюта
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаДокумента
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|		ПО
	|			ДенежныеСредства.Регистратор = РасшифровкаДокумента.Ссылка
	|	ГДЕ
	|		ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств В(&МассивСсылок)
	|	)
	|	КАК РасшифровкаПлатежа
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			КурсыВалют КАК КурсыВалют
	|		ПО
	|			РасшифровкаПлатежа.Валюта = КурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	РасшифровкаПлатежа.Партнер,
	|	РасшифровкаПлатежа.ОбъектРасчетов,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежа.СтатьяРасходов,
	|	РасшифровкаПлатежа.АналитикаРасходов,
	|	РасшифровкаПлатежа.АналитикаАктивовПассивов,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.ТипСуммыКредитаДепозита,
	|	РасшифровкаПлатежа.ДоговорАренды,
	|	РасшифровкаПлатежа.ТипПлатежаПоАренде,
	|	РасшифровкаПлатежа.ДоговорЗаймаСотруднику,
	|	РасшифровкаПлатежа.Подразделение,
	|	РасшифровкаПлатежа.НаправлениеДеятельности,
	|	РасшифровкаПлатежа.Ведомость,
	|	РасшифровкаПлатежа.СтавкаНДС,
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств,
	|	РасшифровкаПлатежа.ПланированиеСуммы,
	|	КурсыВалют.КоэффициентПересчета
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов)
	|			ТОГДА СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета
	|		ИНАЧЕ СУММА(РасшифровкаПлатежа.Сумма)
	|	КОНЕЦ > 0
	|	
	|УПОРЯДОЧИТЬ ПО
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств
	|";
	
	
	Запрос.УстановитьПараметр("Валюта", ДанныеЗаполнения.Валюта);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеЗаполнения.Организация));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТабличнаяЧасть.Очистить();
	
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента * Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов;
	Пока Выборка.Следующий() Цикл
		Если СуммыКОплате <> Неопределено Тогда
			СуммаЗаявки = СуммыКОплате.Получить(Выборка.ЗаявкаНаРасходованиеДенежныхСредств)
				* Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов;
			Сумма = Мин(Выборка.Сумма, СуммаЗаявки, СуммаДокумента);
		Иначе
			Сумма = Мин(Выборка.Сумма, СуммаДокумента);
		КонецЕсли;
		ПересчитатьНДС = (Сумма <> Выборка.Сумма);
		СуммаДокумента = СуммаДокумента - Сумма;
		Если Сумма > 0 Тогда
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Сумма = Сумма;
			
			Если ПересчитатьНДС Тогда
				ПараметрыПересчетаНДС = Новый Структура("ЦенаВключаетНДС", Истина);
				СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", ПараметрыПересчетаНДС);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.СуммаДокумента <> ТабличнаяЧасть.Итог("СуммаВзаиморасчетов") Тогда
		Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			СтрокаТЧ.СуммаВзаиморасчетов = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если ТабличнаяЧасть.Количество() Тогда
		ДанныеЗаполнения.Вставить("СуммаДокумента", ТабличнаяЧасть.Итог("Сумма"));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу остатками денежных средств к выплате по заявкам
//
// Параметры:
//    ДанныеОтбора - Структура - содержит значения отбора заявок
//    ТабличнаяЧасть - ДанныеФормыКоллекция - заполняемая таблица.
//
Процедура ЗаполнитьПоОстаткамЗаявокНаРасходованиеДенежныхСредств(ДанныеОтбора, ТабличнаяЧасть) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.КурсЧислитель * КурсВалютыПересчета.КурсЗнаменатель / (КурсВалюты.КурсЗнаменатель * КурсВалютыПересчета.КурсЧислитель) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ТекущаяДатаСеанса, БазоваяВалюта = &БазоваяВалюта) КАК КурсВалюты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ТекущаяДатаСеанса,
	|				Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыПересчета
	|	ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.КурсЗнаменатель <> 0
	|	И КурсВалютыПересчета.КурсЧислитель <> 0
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	Заявка.Номер  КАК НомерЗаявки,
	|	Заявка.Дата   КАК ДатаЗаявки,
	|	Заявка.Валюта КАК ВалютаЗаявки,
	|	ДенежныеСредства.СуммаОстаток КАК СуммаВВалюте,
	|	ДенежныеСредства.СуммаОстаток * КурсыВалют.КоэффициентПересчета КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|		Организация = &Организация
	|		И Получатель = &Получатель
	|		И БанковскийСчетКасса В (&БанковскиеСчетаКассы)) КАК ДенежныеСредства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|	ПО Заявка.Ссылка = ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|	ПО Заявка.Валюта = КурсыВалют.Валюта
	|	
	|ГДЕ
	|	Заявка.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И Заявка.ХозяйственнаяОперацияПоЗарплате <> &ХозяйственнаяОперация
	|	И (Заявка.ФормаОплатыЗаявки = &ФормаОплаты ИЛИ Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка))
	|	И (Заявка.Валюта = &Валюта ИЛИ Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов))
	|	И Заявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	Заявка.Номер  КАК НомерЗаявки,
	|	Заявка.Дата   КАК ДатаЗаявки,
	|	Заявка.Валюта КАК ВалютаЗаявки,
	|	ДенежныеСредства.СуммаОстаток КАК СуммаВВалюте,
	|	ДенежныеСредства.СуммаОстаток * КурсыВалют.КоэффициентПересчета КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|		Организация = &Организация
	|		И Получатель = &Получатель
	|		И БанковскийСчетКасса В (&БанковскиеСчетаКассы)) КАК ДенежныеСредства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|	ПО Заявка.Ссылка = ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|	ПО Заявка.Валюта = КурсыВалют.Валюта
	|	
	|ГДЕ
	|	Заявка.ХозяйственнаяОперацияПоЗарплате = &ХозяйственнаяОперация
	|	И Заявка.ХозяйственнаяОперация <> &ХозяйственнаяОперация
	|	И (Заявка.ФормаОплатыЗаявки = &ФормаОплаты ИЛИ Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка))
	|	И (Заявка.Валюта = &Валюта ИЛИ Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов))
	|	И Заявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
	|";
	
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Валюта", ДанныеОтбора.Валюта);
	Запрос.УстановитьПараметр("Организация", ДанныеОтбора.Организация);
	Запрос.УстановитьПараметр("ФормаОплаты", ДанныеОтбора.ФормаОплаты);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ДанныеОтбора.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеОтбора.Организация));
	
	БанковскиеСчетаКассы = Новый Массив;
	БанковскиеСчетаКассы.Добавить(ДанныеОтбора.БанковскийСчетКасса);
	БанковскиеСчетаКассы.Добавить(Неопределено);
	Запрос.УстановитьПараметр("БанковскиеСчетаКассы", БанковскиеСчетаКассы);
	
	Получатель = Неопределено;
	Если ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		Или ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		
		Получатель = ДанныеОтбора.ПодотчетноеЛицо;
		
	ИначеЕсли ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		Или ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		Если ДанныеОтбора.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОтбора.БанковскийСчетПолучатель, "Владелец");
		ИначеЕсли ДанныеОтбора.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОтбора.КассаПолучатель, "Владелец");
		КонецЕсли;
	Иначе
		Получатель = ДанныеОтбора.Контрагент;
	КонецЕсли;
	Запрос.УстановитьПараметр("Получатель", Получатель);
	
	ТабличнаяЧасть.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ПредставлениеЗаявки = СтрШаблон(" %1 " + НСтр("ru = 'от %2'"), Выборка.НомерЗаявки, Формат(Выборка.ДатаЗаявки, "ДЛФ=D"));
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет документ на основании распоряжения на перемещение денежных средств.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств - Документ - основание
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ДанныеЗаполнения - Структура - Данные заполнения
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть "Расшифровка платежа" документа.
//
Процедура ЗаполнитьДокументПоРаспоряжениюНаПеремещениеДенежныхСредств(
	Знач ДокументОснование,
	ДокументОбъект,
	ДанныеЗаполнения,
	РасшифровкаПлатежа = Неопределено
	) Экспорт
	
	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК РаспоряжениеНаПеремещениеДенежныхСредств,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Статус КАК Статус,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств)
	|		) ТОГДА
	|		ДанныеДокумента.КассаПолучатель
	|	ИНАЧЕ
	|		ДанныеДокумента.Касса
	|	КОНЕЦ КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств)
	|		) ТОГДА
	|		ДанныеДокумента.КассаПолучатель
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК КассаПолучатель,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк)
	|		) ТОГДА
	|		ДанныеДокумента.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет) ТОГДА
	|		ДанныеДокумента.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК БанковскийСчетПолучатель,
	//++ Локализация
	//-- Локализация
	|
	|	ДанныеДокумента.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ДенежныеСредства.СуммаОстаток КАК СуммаДокумента
	|ИЗ
	|	Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|			ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|		) КАК ДенежныеСредства
	|	ПО
	|		ИСТИНА
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация В (&МассивОпераций)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	МассивОпераций = Новый Массив;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств);
		ПредставлениеДокумента = НСтр("ru = 'Приходный кассовый ордер'");
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
		ПредставлениеДокумента = НСтр("ru = 'Расходный кассовый ордер'");
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств);
		ПредставлениеДокумента = НСтр("ru = 'Списание безналичных ДС'");
		
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивОпераций", МассивОпераций);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить %1 на основании документа %2'"),
			ПредставлениеДокумента,
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
			И Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств ТОгда
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка);
		КонецЕсли;
		
		Если Выборка.Статус <> Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.КОплате Тогда
			Текст = НСтр("ru = 'Распоряжение на перемещение денежных средств не утверждено к оплате'");
			ВызватьИсключение Текст;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоРаспоряжениюНаПеремещениеДенежныхСредств()

// Процедура заполняет статью ДДС в шапке документа по хозяйственной операции.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ДанныеЗаполнения - Структура - Данные заполнения
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операция.
//
Процедура ЗаполнитьСтатьюДвиженияДенежныхСредств(ДокументОбъект, ДанныеЗаполнения, ХозяйственнаяОперация) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")  И ДанныеЗаполнения.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
		СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
	Иначе
		СтатьяДвиженияДенежныхСредств = ДокументОбъект.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация") Тогда
			
			Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты 
				И ДанныеЗаполнения.Свойство("ХозяйственнаяОперацияПоЗарплате") Тогда
				
				ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств",
					ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперацияПоЗарплате));
			Иначе
					
				ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств",
					ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация));
			КонецЕсли;
		Иначе
			ДокументОбъект.СтатьяДвиженияДенежныхСредств =
				ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ХозяйственнаяОперация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует текст строки "В том числе НДС" платежа.
//
// Параметры:
//    Организация - СправочникСсылка.Организации - Организация документа
//    ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа
//    РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть Расшифровка платежа
//    ДобавлятьТекстВТомЧисле - Булево - Добавлять строку "В т.ч." в текст платежа.
//
// Возвращаемое значение:
//    Строка - Текст суммы НДС платежа.
//
Функция ТекстСуммаНДСПлатежа(Организация, ВалютаДокумента, РасшифровкаПлатежа, ДобавлятьТекстВТомЧисле) Экспорт
	
	Если ТипЗнч(РасшифровкаПлатежа) = Тип("ТаблицаЗначений") Тогда
		ТаблицаНДС = РасшифровкаПлатежа.Скопировать(, "СтавкаНДС, СуммаНДС");
	Иначе
		ТаблицаНДС = РасшифровкаПлатежа.Выгрузить(, "СтавкаНДС, СуммаНДС");
	КонецЕсли;
	ТаблицаНДС.Свернуть("СтавкаНДС", "СуммаНДС");
	
	//++ Локализация
	Если ВалютаДокумента = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация) Тогда
		ПредставлениеВалюты = "руб.";
	Иначе
	//-- Локализация
		ПредставлениеВалюты = СокрЛП(ВалютаДокумента);
	//++ Локализация
	КонецЕсли;
	//-- Локализация
	
	ТекстНазначениеПлатежаНДС = "";
	Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл
		Если СтрокаТаблицы.СтавкаНДС = Справочники.СтавкиНДС.БезНДС
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
			Продолжить;
		КонецЕсли;
		ТекстНазначениеПлатежаНДС = ТекстНазначениеПлатежаНДС
			+ ?(ПустаяСтрока(ТекстНазначениеПлатежаНДС), "", ", ")
			+ НСтр("ru = 'НДС'") + " (" + СтрокаТаблицы.СтавкаНДС + ") "
			+ Формат(СтрокаТаблицы.СуммаНДС, "ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=") + " " + ПредставлениеВалюты;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(ТекстНазначениеПлатежаНДС) Тогда
		ТекстНазначениеПлатежаНДС = НСтр("ru = 'Без налога (НДС)'");
	Иначе
		Если ДобавлятьТекстВТомЧисле Тогда
			ТекстНазначениеПлатежаНДС = НСтр("ru = 'В т.ч.'") + " " + ТекстНазначениеПлатежаНДС;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНазначениеПлатежаНДС;
	
КонецФункции

// Процедура заполняет документ на основании договора кредита (депозита).
//
// Параметры:
//	ДоговорКредитаДепозита - СправочникСсылка.ДоговорыКредитовИДепозитов - Договор - основание
//	ДанныеЗаполнения - Структура - Данные заполнения
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//  ЭтоПоступление - Булево - вид движения денежных средств.
//
Процедура ЗаполнитьПоДоговоруКредитаДепозита(Знач ДоговорКредитаДепозита, ДанныеЗаполнения, РасшифровкаПлатежа, ЭтоПоступление) Экспорт
	
	ДанныеЗаполнения = Справочники.ДоговорыКредитовИДепозитов.ДанныеЗаполненияДокументаДДС(ДоговорКредитаДепозита, ЭтоПоступление);
	РасшифровкаПлатежа.Загрузить(ДанныеЗаполнения.РасшифровкаПлатежа);
	ДанныеЗаполнения.Вставить("СуммаДокумента", РасшифровкаПлатежа.Итог("Сумма"));
	
КонецПроцедуры

// Очищает банковский счет организации, если он принадлежит другой организации.
// Заполняет по умолчанию, если банковский счет не заполнен.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа
//	БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - Проверяемый банковский счет
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа
//	НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности.
//
Процедура ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Знач Организация, БанковскийСчет, ФормаОплаты = Неопределено, НаправлениеДеятельности = Неопределено) Экспорт
	
	ВладелецСчета = Неопределено;
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ВладелецСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Или Организация <> ВладелецСчета Тогда
		БанковскийСчет = Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.ФормаОплаты = ФормаОплаты;
	СтруктураПараметров.БанковскийСчет = БанковскийСчет;
	СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
	
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
КонецПроцедуры

// Очищает кассу организации, если она принадлежит другой организации.
// Заполняет по умолчанию, если касса не заполнена.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа
//	Касса - СправочникСсылка.Кассы - Проверяемая касса
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа
//	НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности
//	ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - Физическое лицо
//
Процедура ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(Знач Организация, Касса, ФормаОплаты = Неопределено, НаправлениеДеятельности = Неопределено, ФизическоеЛицо = Неопределено) Экспорт
	
	ВладелецКассы = Неопределено;
	Если ЗначениеЗаполнено(Касса) Тогда
		ВладелецКассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Касса, "Владелец");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Или Организация <> ВладелецКассы Тогда
		Касса = Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация 			= Организация;
	СтруктураПараметров.ФормаОплаты 			= ФормаОплаты;
	СтруктураПараметров.Касса 					= Касса;
	СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
	СтруктураПараметров.ФизическоеЛицо 			= ФизическоеЛицо;
	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
КонецПроцедуры

// Возвращает валюту платежа по документу
//
// Параметры:
//  ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа.
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет документа.
//  Касса - СправочникСсылка.Кассы - Касса документа.
//
// Возвращаемое значение:
//  СправочникСсылка.Валюты - Валюта платежа.
Функция ПолучитьВалютуОплаты(ФормаОплаты = Неопределено, БанковскийСчет = Неопределено, Касса = Неопределено) Экспорт
	
	Если (ФормаОплаты = Перечисления.ФормыОплаты.Безналичная ИЛИ НЕ ЗначениеЗаполнено(ФормаОплаты))
		И ЗначениеЗаполнено(БанковскийСчет) Тогда
		ВалютаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ВалютаДенежныхСредств");
	ИначеЕсли (ФормаОплаты = Перечисления.ФормыОплаты.Наличная ИЛИ НЕ ЗначениеЗаполнено(ФормаОплаты))
		И ЗначениеЗаполнено(Касса) Тогда
		ВалютаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Касса, "ВалютаДенежныхСредств");
	Иначе
		ВалютаОплаты = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВалютаОплаты;
	
КонецФункции

// Создает платежные документы, либо формирует данные заполнения для создания одного платежного документа.
//
// Параметры:
//    СтрокиГрафика - Массив - Ключи записей графика платежей
//    ТипДокумента - Строка - Тип создаваемых документов. Если не задан, будет определен автоматически.
//
// Возвращаемое значение:
//    Структура:
//        ОткрыватьФормуПомощника - Булево - Признак необходимости открытия формы помощника создания документов
//        ДокументКСозданию - Структура - Данные заполнения единственного документа
//        ДлительнаяОперация - Структура - Длительная операция создания нескольких документов
//        АдресСтрокГрафика - Строка - Адрес временного хранилища, в котором содержатся оплачиваемые строки графика.
//
Функция ОплатитьСтрокиГрафика(СтрокиГрафика, ТипДокумента) Экспорт
	
	Результат = ДенежныеСредстваСерверЛокализация.ОплатитьСтрокиГрафика(СтрокиГрафика, ТипДокумента);
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Результат = Новый Структура;
	
	ДокументыКСозданию = ДокументыКСозданию(СтрокиГрафика, ТипДокумента);
	
	Если ДокументыКСозданию.Количество() = 1 Тогда
		Результат.Вставить("ОткрыватьФормуПомощника", Ложь);
		Результат.Вставить("ДокументКСозданию", ДокументыКСозданию[0]);
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Формирование платежных документов'");
		ВыполняемыйМетод = "ДенежныеСредстваСервер.СоздатьПлатежи";
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДокументыКСозданию", ДокументыКСозданию);
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, СтруктураПараметров, ПараметрыВыполнения);
		Результат.Вставить("ДлительнаяОперация", ДлительнаяОперация);
		Результат.Вставить("ОткрыватьФормуПомощника", Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует данные для создания документов на основании строк графика платежей
//
// Параметры:
//    СтрокиГрафика - Массив - Ключи записей графика платежей
//    ТипДокумента - Строка - Тип создаваемых документов. Если не задан, будет определен автоматически.
//    Группировать - Булево - Признак необходимости группировки строк графика.
//
// Возвращаемое значение:
//    Массив - Структуры с полями "Тип документа" и "Данные заполнения".
//
Функция ДокументыКСозданию(СтрокиГрафика, ТипДокумента, Группировать = Истина) Экспорт
	
	ДокументыКСозданию = Новый Массив;
	ТаблицаОплаты = РегистрыСведений.ГрафикПлатежей.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	Для каждого СтрокаГрафика Из СтрокиГрафика Цикл
		НоваяСтрока = ТаблицаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГрафика);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаОплаты.ОбъектОплаты КАК ОбъектОплаты
	|ПОМЕСТИТЬ ТаблицаОплаты
	|ИЗ
	|	&ТаблицаОплаты КАК ТаблицаОплаты
	|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ОператорТаблицаОплаты = СхемаЗапроса.ПакетЗапросов[0].Операторы[0]; // ОператорВыбратьСхемыЗапроса
	Для каждого Колонка Из ТаблицаОплаты.Колонки Цикл
		ОператорТаблицаОплаты.ВыбираемыеПоля.Добавить("ТаблицаОплаты." + Колонка.Имя);
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("ТаблицаОплаты", ТаблицаОплаты);
	Запрос.Выполнить();
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить("
	|ВЫБРАТЬ
	|	ГрафикПлатежей.ОбъектОплаты КАК ОбъектОплаты,
	|	ГрафикПлатежей.ОбъектОплаты КАК ЗаказКлиента,
	|	ГрафикПлатежей.ОбъектОплаты КАК ЗаказПоставщику,
	|	ГрафикПлатежей.ОбъектОплаты КАК ОснованиеПлатежа,
	|	ГрафикПлатежей.ОбъектОплаты КАК ДоговорКредитаДепозита,
	|	ГрафикПлатежей.ОбъектОплаты КАК ДоговорАренды,
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ОбъектОплаты ССЫЛКА Справочник.ДоговорыКредитовИДепозитов ТОГДА
	|			ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).Партнер
	|	КОНЕЦ КАК Партнер,
	|	ГрафикПлатежей.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ГрафикПлатежей.БанковскийСчетКасса КАК БанковскийСчет,
	|	ГрафикПлатежей.БанковскийСчетКасса КАК Касса,
	|	ГрафикПлатежей.ДатаПлатежа КАК ДатаПлатежа,
	|	ГрафикПлатежей.ПлательщикПолучатель КАК ПлательщикПолучатель,
	|	ГрафикПлатежей.ПоступлениеСписание КАК ПоступлениеСписание,
	|	ГрафикПлатежей.ТипСуммы КАК ТипСуммы,
	|	ГрафикПлатежей.ТипСуммы КАК ТипСуммыКредитаДепозита,
	|	ГрафикПлатежей.ТипСуммы КАК ТипПлатежаПоАренде,
	|	ГрафикПлатежей.Организация КАК Организация,
	|	ГрафикПлатежей.Подразделение КАК Подразделение,
	|	ГрафикПлатежей.Валюта КАК Валюта,
	|	ГрафикПлатежей.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ХозяйственнаяОперацияПоЗарплате, ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)) КАК ХозяйственнаяОперацияПоЗарплате,
	|	ЕСТЬNULL(ГрафикПлатежей.БанковскийСчетКасса.ВалютаДенежныхСредств, ГрафикПлатежей.Валюта) КАК ВалютаДенежныхСредств,
	|	ЕСТЬNULL(ГрафикПлатежей.БанковскийСчетКасса.ВалютаДенежныхСредств, ГрафикПлатежей.Валюта) КАК ВалютаДокумента,
	|	
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ОбъектОплаты ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств ТОГДА
	|			ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).БанковскийСчетКонтрагента
	|		КОГДА ГрафикПлатежей.ОбъектОплаты ССЫЛКА Справочник.ДоговорыКредитовИДепозитов ТОГДА
	|			ВЫБОР ГрафикПлатежей.ТипСуммы
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг) ТОГДА
	|					ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).БанковскийСчетКонтрагента
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты) ТОГДА
	|					ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).БанковскийСчетПроцентов
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия) ТОГДА
	|					ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).БанковскийСчетКомиссии
	|			КОНЕЦ
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетКонтрагента,
	|	
	|	ГрафикПлатежей.Сумма КАК СуммаКОплате,
	|	ГрафикПлатежей.Сумма КАК Сумма,
	|	
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ОбъектОплаты ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств ТОГДА
	|			ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).СписокФизЛиц
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК СписокФизЛиц,
	|	
	|	ГрафикПлатежей.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|		ИНАЧЕ
	|			ГрафикПлатежей.ФормаОплаты
	|	КОНЕЦ КАК ФормаОплаты,
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
	|			) ТОГДА
	|			ЛОЖЬ
	|		КОГДА ГрафикПлатежей.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам)
	|			) И ЕСТЬNULL(ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ПеречислениеВБюджет, ЛОЖЬ) ТОГДА
	|			ЛОЖЬ
	|		КОГДА ГрафикПлатежей.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|			И ГрафикПлатежей.ОбъектОплаты ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|			И ВЫРАЗИТЬ(ГрафикПлатежей.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).СписокФизЛиц ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ КАК Группируется
	|
	|ПОМЕСТИТЬ ТаблицаОплатыПолная
	|ИЗ
	|	РегистрСведений.ГрафикПлатежей КАК ГрафикПлатежей
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОплаты КАК ТаблицаОплаты
	|	ПО
	|		ТаблицаОплаты.ОбъектОплаты = ГрафикПлатежей.ОбъектОплаты
	|		И (ТаблицаОплаты.БанковскийСчетКасса = ГрафикПлатежей.БанковскийСчетКасса
	|			ИЛИ ГрафикПлатежей.БанковскийСчетКасса = НЕОПРЕДЕЛЕНО И ТаблицаОплаты.БанковскийСчетКасса = НЕОПРЕДЕЛЕНО)
	|		И ТаблицаОплаты.ДатаПлатежа = ГрафикПлатежей.ДатаПлатежа
	|		И ТаблицаОплаты.ПоступлениеСписание = ГрафикПлатежей.ПоступлениеСписание
	|		И ТаблицаОплаты.ПлательщикПолучатель = ГрафикПлатежей.ПлательщикПолучатель
	|		И ТаблицаОплаты.Организация = ГрафикПлатежей.Организация
	|		И ТаблицаОплаты.Валюта = ГрафикПлатежей.Валюта
	|		И ТаблицаОплаты.ТипСуммы = ГрафикПлатежей.ТипСуммы
	|;
	|////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ТаблицаОплатыПолная
	|ГДЕ
	|	ТаблицаОплатыПолная.ХозяйственнаяОперацияПоЗарплате <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|	И НЕ ТаблицаОплатыПолная.СписокФизЛиц
	|;
	|////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаОплаты.Организация,
	|	ТаблицаОплаты.Подразделение,
	|	ТаблицаОплаты.БанковскийСчетКасса,
	|	ТаблицаОплаты.ПлательщикПолучатель,
	|	ТаблицаОплаты.БанковскийСчетКонтрагента,
	|	ТаблицаОплаты.ХозяйственнаяОперация,
	|	ТаблицаОплаты.ПоступлениеСписание,
	|	ТаблицаОплаты.ФормаОплаты,
	|	ТаблицаОплаты.Валюта,
	|	ТаблицаОплаты.Группируется,
	|	СУММА(ТаблицаОплаты.СуммаКОплате) КАК СуммаКОплате
	|	
	|ИЗ
	|	ТаблицаОплатыПолная КАК ТаблицаОплаты
	|ГДЕ
	|	ТаблицаОплаты.Группируется
	|	И ТаблицаОплаты.ХозяйственнаяОперацияПоЗарплате <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплаты.Организация,
	|	ТаблицаОплаты.Подразделение,
	|	ТаблицаОплаты.БанковскийСчетКасса,
	|	ТаблицаОплаты.ПлательщикПолучатель,
	|	ТаблицаОплаты.БанковскийСчетКонтрагента,
	|	ТаблицаОплаты.ХозяйственнаяОперация,
	|	ТаблицаОплаты.ПоступлениеСписание,
	|	ТаблицаОплаты.ФормаОплаты,
	|	ТаблицаОплаты.Валюта,
	|	ТаблицаОплаты.Группируется
	|;
	|////////////////////////////////////
	|");
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ");
	//++ Локализация
	//-- Локализация

	ЧастиЗапроса.Добавить("
	|ВЫБРАТЬ
	|	ТаблицаОплаты.ОбъектОплаты                                                  КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ТаблицаОплаты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|			ТаблицаОплаты.ХозяйственнаяОперацияПоЗарплате
	|		ИНАЧЕ
	|			ТаблицаОплаты.ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	
	|	ТаблицаОплаты.Организация                                                   КАК Организация,
	|	ТаблицаОплаты.Подразделение                                                 КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ТаблицаОплаты.БанковскийСчетКасса <> НЕОПРЕДЕЛЕНО ТОГДА
	|			ТаблицаОплаты.БанковскийСчетКасса
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(ТаблицаОплаты.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|	ЛицевыеСчета.ФизическоеЛицо                                                 КАК ПодотчетноеЛицо,
	|	ЛицевыеСчета.ЛицевойСчет                                                    КАК БанковскийСчетКонтрагента,
	|	НЕОПРЕДЕЛЕНО                                                                КАК Ведомость,
	|	ЛицевыеСчета.Ссылка.НомерВедомостиНаВыплатуЗарплаты                         КАК НомерВедомостиНаВыплатуЗарплаты,
	|	ЛицевыеСчета.Ссылка.ДатаВедомостиНаВыплатуЗарплаты                          КАК ДатаВедомостиНаВыплатуЗарплаты,
	|	ТаблицаОплаты.СтатьяДвиженияДенежныхСредств                                 КАК СтатьяДвиженияДенежныхСредств,
	|	ИСТИНА                                                                      КАК ОплатаПоЗаявкам,
	|	ВЫРАЗИТЬ(ТаблицаОплаты.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).НазначениеПлатежа КАК НазначениеПлатежа,
	|	ВЫРАЗИТЬ(ТаблицаОплаты.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).КодВидаДохода КАК КодВидаДохода,
	|	ВЫРАЗИТЬ(ТаблицаОплаты.ОбъектОплаты КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).КодВыплат КАК КодВыплат,
	|	ВЫБОР КОГДА ТаблицаОплаты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|		3
	|	ИНАЧЕ
	|		5
	|	КОНЕЦ КАК ОчередностьПлатежа,
	|	ВЫРАЗИТЬ(ТаблицаОплаты.ОбъектОплаты
	|		КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДатаАвансовогоОтчета  КАК ДатаАвансовогоОтчета,
	|	ЛицевыеСчета.Сумма                                                          КАК Сумма,
	|	ЛицевыеСчета.Сумма                                                          КАК СуммаДокумента,
	|	СУММА(ТаблицаОплаты.СуммаКОплате)                                           КАК СуммаКОплате
	|ИЗ
	|	ТаблицаОплатыПолная КАК ТаблицаОплаты
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ЛицевыеСчетаСотрудников КАК ЛицевыеСчета
	|		ПО ЛицевыеСчета.Ссылка = ТаблицаОплаты.ОбъектОплаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Списания
	|			ПО Списания.Ссылка.ПодотчетноеЛицо = ЛицевыеСчета.ФизическоеЛицо
	|				И Списания.Ссылка.БанковскийСчетКонтрагента = ЛицевыеСчета.ЛицевойСчет
	|				И Списания.ЗаявкаНаРасходованиеДенежныхСредств = ТаблицаОплаты.ОбъектОплаты
	|				И Списания.Ссылка.Проведен
	|ГДЕ
	|	(ТаблицаОплаты.ХозяйственнаяОперацияПоЗарплате = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|		И НЕ &ИспользоватьНачислениеЗарплаты
	|	ИЛИ ТаблицаОплаты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|		И ТаблицаОплаты.СписокФизЛиц)
	|	И Списания.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплаты.ОбъектОплаты,
	|	ТаблицаОплаты.Организация,
	|	ТаблицаОплаты.Подразделение,
	|	ТаблицаОплаты.БанковскийСчетКасса,
	|	ТаблицаОплаты.СтатьяДвиженияДенежныхСредств,
	|	ЛицевыеСчета.Ссылка,
	|	ЛицевыеСчета.ФизическоеЛицо,
	|	ЛицевыеСчета.ЛицевойСчет,
	|	ЛицевыеСчета.Сумма,
	|	ВЫБОР
	|		КОГДА ТаблицаОплаты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|			ТаблицаОплаты.ХозяйственнаяОперацияПоЗарплате
	|		ИНАЧЕ
	|			ТаблицаОплаты.ХозяйственнаяОперация
	|	КОНЕЦ,
	|	ВЫБОР КОГДА ТаблицаОплаты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|		3
	|	ИНАЧЕ
	|		5
	|	КОНЕЦ
	|ИТОГИ ПО
	|	ЗаявкаНаРасходованиеДенежныхСредств
	|");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса);
	Запрос.УстановитьПараметр("ИспользоватьНачислениеЗарплаты", ИспользоватьНачислениеЗарплаты);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаОплаты = Результат[1].Выгрузить();
	ВыборкаСтроки = Результат[1].Выбрать();
	ВыборкаГруппировки = Результат[2].Выбрать();
	ВыборкаВыплатыПоСписку = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОтборПлатежей = Новый Структура;
	Для Каждого Колонка Из Результат[2].Колонки Цикл
		ОтборПлатежей.Вставить(Колонка.Имя);
	КонецЦикла;
	ОтборПлатежей.Удалить("СуммаКОплате");
	
	ОписаниеТипаБанковскийСчет = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций");
	ОписаниеТипаКасса = Новый ОписаниеТипов("СправочникСсылка.Кассы");
	
	Пока ВыборкаГруппировки.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборПлатежей, ВыборкаГруппировки);
		
		ОтобранныеПлатежи = ТаблицаОплаты.НайтиСтроки(ОтборПлатежей);
		
		Если Не ОтобранныеПлатежи.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
			ТипДокумента = ОпределитьТипСоздаваемогоДокумента(ВыборкаГруппировки);
		КонецЕсли;
		
		ДанныеЗаполнения = Неопределено;
		
		Если ТипЗнч(ОтобранныеПлатежи[0].ОбъектОплаты) = Тип("ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств")
			//++ Локализация
			Или ТипЗнч(ОтобранныеПлатежи[0].ОбъектОплаты) = Тип("ДокументСсылка.УведомлениеОЗачисленииВалюты")
			//-- Локализация
			Или ТипЗнч(ОтобранныеПлатежи[0].ОбъектОплаты) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
			Или ТипЗнч(ОтобранныеПлатежи[0].ОбъектОплаты) = Тип("ДокументСсылка.ЗаявкаНаКомандировку") Тогда
			
			МассивСсылок = Новый Массив; СуммыКОплате = Новый Соответствие;
			Для Каждого СтрокаПлатежа Из ОтобранныеПлатежи Цикл
				МассивСсылок.Добавить(СтрокаПлатежа.ОбъектОплаты);
				ЗаписаннаяСумма = СуммыКОплате.Получить(СтрокаПлатежа.ОбъектОплаты);
				Если ЗаписаннаяСумма = Неопределено Тогда
					СуммыКОплате.Вставить(СтрокаПлатежа.ОбъектОплаты, СтрокаПлатежа.СуммаКОплате);
				Иначе
					СуммыКОплате.Вставить(СтрокаПлатежа.ОбъектОплаты, СтрокаПлатежа.СуммаКОплате + ЗаписаннаяСумма);
				КонецЕсли;
			КонецЦикла;
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("ДокументОснование", МассивСсылок);
			ДанныеЗаполнения.Вставить("БанковскийСчетКасса", ВыборкаГруппировки.БанковскийСчетКасса);
			ДанныеЗаполнения.Вставить("ПлательщикПолучатель", ВыборкаГруппировки.ПлательщикПолучатель);
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ВыборкаГруппировки.ХозяйственнаяОперация);
			ДанныеЗаполнения.Вставить("Сумма", ВыборкаГруппировки.СуммаКОплате);
			ДанныеЗаполнения.Вставить("Валюта", ВыборкаГруппировки.Валюта);
			ДанныеЗаполнения.Вставить("НесколькоЗаявокНаРасходованиеСредств", МассивСсылок.Количество() > 1);
			ДанныеЗаполнения.Вставить("СуммыКОплате", СуммыКОплате);
		Иначе
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("БанковскийСчет", ОписаниеТипаБанковскийСчет.ПривестиЗначение(ВыборкаГруппировки.БанковскийСчетКасса));
			ДанныеЗаполнения.Вставить("Касса", ОписаниеТипаКасса.ПривестиЗначение(ВыборкаГруппировки.БанковскийСчетКасса));
			ДанныеЗаполнения.Вставить("Контрагент", ВыборкаГруппировки.ПлательщикПолучатель);
			ДанныеЗаполнения.Вставить("Организация", ВыборкаГруппировки.Организация);
			ДанныеЗаполнения.Вставить("Валюта", ВыборкаГруппировки.Валюта);
			
			Если ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию Тогда
				Если ТипДокумента = "ПриходныйКассовыйОрдер" Или ТипДокумента = "ПоступлениеБезналичныхДенежныхСредств" Тогда
					ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
				Иначе
					ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
				КонецЕсли;
			ИначеЕсли ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
				Или ВыборкаГруппировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным Тогда
				
				ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ВыборкаГруппировки.ХозяйственнаяОперация);
			КонецЕсли;
			ДанныеЗаполнения.Вставить("Основание", ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаОплаты.Скопировать(ОтобранныеПлатежи)));
		КонецЕсли;
		
		ДокументКСозданию = Новый Структура;
		ДокументКСозданию.Вставить("ТипДокумента", ТипДокумента);
		ДокументКСозданию.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
		ДокументыКСозданию.Добавить(ДокументКСозданию);
	КонецЦикла;
	
	Пока ВыборкаСтроки.НайтиСледующий(Новый Структура("Группируется", Ложь)) Цикл
		
		ДанныеЗаполнения = Неопределено;
		
		Если ТипЗнч(ВыборкаСтроки.ОбъектОплаты) = Тип("ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств")
			//++ Локализация
			Или ТипЗнч(ВыборкаСтроки.ОбъектОплаты) = Тип("ДокументСсылка.УведомлениеОЗачисленииВалюты")
			//-- Локализация
			Или ТипЗнч(ВыборкаСтроки.ОбъектОплаты) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
			Или ТипЗнч(ВыборкаСтроки.ОбъектОплаты) = Тип("ДокументСсылка.ЗаявкаНаКомандировку") Тогда
			
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(ВыборкаСтроки.ОбъектОплаты);
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("ДокументОснование", МассивСсылок);
			ДанныеЗаполнения.Вставить("БанковскийСчетКасса", ВыборкаСтроки.БанковскийСчетКасса);
			ДанныеЗаполнения.Вставить("ПлательщикПолучатель", ВыборкаСтроки.ПлательщикПолучатель);
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ВыборкаСтроки.ХозяйственнаяОперация);
			ДанныеЗаполнения.Вставить("Сумма", ВыборкаСтроки.СуммаКОплате);
			ДанныеЗаполнения.Вставить("Валюта", ВыборкаСтроки.Валюта);
			ДанныеЗаполнения.Вставить("НесколькоЗаявокНаРасходованиеСредств", Ложь);
			ДанныеЗаполнения.Вставить("ТипСуммы", ВыборкаСтроки.ТипСуммы);
			
		Иначе
			
			Если ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте
				Или ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
				
				ДанныеЗаполнения = Новый Структура;
				ДанныеЗаполнения.Вставить("Организация", ВыборкаСтроки.Организация);
				ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ВыборкаСтроки.ХозяйственнаяОперация);
				ДанныеЗаполнения.Вставить("Валюта", ВыборкаСтроки.Валюта);
				ДанныеЗаполнения.Вставить("СуммаДокумента", ВыборкаСтроки.СуммаКОплате);
				
				ДанныеЗаполнения.Вставить("БанковскийСчетОтправитель", ОписаниеТипаБанковскийСчет.ПривестиЗначение(ВыборкаСтроки.ОбъектОплаты));
				ДанныеЗаполнения.Вставить("КассаОтправитель", ОписаниеТипаКасса.ПривестиЗначение(ВыборкаСтроки.ОбъектОплаты));
				ДанныеЗаполнения.Вставить("Контрагент", ВыборкаСтроки.ОбъектОплаты);
				Если ВыборкаСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка Тогда
					ДанныеЗаполнения.Вставить("БанковскийСчет", ОписаниеТипаБанковскийСчет.ПривестиЗначение(ВыборкаСтроки.ОбъектОплаты));
				Иначе
					ДанныеЗаполнения.Вставить("БанковскийСчет", ОписаниеТипаБанковскийСчет.ПривестиЗначение(ВыборкаСтроки.БанковскийСчет));
				КонецЕсли;
				ДанныеЗаполнения.Вставить("Касса", ВыборкаСтроки.Касса);
				
			Иначе
				
				ДанныеЗаполнения = Новый Структура;
				ДанныеЗаполнения.Вставить("БанковскийСчет", ОписаниеТипаБанковскийСчет.ПривестиЗначение(ВыборкаСтроки.БанковскийСчетКасса));
				ДанныеЗаполнения.Вставить("Касса", ОписаниеТипаКасса.ПривестиЗначение(ВыборкаСтроки.БанковскийСчетКасса));
				ДанныеЗаполнения.Вставить("Контрагент", ВыборкаСтроки.ПлательщикПолучатель);
				ДанныеЗаполнения.Вставить("Организация", ВыборкаСтроки.Организация);
				ДанныеЗаполнения.Вставить("Валюта", ВыборкаСтроки.Валюта);
				ДанныеЗаполнения.Вставить("Основание", ВыборкаСтроки.ОбъектОплаты);
			КонецЕсли;
		КонецЕсли;
		
		ДокументКСозданию = Новый Структура;
		ДокументКСозданию.Вставить("ТипДокумента", ТипДокумента);
		ДокументКСозданию.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
		ДокументыКСозданию.Добавить(ДокументКСозданию);
	КонецЦикла;
	
	Пока ВыборкаВыплатыПоСписку.Следующий() Цикл
		
		СуммаКОплате = ВыборкаВыплатыПоСписку.СуммаКОплате;
		Выборка = ВыборкаВыплатыПоСписку.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Сумма <= СуммаКОплате Тогда
				
				ДанныеЗаполнения = Новый Структура;
				Для каждого Колонка Из Результат[3].Колонки Цикл
					ДанныеЗаполнения.Вставить(Колонка.Имя);
				КонецЦикла;
				ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
				
				ДокументКСозданию = Новый Структура;
				ДокументКСозданию.Вставить("ТипДокумента", ТипДокумента);
				ДокументКСозданию.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
				ДокументыКСозданию.Добавить(ДокументКСозданию);
				
				СуммаКОплате = СуммаКОплате - Выборка.Сумма;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДокументыКСозданию;
	
КонецФункции

// Создает платежные документы
//
// Параметры:
//    Параметры - Структура - Содержит массив подготовленных данных для заполнения документов
//    АдресРезультата - Строка - Адрес временного хранилища, куда будет помещен массив ссылок на созданные документы.
//
Процедура СоздатьПлатежи(Параметры, АдресРезультата) Экспорт
	
	ДокументыКСозданию = Параметры.ДокументыКСозданию;
	КоличествоДокументов = ДокументыКСозданию.Количество();
	Инд = 1;
	
	СозданныеДокументы = Новый Массив;
	Для каждого ДанныеДокумента Из ДокументыКСозданию Цикл
		
		НовыйДокумент = Документы[ДанныеДокумента.ТипДокумента].СоздатьДокумент();
		НовыйДокумент.Дата = ТекущаяДатаСеанса();
		НовыйДокумент.Заполнить(ДанныеДокумента.ДанныеЗаполнения);
		
		Проводить = Ложь;
		
		НовыйДокумент.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		Если НовыйДокумент.ПроверитьЗаполнение() Тогда
			Если Не (НовыйДокумент.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения")
				И НовыйДокумент.ДополнительныеСвойства.ОшибкиЗаполнения <> "") Тогда
				Проводить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось записать документ.'");
			ЗаписьЖурналаРегистрации(
				ТекстОшибки,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если Проводить Тогда
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстОшибки = НСтр("ru = 'Не удалось провести документ.'");
				ЗаписьЖурналаРегистрации(
					ТекстОшибки,
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
		Если НовыйДокумент.Ссылка <> Неопределено Тогда
			СозданныеДокументы.Добавить(НовыйДокумент.Ссылка);
		КонецЕсли;
		
		Прогресс = Окр(Инд / КоличествоДокументов * 100);
		ДлительныеОперации.СообщитьПрогресс(Прогресс);
		
		Инд = Инд + 1;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СозданныеДокументы, АдресРезультата);
	
	КлючВременногоХранилища = "ПомощникФормированияПлатежныхДокументов";
	Если Параметры.Свойство("КлючВременногоХранилища") Тогда
		КлючВременногоХранилища = Параметры.КлючВременногоХранилища;
	КонецЕсли;
	
	Владелец = Пользователи.АвторизованныйПользователь();
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, АдресРезультата, КлючВременногоХранилища);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Удаляет платежные документы
//
// Параметры:
//    СсылкиНаУдаление - Массив - Ссылки на удаляемые документы
//    АдресРезультата - Строка - Адрес временного хранилища, куда будут помещены ошибки при их наличии.
//
Процедура УдалитьПлатежи(СсылкиНаУдаление, АдресРезультата) Экспорт
	
	ДокументыКУдалению = Новый Массив;
	ОбъектыРасчетовКУдалению = Новый Массив;
	МассивПомеченныхНаУдаление = Новый Массив;
	СписокОшибок = Неопределено;
	ПрепятствующиеУдалению = Новый ТаблицаЗначений;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектыРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектыРасчетовПоСсылкам(СсылкиНаУдаление);
	
	Для каждого СсылкаНаУдаление Из СсылкиНаУдаление Цикл
		ДокументОбъект = СсылкаНаУдаление.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				СписокОшибок, "Объект.СозданныеДокументы", ОписаниеОшибки(), Неопределено);
			Продолжить;
		КонецПопытки;
		ДокументыКУдалению.Добавить(СсылкаНаУдаление);
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		
		ОбъектРасчетов = ОбъектыРасчетов.Получить(СсылкаНаУдаление);
		Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
			ОбъектРасчетовОбъект = ОбъектРасчетов.ПолучитьОбъект();
			ОбъектРасчетовОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
	ТабСсылок = НайтиПоСсылкам(ДокументыКУдалению);
	СтрСообщения = НСтр("ru = 'Имеются ссылки на объект %1 в %2. Документ не будет удален.'");
	Для каждого Ссылка Из ТабСсылок Цикл
		Если ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКРаспределениюРасчетовСКлиентами")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКРаспределениюРасчетовСПоставщиками")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ЗаданияКЗакрытиюМесяца")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.РеестрДокументов")
			Или ТипЗнч(Ссылка[1]) = Тип("СправочникСсылка.ОбъектыРасчетов")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ВспомогательнаяИнформацияВзаиморасчетов")
			//++ Локализация
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.СостоянияОбменСБанками")
			//-- Локализация
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ДокументыСОшибкамиПроверкиКонтрагентов")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ГрафикПлатежей")
			Или ТипЗнч(Ссылка[1]) = Тип("РегистрСведенийКлючЗаписи.ДанныеПервичныхДокументов")
			Тогда
				Продолжить;
		КонецЕсли;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения, СокрЛП(Ссылка[0]), СокрЛП(Ссылка[1]));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			СписокОшибок, "Объект.СозданныеДокументы", ТекстОшибки, Неопределено);
		Индекс = ДокументыКУдалению.Найти(Ссылка[0]);
		Если Индекс <> Неопределено Тогда
			ДокументыКУдалению.Удалить(Индекс);
		КонецЕсли;
		МассивПомеченныхНаУдаление.Добавить(Ссылка[0]);
	КонецЦикла;
	
	Для каждого ДокументКУдалению Из ДокументыКУдалению Цикл
		ОбъектРасчетов = ОбъектыРасчетов.Получить(ДокументКУдалению);
		Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
			ОбъектыРасчетовКУдалению.Добавить(ОбъектРасчетов);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		УдалитьОбъекты(ОбъектыРасчетовКУдалению, Ложь);
		УдалитьОбъекты(ДокументыКУдалению, Ложь);
	Исключение
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			СписокОшибок, "Объект.СозданныеДокументы", ОписаниеОшибки(), Неопределено);
	КонецПопытки;
	
	Для каждого СсылкаНаУдаление Из МассивПомеченныхНаУдаление Цикл
		ДокументОбъект = СсылкаНаУдаление.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоместитьВоВременноеХранилище(СписокОшибок, АдресРезультата);
	
КонецПроцедуры

Процедура ЗаполнитьШапкуПоДаннымРасшифровки(Объект) Экспорт
	
	МассивПартнеры = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(
		Объект.РасшифровкаПлатежа.ВыгрузитьКолонку("Партнер"));
	Если МассивПартнеры.Количество() = 1 Тогда
		Объект.Партнер = МассивПартнеры[0];
	Иначе
		Объект.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "Партнер");
	КонецЕсли;
	
	ОчиститьНалогообложениеНДС(Объект);
	
КонецПроцедуры

// Определяет строки графика платежей, подлежащие оплате
//
// Параметры:
//    ОбъектыОплаты - Массив, ДокументСсылка - Оплачиваемые объекты
//
// Возвращаемое значение:
//    Массив - Ключи записей регистра График платежей
//
Функция СтрокиГрафикаКОплате(Знач ОбъектыОплаты) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипЗнч(ОбъектыОплаты) <> Тип("Массив") Тогда
		ОбъектОплаты = ОбъектыОплаты;
		ОбъектыОплаты = Новый Массив;
		ОбъектыОплаты.Добавить(ОбъектОплаты);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеРегистра.ОбъектОплаты КАК ОбъектОплаты,
	|	ДанныеРегистра.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ДанныеРегистра.ДатаПлатежа КАК ДатаПлатежа,
	|	ДанныеРегистра.ПлательщикПолучатель КАК ПлательщикПолучатель,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ТипСуммы КАК ТипСуммы,
	|	ДанныеРегистра.ПоступлениеСписание КАК ПоступлениеСписание,
	|	ДанныеРегистра.Валюта КАК Валюта
	|ИЗ
	|	РегистрСведений.ГрафикПлатежей КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ОбъектОплаты В (&ОбъектыОплаты)
	|	И ДанныеРегистра.ДатаПлатежа <= &ТекущаяДата
	|;
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеРегистра.ОбъектОплаты КАК ОбъектОплаты,
	|	ДанныеРегистра.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ДанныеРегистра.ДатаПлатежа КАК ДатаПлатежа,
	|	ДанныеРегистра.ПлательщикПолучатель КАК ПлательщикПолучатель,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ТипСуммы КАК ТипСуммы,
	|	ДанныеРегистра.ПоступлениеСписание КАК ПоступлениеСписание,
	|	ДанныеРегистра.Валюта КАК Валюта
	|ИЗ
	|	РегистрСведений.ГрафикПлатежей КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ОбъектОплаты В (&ОбъектыОплаты)
	|	И ДанныеРегистра.ДатаПлатежа > &ТекущаяДата
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|";
	
	Запрос.УстановитьПараметр("ОбъектыОплаты", ОбъектыОплаты);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[0].Пустой() Тогда
		ИндексВыборки = 1;
	Иначе
		ИндексВыборки = 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[ИндексВыборки].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураКлюча = Новый Структура;
		Для каждого Колонка Из РезультатЗапроса[ИндексВыборки].Колонки Цикл
			СтруктураКлюча.Вставить(Колонка.Имя);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтруктураКлюча, Выборка);
		
		КлючЗаписи = РегистрыСведений.ГрафикПлатежей.СоздатьКлючЗаписи(СтруктураКлюча);
		Результат.Добавить(КлючЗаписи);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует структуру данных для заполнения документа возврата платежа на основании заказа клиенту
//
// Параметры:
//	ЗаказКлиента - ДокументСсылка.ЗаказКлиента
//	ДокументОбъектЗаполнения - ДокументОбъект - документ заполнения
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - форма оплаты по заказу клиента
//
// Возвращаемое значение:
//	Структура - структура данных для заполнения документа
//
Функция СформироватьДанныеЗаполненияПоВозвратуПлатежаОтЗаказКлиента(ЗаказКлиента, ДокументОбъектЗаполнения, ФормаОплаты = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(БанковскиеСчетаОрганизаций.Владелец, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|		КОГДА ЗаказКлиента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(Кассы.Владелец, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|		ИНАЧЕ ЗаказКлиента.Организация
		|	КОНЕЦ КАК Организация,
		|	ЗаказКлиента.Касса КАК Касса,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
		|			ТОГДА ЗаказКлиента.Договор.БанковскийСчет
		|		ИНАЧЕ ЗаказКлиента.БанковскийСчет
		|	КОНЕЦ КАК БанковскийСчет,
		|	ЗаказКлиента.ФормаОплаты КАК ФормаОплатыЗаявки,
		|	ВЫБОР
		|		КОГДА &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ФормаОплатыНаличная,
		|	ВЫБОР
		|		КОГДА &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ФормаОплатыБезналичная,
		|	ЗаказКлиента.Валюта КАК ВалютаВзаиморасчетов,
		|	ЗаказКлиента.Контрагент КАК Контрагент,
		|	ЗаказКлиента.Договор КАК Договор,
		|	ЗаказКлиента.Партнер КАК Партнер,
		|	ЗаказКлиента.Ссылка КАК ДокументОснование,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|		КОГДА ЗаказКлиента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
		|			ТОГДА ЗаказКлиента.Касса.ВалютаДенежныхСредств
		|		ИНАЧЕ ЕСТЬNULL(ЗаказКлиента.Договор.БанковскийСчет.ВалютаДенежныхСредств, ЗаказКлиента.Валюта)
		|	КОНЕЦ КАК Валюта,
		|	ЗаказКлиента.Подразделение КАК Подразделение,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ПлатежиПо275ФЗ, ЛОЖЬ) КАК ПлатежиПо275ФЗ,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ИностранныйИсполнительВУтвержденномПеречнеГОЗ, ЛОЖЬ) КАК ИностранныйИсполнительВУтвержденномПеречнеГОЗ,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ДоговорСУчастникомГОЗ, ЛОЖЬ) КАК ДоговорСУчастникомГОЗ,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ОплатаРасходовПоТарифамСГосрегулированием, ЛОЖЬ) КАК ОплатаРасходовПоТарифамСГосрегулированием,
		|	ЗаказКлиента.Валюта КАК ВалютаДокумента,
		|	ЗаказКлиента.Приоритет КАК Приоритет,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.НаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|			ТОГДА ЗаказКлиента.НаправлениеДеятельности
		|		КОГДА ЗаказКлиента.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА ДоговорыКонтрагентов.НаправлениеДеятельности
		|		КОГДА ЗаказКлиента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
		|			ТОГДА Кассы.НаправлениеДеятельности
		|		ИНАЧЕ БанковскиеСчетаОрганизаций.НаправлениеДеятельности
		|	КОНЕЦ КАК НаправлениеДеятельности,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
		|				И ЕСТЬNULL(Кассы.РазрешитьПлатежиБезУказанияЗаявок, ЛОЖЬ) = ЛОЖЬ
		|			ТОГДА ИСТИНА
		|		КОГДА ЗаказКлиента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
		|				И ЕСТЬNULL(БанковскиеСчетаОрганизаций.РазрешитьПлатежиБезУказанияЗаявок, ЛОЖЬ) = ЛОЖЬ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОплатаПоЗаявкам
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|		ПО ЗаказКлиента.БанковскийСчет = БанковскиеСчетаОрганизаций.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
		|		ПО ЗаказКлиента.Касса = Кассы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ЗаказКлиента.Договор = ДоговорыКонтрагентов.Ссылка
		|ГДЕ
		|	ЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|	И ЗаказКлиента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказКлиента);
	Запрос.УстановитьПараметр("ФормаОплаты", ФормаОплаты);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		МетаданныеОбъекта = ДокументОбъектЗаполнения.Метаданные();
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не требуется вводить документ %1 на основании документа %2'"),
				МетаданныеОбъекта.ПредставлениеОбъекта,
				ЗаказКлиента);
		
		ВызватьИсключение Текст;
		
	КонецЕсли;

	ДанныеЗаполнения = Новый Структура;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ВыборкаДетальныхЗаписей = РезультатЗапроса.Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныхЗаписей.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаДетальныхЗаписей);
	
	Если ФормаОплаты = Неопределено Тогда
		ФормаОплаты = ДанныеЗаполнения.ФормаОплатыЗаявки;
	КонецЕсли;
	
	ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения);
	
	Если Не ЗначениеЗаполнено(ФормаОплаты) Тогда
		
		ДанныеЗаполнения.ФормаОплатыНаличная = Истина;
		ДанныеЗаполнения.ФормаОплатыБезналичная = Истина;
		
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("БанковскийСчетКонтрагента");
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
		ДанныеЗаполнения.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			ДанныеЗаполнения.Контрагент,
			ДанныеЗаполнения.Валюта);
	Иначе
		ДанныеЗаполнения.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			ДанныеЗаполнения.Контрагент);
	КонецЕсли;
		
	РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(
			ДанныеЗаполнения.БанковскийСчетКонтрагента);
	ДанныеЗаполнения.Вставить("НазначениеПлатежа", РеквизитыСчета.ТекстНазначения);
	
	ДанныеЗаполнения.Вставить("ЖелательнаяДатаПлатежа", ТекущаяДатаСеанса());	
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Заполняет табличную часть РасшифровкаПлатежа документов платежа по заказу клиента
//
// Параметры:
//	ДанныеЗаполнения - Структура - структура основных данных документа Заказ клиента 
//	ТабличнаяЧастьРасшифровкаПлатежа - ТабличнаяЧасть - табличная часть документа платежа
//
Процедура ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(ДанныеЗаполнения, ТабличнаяЧастьРасшифровкаПлатежа) Экспорт
	
	ПараметрыДанных = ВзаиморасчетыСервер.ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу();
	ПараметрыДанных.ЗаказКлиента     = ДанныеЗаполнения.ДокументОснование;
	ПараметрыДанных.Договор          = ДанныеЗаполнения.Договор;
	ПараметрыДанных.ВалютаДокумента  = ДанныеЗаполнения.Валюта;
	ПараметрыДанных.Партнер          = ДанныеЗаполнения.Партнер;
	ПараметрыДанных.ОснованиеПлатежа = ДанныеЗаполнения.ДокументОснование;
	
	ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(ПараметрыДанных,
																	ТабличнаяЧастьРасшифровкаПлатежа,
																	0,
																	ДанныеЗаполнения.Организация,
																	ДанныеЗаполнения.ХозяйственнаяОперация);
	
КонецПроцедуры

// Формирует структуру данных для заполнения документа возврата платежа на основании поступления безналичных денежных средств
//
// Параметры:
//	ДокументПоступления - ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств
//
// Возвращаемое значение:
//	Структура - структура данных для заполнения документа
//
Функция СформироватьДанныеЗаполненияПоВозвратуПлатежаОтПоступленияБезналичныхДенежныхСредств(ДокументПоступления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеБезналичныхДенежныхСредств.Организация КАК Организация,
		|	ПоступлениеБезналичныхДенежныхСредств.БанковскийСчет КАК БанковскийСчет,
		|	ПоступлениеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) КАК ФормаОплатыЗаявки,
		|	ЛОЖЬ КАК ФормаОплатыНаличная,
		|	ИСТИНА КАК ФормаОплатыБезналичная,
		|	ПоступлениеБезналичныхДенежныхСредств.Контрагент КАК Контрагент,
		|	ПоступлениеБезналичныхДенежныхСредств.Договор КАК Договор,
		|	ПоступлениеБезналичныхДенежныхСредств.Партнер КАК Партнер,
		|	ПоступлениеБезналичныхДенежныхСредств.Ссылка КАК ДокументОснование,
		|	ПоступлениеБезналичныхДенежныхСредств.СуммаДокумента КАК СуммаДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ПлатежиПо275ФЗ, ЛОЖЬ) КАК ПлатежиПо275ФЗ,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ИностранныйИсполнительВУтвержденномПеречнеГОЗ, ЛОЖЬ) КАК ИностранныйИсполнительВУтвержденномПеречнеГОЗ,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ДоговорСУчастникомГОЗ, ЛОЖЬ) КАК ДоговорСУчастникомГОЗ,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ОплатаРасходовПоТарифамСГосрегулированием, ЛОЖЬ) КАК ОплатаРасходовПоТарифамСГосрегулированием,
		|	ПоступлениеБезналичныхДенежныхСредств.Валюта КАК Валюта,
		|	ПоступлениеБезналичныхДенежныхСредств.Валюта КАК ВалютаВзаиморасчетов,
		|	ПоступлениеБезналичныхДенежныхСредств.ХозяйственнаяОперация КАК ХозяйственнаяОперацияДокументаОснования,
		|	ВЫБОР
		|		КОГДА ПоступлениеБезналичныхДенежныхСредств.БанковскийСчетОтправитель <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
		|			ТОГДА ПоступлениеБезналичныхДенежныхСредств.БанковскийСчетОтправитель.Владелец
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	КОНЕЦ КАК ОрганизацияПолучатель,
		|	ПоступлениеБезналичныхДенежныхСредств.БанковскийСчетОтправитель КАК БанковскийСчетПолучатель,
		|	ПоступлениеБезналичныхДенежныхСредств.Подразделение КАК Подразделение,
		|	ПоступлениеБезналичныхДенежныхСредств.ДоговорЭквайринга КАК ДоговорЭквайринга
		|ИЗ
		|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ПоступлениеБезналичныхДенежныхСредств.Договор = ДоговорыКонтрагентов.Ссылка
		|ГДЕ
		|	ПоступлениеБезналичныхДенежныхСредств.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПоступления);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ВыборкаДетальныхЗаписей = РезультатЗапроса.Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныхЗаписей.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаДетальныхЗаписей);
	
	Если ДанныеЗаполнения.ХозяйственнаяОперацияДокументаОснования = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте Тогда
		ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту;		
	ИначеЕсли ДанныеЗаполнения.ХозяйственнаяОперацияДокументаОснования = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации;
	КонецЕсли;	
	
	ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения.ФормаОплатыЗаявки, ДанныеЗаполнения, ДанныеЗаполнения.ВалютаВзаиморасчетов);
	
	РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(
						ДанныеЗаполнения.БанковскийСчетКонтрагента);
	ДанныеЗаполнения.Вставить("НазначениеПлатежа", РеквизитыСчета.ТекстНазначения);
	
	ДанныеЗаполнения.Вставить("ЖелательнаяДатаПлатежа", ТекущаяДатаСеанса());
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Заполняет табличную часть РасшифровкаПлатежа документов платежа по документам оплаты
//
// Параметры:
//	ДокументОплаты - ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств, ДокументСсылка.ПриходныйКассовыйОрдер - документ основание
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - операция документа платежа
//	ТабличнаяЧастьРасшифровкаПлатежа - ТабличнаяЧасть - табличная часть документа платежа
//
Процедура ЗаполнитьРасшифровкуПлатежаПоДокументуОплаты(ДокументОплаты, ХозяйственнаяОперация, ТабличнаяЧастьРасшифровкаПлатежа) Экспорт
	
	ТаблицаРасшифровки = ДокументОплаты.РасшифровкаПлатежа.Выгрузить();
	
	СтатьяДДС = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ХозяйственнаяОперация);
	ТаблицаРасшифровки.ЗаполнитьЗначения(СтатьяДДС, "СтатьяДвиженияДенежныхСредств");
	
	ТабличнаяЧастьРасшифровкаПлатежа.Загрузить(ТаблицаРасшифровки);
	
КонецПроцедуры

// Формирует структуру данных для заполнения документа возврата платежа на основании приходного кассового ордера
//
// Параметры:
//	ДокументПоступления - ДокументСсылка.ПриходныйКассовыйОрдер
//
// Возвращаемое значение:
//	Структура - структура данных для заполнения документа
//
Функция СформироватьДанныеЗаполненияПоВозвратуПлатежаОтПриходногоКассовогоОрдера(ДокументПоступления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйКассовыйОрдер.Организация КАК Организация,
		|	ПриходныйКассовыйОрдер.Касса КАК Касса,
		|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) КАК ФормаОплатыЗаявки,
		|	ИСТИНА КАК ФормаОплатыНаличная,
		|	ЛОЖЬ КАК ФормаОплатыБезналичная,
		|	ПриходныйКассовыйОрдер.Контрагент КАК Контрагент,
		|	ПриходныйКассовыйОрдер.Договор КАК Договор,
		|	ПриходныйКассовыйОрдер.Партнер КАК Партнер,
		|	ПриходныйКассовыйОрдер.Ссылка КАК ДокументОснование,
		|	ПриходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента,
		|	ПриходныйКассовыйОрдер.Валюта КАК ВалютаВзаиморасчетов,
		|	ПриходныйКассовыйОрдер.Валюта КАК ВалютаДокумента,
		|	Кассы.ВалютаДенежныхСредств КАК Валюта,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
		|	ПриходныйКассовыйОрдер.ХозяйственнаяОперация КАК ХозяйственнаяОперацияДокументаОснования,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ПлатежиПо275ФЗ, ЛОЖЬ) КАК ПлатежиПо275ФЗ,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ИностранныйИсполнительВУтвержденномПеречнеГОЗ, ЛОЖЬ) КАК ИностранныйИсполнительВУтвержденномПеречнеГОЗ,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ДоговорСУчастникомГОЗ, ЛОЖЬ) КАК ДоговорСУчастникомГОЗ,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ОплатаРасходовПоТарифамСГосрегулированием, ЛОЖЬ) КАК ОплатаРасходовПоТарифамСГосрегулированием,
		|	ПриходныйКассовыйОрдер.БанковскийСчет КАК БанковскийСчет,
		|	ПриходныйКассовыйОрдер.Подразделение КАК Подразделение,
		|	ПриходныйКассовыйОрдер.КассаОтправитель КАК КассаПолучатель,
		|	ВЫБОР
		|		КОГДА НЕ Кассы.РазрешитьПлатежиБезУказанияЗаявок
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОплатаПоЗаявкам
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
		|		ПО ПриходныйКассовыйОрдер.Касса = Кассы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ПриходныйКассовыйОрдер.Договор = ДоговорыКонтрагентов.Ссылка
		|ГДЕ
		|	ПриходныйКассовыйОрдер.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПоступления);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;	
	
	ВыборкаДетальныхЗаписей = РезультатЗапроса.Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныхЗаписей.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаДетальныхЗаписей);
	
	Если ДанныеЗаполнения.ХозяйственнаяОперацияДокументаОснования = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию;
	КонецЕсли;
		
	ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения.ФормаОплатыЗаявки, ДанныеЗаполнения, ДанныеЗаполнения.ВалютаВзаиморасчетов);
	
	ДанныеЗаполнения.Вставить("БанковскийСчетКонтрагента");
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
		ДанныеЗаполнения.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			ДанныеЗаполнения.Контрагент,
			ДанныеЗаполнения.Валюта);
	Иначе
		ДанныеЗаполнения.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			ДанныеЗаполнения.Контрагент);
	КонецЕсли;
	
	РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(
						ДанныеЗаполнения.БанковскийСчетКонтрагента);
	ДанныеЗаполнения.Вставить("НазначениеПлатежа", РеквизитыСчета.ТекстНазначения);
	
	ДанныеЗаполнения.Вставить("ЖелательнаяДатаПлатежа", ТекущаяДатаСеанса());	
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

#КонецОбласти

#Область ОбменСБанками

// Проверяет принадлежность хозяйственной операции к множеству операций по зарплате.
//
// Параметры:
//    ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операция.
//
// Возвращаемое значение:
//    Булево - Признак принадлежности.
//
Функция ОперацияПоЗарплате(ХозяйственнаяОперация) Экспорт
	
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС);
	
	Если МассивОпераций.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выделяет в назначении платежа фиксированную часть без служебных символов, слов менее 2 символов, чисел.
//
// Параметры:
//    ВремСтрока - Строка - Преобразуемая строка.
//
// Возвращаемое значение:
//    Строка - Форматированная строка назначения.
//
Функция ФорматироватьНазначениеПлатежа(Знач ВремСтрока) Экспорт
	
	НедопустимыеСимволы = "0123456789""/\[]:;|=?*<>.,-_(){}+-=№@";
	
	Для Позиция = 1 По СтрДлина(НедопустимыеСимволы) Цикл
		ВремСтрока = СтрЗаменить(ВремСтрока, Сред(НедопустимыеСимволы, Позиция, 1), " ");
	КонецЦикла;
	
	МассивСлов = РазложитьСтрокуНазначенияВМассивСлов(ВремСтрока);
	
	СтрокаРезультат = СтрСоединить(МассивСлов, " ");
	
	Возврат СокрЛП(СтрокаРезультат);
	
КонецФункции

// Структура данных операции из выписки при чтении из файла.
// 
// Возвращаемое значение:
//  Структура - Описание:
//   * Номер - Строка - номер документа
//   * Дата - Дата - дата документа
//   * Сумма - Число - сумма документа
//   * ДатаОперации - Дата - дата проведения операции
//   * НаправлениеПлатежа - Строка - "1" - списание с расчетного счета, "2" - поступление на расчетный счет
//   * Идентификатор - Строка - уникальный идентификатор операции
//   * Плательщик - Строка - наименование плательщика
//   * ПлательщикИНН - Строка - ИНН плательщика
//   * ПлательщикСчет - Строка - номер счета плательщика
//   * ПлательщикСтрана - Строка - страна плательщика
//   * ПлательщикБанкSWIFT - Строка - SWIFT банка плательщика
//   * ПлательщикБанк - Строка - наименование банка плательщика
//   * Получатель - Строка - наименование получателя
//   * ПолучательИНН - Строка - ИНН получателя
//   * ПолучательСчет - Строка - номер счета получателя
//   * ПолучательСтрана - Строка - страна получателя
//   * ПолучательБанкSWIFT - Строка - SWIFT банка получателя
//   * ПолучательБанк - Строка - наименование банка получателя
//   * НазначениеПлатежа - Строка - назначение платежа.
Функция ДанныеЗагружаемойОперации() Экспорт
	
	Возврат Новый Структура(
		"Номер,
		|Дата,
		|Сумма,
		|ДатаОперации,
		|НаправлениеПлатежа,
		|Идентификатор,
		|Плательщик,
		|ПлательщикИНН,
		|ПлательщикСчет,
		|ПлательщикСтрана,
		|ПлательщикБанкSWIFT,
		|ПлательщикБанк,
		|Получатель,
		|ПолучательИНН,
		|ПолучательСчет,
		|ПолучательСтрана,
		|ПолучательБанкSWIFT,
		|ПолучательБанк,
		|НазначениеПлатежа");
	
КонецФункции

// Шаблон структуры заголовка, который используется при чтении данных выписки из файла
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Отправитель - Строка - банк, от которого получена выписка
// * ДатаСоздания - Дата - дата и время формирования файла
// * ДатаНачала - Дата - дата начала периода выписки
// * ДатаКонца - Дата - дата конца периода выписки.
Функция ЗаголовокВыписки() Экспорт
	
	Возврат Новый Структура("Отправитель, ДатаСоздания, ДатаНачала, ДатаКонца");
	
КонецФункции

#КонецОбласти

#Область ПроверкиЗаполненияДокументов

// Функция формирует запрос по табличной части "Расшифровка платежа".
//
// Параметры:
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//	Организация - СправочникСсылка.Организации - Организация документа
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//	ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - объект расчетов владельца расшифровки платежа.
//
// Возвращаемое значение:
//	Запрос - запрос по табличной части.
//
Функция ЗапросПоТабличнойЧастиРасшифровкаПлатежа(РасшифровкаПлатежа, Организация, ХозяйственнаяОперация = Неопределено, ОбъектРасчетов = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|
	|	ВЫБОР КОГДА ТаблицаДокумента.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка)
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		И &ИспользоватьСчетаНаОплатуКлиентам
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ПроверкаСчетаНаОплату
	|
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.ОбъектРасчетов.Организация НЕ В(&Организация)
	|	И &ОтборПоТипу
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	
	ТаблицаДокумента = РасшифровкаПлатежа.Выгрузить();
	Если ТаблицаДокумента.Колонки.Найти("СчетНаОплату") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуКлиенту"));
	КонецЕсли;
	КолонкаЗаказИзДокумента = ТаблицаДокумента.Колонки.Найти("ОбъектРасчетов");
	КолонкаЗаказИзДокумента.Имя = "ЗаказИзДокумента";
	МассивДобавляемыхТипов = Новый Массив;
	МассивДобавляемыхТипов.Добавить(Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"));
	МассивДобавляемыхТипов.Добавить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"));
	ТаблицаДокумента.Колонки.Добавить("ОбъектРасчетов", Новый ОписаниеТипов(КолонкаЗаказИзДокумента.ТипЗначения, МассивДобавляемыхТипов));
	ТаблицаДокумента.ЗагрузитьКолонку(ТаблицаДокумента.ВыгрузитьКолонку(КолонкаЗаказИзДокумента), "ОбъектРасчетов");
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ИспользоватьСчетаНаОплатуКлиентам", ПолучитьФункциональнуюОпцию("ИспользоватьСчетаНаОплатуКлиентам"));
	
	Если ОбъектРасчетов <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ОтборПоТипу","ТаблицаДокумента.ОбъектРасчетов <> &ОбъектРасчетов");
		Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ОтборПоТипу","ИСТИНА");
	КонецЕсли;
	
	ДоступныеОрганизации = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		ЗапросПоДоступнымОрганизациям = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Организации.ГоловнаяОрганизация КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Филиалы.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Филиалы
		|ГДЕ
		|	Филиалы.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию
		|	И ИСТИНА В (ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Справочник.Организации КАК ГоловныеОрганизации
		|			ГДЕ
		|				ГоловныеОрганизации.Ссылка В (&Организация)
		|				И Филиалы.ГоловнаяОрганизация = ГоловныеОрганизации.ГоловнаяОрганизация
		|	)");
		ЗапросПоДоступнымОрганизациям.УстановитьПараметр("Организация", Организация);
		
		ДоступныеОрганизации = ЗапросПоДоступнымОрганизациям.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	ДоступныеОрганизации.Добавить(Организация);
	
	Запрос.УстановитьПараметр("Организация", ДоступныеОрганизации);
	
	Возврат Запрос;
	
КонецФункции // ЗапросПоТабличнойЧастиРасшифровкаПлатежа()

// Процедура проверяет заполнение табличной части "Расшифровка платежа".
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Документ
//	СуммаДокумента - Число - Общая сумма документа
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	Отказ - Булево - Признак отказа от продолжения работы
//	ФлагОбменСБанками - Булево - Признак использования при обмене с банками
//	ОшибкиЗаполнения - Строка - Строка, накапливающая ошибки проверок.
//
Процедура ПроверитьЗаполнениеРасшифровкиПлатежа(
	ДокументОбъект,
	СуммаДокумента,
	ХозяйственнаяОперация,
	Отказ,
	ФлагОбменСБанками = Ложь,
	ОшибкиЗаполнения = ""
	) Экспорт
	
	МассивНепроверяемыхОпераций = Новый Массив;
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту);
	
	Если МассивНепроверяемыхОпераций.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим соответствие сумм документа и табличной части.
	Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0
		И СуммаДокумента <> ДокументОбъект.РасшифровкаПлатежа.Итог("Сумма")
	Тогда
		Текст = НСтр("ru = 'Сумма по строкам в табличной части должна равняться сумме документа'");
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст, ДокументОбъект, "РасшифровкаПлатежа[0].Сумма",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Проверим соответствие организации в шапке документа и в табличной части.
	Запрос = ЗапросПоТабличнойЧастиРасшифровкаПлатежа(
		ДокументОбъект.РасшифровкаПлатежа,
		ДокументОбъект.Организация,
		ХозяйственнаяОперация,
		ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ДокументОбъект.Ссылка));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.ПроверкаСчетаНаОплату Тогда
			ТекстДокумент = НСтр("ru = 'счете на оплату'");
			ИмяПоля = "СчетНаОПлату";
		Иначе
			ТекстДокумент = НСтр("ru = 'объекте расчетов'");
			ИмяПоля = "ОбъектРасчетов";
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
			Поле = "УменьшенДолгСтрокой";
			КлючДанных = Неопределено;
		Иначе
			Поле = "РасшифровкаПлатежа[" + (Выборка.НомерСтроки - 1) + "]." + ИмяПоля;
			КлючДанных = ДокументОбъект;
		КонецЕсли;
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Организация в %1 в строке %2 списка ""Расшифровка платежа"" не соответствует организации документа %3'"),
			ТекстДокумент,
			Выборка.НомерСтроки,
			ДокументОбъект.Организация);
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				КлючДанных,
				Поле,
				,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеРасшифровкиПлатежа()

// Процедура проверки заявки на расходование денежных средств, указанной в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Документ
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьЗаявкуНаРасходованиеДенежныхСредств(
	ДокументОбъект,
	Отказ
	) Экспорт
	
	МассивНепроверяемыхОпераций = Новый Массив;
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств")
		И МассивНепроверяемыхОпераций.Найти(ДокументОбъект.ХозяйственнаяОперация) = Неопределено Тогда
		
		Если Не ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте") Тогда
			
			Если Не ДокументОбъект.ОплатаПоЗаявкам Тогда
				Возврат;
			КонецЕсли;
		
			МассивЗаявок = ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ЗаявкаНаРасходованиеДенежныхСредств");
			
			Если Не МассивЗаявок.Количество() Тогда
				Возврат;
			КонецЕсли;
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Представление(ДанныеДокумента.Ссылка) КАК Заявка,
			|	
			|	ВЫБОР КОГДА ДанныеДокумента.Организация <> &Организация ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ЕстьОтличияВОрганизации,
			|	
			|	ВЫБОР КОГДА ДанныеДокумента.ПланированиеСуммы В (
			|		ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ПустаяСсылка),
			|		ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа))
			|		И ДанныеДокумента.Валюта <> &Валюта ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ЕстьОтличияВалюты,
			|	
			|	ВЫБОР КОГДА ДанныеДокумента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате) ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ЗаявкаНеУтвержденаКОплате
			|	
			|ИЗ
			|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка В (&МассивЗаявок)
			|");
		
			Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
			Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
			Запрос.УстановитьПараметр("Валюта", ДокументОбъект.Валюта);
			Запрос.УстановитьПараметр("ДокументОплатыСсылка", ДокументОбъект.Ссылка);
			
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
				БанковскийСчетКасса = ДокументОбъект.Касса;
			ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
				БанковскийСчетКасса = ДокументОбъект.БанковскийСчет;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("БанковскийСчетКасса", БанковскийСчетКасса);
			
			ТаблицаПроверки = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрокаПроверки Из ТаблицаПроверки Цикл
				
				Если СтрокаПроверки.ЕстьОтличияВОрганизации Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Организация документа %1 не соответствует организации в %2'"),
						ДокументОбъект.Организация,
						СтрокаПроверки.Заявка);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументОбъект,
						"",
						,
						Отказ);
				КонецЕсли;
				
				Если СтрокаПроверки.ЕстьОтличияВалюты Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Валюта документа %1 не соответствует валюте в %2'"),
						ДокументОбъект.Валюта,
						СтрокаПроверки.Заявка);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументОбъект,
						"",
						,
						Отказ);
				КонецЕсли;
				
				Если СтрокаПроверки.ЗаявкаНеУтвержденаКОплате Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 не утверждена к оплате'"),
						СтрокаПроверки.Заявка);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументОбъект,
						"",
						,
						Отказ);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаявкуНаРасходованиеДенежныхСредств()

// ВыборкаРеквизитыШапки - ВыборкаИзРезультатаЗапроса - Выборка
// Процедура проверки распоряжения на перемещение денежных средств, указанного в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Документ
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьРаспоряжениеНаПеремещениеДенежныхСредств(
	ДокументОбъект,
	Отказ
	) Экспорт
	
	МассивПроверяемыхОпераций = Новый Массив;
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств")
	   И МассивПроверяемыхОпераций.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.РаспоряжениеНаПеремещениеДенежныхСредств)
	Тогда
	
		Реквизиты = Документы.РаспоряжениеНаПеремещениеДенежныхСредств.РеквизитыДокумента(ДокументОбъект.РаспоряжениеНаПеремещениеДенежныхСредств);
		Если Реквизиты.Организация <> ДокументОбъект.Организация Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Организация в распоряжении не соответствует организации документа %1'"),
				ДокументОбъект.Организация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
		Если Реквизиты.Подразделение <> ДокументОбъект.Подразделение Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подразделение в распоряжении не соответствует подразделению документа %1'"),
				ДокументОбъект.Подразделение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
		Если Реквизиты.Статус <> Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.КОплате Тогда
			
			Текст = НСтр("ru = 'Распоряжение на перемещение денежных средств не утверждено к оплате'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
		Если Реквизиты.Валюта <> ДокументОбъект.Валюта Тогда
			
			Текст = НСтр("ru = 'Валюта распоряжения не соответствует валюте документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьРаспоряжениеНаПеремещениеДенежныхСредств()

// Процедура проверяет кассу получателя, указанную в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьКассуПолучателя(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
		И ЗначениеЗаполнено(ДокументОбъект.КассаПолучатель)
		И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
			И ЗначениеЗаполнено(ДокументОбъект.Касса)
			И ДокументОбъект.Касса = ДокументОбъект.КассаПолучатель Тогда
			
			Текст = НСтр("ru = 'Одна и та же касса не может являться отправителем и получателем одновременно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаПолучатель",
				,
				Отказ);
		Иначе
			
			РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.КассаПолучатель, "Владелец, ВалютаДенежныхСредств");
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И ДокументОбъект.Организация <> РеквизитыКассы.Владелец Тогда
				
				Текст = НСтр("ru = 'Организация кассы получателя не соответствует организации документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыКассы.ВалютаДенежныхСредств Тогда
				Текст = НСтр("ru = 'Валюта кассы получателя не соответствует валюте документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
				И ЗначениеЗаполнено(ДокументОбъект.Касса) И ТипЗнч(ДокументОбъект.КассаПолучатель) <> Тип("СправочникСсылка.КассыККМ") Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ПолучателиПлатежейПриПеремещенииДС.ПолучательПлатежа КАК КассаПолучатель
					|ИЗ
					|	Справочник.Кассы.ПолучателиПлатежейПриПеремещенииДС КАК ПолучателиПлатежейПриПеремещенииДС
					|ГДЕ
					|	ПолучателиПлатежейПриПеремещенииДС.Ссылка = &Касса");
				Запрос.УстановитьПараметр("Касса", ДокументОбъект.Касса);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой()
					И РезультатЗапроса.Выгрузить().Найти(ДокументОбъект.КассаПолучатель) = Неопределено Тогда
					
					Текст = НСтр("ru = 'Касса получатель недоступна для перемещения денежных средств из кассы документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаПолучатель",
						,
						Отказ);
				КонецЕсли;
			
			КонецЕсли;
			
			// Проверка взаимосвязанности организации кассы получателя с организацией кассы отправителя по организационной структуре.
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Владелец) Тогда
				
				Текст = НСтр("ru = 'Организация кассы получателя должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
					
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Владелец) Тогда
				
				Текст = НСтр("ru = 'Организация кассы получателя не должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуПолучателя()

// Процедура проверяет кассу отправителя, указанную в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьКассуОтправителя(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
		И ЗначениеЗаполнено(ДокументОбъект.КассаОтправитель)
		И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
			И ЗначениеЗаполнено(ДокументОбъект.Касса)
			И ДокументОбъект.Касса = ДокументОбъект.КассаОтправитель Тогда
			
			Текст = НСтр("ru = 'Одна и та же касса не может являться отправителем и получателем одновременно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаПолучатель",
				,
				Отказ);
		Иначе
			
			РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.КассаОтправитель, "Владелец, ВалютаДенежныхСредств");
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И ДокументОбъект.Организация <> РеквизитыКассы.Владелец Тогда
				
					Текст = НСтр("ru = 'Организация кассы отправителя не соответствует организации документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаОтправитель",
						,
						Отказ);
			ИначеЕсли (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
				Или ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации)
				И ДокументОбъект.Организация = РеквизитыКассы.Владелец Тогда
				
					Текст = НСтр("ru = 'Организация кассы отправителя должна отличаться от организации документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаОтправитель",
						,
						Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыКассы.ВалютаДенежныхСредств Тогда
				Текст = НСтр("ru = 'Валюта кассы отправителя не соответствует валюте документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаОтправитель",
					,
					Отказ);
			КонецЕсли;
			
			// Проверка взаимосвязанности организации кассы получателя с организацией кассы отправителя по организационной структуре.
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Владелец) Тогда
				
				Текст = НСтр("ru = 'Организация кассы получателя должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаОтправитель",
					,
					Отказ);
					
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Владелец) Тогда
				
				Текст = НСтр("ru = 'Организация кассы получателя не должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаОтправитель",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуОтправителя()

// Процедура проверяет кассу ККМ, указанную в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьКассуККМ(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.КассаККМ)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(ДокументОбъект.КассаККМ);
		Если ДокументОбъект.Организация <> РеквизитыКассыККМ.Организация Тогда
			Текст = НСтр("ru = 'Организация кассы ККМ не соответствует организации документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаККМ",
				,
				Отказ);
		КонецЕсли;
		Если ДокументОбъект.Валюта <> РеквизитыКассыККМ.Валюта Тогда
			Текст = НСтр("ru = 'Валюта кассы ККМ не соответствует валюте документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаККМ",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуККМ()

// Процедура проверяет банковский счет получатель, указанный в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//	ФлагОбменСБанками - Булево - Признак использования при обмене с банками
//	ОшибкиЗаполнения - Строка - Строка, накапливающая ошибки проверок.
//
Процедура ПроверитьБанковскийСчетПолучатель(ДокументОбъект, Отказ, ФлагОбменСБанками = Ложь, ОшибкиЗаполнения = "") Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетПолучатель)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
		   И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет)
		   И ДокументОбъект.БанковскийСчет = ДокументОбъект.БанковскийСчетПолучатель Тогда
		   
			Текст = НСтр("ru = 'Один и тот же банковский счет не может являться отправителем и получателем одновременно'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"БанковскийСчетПолучатель",
					,
					Отказ);
			КонецЕсли;
		Иначе
			
			РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ДокументОбъект.БанковскийСчетПолучатель);
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
			 И ДокументОбъект.Организация <> РеквизитыСчета.Организация Тогда
				Текст = НСтр("ru = 'Организация счета получателя не соответствует организации документа'");
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"БанковскийСчетПолучатель",
						,
						Отказ);
				КонецЕсли;
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыСчета.Валюта Тогда
				Текст = НСтр("ru = 'Валюта счета получателя не соответствует валюте документа'");
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"БанковскийСчетПолучатель",
						,
						Отказ);
				КонецЕсли;
			КонецЕсли;
			
			// Проверка взаимосвязанности организации счета получателя с организацией кассы отправителя по организационной структуре.
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыСчета.Организация) Тогда
				
				Текст = НСтр("ru = 'Организация счета получателя должна быть взаимосвязана с организацией счета отправителя по организационной структуре.'");
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаПолучатель",
						,
						Отказ);
				КонецЕсли;
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДокументОбъект.Организация, РеквизитыСчета.Организация) Тогда
				
				Текст = НСтр("ru = 'Организация счета получателя не должна быть взаимосвязана с организацией счета отправителя по организационной структуре.'");
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаПолучатель",
						,
						Отказ);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПроверитьБанковскийСчетПолучатель()

// Процедура проверяет валюту конвертации, указанную в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//	ФлагОбменСБанками - Булево - Признак использования при обмене с банками
//	ОшибкиЗаполнения - Строка - Строка, накапливающая ошибки проверок.
//
Процедура ПроверитьВалютуКонвертации(ДокументОбъект, Отказ, ФлагОбменСБанками = Ложь, ОшибкиЗаполнения = "") Экспорт
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
	   И ЗначениеЗаполнено(ДокументОбъект.Валюта)
	   И ЗначениеЗаполнено(ДокументОбъект.ВалютаКонвертации)
	Тогда
		
		Если ДокументОбъект.Валюта = ДокументОбъект.ВалютаКонвертации Тогда
			
			Текст = НСтр("ru = 'Валюта конвертации должна отличаться от валюты документа'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"ВалютаКонвертации",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Определяет, разрешены ли платежи без указания заявок на расходование денежных средств.
//
// Параметры:
//    ДокументОбъект - ДокументОбъект - документ, для которого выполняется проверка.
//
// Возвращаемое значение:
//    Булево - Разрешены, или нет.
//
Функция РазрешеныПлатежиБезУказанияЗаявок(ДокументОбъект) Экспорт
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Реквизиты = Справочники.Кассы.ПолучитьРеквизитыКассы(ДокументОбъект.Касса);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		Реквизиты = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(
			ДокументОбъект.БанковскийСчет);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		
		РазрешитьПлатежиБезУказанияЗаявок = Истина;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ЭквайринговыйТерминал) Тогда
			РазрешитьПлатежиБезУказанияЗаявок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ДокументОбъект.ЭквайринговыйТерминал, "РазрешитьПлатежиБезУказанияЗаявок");
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ДоговорЭквайринга) Тогда
			РазрешитьПлатежиБезУказанияЗаявок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ДокументОбъект.ДоговорЭквайринга, "РазрешитьПлатежиБезУказанияЗаявок");
		КонецЕсли;
		
		Возврат РазрешитьПлатежиБезУказанияЗаявок;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Процедура очищает неиспользуемые для хозяйственной операции реквизиты.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	МассивВсехРеквизитов - Массив - Массив всех реквизитов документа, которые необходимо очищать
//	МассивРеквизитовОперации - Массив - Массив реквизитов документа, которые относятся к хозяйственной операции документа.
//
Процедура ОчиститьНеиспользуемыеРеквизиты(ДокументОбъект, Знач МассивВсехРеквизитов, Знач МассивРеквизитовОперации) Экспорт
	
	Для каждого ЭлементМассива Из МассивРеквизитовОперации Цикл
		Номер = МассивВсехРеквизитов.Найти(ЭлементМассива);
		Если Номер <> Неопределено Тогда
			МассивВсехРеквизитов.Удалить(Номер);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураТабличныхЧастей = Новый Структура;
	
	Для каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		Позиция = СтрНайти(ЭлементМассива, ".");
		Если Позиция <> 0 Тогда
			
			ИмяТабличнойЧасти = Лев(ЭлементМассива, Позиция - 1);
			РеквизитыТабличнойЧасти = Новый Массив;
			Если Не СтруктураТабличныхЧастей.Свойство(ИмяТабличнойЧасти, РеквизитыТабличнойЧасти) Тогда
				СтруктураТабличныхЧастей.Вставить(ИмяТабличнойЧасти, Новый Массив);
				РеквизитыТабличнойЧасти = СтруктураТабличныхЧастей[ИмяТабличнойЧасти];
			КонецЕсли;
			РеквизитыТабличнойЧасти.Добавить(Сред(ЭлементМассива, Позиция + 1));
			
		ИначеЕсли ЭлементМассива = "РасшифровкаПлатежа" Тогда
			
			ДокументОбъект["РасшифровкаПлатежа"].Очистить();
			
		ИначеЕсли ЭлементМассива = "ЛицевыеСчетаСотрудников"
			Или ЭлементМассива = "ВыплатаЗаработнойПлаты"
			Или ЭлементМассива = "СтрокаФизическиеЛица" Тогда
			Продолжить;
		Иначе
			Если ЗначениеЗаполнено(ДокументОбъект[СокрЛП(ЭлементМассива)]) Тогда
				ДокументОбъект[СокрЛП(ЭлементМассива)] = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураТабличныхЧастей.Количество() > 0 Тогда
		Для каждого ТабличнаяЧасть Из СтруктураТабличныхЧастей Цикл
			Для каждого СтрокаТаблицы Из ДокументОбъект[ТабличнаяЧасть.Ключ] Цикл
				Для каждого ЭлементМассива Из ТабличнаяЧасть.Значение Цикл
					Если ЗначениеЗаполнено(СтрокаТаблицы[СокрЛП(ЭлементМассива)]) Тогда
						СтрокаТаблицы[СокрЛП(ЭлементМассива)] = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает неиспользуемые реквизиты для указанной в документе формы оплаты.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа
//	ОчищатьДляПустойФормыОплаты - Булево - очищать реквизиты, если форма оплаты не указана (при любой форме оплаты).
//
Процедура ОчиститьНеиспользуемыеРеквизитыФормыОплаты(ДокументОбъект, ФормаОплаты, ОчищатьДляПустойФормыОплаты = Ложь) Экспорт
	
	Если Не (ЗначениеЗаполнено(ФормаОплаты) Или ОчищатьДляПустойФормыОплаты) Тогда
		Возврат;
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		МассивРеквизитов.Добавить("Касса");
	КонецЕсли;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Безналичная Тогда
		МассивРеквизитов.Добавить("БанковскийСчет");
	КонецЕсли;
	
	ОчиститьНеиспользуемыеРеквизиты(ДокументОбъект, МассивРеквизитов, Новый Массив);
	
КонецПроцедуры // ОчиститьНеиспользуемыеРеквизитыФормыОплаты()

// В зависимости от хоз. операции, добавляет в массив реквизиты объекта не требующие проверки заполнения.
// Параметры:
//    ДокументОбъект                  - ДокументОбъект - документ, предназначенный для записи или проведения;
//    МассивНепроверяемыхРеквизитов   - Массив - массив реквизитов, не требующих проверки
//                                      при записи и проведении документа;
//    ХозяйственнаяОперацияПоЗарплате - Булево - признак того, что хозяйственная операция, указанная в документе,
//                                      отражает движения по заработной плате.
//
Процедура ДобавитьНепроверяемыеРеквизитыПоВыплатеЗаработнойПлаты(ДокументОбъект, МассивНепроверяемыхРеквизитов, ХозяйственнаяОперацияПоЗарплате = Ложь) Экспорт
	
	Если ОперацияПоЗарплате(ДокументОбъект.ХозяйственнаяОперация) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяАктивовПассивов");
		МассивНепроверяемыхРеквизитов.Добавить("АналитикаАктивовПассивов");
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяРасходов");
		
		Если Константы.ИспользоватьНачислениеЗарплаты.Получить()
			И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ЗаявкаНаРасходованиеДенежныхСредств");
		КонецЕсли;
		
		Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевыеСчетаСотрудников");
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") И Не ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
			
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
			
		КонецЕсли;
		
		Если ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
			
		ИначеЕсли ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда 
			
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевыеСчетаСотрудников");
			МассивНепроверяемыхРеквизитов.Добавить("ФизическоеЛицо");
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевойСчет");
			
			
		Иначе
			
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевыеСчетаСотрудников");
			
		КонецЕсли;
		
		Если Не Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Сумма");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет строку к имеющимся
//
// Параметры:
//    ОшибкиЗаполнения - Строка - Накопленное описание ошибок
//    ТекстОшибки - Строка - Описание очередной ошибки.
//
Процедура ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки) Экспорт
	
	ОшибкиЗаполнения = ОшибкиЗаполнения + "
	|" + ТекстОшибки;
	
КонецПроцедуры

// Выполняет проверку заполнения реквизитов вместо платформы. Ошибки записываются, а не выводятся на экран.
//
// Параметры:
//    ДокументОбъект - ДокументОбъект - Объект документа
//    ПроверяемыеРеквизиты - Массив - Реквизиты, требующие проверки заполненности
//    ОшибкиЗаполнения - Строка - Описание ошибок заполнения.
//
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(ДокументОбъект, ПроверяемыеРеквизиты, ОшибкиЗаполнения) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	РеквизитыДокумента = МетаданныеДокумента.Реквизиты;
	ТабличныеЧасти = МетаданныеДокумента.ТабличныеЧасти;
	
	Для каждого ИмяРеквизита Из ПроверяемыеРеквизиты Цикл
		
		ПозТочки = СтрНайти(ИмяРеквизита, ".");
		Если ПозТочки = 0 Тогда
			Если ИмяРеквизита = "Дата" Тогда
				Реквизит = МетаданныеДокумента.СтандартныеРеквизиты.Дата;
			Иначе
				Реквизит = РеквизитыДокумента.Найти(ИмяРеквизита);
			КонецЕсли;
			
			Если Реквизит <> Неопределено Тогда
				Если Не ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]) Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Поле ""%1"" не заполнено.'"),
						Реквизит.Синоним);
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ТабЧастьДокумента = ТабличныеЧасти.Найти(ИмяРеквизита);
			Если ТабЧастьДокумента <> Неопределено Тогда
				Если Не ДокументОбъект[ИмяРеквизита].Количество() Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не введено ни одной строки в список ""%1"".'"),
						ТабЧастьДокумента.Синоним);
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ИмяТабЧасти = Лев(ИмяРеквизита, ПозТочки - 1);
			ИмяРеквизита = Сред(ИмяРеквизита, ПозТочки + 1);
			
			ТабЧастьДокумента = ТабличныеЧасти[ИмяТабЧасти];
			Если ТабЧастьДокумента <> Неопределено Тогда
				Реквизит = ТабЧастьДокумента.Реквизиты.Найти(ИмяРеквизита);
				Если Реквизит <> Неопределено Тогда
					Для каждого СтрокаТабЧасти Из ДокументОбъект[ИмяТабЧасти] Цикл
						Если Не ЗначениеЗаполнено(СтрокаТабЧасти[ИмяРеквизита]) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3"".'"),
								Реквизит.Синоним,
								СтрокаТабЧасти.НомерСтроки,
								ТабЧастьДокумента.Синоним);
							ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку заполнения однострочной расшифровки платежа
//
// Параметры:
//    ДокументОбъект - ДокументОбъект - Проверяемый документ
//    ПроверяемыеРеквизиты - Массив - Проверяемые реквизиты документа
//    ИмяТЧ - Строка - Имя табличной части, текущая строка которой выводится в виде отдельных реквизитов
//    ИмяЗаменыТЧ - Строка - Наименование подстроки замены наименования реквизитов табличной части
//    Отказ - Булево - Признак отказа от операции.
//
Процедура ПроверитьЗаполнениеРасшифровкиБезРазбиения(ДокументОбъект, ПроверяемыеРеквизиты, ИмяТЧ, ИмяЗаменыТЧ, Отказ) Экспорт
	
	Если Не ДокументОбъект[ИмяТЧ].Количество() Тогда
		Возврат;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ТабличныеЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти;
	ТабЧастьДокумента = ТабличныеЧасти[ИмяТЧ];
	
	ШаблонОшибки = НСтр("ru = 'Поле ""%1"" не заполнено'");
	
	Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
		
		Если СтрНайти(ПроверяемыйРеквизит, ИмяТЧ) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПозТочки = СтрНайти(ПроверяемыйРеквизит, ".");
		Если ПозТочки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = Сред(ПроверяемыйРеквизит, ПозТочки + 1);
		ИмяЭлемента = ИмяЗаменыТЧ + ИмяРеквизита;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект[ИмяТЧ][0][ИмяРеквизита]) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ШаблонОшибки, ТабЧастьДокумента.Реквизиты[ИмяРеквизита].Синоним),
				,
				"Элементы." + ИмяТЧ + ".ТекущиеДанные." + ИмяРеквизита,
				,
				Отказ);
		КонецЕсли;
		
		МассивНепроверяемыхРеквизитов.Добавить(ПроверяемыйРеквизит);
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);

КонецПроцедуры

// Проверяет заполнения реквизита Партнер в ТЧ РасшифровкаПлатежа
//
// Параметры:
//	Объект                - ДокументОбъект - Денежный документ.
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция объекта
//	МассивНепроверяемыхРеквизитов - Массив - Непроверяемые реквизиты документа
//	РасшифровкаБезРазбиения - Булево - признак вида рашифровки в документе
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьЗаполнениеПартнера(Объект, ХозяйственнаяОперация, МассивНепроверяемыхРеквизитов, РасшифровкаБезРазбиения, Отказ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивНепроверяемыхРеквизитов.Найти("РасшифровкаПлатежа.Партнер") = Неопределено Тогда
		ПредставлениеРеквизитаПартнер = ПартнерыИКонтрагенты.ЗаголовокРеквизитаПартнерВЗависимостиОтХозяйственнойОперации( ХозяйственнаяОперация);
		СинонимРеквизитаПартнера      = Объект.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Партнер.Синоним;
		Если ПредставлениеРеквизитаПартнер <> СинонимРеквизитаПартнера Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Партнер");
			Для каждого СтрокаРасшифровкаПлатежа Из Объект.РасшифровкаПлатежа Цикл
				Если Не ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.Партнер) Тогда
					
					Если РасшифровкаБезРазбиения Тогда
						ИмяПоля = "Элементы.РасшифровкаПлатежа.ТекущиеДанные.Партнер";
						КлючДанных = Неопределено;
					Иначе
						ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа", СтрокаРасшифровкаПлатежа.НомерСтроки, "Партнер");
						КлючДанных = Объект;
					КонецЕсли;
					
					ТекстОшибки = НСтр("ru = 'Поле ""%1"" не заполнено'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ПредставлениеРеквизитаПартнер);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, КлючДанных, ИмяПоля, , Отказ);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет соответствие документов закупки авансовому отчету
//
// Параметры:
//    ДокументОбъект - ДокументОбъект.ПриобретениеТоваровУслуг - проверяемый объект (может быть также ДокументОбъект.ПоступлениеДенежныхДокументов)
//    Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьДокументыЗакупкиАвансовогоОтчета(ДокументОбъект, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.АвансовыйОтчет) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.Ссылка) КАК АвансовыйОтчет,
	|	ДанныеДокумента.Организация <> &Организация КАК ОтличаетсяОрганизация,
	|	ДанныеДокумента.ПодотчетноеЛицо <> &ПодотчетноеЛицо КАК ОтличаетсяПодотчетноеЛицо,
	|	ДанныеДокумента.Валюта <> &Валюта И НЕ ДанныеДокумента.Мультивалютный КАК ОтличаетсяВалюта
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.АвансовыйОтчет);
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", ДокументОбъект.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Валюта", ДокументОбъект.Валюта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ОтличаетсяОрганизация Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Организация %1 не соответствует организации в документе %2'"),
				ДокументОбъект.Организация, Выборка.АвансовыйОтчет);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, "",, Отказ);
		КонецЕсли;
		
		Если Выборка.ОтличаетсяПодотчетноеЛицо Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Подотчетное лицо %1 не соответствует подотчетному лицу в документе %2'"),
				ДокументОбъект.ПодотчетноеЛицо, Выборка.АвансовыйОтчет);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, "",, Отказ);
		КонецЕсли;
		
		Если Выборка.ОтличаетсяВалюта Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Валюта %1 не соответствует валюте в документе %2'"),
				ДокументОбъект.Валюта, Выборка.АвансовыйОтчет);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, "",, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСправочников

// Заполнение общих реквизитов справочников
//
// Параметры:
//    Объект - СправочникОбъект - объект.
Процедура ОбработкаЗаполненияСправочников(Объект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "Владелец")
		И Не ЗначениеЗаполнено(Объект.Владелец) Тогда
		Объект.Владелец = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Владелец);
		Если Объект.Метаданные().Реквизиты.Найти("ВалютаДенежныхСредств") <> Неопределено
			И Не ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
			Объект.ВалютаДенежныхСредств = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Владелец);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Владелец) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации");
			
			Если Запрос.Выполнить().Выбрать().Количество() = 2 Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось определить принадлежность элемента к определенной ""Организации"". В информационной базе введено несколько организаций,
				                             |Включите функциональную опцию ""Использовать несколько организаций""!'");
			Иначе
				ВызватьИсключение НСтр("ru = 'Не удалось определить принадлежность элемента к определенной ""Организации"". Возможно, в информационной базе не введено ни одной организации!'");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет страну по коду Альфа2
// 
// Параметры:
// 	Код - Строка - код Альфа2
// Возвращаемое значение:
// 	СправочникСсылка.СтраныМира - страна мира
// 	Неопределено - страна не найдена.
Функция Страна(Код) Экспорт
	
	Возврат Справочники.СтраныМира.НайтиПоРеквизиту("КодАльфа2", Код);
	
КонецФункции

// Определяет банк по стране и национальному коду
// 
// Параметры:
// 	Страна - СправочникСсылка.СтраныМира - страна, в которой находится банк
// 	Код - Строка - национальный код банка
// Возвращаемое значение:
// 	СправочникСсылка.КлассификаторБанков - ссылка на найденный банк.
// 	Неопределено - банк не найден. 
Функция Банк(Страна, Код) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КлассификаторБанков.Ссылка
	|ИЗ
	|	Справочник.КлассификаторБанков КАК КлассификаторБанков
	|ГДЕ
	|	КлассификаторБанков.Код = &Код
	|	И КлассификаторБанков.Страна = &Страна";
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("Страна", Страна);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
КонецФункции

// Определяет национальный код банка из IBAN
// 
// Параметры:
// 	IBAN - Строка - номер счета в формате IBAN
// Возвращаемое значение:
// 	Строка - национальный код банка.
//
Функция НациональныйКодБанка(IBAN) Экспорт
	
	КодСтраныIBAN = ДенежныеСредстваКлиентСервер.КодСтраныIBAN(IBAN);
	Расположение = РасположениеНациональногоКода(КодСтраныIBAN);
	Если Расположение <> Неопределено Тогда
		Возврат Сред(IBAN, Расположение.Позиция, Расположение.Длина);
	КонецЕсли;
		 
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокументов

// Функция проверяет возможность формирования документа "Списание безналичных ДС"
// на основании нескольких документов. 
//
// Параметры:
//  МассивСсылок  - Массив - заказы поставщикам, по которым необходимо ввести реализацию.
//
// Возвращаемое значение:
//   Булево   - Истина, если формирование возможно.
//
Функция СформироватьДанныеЗаполненияСписанияДСПоНесколькимДокументам(МассивСсылок) Экспорт

	Отказ = Ложь;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Контрагент) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияКонтрагент,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Организация) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияОрганизация,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ТипДокумента) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияТип
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПриобретениеТоваровУслуг.Организация КАК Организация,
	|		ПриобретениеТоваровУслуг.Контрагент КАК Контрагент,
	|		""А"" КАК ТипДокумента
	|	ИЗ
	|		Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|	ГДЕ
	|		ПриобретениеТоваровУслуг.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриобретениеУслугПрочихАктивов.Организация,
	|		ПриобретениеУслугПрочихАктивов.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ПриобретениеУслугПрочихАктивов КАК ПриобретениеУслугПрочихАктивов
	|	ГДЕ
	|		ПриобретениеУслугПрочихАктивов.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Организация,
	|		ЗаказПоставщику.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомитенту.Организация,
	|		ОтчетКомитенту.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|	ГДЕ
	|		ОтчетКомитенту.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомитентуОСписании.Организация,
	|		ОтчетКомитентуОСписании.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|	ГДЕ
	|		ОтчетКомитентуОСписании.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомиссионера.Организация,
	|		ОтчетКомиссионера.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|	ГДЕ
	|		ОтчетКомиссионера.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПередачаТоваровМеждуОрганизациями.Организация,
	|		NULL,
	|		""А""
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|	ГДЕ
	|		ПередачаТоваровМеждуОрганизациями.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетПоКомиссииМеждуОрганизациями.Организация,
	|		NULL,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетПоКомиссииМеждуОрганизациями
	|	ГДЕ
	|		ОтчетПоКомиссииМеждуОрганизациями.Ссылка В(&МассивСсылок)
	|	
	//++ Локализация
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаможеннаяДекларацияИмпорт.Организация,
	|		ТаможеннаяДекларацияИмпорт.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|	ГДЕ
	|		ТаможеннаяДекларацияИмпорт.Ссылка В(&МассивСсылок)
	|	
	//-- Локализация
	|
	|	) КАК ВложенныйЗапрос
	|";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат Отказ;
	КонецЕсли;

	Если СообщитьОбОшибкахФормированияДанныхЗаполненияСписанияДС(Выборка) Тогда
		ТекстОшибки = НСтр("ru = 'Ввод одного документа Списание безналичных ДС на основании выделенных распоряжений невозможен'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;

	Возврат Не Отказ;
	
КонецФункции // СформироватьДанныеЗаполненияСписанияДСПоНесколькимДокументам()

// Процедура выполняет пересчет сумм документа в новую валюту.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	ТекущаяВалюта - СправочникСсылка.Валюты - Текущая валюта
//	НоваяВалюта - СправочникСсылка.Валюты - Новая валюта.
//
Процедура ПересчетСуммДокументаВВалюту(Объект, ТекущаяВалюта, НоваяВалюта) Экспорт
	
	КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		ТекущаяВалюта,
		НоваяВалюта,
		Объект.Дата);
	
	// Пересчитаем сумму документа в новую валюту.
	Объект.СуммаДокумента = Окр(КоэффициентПересчета * Объект.СуммаДокумента, 2, 1);
	
	МассивТабличныйЧастей = Новый Массив;
	МассивТабличныйЧастей.Добавить("РасшифровкаПлатежа");
	МассивТабличныйЧастей.Добавить("ДебиторскаяЗадолженность");
	МассивТабличныйЧастей.Добавить("КредиторскаяЗадолженность");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныйЧастей Цикл
		Если Объект.Свойство(ТабличнаяЧасть) Тогда
			
			ИтогСумма = Объект[ТабличнаяЧасть].Итог("Сумма");
			СуммаДокумента = Окр(КоэффициентПересчета * ИтогСумма, 2, 1);
			
			// Пересчитаем суммы в табличной части документа.
			Если ИтогСумма <> 0 Тогда
				Для Каждого СтрокаТаблицы Из Объект[ТабличнаяЧасть] Цикл
					
					Сумма = ?(ИтогСумма <> 0, Окр(СуммаДокумента * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1), 0);
					ИтогСумма = ИтогСумма - СтрокаТаблицы.Сумма;
					СуммаДокумента = СуммаДокумента - Сумма;
					СтрокаТаблицы.Сумма = Сумма;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//    ТекущийДоговор - СправочникСсылка.ДоговорыКонтрагентов - Договор с контрагентом
//    Партнер - СправочникСсылка.Партнеры - Партнер
//    Контрагент - СправочникСсылка.Контрагенты - Контрагент
//    Организация - СправочникСсылка.Организации - Организация
//    ХозяйственныеОперации - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция.
//
// Возвращаемое значение:
//   СправочникСсылка.ДоговорыКонтрагентов - договор по умолчанию, являющийся объектом расчетов.
//
Функция ДоговорПоУмолчанию(
	ТекущийДоговор,
	Партнер,
	Контрагент,
	Организация,
	ХозяйственныеОперации
	) Экспорт
	
	СписокПартнеров = Новый СписокЗначений;
	ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Партнер, СписокПартнеров);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ДоговорыКонтрагентов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|	И ДоговорыКонтрагентов.Ссылка = &ТекущийДоговор
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ДоговорыКонтрагентов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|
	|");
	Запрос.УстановитьПараметр("ТекущийДоговор", ТекущийДоговор);
	Запрос.УстановитьПараметр("СписокПартнеров", СписокПартнеров);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтборХозяйственнаяОперация", ЗначениеЗаполнено(ХозяйственныеОперации));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственныеОперации);

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Не МассивРезультатов[0].Пустой() Тогда
		
		Выборка = МассивРезультатов[0].Выбрать();
		Выборка.Следующий();
		ДоговорПоУмолчанию = Выборка.Ссылка;
		
	Иначе
		Выборка = МассивРезультатов[1].Выбрать();
	
		Если Не Выборка.Следующий() Тогда
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ИначеЕсли Выборка.Количество() = 1 Тогда
			ДоговорПоУмолчанию = Выборка.Ссылка;
		Иначе
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Формирует текст запроса для получения указанного реквизита объекта расчетов
//
// Параметры:
//    ИмяДокумента - Строка - Имя документа
//    ТаблицаИсточник - Строка - Таблица источник данных
//    ИмяОбъектаРасчетов - Строка - Имя объекта расчетов
//    ИмяРеквизитаОбъектаРасчетов - Строка - Имя реквизита объекта расчетов.
//
// Возвращаемое значение:
//    Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитаОбъектаРасчетов(ИмяДокумента, ТаблицаИсточник, ИмяОбъектаРасчетов, ИмяРеквизитаОбъектаРасчетов) Экспорт
	
	Возврат ДенежныеСредстваПовтИсп.ТекстЗапросаРеквизитаОбъектаРасчетов(
				ТаблицаИсточник+"."+ИмяОбъектаРасчетов,
				ИмяРеквизитаОбъектаРасчетов,
				"Документы."+ИмяДокумента+".ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты."+ИмяОбъектаРасчетов);
	
КонецФункции

// Возвращает параметры вызова функции ПолучитьБанковскийСчетОрганизацииПоУмолчанию
//	
// Возвращаемое значение:
//    Структура - Структура параметров для определения счета
// 		* Организация    		  - СправочникСсылка.Организации - Организация, для которой необходимо получить счет
// 		* ФормаОплаты    		  - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// 									получения банковского счета
// 		* БанковскийСчет 		  - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет, который нужно заполнить
//      * Валюта		 		  - СправочникСсылка.Валюты - Валюта счета
//		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - желательное направление деятельности счета.
//
Функция ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Организация");
	Структура.Вставить("ФормаОплаты");
	Структура.Вставить("БанковскийСчет");
	Структура.Вставить("Валюта");
	Структура.Вставить("НаправлениеДеятельности");
	
	Возврат Структура;
	
КонецФункции

// Возвращает параметры вызова функции ПолучитьКассуОрганизацииПоУмолчанию
//	
// Возвращаемое значение:
//    Структура - Структура параметров для определения счета
// 		* Организация    		  - СправочникСсылка.Организации - Организация, для которой необходимо получить счет
// 		* ФормаОплаты    		  - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// 									получения банковского счета
// 		* Касса					  - СправочникСсылка.Кассы - Касса, которую нужно заполнить
//      * Валюта		 		  - СправочникСсылка.Валюты - Валюта счета
//		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - желательное направление деятельности счета.
//		* ФизическоеЛицо		  - СправочникСсылка.ФизическиеЛица
//
Функция ПараметрыЗаполненияКассыОрганизацииПоУмолчанию() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Организация");
	Структура.Вставить("ФормаОплаты");
	Структура.Вставить("Касса");
	Структура.Вставить("Валюта");
	Структура.Вставить("НаправлениеДеятельности");
	Структура.Вставить("ФизическоеЛицо");
	
	Возврат Структура;
	
КонецФункции


// Возвращает список хозяйственных операций продаж по типу документа
//
// Параметры:
//    ТипДокумента - Тип - Тип документа
//
// Возвращаемое значение:
//    Массив - Список хозяйственных операций продаж
//
Функция ПолучитьСписокХозяйственныхОперацийПродажДляДокумента(ТипДокумента) Экспорт
	
	МассивХозяйственныхОпераций = Новый Массив();
	
	Если ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
		
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
		
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	
	КонецЕсли;
	
	Возврат МассивХозяйственныхОпераций;
	
КонецФункции

// Возвращает список хозяйственных операций закупки по типу документа
//
// Параметры:
//    ТипДокумента - Тип - Тип документа
//
// Возвращаемое значение:
//    Массив - Список хозяйственных операций закупки
//
Функция ПолучитьСпосокХозяйственныхОперацийЗакупкиДляДокумента(ТипДокумента) Экспорт
	
	МассивХозяйственныхОпераций = Новый Массив();
	
	Если ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
		
	КонецЕсли;
	
	Возврат МассивХозяйственныхОпераций;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция проверяет наличие заказа в табличной части "Расшифровка платежа" документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект.
//
// Возвращаемое значение:
//	Булево - Истина - заказ указан в строке табличной части.
//
Функция УказанЗаказВРасшифровкеПлатежа(Объект)
	
	ЗаказУказан = Ложь;
	Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
			ЗаказУказан = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗаказУказан;
	
КонецФункции // УказанЗаказВРасшифровкеПлатежа()

// Процедура устанавливает параметры выбора для контрагента, если не включено раздельное ведение партнеров и контрагентов.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	Элемент - ПолеФормы - Поле для ввода контрагента.
//
Процедура УстановитьПараметрыВыбораКонтрагента(Объект, Элемент) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПрочиеОтношения", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств Тогда
		
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Формирует таблицу НДС по переданным объектам расчетов
// 
// Параметры:
//    Организация - СправочникСсылка.Организации - Организация платежного документа
//    ДатаДокумента - Дата - Дата платежного документа
//    ВалютаДокумента - СправочникСсылка.Валюты - Валюта платежного документа
//    ОбъектыРасчетов - Массив - Объекты расчетов, данные НДС которых выбираются
//    ОплатаОтКлиента - Булево - Признак оплаты от клиента или платежа поставщику.
//
// Возвращаемое значение:
//  ТаблицаЗначений - колонки Ссылка, СуммаДокумента, СтавкаНДС, СуммаСНДС, СуммаНДС
//
Функция РасшифровкаПлатежаНДС(Организация, ДатаДокумента, ВалютаДокумента, ОбъектыРасчетов, ОплатаОтКлиента = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Объект КАК Документ,
	|	NULL КАК ДокументОснование
	|ПОМЕСТИТЬ МассивОбъектов
	|ИЗ 
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ 
	|	ОбъектыРасчетов.Ссылка В (&ОбъектыРасчетов)
	|	И НЕ ОбъектыРасчетов.Объект ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка КАК Документ,
	|	КорректировкаРеализации.ДокументОснование КАК ДокументОснование
	|ИЗ 
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|	ПО
	|		КорректировкаРеализации.ДокументОснование = ОбъектыРасчетов.Объект
	|ГДЕ 
	|	ОбъектыРасчетов.Ссылка В (&ОбъектыРасчетов)
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МассивОбъектов.ДокументОснование, Суммы.Регистратор) КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Суммы.СуммаНДС = 0 И Суммы.СтавкаНДС.Ставка <> 0 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
	|		ИНАЧЕ Суммы.СтавкаНДС
	|	КОНЕЦ                                     КАК СтавкаНДС,
	|	СУММА(Суммы.СуммаБезНДС + Суммы.СуммаНДС) КАК СуммаСНДС,
	|	СУММА(Суммы.СуммаНДС)                     КАК СуммаНДС,
	|	Суммы.Валюта                              КАК Валюта
	|
	|ПОМЕСТИТЬ СуммыВВалютахУчета
	|ИЗ
	|	РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		МассивОбъектов КАК МассивОбъектов
	|	ПО
	|		МассивОбъектов.Документ = Суммы.Регистратор
	|ГДЕ
	|	Суммы.ОбъектРасчетов В (&ОбъектыРасчетов)
	|	И Суммы.ОтражаетсяВРасчетах
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(МассивОбъектов.ДокументОснование, Суммы.Регистратор),
	|	ВЫБОР
	|		КОГДА Суммы.СуммаНДС = 0 И Суммы.СтавкаНДС.Ставка <> 0 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
	|		ИНАЧЕ Суммы.СтавкаНДС
	|	КОНЕЦ,
	|	Суммы.Валюта
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Суммы.Ссылка                     КАК Ссылка,
	|	Суммы.СтавкаНДС                  КАК СтавкаНДС,
	|	Суммы.СуммаСНДС                  КАК СуммаСНДС,
	|	Суммы.СуммаНДС                   КАК СуммаНДС,
	|	Суммы.Валюта                     КАК Валюта,
	|	ИтогиПоДокументам.СуммаДокумента КАК СуммаДокумента
	|
	|ПОМЕСТИТЬ ТаблицаСуммНДС
	|ИЗ
	|	СуммыВВалютахУчета КАК Суммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Суммы.Ссылка КАК Ссылка,
	|			СУММА(Суммы.СуммаСНДС) КАК СуммаДокумента
	|		ИЗ
	|			СуммыВВалютахУчета КАК Суммы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Суммы.Ссылка) КАК ИтогиПоДокументам
	|		ПО Суммы.Ссылка = ИтогиПоДокументам.Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	Суммы.Ссылка        КАК Ссылка,
	|	Суммы.СтавкаНДС     КАК СтавкаНДС,
	|	0                   КАК СуммаСНДС,
	|	0                   КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО        КАК Валюта,
	|	0                   КАК СуммаДокумента
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Суммы
	|
	|ГДЕ
	|	Суммы.Ссылка В (ВЫБРАТЬ Документ ИЗ МассивОбъектов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	Суммы.Ссылка        КАК Ссылка,
	|	Суммы.СтавкаНДС     КАК СтавкаНДС,
	|	0                   КАК СуммаСНДС,
	|	0                   КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО        КАК Валюта,
	|	0                   КАК СуммаДокумента
	|
	|ИЗ
	|	Справочник.ДоговорыМеждуОрганизациями КАК Суммы
	|
	|ГДЕ
	|	Суммы.Ссылка В (ВЫБРАТЬ Документ ИЗ МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.КурсЧислитель * КурсВалютыДокумента.КурсЗнаменатель / (КурсВалюты.КурсЗнаменатель * КурсВалютыДокумента.КурсЧислитель) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ДатаДокумента, БазоваяВалюта = &БазоваяВалюта) КАК КурсВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ДатаДокумента,
	|							Валюта = &ВалютаДокумента И БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.КурсЗнаменатель <> 0
	|	И КурсВалютыДокумента.КурсЧислитель <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСуммНДС.Ссылка                                                            КАК Ссылка,
	|	ТаблицаСуммНДС.СуммаДокумента * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1)     КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ТаблицаСуммНДС.СтавкаНДС.СоответствующаяБазоваяСтавка <> ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА ТаблицаСуммНДС.СтавкаНДС.СоответствующаяБазоваяСтавка
	|		ИНАЧЕ ТаблицаСуммНДС.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	СУММА(ТаблицаСуммНДС.СуммаСНДС) * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1)   КАК СуммаСНДС,
	|	СУММА(ТаблицаСуммНДС.СуммаНДС) * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1)    КАК СуммаНДС
	|
	|ИЗ
	|	ТаблицаСуммНДС КАК ТаблицаСуммНДС
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют
	|	ПО
	|		ТаблицаСуммНДС.Валюта = КурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСуммНДС.Ссылка,
	|	ТаблицаСуммНДС.СуммаДокумента,
	|	КурсыВалют.КоэффициентПересчета,
	|	ВЫБОР
	|		КОГДА ТаблицаСуммНДС.СтавкаНДС.СоответствующаяБазоваяСтавка <> ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА ТаблицаСуммНДС.СтавкаНДС.СоответствующаяБазоваяСтавка
	|		ИНАЧЕ ТаблицаСуммНДС.СтавкаНДС
	|	КОНЕЦ
	|ИМЕЮЩИЕ
	|	(СУММА(ТаблицаСуммНДС.СуммаСНДС) <> 0
	|	ИЛИ СУММА(ТаблицаСуммНДС.СуммаНДС) <> 0)
	|	ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаСуммНДС.Ссылка) В (
	|		ТИП(Справочник.ДоговорыКонтрагентов),
	|		ТИП(Справочник.ДоговорыМеждуОрганизациями)
	|	)
	|";
	
	Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	КонецЕсли;
	
	БазоваяВалюта  = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	
	Запрос.УстановитьПараметр("ОбъектыРасчетов", ОбъектыРасчетов);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("БазоваяВалюта", БазоваяВалюта);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


// Заполняет ставки и суммы НДС в расшифровке платежа
//
// Параметры:
//    РасшифровкаПлатежа - ТабличнаяЧасть, ТаблицаЗначений - Табличная часть "Расшифровка платежа" или таблица значений с соответствующими колонками
//    ТаблицаНДС - ТаблицаЗначений - Таблица со значениями ставок и сумм НДС.
//
Процедура ЗаполнитьНДСВРасшифровке(РасшифровкаПлатежа, ТаблицаНДС) Экспорт
	
	Если ТипЗнч(РасшифровкаПлатежа) = Тип("ТаблицаЗначений") Тогда
		Платежи = РасшифровкаПлатежа.Скопировать();
	Иначе
		Платежи = РасшифровкаПлатежа.Выгрузить();
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	Платежи.Колонки.Добавить("ИндСтроки", Новый ОписаниеТипов(МассивТипов));
	Инд = 0;
	Для каждого СтрокаТаблицы Из Платежи Цикл
		СтрокаТаблицы.ИндСтроки = Инд;
		Инд = Инд + 1;
	КонецЦикла;
	
	Если Платежи.Колонки.Найти("СтавкаНДС") = Неопределено Тогда
		Платежи.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	КонецЕсли;
	Если Платежи.Колонки.Найти("СуммаНДС") = Неопределено Тогда
		Платежи.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Платежи.ОбъектРасчетов КАК ОбъектРасчетов
	|ПОМЕСТИТЬ Платежи
	|ИЗ
	|	&Платежи КАК Платежи
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаНДС.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаНДС
	|ИЗ
	|	&ТаблицаНДС КАК ТаблицаНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ОператорПлатежи = СхемаЗапроса.ПакетЗапросов[0].Операторы[0]; // ОператорВыбратьСхемыЗапроса
	Для каждого Колонка Из Платежи.Колонки Цикл
		ОператорПлатежи.ВыбираемыеПоля.Добавить("Платежи." + Колонка.Имя);
	КонецЦикла;
	
	ОператорТаблицаНДС = СхемаЗапроса.ПакетЗапросов[1].Операторы[0]; // ОператорВыбратьСхемыЗапроса
	Для каждого Колонка Из ТаблицаНДС.Колонки Цикл
		ОператорТаблицаНДС.ВыбираемыеПоля.Добавить("ТаблицаНДС." + Колонка.Имя);
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Платежи", Платежи);
	Запрос.УстановитьПараметр("ТаблицаНДС", ТаблицаНДС);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыРасчетов.Ссылка КАК Ссылка,
	|	ОбъектыРасчетов.Объект КАК Объект
	|ПОМЕСТИТЬ ОбъектыРасчетов
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Платежи КАК Платежи
	|	ПО
	|		Платежи.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаНДС.СтавкаНДС, Платежи.СтавкаНДС) КАК СтавкаНДС,
	|	ЕСТЬNULL(ТаблицаНДС.СуммаНДС, Платежи.СуммаНДС) КАК СуммаНДС,
	|	НЕ ТаблицаНДС.Ссылка ЕСТЬ NULL КАК ПересчитатьНДС,
	|	*
	|ИЗ
	|	Платежи КАК Платежи
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ПО
	|		ОбъектыРасчетов.Ссылка = Платежи.ОбъектРасчетов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаНДС КАК ТаблицаНДС
	|	ПО
	|		ОбъектыРасчетов.Объект = ТаблицаНДС.Ссылка
	|			ИЛИ &УсловиеОснованияПлатежа
	|		И (Платежи.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|			ИЛИ Платежи.СтавкаНДС = НЕОПРЕДЕЛЕНО
	|			ИЛИ Платежи.СтавкаНДС ЕСТЬ NULL)
	|УПОРЯДОЧИТЬ ПО
	|	Платежи.ИндСтроки
	|";
	
	Если Платежи.Колонки.Найти("ОснованиеПлатежа") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОснованияПлатежа", "
		|((Платежи.ОснованиеПлатежа.ДокументОснование = ТаблицаНДС.Ссылка
		|ИЛИ Платежи.ОснованиеПлатежа = ТаблицаНДС.Ссылка)
		|И ОбъектыРасчетов.Объект НЕ В(&Ссылки))");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОснованияПлатежа", "ЛОЖЬ");
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылки", ТаблицаНДС.ВыгрузитьКолонку("Ссылка"));
	
	Платежи = Запрос.Выполнить().Выгрузить();
	
	РассчитыватьСуммуВзаиморасчетов = (Платежи.Колонки.Найти("СуммаВзаиморасчетов") <> Неопределено);
	РассчитыватьНашДолг = (Платежи.Колонки.Найти("НашДолг") <> Неопределено);
	РассчитыватьДолгПартнера = (Платежи.Колонки.Найти("ДолгПартнера") <> Неопределено);
	
	СписаноВсего = 0;
	СписаноВсегоВзаиморасчетов = 0;
	
	Для каждого Платеж Из Платежи Цикл
		
		Если Не Платеж.ПересчитатьНДС Или Не ЗначениеЗаполнено(Платеж.СтавкаНДС) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Платеж["Объект"]) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			Или ТипЗнч(Платеж["Объект"]) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			
			Платеж.СуммаНДС = Платеж.Сумма * Платеж.СтавкаНДС.Ставка / (100 + Платеж.СтавкаНДС.Ставка);
		Иначе
			
			Если Платежи.Индекс(Платеж) = 0 Тогда
				НовыйЗаказ = Истина;
			Иначе
				НовыйЗаказ = (Платеж.ИндСтроки <> Платежи[Платежи.Индекс(Платеж) - 1].ИндСтроки);
			КонецЕсли;
			
			Если НовыйЗаказ Тогда
				СписаноВсего = 0;
				СписаноВсегоВзаиморасчетов = 0;
				СписаноВсегоНашДолг = 0;
				СписаноВсегоДолгПартнера = 0;
			КонецЕсли;
			
			Платеж.СуммаНДС = Платеж.СуммаНДС * ?(Платеж.СуммаДокумента <> 0, Платеж.Сумма / Платеж.СуммаДокумента, 0);
			
			ПоследняяСтрокаЗаказа = (Платежи.Индекс(Платеж) = Платежи.Количество() - 1)
				Или (Платеж.ИндСтроки <> Платежи[Платежи.Индекс(Платеж) + 1].ИндСтроки);
			
			Платеж.Сумма = Окр(ВзаиморасчетыСервер.СписатьСумму(
				Платеж.Сумма - СписаноВсего,
				Платеж.Сумма * ?(Платеж.СуммаДокумента <> 0, Платеж.СуммаСНДС / Платеж.СуммаДокумента, 0),
				ПоследняяСтрокаЗаказа), 2);
			
			СписаноВсего = СписаноВсего + Платеж.Сумма;
			
			Если РассчитыватьСуммуВзаиморасчетов Тогда
				Платеж.СуммаВзаиморасчетов = Окр(ВзаиморасчетыСервер.СписатьСумму(
					Платеж.СуммаВзаиморасчетов - СписаноВсегоВзаиморасчетов,
					Платеж.СуммаВзаиморасчетов * ?(Платеж.СуммаДокумента <> 0, Платеж.СуммаСНДС / Платеж.СуммаДокумента, 0),
					ПоследняяСтрокаЗаказа), 2);
					
				СписаноВсегоВзаиморасчетов = СписаноВсегоВзаиморасчетов + Платеж.СуммаВзаиморасчетов;
			КонецЕсли;
			Если РассчитыватьНашДолг Тогда
				Платеж.НашДолг = Окр(ВзаиморасчетыСервер.СписатьСумму(
					Платеж.НашДолг - СписаноВсегоНашДолг,
					Платеж.НашДолг * ?(Платеж.СуммаДокумента <> 0, Платеж.СуммаСНДС / Платеж.СуммаДокумента, 0),
					ПоследняяСтрокаЗаказа), 2);
					
				СписаноВсегоНашДолг = СписаноВсегоНашДолг + Платеж.НашДолг;
			КонецЕсли;
			Если РассчитыватьДолгПартнера Тогда
				Платеж.ДолгПартнера = Окр(ВзаиморасчетыСервер.СписатьСумму(
					Платеж.ДолгПартнера - СписаноВсегоДолгПартнера,
					Платеж.ДолгПартнера * ?(Платеж.СуммаДокумента <> 0, Платеж.СуммаСНДС / Платеж.СуммаДокумента, 0),
					ПоследняяСтрокаЗаказа), 2);
					
				СписаноВсегоДолгПартнера = СписаноВсегоДолгПартнера + Платеж.ДолгПартнера;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Платежи.Колонки.Найти("Сумма") <> Неопределено
		И Платежи.Колонки.Найти("СуммаВзаиморасчетов") <> Неопределено
		И Платежи.Итог("Сумма") <> Платежи.Итог("СуммаВзаиморасчетов") Тогда
		
		СтруктураПересчетаСуммы = Новый Структура;
		СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Платежи, СтруктураДействий, Неопределено);
	КонецЕсли;
	
	Если ТипЗнч(РасшифровкаПлатежа) = Тип("ТаблицаЗначений") Тогда
		РасшифровкаПлатежа = Платежи.Скопировать();
	Иначе
		РасшифровкаПлатежа.Загрузить(Платежи);
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует текст назначения платежа для документа оплаты
//
// Параметры:
//    Объект - ДокументСсылка - Документ оплаты.
//
Процедура ЗаполнитьТекстНазначенияПлатежа(Объект) Экспорт
	
	ТекстНазначение = "";
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
		ТекстНазначение = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(
			Объект.БанковскийСчетКонтрагента).ТекстНазначения;
	КонецЕсли;
	
	Если ТекстНазначение = "" Тогда
		//++ Локализация
		//-- Локализация
			ТекстНазначение = НазначениеПлатежа(Объект);
		//++ Локализация
		//-- Локализация
	Иначе
		ТекстСумма = "Сумма " + Формат(Объект.СуммаДокумента, "ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
		ТекстСуммаНДС = ТекстСуммаНДСПлатежа(Объект.Организация, Объект.Валюта, Объект.РасшифровкаПлатежа, Истина);
		ТекстНазначение = ТекстНазначение + Символы.ПС + ТекстСумма + Символы.ПС + ТекстСуммаНДС;
	КонецЕсли;
	
	Объект.НазначениеПлатежа = ТекстНазначение;
	
КонецПроцедуры

// Получает ставку НДС для объекта расчетов, если она единственная
//
// Параметры:
//    Организация - СправочникСсылка.Организации - Организация платежного документа
//    ОбъектыРасчетов - Массив, СправочникСсылка.ОбъектыРасчетов - Объекты расчетов
//    ЭтоРасчетыСКлиентами - Булево - Признак расчетов с клиентами.
// Возвращаемое значение:
//  - СправочникСсылка.СтавкиНДС
//  - Неопределено
//
Функция СтавкаНДСОбъектаРасчетов(Организация, ОбъектыРасчетов, ЭтоРасчетыСКлиентами = Истина) Экспорт
	
	ТаблицаНДС = РасшифровкаПлатежаНДС(Организация, Неопределено, Неопределено, ОбъектыРасчетов, ЭтоРасчетыСКлиентами);
	Если ТаблицаНДС.Количество() = 1 Тогда
		Возврат ТаблицаНДС[0].СтавкаНДС;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает статью ДДС для объекта расчетов
//
// Параметры:
//    ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов
//    ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - операция для подбора статьи ДДС по умолчанию.
//
// Возвращаемое значение:
//  - Неопределено
//  - СправочникСсылка.СтатьиДвиженияДенежныхСредств
//
Функция СтатьяДвиженияДенежныхСредствОбъектаРасчетов(ОбъектРасчетов, ХозяйственнаяОперация) Экспорт
	
	СтатьяДвиженияДенежныхСредств = Неопределено;
	
	ВыбираемыеПоля = Новый Массив;
	Объект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРасчетов, "Объект");
	
	Если ЗначениеЗаполнено(Объект) Тогда
	
		ДоступныеРеквизиты = Объект.Метаданные().Реквизиты;
		Если ДоступныеРеквизиты.Найти("Соглашение") <> Неопределено Тогда
			ВыбираемыеПоля.Добавить("Соглашение.СтатьяДвиженияДенежныхСредств");
		КонецЕсли;
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
			Если ДоступныеРеквизиты.Найти("Договор") <> Неопределено Тогда
				ВыбираемыеПоля.Добавить("Договор.СтатьяДвиженияДенежныхСредствПолучателя");
			КонецЕсли;
			Если ДоступныеРеквизиты.Найти("СтатьяДвиженияДенежныхСредствПолучателя") <> Неопределено Тогда
				ВыбираемыеПоля.Добавить("СтатьяДвиженияДенежныхСредствПолучателя");
			КонецЕсли;
		Иначе
			Если ДоступныеРеквизиты.Найти("Договор") <> Неопределено Тогда
				ВыбираемыеПоля.Добавить("Договор.СтатьяДвиженияДенежныхСредств");
			КонецЕсли;
			Если ДоступныеРеквизиты.Найти("СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
				ВыбираемыеПоля.Добавить("СтатьяДвиженияДенежныхСредств");
			КонецЕсли;
		КонецЕсли;
		
		Если ВыбираемыеПоля.Количество() Тогда
			УстановитьПривилегированныйРежим(Истина);
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, ВыбираемыеПоля);
			УстановитьПривилегированныйРежим(Ложь);
			Если ЗначенияРеквизитов.Свойство("СоглашениеСтатьяДвиженияДенежныхСредств")
				И ЗначениеЗаполнено(ЗначенияРеквизитов.СоглашениеСтатьяДвиженияДенежныхСредств) Тогда
				СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.СоглашениеСтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			Если ЗначенияРеквизитов.Свойство("ДоговорСтатьяДвиженияДенежныхСредств")
				И ЗначениеЗаполнено(ЗначенияРеквизитов.ДоговорСтатьяДвиженияДенежныхСредств) Тогда
				СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.ДоговорСтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			Если ЗначенияРеквизитов.Свойство("ДоговорСтатьяДвиженияДенежныхСредствПолучателя")
				И ЗначениеЗаполнено(ЗначенияРеквизитов.ДоговорСтатьяДвиженияДенежныхСредствПолучателя) Тогда
				СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.ДоговорСтатьяДвиженияДенежныхСредствПолучателя;
			КонецЕсли;
			Если ЗначенияРеквизитов.Свойство("СтатьяДвиженияДенежныхСредств")
				И ЗначениеЗаполнено(ЗначенияРеквизитов.СтатьяДвиженияДенежныхСредств) Тогда
				СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			Если ЗначенияРеквизитов.Свойство("СтатьяДвиженияДенежныхСредствПолучателя")
				И ЗначениеЗаполнено(ЗначенияРеквизитов.СтатьяДвиженияДенежныхСредствПолучателя) Тогда
				СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитов.СтатьяДвиженияДенежныхСредствПолучателя;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств)
		И ЗначениеЗаполнено(ХозяйственнаяОперация)
		И Не Справочники.СтатьиДвиженияДенежныхСредств.СтатьяСоответствуетХозяйственнойОперации(
			СтатьяДвиженияДенежныхСредств, ХозяйственнаяОперация) Тогда
		СтатьяДвиженияДенежныхСредств = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) И ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	КонецЕсли;
	
	Возврат СтатьяДвиженияДенежныхСредств;
	
КонецФункции

// Возвращает строку с перечислением документов из расшифровки платежа.
//
// Параметры: Объект - ДокументСсылка - Документ, содержащий расшифровку платежа.
//
// Возвращаемое значение:
//  Строка
//
Функция НазначениеПлатежа(Объект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить(, "ОбъектРасчетов, Сумма, СтавкаНДС, СуммаНДС");
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ОбъектРасчетов", Новый ОписаниеТипов("СправочникСсылка.ОбъектыРасчетов"));
	ТаблицаДокументов.Колонки.Добавить("Сумма", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	Для Сч = 1 По РасшифровкаПлатежа.Количество() Цикл
		ТаблицаДокументов.Добавить();
	КонецЦикла;
	ТаблицаДокументов.ЗагрузитьКолонку(РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), "ОбъектРасчетов");
	ТаблицаДокументов.ЗагрузитьКолонку(РасшифровкаПлатежа.ВыгрузитьКолонку("Сумма"), "Сумма");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.ОбъектРасчетов                КАК ОбъектРасчетов,
	|	ИсходнаяТаблица.Сумма                         КАК Сумма
	|
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ТаблицаДокументов КАК ИсходнаяТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов
	|;
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.ОбъектРасчетов.Объект         КАК Документ,
	|	ИсходнаяТаблица.Сумма                         КАК Сумма
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерПоДаннымПоставщика       КАК Номер,
	|	ДанныеДокумента.ДатаПоДаннымПоставщика        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерВходящегоДокумента       КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерВходящегоДокумента       КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерВходящегоДокумента       КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента        КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ЛОЖЬ                                          КАК НомерВходящегоДокумента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	//++ Локализация
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Документ,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.НомерДекларации               КАК Номер,
	|	НЕОПРЕДЕЛЕНО                                  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)                КАК Сумма,
	|	ИСТИНА                                        КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер
	|	
	//-- Локализация
	|
	|	
	|");
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаКРаспределению = Объект.РасшифровкаПлатежа.Итог("Сумма");
	ТекстНазначенияПлатежа = "";
	ПредставленияДокументов = ПолучитьПредставленияДокументов();
	
	РеквизитыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Валюта, "Код, Наименование");
	Если РеквизитыВалюты.Код = "643" Тогда
		ВалютаДляПечати = НСтр("ru = 'руб.'");
	Иначе
		ВалютаДляПечати = СокрЛП(РеквизитыВалюты.Наименование);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Документ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ", "
			+ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Документ, "НаименованиеДляПечати")
			+ " " + Формат(Выборка.Сумма, "ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")
			+ " " + ВалютаДляПечати;
		Иначе
			ВидДокумента = "";
			ВыборкаДокумент = Выборка.Документ; // ДокументСсылка
			ПредставленияДокументов.Свойство(ВыборкаДокумент.Метаданные().Имя, ВидДокумента);
			Если ЗначениеЗаполнено(ВидДокумента) Тогда
				ПредставлениеДляПечати = НСтр("ru = '%Вид% №%Номер% от %Дата% %Сумма% %Валюта%'");
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Вид%", ВидДокумента);
				Если Выборка.НомерВходящегоДокумента Тогда
					ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Номер%", СокрЛП(Выборка.Номер));
				Иначе
					ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Номер%",
						ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Ложь, Истина));
				КонецЕсли;
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Дата%", Формат(Выборка.Дата, "ДЛФ=D"));
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Сумма%",
					Формат(Выборка.Сумма, "ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="));
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Валюта%", ВалютаДляПечати);
				ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ", " + ПредставлениеДляПечати;
			КонецЕсли;
		КонецЕсли;
		СуммаКРаспределению = СуммаКРаспределению - Выборка.Сумма;
	КонецЦикла;
	
	Если СуммаКРаспределению > 0 Тогда
		ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ", "
			+ НСтр("ru = 'без указания назначения'")
			+ " " + Формат(СуммаКРаспределению, "ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")
			+ " " + ВалютаДляПечати;
	КонецЕсли;
	Если СуммаКРаспределению <= 0 Тогда
		ТекстНазначенияПлатежа = НСтр("ru = 'Оплата по'") + Сред(ТекстНазначенияПлатежа, 2);
	Иначе
		ТекстНазначенияПлатежа = НСтр("ru = 'Оплата'") + Сред(ТекстНазначенияПлатежа, 2);
	КонецЕсли;
	
	Если Прав(ТекстНазначенияПлатежа, 1) <> "." Тогда
		ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ".";
	КонецЕсли;
	ДлинаТекстаДокументов = СтрДлина(ТекстНазначенияПлатежа);
	
	ТекстСуммаНДС = ТекстСуммаНДСПлатежа(
		Объект.Организация,
		Объект.Валюта,
		РасшифровкаПлатежа,
		Истина);
	ДлинаТекстаНДС = СтрДлина(ТекстСуммаНДС);
	
	Если ДлинаТекстаДокументов + ДлинаТекстаНДС > 210 Тогда
		ДлинаТекстаДокументов = 207 - ДлинаТекстаНДС;
		ТекстНазначенияПлатежа = Лев(ТекстНазначенияПлатежа, ДлинаТекстаДокументов);
		ТекстПоискаПоследнегоДокумента = ТекстНазначенияПлатежа;
		ПозицияПоследнейЗапятой = 0;
		ПозицияЗапятой = СтрНайти(ТекстПоискаПоследнегоДокумента, ",");
		Пока НЕ ПозицияЗапятой = 0 Цикл
			ПозицияПоследнейЗапятой = ПозицияПоследнейЗапятой + ПозицияЗапятой;
			ТекстПоискаПоследнегоДокумента = Сред(ТекстПоискаПоследнегоДокумента, ПозицияЗапятой + 1);
			ПозицияЗапятой = СтрНайти(ТекстПоискаПоследнегоДокумента, ",");
		КонецЦикла;
		ТекстНазначенияПлатежа = Лев(ТекстНазначенияПлатежа, ПозицияПоследнейЗапятой - 1) + "...";
	КонецЕсли;
	ТекстНазначенияПлатежа = СокрЛП(ТекстНазначенияПлатежа) + Символы.ПС + СокрЛП(ТекстСуммаНДС);
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТекстНазначенияПлатежа;
	
КонецФункции

Процедура ЗаписатьДатуВыгрузкиПлатежей(Платежи, Блокировать = Истина, Перезаписывать = Истина) Экспорт
	
	Для каждого Платеж Из Платежи Цикл
		
		Если Не (ТипЗнч(Платеж) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
			Или ТипЗнч(Платеж) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")) Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаВыгрузкиДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Платеж, "ДатаВыгрузки");
		
		Если Не Перезаписывать И ЗначениеЗаполнено(ДатаВыгрузкиДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяДатаСеанса = НачалоДня(ТекущаяДатаСеанса());
		
		Если ДатаВыгрузкиДокумента = ТекущаяДатаСеанса Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Платеж.ПолучитьОбъект();
		
		Если Блокировать Тогда
			Попытка
				ДокументОбъект.Заблокировать();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать дату выгрузки в банк документа: %1'"), ДокументОбъект);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		ДокументОбъект.ДатаВыгрузки = ТекущаяДатаСеанса;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Выполняет переоценку денежных средств у подотчетного лица
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация в которой необходимо переоценить денежные средства
//  Дата - Дата - на которую необходимо выполнить переоценку
//  ПодотчетноеЛицо - СправочникСсылка.ФизическиеЛица - подотчетное лицо.
//
Процедура ПереоценитьДенежныеСредстваУПодотчетныхЛиц(Организация, Дата, ПодотчетноеЛицо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Документы.РасчетКурсовыхРазниц.ПереоценитьДенежныеСредстваУПодотчетныхЛиц(Организация, Дата, ПодотчетноеЛицо);
	
КонецПроцедуры

Функция ИнициализироватьПараметрыКонвертации() Экспорт
	
	ПараметрыКонвертации = Новый Структура;
	ПараметрыКонвертации.Вставить("Организация");
	ПараметрыКонвертации.Вставить("Валюта");
	ПараметрыКонвертации.Вставить("ВалютаКонвертации");
	ПараметрыКонвертации.Вставить("ВалютаРеглУчета");
	ПараметрыКонвертации.Вставить("СуммаДокумента");
	ПараметрыКонвертации.Вставить("СуммаКонвертации");
	ПараметрыКонвертации.Вставить("КурсКонвертации");
	ПараметрыКонвертации.Вставить("КратностьКурсаКонвертации");
	ПараметрыКонвертации.Вставить("Дата");
	
	Возврат ПараметрыКонвертации;
	
КонецФункции

Процедура РассчитатьПараметрыКонвертации(ПараметрыКонвертации, РеквизитИзменение) Экспорт
	
	Если РеквизитИзменение = "ВалютаКонвертации" Тогда
	
		Если ПараметрыКонвертации.Валюта = ПараметрыКонвертации.ВалютаРеглУчета Тогда
			
			КурсВалютыКонвертации = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ПараметрыКонвертации.ВалютаКонвертации,
					ПараметрыКонвертации.Дата, ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ПараметрыКонвертации.Организация));
			ПараметрыКонвертации.КурсКонвертации = КурсВалютыКонвертации.КурсЧислитель;
			ПараметрыКонвертации.КратностьКурсаКонвертации = КурсВалютыКонвертации.КурсЗнаменатель;
			ПараметрыКонвертации.СуммаКонвертации = ?(ПараметрыКонвертации.КратностьКурсаКонвертации <> 0,
				ПараметрыКонвертации.СуммаДокумента * ПараметрыКонвертации.КратностьКурсаКонвертации / ПараметрыКонвертации.КурсКонвертации, 0);
			
		Иначе
			Если ПараметрыКонвертации.ВалютаКонвертации = ПараметрыКонвертации.ВалютаРеглУчета Тогда
				КурсВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ПараметрыКонвертации.Валюта, ПараметрыКонвертации.Дата,
					ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ПараметрыКонвертации.Организация));
				ПараметрыКонвертации.КурсКонвертации = КурсВалюты.КурсЧислитель;
				ПараметрыКонвертации.КратностьКурсаКонвертации = КурсВалюты.КурсЗнаменатель;
			Иначе
				Если ЗначениеЗаполнено(ПараметрыКонвертации.Валюта) И ЗначениеЗаполнено(ПараметрыКонвертации.ВалютаКонвертации) Тогда
					КроссКурс = РаботаСКурсамиВалютУТ.ПолучитьКроссКурсВалют(
						РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ПараметрыКонвертации.Валюта, ПараметрыКонвертации.Дата,
							ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ПараметрыКонвертации.Организация)),
						РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ПараметрыКонвертации.ВалютаКонвертации, ПараметрыКонвертации.Дата,
							ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ПараметрыКонвертации.Организация)));
				Иначе
					КроссКурс = Новый Структура("КурсЧислитель, КурсЗнаменатель", 0, 0);
				КонецЕсли;
				
				ПараметрыКонвертации.КурсКонвертации = КроссКурс.КурсЧислитель;
				ПараметрыКонвертации.КратностьКурсаКонвертации = КроссКурс.КурсЗнаменатель;
			КонецЕсли;
			
			ПараметрыКонвертации.СуммаКонвертации = ?(ПараметрыКонвертации.КратностьКурсаКонвертации <> 0,
				ПараметрыКонвертации.СуммаДокумента * ПараметрыКонвертации.КурсКонвертации / ПараметрыКонвертации.КратностьКурсаКонвертации, 0);
			КонецЕсли;
			
	ИначеЕсли РеквизитИзменение = "КурсКонвертации" Тогда
		
		Если ПараметрыКонвертации.Валюта = ПараметрыКонвертации.ВалютаРеглУчета Тогда
			Если ПараметрыКонвертации.КурсКонвертации <> 0 Тогда
				ПараметрыКонвертации.СуммаКонвертации =
					ПараметрыКонвертации.СуммаДокумента * ПараметрыКонвертации.КратностьКурсаКонвертации / ПараметрыКонвертации.КурсКонвертации;
			Иначе
				ПараметрыКонвертации.СуммаКонвертации = 0;
			КонецЕсли;
		Иначе
			Если ПараметрыКонвертации.КратностьКурсаКонвертации <> 0 Тогда
				ПараметрыКонвертации.СуммаКонвертации =
					ПараметрыКонвертации.СуммаДокумента * ПараметрыКонвертации.КурсКонвертации / ПараметрыКонвертации.КратностьКурсаКонвертации;
			Иначе
				ПараметрыКонвертации.СуммаКонвертации = 0;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РеквизитИзменение = "СуммаКонвертации" Тогда
		
		Если ПараметрыКонвертации.СуммаДокумента = 0 Тогда
			
			Если ПараметрыКонвертации.Валюта = ПараметрыКонвертации.ВалютаРеглУчета Тогда
				Если ПараметрыКонвертации.КратностьКурсаКонвертации <> 0 Тогда
					ПараметрыКонвертации.СуммаДокумента =
						ПараметрыКонвертации.СуммаКонвертации * ПараметрыКонвертации.КурсКонвертации / ПараметрыКонвертации.КратностьКурсаКонвертации;
				КонецЕсли;
			Иначе
				Если ПараметрыКонвертации.КурсКонвертации <> 0 Тогда
					ПараметрыКонвертации.СуммаДокумента =
						ПараметрыКонвертации.СуммаКонвертации * ПараметрыКонвертации.КратностьКурсаКонвертации / ПараметрыКонвертации.КурсКонвертации;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ПараметрыКонвертации.Валюта = ПараметрыКонвертации.ВалютаРеглУчета Тогда
				Если ПараметрыКонвертации.СуммаКонвертации <> 0 Тогда
					ПараметрыКонвертации.КурсКонвертации =
						ПараметрыКонвертации.СуммаДокумента * ПараметрыКонвертации.КратностьКурсаКонвертации / ПараметрыКонвертации.СуммаКонвертации;
				Иначе
					ПараметрыКонвертации.КурсКонвертации = 0;
				КонецЕсли;
			Иначе
				Если ПараметрыКонвертации.СуммаДокумента <> 0 Тогда
					ПараметрыКонвертации.КурсКонвертации =
						ПараметрыКонвертации.СуммаКонвертации * ПараметрыКонвертации.КратностьКурсаКонвертации / ПараметрыКонвертации.СуммаДокумента;
				Иначе
					ПараметрыКонвертации.КурсКонвертации = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаголовокСуммыКонвертации(ПараметрыКонвертации) Экспорт
	
	Если ПараметрыКонвертации.КратностьКурсаКонвертации > 1 Тогда
		ШаблонКурса = "%1 за %2 %3";
		Если ПараметрыКонвертации.Валюта = ПараметрыКонвертации.ВалютаРеглУчета Тогда
			КратностьКурсаКонвертацииТекстом = СтрШаблон(
				ШаблонКурса, ПараметрыКонвертации.Валюта, ПараметрыКонвертации.КратностьКурсаКонвертации, ПараметрыКонвертации.ВалютаКонвертации);
		Иначе
			КратностьКурсаКонвертацииТекстом = СтрШаблон(
				ШаблонКурса, ПараметрыКонвертации.ВалютаКонвертации, ПараметрыКонвертации.КратностьКурсаКонвертации, ПараметрыКонвертации.Валюта);
		КонецЕсли;
		Возврат КратностьКурсаКонвертацииТекстом;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьВалютуВзаиморасчетовДокумента(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	КопияРасшифровки = Объект.РасшифровкаПлатежа.Выгрузить(, "ВалютаВзаиморасчетов, КурсЧислительВзаиморасчетов, КурсЗнаменательВзаиморасчетов");
	КопияРасшифровки.Свернуть("ВалютаВзаиморасчетов, КурсЧислительВзаиморасчетов, КурсЗнаменательВзаиморасчетов");
	Если КопияРасшифровки.Количество() = 1 Тогда
		Форма.ВалютаВзаиморасчетов     = КопияРасшифровки[0].ВалютаВзаиморасчетов;
		Форма.СуммаВзаиморасчетов      = Объект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов");
		Форма.КурсЧислительВзаиморасчетов       = КопияРасшифровки[0].КурсЧислительВзаиморасчетов;
		Форма.КурсЗнаменательВзаиморасчетов  = КопияРасшифровки[0].КурсЗнаменательВзаиморасчетов;
	Иначе
		Форма.ВалютаВзаиморасчетов     = Неопределено;
		Форма.СуммаВзаиморасчетов      = Неопределено;
		Форма.КурсЧислительВзаиморасчетов       = Неопределено;
		Форма.КурсЗнаменательВзаиморасчетов  = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция НадписьВалютыИКурсПлатежа(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	КопияРасшифровки = Объект.РасшифровкаПлатежа.Выгрузить(,
		"СуммаВзаиморасчетов, ВалютаВзаиморасчетов, КурсЧислительВзаиморасчетов, КурсЗнаменательВзаиморасчетов"); // ТаблицаЗначений
	КопияРасшифровки.Свернуть("ВалютаВзаиморасчетов, КурсЧислительВзаиморасчетов, КурсЗнаменательВзаиморасчетов", "СуммаВзаиморасчетов");
	
	ШаблонКурса = "(%1 %2 = %3 %4)";
	СтрокиНадписи = Новый Массив;
	СтрокиНадписи.Добавить(НСтр("ru = 'Расчеты'"));
	Для каждого СтрокаТаблицы Из КопияРасшифровки Цикл
		СтрокиНадписи.Добавить(Строка(СтрокаТаблицы.СуммаВзаиморасчетов));
		СтрокиНадписи.Добавить(Строка(СтрокаТаблицы.ВалютаВзаиморасчетов));
		
		Если СтрокаТаблицы.КурсЧислительВзаиморасчетов <> 0 Тогда
			Если Объект.Валюта = Форма.ВалютаРеглУчета Тогда
				
				СтрокиНадписи.Добавить(СтрШаблон(ШаблонКурса,
					СтрокаТаблицы.КурсЗнаменательВзаиморасчетов,
					СтрокаТаблицы.ВалютаВзаиморасчетов,
					Строка(Формат(СтрокаТаблицы.КурсЧислительВзаиморасчетов, "ЧДЦ=4")),
					Объект.Валюта));
			Иначе
				СтрокиНадписи.Добавить(СтрШаблон(ШаблонКурса,
					СтрокаТаблицы.КурсЗнаменательВзаиморасчетов,
					Объект.Валюта,
					Строка(Формат(СтрокаТаблицы.КурсЧислительВзаиморасчетов, "ЧДЦ=4")),
					СтрокаТаблицы.ВалютаВзаиморасчетов));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(СтрокиНадписи, " ");
	
КонецФункции

Функция КурсЧислительИКурсЗнаменательВзаиморасчетов(ВалютаДокумента, ВалютаВзаиморасчетов, ВалютаРеглУчета, НаДату) Экспорт
	
	КурсИКратность = Новый Структура("КурсЧислитель, КурсЗнаменатель", 1, 1);
	
	Если ВалютаДокумента <> ВалютаВзаиморасчетов Тогда
		Если ВалютаДокумента = ВалютаРеглУчета Тогда
			КурсИКратность = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, НаДату, ВалютаРеглУчета);
			
		ИначеЕсли ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
			КурсИКратность = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ВалютаДокумента, НаДату, ВалютаРеглУчета);
		Иначе
			КурсИКратность = РаботаСКурсамиВалютУТ.ПолучитьКроссКурсВалют(
				РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ВалютаДокумента, НаДату, ВалютаРеглУчета),
				РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, НаДату, ВалютаРеглУчета));
		КонецЕсли;
	КонецЕсли;
	
	Возврат КурсИКратность;
	
КонецФункции

// Подмена префикса организации префиксом кассовой книги
//
// Параметры:
//    Источник - ДокументОбъект - ПКО, РКО, Кассовая книга
//    СтандартнаяОбработка - Булево - флаг стандартной обработки подписки
//    Префикс - Строка - префикс объекта, который нужно изменить.
//
Процедура УстановитьПрефиксИнформационнойБазыИКассовойКнигиНомеруДокументаПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(Источник, СтандартнаяОбработка, Префикс);
	//++ Локализация
	ДенежныеСредстваСерверЛокализация.УстановитьПрефиксКассовойКнигиНомеруДокументаПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс);
	//-- Локализация
	
КонецПроцедуры

// Возвращает таблицу значений, содержащее наименование и КПП контрагента, действующих на дату документа.
//
// Параметры:
//  СписокДокументов - Массив из ДокументСсылка - документы, для реквизита Контрагент которых определяется информация о наименовании и КПП
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Документ - ДокументСсылка - документ из СписокДокументов.
//   * ЗначениеРеквизита - Строка - значение наименования или КПП контрагента.
//   * Признак - Число - признак реквизита: 0 - Наименование, 1 - КПП.
//
Функция СведенияОКонтрагентахПоДокументам(СписокДокументов) Экспорт

	Если СписокДокументов.Количество() = 0 Тогда
		Возврат ПустаяТаблицаСведенийОКонтрагентах();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеестрДокументов.Ссылка КАК Ссылка,
		|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
		|	ЕСТЬNULL(КлючиРеестраДокументов.Ключ, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиРеестраДокументов КАК КлючиРеестраДокументов
		|		ПО РеестрДокументов.Контрагент = КлючиРеестраДокументов.Ссылка
		|ГДЕ
		|	РеестрДокументов.Ссылка В(&МассивДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(КонтрагентыИсторияНаименований.НаименованиеПолное, Контрагенты.НаименованиеПолное) КАК ЗначениеРеквизита,
		|	ЕСТЬNULL(КонтрагентыИсторияНаименований.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоДействия,
		|	ТаблицаДокументов.Ссылка КАК Документ,
		|	0 КАК Признак
		|ПОМЕСТИТЬ ИсторияРеквизитовКонтрагента
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияНаименований КАК КонтрагентыИсторияНаименований
		|		ПО ТаблицаДокументов.Контрагент = КонтрагентыИсторияНаименований.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ТаблицаДокументов.Контрагент = Контрагенты.Ссылка
		|ГДЕ
		|	ЕСТЬNULL(КонтрагентыИсторияНаименований.Период, ДАТАВРЕМЯ(1, 1, 1)) <= ТаблицаДокументов.Дата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КонтрагентыИсторияКПП.КПП, Контрагенты.КПП),
		|	ЕСТЬNULL(КонтрагентыИсторияКПП.Период, ДАТАВРЕМЯ(1, 1, 1)),
		|	ТаблицаДокументов.Ссылка,
		|	1
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияКПП КАК КонтрагентыИсторияКПП
		|		ПО ТаблицаДокументов.Контрагент = КонтрагентыИсторияКПП.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ТаблицаДокументов.Контрагент = Контрагенты.Ссылка
		|ГДЕ
		|	ЕСТЬNULL(КонтрагентыИсторияКПП.Период, ДАТАВРЕМЯ(1, 1, 1)) <= ТаблицаДокументов.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияРеквизитовКонтрагента.Документ КАК Документ,
		|	МАКСИМУМ(ИсторияРеквизитовКонтрагента.НачалоДействия) КАК НачалоДействия,
		|	ИсторияРеквизитовКонтрагента.Признак КАК Признак
		|ПОМЕСТИТЬ БлижайшиеЗаписи
		|ИЗ
		|	ИсторияРеквизитовКонтрагента КАК ИсторияРеквизитовКонтрагента
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияРеквизитовКонтрагента.Документ,
		|	ИсторияРеквизитовКонтрагента.Признак
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияРеквизитовКонтрагента.Документ КАК Документ,
		|	ИсторияРеквизитовКонтрагента.ЗначениеРеквизита КАК ЗначениеРеквизита,
		|	ИсторияРеквизитовКонтрагента.Признак КАК Признак
		|ИЗ
		|	ИсторияРеквизитовКонтрагента КАК ИсторияРеквизитовКонтрагента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БлижайшиеЗаписи КАК БлижайшиеЗаписи
		|		ПО ИсторияРеквизитовКонтрагента.Документ = БлижайшиеЗаписи.Документ
		|			И ИсторияРеквизитовКонтрагента.НачалоДействия = БлижайшиеЗаписи.НачалоДействия
		|			И ИсторияРеквизитовКонтрагента.Признак = БлижайшиеЗаписи.Признак";
	
	Запрос.УстановитьПараметр("МассивДокументов", СписокДокументов);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;

КонецФункции

// Заполнение данных выбора идентификатора платежа.
//
// Параметры:
//	ДанныеВыбора - СписокЗначений из Структура - Заполняемые данные выбора.
//	СтруктураОтбора - Структура - Отбор по данным операции.
//
Процедура ЗаполнитьДанныеВыбораУИП(ДанныеВыбора, СтруктураОтбора) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДокументыРасчетовСКлиентами(Истина, СтруктураОтбора);
	
	Запрос.УстановитьПараметр("Организация", СтруктураОтбора.Организация);
	Запрос.УстановитьПараметр("СтрокаПоиска", СтруктураОтбора.Текст);
	Запрос.УстановитьПараметр("ВыборОснованияПлатежа", Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗначениеВыбора = Новый Структура;
		ЗначениеВыбора.Вставить("ОснованиеПлатежа", Неопределено);
		ЗначениеВыбора.Вставить("ОбъектРасчетов", Справочники.ОбъектыРасчетов.ПустаяСсылка());
		ЗначениеВыбора.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		ЗначениеВыбора.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
		
		ЗаполнитьЗначенияСвойств(ЗначениеВыбора, Выборка);
		
		ДанныеВыбора.Добавить(Новый Структура("Значение", ЗначениеВыбора),
			Строка(Выборка.ОбъектРасчетов));
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает перечень документов с их синонимами для назначения платежа
//
// Возвращаемое значение:
//  Структура - Структура, в ключах которой - имена документов, в значениях - синонимы.
//
Функция ПолучитьПредставленияДокументов()

	ВидыДокументовКонтрагента = Новый Структура;
	ВидыДокументовКонтрагента.Вставить("ЗаказКлиента",                         НСтр("ru = 'заказу'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПоставщику",                      НСтр("ru = 'заказу'"));
	ВидыДокументовКонтрагента.Вставить("ЗаявкаНаВозвратТоваровОтКлиента",      НСтр("ru = 'заявке на возврат товаров'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",                    НСтр("ru = 'отчету комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",                       НСтр("ru = 'отчету комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании",              НСтр("ru = 'отчету комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями",    НСтр("ru = 'отчету комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациями",    НСтр("ru = 'накладной'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеТоваровУслуг",             НСтр("ru = 'накладной'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеУслугПрочихАктивов",       НСтр("ru = 'акту'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг",               НСтр("ru = 'накладной'"));
	ВидыДокументовКонтрагента.Вставить("ТаможеннаяДекларацияИмпорт",           НСтр("ru = 'декларации на товары'"));

	Возврат ВидыДокументовКонтрагента;
	
КонецФункции // ПолучитьПредставленияДокументов()

// Выводит сообщения об ошибках при вводе списания безналичных ДС на основании
// нескольких документов.
//
// Параметры
//  Выборка  - Выборка из результата запроса.
//
// Возвращаемое значение:
//   Булево   - Истина, если отказ от ввода на основании.
//
Функция СообщитьОбОшибкахФормированияДанныхЗаполненияСписанияДС(Выборка)

	Отказ = Ложь;
	
	ТекстСообщения = НСтр("ru = 'У выделенных документов отличается %ПредставлениеПоля%'");
	
	Если Выборка.ЕстьОтличияКонтрагент Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'поле ""Контрагент""'")),,,, Отказ);
	КонецЕсли;

	Если Выборка.ЕстьОтличияОрганизация Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'поле ""Организация""'")),,,, Отказ);
	КонецЕсли;
	
	Если Выборка.ЕстьОтличияТип Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'тип документов'")),,,, Отказ);
	КонецЕсли;
	
	Возврат Отказ;


КонецФункции

Функция РазложитьСтрокуНазначенияВМассивСлов(Знач Строка)
	
	Слова = Новый Массив;
	
	РазмерТекста = СтрДлина(Строка);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		ОчСимвол = Сред(Строка, Позиция, 1);
		Если ОчСимвол = " " Тогда
			Если Позиция <> НачалоСлова И Позиция - НачалоСлова > 2 Тогда
				Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова И Позиция - НачалоСлова > 2 Тогда
		Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции

Функция ОпределитьТипСоздаваемогоДокумента(ДанныеОплаты)

	ТипДокумента = Неопределено;

	Если ДанныеОплаты.ПоступлениеСписание = Перечисления.ТипыДвиженияДенежныхСредств.Списание Тогда
		Если ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			ТипДокумента = "СписаниеБезналичныхДенежныхСредств";
		ИначеЕсли ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			ТипДокумента = "РасходныйКассовыйОрдер";
		ИначеЕсли ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			ТипДокумента = "ОперацияПоПлатежнойКарте";
		КонецЕсли;
	ИначеЕсли ДанныеОплаты.ПоступлениеСписание = Перечисления.ТипыДвиженияДенежныхСредств.Поступление Тогда
		Если ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			ТипДокумента = "ПоступлениеБезналичныхДенежныхСредств";
		ИначеЕсли ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			ТипДокумента = "ПриходныйКассовыйОрдер";
		ИначеЕсли ДанныеОплаты.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			ТипДокумента = "ОперацияПоПлатежнойКарте";
		КонецЕсли;
	КонецЕсли;

	Возврат ТипДокумента;

КонецФункции

Функция ИнициализироватьЗависимостиПолейФормы()
	
	ЗависимостьПолейФормы = Новый ТаблицаЗначений;
	ЗависимостьПолейФормы.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ЗависимостьПолейФормы.Колонки.Добавить("ЗависимыеПоля", Новый ОписаниеТипов("Массив"));
	
	Возврат ЗависимостьПолейФормы;
	
КонецФункции

Процедура ЗаполнитьРеквизитыПоОтбору(Отбор, Реквизиты)
	
	Если Отбор = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Реквизиты.Найти(Строка(ЭлементОтбора.ЛевоеЗначение)) = Неопределено Тогда
				Реквизиты.Добавить(Строка(ЭлементОтбора.ЛевоеЗначение));
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЗаполнитьРеквизитыПоОтбору(ЭлементОтбора, Реквизиты);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция возвращает нераспределенный по объектам расчетов остаток платежа платежного документа.
//
// Параметры:
//	Объект - ФормаКлиентскогоПриложения, ДокументОбъект - Форма или документ по которому нужно рассчитать остаток.
//	Ссылка - Неопределено
//
// Возвращаемое значение:
//	Число - Сумма нераспределенного платежа.
//
Функция НераспределенныйОстатокПлатежа(Объект, Ссылка = Неопределено) Экспорт
	
	Если Ссылка = Неопределено Тогда
		Ссылка = Объект.Ссылка;
	КонецЕсли;
	
	ОперацииВзаиморасчетов = Новый Массив;
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	
	Если ОперацииВзаиморасчетов.Найти(Объект.ХозяйственнаяОперация) = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	ОбъектыРасчетов = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовПоСсылке(Ссылка);
	
	СуммаНеРаспределено = 0;
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) ИЛИ ОбъектыРасчетов.Найти(СтрокаРасшифровки.ОбъектРасчетов) <> Неопределено Тогда
			СуммаНеРаспределено = СуммаНеРаспределено + СтрокаРасшифровки.Сумма;
		КонецЕсли;
	КонецЦикла;
	Возврат СуммаНеРаспределено;
	
КонецФункции

// Процедура формирует надпись гиперссылки нераспределенного платежа. 
// Форма должна содержать элемент типа Декорация - Надпись "ГиперссылкаРеквизитыОбъектаРасчетов".
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения - Форма инициатор заполнения.
//	Объект					- ДанныеФормыСтруктура - Объект формы.
//	ПроверятьРасхождения	- Булево - Нужно ли проверять расхождения договоров расшифровки по ключевым реквизитам.
//								Если проверять расхождения нужно форма должна содержать элемент типа Декорация - Картинка "ДекорацияЕстьРасхождения".
//
Процедура СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов(Форма, Объект, ПроверятьРасхождения = Ложь) Экспорт
	
	ЭлементФормы = Форма.Элементы.ГиперссылкаРеквизитыОбъектаРасчетов; // ПолеФормы
	
	СуммаНеРаспределено = НераспределенныйОстатокПлатежа(Объект);
	
	Если СуммаНеРаспределено = 0 Тогда
		
		Операция = Объект.ХозяйственнаяОперация;
		ЭтоОперацияВозвратаДС = (Операция = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации
			Или Операция = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
			Или Операция = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
			Или Операция = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		
		Если НЕ ЭтоОперацияВозвратаДС Тогда
			ЭлементФормы.Доступность = Ложь;
			Если ПроверятьРасхождения Тогда
				Форма.Элементы.ДекорацияЕстьРасхождения.Видимость = Ложь;
			КонецЕсли;
			
			ЭлементФормы.Заголовок = НСтр("ru = 'Объекты расчетов указаны для всей суммы платежа'");
			
		Иначе
			ЭлементФормы.Доступность = Истина;
			ЭлементФормы.Заголовок = НСтр("ru = 'Аналитика возврата'");
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы, "ДекорацияЕстьРасхождения", "Видимость", Ложь);
		КонецЕсли;
		
	Иначе
		
		ЭлементФормы.Доступность = Истина;
		ЭлементФормы.Заголовок =
			СтрШаблон(НСтр("ru = 'Без указания объекта расчетов: %1 %2'"), СуммаНеРаспределено, Объект.Валюта);
			
		Если ПроверятьРасхождения Тогда
			
			СтруктураРеквизитов = Новый Структура();
			СтруктураРеквизитов.Вставить("ГруппаФинансовогоУчета",  Объект.ГруппаФинансовогоУчета);
			СтруктураРеквизитов.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
			СтруктураРеквизитов.Вставить("Договор",                 Объект.Договор);
			СтруктураРеквизитов.Вставить("Подразделение",           Объект.Подразделение);
			СтруктураРеквизитов.Вставить("ДокументСсылка",          Объект["Ссылка"]);
			
			РеквизитыНераспределенногоПлатежа = РеквизитыНераспределенногоПлатежа(Объект.РасшифровкаПлатежа, СтруктураРеквизитов);
			Если РеквизитыНераспределенногоПлатежа.Количество() > 1 Тогда
				Форма.Элементы.ДекорацияЕстьРасхождения.Видимость = Истина;
			Иначе
				Форма.Элементы.ДекорацияЕстьРасхождения.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Функция возвращает таблицу реквизитов договоров с расчетами не по договорам и самого документа платежа.
//
// Параметры:
//	РасшифровкаПлатежа - ТаблицаЗначений - Расшифровка платежа документа.
//	СтруктураРеквизитов - Структура - Структура реквизитов объекта расчетов-платежа.
//		* ГруппаФинансовогоУчета 	- СправочникСсылка.ГруппыФинансовогоУчета 	- ГФУ платежка.
//		* Подразделение 			- СправочникСсылка.Подразделения 			- Подразделение платежа.
//		* НаправлениеДеятельности	- СправочникСсылка.НаправленияДеятельности	- Направление деятельности платежа.
//		* Договор 					- СправочникСсылка.ДоговорыКонтрагентов,СправочникСсылка.ДоговорыМеждуОрганизациями - Договор платежа.
//		* ДокументСсылка			- ДокументСсылка - Ссылка на документ платежа.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица реквизитов договоров из табличной части.
//		* ГруппаФинансовогоУчета 	- СправочникСсылка.ГруппыФинансовогоУчета 	- ГФУ договора/платежки.
//		* Подразделение 			- СправочникСсылка.Подразделения 			- Подразделение договора/платежки.
//		* НаправлениеДеятельности	- СправочникСсылка.НаправленияДеятельности	- Направление деятельности договора/платежки.
//		* Договор 					- СправочникСсылка.ДоговорыКонтрагентов,СправочникСсылка.ДоговорыМеждуОрганизациями - Договоры расшифровки и платежки.
//
Функция РеквизитыНераспределенногоПлатежа(ЗНАЧ РасшифровкаПлатежа, ЗНАЧ СтруктураРеквизитов) Экспорт
	
	МассивДоговоров    = Новый Массив;
	ЕстьПустоеЗначение = Ложь;
	ОбъектыРасчетов = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовПоСсылке(СтруктураРеквизитов.ДокументСсылка);
	
	Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
		Если (НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) ИЛИ ОбъектыРасчетов.Найти(СтрокаРасшифровки.ОбъектРасчетов) <> Неопределено) Тогда
			Если ЗначениеЗаполнено(СтрокаРасшифровки.ОснованиеПлатежа) Тогда
				Если МассивДоговоров.Найти(СтрокаРасшифровки.ОснованиеПлатежа) = Неопределено Тогда
					МассивДоговоров.Добавить(СтрокаРасшифровки.ОснованиеПлатежа);
				КонецЕсли;
			Иначе
				ЕстьПустоеЗначение = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВсеДоговоры.ГруппаФинансовогоУчета  КАК ГруппаФинансовогоУчета,
	|	ВсеДоговоры.Подразделение           КАК Подразделение,
	|	ВсеДоговоры.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВсеДоговоры.Ссылка                  КАК Договор
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДоговорыКонтрагентов.ГруппаФинансовогоУчета  КАК ГруппаФинансовогоУчета,
	|		ДоговорыКонтрагентов.Подразделение           КАК Подразделение,
	|		ДоговорыКонтрагентов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ДоговорыКонтрагентов.Ссылка                  КАК Ссылка
	|	ИЗ
	|		Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|	ГДЕ
	|		ДоговорыКонтрагентов.Ссылка В(&СписокДоговоров)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДоговорыМеждуОрганизациями.ГруппаФинансовогоУчета,
	|		ДоговорыМеждуОрганизациями.Подразделение,
	|		ДоговорыМеждуОрганизациями.НаправлениеДеятельности,
	|		ДоговорыМеждуОрганизациями.Ссылка
	|	ИЗ
	|		Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
	|	ГДЕ
	|		ДоговорыМеждуОрганизациями.Ссылка В(&СписокДоговоров)) КАК ВсеДоговоры";
	Запрос.УстановитьПараметр("СписокДоговоров", МассивДоговоров);
	РеквизитыНераспределенногоПлатежа = Запрос.Выполнить().Выгрузить();
	Если ЕстьПустоеЗначение Тогда
		НовСтр = РеквизитыНераспределенногоПлатежа.Добавить();
		НовСтр.Договор                 = СтруктураРеквизитов.Договор;
		НовСтр.ГруппаФинансовогоУчета  = СтруктураРеквизитов.ГруппаФинансовогоУчета;
		НовСтр.Подразделение           = СтруктураРеквизитов.Подразделение;
		НовСтр.НаправлениеДеятельности = СтруктураРеквизитов.НаправлениеДеятельности;
	КонецЕсли;
	РеквизитыНераспределенногоПлатежа.Свернуть("ГруппаФинансовогоУчета, Подразделение, НаправлениеДеятельности, Договор");
	Возврат РеквизитыНераспределенногоПлатежа;
КонецФункции

// Заполняет список выбора периодов
//
// Параметры:
//     Форма - ФормаКлиентскогоПриложения - Форма.
//     Дата - Дата - Дата отчета.
//
Процедура ЗаполнитьСписокВыбораПериодовАвансовогоОтчета(Форма, Дата) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СписокВыбораПериода = Элементы.ПериодАвансовогоОтчета.СписокВыбора;
	СписокВыбораПериода.Очистить();
	СписокВыбораПериода.Добавить(НСтр("ru = 'Через неделю'"),     НСтр("ru = 'Через неделю'"));
	СписокВыбораПериода.Добавить(НСтр("ru = 'Через две недели'"), НСтр("ru = 'Через две недели'"));
	СписокВыбораПериода.Добавить(НСтр("ru = 'Через месяц'"),      НСтр("ru = 'Через месяц'"));
	СписокВыбораПериода.Добавить("ДоДаты",                      НСтр("ru = 'До даты...'"));
	
	Если Не ЗначениеЗаполнено(Объект["Ссылка"])
		И Не ЗначениеЗаполнено(Объект.ДатаАвансовогоОтчета) Тогда
		
		Форма.ПериодАвансовогоОтчета = НСтр("ru = 'Через неделю'");
		
	Иначе
		Если Объект.ДатаАвансовогоОтчета = НачалоДня(Дата) + 7 * 24 * 3600 Тогда
			Форма.ПериодАвансовогоОтчета = НСтр("ru = 'Через неделю'");
		ИначеЕсли Объект.ДатаАвансовогоОтчета = НачалоДня(Дата) + 14 * 24 * 3600 Тогда
			Форма.ПериодАвансовогоОтчета = НСтр("ru = 'Через две недели'");
		ИначеЕсли Объект.ДатаАвансовогоОтчета = ДобавитьМесяц(НачалоДня(Дата), 1) Тогда
			Форма.ПериодАвансовогоОтчета = НСтр("ru = 'Через месяц'");
		Иначе
			Форма.ПериодАвансовогоОтчета = Объект.ДатаАвансовогоОтчета;
			
			Элементы.ПериодАвансовогоОтчета.ОграничениеТипа = Новый ОписаниеТипов("Дата");
			Элементы.ПериодАвансовогоОтчета.КнопкаВыбора = Истина;
			Элементы.ПериодАвансовогоОтчета.РедактированиеТекста = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//++ Локализация
//-- Локализация

Функция РасположениеНациональногоКода(КодСтраны)
	
	РасположенияКода = Новый Структура;
	РасположенияКода.Вставить("AL", Новый Структура("Позиция, Длина", 5, 7));
	РасположенияКода.Вставить("AD", Новый Структура("Позиция, Длина", 5, 8));
	РасположенияКода.Вставить("AT", Новый Структура("Позиция, Длина", 5, 5));
	РасположенияКода.Вставить("AZ", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("BH", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("BY", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("BE", Новый Структура("Позиция, Длина", 5, 3));
	РасположенияКода.Вставить("BA", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("BR", Новый Структура("Позиция, Длина", 5, 13));
	РасположенияКода.Вставить("BG", Новый Структура("Позиция, Длина", 5, 8));
	РасположенияКода.Вставить("CR", Новый Структура("Позиция, Длина", 5, 3));
	РасположенияКода.Вставить("HR", Новый Структура("Позиция, Длина", 5, 7));
	РасположенияКода.Вставить("CY", Новый Структура("Позиция, Длина", 5, 8));
	РасположенияКода.Вставить("CZ", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("DK", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("DO", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("TL", Новый Структура("Позиция, Длина", 5, 3));
	РасположенияКода.Вставить("EE", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("FO", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("FI", Новый Структура("Позиция, Длина", 5, 6));
	РасположенияКода.Вставить("FR", Новый Структура("Позиция, Длина", 5, 10));
	РасположенияКода.Вставить("GE", Новый Структура("Позиция, Длина", 5, 2));
	РасположенияКода.Вставить("DE", Новый Структура("Позиция, Длина", 5, 8));
	РасположенияКода.Вставить("GI", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("GR", Новый Структура("Позиция, Длина", 5, 3));
	РасположенияКода.Вставить("GL", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("GT", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("HU", Новый Структура("Позиция, Длина", 5, 7));
	РасположенияКода.Вставить("IS", Новый Структура("Позиция, Длина", 5, 6));
	РасположенияКода.Вставить("IE", Новый Структура("Позиция, Длина", 5, 10));
	РасположенияКода.Вставить("IL", Новый Структура("Позиция, Длина", 5, 6));
	РасположенияКода.Вставить("IT", Новый Структура("Позиция, Длина", 6, 10));
	РасположенияКода.Вставить("JO", Новый Структура("Позиция, Длина", 5, 8));
	РасположенияКода.Вставить("KZ", Новый Структура("Позиция, Длина", 5, 3));
	РасположенияКода.Вставить("XK", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("KW", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("LV", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("LB", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("LI", Новый Структура("Позиция, Длина", 5, 5));
	РасположенияКода.Вставить("LT", Новый Структура("Позиция, Длина", 5, 5));
	РасположенияКода.Вставить("LU", Новый Структура("Позиция, Длина", 5, 3));
	РасположенияКода.Вставить("MK", Новый Структура("Позиция, Длина", 5, 3));
	РасположенияКода.Вставить("MT", Новый Структура("Позиция, Длина", 5, 9));
	РасположенияКода.Вставить("MR", Новый Структура("Позиция, Длина", 5, 10));
	РасположенияКода.Вставить("MU", Новый Структура("Позиция, Длина", 5, 8));
	РасположенияКода.Вставить("MC", Новый Структура("Позиция, Длина", 5, 10));
	РасположенияКода.Вставить("MD", Новый Структура("Позиция, Длина", 5, 2));
	РасположенияКода.Вставить("ME", Новый Структура("Позиция, Длина", 5, 3));
	РасположенияКода.Вставить("NL", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("NO", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("PK", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("PS", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("PL", Новый Структура("Позиция, Длина", 5, 7));
	РасположенияКода.Вставить("PT", Новый Структура("Позиция, Длина", 5, 8));
	РасположенияКода.Вставить("QA", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("RO", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("SM", Новый Структура("Позиция, Длина", 6, 10));
	РасположенияКода.Вставить("SA", Новый Структура("Позиция, Длина", 5, 2));
	РасположенияКода.Вставить("RS", Новый Структура("Позиция, Длина", 5, 3));
	РасположенияКода.Вставить("SK", Новый Структура("Позиция, Длина", 5, 4));
	РасположенияКода.Вставить("SI", Новый Структура("Позиция, Длина", 5, 5));
	РасположенияКода.Вставить("ES", Новый Структура("Позиция, Длина", 5, 8));
	РасположенияКода.Вставить("SE", Новый Структура("Позиция, Длина", 5, 3));
	РасположенияКода.Вставить("CH", Новый Структура("Позиция, Длина", 5, 5));
	РасположенияКода.Вставить("TN", Новый Структура("Позиция, Длина", 5, 5));
	РасположенияКода.Вставить("TR", Новый Структура("Позиция, Длина", 5, 5));
	РасположенияКода.Вставить("UA", Новый Структура("Позиция, Длина", 5, 6));
	РасположенияКода.Вставить("AE", Новый Структура("Позиция, Длина", 5, 3));
	РасположенияКода.Вставить("GB", Новый Структура("Позиция, Длина", 5, 10));
	РасположенияКода.Вставить("VG", Новый Структура("Позиция, Длина", 5, 4));
	
	ВозвращаемоеЗначение = Неопределено;
	РасположенияКода.Свойство(КодСтраны, ВозвращаемоеЗначение);
	Возврат ВозвращаемоеЗначение
	
КонецФункции

Функция ПустаяТаблицаСведенийОКонтрагентах()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Документ");
	Результат.Колонки.Добавить("Признак");
	Результат.Колонки.Добавить("ЗначениеРеквизита");
	
	Возврат Результат;

КонецФункции

// Функция возвращает текст запроса по документам расчетов с клиентами.
//
// Параметры:
//	ВыборОснованияПлатежа - Булево - признак выполнения операции по выбору основания платежа.
//	ПараметрыОтбора - Структура - См. подробное описание в ВзаиморасчетыСервер.ПараметрыОтбораПриВыбореДокументаРасчетовСКлиентами).
//
// Возвращаемое значение:
// 	Строка - Текст запроса.
//
Функция ПолучитьТекстЗапросаДокументыРасчетовСКлиентами(ВыборОснованияПлатежа, ПараметрыОтбора) Экспорт
	
	ТекстыЗапросов = Новый Массив;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента) Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерПоДаннымКлиента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаПоДаннымКлиента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		ИЛИ (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|	И НЕ ДанныеДокумента.ХозяйственнаяОперация В(
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи))
		|	И &ДинамическиеУсловия
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ЗаказКлиента"), ПараметрыОтбора);
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ВыборОснованияПлатежа И ПравоДоступа("Чтение", Метаданные.Документы.СчетНаОплатуКлиенту) Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ДокументОснование ССЫЛКА Документ.ЗаказКлиента
		|		И ДанныеДокумента.ДокументОснование.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		ТОГДА ДанныеДокумента.ДокументОснование
		|	КОГДА ДанныеДокумента.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.ДокументОснование
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.СчетНаОплатуКлиенту КАК ДанныеДокумента
		|ГДЕ
		|	ИСТИНА
		|	И &ДинамическиеУсловия
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.СчетНаОплатуКлиенту"), ПараметрыОтбора);
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	
	Если ТекстЗапроса = "" Тогда
		Возврат "";
	Иначе
		
		ИтоговыйЗапрос = "
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка                        КАК ОснованиеПлатежа,
		|	ТаблицаДокументов.ИдентификаторПлатежа          КАК ИдентификаторПлатежа,
		|	ТаблицаДокументов.Дата                          КАК Дата,
		|	ТаблицаДокументов.Номер                         КАК Номер,
		|	ТаблицаДокументов.НомерПоДаннымКонтрагента      КАК НомерПоДаннымКонтрагента,
		|	ТаблицаДокументов.ДатаПоДаннымКонтрагента       КАК ДатаПоДаннымКонтрагента,
		|	ТаблицаДокументов.Организация                   КАК Организация,
		|	ТаблицаДокументов.Партнер                       КАК Партнер,
		|	ТаблицаДокументов.Контрагент                    КАК Контрагент,
		|	ТаблицаДокументов.Договор                       КАК Договор,
		|	ТаблицаДокументов.Сумма                         КАК Сумма,
		|	ТаблицаДокументов.Валюта                        КАК Валюта,
		|	ТаблицаДокументов.Тип                           КАК Тип,
		|	ТаблицаДокументов.ЭтоРасчетыСКлиентами          КАК ЭтоРасчетыСКлиентами,
		|	ТаблицаДокументов.ОбъектРасчетов                КАК ОбъектРасчетов,
		|	ТаблицаДокументов.СостояниеДокумента            КАК СостояниеДокумента
		|ИЗ
		|	&ТекстЗапроса КАК ТаблицаДокументов";
		
		ИтоговыйЗапрос = СтрЗаменить(ИтоговыйЗапрос, "&ТекстЗапроса", "(" + ТекстЗапроса + ")");
		
		Возврат ИтоговыйЗапрос;
		
	КонецЕсли;
	
КонецФункции

// Дополняет текст запроса отборами в функции ПолучитьТекстЗапросаДокументыРасчетовСКлиентами().
// 
// Параметры:
//	ТекстЗапроса - Строка - Изменяемый текст запроса.
//	ТипОбъекта - Тип - Тип документа для которого формируется запрос.
//	ПараметрыОтбора - Структура - см. функцию ПараметрыОтбораПриВыбореДокументаРасчетовСКлиентами().
//
Процедура ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(ТекстЗапроса, ТипОбъекта, ПараметрыОтбора)
	
	УсловияЗапроса = Новый Массив;
	
	Если ПараметрыОтбора.Свойство("Организация") Тогда
		УсловияЗапроса.Добавить("ДанныеДокумента.Организация В (&Организация)");
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("Текст") И ЗначениеЗаполнено(ПараметрыОтбора.Текст) Тогда
		
		Если ПараметрыОтбора.ВводПоСтроке Тогда
			
			Если ПараметрыОтбора.ЭтоУИП Тогда
				УсловияЗапроса.Добавить("ДанныеДокумента.ИдентификаторПлатежа ПОДОБНО ""%"" + &СтрокаПоиска + ""%""");
			Иначе
				УсловияЗапроса.Добавить("ДанныеДокумента.Номер ПОДОБНО ""%"" + &СтрокаПоиска + ""%""");
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыОтбора.ЭтоУИП Тогда
				УсловияЗапроса.Добавить("ДанныеДокумента.ИдентификаторПлатежа В (&СтрокаПоиска)");
			Иначе	
				УсловияЗапроса.Добавить("ДанныеДокумента.Номер В (&СтрокаПоиска)");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДинамическиеУсловия", СтрСоединить(УсловияЗапроса, " И "));
	
КонецПроцедуры

#КонецОбласти

#Область НалогообложениеНДС

// Процедура заполняет реквизит НалогообложениеНДС табличной части РасшифровкаПлатежа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект;
//	НалогообложениеНДСПоУмолчанию - ПеречислениеСсылка.ТипыНалогообложенияНДС - Исходное значение налогообложения НДС для документа;
//	ЭлементНалогообложениеНДС - ПолеФормы - элемент формы для выбора налогообложения НДС.
//	ЭлементНалогообложениеНДСВозврата - ПолеФормы - Дублирующее поле формы для группы АналитикаВозврата.
//
Процедура ЗаполнитьНалогообложениеНДС(Объект, НалогообложениеНДСПоУмолчанию, ЭлементНалогообложениеНДС, ЭлементНалогообложениеНДСВозврата=Неопределено) Экспорт
	
	НалогообложениеНДСПоУмолчанию = Объект.НалогообложениеНДС;
	НалогообложениеПоДоговору = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		НалогообложениеПоДоговору = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "НалогообложениеНДС");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НалогообложениеНДСПоУмолчанию) Тогда
		НалогообложениеПоДоговору = НалогообложениеНДСПоУмолчанию;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(Объект.Ссылка);
	
	ИспользоватьНалогообложениеНДСПоХозяйственнойОперации = Ложь;
	СписоХозяйственныхОперацийПродаж = ПолучитьСписокХозяйственныхОперацийПродажДляДокумента(ТипДокумента);
	СписокХозяйственныхОперацийЗакупок = ПолучитьСпосокХозяйственныхОперацийЗакупкиДляДокумента(ТипДокумента);
	
	Если НЕ СписоХозяйственныхОперацийПродаж.Найти(Объект.ХозяйственнаяОперация) = Неопределено Тогда
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		ПараметрыЗаполнения = МенеджерОбъекта.ПараметрыЗаполненияНалогообложенияНДСПродажи(Объект);
		УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДСПоУмолчанию, ПараметрыЗаполнения, Неопределено);
		УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(ЭлементНалогообложениеНДС, НалогообложениеНДСПоУмолчанию, ПараметрыЗаполнения, Неопределено);
		Если ЭлементНалогообложениеНДСВозврата <> Неопределено Тогда
			УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(ЭлементНалогообложениеНДСВозврата, НалогообложениеНДСПоУмолчанию, ПараметрыЗаполнения, Неопределено);
		КонецЕсли;
		
		ИспользоватьНалогообложениеНДСПоХозяйственнойОперации = Истина;
		
	ИначеЕсли НЕ СписокХозяйственныхОперацийЗакупок.Найти(Объект.ХозяйственнаяОперация) = Неопределено Тогда
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		ПараметрыЗаполнения = МенеджерОбъекта.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект);
		УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(НалогообложениеНДСПоУмолчанию, ПараметрыЗаполнения, Неопределено);
		УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(ЭлементНалогообложениеНДС, НалогообложениеНДСПоУмолчанию, ПараметрыЗаполнения, Неопределено);
		Если ЭлементНалогообложениеНДСВозврата <> Неопределено Тогда
			УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(ЭлементНалогообложениеНДСВозврата, НалогообложениеНДСПоУмолчанию, ПараметрыЗаполнения, Неопределено);
		КонецЕсли;
		
		ИспользоватьНалогообложениеНДСПоХозяйственнойОперации = Истина;
		
	КонецЕсли;
	
	Для Каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
			
		Если (ЗначениеЗаполнено(СтрокаРасшифровкиПлатежа.ОбъектРасчетов)
				И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРасшифровкиПлатежа.ОбъектРасчетов, "Объект") = Объект.Ссылка)
				ИЛИ НЕ ИспользоватьНалогообложениеНДСПоХозяйственнойОперации Тогда
				
			НалогообложениеНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРасшифровкиПлатежа.ОбъектРасчетов, "НалогообложениеНДС");
			
			Если НЕ ЗначениеЗаполнено(НалогообложениеНДС) Тогда
				НалогообложениеНДС = НалогообложениеПоДоговору;
			КонецЕсли;
			
		Иначе
			НалогообложениеНДС = НалогообложениеНДСПоУмолчанию;
		КонецЕсли;
		
		ПресчитатьСтавку = Ложь;
		ПересчитатьСуммуНДС = Ложь;
		
		Если НЕ НалогообложениеНДС = СтрокаРасшифровкиПлатежа.НалогообложениеНДС Тогда
			
			СтрокаРасшифровкиПлатежа.НалогообложениеНДС = НалогообложениеНДС; 
			ПресчитатьСтавку = Истина;
		
		КонецЕсли;
		
		Если ПресчитатьСтавку ИЛИ СтрокаРасшифровкиПлатежа.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка() Тогда
			
			СтруктураПараметровДействия = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);
			СтруктураПараметровДействия.НалогообложениеНДС = СтрокаРасшифровкиПлатежа.НалогообложениеНДС;
			
			СтруктураДействий = Новый Структура;
			
			Если СтрокаРасшифровкиПлатежа.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка() Тогда
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", СтруктураПараметровДействия);
				
				ПересчитатьСуммуНДС = Истина;
			Иначе
				
				СтавкаНДС = СтрокаРасшифровкиПлатежа.СтавкаНДС;
				УчетНДСУП.ЗаполнитьСтавкуНДСДляПлатежей(
					СтрокаРасшифровкиПлатежа.СтавкаНДС,
					СтрокаРасшифровкиПлатежа.НалогообложениеНДС,
					Объект.Организация,
					Объект.Дата);
				ПересчитатьСуммуНДС = НЕ СтавкаНДС = СтрокаРасшифровкиПлатежа.СтавкаНДС;
				
			КонецЕсли;
		
			Если ПересчитатьСуммуНДС Тогда
				
				СтруктураПересчетаСуммы = Новый Структура;
				СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
				
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРасшифровкиПлатежа, СтруктураДействий, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
			
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет реквизиты СтавкаНДС,СуммаНДС табличной части РасшифровкаПлатежа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект;
//	ИдСтроки - Число, Неопределено - Идентификатор строки для обновления ставки, если не задано, то обновляется все строки;
//
Процедура ОбновитьСтавкуНДСИПересчитатьСуммуНДС(Объект, ИдСтроки) Экспорт
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	СтруктураДействий = Новый Структура;
	СтрокаРасшифровкиПлатежа = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
	
	Если (ЗначениеЗаполнено(СтрокаРасшифровкиПлатежа.ОбъектРасчетов)
		И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРасшифровкиПлатежа.ОбъектРасчетов, "Объект") = Объект.Ссылка) Тогда //НЕ ЗначениеЗаполнено(СтрокаПлатежа.Заказ) ИЛИ СтрокаПлатежа.Заказ = Объект.Ссылка Тогда
		СтрокаРасшифровкиПлатежа.НалогообложениеНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРасшифровкиПлатежа.ОбъектРасчетов, "НалогообложениеНДС");
		УчетНДСУП.ЗаполнитьСтавкуНДСДляПлатежей(СтрокаРасшифровкиПлатежа.СтавкаНДС, СтрокаРасшифровкиПлатежа.НалогообложениеНДС, Объект.Организация, Объект.Дата);
	Иначе
		СтрокаРасшифровкиПлатежа.НалогообложениеНДС = Объект.НалогообложениеНДС;
		СтруктураПараметровДействия = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", СтруктураПараметровДействия);	
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРасшифровкиПлатежа, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Функция ПолучитьСпосокХозяйственныхОперацийВозвратаДляДокумента(ТипДокумента)
	
	МассивХозяйственныхОпераций = Новый Массив();
	
	Если ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
		
	КонецЕсли;
	
	Возврат МассивХозяйственныхОпераций;
	
КонецФункции

Процедура ОчиститьНалогообложениеНДС(Объект)
	
	Если ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
		
		ТипДокумента = ТипЗнч(Объект.Ссылка);
		
		СписокДоступныОпераций = ПолучитьСписокХозяйственныхОперацийПродажДляДокумента(ТипДокумента);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокДоступныОпераций, ПолучитьСпосокХозяйственныхОперацийЗакупкиДляДокумента(ТипДокумента));
		
		Если СписокДоступныОпераций.Найти(Объект.ХозяйственнаяОперация) = Неопределено Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		Иначе
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			|	ВЫРАЗИТЬ(РасшифровкаПлатежа.ОбъектРасчетов КАК Справочник.ОбъектыРасчетов) КАК ОбъектРасчетов
			|ПОМЕСТИТЬ РасшифровкаПлатежа
			|ИЗ
			|	&ТаблицаПлатежей КАК РасшифровкаПлатежа
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбъектыРасчетов.Ссылка КАК Ссылка
			|ИЗ
			|	РасшифровкаПлатежа КАК РасшифровкаПлатежа
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
			|		ПО РасшифровкаПлатежа.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
			|ГДЕ
			|	ОбъектыРасчетов.ТипСсылки = &ТипСсылки
			|	ИЛИ РасшифровкаПлатежа.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)";
			
			ТипСсылкиДляОбъектаРасчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипДокумента);
			
			Запрос.УстановитьПараметр("ТаблицаПлатежей", Объект.РасшифровкаПлатежа);
			Запрос.УстановитьПараметр("ТипСсылки", ТипСсылкиДляОбъектаРасчета);
			Результат = Запрос.Выполнить().Выбрать();
			
			Если НЕ Результат.Следующий() Тогда
				Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры



// Процедура устанавливает представление налогообложения НДС в списке выбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма документа.
//	СписокВыбора - СписокЗначений - список доступных налогообложений и представлений.
//
Процедура УстановитьОтображениеНалогообложениеНДС(Форма, СписокВыбора) Экспорт
	
	Для каждого ЭлементВыбора из СписокВыбора Цикл
		УстановитьУсловноеОформлениеНалогообложениеНДСОтображение(Форма, ЭлементВыбора.Значение,
			?(ЗначениеЗаполнено(ЭлементВыбора.Представление), ЭлементВыбора.Представление, ЭлементВыбора.Значение));
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает признак отсутствия или совпадения объекта расчета в строке с документом.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//
Процедура ЗаполнитьСоответствиеОбъектовРасчетаТекущемуДокументу(Объект) Экспорт
	
	Для Каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
		
		СтрокаРасшифровкиПлатежа.ОбъектРасчетовСовпадаетСДокументом = ?( НЕ ЗначениеЗаполнено(СтрокаРасшифровкиПлатежа.ОбъектРасчетов)
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРасшифровкиПлатежа.ОбъектРасчетов, "Объект") = Объект.Ссылка, Истина, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает условное оформление для поля НалогообложениеНДС.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма документа
//
Процедура УстановитьУсловноеОформлениеНалогообложениеНДС(Форма) Экспорт
	
	ТипДокумента = ТипЗнч(Форма.Объект.Ссылка);
	
	СписокДоступныОпераций = ПолучитьСписокХозяйственныхОперацийПродажДляДокумента(ТипДокумента);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокДоступныОпераций, ПолучитьСпосокХозяйственныхОперацийЗакупкиДляДокумента(ТипДокумента));
	
	СписокХозяйственныхОпераций = Новый СписокЗначений();
	СписокХозяйственныхОпераций.ЗагрузитьЗначения(СписокДоступныОпераций);
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.РасшифровкаПлатежаНалогообложениеНДС.Имя);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокХозяйственныхОпераций;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.ОбъектРасчетовСовпадаетСДокументом");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.РасшифровкаПлатежаНалогообложениеНДС.Имя);
	
	ГруппаОтбораИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокХозяйственныхОпераций;

	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.ОбъектРасчетовСовпадаетСДокументом");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	//
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.РасшифровкаПлатежаНалогообложениеНДСТекст.Имя);
	
	ГруппаОтбораИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокХозяйственныхОпераций;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.ОбъектРасчетовСовпадаетСДокументом");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.DarkGray);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<совпадает с объектом расчетов>'"));
	
	//
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.РасшифровкаПлатежаНалогообложениеНДСТекст.Имя);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокХозяйственныхОпераций;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.ОбъектРасчетовСовпадаетСДокументом");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.РасшифровкаПлатежаСтавкаНДС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.РасшифровкаПлатежаСуммаНДС.Имя);
	
	СписокНалогообложений = Новый СписокЗначений();
	СписокНалогообложений.ЗагрузитьЗначения(УчетНДСУПКлиентСервер.ТипыНалогообложенияСкрывающиеРеквизитыНДС());
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.НалогообложениеНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокНалогообложений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеНалогообложениеНДСОтображение(Форма, НалогообложениеНДС, Представление)
	
	ИдентификаторПользовательскойНастройки = Строка(НалогообложениеНДС);
	Элемент = Неопределено;
	
	Для Каждого ЭлементОформления из Форма.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Элемент = ЭлементОформления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Элемент = Неопределено Тогда
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	КонецЕсли;
	
	Элемент.ИдентификаторПользовательскойНастройки = Строка(НалогообложениеНДС);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.РасшифровкаПлатежаНалогообложениеНДС.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.НалогообложениеНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НалогообложениеНДС;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Представление);
	
КонецПроцедуры


Функция НазванияЭлементовФорм(Элементы, МассивРеквизитов)
	
	ВозвращаемоеЗначение = Новый Массив;
	Для Каждого Элемент Из МассивРеквизитов Цикл
		Если Элемент = "Товары.СуммаВознаграждения" Тогда
			ВозвращаемоеЗначение.Добавить(Элементы.ТоварыСуммаВознаграждения.Имя);
		ИначеЕсли Элемент = "Товары.СуммаНДСВознаграждения" Тогда
			ВозвращаемоеЗначение.Добавить(Элементы.ТоварыСуммаНДСВознаграждения.Имя);
		Иначе
			ВозвращаемоеЗначение.Добавить(Элементы[Элемент].Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции

#КонецОбласти
