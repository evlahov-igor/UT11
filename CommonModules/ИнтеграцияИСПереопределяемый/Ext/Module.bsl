// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеИПроверкаЗаполнения

// Переопределение/дополнение события "Перед записью" библиотечных справочников и документов.
//   Позволяет модифицировать библиотечные объекты при необходимости.
//   * Не вызывается в режиме "ОбменДанными.Загрузка"
// 
// Параметры:
//  Объект          - СправочникОбъект, ДокументОбъект - записываемый объект
//  Отказ           - Булево - Отказ
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи (для документов)
//  РежимПроведения - РежимПроведенияДокумента - режим проведения (для документов)
// 
Процедура ПередЗаписьюОбъекта(Объект, Отказ, РежимЗаписи = Неопределено, РежимПроведения = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет в табличной части служебные реквизиты, например: признак использования характеристик номенклатуры, артикул.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, Неопределено - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция, ТаблицаЗначений - таблица для заполнения,
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") Тогда
		КолонкиРеквизитов = ТабличнаяЧасть.Колонки;
	Иначе
		КолонкиРеквизитов = ТабличнаяЧасть.Выгрузить(Новый Массив).Колонки;
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("Артикул")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "Артикул"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("Код")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакКод",
			Новый Структура("Номенклатура", "Код"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ХарактеристикиИспользуются")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ЕдиницаИзмерения")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакЕдиницаИзмерения",
			Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ТипНоменклатуры")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ТипНоменклатуры"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ТребуетВзвешивания")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТребуетВзвешивания",
			Новый Структура("Номенклатура", "ТребуетВзвешивания"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ПроизвольнаяЕдиницаУчета")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакПроизвольнаяЕдиницаУчета",
			Новый Структура("Номенклатура", "ПроизвольнаяЕдиницаУчета"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("НоваяХарактеристикаИспользуется")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("НоваяНоменклатура", "НоваяХарактеристикаИспользуется"));
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		ТабличнаяЧасть, ПараметрыЗаполненияРеквизитов);
		
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Обрабатывает строку табличной части в соостветствии с переданной структурой действий.
//
// Параметры:
//  СтрокаТабличнойЧасти - Структура, СтрокаТабличнойЧасти, ДанныеФормыЭлементКоллекции - обрабатываемая строка.
//  СтруктураДействий - структура - структура выполняемых действий.
Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий) Экспорт
	
	//++ НЕ ГОСИС

	ТипСтрокиТабличнойЧасти = ТипЗнч(СтрокаТабличнойЧасти);
	
	Если ТипСтрокиТабличнойЧасти = Тип("Структура") Тогда
		СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаТабличнойЧасти, Ложь);
	ИначеЕсли ТипСтрокиТабличнойЧасти = Тип("СтрокаТаблицыЗначений") Тогда
		СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТабличнойЧасти);
	ИначеЕсли Метаданные.НайтиПоТипу(ТипСтрокиТабличнойЧасти) <> Неопределено Тогда
		СтрокаТабличнойЧастиСтруктурой = Новый Структура();
		ПодстрокиИмени = СтрРазделить(Метаданные.НайтиПоТипу(ТипСтрокиТабличнойЧасти).ПолноеИмя(), ".");
		
		Если ПодстрокиИмени.Количество() = 4 Тогда
			РеквизитыСтроки = Метаданные.Документы[ПодстрокиИмени[1]].ТабличныеЧасти[ПодстрокиИмени[3]].Реквизиты;
			Для Каждого РеквизитСтроки Из РеквизитыСтроки Цикл
				СтрокаТабличнойЧастиСтруктурой.Вставить(РеквизитСтроки.Имя, СтрокаТабличнойЧасти[РеквизитСтроки.Имя]);
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧастиСтруктурой.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
		
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабличнойЧастиСтруктурой, "СуммаНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабличнойЧастиСтруктурой, "СуммаСНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабличнойЧастиСтруктурой, "Сумма") Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТабличнойЧастиСтруктурой, СтруктураДействий, Неопределено);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиСтруктурой);

	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Проверяет заполнение характеристик в таблице значений.
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - таблица для проверки с колонками: Номенклатура, Характеристика.
//  Отказ - Булево - Истина - характеристики заполнены в требуемых строках, в противном случае - Ложь.
Процедура ПроверитьЗаполнениеХарактеристикВТаблицеЗначений(ТаблицаТоваров, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)";

	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Необходимо заполнить информацию о сертификатах номенклатуры в виде соответствия из массива структур со свойствами:
//    "ВидСертификации", "НомерСертификации" и "ДатаСертификации". Информацию по сертификатам следует добавить в соответствие
//     "СертификатыНоменклатуры".
// 
// Параметры:
//  СписокНоменклатуры - ОпределяемыйТип.Номенклатура - элемент номенклатура.
//  СертификатыНоменклатуры - Соответствие:
//   * Ключ - ОпределяемыйТип.Номенклатура,
//   * Значение - структура:
//   ** ВидСертификации - ПеречислениеСсылка.ВидыДокументовОбязательнойСертификацииИСМП - Вид сертификата.
//   ** НомерСертификации - Строка - Идентификационный номер сертификата.
//   ** ДатаСертификации - Дата - Дата начала действия сертификата.
Процедура ПриЗаполненииСертификатовНоменклатуры(СписокНоменклатуры, СертификатыНоменклатуры) Экспорт
	
	//++ НЕ ГОСИС
	ИспользоватьСертификатыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры");
	
	Если Не ИспользоватьСертификатыНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ВидыНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&СписокНоменклатуры)
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбластиДействияСертификатовНоменклатуры.Номенклатура КАК Номенклатура,
	|	СертификатыНоменклатуры.Бессрочный                   КАК Бессрочный,
	|	СертификатыНоменклатуры.ДатаОкончанияСрокаДействия   КАК ДатаОкончанияСрокаДействия,
	|	СертификатыНоменклатуры.ДатаНачалаСрокаДействия      КАК ДатаСертификации,
	|	СертификатыНоменклатуры.ТипСертификата               КАК ТипСертификата,
	|	СертификатыНоменклатуры.Номер                        КАК НомерСертификации
	|ИЗ
	|	РегистрСведений.ОбластиДействияСертификатовНоменклатуры КАК ОбластиДействияСертификатовНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыНоменклатуры КАК СертификатыНоменклатуры
	|		ПО ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры = СертификатыНоменклатуры.Ссылка
	|ГДЕ
	|	ОбластиДействияСертификатовНоменклатуры.Номенклатура В (&СписокНоменклатуры)
	|	ИЛИ ОбластиДействияСертификатовНоменклатуры.ВидНоменклатуры В
	|		(Выбрать
	|			ВидыНоменклатуры.ВидНоменклатуры
	|		Из
	|			ВидыНоменклатуры КАК ВидыНоменклатуры)
	|	И ОбластиДействияСертификатовНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|УПОРЯДОЧИТЬ ПО
	|	Бессрочный убыв,
	|	ДатаОкончанияСрокаДействия убыв";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	ДанныеСертификатов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДанных Из ДанныеСертификатов Цикл
		
		ВидСертификации = Неопределено;
		
		Если СтрокаДанных.ТипСертификата = "Сертификат соответствия" Тогда
			ВидСертификации = Перечисления.ВидыДокументовОбязательнойСертификацииИСМП.СертификатСоответствия;
		ИначеЕсли СтрокаДанных.ТипСертификата = "Декларация о соответствии" Тогда 
			ВидСертификации = Перечисления.ВидыДокументовОбязательнойСертификацииИСМП.ДекларацияСоответствия;
		КонецЕсли;
		
		Если ВидСертификации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИнформацияОСертификате = Новый Структура;
		ИнформацияОСертификате.Вставить("ВидСертификации",   ВидСертификации);
		ИнформацияОСертификате.Вставить("НомерСертификации", СтрокаДанных.НомерСертификации);
		ИнформацияОСертификате.Вставить("ДатаСертификации",  СтрокаДанных.ДатаСертификации);
		
		СертификатыЭлемента = СертификатыНоменклатуры.Получить(СтрокаДанных.Номенклатура);
		
		Если СертификатыЭлемента = Неопределено Тогда
			СертификатыЭлемента = Новый Массив;
			СертификатыЭлемента.Добавить(ИнформацияОСертификате);
			СертификатыНоменклатуры.Вставить(СтрокаДанных.Номенклатура, СертификатыЭлемента);
		Иначе
			СертификатыЭлемента.Добавить(ИнформацияОСертификате);
		КонецЕсли;
		
	КонецЦикла;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

// В функции требуется определить право на регистрацию нового штрихкода для текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право на регистрацию штрихкода. Ложь - в противном случае.
//
Процедура ПравоРегистрацииШтрихкодовНоменклатуры(ДоступРазрешен) Экспорт
	
	//++ НЕ ГОСИС
	ДоступРазрешен = ШтрихкодированиеНоменклатурыСервер.ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить признак использования характеристик 
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования характеристик (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеХарактеристик(Использование, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Использование = Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить наличие товаров по виду продукции для которых используется механизм частичного выбытия
//
// Параметры:
//  Использование - Булево - Признак использования частичного выбытия (для вида продукции)
//  ВидПродукцииИС - Перечислениессылка.ВидыПродукцииИС - Проверяемый вид продукции.
//
Процедура ИспользованиеЧастичноеВыбытие(Использование, ВидПродукцииИС) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИС));
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка
		|		И ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия <> ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)
		|ГДЕ
		|	Номенклатура.ОсобенностьУчета = &ОсобенностьУчета";
	Использование = Не Запрос.Выполнить().Пустой();
	//-- НЕ ГОСИС
	
КонецПроцедуры

// В процедуре требуется определить признак использования серий
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования серий (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеСерий(Использование, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА
		|			Номенклатура.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|		ТОГДА
		|			Номенклатура.ВладелецСерий.ИспользоватьСерии
		|		КОГДА
		|			Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|		ТОГДА
		|			Номенклатура.ВидНоменклатуры.ИспользоватьСерии
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ПризнакИспользованияСерий
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Использование = Ложь;
		Если Выборка.Следующий() Тогда
			Использование = Выборка.ПризнакИспользованияСерий;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить признак использования упаковок для номенклатуры.
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования упаковок (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеУпаковок(Использование, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Использование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ИспользоватьУпаковки");
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить признак использования видов номенклатуры.
//
// Параметры:
//  Использование - Булево - Признак использования видов номенклатуры в программе.
//
Процедура ИспользованиеВидовНоменклатуры(Использование) Экспорт
	
	//++ НЕ ГОСИС
	Использование = Истина;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#Область ОписаниеНоменклатурыИС

// В процедуре требуется определить наличие товаров по виду продукции для которых единица учета не совпадает с 
//   количеством в потребительском коде маркировки
//
// Параметры:
//  Использование - Булево - Признак использования произвольных единиц учета (для вида продукции) (исходящий)
//  ВидПродукцииИС - Перечислениессылка.ВидыПродукцииИС - Проверяемый вид продукции.
//
Процедура ИспользованиеПроизвольныхЕдиницУчета(Использование, ВидПродукцииИС) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	
	ОсобенностьУчета = Новый Массив;
	Если ВидПродукцииИС = Неопределено Тогда
		Для Каждого ВидПродукции Из ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции() Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	Иначе
		ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИС));
	КонецЕсли;
	Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	Запрос.УстановитьПараметр("МерныеТипы", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО (ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка
		|			Или ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.НаборУпаковок)
		|		И (ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке <> 1
		|			Или ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки > 1)
		|ГДЕ
		|	Номенклатура.ОсобенностьУчета В(&ОсобенностьУчета)
		|
		|ОБъЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО (ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка
		|			Или ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.НаборУпаковок)
		|ГДЕ
		|	ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
		|	И СправочникНоменклатура.ОсобенностьУчета В(&ОсобенностьУчета)
		|	И СправочникНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипы)
		|";
	Использование = Не Запрос.Выполнить().Пустой();
	//-- НЕ ГОСИС
	
КонецПроцедуры

// В процедуре требуется определить наличие маркируемых товаров для которых нет стандартной фабричной упаковки
//   (настраиваемых не в регистре ОписаниеноменклатурыИС).
//
// Параметры:
//  Использование - Булево - Признак использования произвольных единиц учета (исходящий).
//
Процедура ИспользованиеПродукцииТребующейВзвешивания(Использование) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	
	ОсобенностьУчета = Новый Массив;
	Для Каждого ВидПродукции Из ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции() Цикл
		ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
	КонецЦикла;
	Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	
	Запрос.УстановитьПараметр("МерныеТипы", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО (ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка
		|			Или ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.НаборУпаковок)
		|ГДЕ
		|	ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
		|	И СправочникНоменклатура.ОсобенностьУчета В(&ОсобенностьУчета)
		|	И СправочникНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипы)
		|";
	Использование = Не Запрос.Выполнить().Пустой();
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Работа с регистром "ОписаниеНоменклатурыИС" при использовании источника описания номенклатуры отличного от ссылки 
//   на номенклатуру:
//   * Дополняет входящий массив классами номенклатуры,
//   * Возвращает соответствие добавленных классов и исходной номенклатуры.
//
// Параметры:
//  Номенклатура - Массив Из ОпределяемыйТип.ИсточникОписанияноменклатурыИС - Источник описания номенклатуры.
//  СоответстиеИсточникаНоменклатуре - Соответствие - описание добавленных классов номенклатуры:
//   * Ключ - ОпределяемыйТип.ИсточникОписанияноменклатурыИС - Источник описания номенклатуры,
//   * Значение - Массив Из ОпределяемыйТип.номенклатура - номенклатура из входящего массива
Процедура ДополнитьИсточникиОписанияНоменклатуры(Номенклатура, СоответстиеИсточникаНоменклатуре) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.НаборУпаковок КАК НаборУпаковок,
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&номенклатура)
	|	И Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|	И Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлементСоответствия = СоответстиеИсточникаНоменклатуре.Получить(Выборка.НаборУпаковок);
		Если ЭлементСоответствия = Неопределено Тогда
			ЭлементСоответствия = новый Массив;
			СоответстиеИсточникаНоменклатуре.Вставить(Выборка.НаборУпаковок, ЭлементСоответствия);
		КонецЕсли;
		ЭлементСоответствия.Добавить(Выборка.Ссылка);
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Работа с регистром "ОписаниеНоменклатурыИС" при использовании значений описания номенклатуры отличных от напрямую
//   записанных в регистре, а также при использовании режима "ВариантыИспользованияЕдиницыХраненияИСМП.ЗаданУпаковками":
//   * Дополняет входящий текст запроса.
//
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса получения описания номенклатуры ИС.
Процедура ДополнитьТекстЗапросаОписанияНоменклатуры(ТекстЗапроса) Экспорт
	
	//++ НЕ ГОСИС
	
	// Дополняем:
	// 1. Получение реквизита "Вариант частичного выбытия" из явного указания субпотребительской упаковки
	// 2. Получение реквизита "ЕмкостьПотребительскойУпаковки" в зависимости от указания упаковок
	// 3. Изменение значения по-умолчанию для продукции с мерным типом измеряемой величины единицы хранения
	// 4. Не для алкоголя и немаркируемой продукции
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОписаниеНоменклатурыИС.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИСМП.ЗаданУпаковками)
		|				И ОписаниеНоменклатурыИС.ПотребительскаяУпаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				И ОписаниеНоменклатурыИС.УпаковкаЧастичногоВыбытия <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИСМП.ЗаданУпаковками)
		|			ТОГДА 0
		|		ИНАЧЕ ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки
		|	КОНЕЦ                               КАК ЕмкостьПотребительскойУпаковки,
		|	ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке  КАК КоличествоВПотребительскойУпаковке,
		|	ВЫБОР
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИСМП.ЗаданУпаковками)
		|			ТОГДА ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИСМП.ЧастьПотребительскойУпаковки)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ТекущаяНоменклатура)
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИСМП.ГрупповаяЛогистическаяУпаковка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИСМП.ПотребительскаяУпаковка)
		|			ТОГДА ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)
		|	КОНЕЦ                                                      КАК ВариантЧастичногоВыбытия,
		|	ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения КАК ВариантИспользованияЕдиницыХранения,
		|	ОписаниеНоменклатурыИС.ПотребительскаяУпаковка             КАК ПотребительскаяУпаковка,
		|	ОписаниеНоменклатурыИС.УпаковкаЧастичногоВыбытия           КАК УпаковкаЧастичногоВыбытия
		|ИЗ
		|	РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|ГДЕ
		|	ОписаниеНоменклатурыИС.Номенклатура В (&Номенклатура)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка,
		|	Неопределено,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ОсобенностьУчета В (
		|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС),
		|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС))
		|		И СправочникНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь))
		|			ТОГДА 0
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Духи)
		|			И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак)
		|		ТОГДА ЗНАЧЕНИЕ (Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ОсобенностьУчета В (
		|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС),
		|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС))
		|		И СправочникНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИСМП.МернаяПродукцияТребуетУказанияЗначения)
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	Неопределено,
		|	Неопределено
		|ИЗ Справочник.Номенклатура КАК СправочникНоменклатура
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|	ПО ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	СправочникНоменклатура.Ссылка В (&Номенклатура)
		|	И ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
		|";
		
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Работа с регистром "ОписаниеНоменклатурыИС" при использовании значений описания номенклатуры отличных от напрямую
//   записанных в регистре:
//   * Модифицирует соединение с регистром если в качестве источника описания может использоваться не номенклатура,
//   * Получает значение служебного реквизита "Произвольная единица учета" (для номенклатуры единица учета отличается от
//     маркированной потребительской упаковки),
//   * Получает значение служебного реквизита "Требует взвешивания" (маркированные потребительские упаковки имеют
//     индивидуальный вес).
//
// Параметры:
//  ТекстЗапроса          - Строка - текст запроса с регистром "ОписаниеНоменклатурыИС" (исходящий),
//  ПутьКРегистру         - Строка - имя таблицы регистра "ОписаниеНоменклатурыИС" в запросе,
//  ПутьКПолюНоменклатура - Строка - путь к номенклатуре в запросе
Процедура ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, ПутьКРегистру, ПутьКПолюНоменклатура) Экспорт
	
	//++ НЕ ГОСИС
	// Соединение с регистром
	ИмяПоляЗамены = "&ТоварыОписаниеНоменклатурыИС";
	ТекстЗамены = СтрШаблон("%2.Номенклатура = %1
	|	ИЛИ %2.Номенклатура = %1.НаборУпаковок", ПутьКПолюНоменклатура, ПутьКРегистру);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПоляЗамены, ТекстЗамены);
	// Получение признака Произвольная единица учета
	ИмяПоляЗамены = "&ПроизвольнаяЕдиницаУчета";
	ТекстЗамены = СтрШаблон("ЕСТЬNULL(%1.КоличествоВПотребительскойУпаковке, 1) <> 1
	|	ИЛИ ЕСТЬNULL(%1.ЕмкостьПотребительскойУпаковки, 1) > 1
	|	ИЛИ (%1.Номенклатура ЕСТЬ NULL
	|		И %2.ОсобенностьУчета В (
	|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС),
	|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС))
	|		И %2.ЕдиницаИзмерения.ТипИзмеряемойВеличины В(
	|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)))
	|", ПутьКРегистру, ПутьКПолюНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПоляЗамены, ТекстЗамены);
	// Получение признака Требует взвешивания
	ИмяПоляЗамены = "&ТребуетВзвешивания";
	ТекстЗамены = СтрШаблон("%1.Номенклатура ЕСТЬ NULL
	|	И %2.ОсобенностьУчета В (
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС))
	|	И %2.ЕдиницаИзмерения.ТипИзмеряемойВеличины В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь))
	|", ПутьКРегистру, ПутьКПолюНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПоляЗамены, ТекстЗамены);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить коэффициент упаковки относительно базовой единицы хранения.
// 
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//  Упаковка     - ОпределяемыйТип.Упаковка     - Упаковка номенклатуры.
//  Коэффициент  - Число                        - Выходной параметр. Коэффициент упаковки номенклатуры.
Процедура ПриОпределенииКоэффициентаУпаковкиНоменклатуры(Номенклатура, Упаковка, Коэффициент) Экспорт
	
	//++ НЕ ГОСИС
	Коэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Упаковка, Номенклатура);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область МаркируемаяПродукция

Процедура ПриЗаполненииТекстаЗапросаПризнакаМаркируемаяПродукцияПоНоменклатуре(ТекстЗапроса, ИмяТаблицыНоменклатура, ИмяПоляНоменклатура) Экспорт
	
	//++ НЕ ГОСИС
	ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ
		|	Товары.%1 КАК Номенклатура,
		|	%3 КАК Маркируемый
		|ИЗ %2 КАК Товары",
		ИмяПоляНоменклатура,
		ИмяТаблицыНоменклатура,
		ИнтеграцияИСУТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(
			СтрШаблон("Товары.%1",ИмяПоляНоменклатура)));
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КодыТНВЭД

// В данной процедуре требуется переопределить текст запроса, определяющий сопоставление классификатора ТН ВЭД и данных регистра сведений КодыТНВЭДИСМП.
//   Требования к тексту запроса:
//     Если классификатора ТН ВЭД не используется, переопределение также не заполнять.
//     Результат запроса обязательно должен содержать следующие поля:
//   Колонки временной таблицы "ДанныеШтрихкодовУпаковок":
//    * КодТНВЭД   - Строка - код.
//    * ВидПродукции - Перечислениессылка.ВидыПродукцииИС - вид продукции.
//    * НаименованиеПолное - Строка - наименование.
//    * КодТНВЭДСсылка - Произвольный - ссылка на сопоставленный элемент классификатора.
//    * Сопоставлено - Число - 0, если в базе найден соотвествующий элемент классификатора, 1 - если найден.
// Параметры:
//  ТекстЗапроса - Строка - Переопределяемый текст запроса.
Процедура ПриОпределенииТекстаЗапросаСопоставлениеКодовТНВЭД(ТекстЗапроса) Экспорт
	
	//++ НЕ ГОСИС
	ТекстЗапроса = "ВЫБРАТЬ
	|	КодыТНВЭДИСМП.КодТНВЭД           КАК КодТНВЭД,
	|	КодыТНВЭДИСМП.ВидПродукции       КАК ВидПродукции,
	|	КодыТНВЭДИСМП.НаименованиеПолное КАК НаименованиеПолное,
	|
	|	ЕстьNULL(КлассификаторТНВЭД.Ссылка, Неопределено) КАК КодТНВЭДСсылка,
	|	ВЫБОР
	|		КОГДА КлассификаторТНВЭД.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Сопоставлено
	|ИЗ
	|	РегистрСведений.КодыТНВЭДИСМП КАК КодыТНВЭДИСМП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ПО КодыТНВЭДИСМП.КодТНВЭД = КлассификаторТНВЭД.Код";
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОрганизацииИКонтрагенты

// Проверяет использование подразделений в информационной базе.
// 
// Параметры:
//  Использовать - Булево - Подразделения используются (исходящий).
//
Процедура ИспользованиеПодразделений(Использовать) Экспорт
	
	//++ НЕ ГОСИС
	Использовать = ИнтеграцияГИСМ_УТ.ИспользоватьПодразделения();
	//-- НЕ ГОСИС
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными из информационной базы.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  Сведения - Структура - структура с реквизитами организации, которые требуется заполнить,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ЗаполнитьСведенияОбОрганизации(Организация, Сведения, ДатаСведений = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Если ДатаСведений = Неопределено Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, ДатаСведений);
	ЗаполнитьЗначенияСвойств(Сведения, СведенияОбОрганизации);
	
	Если СведенияОбОрганизации.Свойство("ОфициальноеНаименование") Тогда
		Сведения.Вставить("Наименование", СведенияОбОрганизации.ОфициальноеНаименование);
	Иначе
		Сведения.Вставить("Наименование", СведенияОбОрганизации.Представление);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными ИНН/КПП из информационной базы.
//
// Параметры:
//  Сведения    - Структура - структура с реквизитами организации/контрагента, которые требуется заполнить,
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - ссылка на 
//                                                                                              собственную организацию или контрагента
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
Процедура ЗаполнитьИННКПППоОрганизацииКонтрагенту(Сведения, Организация, ТорговыйОбъект = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",         Организация);
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка";
		
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(ТорговыйОбъект)
		И ТипЗнч(ТорговыйОбъект) = Тип("СправочникСсылка.Склады") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Подразделение                         КАК Подразделение,
		|	ВЫРАЗИТЬ(&Ссылка КАК Справочник.Организации) КАК Организация
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &ТорговыйОбъект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(Данные.Организация.ИНН, """") КАК ИНН,
		|	ВЫБОР
		|		КОГДА РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(Данные.Организация.КПП, """")
		|		ИНАЧЕ ЕСТЬNULL(РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.КПП, """")
		|	КОНЕЦ КАК КПП
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|		ПО Данные.Подразделение = РегистрацииВНалоговомОргане.Подразделение
		|		И Данные.Организация = РегистрацииВНалоговомОргане.Организация
		|";
		
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(ТорговыйОбъект)
		И ТипЗнч(ТорговыйОбъект) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(&ТорговыйОбъект КАК Справочник.СтруктураПредприятия) КАК Подразделение,
		|	ВЫРАЗИТЬ(&Ссылка КАК Справочник.Организации)                  КАК Организация
		|ПОМЕСТИТЬ Данные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(Данные.Организация.ИНН, """") КАК ИНН,
		|	ВЫБОР
		|		КОГДА РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(Данные.Организация.КПП, """")
		|		ИНАЧЕ ЕСТЬNULL(РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.КПП, """")
		|	КОНЕЦ КАК КПП
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|		ПО Данные.Подразделение = РегистрацииВНалоговомОргане.Подразделение
		|		И Данные.Организация = РегистрацииВНалоговомОргане.Организация
		|";
		
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Сведения, Выборка);
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

//Получение кода ОКОПФ по организации.
//
//Параметры:
//  КодОКОПФ    - Строка - Код ОКОПФ организации.
//  Организация - ОпределяемыйТип.Организация - Организация, для которой необходимо получить код ОКОПФ.
//
Процедура КодОКОПФОрганизации(КодОКОПФ, Организация) Экспорт
	
	//++ НЕ ГОСИС
	Если ЗначениеЗаполнено(Организация) Тогда
		КодОКОПФ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОКОПФ");
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет представление руководителя организации.
//
// Параметры:
//  ПредставлениеРуководителя - (см. ИнтеграцияИС.ДанныеРуководителяОрганизации)
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
Процедура ОпределитьДанныеРуководителяОрганизации(ПредставлениеРуководителя, Организация, ДатаСведений) Экспорт
	
	//++ НЕ ГОСИС
	ДанныеРуководителя = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(Организация, ДатаСведений);
	ПредставлениеРуководителя.Руководитель = Строка(ДанныеРуководителя.ФизическоеЛицо);
	ПредставлениеРуководителя.Должность = Строка(ДанныеРуководителя.Должность);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - найденная организация (исходящий),
//              - Неопределено - организация не найдена (исходящий),
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
//
Процедура ЗаполнитьОрганизациюПоИННКПП(Организация, ИНН, КПП) Экспорт
	
	//++ НЕ ГОСИС
	Организация = Неопределено;
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП, Организация);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск контрагента по ИНН и/или КПП.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - найденный контрагент (исходящий),
//             - Неопределено - контрагент не найден (исходящий),
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
//
Процедура ЗаполнитьКонтрагентаПоИННКПП(Контрагент, ИНН, КПП) Экспорт
	
	//++ НЕ ГОСИС
	Контрагент = Неопределено;
	Если ПустаяСтрока(ИНН) И ПустаяСтрока(КПП) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = ПартнерыИКонтрагентыЛокализация.ИННКППУжеИспользуетсяВИнформационнойБазе(ИНН, КПП);
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		Контрагент = РезультатПоиска.Ссылка;
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции ИНН.
//
// Параметры:
//  КоллекцияИНН - Массив - Список ИНН.
//  Соответствие - Соответствие - Соответсвие вида:
//   * Ключ - Строка - ИНН
//   * Значение - СправочникСсылка.Контрагенты - Контрагент
Процедура ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, Соответствие) Экспорт
	
	//++ НЕ ГОСИС
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН    КАК ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В (&КоллекцияИНН)
	|");
	Запрос.УстановитьПараметр("КоллекцияИНН", КоллекцияИНН);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ИНН, Выборка.Контрагент);
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции налоговых номеров. Ключ - налоговый номер, значение - Контрагент.
//
// Параметры:
//  КоллекцияНалоговыхНомеров - Массив - Список налоговых номеров юр.лиц за пределами РФ.
//  Соответствие - Соответствие - Соответсвие вида:
//    * Ключ - Строка - Налоговый номер
//    * Значение - СправочникСсылка.Контрагенты - Контрагент
Процедура ПриОпределенииСоответствияНалоговыхНомеровКонтрагентам(КоллекцияНалоговыхНомеров, Соответствие) Экспорт
	
	//++ НЕ ГОСИС
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.НалоговыйНомер КАК НалоговыйНомер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.НалоговыйНомер В (&КоллекцияНалоговыхНомеров)");
	Запрос.УстановитьПараметр("КоллекцияНалоговыхНомеров", КоллекцияНалоговыхНомеров);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.НалоговыйНомер, Выборка.Контрагент);
	КонецЦикла;
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо заполнить соответствие по коллекции ИНН.
//
// Параметры:
//  КоллекцияИНН - Массив - Список ИНН.
//  Соответствие - Соответствие - Соответсвие вида:
//   * Ключ - Строка - ИНН организации
//   * Значение - ОпределяемыйТип.Организация - Организация
Процедура ЗаполнитьСоответствиеИННОрганизациям(КоллекцияИНН, Соответствие) Экспорт
	
	//++ НЕ ГОСИС
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.ИНН    КАК ИНН
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН В (&КоллекцияИНН)
	|");
	Запрос.УстановитьПараметр("КоллекцияИНН", КоллекцияИНН);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ИНН, Выборка.Организация);
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации в прикладном объекте.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - найденная организация
//  Объект      - Произвольный                - объект в котором производится поиск
//
Процедура ПриОпределенииОрганизацииИзПрикладногоОбъекта(Организация, Объект) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "ХозяйствующийСубъект, Предприятие");
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Реквизиты.ХозяйствующийСубъект, Реквизиты.Предприятие);
		
		Организация = ПредставленияСопоставлений.КонтрагентХозяйствующегоСубъекта.Ссылка;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Объект.ХозяйствующийСубъект, Объект.Предприятие);
		
		Организация = ПредставленияСопоставлений.КонтрагентХозяйствующегоСубъекта.Ссылка;
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда;
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Организация");
		
	Иначе
		
		Организация = Объект.Организация;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	//++ НЕ ГОСИС
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы);
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Если Форма.ИмяФормы <> "Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "ОбщаяФорма.ФормаУточненияДанныхИС" Тогда
			
		Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				Префикс + "ВыгрузитьДанныеВТСД",
				"Видимость",
				Ложь);
		КонецЦикла;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

//Особенности работы с длительными операциями в конкретном окружении
//
//Параметры:
//   Параметры - Структура - параметры фонового задания.
//   ПараметрыВыполнения - см. ДлительныеОперации.ПараметрыВыполненияВФоне.
Процедура НастроитьДлительнуюОперацию(Параметры, ПараметрыВыполнения) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПечатныхФорм

// Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте.
//
// Параметры:
//  ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
//  ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах.
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	//++ НЕ ГОСИС
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначенияУТ

// (См ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании)
Процедура ПроверитьВозможностьВводаНаОсновании(Документ,
	                                           Статус = Неопределено,
	                                           ЕстьОшибкиПроведен = Ложь,
	                                           ЕстьОшибкиСтатус = Ложь,
	                                           МассивДопустимыхСтатусов = Неопределено,
	                                           СоглашениеДоступноВнешнемуПользователю = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Документ,
		Статус,
		ЕстьОшибкиПроведен,
		ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов,
		СоглашениеДоступноВнешнемуПользователю);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Возвращает представление объекта.
// 
// Параметры:
//  Представление - Строка - Исходящий параметр со значением представления.
//  ПараметрОбъект - Строка, ОбъектМетаданных - Наименование типа объекта либо сам объект.
Процедура УстановитьПредставлениеОбъекта(Представление, ПараметрОбъект) Экспорт
	
	//++ НЕ ГОСИС
	Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(ПараметрОбъект);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет представление строки номенклатуры.
//
// Параметры:
//  Представление  - Строка                                     - представление для заполнения,
//  Номенклатура   - ОпределяемыйТип.Номенклатура               - ссылка на номенклатуру,
//  Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//  Упаковка       - ОпределяемыйТип.Упаковка                   - ссылка на упаковку.
//  Серия          - ОпределяемыйТип.СерияНоменклатуры          - ссылка на серию номенклатуры.
Процедура ЗаполнитьПредставлениеНоменклатуры(Представление, Номенклатура, Характеристика, Упаковка, Серия) Экспорт
	
	//++ НЕ ГОСИС
	Представление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		СокрЛП(Номенклатура),
		СокрЛП(Характеристика),
		Упаковка,
		Серия);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПраваДоступа

// Проверяет наличие права создания контрагента у текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Процедура ПравоСозданияКонтрагента(ДоступРазрешен) Экспорт
	
	//++ НЕ ГОСИС
	ДоступРазрешен = ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ВызовыИзБСП

// (См. ОбщийМодуль.ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту)
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	//++ НЕ ГОСИС
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область МенюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
Процедура ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
Процедура ДобавитьКомандуДвиженияДокумента(КомандыОтчетов) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

// В процедуре необходимо реализовать проверку возможности выбора серии для номенклатуры.
// 
// Параметры:
//  ДанныеДляРасчетаСерии  - Структура - Данные для расчета серий.
//  ПараметрыУказанияСерий - Структура - Параметры указания серий.
//  ТребуетсяВыбор         - Булево - исходящий, признак необходимости выбора серии.
//  СерияДолжнаБытьУказана - Булево - исходящий, признак обязательного заполнения серии.
//  КэшированныеЗначения   - Произвольный - кэшированные значения
//
Процедура ПриОпределенииНеобходимостиВыбораСерии(ДанныеДляРасчетаСерии, ПараметрыУказанияСерий, ТребуетсяВыбор, СерияДолжнаБытьУказана, КэшированныеЗначения = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Если ПараметрыУказанияСерий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = Новый Структура;
	КонецЕсли;
	
	// Автоматическая генерация серий в приемке
	Если ДанныеДляРасчетаСерии.Операция = Перечисления.ВидыОперацийИСМП.Приемка Тогда
		Если Не КэшированныеЗначения.Свойство("АвтоматическаяГенерацияСерий") Тогда
			КэшированныеЗначения.Вставить("АвтоматическаяГенерацияСерий", Новый Соответствие);
		КонецЕсли;
		КэшПоиск = КэшированныеЗначения.АвтоматическаяГенерацияСерий.Получить(ДанныеДляРасчетаСерии.Номенклатура);
		Если КэшПоиск = Неопределено Тогда
			КэшПоиск = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляРасчетаСерии.Номенклатура, "ВидНоменклатуры.АвтоматическиГенерироватьСерии");
			КэшированныеЗначения.АвтоматическаяГенерацияСерий.Вставить(ДанныеДляРасчетаСерии.Номенклатура, КэшПоиск);
		КонецЕсли;
		Если КэшПоиск = Истина Тогда
			ТребуетсяВыбор = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Необходимость указания серий
	Если Не КэшированныеЗначения.Свойство("ПризнакУказанияСерий") Тогда
		КэшированныеЗначения.Вставить("ПризнакУказанияСерий", Новый Соответствие);
	КонецЕсли;
	
	КэшПоиск = КэшированныеЗначения.ПризнакУказанияСерий.Получить(ДанныеДляРасчетаСерии.Номенклатура);
	Если КэшПоиск <> Неопределено Тогда
		ТребуетсяВыбор = КэшПоиск;
		Возврат;
	КонецЕсли;
	
	ПараметрыУказанияСерийКопия = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыУказанияСерий, Ложь);
	
	ИмяТЧ = "Товары";
	Если ПараметрыУказанияСерийКопия.Свойство("ВыходныеИзделия") Тогда
		ПараметрыУказанияСерийКопия = ПараметрыУказанияСерийКопия.ВыходныеИзделия;
		ПараметрыУказанияСерийКопия.ПодготовкаОрдера = Истина;
		ИмяТЧ = "ВыходныеИзделия";
	КонецЕсли;
	
	Если ПараметрыУказанияСерийКопия.ИмяТЧТовары = "ПодобраннаяМаркируемаяПродукция" Тогда
		ПараметрыУказанияСерийКопия.ИмяТЧТовары = ИмяТЧ;
		ПараметрыУказанияСерийКопия.ИмяТЧСерии = ИмяТЧ;
		ПараметрыУказанияСерийКопия.ИменаПолейДополнительные.Удалить(
			ПараметрыУказанияСерийКопия.ИменаПолейДополнительные.Найти("КоличествоПодобрано"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыУказанияСерийКопия.ИмяТЧСерии) Тогда 
		ПараметрыУказанияСерийКопия.ИмяТЧСерии = ПараметрыУказанияСерийКопия.ИмяТЧТовары;
	КонецЕсли;
	
	ТекущаяСтрока = Новый Структура;
	
	ТекущаяСтрока.Вставить("Номенклатура",   ДанныеДляРасчетаСерии.Номенклатура);
	ТекущаяСтрока.Вставить("Характеристика", ДанныеДляРасчетаСерии.Характеристика);
	ТекущаяСтрока.Вставить("Склад",          ДанныеДляРасчетаСерии.Склад);
	ТекущаяСтрока.Вставить("Получатель",     ДанныеДляРасчетаСерии.Склад);
	ТекущаяСтрока.Вставить("ТипНоменклатуры");
	ТекущаяСтрока.Вставить("ХарактеристикиИспользуются");
	ТекущаяСтрока.Вставить("Серия");
	ТекущаяСтрока.Вставить("Назначение");
	ТекущаяСтрока.Вставить("НомерСтроки",         1);
	ТекущаяСтрока.Вставить("Количество",          1);
	ТекущаяСтрока.Вставить("КоличествоПодобрано", 1);
	ТекущаяСтрока.Вставить("СтатусУказанияСерийОтправитель", 0);
	ТекущаяСтрока.Вставить("СтатусУказанияСерийПолучатель", 0);
	ТекущаяСтрока.Вставить("Произведено");
	ТекущаяСтрока.Вставить("Отменено");
	ТекущаяСтрока.Вставить("ДатаПроизводства");
	ТекущаяСтрока.Вставить("СтатусУказанияСерий", 0);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",
		ТекущаяСтрока.Характеристика);
		
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));

	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
		Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерийКопия, ДанныеДляРасчетаСерии.Склад));
	
	Кэш = Неопределено;
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Кэш);
	
	ТребуетсяВыбор = Не НоменклатураКлиентСервер.ВЭтомСтатусеСерииНеУказываются(ТекущаяСтрока.СтатусУказанияСерий, ПараметрыУказанияСерийКопия);
	
	Если ТребуетсяВыбор Тогда
		СтатусыСерийСериюМожноУказать = ПроверкаИПодборПродукцииИСМПКлиентСервер.СтатусыСерийСериюМожноУказать();
		СерияДолжнаБытьУказана = СтатусыСерийСериюМожноУказать.Найти(ТекущаяСтрока.СтатусУказанияСерий) = Неопределено;
	Иначе
		СерияДолжнаБытьУказана = Ложь;
	КонецЕсли;
	
	КэшированныеЗначения.ПризнакУказанияСерий.Вставить(ДанныеДляРасчетаСерии.Номенклатура, ТребуетсяВыбор);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет имена реквизитов, от значений которых зависят параметры указания серий.
//
// Параметры:
//  ИменаРеквизитов - Строка           - Результат заполнения.
//  ТипОбъекта      - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
Процедура ЗаполнитьИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ИменаРеквизитов, ТипОбъекта) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		ИменаРеквизитов = "Дата,ДокументОснование,ВидОперации,ТорговыйОбъект";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС
		Или ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС
		Или ТипОбъекта = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС
		Или ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		ИменаРеквизитов = "Дата,ТорговыйОбъект,Ссылка";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		ИменаРеквизитов = "Дата,ДокументОснование,ТорговыйОбъект,Ссылка";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровГИСМ Тогда
		ИменаРеквизитов = "Склад,ОперацияМаркировки,Дата";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		ИменаРеквизитов = "Склад,Дата";
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//  Параметры  - Структура        - выходной, параметры указания серий, состав полей определен в функции
//                                  НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//  ТипОбъекта - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
//  Объект     - Структура        - Структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
Процедура ЗаполнитьПараметрыУказанияСерий(Параметры, ТипОбъекта, Объект) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийТТНИсходящаяЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийТТНВходящаяЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЧекЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийЧекЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЧекЕГАИСВозврат Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийЧекЕГАИСВозврат(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.АктПостановкиНаБалансЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийАктПостановкиНаБалансЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.АктСписанияЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийАктСписанияЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПередачаВРегистр2ЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийПередачаВРегистр2ЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВозвратИзРегистра2ЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийВозвратИзРегистра2ЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.СопоставлениеКлассификаторовЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийСопоставлениеКлассификаторовЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Справочники.ШтрихкодыУпаковокТоваров Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийШтрихкодыУпаковокТоваров(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийСоответствиеНоменклатурыЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОстаткиЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийОстаткиЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийСоответствиеНоменклатурыВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийВходящаяТранспортнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийИнвентаризацияПродукцииВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийПроизводственнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийЗапросСкладскогоЖурналаВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийИсходящаяТранспортнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровГИСМ Тогда
		
		Параметры = ИнтеграцияГИСМУТ.ПараметрыУказанияСерийМаркировкаТоваровГИСМ(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		
		Параметры = ИнтеграцияГИСМУТ.ПараметрыУказанияСерийПеремаркировкаТоваровГИСМ(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийМаркировкаТоваровИСМП(Объект);
	
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВыводИзОборотаИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийВыводИзОборотаИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВозвратВОборотИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийВозвратВОборотИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.ВиртуальнаяАгрегацияУпаковокИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийВиртуальнаяАгрегацияУпаковокИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП
		ИЛИ ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборТабачнойПродукцииМОТП Тогда
		
		ИнтеграцияИСМПУТ.ДополнитьПараметрыУказанияСерийПроверкаИПодборПродукцииИСМП(Параметры, Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.СписаниеКодовМаркировкиИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийСписаниеКодовМаркировки(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийОтгрузкаТоваровИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПриемкаТоваровИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийПриемкаТоваровИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийОтгрузкаТоваровИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.ОбщиеФормы.УточнениеСоставаУпаковкиИС Тогда
		
		ИнтеграцияИСУТ.ДополнитьПараметрыУказанияСерийФормыУточнениеСоставаУпаковкиИС(Параметры, Объект);
	
	ИначеЕсли ТипОбъекта = Метаданные.ОбщиеФормы.ФормаУточненияДанныхИС Тогда
		
		ИнтеграцияИСУТ.ДополнитьПараметрыУказанияСерийФормыУточнениеДанныхИС(Параметры, Объект);
	
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Возвращает параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//  Параметры - Структура - выходной, особенности указания серий в объекте, состав полей определен в функции
//                          НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//  Объект    - ДокументОбъект, ДанныеФормыСтруктура - Объект, для формы которого нужно сформировать параметры
//                                             указания серий.
//  МенеджерОбъекта - ДокументМенеджер - Менеджер объекта, для формы которого нужно сформировать параметры указания серий.
Процедура ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Параметры, Объект, МенеджерОбъекта) Экспорт
	
	//++ НЕ ГОСИС
	Параметры = НоменклатураСервер.ПараметрыУказанияСерий(Объект, МенеджерОбъекта);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Извлекает из временного хранилища серии, указанные в форме редактирования серий, помещает эти строки в ТЧ "Серии" объекта,
//   перерасчитывает статусы указания серий строках товарной табличной части.
//
// Параметры:
//  Форма                       - ФормаКлиентскогоПриложения    - Источник вызова.
//  ПараметрыФормыУказанияСерий - Структура           - Состав полей определен в функции НоменклатураСервер.ПараметрыФормыУказанияСерий.
//  КэшированныеЗначения        - Структура           - Сохраненные значения параметров, используемых при обработке строки таблицы.
Процедура ОбработатьУказаниеСерий(Форма, ПараметрыФормыУказанияСерий, КэшированныеЗначения) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
	Объект = Форма.Объект;
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, ,
		КэшированныеЗначения);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Процедура заполняет статусы указания серий в строках товарной табличной части.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ФормаКлиентскогоПриложения - Общая форма или основной реквизит формы объекта.
//  ПараметрыУказанияСерий - Произвольный - Параметры указания серий номенклатуры.
//
Процедура ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения")
		И Объект.ИмяФормы = "ОбщаяФорма.УточнениеСоставаУпаковкиИС" Тогда
		
		КоличествоПоСтрокамТЧ = Новый Соответствие;
		Для Каждого СтрокаТаблицы Из Объект.ДанныеДляУточнения Цикл
			КоличествоПоСтрокамТЧ.Вставить(СтрокаТаблицы, СтрокаТаблицы.Количество);
			СтрокаТаблицы.Склад = Объект.Склад;
			СтрокаТаблицы.Количество = 1;
		КонецЦикла;
		
		ВременныеПараметры = Новый Структура("ИмяТЧТовары,ИмяТЧСерии,ИмяИсточникаЗначенийВФормеОбъекта");
		ЗаполнитьЗначенияСвойств(ВременныеПараметры, ПараметрыУказанияСерий);
		
		ПараметрыУказанияСерий.ИмяТЧТовары = "ДанныеДляУточнения";
		ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары;
		ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ЭтаФорма";
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		ЗаполнитьЗначенияСвойств(ПараметрыУказанияСерий, ВременныеПараметры);
		
		Для Каждого КлючИЗначение Из КоличествоПоСтрокамТЧ Цикл
			КлючИЗначение.Ключ.Количество = КлючИЗначение.Значение;
		КонецЦикла;
		
	Иначе
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыУказанияСерийФормы(Форма, ИмяРеквизитаОбъект = "Объект", ИмяРеквизитаПараметрыУказанияСерий = "ПараметрыУказанияСерий") Экспорт
	
	//++ НЕ ГОСИС
	ЗаполнитьСтатусыУказанияСерий(Форма[ИмяРеквизитаОбъект], Форма[ИмяРеквизитаПараметрыУказанияСерий]);
	//-- НЕ ГОСИС
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыУказанияСерийФормы(Менеджер, Форма, ИмяРеквизитаОбъект = "Объект", ИмяРеквизитаПараметрыУказанияСерий = "ПараметрыУказанияСерий") Экспорт
	
	//++ НЕ ГОСИС
	ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Форма[ИмяРеквизитаПараметрыУказанияСерий], Форма[ИмяРеквизитаОбъект], Менеджер);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Процедура пересчитывает статусы указания серий в строках товаров, если это необходимо, переподчиняет строки серий 
// другим строкам таблицы.
//
// Параметры:
//  Форма                      - ФормаКлиентскогоПриложения    - Источник вызова.
//  ПараметрыУказанияСерий     - Структура           - Состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//  ТекущаяСтрокаИдентификатор - Число               - Идентификатор текущей строки товаров в форме объекта.
//  КэшированныеЗначения       - Структура           - Сохраненные значения параметров, используемых при обработке строки таблицы.
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
	Форма,
	ПараметрыУказанияСерий = "",
	ТекущаяСтрокаИдентификатор,
	КэшированныеЗначения) Экспорт
	
	//++ НЕ ГОСИС
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	Если (ПараметрыУказанияСерий = "") Тогда
		ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, ПараметрыУказанияСерий,
		ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет текст запроса заполнения статусов указания серий для товаров, указанных в документе.
//
// Параметры:
//  ТекстЗапроса           - Строка           - Текст запроса заполнения статусов указания серий.
//  ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//  ПараметрыУказанияСерий - Структура        - Состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
Процедура ЗаполнитьТекстЗапросаЗаполненияСтатусовУказанияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Справочники.ШтрихкодыУпаковокТоваров Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийШтрихкодыУпаковокТоваров(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыЕГАИС Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийСоответствиеНоменклатурыЕГАИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийСоответствиеНоменклатурыВЕТИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийЗапросСкладскогоЖурналаВЕТИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийВходящаяТранспортнаяОперацияВЕТИС(
			ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийИсходящаяТранспортнаяОперацияВЕТИС();
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийИнвентаризацияПродукцииВЕТИС(
			ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийПроизводственнаяОперацияВЕТИС(
			ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийТТНВходящаяЕГАИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНИсходящаяЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ЧекЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ЧекЕГАИСВозврат
		ИЛИ ТипОбъекта = Метаданные.Документы.АктПостановкиНаБалансЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.АктСписанияЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ПередачаВРегистр2ЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ВозвратИзРегистра2ЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ОстаткиЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Обработки.СопоставлениеКлассификаторовЕГАИС Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровГИСМ Тогда
		
		ТекстЗапроса = ИнтеграцияГИСМУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийМаркировкаТоваровГИСМ(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		
		ТекстЗапроса = ИнтеграцияГИСМУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийПеремаркировкаТоваровГИСМ(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровИСМП Тогда 
		
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.ВиртуальнаяАгрегацияУпаковокИСМП
		ИЛИ ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП
		ИЛИ ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборТабачнойПродукцииМОТП Тогда
		
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийПроверкаИПодборПродукцииИСМП(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВыводИзОборотаИСМП Тогда 
		
		ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", "ВыводИзОборотаИСМП");
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВозвратВОборотИСМП Тогда 
		
		ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", "ВозвратВОборотИСМП");
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.СписаниеКодовМаркировкиИСМП Тогда
		
		ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", "СписаниеКодовМаркировкиИСМП");
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда 
		
		ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", "ОтгрузкаТоваровИСМП");
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПриемкаТоваровИСМП Тогда 
		
		ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", "ПриемкаТоваровИСМП");
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет текст запроса проверки заполнения серий в документе.
//
// Параметры:
//  ТекстЗапроса           - Строка           - Текст запроса проверки заполнения серий.
//  ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//  ПараметрыУказанияСерий - Структура        - Состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
Процедура ЗаполнитьТекстЗапросаПроверкиЗаполненияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		
		ТекстЗапроса = ИнтеграцияГИСМУТ.ТекстЗапросаПроверкиЗаполненияСерийПеремаркировкаТоваровГИСМ(ПараметрыУказанияСерий);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//  ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//  Движения - КоллекцияДвижений - движения по которым двигается документ
//  Отказ - Булево - признак отказа от проведения документа
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	РегистрыНакопления.ДвиженияСерийТоваров.ОтразитьДвижения(ДополнительныеСвойства.ТаблицыДляДвижений, Движения, Отказ);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Локализация

Процедура ПриОпределенииМенеджераОбъектаПоПолномуИмени(МенеджерОбъекта, ПолноеИмя) Экспорт
	
	//++ НЕ ГОСИС
	МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ПолноеИмя);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

Процедура ПриОпределенииМенеджераОбъектаПоСсылке(МенеджерОбъекта, Ссылка) Экспорт
	
	//++ НЕ ГОСИС
	МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(Ссылка.Метаданные().ПолноеИмя());
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
