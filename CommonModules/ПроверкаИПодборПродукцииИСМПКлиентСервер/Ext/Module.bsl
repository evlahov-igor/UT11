#Область ПрограмныйИнтерфейс

// Возвращает строковое значение ссылки, по которой происходит переход при нажатии на гиперссылку открытия
// формы проверки и подбора продукции ИСМП из прикладных документов конфигураци - потребителя библиотеки ГосИС.
// 
// Возвращаемое значение:
// 	Строка - значение ссылки для перехода при нажатии на гиперссылку открытия формы проверки.
//
Функция НавигационнаяСсылкаОткрытьФормуПроверкиПродукцииИСМП() Экспорт
	
	Возврат "ОткрытьФормуПроверкиИПодбораПродукцииИСМП";
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПересчетИтогов

// Пересчитывает итоги по проверке содержимого для всех упаковок дерева. 
// 
// Параметры:
// 	ДеревоМаркированнойПродукции - ДанныеФормыДерево - дерево формы, с данными проверяемой маркируемой продукции.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(
		ДеревоМаркированнойПродукции, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

// Пересчитывает итоги по проверке содержимого упаковки для всех родительских строк
// переданной строки дерева маркируемой продукции.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева, ЗагрузкаДанныхТСД = Неопределено) Экспорт
	
	Если ЗагрузкаДанныхТСД <> Неопределено
		И Не ЗагрузкаДанныхТСД.ПересчитыватьИтогиВДеревеМаркированнойПродукции Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(
		СтрокаДерева, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

// Пересчитывает итоги по проверке содержимого упаковки для строки дерева маркируемой продукции. 
// 
// Параметры:
// 	СтрокаДерева             - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
// 	ПересчитыватьПодчиненные - Булево - признак необходимости пересчета подчиненных упаковок.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, ПересчитыватьПодчиненные, ЗагрузкаДанныхТСД = Неопределено) Экспорт
	
	Если ЗагрузкаДанныхТСД <> Неопределено
		И Не ЗагрузкаДанныхТСД.ПересчитыватьИтогиВДеревеМаркированнойПродукции Тогда
		Возврат;
	КонецЕсли;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Если Не СтрокаДерева.НеПересчитыватьКоличествоПотребительскихУпаковок Тогда
		СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = 0;
	КонецЕсли;
	
	СтрокаДерева.КоличествоПодчиненныхУпаковок      = 0;
	СтрокаДерева.КоличествоПодчиненныхВсего         = 0;
	
	СтрокаДерева.КоличествоПодчиненныхВНаличии      = 0;
	СтрокаДерева.КоличествоПодчиненныхОтсутствует   = 0;
	СтрокаДерева.КоличествоПодчиненныхОтложено      = 0;
	СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = 0;
	СтрокаДерева.КоличествоПодчиненныхНеПроверялось = 0;
	
	Если СтрокаДерева.НеПересчитыватьКоличествоПотребительскихУпаковок Тогда
		
		СтрокаДерева.КоличествоПодчиненныхУпаковок = 0;
		
		Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
			
		ИначеЕсли СтрокаДерева.НедопустимыйКодМаркировки
			Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтложено = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
			
		КонецЕсли;
		
	Иначе
		
		КоличествоМерногоТовара = 0;
		ЗаполнитьКоличествоМерногоТовараПоПодчиненнымСтрокам = Истина;
		
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			
			Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.НедопустимыйКодМаркировки
				Или ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхОтсутствует + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхОтложено = СтрокаДерева.КоличествоПодчиненныхОтложено + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхНеЧислилось + 1;
				
			КонецЕсли;
			
			Если ПересчитыватьПодчиненные Тогда
			
				ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ПодчиненнаяСтрока, Истина);
			
			КонецЕсли;
			
			Если ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + 1;
				
			Иначе
				
				СтрокаДерева.КоличествоПодчиненныхУпаковок = СтрокаДерева.КоличествоПодчиненныхУпаковок + 1;
				
			КонецЕсли;
			
			СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + ПодчиненнаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок;
			СтрокаДерева.КоличествоПодчиненныхУпаковок      = СтрокаДерева.КоличествоПодчиненныхУпаковок      + ПодчиненнаяСтрока.КоличествоПодчиненныхУпаковок;
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии      = СтрокаДерева.КоличествоПодчиненныхВНаличии      + ПодчиненнаяСтрока.КоличествоПодчиненныхВНаличии;
			СтрокаДерева.КоличествоПодчиненныхОтсутствует   = СтрокаДерева.КоличествоПодчиненныхОтсутствует   + ПодчиненнаяСтрока.КоличествоПодчиненныхОтсутствует;
			СтрокаДерева.КоличествоПодчиненныхОтложено      = СтрокаДерева.КоличествоПодчиненныхОтложено      + ПодчиненнаяСтрока.КоличествоПодчиненныхОтложено;
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = СтрокаДерева.КоличествоПодчиненныхНеЧислилось   + ПодчиненнаяСтрока.КоличествоПодчиненныхНеЧислилось;
			СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + ПодчиненнаяСтрока.КоличествоПодчиненныхНеПроверялось;
			
			Если ЗаполнитьКоличествоМерногоТовараПоПодчиненнымСтрокам Тогда
				Если ПодчиненнаяСтрока.Количество = 0 Тогда
					ЗаполнитьКоличествоМерногоТовараПоПодчиненнымСтрокам = Ложь;
					КоличествоМерногоТовара = 0;
				Иначе
					КоличествоМерногоТовара = КоличествоМерногоТовара + ПодчиненнаяСтрока.Количество;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			СтрокаДерева.Количество = КоличествоМерногоТовара;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхУпаковок + СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;

	
	СтрокаДерева.ВсяУпаковкаПроверена = Не СтрокаДерева.НеСодержитсяВДанныхДокумента
	                                    И (СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхВНаличии)
	                                    И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
	                                    И СтрокаДерева.ТипУпаковки <> ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
	                                    И СтрокаДерева.ТипУпаковки <> ТипУпаковкиГрупповыеУпаковкиБезКоробки();
	
	СформироватьПредставлениеПроверкиПодчиненных(СтрокаДерева);
	СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	
КонецПроцедуры

// Определяет типы всех упаковок в дереве маркируемой продукции
// 
// Параметры:
// 	ДеревоМаркированнойПродукции - ДанныеФормыДерево - дерево формы, с данными проверяемой маркируемой продукции.
// 	МодульКонтекста - ОбщийМодуль - Модуль контекста.
//
Процедура ОпределитьТипыВсехУпаковок(ДеревоМаркированнойПродукции, МодульКонтекста) Экспорт
	
	ПараметрыЗаполнения = Неопределено;
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			
			ОпределитьТипУпаковки(СтрокаДерева, Истина, ПараметрыЗаполнения, МодульКонтекста);
			
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеПолейДереваМаркированнойПродукции

// Определяет индекс картинки статуса проверки для строки дерева маркируемой продукции.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки или маркируемой продукции.
//
Процедура УстановитьИндексКартинкиСтатусаПроверки(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока.НедопустимыйКодМаркировки Тогда
		
		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 1;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки()
		Или ТекущаяСтрока.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		
		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 5;
		
	Иначе
		
		ПроверкаИПодборПродукцииИСКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(ТекущаяСтрока,
			ПроверкаИПодборПродукцииИСМПКлиентСервер);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет индекс картинки типа упаковки для строки дерева маркируемой продукции.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки или маркируемой продукции.
//
Процедура УстановитьИндексКартинкиТипаУпаковки(ТекущаяСтрока) Экспорт
	
	// TODO: подкорректировать ИндексКартинкиТипУпаковки с учетом групповых упаковок и БлокиБезКоробки
	
	Если ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
		
		Если ТекущаяСтрока.Свойство("ИдетПроверкаДаннойУпаковки")
			И ТекущаяСтрока.ИдетПроверкаДаннойУпаковки Тогда
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 1;
		Иначе
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 0;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		Если ТекущаяСтрока.Свойство("ИдетПроверкаДаннойУпаковки")
			И ТекущаяСтрока.ИдетПроверкаДаннойУпаковки Тогда
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 1;
		Иначе
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 0;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		ТекущаяСтрока.ИндексКартинкиТипУпаковки = 2;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		
		ТекущаяСтрока.ИндексКартинкиТипУпаковки = 3;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
		
		ТекущаяСтрока.ИндексКартинкиТипУпаковки = 3;
		
	КонецЕсли;

КонецПроцедуры

// Определяет индекс картинки состояния подбора кода маркировки для строки таблицы подобранной маркируемой продукции.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка табличного поля, содержащая данные маркируемой продукции.
///
Процедура УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(ТекущаяСтрока, СвойстваВидаПродукции) Экспорт
	
	ОтдельноеПолеКоличестваКодов = СвойстваВидаПродукции <> Неопределено
		И СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов;
	
	Если ОтдельноеПолеКоличестваКодов
		И СвойстваВидаПродукции.ДопустимУчетМерныхТоваров
		И ТекущаяСтрока.ТребуетВзвешивания
		И ТекущаяСтрока.КоличествоПотребительскихУпаковокТребующихВзвешивания <> 0 Тогда
		
		ТекущаяСтрока.ИндексКодаМаркировки = 3;
		
	ИначеЕсли ТекущаяСтрока.Количество = 0
		И ТекущаяСтрока.КоличествоИС = 0
		И ТекущаяСтрока.КоличествоПодобрано = 0 Тогда
		
		Если ОтдельноеПолеКоличестваКодов
			И (ТекущаяСтрока.КоличествоПотребительскихУпаковокВСтруктуреУпаковок > 0
				Или ТекущаяСтрока.КоличествоПотребительскихУпаковок > 0) Тогда
			
			ТекущаяСтрока.ИндексКодаМаркировки = 2;
			
		Иначе
			
			ТекущаяСтрока.ИндексКодаМаркировки = 0;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодобрано >= ТекущаяСтрока.Количество
		И ТекущаяСтрока.КоличествоПодобрано >= ТекущаяСтрока.КоличествоИС Тогда
		
		ТекущаяСтрока.ИндексКодаМаркировки = 1;
		
	Иначе
		
		ТекущаяСтрока.ИндексКодаМаркировки = 2;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует представление итогов по проверки содержимого для строки дерева, содержащего данные упаковки.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - - строка дерева, содержащая данные упаковки.
//
Процедура СформироватьПредставлениеПроверкиПодчиненных(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных = НСтр("ru = '<не является упаковкой>'");
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
		Или ТекущаяСтрока.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки()
		Или ТекущаяСтрока.НеСодержитсяВДанныхДокумента Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<не применимо>'");
	
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхВсего = 0 Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<пустая упаковка>'");
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0
		И ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0 
		И ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2'"),
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВНаличии,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0
		      И ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0
		      И ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда  
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено);
		 
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0
		      И ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0 Тогда
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, не числилось - %3'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует 
		                    + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3, не числилось - %4'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено 
		                    + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3, не числилось - %4'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено 
		                    + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3, отсутствует - %4'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует);
		
	Иначе
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено 
		                    + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3, отложено - %4, не числилось - %5'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует представление содержимого для строки дерева, содержащего данные упаковки.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - - строка дерева, содержащая данные упаковки.
//
Процедура СформироватьПредставлениеСодержимогоУпаковки(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) И Не ЗначениеЗаполнено(ТекущаяСтрока.Серия) Тогда
				ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = ТекущаяСтрока.Номенклатура;
			Иначе
				ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатуры(
					ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика,, ТекущаяСтрока.Серия);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяСтрока.ЧастичноеВыбытие Тогда
			
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрШаблон(
				НСтр("ru = '%1 - %2'"),
				ТекущаяСтрока.Количество,
				ТекущаяСтрока.ПредставлениеСодержимоеУпаковки);
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхВсего = 0 Тогда
		
		Если ТекущаяСтрока.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
			Или ТекущаяСтрока.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<нет>'");
		ИначеЕсли ТекущаяСтрока.СодержимоеНедоступно Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<состав недоступен>'");
		ИначеЕсли ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<пустая групповая упаковка>'");
		Иначе
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<пустая упаковка>'");
		КонецЕсли;
		
	Иначе
		
		ПредставлениеСодержимоеУпаковки = Новый Массив;
		
		Если ТекущаяСтрока.КоличествоПодчиненныхУпаковок > 0 Тогда
			ПредставлениеСодержимоеУпаковки.Добавить(
				СтрШаблон(НСтр("ru = 'коробов - %1'"), ТекущаяСтрока.КоличествоПодчиненныхУпаковок));
		КонецЕсли;
			
		Если ТекущаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок > 0 Тогда
			ПредставлениеСодержимоеУпаковки.Добавить(
				СтрШаблон(НСтр("ru = 'товаров - %1'"), ТекущаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			
			ПредставлениеСодержимоеУпаковки.Добавить(
				ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатуры(
					ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика,, ТекущаяСтрока.Серия));
			
		КонецЕсли;
		
		ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрСоединить(ПредставлениеСодержимоеУпаковки, ", ");
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ТребуетсяПеремаркировка Тогда
		
		ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрШаблон(
			НСтр("ru = '(требуется разборка) %1'"),
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки);
		
	КонецЕсли;
	
	// Весовая продукция
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидУпаковки) И ТекущаяСтрока.ПроизвольнаяЕдиницаУчета Тогда
		
		ОтображатьКоличество = Истина;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущаяСтрока.ТипУпаковки) Тогда
			ОтображатьКоличество = (ТекущаяСтрока.КоличествоПодчиненныхВсего > 0 И ТекущаяСтрока.Количество > 0)
				Или ТекущаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок > 0;
		ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ЧастичноеВыбытиеВариантУчета) Тогда
			ОтображатьКоличество = Ложь;
		КонецЕсли;
		
		Если ОтображатьКоличество Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрШаблон("%1 x %2",
				Формат(ТекущаяСтрока.Количество, "ЧДЦ=3; ЧН="), ТекущаяСтрока.ПредставлениеСодержимоеУпаковки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует признак допустимости и представление проверки данных ИСМП для строки дерева, содержащего данные упаковки.
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
//  ПараметрыПроверкиКодовМаркировки - Структура - со свойствами:
//   * ДопустимыеСтатусыКодовМаркировки - Массив значений типа ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - допустимые статусы кода маркировки для текущей хоз.операции.
//   * КонтролироватьВладельцевКодовМаркировки - Булево - необходимость контроля кода маркировки по владельцу.
//   * ИННВладельца - Строка - ИНН владельца кода маркировки по данным ИС ИСМП.
//   * КонтролироватьВложенностьУпаковок - Булево - необходимость контроля типов вложенных упаковок.
//
Процедура ПроверитьДопустимостьКодаМаркировки(ТекущаяСтрока, ПараметрыПроверкиКодовМаркировки, ЕстьПодчиненныеСтроки = Неопределено) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() 
	 Или ТекущаяСтрока.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
		
	ИначеЕсли Не ПараметрыПроверкиКодовМаркировки.ЗапрашиватьДанныеСервиса Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
		
	ИначеЕсли ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеИСМП Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = НСтр("ru = 'Статус неопределен'");
		
	Иначе
		
		ТекущаяСтрока.НедопустимыйКодМаркировки           = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
		
		// Приоритет 1. Статус
		Если ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
			ДопустимыеСтатусыКодовМаркировки = ПараметрыПроверкиКодовМаркировки.ДопустимыеСтатусыУпаковок;
		Иначе
			ДопустимыеСтатусыКодовМаркировки = ПараметрыПроверкиКодовМаркировки.ДопустимыеСтатусыКодовМаркировки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.СтатусКодаМаркировки)
			И ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки 
			И ДопустимыеСтатусыКодовМаркировки.Найти(ТекущаяСтрока.СтатусКодаМаркировки) = Неопределено
			И Не ТекущаяСтрока.ЧастичноеВыбытие
			Тогда
			ТекущаяСтрока.НедопустимыйКодМаркировки           = Истина;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = СтрШаблон(НСтр("ru = 'Статус: %1'"), ТекущаяСтрока.СтатусКодаМаркировки);
		КонецЕсли;
		
		// Приоритет 2. Вложения. Пустая упаковка
		Если Не ТекущаяСтрока.НедопустимыйКодМаркировки
			И ПараметрыПроверкиКодовМаркировки.КонтролироватьСтандартнуюВложенность
			И ТекущаяСтрока.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
			И (ЕстьПодчиненныеСтроки = Ложь И ТекущаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок = 0) Тогда
				ТекущаяСтрока.НедопустимыйКодМаркировки           = Истина;
				ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = НСтр("ru = 'Пустая упаковка'");
		КонецЕсли;
		
		// Приоритет 3. Вложенность стандартных упаковок
		Если Не ТекущаяСтрока.НедопустимыйКодМаркировки
			И ПараметрыПроверкиКодовМаркировки.КонтролироватьСтандартнуюВложенность
			И ТекущаяСтрока.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
			И ТекущаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок <> ТекущаяСтрока.ПлановоеКоличествоПотребительскихУпаковок И ТекущаяСтрока.ПлановоеКоличествоПотребительскихУпаковок > 0 Тогда
			ТекущаяСтрока.НедопустимыйКодМаркировки           = Истина;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = СтрШаблон(
				НСтр("ru = 'По данным ГИС МТ в упаковке %2 ед. из %1'"),
				ТекущаяСтрока.ПлановоеКоличествоПотребительскихУпаковок, ТекущаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок);
		КонецЕсли;
		
		Если ТекущаяСтрока.СтатусКодаМаркировки <> ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Неопределен") Тогда
			
			Если ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельцевКодовМаркировки Тогда
				
				Владельцы = Новый Соответствие();
				Если ЗначениеЗаполнено(ТекущаяСтрока.ИННВладельца) Тогда
					Владельцы.Вставить(
						ТекущаяСтрока.ИННВладельца,
						СтрШаблон(НСтр("ru = 'ИНН владельца: %1'"), ТекущаяСтрока.ИННВладельца));
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекущаяСтрока.ИННАгента) Тогда
					Владельцы.Вставить(
						ТекущаяСтрока.ИННАгента,
						СтрШаблон(НСтр("ru = 'ИНН агента: %1'"), ТекущаяСтрока.ИННАгента));
				КонецЕсли;
				
				ДанныеОВладельце = Владельцы.Получить(ПараметрыПроверкиКодовМаркировки.ИННВладельца);
				Если Владельцы.Количество() = 0 Тогда
					
					ТекущаяСтрока.НедопустимыйКодМаркировки = Истина;
					ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки
						+ ?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки), "", ", ")
						+ НСтр("ru = 'Владелец неопределен'");
				
				ИначеЕсли ДанныеОВладельце = Неопределено Тогда
					
					ДанныеСтрокиОВладельце = Новый Массив();
					Для Каждого КлючИЗначение Из Владельцы Цикл
						ДанныеСтрокиОВладельце.Добавить(КлючИЗначение.Значение);
					КонецЦикла;
					СтрокаОВладельце = СтрСоединить(ДанныеСтрокиОВладельце, ", ");
					ТекущаяСтрока.НедопустимыйКодМаркировки = Истина;
					ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки +
						?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки), "", ", ") +
						СтрокаОВладельце;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ТекущаяСтрока.НедопустимыйКодМаркировки
				И ПараметрыПроверкиКодовМаркировки.ЗапрашиватьДанныеСервиса
				И ПараметрыПроверкиКодовМаркировки.ДопустимыйСпособВводаВОборот.Количество()
				И ЗначениеЗаполнено(ТекущаяСтрока.СпособВводаВОборот)
				И ПараметрыПроверкиКодовМаркировки.ДопустимыйСпособВводаВОборот.Найти(ТекущаяСтрока.СпособВводаВОборот) = Неопределено Тогда
				
				ТекущаяСтрока.НедопустимыйКодМаркировки           = Истина;
				ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки
					+ ?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки), "", ", ")
					+ СтрШаблон(
						НСтр("ru = 'Способ ввода в оборот: %1'"),
						ТекущаяСтрока.СпособВводаВОборот);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПроверкиКодовМаркировки.КонтролироватьВложенностьУпаковок
		И ПараметрыПроверкиКодовМаркировки.ДопустимыеВложенияАгрегатов <> Неопределено Тогда
		
		ПроверитьДопустимуюВложенностьУпаковок(ТекущаяСтрока, ПараметрыПроверкиКодовМаркировки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДопустимыеВложенияАгрегатовПоВидамПродукции() Экспорт
	
	Результат = Новый Соответствие;
	
	ВложенияЛогистическаяУпаковка = Новый Массив;
	ВложенияЛогистическаяУпаковка.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"));
	ВложенияЛогистическаяУпаковка.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская"));
	
	ВложенияПоТипуШтрихкодаSSCC = Новый Массив;
	ВложенияПоТипуШтрихкодаSSCC.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128"));
	ВложенияПоТипуШтрихкодаSSCC.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC"));
	
	ВложенияПоТипуШтрихкодаGS1 = Новый Массив;
	ВложенияПоТипуШтрихкодаGS1.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128"));
	ВложенияПоТипуШтрихкодаGS1.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC"));
	
	ДопустимыеВложенияАгрегатов = Новый Соответствие;
	ДопустимыеВложенияАгрегатов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"), ВложенияЛогистическаяУпаковка);
	ДопустимыеВложенияАгрегатов.Вставить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC"),          ВложенияПоТипуШтрихкодаSSCC);
	ДопустимыеВложенияАгрегатов.Вставить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128"),       ВложенияПоТипуШтрихкодаGS1);
	
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС"),            ДопустимыеВложенияАгрегатов);
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"), ДопустимыеВложенияАгрегатов);
	
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода"), ДопустимыеВложенияАгрегатов);
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики"),     ДопустимыеВложенияАгрегатов);
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы"),            ДопустимыеВложенияАгрегатов);
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво"),            ДопустимыеВложенияАгрегатов);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьДопустимуюВложенностьУпаковок(ТекущаяСтрока, ПараметрыПроверкиКодовМаркировки) Экспорт
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("ДанныеФормыЭлементДерева") Тогда
		РодительТекущейСтроки = ТекущаяСтрока.ПолучитьРодителя();
	Иначе
		РодительТекущейСтроки = ТекущаяСтрока.Родитель;
	КонецЕсли;
	
	Если РодительТекущейСтроки <> Неопределено И ТипЗнч(РодительТекущейСтроки.ТипУпаковки) = Тип("ПеречислениеСсылка.ТипыУпаковок") Тогда
		
		ДопустимыеВложенияАгрегатов = ПараметрыПроверкиКодовМаркировки.ДопустимыеВложенияАгрегатов;
		ДопустимыеВложенияПоВидуУпаковки = ДопустимыеВложенияАгрегатов.Получить(РодительТекущейСтроки.ВидУпаковки);
		ДопустимыеВложенияПоТипуШтрихкода = ДопустимыеВложенияАгрегатов.Получить(РодительТекущейСтроки.ТипШтрихкода);
		
		СтрокаОшибки = "";
		
		Если ДопустимыеВложенияПоВидуУпаковки <> Неопределено
			И ДопустимыеВложенияПоВидуУпаковки.Найти(ТекущаяСтрока.ВидУпаковки) = Неопределено Тогда
			
			СтрокаОшибки = СтрШаблон(
				НСтр("ru = '%1 упаковка не может содержать %2'"),
				РодительТекущейСтроки.ВидУпаковки,
				ТекущаяСтрока.ВидУпаковки);
			
		ИначеЕсли ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
			
			Если ДопустимыеВложенияПоТипуШтрихкода <> Неопределено
				И ДопустимыеВложенияПоТипуШтрихкода.Найти(ТекущаяСтрока.ТипШтрихкода) = Неопределено Тогда
				
				СтрокаОшибки = СтрШаблон(
					НСтр("ru = 'Упаковка %1 не может содержать %2'"),
					РодительТекущейСтроки.ТипШтрихкода,
					ТекущаяСтрока.ТипШтрихкода);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
			
			РодительТекущейСтроки.НедопустимыйКодМаркировки = Истина;
			РодительТекущейСтроки.ПредставлениеПроверкиКодаМаркировки = СтрокаОшибки;
			
		КонецЕсли;
		
		Если ПараметрыПроверкиКодовМаркировки.Свойство("КонтролироватьСоставГрупповойУпаковкиПриИзмененииСтрокиДерева")
			И ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставГрупповойУпаковкиПриИзмененииСтрокиДерева Тогда
			
			ПроверитьСоставАгрегата(РодительТекущейСтроки, ПараметрыПроверкиКодовМаркировки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСоставАгрегата(ТекущаяСтрока, ПараметрыПроверкиКодовМаркировки) Экспорт
	
	Если ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставАгрегата
		Или ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставАгрегатаПриИзмененииСтрокиДерева Тогда
		
		СтрокаОшибки = "";
		
		Если (ТекущаяСтрока <> Неопределено 
			И ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")) Тогда
			
			Если ТипЗнч(ТекущаяСтрока) = Тип("ДанныеФормыЭлементДерева") Тогда
				ВложенныеСтроки = ТекущаяСтрока.ПолучитьЭлементы();
			Иначе
				ВложенныеСтроки = ТекущаяСтрока.Строки;
			КонецЕсли;
			
			ТекущийВидУпаковки = Неопределено;
			
			Для Каждого ВложеннаяСтрокаДерева Из ВложенныеСтроки Цикл
				
				Если ТекущийВидУпаковки = Неопределено Тогда
					ТекущийВидУпаковки = ВложеннаяСтрокаДерева.ВидУпаковки;
					Продолжить;
				КонецЕсли;
				
				Если ВложеннаяСтрокаДерева.ВидУпаковки <> ТекущийВидУпаковки Тогда
					
					СтрокаОшибки = СтрШаблон(
						НСтр("ru = '%1 упаковка может содержать только один вид упаковок (логистические, групповые или потребительские)'"),
						ТекущийВидУпаковки.ВидУпаковки);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
			
			ТекущаяСтрока.НедопустимыйКодМаркировки = Истина;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки
				+ ?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки), "", ", ")
				+ СтрокаОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДопустимостьВложенияАгрегата(ТекущаяСтрока, ПараметрыПроверкиКодовМаркировки) Экспорт
	
	Если ПараметрыПроверкиКодовМаркировки.Свойство("КонтролироватьВложенностьУпаковок")
		И ПараметрыПроверкиКодовМаркировки.КонтролироватьВложенностьУпаковок
		И ПараметрыПроверкиКодовМаркировки.ДопустимыеВложенияАгрегатов <> Неопределено Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки           = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
		
		Если ТипЗнч(ТекущаяСтрока) = Тип("ДанныеФормыЭлементДерева") Тогда
			ВложенныеСтроки = ТекущаяСтрока.ПолучитьЭлементы();
		Иначе
			ВложенныеСтроки = ТекущаяСтрока.Строки;
		КонецЕсли;
		
		Для Каждого ВложеннаяСтрокаДерева Из ВложенныеСтроки Цикл
			
			ПроверитьДопустимуюВложенностьУпаковок(ВложеннаяСтрокаДерева, ПараметрыПроверкиКодовМаркировки);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока, ВидПродукции) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		
		Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
			Представление = НСтр("ru = 'Пачки без блока'");
		Иначе
			Представление = НСтр("ru = 'Потребительские упаковки'");
		КонецЕсли;
		
		ТекущаяСтрока.Представление = Представление;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
		
		Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
			Представление = НСтр("ru = 'Блоки без коробки'");
		Иначе
			Представление = НСтр("ru = 'Групповые упаковки'");
		КонецЕсли;
		
		ТекущаяСтрока.Представление = Представление;
		
	Иначе
		
		ПроверкаИПодборПродукцииИСКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока,
			ПроверкаИПодборПродукцииИСМПКлиентСервер);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьВыводимоеПредставлениеПроверкиСодержимого(Форма, ТекущаяСтрока) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ОбновитьВыводимоеПредставлениеПроверкиСодержимого(Форма,
		ТекущаяСтрока, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

#КонецОбласти

#Область ОпределениеТипаУпаковки

// Определяет тип упаковки(монотоварная или мультитоварная) при изменении строки дерева.
// Действие выполняется для текущей строки и всех ее родительских строк.
//
// Параметры:
// 	ДеревоМаркированнойПродукции - ДанныеФормыДерево - дерево маркируемой продукции
// 	ИдентификаторИзмененойСтроки - Число - идентификатор изменившейся строки
// 	МодульКонтекста - ОбщийМодуль - Модуль конекста
// 	СтрокиИзмененныхУпаковокВерхнегоУровня - Соответствие - Кеш строк измененных упаковок верхнего уровня
//
Процедура ОпределитьТипУпаковкиПриИзмененииСтроки(ДеревоМаркированнойПродукции, ИдентификаторИзмененойСтроки, МодульКонтекста, СтрокиИзмененныхУпаковокВерхнегоУровня = Неопределено) Экспорт
	
	ИзмененнаяСтрока = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторИзмененойСтроки);
	
	Если ИзмененнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Неопределено;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ИзмененнаяСтрока.ТипУпаковки) Тогда
		
		ОпределитьТипУпаковки(ИзмененнаяСтрока, Ложь, ПараметрыЗаполнения, МодульКонтекста);
		
	КонецЕсли;
	
	РодительИзмененнойСтроки = ИзмененнаяСтрока.ПолучитьРодителя();
	
	Если РодительИзмененнойСтроки = Неопределено Тогда
		Если СтрокиИзмененныхУпаковокВерхнегоУровня <> Неопределено Тогда
			СтрокиИзмененныхУпаковокВерхнегоУровня.Вставить(ИзмененнаяСтрока, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Пока РодительИзмененнойСтроки <> Неопределено 
		И ИнтеграцияИСКлиентСервер.ЭтоУпаковка(РодительИзмененнойСтроки.ТипУпаковки) Цикл
		
		ТекущиеДанные = РодительИзмененнойСтроки;
		ОпределитьТипУпаковки(РодительИзмененнойСтроки, Ложь, ПараметрыЗаполнения, МодульКонтекста);
		
		РодительИзмененнойСтроки = РодительИзмененнойСтроки.ПолучитьРодителя();
		
		Если РодительИзмененнойСтроки = Неопределено Тогда
			Если СтрокиИзмененныхУпаковокВерхнегоУровня <> Неопределено Тогда
				СтрокиИзмененныхУпаковокВерхнегоУровня.Вставить(ТекущиеДанные, Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

Функция ТребуетсяУказаниеСерий(ТаблицаПродукции, ИмяКолонкиКоличество = "КоличествоПодобрано") Экспорт
	
	СтатусыСерийСерияНеУказана = СтатусыСерийСерияНеУказана();
	СтатусыСерийСерияУказана = СтатусыСерийСерияУказана();
	
	Для Каждого СтрокаПродукции Из ТаблицаПродукции Цикл
		
		Если СтрокаПродукции[ИмяКолонкиКоличество] = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПродукции.Серия) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтатусыСерийСерияНеУказана.Найти(СтрокаПродукции.СтатусУказанияСерий) <> Неопределено
			Или СтатусыСерийСерияУказана.Найти(СтрокаПродукции.СтатусУказанияСерий) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СериюМожноУказать(ТаблицаПродукции, ИмяКолонкиКоличество = "КоличествоПодобрано") Экспорт
	
	СтатусыСерийСериюМожноУказать = СтатусыСерийСериюМожноУказать();
	
	Для Каждого СтрокаПродукции Из ТаблицаПродукции Цикл
		
		Если СтрокаПродукции[ИмяКолонкиКоличество] = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтатусыСерийСериюМожноУказать.Найти(СтрокаПродукции.СтатусУказанияСерий) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Статусы серий (не указано)
// 
// Возвращаемое значение:
// 	Массив - Описание
Функция СтатусыСерийСерияНеУказана() Экспорт
	
	СтатусыСерияНеУказана = Новый Массив();
	
	ПроверкаИПодборПродукцииИСМПКлиентСерверПереопределяемый.СтатусыСерийСерияНеУказана(СтатусыСерияНеУказана);
	
	Возврат СтатусыСерияНеУказана;
	
КонецФункции

// Статусы серий (указано)
// 
// Возвращаемое значение:
// 	Массив - Описание
Функция СтатусыСерийСерияУказана() Экспорт
	
	СтатусыСерияУказана = Новый Массив();
	
	ПроверкаИПодборПродукцииИСМПКлиентСерверПереопределяемый.СтатусыСерийСерияУказана(СтатусыСерияУказана);
	
	Возврат СтатусыСерияУказана;
	
КонецФункции

// Статусы серий (можно указать)
// 
// Возвращаемое значение:
// 	Массив - Описание
Функция СтатусыСерийСериюМожноУказать() Экспорт
	
	СтатусыСерийСериюМожноУказать = Новый Массив();
	
	ПроверкаИПодборПродукцииИСМПКлиентСерверПереопределяемый.СтатусыСерийСериюМожноУказать(СтатусыСерийСериюМожноУказать);
	
	Возврат СтатусыСерийСериюМожноУказать;
	
КонецФункции

#КонецОбласти

#Область Перемаркировка

// Формирует и отображает на форме информационную надпись о необходимости перемаркировки.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма проверки и подбора, для которой формируется надпись.
//
Процедура ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(
		Форма, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьПеремаркировки(Форма, ТаблицаПеремаркировки, ЭтоВыборочнаяПроверка) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ПроверитьНеобходимостьПеремаркировки(
		Форма, ТаблицаПеремаркировки, ЭтоВыборочнаяПроверка, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

Процедура УстановитьОтборТребуетсяПеремаркировкаВСтрокеДерева(СтрокаДерева, СоответствуетОтбору) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.УстановитьОтборТребуетсяПеремаркировкаВСтрокеДерева(
		СтрокаДерева, СоответствуетОтбору, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

Функция ЗаголовокТребуетсяПеремаркировка(Форма) Экспорт
	
	ТекстТребуется = СтрШаблон(НСтр("ru = 'Требуется разборка упаковок - %1.'"), Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать);
	СтрокаТребуется = Новый ФорматированнаяСтрока(ТекстТребуется,, Форма.ЦветТекстаТребуетВнимания);
	
	Если Форма.УстановленОтборТребуетсяПеремаркировать Тогда
		ТекстОтбор = НСтр("ru = '(снять отбор)'");
	Иначе
		ТекстОтбор = НСтр("ru = '(отобрать)'");
	КонецЕсли;
	
	СтрокаОтбор = Новый ФорматированнаяСтрока(ТекстОтбор,, Форма.ЦветГиперссылки,, "ИзменитьОтборТребуетсяПеремаркировка");
	
	Возврат Новый ФорматированнаяСтрока(СтрокаТребуется, " ", СтрокаОтбор);
	
КонецФункции

#КонецОбласти

// Формирует и отображает на форме информационную надпись о наличии недопустимых кодов маркировки.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма проверки и подбора, для которой формируется надпись.
//
Процедура ОтобразитьИнформациюОНедопустимыхКодахМаркировки(Форма) Экспорт
	
	Если Форма.КоличествоНедопустимыхКодовМаркировки > 0 Тогда
		
		ТекстНедопустимыхКодов = СтрШаблон(НСтр("ru = 'Недопустимых кодов маркировки - %1.'"), Форма.КоличествоНедопустимыхКодовМаркировки);
		СтрокаНедопустимыхКодов = Новый ФорматированнаяСтрока(ТекстНедопустимыхКодов,, Форма.ЦветТекстаТребуетВнимания);
		
		Если Форма.УстановленОтборНедопустимыеКодыМаркировки Тогда
			ТекстОтбор = НСтр("ru = '(снять отбор)'");
		Иначе
			ТекстОтбор = НСтр("ru = '(отобрать)'");
		КонецЕсли;
		
		СтрокаОтбор = Новый ФорматированнаяСтрока(ТекстОтбор,, Форма.ЦветГиперссылки,, "ИзменитьОтборНедопустимыеКодыМаркировки");
		
		Форма.Элементы.ДекорацияНедопустимыеКодыМаркировки.Заголовок = 
			Новый ФорматированнаяСтрока(СтрокаНедопустимыхКодов, " ", СтрокаОтбор);
			
		Форма.Элементы.ГруппаНедопустимыеКодыМаркировки.Видимость = Истина;
		
	Иначе
		
		Форма.Элементы.ГруппаНедопустимыеКодыМаркировки.Видимость = Ложь;
		
	КонецЕсли;
	
	Форма.ТребуетсяОбновитьИнформациюНедопустимыеКодыМаркировки = Ложь;
	
КонецПроцедуры

Функция ТекстОшибкиНеСоответствуютДокументуОснованию(ДанныеШтрихкода) Экспорт
	
	ЧастиТекстаОшибки = Новый Массив;
	
	ЧастиТекстаОшибки.Добавить(НСтр("ru = 'Не удалось сопоставить данным документа следующие данные:'"));
	ЧастиТекстаОшибки.Добавить(" ");
	ЧастиТекстаОшибки.Добавить(
		СтрШаблон(НСтр("ru = 'номенклатура - %1'"),
			?(ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура),
				ДанныеШтрихкода.Номенклатура,
				НСтр("ru = 'Не определена'"))));
				
	Если ЗначениеЗаполнено(ДанныеШтрихкода.Характеристика) Тогда
		ЧастиТекстаОшибки.Добавить(", ");
		ЧастиТекстаОшибки.Добавить(
			СтрШаблон(НСтр("ru = 'Характеристика - %1'"), ДанныеШтрихкода.Характеристика));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
		ЧастиТекстаОшибки.Добавить(", ");
		ЧастиТекстаОшибки.Добавить(
			СтрШаблон(НСтр("ru = 'Серия - %1'"), ДанныеШтрихкода.Серия));
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиТекстаОшибки);
	
КонецФункции

Процедура УстановитьДоступностьУпаковкиДляПроверки(ТекущаяСтрока, ДоступныеДляПроверкиУпаковки) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(ТекущаяСтрока,
		ДоступныеДляПроверкиУпаковки, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуПродукцияБезУпаковки(ТекущаяСтрока, ВидПродукции) Экспорт
	
	ТекущаяСтрока.ТипУпаковки = ТипУпаковкиПотребительскиеУпаковкиБезУпаковки();
	
	СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока, ВидПродукции);
	УстановитьИндексКартинкиТипаУпаковки(ТекущаяСтрока);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуГрупповыеУпаковкиБезКоробки(ТекущаяСтрока, ВидПродукции) Экспорт
	
	ТекущаяСтрока.ТипУпаковки = ТипУпаковкиГрупповыеУпаковкиБезКоробки();
	
	СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока, ВидПродукции);
	УстановитьИндексКартинкиТипаУпаковки(ТекущаяСтрока);
	
КонецПроцедуры

// Заполняет реквизит "НомерСтроки" в коллекции
//
// Параметры:
//  КоллекцияДанных - ДанныеФормыКоллекция, ТаблицаЗначений - Таблица, в которой необходимо заполнить НомерСтроки
Процедура ПересчитатьНомераСтрок(КоллекцияДанных) Экспорт
	
	НомерСтроки = 1;
	
	Для Каждого ТекущаяСтрока Из КоллекцияДанных Цикл
		ТекущаяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

#Область ОпределениеХозяйственнойОперации

Функция ЭтоДокументПриобретения(Контекст) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("Документссылка.ПриемкаТоваровИСМП") Тогда
		Возврат Истина;
	ИначеЕсли ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения")
			И СтрНачинаетсяС(Контекст.ИмяФормы, "Документ.ПриемкаТоваровИСМП") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭтоПриобретение = Ложь;
	
	ПроверкаИПодборПродукцииИСМПКлиентСерверПереопределяемый.ЭтоДокументПриобретения(Контекст, ЭтоПриобретение);
	
	Возврат ЭтоПриобретение;
	
КонецФункции

Функция ЭтоЧекККМ(Контекст) Экспорт
	
	ЭтоЧек = Ложь;
	
	ПроверкаИПодборПродукцииИСМПКлиентСерверПереопределяемый.ЭтоЧекККМ(Контекст, ЭтоЧек);
	
	Возврат ЭтоЧек;
	
КонецФункции

Функция ЭтоЧекККМВозврат(Контекст) Экспорт
	
	ЭтоЧекВозврат = Ложь;
	
	ПроверкаИПодборПродукцииИСМПКлиентСерверПереопределяемый.ЭтоЧекККМВозврат(Контекст, ЭтоЧекВозврат);
	
	Возврат ЭтоЧекВозврат;
	
КонецФункции

#КонецОбласти

Функция НоменклатурыСтрокСовпадают(ИсходнаяСтрока, СтрокаИзменений, ПолноеСовпадение = Истина) Экспорт
	
	Возврат ИсходнаяСтрока.Номенклатура = СтрокаИзменений.Номенклатура
		И СвойствоСтрокСовпадает(ИсходнаяСтрока, СтрокаИзменений, "Характеристика", ПолноеСовпадение)
		И СвойствоСтрокСовпадает(ИсходнаяСтрока, СтрокаИзменений, "Серия",          ПолноеСовпадение);
	
КонецФункции

Функция СвойствоСтрокСовпадает(ИсходнаяСтрока, СтрокаИзменений, ИмяСвойства, ПолноеСовпадение = Истина) Экспорт
	
	Свойство1 = ИсходнаяСтрока[ИмяСвойства];
	Свойство2 = СтрокаИзменений[ИмяСвойства];
	
	Если Свойство1 = Свойство2
		Или Не ЗначениеЗаполнено(Свойство1) И Не ЗначениеЗаполнено(Свойство2) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПолноеСовпадение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Не ЗначениеЗаполнено(Свойство2);
	
КонецФункции

Функция GTINРавны(GTIN1, GTIN2) Экспорт
	Если GTIN1 = GTIN2 Тогда
		Возврат Истина;
	ИначеЕсли СтрДлина(GTIN1) = СтрДлина(GTIN2) Тогда
		Возврат Ложь;
	КонецЕсли;
	EAN1 = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(GTIN1);
	EAN2 = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(GTIN2);
	Возврат EAN1 = EAN2;
КонецФункции

Процедура ПодобраннаяПродукцияПриДобавленииСтроки(Форма, СтрокаИзменений, Знач КоличествоКодовМаркировки, МодульКонтекста, ДополнительныеПараметры = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	// Описание:
	// 1. Выполняем поиск строки агрегатора;
	// 2. Если строка-агрегатор не найдена, то просто добавляем новую строку;
	// 3. Если строка-агрегатор найдена, то ...
	//    Агрегатор бывает нескольких видов:
	//    - без подобранной продукции / с подобранной продукцией, с одним GTIN
	//    - без подобранной продукции, с несколькими GTIN
	//    - с подобранной продукцией (GTIN указан), с несколькими GTIN
	//    - со спецификой по виду продукции (МРЦ, ...)
	//    3.1. Необходимо определить, нужно ли добавлять новую строку.
	//    3.2. Необходимо определить, нужно ли удалять строку агрегатор.
	
	СвойстваВидаПродукции = СвойстваВидаПродукцииПоДаннымФормы(Форма);
	
	ПодобраннаяМаркируемаяПродукция = Форма.ПодобраннаяМаркируемаяПродукция;
	
	СтрокаАгрегатор1 = СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаИзменений, СвойстваВидаПродукции, Ложь);
	СтрокаАгрегатор2 = СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаИзменений, СвойстваВидаПродукции, Истина);
	
	УточнитьКоличествоИС = ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("УточнитьКоличествоИС")
		И ДополнительныеПараметры.УточнитьКоличествоИС;
	
	ЭтоЗагрузкаДанныхДокументаПриОткрытииФормы = ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ЭтоЗагрузкаДанныхДокументаПриОткрытииФормы")
		И ДополнительныеПараметры.ЭтоЗагрузкаДанныхДокументаПриОткрытииФормы;
	
	Если СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов Тогда
		
		ИзменениеКоличества                                   = СтрокаИзменений.Количество;
		ИзменениеКоличестваИС                                 = ?(УточнитьКоличествоИС, ИзменениеКоличества, 0);
		КоличествоПотребительскихУпаковок                     = КоличествоКодовМаркировки;
		КоличествоПотребительскихУпаковокВСтруктуреУпаковок   = 0;
		КоличествоПотребительскихУпаковокТребующихВзвешивания = 0;
		КоличествоПодобраноВзвешено                           = 0;
		
		Если СвойстваВидаПродукции.ДопустимУчетМерныхТоваров Тогда
			Если СтрокаИзменений.ТребуетВзвешивания
				И Не СвойстваВидаПродукции.ЗапрашиватьКоличествоМерногоТовара
				И ИзменениеКоличества = 0 Тогда
				КоличествоПотребительскихУпаковокТребующихВзвешивания = КоличествоКодовМаркировки;
			КонецЕсли;
			КоличествоПодобраноВзвешено = ИзменениеКоличества;
		КонецЕсли;
		
		Если ЭтоЗагрузкаДанныхДокументаПриОткрытииФормы И УточнитьКоличествоИС Тогда
			
			КоличествоПотребительскихУпаковок                     = 0;
			КоличествоПотребительскихУпаковокВСтруктуреУпаковок   = КоличествоКодовМаркировки;
			
			КоличествоПотребительскихУпаковокТребующихВзвешивания = 0;
			КоличествоПодобраноВзвешено                           = 0;
			
			Если СтрокаАгрегатор1 <> Неопределено Тогда
				ИзменениеКоличестваИС = Мин(СтрокаАгрегатор1.Количество, СтрокаИзменений.Количество);
			КонецЕсли;
			
		ИначеЕсли ЭтоЗагрузкаДанныхДокументаПриОткрытииФормы И ИзменениеКоличества = 0 Тогда
			
			Если СвойстваВидаПродукции.ДопустимУчетМерныхТоваров Тогда
				КоличествоПотребительскихУпаковокТребующихВзвешивания = КоличествоКодовМаркировки;
			КонецЕсли;
			
			Если СтрокаАгрегатор2 <> Неопределено Тогда
				ИзменениеКоличества = СтрокаАгрегатор2.Количество - Мин(СтрокаАгрегатор2.Количество, СтрокаАгрегатор2.КоличествоПодобрано);
			КонецЕсли;
			
		ИначеЕсли СвойстваВидаПродукции.ДопустимУчетМерныхТоваров
			И СтрокаИзменений.ТребуетВзвешивания И КоличествоПотребительскихУпаковокТребующихВзвешивания > 0
			И Не (СтрокаАгрегатор2 = Неопределено Или СтрокаАгрегатор2.КоличествоПодобрано = 0) Тогда
			
			// Необходимо обнулить подобранное количество
			
			СтрокаАгрегатор2.КоличествоПотребительскихУпаковок                     = СтрокаАгрегатор2.КоличествоПотребительскихУпаковок                     + КоличествоКодовМаркировки;
			СтрокаАгрегатор2.КоличествоПотребительскихУпаковокТребующихВзвешивания = СтрокаАгрегатор2.КоличествоПотребительскихУпаковокТребующихВзвешивания + КоличествоПотребительскихУпаковокТребующихВзвешивания;
			СтрокаАгрегатор2.КоличествоПодобраноВзвешено                           = СтрокаАгрегатор2.КоличествоПодобраноВзвешено                           + КоличествоПодобраноВзвешено;
			
			ИзменениеКоличества = СтрокаАгрегатор2.КоличествоПодобрано;
			
			ПодобраннаяПродукцияПриУдаленииСтрокиПродолжение(
				Форма, СтрокаИзменений, МодульКонтекста, СтрокаАгрегатор2, СвойстваВидаПродукции, ИзменениеКоличества,, КэшированныеЗначения);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		ИзменениеКоличества   = КоличествоКодовМаркировки;
		ИзменениеКоличестваИС = 0;
		
		Если УточнитьКоличествоИС Тогда
			Если ЭтоЗагрузкаДанныхДокументаПриОткрытииФормы Тогда
				Если СтрокаАгрегатор1 <> Неопределено Тогда
					ИзменениеКоличестваИС = Мин(СтрокаАгрегатор1.Количество, ИзменениеКоличества);
				КонецЕсли;
			Иначе
				ИзменениеКоличестваИС = ИзменениеКоличества;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УточнитьКоличествоИС И ЭтоЗагрузкаДанныхДокументаПриОткрытииФормы Тогда
		ИзменениеКоличествоПодобрано = 0;
	Иначе
		ИзменениеКоличествоПодобрано = ИзменениеКоличества;
	КонецЕсли;
	
	Если СтрокаАгрегатор1 = Неопределено И СтрокаАгрегатор2 = Неопределено Тогда
		
		СтрокаПодобраннойПродукции = Неопределено;
		Для Каждого СтрокаМаркируемойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
			Если Не НоменклатурыСтрокСовпадают(СтрокаИзменений, СтрокаМаркируемойПродукции) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаМаркируемойПродукции.КодыGTIN.Количество() > 0 Тогда
				СтрокаПодобраннойПродукции = СтрокаМаркируемойПродукции;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Добавляем строку
		
		НоваяСтрока = ПодобраннаяМаркируемаяПродукция.Добавить();
		НоваяСтрока.КоличествоПодобрано = ИзменениеКоличествоПодобрано;
		НоваяСтрока.КоличествоИС        = ИзменениеКоличестваИС;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзменений,, "Количество");
		Если СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов Тогда
			НоваяСтрока.КоличествоПотребительскихУпаковок                     = КоличествоПотребительскихУпаковок;
			НоваяСтрока.КоличествоПотребительскихУпаковокТребующихВзвешивания = КоличествоПотребительскихУпаковокТребующихВзвешивания;
			НоваяСтрока.КоличествоПодобраноВзвешено                           = КоличествоПодобраноВзвешено;
			НоваяСтрока.КоличествоПотребительскихУпаковокВСтруктуреУпаковок   = КоличествоПотребительскихУпаковокВСтруктуреУпаковок;
		КонецЕсли;
		
		НоваяСтрока.НоменклатураСопоставлена = ЗначениеЗаполнено(НоваяСтрока.Номенклатура);
		
		Если СтрокаПодобраннойПродукции <> Неопределено Тогда
			НоваяСтрока.КодыGTIN          = СтрокаПодобраннойПродукции.КодыGTIN;
			НоваяСтрока.ПредставлениеGTIN = СтрокаПодобраннойПродукции.ПредставлениеGTIN;
		КонецЕсли;
		
		УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(НоваяСтрока, СвойстваВидаПродукции);
		
		ОбработатьИзменениеНоменклатурыВСтроке(Форма, НоваяСтрока, МодульКонтекста, КэшированныеЗначения);
		
	ИначеЕсли СтрокаАгрегатор1 = СтрокаАгрегатор2 Тогда
		
		// Найдена одна строка, только с уже подобранной продукцией
		
		СтрокаАгрегатор1.КоличествоПодобрано = СтрокаАгрегатор1.КоличествоПодобрано + ИзменениеКоличествоПодобрано;
		СтрокаАгрегатор1.КоличествоИС        = СтрокаАгрегатор1.КоличествоИС        + ИзменениеКоличестваИС;
		
		Если СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов Тогда
			СтрокаАгрегатор1.КоличествоПотребительскихУпаковок                     = СтрокаАгрегатор1.КоличествоПотребительскихУпаковок                     + КоличествоПотребительскихУпаковок;
			СтрокаАгрегатор1.КоличествоПотребительскихУпаковокТребующихВзвешивания = СтрокаАгрегатор1.КоличествоПотребительскихУпаковокТребующихВзвешивания + КоличествоПотребительскихУпаковокТребующихВзвешивания;
			СтрокаАгрегатор1.КоличествоПодобраноВзвешено                           = СтрокаАгрегатор1.КоличествоПодобраноВзвешено                           + КоличествоПодобраноВзвешено;
			СтрокаАгрегатор1.КоличествоПотребительскихУпаковокВСтруктуреУпаковок   = СтрокаАгрегатор1.КоличествоПотребительскихУпаковокВСтруктуреУпаковок   + КоличествоПотребительскихУпаковокВСтруктуреУпаковок;
		КонецЕсли;
		
		УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор1, СвойстваВидаПродукции);
		
	ИначеЕсли СтрокаАгрегатор1 <> Неопределено И СтрокаАгрегатор2 <> Неопределено Тогда
		
		// Найдено две строки: не распределенная строка и строка с подобранной продукцией.
		
		Если СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов Тогда
			СтрокаАгрегатор2.КоличествоПотребительскихУпаковок                     = СтрокаАгрегатор2.КоличествоПотребительскихУпаковок                     + КоличествоПотребительскихУпаковок;
			СтрокаАгрегатор2.КоличествоПотребительскихУпаковокТребующихВзвешивания = СтрокаАгрегатор2.КоличествоПотребительскихУпаковокТребующихВзвешивания + КоличествоПотребительскихУпаковокТребующихВзвешивания;
			СтрокаАгрегатор2.КоличествоПодобраноВзвешено                           = СтрокаАгрегатор2.КоличествоПодобраноВзвешено                           + КоличествоПодобраноВзвешено;
			СтрокаАгрегатор2.КоличествоПотребительскихУпаковокВСтруктуреУпаковок   = СтрокаАгрегатор2.КоличествоПотребительскихУпаковокВСтруктуреУпаковок   + КоличествоПотребительскихУпаковокВСтруктуреУпаковок;
		КонецЕсли;
		
		ПеренестиДопустимыйСвободныйОстатокНаСтрокуАгрегатор(
			Форма, СтрокаИзменений, МодульКонтекста, СтрокаАгрегатор1, СтрокаАгрегатор2, СвойстваВидаПродукции, ИзменениеКоличества, ДополнительныеПараметры, КэшированныеЗначения);
		
	ИначеЕсли СтрокаАгрегатор1 = Неопределено Тогда
		
		СтрокаАгрегатор2.КоличествоПодобрано = СтрокаАгрегатор2.КоличествоПодобрано + ИзменениеКоличествоПодобрано;
		СтрокаАгрегатор2.КоличествоИС        = СтрокаАгрегатор2.КоличествоИС        + ИзменениеКоличестваИС;
		
		Если СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов Тогда
			СтрокаАгрегатор2.КоличествоПотребительскихУпаковок                     = СтрокаАгрегатор2.КоличествоПотребительскихУпаковок                     + КоличествоПотребительскихУпаковок;
			СтрокаАгрегатор2.КоличествоПотребительскихУпаковокТребующихВзвешивания = СтрокаАгрегатор2.КоличествоПотребительскихУпаковокТребующихВзвешивания + КоличествоПотребительскихУпаковокТребующихВзвешивания;
			СтрокаАгрегатор2.КоличествоПодобраноВзвешено                           = СтрокаАгрегатор2.КоличествоПодобраноВзвешено                           + КоличествоПодобраноВзвешено;
			СтрокаАгрегатор2.КоличествоПотребительскихУпаковокВСтруктуреУпаковок   = СтрокаАгрегатор2.КоличествоПотребительскихУпаковокВСтруктуреУпаковок   + КоличествоПотребительскихУпаковокВСтруктуреУпаковок;
		КонецЕсли;
		
		УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор2, СвойстваВидаПродукции);
		
	ИначеЕсли СтрокаАгрегатор2 = Неопределено Тогда
		
		// Строка с подобранной продукцией не найдена, имеется только строка агрегатор.
		
		// Для сортировки: определяем конечный индекс строки с совпадающей номенклатурой
		КонечныйИндекс = ПодобраннаяМаркируемаяПродукция.Индекс(СтрокаАгрегатор1);
		Для Сч = КонечныйИндекс + 1 По ПодобраннаяМаркируемаяПродукция.Количество() - 1 Цикл
			СтрокаМаркируемойПродукции = ПодобраннаяМаркируемаяПродукция[Сч];
			Если Не НоменклатурыСтрокСовпадают(СтрокаАгрегатор1, СтрокаМаркируемойПродукции) Тогда
				Прервать;
			КонецЕсли;
			КонечныйИндекс = Сч;
		КонецЦикла;
		
		КодыGTIN          = СтрокаАгрегатор1.КодыGTIN;
		ПредставлениеGTIN = СтрокаАгрегатор1.ПредставлениеGTIN;
		
		ДобавляемоеКоличество    = 0;
		ДобавляемоеКоличествоИС  = ИзменениеКоличестваИС;
		КоличествоКРаспределению = ИзменениеКоличества;
		
		Если УточнитьКоличествоИС Или Форма.РежимПодбораСуществующихУпаковок Тогда
			КоличествоКРаспределениюИС = 0;
		Иначе
			КоличествоКРаспределениюИС = ИзменениеКоличества;
		КонецЕсли;
		
		Пока Не (СтрокаАгрегатор1 = Неопределено Или КоличествоКРаспределению = 0) Цикл
			
			ТекущееКоличество   = Мин(СтрокаАгрегатор1.Количество,   КоличествоКРаспределению);
			ТекущееКоличествоИС = Мин(СтрокаАгрегатор1.КоличествоИС, КоличествоКРаспределениюИС);
			
			СтрокаАгрегатор1.Количество   = СтрокаАгрегатор1.Количество   - ТекущееКоличество;
			СтрокаАгрегатор1.КоличествоИС = СтрокаАгрегатор1.КоличествоИС - ТекущееКоличествоИС;
			
			Если СтрокаАгрегатор1.Количество = 0 Тогда
				ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор1);
				Если КонечныйИндекс >= 0 Тогда
					КонечныйИндекс = КонечныйИндекс - 1;
				КонецЕсли;
			Иначе
				ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор1, МодульКонтекста, КэшированныеЗначения);
				УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор1, СвойстваВидаПродукции);
			КонецЕсли;
			
			КоличествоКРаспределению   = КоличествоКРаспределению   - ТекущееКоличество;
			КоличествоКРаспределениюИС = КоличествоКРаспределениюИС - ТекущееКоличествоИС;
			
			ДобавляемоеКоличество   = ДобавляемоеКоличество    + ТекущееКоличество;
			ДобавляемоеКоличествоИС = ДобавляемоеКоличествоИС  + ТекущееКоличествоИС;
			
			Если КоличествоКРаспределению > 0 Тогда
				СтрокаАгрегатор1 = СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаИзменений, СвойстваВидаПродукции, Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавляем строку
		НоваяСтрока = ПодобраннаяМаркируемаяПродукция.Вставить(КонечныйИндекс + 1);
		
		НоваяСтрока.Количество          = ДобавляемоеКоличество;
		НоваяСтрока.КоличествоИС        = ДобавляемоеКоличествоИС;
		НоваяСтрока.КоличествоПодобрано = ИзменениеКоличествоПодобрано;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзменений,, "Количество");
		Если СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов Тогда
			НоваяСтрока.КоличествоПотребительскихУпаковок                     = КоличествоПотребительскихУпаковок;
			НоваяСтрока.КоличествоПотребительскихУпаковокТребующихВзвешивания = КоличествоПотребительскихУпаковокТребующихВзвешивания;
			НоваяСтрока.КоличествоПодобраноВзвешено                           = КоличествоПодобраноВзвешено;
			НоваяСтрока.КоличествоПотребительскихУпаковокВСтруктуреУпаковок   = КоличествоПотребительскихУпаковокВСтруктуреУпаковок;
		КонецЕсли;
		
		НоваяСтрока.НоменклатураСопоставлена = ЗначениеЗаполнено(НоваяСтрока.Номенклатура);
		
		НоваяСтрока.КодыGTIN          = КодыGTIN;
		НоваяСтрока.ПредставлениеGTIN = ПредставлениеGTIN;
		
		УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(НоваяСтрока, СвойстваВидаПродукции);
		
		ОбработатьИзменениеНоменклатурыВСтроке(Форма, НоваяСтрока, МодульКонтекста, КэшированныеЗначения);
		
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
	
КонецПроцедуры

Процедура ПодобраннаяПродукцияПриУдаленииСтроки(Форма, СтрокаИзменений, Знач КоличествоКодовМаркировки, МодульКонтекста, ДополнительныеПараметры = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	// 1. Находим агрегирующую строку с подобранной продукцией;
	// 2. Вычитаем необходимо количество из колонки "КоличествоПодобрано";
	// 3. Если Количество и КоличествоПодобрано равно 0, удаляем строку и завершаем выполнение;
	// 4. Если КоличествоПодобрано равно 0,то нужно перераспределеить колонку Количество
	// 5. Если Количество >= КоличествоПодобрано то завершаем выполнение;
	
	СвойстваВидаПродукции = СвойстваВидаПродукцииПоДаннымФормы(Форма);
	
	ПодобраннаяМаркируемаяПродукция = Форма.ПодобраннаяМаркируемаяПродукция;
	 
	СтрокаАгрегатор = СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаИзменений, СвойстваВидаПродукции, Истина);
	
	Если СтрокаАгрегатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоКодовМаркировки = ?(КоличествоКодовМаркировки > 0, КоличествоКодовМаркировки, -КоличествоКодовМаркировки);
	
	Если СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов Тогда
		
		ИзменениеКоличества                                   = СтрокаИзменений.Количество;
		КоличествоПотребительскихУпаковок                     = Мин(СтрокаАгрегатор.КоличествоПотребительскихУпаковок, КоличествоКодовМаркировки);
		КоличествоПотребительскихУпаковокТребующихВзвешивания = 0;
		КоличествоПодобраноВзвешено                           = 0;
		ПроизвольныйВесВСтрокеАгрегатора                      = Ложь;
		
		Если СвойстваВидаПродукции.ДопустимУчетМерныхТоваров Тогда
			Если СтрокаИзменений.ТребуетВзвешивания Тогда
				Если Не СвойстваВидаПродукции.ЗапрашиватьКоличествоМерногоТовара
					И ИзменениеКоличества = 0 Тогда
					КоличествоПотребительскихУпаковокТребующихВзвешивания = КоличествоКодовМаркировки;
				КонецЕсли;
				ПроизвольныйВесВСтрокеАгрегатора = СтрокаАгрегатор.КоличествоПотребительскихУпаковокТребующихВзвешивания > 0;
			КонецЕсли;
			КоличествоПодобраноВзвешено = ИзменениеКоличества;
		КонецЕсли;
		
		СтрокаАгрегатор.КоличествоПотребительскихУпаковок                     = СтрокаАгрегатор.КоличествоПотребительскихУпаковок                     - КоличествоПотребительскихУпаковок;
		СтрокаАгрегатор.КоличествоПотребительскихУпаковокТребующихВзвешивания = СтрокаАгрегатор.КоличествоПотребительскихУпаковокТребующихВзвешивания - КоличествоПотребительскихУпаковокТребующихВзвешивания;
		СтрокаАгрегатор.КоличествоПодобраноВзвешено                           = СтрокаАгрегатор.КоличествоПодобраноВзвешено                           - КоличествоПодобраноВзвешено;
		
		Если ПроизвольныйВесВСтрокеАгрегатора Тогда
			
			Если СтрокаАгрегатор.КоличествоПотребительскихУпаковокТребующихВзвешивания = 0 Тогда
				// Необходимо восстановить подобранное количество
				
				Если СтрокаАгрегатор.КоличествоПодобрано = 0 Тогда
					
					ИзменениеКоличества = СтрокаАгрегатор.КоличествоПодобраноВзвешено;
					
					Если ИзменениеКоличества > 0 Тогда
						
						СтрокаАгрегаторИсточник = СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаИзменений, СвойстваВидаПродукции, Ложь);
						
						ПеренестиДопустимыйСвободныйОстатокНаСтрокуАгрегатор(
							Форма, СтрокаИзменений, МодульКонтекста, СтрокаАгрегаторИсточник, СтрокаАгрегатор, СвойстваВидаПродукции, ИзменениеКоличества,, КэшированныеЗначения);
						
						ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
						
						Возврат;
						
					КонецЕсли;
					
				Иначе
					
					ИзменениеКоличества = СтрокаАгрегатор.КоличествоПодобрано - Мин(СтрокаАгрегатор.КоличествоПодобрано, СтрокаАгрегатор.КоличествоПодобраноВзвешено);
					
				КонецЕсли;
				
			ИначеЕсли КоличествоПотребительскихУпаковокТребующихВзвешивания > 0 И СтрокаАгрегатор.КоличествоПодобрано > 0 Тогда
				// Необходимо обнулить подобранное количество
				
				ИзменениеКоличества = СтрокаАгрегатор.КоличествоПодобрано;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ИзменениеКоличества = КоличествоКодовМаркировки;
		
	КонецЕсли;
	
	Если СтрокаАгрегатор.КоличествоПодобрано = 0 Тогда
		
		Если СтрокаАгрегатор.Количество = 0
			И СтрокаАгрегатор.КоличествоПотребительскихУпаковокВСтруктуреУпаковок = 0
			И (Не СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов Или СтрокаАгрегатор.КоличествоПотребительскихУпаковок = 0) Тогда
			
			ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор);
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
			
		Иначе
			
			ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста, КэшированныеЗначения);
			УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор, СвойстваВидаПродукции);
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли СтрокаАгрегатор.Количество = 0 Или СтрокаАгрегатор.Количество <= (СтрокаАгрегатор.КоличествоПодобрано - ИзменениеКоличества) Тогда
		
		КоличествоПодобрано = Мин(СтрокаАгрегатор.КоличествоПодобрано, ИзменениеКоличества);
		
		СтрокаАгрегатор.КоличествоПодобрано = СтрокаАгрегатор.КоличествоПодобрано - КоличествоПодобрано;
		
		Если СтрокаАгрегатор.КоличествоПодобрано = 0
			И (Не СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов Или СтрокаАгрегатор.КоличествоПотребительскихУпаковок = 0)
			И (Форма.РежимПодбораСуществующихУпаковок Или СтрокаАгрегатор.КоличествоИС = 0) Тогда
			
			ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор);
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
			
		ИначеЕсли СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов
			И СтрокаАгрегатор.КоличествоПотребительскихУпаковок = 0
			И (Форма.РежимПодбораСуществующихУпаковок Или СтрокаАгрегатор.КоличествоИС = 0) Тогда
			
			ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор);
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
			
		Иначе
			
			ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста, КэшированныеЗначения);
			УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор, СвойстваВидаПродукции);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ЭтоШтрихкодВводаОстатков = ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаАгрегатор.GTIN);
	
	СтрокаСКоличествомПоДокументу = Неопределено; // Строка таблицы КоличествоПоДокументуСУчетомВидаПродукции
	Если СтрокаАгрегатор.Количество > 0 Тогда
		
		Если ЭтоШтрихкодВводаОстатков Тогда
			Для Каждого СтрокаСКоличеством Из Форма.КоличествоПоДокументуСУчетомВидаПродукции Цикл
				Если GTINРавны(СтрокаАгрегатор.GTIN, СтрокаСКоличеством.GTIN) Тогда
					СтрокаСКоличествомПоДокументу = СтрокаСКоличеством;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаСКоличествомПоДокументу = Неопределено Тогда
				Для Каждого СтрокаСКоличеством Из Форма.КоличествоПоДокументуСУчетомВидаПродукции Цикл
					Если НоменклатурыСтрокСовпадают(СтрокаАгрегатор, СтрокаСКоличеством)
						И СвойстваВидаПродукцииСовпадают(СтрокаАгрегатор, СтрокаСКоличеством, СвойстваВидаПродукции) Тогда
						СтрокаСКоличествомПоДокументу = СтрокаСКоличеством;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			ПараметрыУточнения = Неопределено;
			Если СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов
				И СвойстваВидаПродукции.ДопустимУчетМерныхТоваров
				И ПроизвольныйВесВСтрокеАгрегатора Тогда
				ПараметрыУточнения = Новый Структура;
				ПараметрыУточнения.Вставить("УточнитьКоличествоИС", Не Форма.РежимПодбораСуществующихУпаковок);
			КонецЕсли;
			
			ПодобраннаяПродукцияПриУдаленииСтрокиПродолжение(
				Форма, СтрокаИзменений, МодульКонтекста, СтрокаАгрегатор, СвойстваВидаПродукции, ИзменениеКоличества, ПараметрыУточнения, КэшированныеЗначения);
			
			Возврат;
		
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоПодобраноПоДокументу       = (СтрокаАгрегатор.Количество = СтрокаАгрегатор.КоличествоПодобрано); // необходимо для дальнейшего перераспределения
	ВыполнитьПерераспределениеКоличества = Ложь;
	УдалитьСтрокуАгрегатор               = Ложь;
	
	СтрокаАгрегатор.КоличествоПодобрано = СтрокаАгрегатор.КоличествоПодобрано - ИзменениеКоличества;
	
	// Тот случай когда меняем статус проверки при отсутствующей номенклатуре
	Если Не (ЗначениеЗаполнено(СтрокаАгрегатор.Номенклатура) Или ЗначениеЗаполнено(СтрокаИзменений.Номенклатура)) Тогда
		Если СтрокаАгрегатор.Количество = 0 И СтрокаАгрегатор.КоличествоПодобрано = 0 Тогда
			ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор);
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
		Иначе
			ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста, КэшированныеЗначения);
			УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор, СвойстваВидаПродукции);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если СтрокаАгрегатор.Количество = 0 И СтрокаАгрегатор.КоличествоПодобрано = 0 Тогда
		
		ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор);
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
		
		Возврат;
		
	ИначеЕсли СтрокаАгрегатор.КоличествоПодобрано = 0 Тогда
		
		// Пример: Количество = 4, КоличествоПодобрано = 4, ИзменениеКоличества = 4
		
		Если СтрокаСКоличествомПоДокументу = Неопределено Тогда
			ВыполнитьПерераспределениеКоличества = Истина;
			УдалитьСтрокуАгрегатор               = Истина;
		ИначеЕсли СтрокаАгрегатор.Количество > СтрокаСКоличествомПоДокументу.Количество Тогда
			ВыполнитьПерераспределениеКоличества = Истина;
		КонецЕсли;
		
	ИначеЕсли КоличествоПодобраноПоДокументу Тогда
		
		// Пример: Количество = 4, КоличествоПодобрано = 4, ИзменениеКоличества = 2
		
		Если СтрокаСКоличествомПоДокументу = Неопределено
			Или СтрокаАгрегатор.Количество > СтрокаСКоличествомПоДокументу.Количество Тогда
			ВыполнитьПерераспределениеКоличества = Истина;
		КонецЕсли;
		
	Иначе
		
		// Все остальные случаи
		// * Количество =  0;
		// * Количество >= КоличествоПодобрано;
		// * Количество <  КоличествоПодобрано;
		
		ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста, КэшированныеЗначения);
		УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор, СвойстваВидаПродукции);
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ВыполнитьПерераспределениеКоличества Тогда
		
		ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста, КэшированныеЗначения);
		УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор, СвойстваВидаПродукции);
		Возврат;
		
	КонецЕсли;
	
	КоличествоОстаток                = ?(УдалитьСтрокуАгрегатор, СтрокаАгрегатор.Количество, ИзменениеКоличества);
	СтрокиДляАнализаИРаспределения   = Новый Массив;
	ИндексПервойСтрокиСНоменклатурой = Неопределено;
	GTINМожетБытьЗаполненЕслиДляНоменклатурыПредусмотреноНесколькоGTIN = Ложь;
	
	Для Каждого СтрокаМаркируемойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
		
		Если КоличествоОстаток = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрокаМаркируемойПродукции = СтрокаАгрегатор Тогда
			Если ИндексПервойСтрокиСНоменклатурой = Неопределено Тогда
				ИндексПервойСтрокиСНоменклатурой = ПодобраннаяМаркируемаяПродукция.Индекс(СтрокаМаркируемойПродукции);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Не НоменклатурыСтрокСовпадают(СтрокаАгрегатор, СтрокаМаркируемойПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексПервойСтрокиСНоменклатурой = Неопределено Тогда
			ИндексПервойСтрокиСНоменклатурой = ПодобраннаяМаркируемаяПродукция.Индекс(СтрокаМаркируемойПродукции);
		КонецЕсли;
		
		Если ЭтоСтрокаАгрегаторСКодамиGTIN(СтрокаМаркируемойПродукции,
				GTINМожетБытьЗаполненЕслиДляНоменклатурыПредусмотреноНесколькоGTIN) Тогда
			СтрокиДляАнализаИРаспределения.Добавить(СтрокаМаркируемойПродукции);
		КонецЕсли;
		
		Если СтрокаМаркируемойПродукции.КоличествоПодобрано > СтрокаМаркируемойПродукции.Количество Тогда
			
			КоличествоКРаспределению = Мин(КоличествоОстаток,
				СтрокаМаркируемойПродукции.КоличествоПодобрано - СтрокаМаркируемойПродукции.Количество);
			
			СтрокаМаркируемойПродукции.Количество = СтрокаМаркируемойПродукции.Количество + КоличествоКРаспределению;
			
			СтрокаАгрегатор.Количество = СтрокаАгрегатор.Количество - КоличествоКРаспределению;
			КоличествоОстаток          = КоличествоОстаток          - КоличествоКРаспределению;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоОстаток = 0 Тогда
		
		Если УдалитьСтрокуАгрегатор Тогда
			ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор);
		Иначе
			ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста, КэшированныеЗначения);
			УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор, СвойстваВидаПродукции);
		КонецЕсли;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
		
		Возврат;
		
	КонецЕсли;
	
	ДобавитьНовуюСтрокуАгрегатор = Истина;
	
	Если СтрокиДляАнализаИРаспределения.Количество() = 0 Тогда
		
		Если Не УдалитьСтрокуАгрегатор И ЭтоСтрокаАгрегаторСКодамиGTIN(СтрокаАгрегатор, Ложь) Тогда
			
			ДобавитьНовуюСтрокуАгрегатор = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого СтрокаМаркируемойПродукции Из СтрокиДляАнализаИРаспределения Цикл
			
			СтрокаАктуальна = Ложь;
			Если СтрокаМаркируемойПродукции.КодыGTIN.Количество() = 1 Тогда
				СтрокаАктуальна = ЗначениеЗаполнено(СтрокаМаркируемойПродукции.GTIN);
				Если СвойстваВидаПродукции.ПроверятьСвойстваВидаПродукции Тогда
					
					// Специфика по виду продукции, так же для них логично проверять на КоличествоПодобрано = 0
					Если СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
						СтрокаАктуальна = ?(СтрокаМаркируемойПродукции.МРЦ <> 0, Ложь, СтрокаАктуальна);
					ИначеЕсли СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
						Если СвойстваВидаПродукции.ПрисутствуютВДанныхДокумента Тогда
							СтрокаАктуальна = ?(ЗначениеЗаполнено(СтрокаМаркируемойПродукции.ИдентификаторПроисхожденияВЕТИС),
								Ложь, СтрокаАктуальна);
						Иначе
							СтрокаАктуальна = ?(СтрокаМаркируемойПродукции.ГоденДо = '00010101', СтрокаАктуальна, Ложь);
						КонецЕсли;
					ИначеЕсли СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС") Тогда
						СтрокаАктуальна = ?(СтрокаМаркируемойПродукции.ГоденДо = '00010101', СтрокаАктуальна, Ложь);
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				СтрокаАктуальна = Не ЗначениеЗаполнено(СтрокаМаркируемойПродукции.GTIN);
			КонецЕсли;
			
			Если СтрокаАктуальна Тогда
				
				СтрокаМаркируемойПродукции.Количество = СтрокаМаркируемойПродукции.Количество + КоличествоОстаток;
				
				ДобавитьНовуюСтрокуАгрегатор = Ложь;
				
				СтрокаАгрегатор.Количество = СтрокаАгрегатор.Количество - КоличествоОстаток;
				КоличествоОстаток          = 0;
				
				ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаМаркируемойПродукции, МодульКонтекста, КэшированныеЗначения);
				УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаМаркируемойПродукции, СвойстваВидаПродукции);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДобавитьНовуюСтрокуАгрегатор Тогда
		
		// Добавляем строку
		
		ЗначениеGTIN = "";
		Если СтрокаАгрегатор.КодыGTIN.Количество() = 1 Тогда
			ЗначениеGTIN = СтрокаАгрегатор.КодыGTIN[0].Значение;
		КонецЕсли;
		
		СвойстваДляИсключения = Новый Массив; // Для обнуления при создании строки
		СвойстваДляИсключения.Добавить("Количество");
		СвойстваДляИсключения.Добавить("КоличествоИС");
		СвойстваДляИсключения.Добавить("КоличествоПодобрано");
		СвойстваДляИсключения.Добавить("GTIN");
		СвойстваДляИсключения.Добавить("ПредставлениеGTIN");
		Если СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
			СвойстваДляИсключения.Добавить("МРЦ");
		ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(СвойстваВидаПродукции.ВидПродукции) Тогда
			СвойстваДляИсключения.Добавить("ИдентификаторПроисхожденияВЕТИС");
			СвойстваДляИсключения.Добавить("ГоденДо");
			СвойстваДляИсключения.Добавить("СкоропортящаясяПродукция");
		КонецЕсли;
		
		ИменаСвойствДляИсключения = СтрСоединить(СвойстваДляИсключения, ",");
		
		Если ИндексПервойСтрокиСНоменклатурой = Неопределено Тогда
			ИндексПервойСтрокиСНоменклатурой = ПодобраннаяМаркируемаяПродукция.Индекс(СтрокаАгрегатор);
		КонецЕсли;
		
		НоваяСтрока = ПодобраннаяМаркируемаяПродукция.Вставить(ИндексПервойСтрокиСНоменклатурой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАгрегатор,, ИменаСвойствДляИсключения);
		НоваяСтрока.НоменклатураСопоставлена = ЗначениеЗаполнено(НоваяСтрока.Номенклатура);
		НоваяСтрока.Количество               = КоличествоОстаток;
		НоваяСтрока.КоличествоПодобрано      = 0;
		
		НоваяСтрока.GTIN                     = ЗначениеGTIN;
		НоваяСтрока.КодыGTIN                 = СтрокаАгрегатор.КодыGTIN;
		НоваяСтрока.ПредставлениеGTIN        = СтрокаАгрегатор.ПредставлениеGTIN;
		
		ОбработатьИзменениеНоменклатурыВСтроке(Форма, НоваяСтрока, МодульКонтекста, КэшированныеЗначения);
		УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(НоваяСтрока, СвойстваВидаПродукции);
		
		СтрокаАгрегатор.Количество = СтрокаАгрегатор.Количество - КоличествоОстаток;
		КоличествоОстаток          = 0;
		
	КонецЕсли;
	
	Если УдалитьСтрокуАгрегатор Тогда
		ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор);
	Иначе
		ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста, КэшированныеЗначения);
		УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор, СвойстваВидаПродукции);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
	
КонецПроцедуры

Процедура ПодобраннаяПродукцияПриУдаленииСтрокиПродолжение(Форма, СтрокаИзменений, МодульКонтекста, СтрокаАгрегатор, СвойстваВидаПродукции, ИзменениеКоличества, ДополнительныеПараметры = Неопределено, КэшированныеЗначения)
	
	ИзменениеКоличества = ?(ИзменениеКоличества < 0, -ИзменениеКоличества, ИзменениеКоличества);
	
	ИзменениеКоличествоПодобрано = Мин(СтрокаАгрегатор.КоличествоПодобрано, ИзменениеКоличества);
	
	СтрокаАгрегатор.КоличествоПодобрано = СтрокаАгрегатор.КоличествоПодобрано - ИзменениеКоличествоПодобрано;
	
	УточнитьКоличествоИС = ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("УточнитьКоличествоИС")
		И ДополнительныеПараметры.УточнитьКоличествоИС;
	
	Если Не Форма.РежимПодбораСуществующихУпаковок И УточнитьКоличествоИС Тогда
		СтрокаАгрегатор.КоличествоИС = СтрокаАгрегатор.КоличествоИС - Мин(СтрокаАгрегатор.КоличествоИС, ИзменениеКоличества);
	КонецЕсли;
	
	ДанныеРаспределения = ДанныеРаспределенияСтрокиАгрегатораПоДаннымДокумента(Форма, МодульКонтекста, СтрокаАгрегатор, СвойстваВидаПродукции);
	
	Если ДанныеРаспределения <> Неопределено Тогда
		
		РаспределитьСвободныйОстатокПоСтрокамПодобраннойПродукции(Форма, МодульКонтекста, СтрокаАгрегатор, СвойстваВидаПродукции, ДанныеРаспределения, КэшированныеЗначения);
		
		СоздатьСтрокиПодобраннойПродукцииПоСвободномуОстатку(Форма, МодульКонтекста, СтрокаАгрегатор, СвойстваВидаПродукции, ДанныеРаспределения, КэшированныеЗначения);
		
	КонецЕсли;
	
	ПодобраннаяМаркируемаяПродукция = Форма.ПодобраннаяМаркируемаяПродукция;
	
	Если СтрокаАгрегатор.Количество = 0 И СтрокаАгрегатор.КоличествоПодобрано = 0
		И (Не СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов Или СтрокаАгрегатор.КоличествоПотребительскихУпаковокТребующихВзвешивания = 0)
		И (Форма.РежимПодбораСуществующихУпаковок Или СтрокаАгрегатор.КоличествоИС = 0) Тогда
		ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор);
	Иначе
		ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста, КэшированныеЗначения);
		УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор, СвойстваВидаПродукции);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
	
КонецПроцедуры

Процедура ПодобраннаяПродукцияПриОчисткиСопоставления(Форма, ПодобраннаяПродукцияДляОчисткиСопоставления, МодульКонтекста, КэшированныеЗначения) Экспорт
	
	// Необходимые проверки:
	//1. Свойства вида продукции
	//2. Количество по документу
	
	СвойстваВидаПродукции = СвойстваВидаПродукцииПоДаннымФормы(Форма);
	
	ПодобраннаяМаркируемаяПродукция = Форма.ПодобраннаяМаркируемаяПродукция;
	
	СвойстваДляКопирования = Новый Массив;
	СвойстваДляКопирования.Добавить("GTIN");
	СвойстваДляКопирования.Добавить("ПредставлениеНоменклатуры");
	Если СвойстваВидаПродукции.ПроверятьСвойстваВидаПродукции Тогда
		Если СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
			СвойстваДляКопирования.Добавить("МРЦ");
			СвойстваДляКопирования.Добавить("ВключаетМРЦ");
		ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(СвойстваВидаПродукции.ВидПродукции) Тогда
			СвойстваДляКопирования.Добавить("ИдентификаторПроисхожденияВЕТИС");
			СвойстваДляКопирования.Добавить("ГоденДо");
			СвойстваДляКопирования.Добавить("СкоропортящаясяПродукция");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаИзменений Из ПодобраннаяПродукцияДляОчисткиСопоставления Цикл
		
		СтрокаАгрегатор = СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаИзменений, СвойстваВидаПродукции, Истина);
		
		Если СтрокаАгрегатор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоПодобрано = 0;
		Количество          = 0;
		КоличествоИС        = 0;
		
		Если СтрокаИзменений.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии")
		 Или СтрокаИзменений.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась")
		 Или СтрокаИзменений.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
			КоличествоПодобрано = Мин(СтрокаАгрегатор.КоличествоПодобрано, СтрокаИзменений.Изменение);
		КонецЕсли;
		
		Если КоличествоПодобрано = 0 Тогда
			Количество   = Мин(СтрокаАгрегатор.Количество,   СтрокаИзменений.Изменение);
			КоличествоИС = Мин(СтрокаАгрегатор.КоличествоИС, СтрокаИзменений.Изменение);
		Иначе
			ДоступноеКоличествоПодобрано = СтрокаАгрегатор.КоличествоПодобрано - КоличествоПодобрано;
			Если ДоступноеКоличествоПодобрано < СтрокаАгрегатор.Количество Тогда
				Количество = Мин(СтрокаАгрегатор.Количество - ДоступноеКоличествоПодобрано, СтрокаИзменений.Изменение);
			КонецЕсли;
			Если ДоступноеКоличествоПодобрано < СтрокаАгрегатор.КоличествоИС Тогда
				КоличествоИС = Мин(СтрокаАгрегатор.КоличествоИС - ДоступноеКоличествоПодобрано, СтрокаИзменений.Изменение);
			КонецЕсли;
		КонецЕсли;
		
		Если КоличествоПодобрано = 0 И Количество = 0 И КоличествоИС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаАгрегатор.КоличествоПодобрано = СтрокаАгрегатор.КоличествоПодобрано - КоличествоПодобрано;
		СтрокаАгрегатор.Количество          = СтрокаАгрегатор.Количество          - Количество;
		СтрокаАгрегатор.КоличествоИС        = СтрокаАгрегатор.КоличествоИС        - КоличествоИС;
		
		// Ищем строку с не сопоставленной номенклатурой, если ее нет, то создаем её
		ОтборПоGTIN = Новый Структура("GTIN", СтрокаИзменений.GTIN);
		СтрокиПоGTIN = ПодобраннаяМаркируемаяПродукция.НайтиСтроки(ОтборПоGTIN);
		
		СтрокаАгрегаторСПустойНоменклатурой = Неопределено;
		
		Для Каждого СтрокаПодобраннойПродукции Из СтрокиПоGTIN Цикл
			
			Если СтрокаАгрегатор = СтрокаПодобраннойПродукции Тогда
				Продолжить;
			КонецЕсли;
			
			// Добавить проверку на свойства вида продукции СвойстваВидаПродукцииСовпадают
			Если Не СвойстваВидаПродукцииСовпадают(СтрокаАгрегатор, СтрокаПодобраннойПродукции, СвойстваВидаПродукции) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура) Тогда
				СтрокаАгрегаторСПустойНоменклатурой = СтрокаПодобраннойПродукции;
			КонецЕсли;
			
			Если Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаПодобраннойПродукции.КоличествоПодобрано > СтрокаПодобраннойПродукции.Количество И Количество > 0 Тогда
				
				КоличествоИзменение = Мин(СтрокаПодобраннойПродукции.Количество, Количество);
				Количество   = Количество - КоличествоИзменение;
				КоличествоИС = Количество;
				
				СтрокаПодобраннойПродукции.Количество   = СтрокаПодобраннойПродукции.Количество + КоличествоИзменение;
				СтрокаПодобраннойПродукции.КоличествоИС = СтрокаПодобраннойПродукции.Количество;
				
				УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции, СвойстваВидаПродукции);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не (КоличествоПодобрано = 0 И Количество = 0 И КоличествоИС = 0) Тогда
			
			СтрокаПодобраннойПродукции = СтрокаАгрегаторСПустойНоменклатурой;
			Если СтрокаПодобраннойПродукции = Неопределено Тогда
				СтрокаПодобраннойПродукции = ПодобраннаяМаркируемаяПродукция.Вставить(0);
				Для Каждого ТекущееСвойство Из СвойстваДляКопирования Цикл
					СтрокаПодобраннойПродукции[ТекущееСвойство] = СтрокаИзменений[ТекущееСвойство];
				КонецЦикла;
				ОбработатьИзменениеНоменклатурыВСтроке(Форма, СтрокаПодобраннойПродукции, МодульКонтекста, КэшированныеЗначения);
			КонецЕсли;
			СтрокаПодобраннойПродукции.КоличествоПодобрано = СтрокаПодобраннойПродукции.КоличествоПодобрано + КоличествоПодобрано;
			СтрокаПодобраннойПродукции.Количество          = СтрокаПодобраннойПродукции.Количество          + Количество;
			СтрокаПодобраннойПродукции.КоличествоИС        = СтрокаПодобраннойПродукции.КоличествоИС        + КоличествоИС;
			
			ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаПодобраннойПродукции, МодульКонтекста, КэшированныеЗначения);
			УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции, СвойстваВидаПродукции);
			
			КоличествоПодобрано = 0;
			Количество          = 0;
			КоличествоИС        = 0;
			
		КонецЕсли;
		
		Если СтрокаАгрегатор.Количество = 0 И СтрокаАгрегатор.КоличествоПодобрано = 0 И СтрокаАгрегатор.КоличествоИС = 0 Тогда
			ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор);
		Иначе
			ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста, КэшированныеЗначения);
			УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор, СвойстваВидаПродукции);
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
	
	ИмяСвойстваКоличествоСтрокПодобраннойПродукции = "КоличествоСтрокПодобраннойПродукции";
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(СвойстваВидаПродукции.ВидПродукции) Тогда
		ИмяСвойстваКоличествоСтрокПодобраннойПродукции = "КоличествоСтрокПодобраннойТабачнойПродукции";
	КонецЕсли;
	Форма[ИмяСвойстваКоличествоСтрокПодобраннойПродукции] = Форма.ПодобраннаяМаркируемаяПродукция.Количество();
	
КонецПроцедуры

Процедура ПодобраннаяПродукцияПриУточненииСопоставления(Форма, СтрокаИзмененийДо, СтрокаИзмененийПосле, Знач КоличествоКодовМаркировки, МодульКонтекста, ДополнительныеПараметры = Неопределено, КэшированныеЗначения) Экспорт
	
	УточнитьТолькоКоличествоИС = Ложь;
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("СтатусПроверки")
		И ЗначениеЗаполнено(ДополнительныеПараметры.СтатусПроверки) Тогда
		
		Если Форма.РежимПодбораСуществующихУпаковок Тогда
			ВыполнитьУточнениеПодобраннойПродукции = ДополнительныеПараметры.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует");
		Иначе
			ВыполнитьУточнениеПодобраннойПродукции = ДополнительныеПараметры.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
			УточнитьТолькоКоличествоИС             = Не ВыполнитьУточнениеПодобраннойПродукции;
		КонецЕсли;
		
		Если Не (ВыполнитьУточнениеПодобраннойПродукции Или УточнитьТолькоКоличествоИС) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СвойстваВидаПродукции = СвойстваВидаПродукцииПоДаннымФормы(Форма);
	
	ПодобраннаяМаркируемаяПродукция = Форма.ПодобраннаяМаркируемаяПродукция;
	
	СтрокаАгрегаторИсточник = СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаИзмененийДо, СвойстваВидаПродукции, Истина);
	
	Если СтрокаАгрегаторИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУточнения = Новый Структура;
	ПараметрыУточнения.Вставить("УточнитьКоличествоИС", Не Форма.РежимПодбораСуществующихУпаковок);
	
	КоличествоКодовМаркировки = ?(КоличествоКодовМаркировки > 0, КоличествоКодовМаркировки, -КоличествоКодовМаркировки);
	
	СтрокаАгрегаторПриемник = СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаИзмененийПосле, СвойстваВидаПродукции, Истина);
	
	Если СтрокаАгрегаторИсточник = СтрокаАгрегаторПриемник Тогда
		
		СтрокаАгрегатор = СтрокаАгрегаторИсточник;
		
		// Данный сценарий актуален только для мерного товара
		
		Если Не СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов
			Или СтрокаИзмененийДо.Количество = СтрокаИзмененийПосле.Количество Тогда
			Возврат;
		КонецЕсли;
		
		ИзменениеКоличества = СтрокаИзмененийПосле.Количество - СтрокаИзмененийДо.Количество;
		
		Если УточнитьТолькоКоличествоИС Тогда
			СтрокаАгрегатор.КоличествоИС = СтрокаАгрегатор.КоличествоИС + ИзменениеКоличества;
			Возврат;
		КонецЕсли;
		
		ЭтоУточнениеПодобранногоКоличестваМерногоТовара =
			ДополнительныеПараметры <> Неопределено
			И ДополнительныеПараметры.Свойство("УточнениеПодобранногоКоличестваМерногоТовара")
			И ДополнительныеПараметры.УточнениеПодобранногоКоличестваМерногоТовара;
		
		Если СтрокаАгрегатор.Количество = 0 И Не ЭтоУточнениеПодобранногоКоличестваМерногоТовара Тогда
			СтрокаАгрегатор.КоличествоПодобрано = СтрокаАгрегатор.КоличествоПодобрано + ИзменениеКоличества;
			Если ПараметрыУточнения.УточнитьКоличествоИС Тогда
				СтрокаАгрегатор.КоличествоИС = СтрокаАгрегатор.КоличествоИС + ИзменениеКоличества;
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		// Выполнить перераспределение веса
		
		Если ИзменениеКоличества > 0 Тогда
			
			// Сценарий добавления. Дополнить поле количество по свободным остаткам.
			
			СтрокаАгрегаторИсточник = СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаИзмененийПосле, СвойстваВидаПродукции, Ложь);
			
			ПеренестиДопустимыйСвободныйОстатокНаСтрокуАгрегатор(
				Форма, СтрокаИзмененийПосле, МодульКонтекста, СтрокаАгрегаторИсточник, СтрокаАгрегатор, СвойстваВидаПродукции, ИзменениеКоличества, ПараметрыУточнения, КэшированныеЗначения);
			
		Иначе
			
			// Сценарий удаления: Освободившееся количество по документу необходимо перераспределить.
			
			Если СтрокаАгрегатор.Количество > СтрокаАгрегатор.КоличествоПодобрано
					И (СтрокаАгрегатор.Количество >= СтрокаАгрегатор.КоличествоПодобрано + ИзменениеКоличества)
				Или СтрокаАгрегатор.Количество < СтрокаАгрегатор.КоличествоПодобрано
					И (СтрокаАгрегатор.Количество <= СтрокаАгрегатор.КоличествоПодобрано + ИзменениеКоличества) Тогда
				
				СтрокаАгрегатор.КоличествоПодобрано = СтрокаАгрегатор.КоличествоПодобрано + ИзменениеКоличества;
				
				Если ПараметрыУточнения.УточнитьКоличествоИС Тогда
					ИзменениеКоличестваИС = Мин(СтрокаАгрегатор.КоличествоИС, -ИзменениеКоличества);
					СтрокаАгрегатор.КоличествоИС = СтрокаАгрегатор.КоличествоИС - ИзменениеКоличестваИС;
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
			ПодобраннаяПродукцияПриУдаленииСтрокиПродолжение(
				Форма, СтрокаИзмененийДо, МодульКонтекста, СтрокаАгрегатор, СвойстваВидаПродукции, ИзменениеКоличества, ПараметрыУточнения, КэшированныеЗначения);
			
		КонецЕсли;
		
	Иначе
		
		СтрокаАгрегатор = СтрокаАгрегаторИсточник;
		
		Если СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов Тогда
			
			ИзменениеКоличества = СтрокаИзмененийДо.Количество;
			
			Если Не УточнитьТолькоКоличествоИС Тогда
				
				КоличествоПотребительскихУпаковок = Мин(СтрокаАгрегатор.КоличествоПотребительскихУпаковок, КоличествоКодовМаркировки);
				
				СтрокаАгрегатор.КоличествоПотребительскихУпаковок = СтрокаАгрегатор.КоличествоПотребительскихУпаковок - КоличествоПотребительскихУпаковок;
				
			КонецЕсли;
			
		Иначе
			
			ИзменениеКоличества = КоличествоКодовМаркировки;
			
		КонецЕсли;
		
		Если УточнитьТолькоКоличествоИС Тогда
			
			СтрокаАгрегатор.КоличествоИС = СтрокаАгрегатор.КоличествоИС - ИзменениеКоличества;
			
			Если СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов Тогда
				
				КоличествоПотребительскихУпаковокВСтруктуреУпаковок = Мин(СтрокаАгрегатор.КоличествоПотребительскихУпаковокВСтруктуреУпаковок, КоличествоКодовМаркировки);
				
				СтрокаАгрегатор.КоличествоПотребительскихУпаковокВСтруктуреУпаковок = СтрокаАгрегатор.КоличествоПотребительскихУпаковокВСтруктуреУпаковок - КоличествоПотребительскихУпаковокВСтруктуреУпаковок;
				
			КонецЕсли;
			
			Если СтрокаАгрегаторПриемник = Неопределено Тогда
				
				ИндексПервойСтрокиСНоменклатурой = ПодобраннаяМаркируемаяПродукция.Индекс(СтрокаАгрегатор);
				
				Если ПодобраннаяМаркируемаяПродукция.Количество() > ИндексПервойСтрокиСНоменклатурой + 1 Тогда
					НоваяСтрока = ПодобраннаяМаркируемаяПродукция.Вставить(ИндексПервойСтрокиСНоменклатурой + 1);
				Иначе
					НоваяСтрока = ПодобраннаяМаркируемаяПродукция.Добавить();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзмененийПосле,, "Количество");
				НоваяСтрока.НоменклатураСопоставлена = ЗначениеЗаполнено(НоваяСтрока.Номенклатура);
				
				ДанныеПоАгрегатору = СтрокиПоДокументуДляАгрегатора(Форма.ПродукцияПоДокументу, НоваяСтрока, СвойстваВидаПродукции);
				Для Каждого СтрокаПоДокументу Из ДанныеПоАгрегатору.СтрокиПоДокументу Цикл
					Если СтрокаПоДокументу.КодыGTIN.НайтиПоЗначению(НоваяСтрока.GTIN) <> Неопределено Тогда
						НоваяСтрока.КодыGTIN          = СтрокаПоДокументу.КодыGTIN;
						НоваяСтрока.ПредставлениеGTIN = СтрокаПоДокументу.ПредставлениеGTIN;
					КонецЕсли;
				КонецЦикла;
				
				ОбработатьИзменениеНоменклатурыВСтроке(Форма, НоваяСтрока, МодульКонтекста, КэшированныеЗначения);
				
				СтрокаАгрегаторПриемник = НоваяСтрока;
				
			КонецЕсли;
			
			СтрокаАгрегаторПриемник.КоличествоИС = СтрокаАгрегаторПриемник.КоличествоИС + СтрокаИзмененийПосле.Количество;
			
			Если СвойстваВидаПродукции.ОтдельноеПолеКоличестваКодов Тогда
				
				СтрокаАгрегаторПриемник.КоличествоПотребительскихУпаковокВСтруктуреУпаковок = СтрокаАгрегаторПриемник.КоличествоПотребительскихУпаковокВСтруктуреУпаковок + КоличествоПотребительскихУпаковокВСтруктуреУпаковок;
				
			КонецЕсли;
			
			ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор,         МодульКонтекста, КэшированныеЗначения);
			ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегаторПриемник, МодульКонтекста, КэшированныеЗначения);
			
			УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор,         СвойстваВидаПродукции);
			УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегаторПриемник, СвойстваВидаПродукции);
			
		Иначе
			
			ПодобраннаяПродукцияПриДобавленииСтроки(Форма, СтрокаИзмененийПосле, КоличествоКодовМаркировки, МодульКонтекста, ПараметрыУточнения, КэшированныеЗначения);
			
			ПодобраннаяПродукцияПриУдаленииСтрокиПродолжение(
				Форма, СтрокаИзмененийДо, МодульКонтекста, СтрокаАгрегатор, СвойстваВидаПродукции, ИзменениеКоличества, ПараметрыУточнения, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
	
	ИмяСвойстваКоличествоСтрокПодобраннойПродукции = "КоличествоСтрокПодобраннойПродукции";
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(СвойстваВидаПродукции.ВидПродукции) Тогда
		ИмяСвойстваКоличествоСтрокПодобраннойПродукции = "КоличествоСтрокПодобраннойТабачнойПродукции";
	КонецЕсли;
	Форма[ИмяСвойстваКоличествоСтрокПодобраннойПродукции] = Форма.ПодобраннаяМаркируемаяПродукция.Количество();
	
КонецПроцедуры

Процедура РазрешитьСопоставлениеНоменклатурыДляДокументаПриобретения(Форма, ПараметрыСканирования) Экспорт
	
	Если Не ПараметрыСканирования.СопоставлятьНоменклатуру
		И Форма.ЭтоДокументПриобретения
		И ТипЗнч(Форма.ПроверяемыйДокумент) <> Тип("ДокументСсылка.ПриемкаТоваровИСМП") Тогда
		ПараметрыСканирования.СопоставлятьНоменклатуру = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеШтрихкодаПолнымКодомМаркировки(ДанныеШтрихкода, ДанныеРазбора, ВидПродукции, ПараметрыСканирования) Экспорт
	
	Если ДанныеРазбора = Неопределено
		Или ДанныеШтрихкода.Свойство("ПолныйКодМаркировки")
		Или Не ДанныеРазбора.Свойство("СоставКодаМаркировки") Тогда
		Возврат;
	КонецЕсли;
	
	Если (ДанныеРазбора.СоставКодаМаркировки.Свойство("ВключаетКлючПроверки")
		И ДанныеРазбора.СоставКодаМаркировки.ВключаетКлючПроверки)
		Или (ДанныеРазбора.СоставКодаМаркировки.Свойство("ВключаетКриптоХвост")
		И ДанныеРазбора.СоставКодаМаркировки.ВключаетКриптоХвост) Тогда
		ДанныеШтрихкода.Вставить(
			"ПолныйКодМаркировки",
			ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ДанныеШтрихкода.Штрихкод));
		ДанныеШтрихкода.Вставить("ЕстьВПулеКодовМаркировки", Ложь);
		ДанныеШтрихкода.Вставить("ДанныеРазбора",            ДанныеРазбора);
		ДанныеШтрихкода.Вставить("ВидПродукции",             ВидПродукции);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьТребованиеПолногоКода(ДанныеШтрихкода, СтрокаДанных, ПараметрыСканирования) Экспорт
	
	Если СтрокаДанных.СостояниеТребованияПолногоКодаККТ <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеШтрихкода.Свойство("ПолныйКодМаркировки") Тогда
		
		СтрокаДанных.СостояниеТребованияПолногоКодаККТ = 2;
		СтрокаДанных.ТекстОшибкиПроверкиСредствамиККТ  = НСтр("ru = 'Будет выполнена перед пробитием чека'");
		
		Если Не ДанныеШтрихкода.ЕстьВПулеКодовМаркировки Тогда
			
			ПроверкаИПодборПродукцииИСМПВызовСервера.СохранитьПолныйКодМаркировкиВПулПриСканированииСуществующего(
				ДанныеШтрихкода,
				ПараметрыСканирования);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Экспорт
	Возврат ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока");
КонецФункции

Функция ТипУпаковкиГрупповыеУпаковкиБезКоробки() Экспорт
	Возврат ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки");
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОпределениеТипаУпаковки

Процедура ОпределитьТипУпаковки(СтрокаДерева, ВключаяПодчиненные, ПараметрыЗаполнения, МодульКонтекста)
	
	НоменклатураУпаковки   = Новый Соответствие;
	ХарактеристикаУпаковки = Новый Соответствие;
	СерияУпаковки          = Новый Соответствие;
	GTINУпаковки           = Новый Соответствие;
	
	ВУпаковкеРазнаяНоменклатура   = Ложь;
	ВУпаковкеРазныеХарактеристики = Ложь;
	ВУпаковкеРазныеСерии          = Ложь;
	ВУпаковкеРазныйGTIN           = Ложь;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = Новый Структура();
		ПараметрыЗаполнения.Вставить(
			"ЕстьКолонкаТребуетВзвешивания",
			ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДерева, "ТребуетВзвешивания"));
	КонецЕсли;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Если ПодчиненныеСтроки.Количество() = 0 Тогда
		Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
			НоменклатураУпаковки.Вставить(СтрокаДерева.Номенклатура, Истина);
			ХарактеристикаУпаковки.Вставить(СтрокаДерева.Характеристика, Истина);
			СерияУпаковки.Вставить(СтрокаДерева.Серия, Истина);
			GTINУпаковки.Вставить(СтрокаДерева.GTIN, Истина);
		ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
			И ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			НоменклатураУпаковки.Вставить(СтрокаДерева.Номенклатура, Истина);
			ХарактеристикаУпаковки.Вставить(СтрокаДерева.Характеристика, Истина);
			СерияУпаковки.Вставить(СтрокаДерева.Серия, Истина);
			GTINУпаковки.Вставить(СтрокаДерева.GTIN, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЕстьКолонкаТребуетВзвешивания Тогда
		ТребуетВзвешивания = СтрокаДерева.ТребуетВзвешивания;
	КонецЕсли;
	ПроизвольнаяЕдиницаУчета = СтрокаДерева.ПроизвольнаяЕдиницаУчета;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			Если ВключаяПодчиненные Тогда
				
				ОпределитьТипУпаковки(ПодчиненнаяСтрока, ВключаяПодчиненные, ПараметрыЗаполнения, МодульКонтекста);
				
			КонецЕсли;
			
		Иначе
			
			МодульКонтекста.СформироватьПредставлениеСодержимогоУпаковки(ПодчиненнаяСтрока);
			
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазнаяНоменклатура Тогда
			ВУпаковкеРазнаяНоменклатура = Истина;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазныеХарактеристики Тогда
			ВУпаковкеРазныеХарактеристики = Истина;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазныеСерии Тогда
			ВУпаковкеРазныеСерии = Истина;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазныйGTIN Тогда
			ВУпаковкеРазныйGTIN = Истина;
		КонецЕсли;
		
		Если ПараметрыЗаполнения.ЕстьКолонкаТребуетВзвешивания Тогда
			ТребуетВзвешивания = ПодчиненнаяСтрока.ТребуетВзвешивания;
		КонецЕсли;
		ПроизвольнаяЕдиницаУчета = ПодчиненнаяСтрока.ПроизвольнаяЕдиницаУчета;
		
		НоменклатураУпаковки.Вставить(ПодчиненнаяСтрока.Номенклатура, Истина);
		ХарактеристикаУпаковки.Вставить(ПодчиненнаяСтрока.Характеристика, Истина);
		СерияУпаковки.Вставить(ПодчиненнаяСтрока.Серия, Истина);
		GTINУпаковки.Вставить(ПодчиненнаяСтрока.GTIN, Истина);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСКлиентСервер.УстановитьЗначениеДляУпаковки(СтрокаДерева,
		"Номенклатура", "ВУпаковкеРазнаяНоменклатура",
		НоменклатураУпаковки, ВУпаковкеРазнаяНоменклатура);
	
	ПроверкаИПодборПродукцииИСКлиентСервер.УстановитьЗначениеДляУпаковки(СтрокаДерева,
		"Характеристика", "ВУпаковкеРазныеХарактеристики",
		ХарактеристикаУпаковки, ВУпаковкеРазныеХарактеристики);
	
	ПроверкаИПодборПродукцииИСКлиентСервер.УстановитьЗначениеДляУпаковки(СтрокаДерева,
		"Серия", "ВУпаковкеРазныеСерии",
		СерияУпаковки, ВУпаковкеРазныеСерии);
	
	ПроверкаИПодборПродукцииИСКлиентСервер.УстановитьЗначениеДляУпаковки(СтрокаДерева,
		"GTIN", "ВУпаковкеРазныйGTIN",
		GTINУпаковки, ВУпаковкеРазныйGTIN, Ложь);
	
	Если СтрокаДерева.ВУпаковкеРазнаяНоменклатура Или СтрокаДерева.ВУпаковкеРазныеХарактеристики Тогда
		СтрокаДерева.Номенклатура   = Неопределено;
		СтрокаДерева.Характеристика = Неопределено;
		СтрокаДерева.Серия          = Неопределено;
		СтрокаДерева.ТипУпаковки    = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка");
	ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка");
	ИначеЕсли Не СтрокаДерева.ВУпаковкеРазныйGTIN Тогда
		СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка");
	Иначе
		СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка");
	КонецЕсли;
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка") Тогда
		Если ПараметрыЗаполнения.ЕстьКолонкаТребуетВзвешивания Тогда
			СтрокаДерева.ТребуетВзвешивания = ТребуетВзвешивания;
		КонецЕсли;
		СтрокаДерева.ПроизвольнаяЕдиницаУчета = ПроизвольнаяЕдиницаУчета;
	Иначе
		Если ПараметрыЗаполнения.ЕстьКолонкаТребуетВзвешивания Тогда
			СтрокаДерева.ТребуетВзвешивания = Ложь;
		КонецЕсли;
		СтрокаДерева.ПроизвольнаяЕдиницаУчета = Ложь;
	КонецЕсли;
	
	МодульКонтекста.СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
	
КонецПроцедуры

#КонецОбласти

#Область ПодобраннаяМаркируемаяПродукция

Функция СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаПодобраннойПродукции, СвойстваВидаПродукции, ПолноеСовпадение = Ложь)
	
	Если ПодобраннаяМаркируемаяПродукция.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПолноеСовпадение Тогда
		Для Каждого СтрокаМаркируемойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
			Если НоменклатурыСтрокСовпадают(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции)
				И GTINРавны(СтрокаПодобраннойПродукции.GTIN, СтрокаМаркируемойПродукции.GTIN)
				И СвойстваВидаПродукцииСовпадают(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции, СвойстваВидаПродукции) Тогда
				Возврат СтрокаМаркируемойПродукции;
			КонецЕсли;
		КонецЦикла;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаПодобраннойПродукции.GTIN) Тогда
		
		Для Каждого СтрокаМаркируемойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
			
			Если ЗначениеЗаполнено(СтрокаМаркируемойПродукции.Номенклатура)
				И Не НоменклатурыСтрокСовпадают(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции) Тогда
				Продолжить;
			КонецЕсли;
				
			Если ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаМаркируемойПродукции.GTIN) Тогда
				
				Если Не GTINРавны(СтрокаПодобраннойПродукции.GTIN, СтрокаМаркируемойПродукции.GTIN) Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаМаркируемойПродукции.Количество = 0
					Или СтрокаМаркируемойПродукции.Количество = СтрокаМаркируемойПродукции.КоличествоПодобрано Тогда
					Продолжить;
				КонецЕсли;
				
				Возврат СтрокаМаркируемойПродукции;
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаМаркируемойПродукции.GTIN)
				И СтрокаМаркируемойПродукции.КодыGTIN.Количество() = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Возврат СтрокаМаркируемойПродукции;
			
		КонецЦикла;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СтрокаАгрегаторПолноеСовпадение    = Неопределено;
	СтрокаАгрегаторЧастичноеСовпадение = Неопределено;
	СтрокиДляАнализаИРаспределения     = Новый Массив;
	
	ВесаСтрок = Новый Соответствие;
	
	Для Каждого СтрокаМаркируемойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
		
		НоменклатураСопоставлена   = ЗначениеЗаполнено(СтрокаМаркируемойПродукции.Номенклатура);
		НоменклатураСтрокСовпадает = НоменклатурыСтрокСовпадают(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции, Ложь);
		
		Если НоменклатураСопоставлена Тогда
			Если Не НоменклатураСтрокСовпадает Тогда
				Продолжить;
			ИначеЕсли Не СвойствоСтрокСовпадает(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции, "Характеристика", Ложь) Тогда
				Продолжить;
			ИначеЕсли Не СвойствоСтрокСовпадает(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции, "Серия", Ложь) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Не СвойстваВидаПродукцииСовпадают(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции, СвойстваВидаПродукции, Ложь) Тогда
			Продолжить;
		КонецЕсли;
		
		GTINСовпадают                  = GTINРавны(СтрокаПодобраннойПродукции.GTIN, СтрокаМаркируемойПродукции.GTIN);
		СвойстваВидаПродукцииСовпадают = СвойстваВидаПродукцииСовпадают(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции, СвойстваВидаПродукции, Истина);
		ХарактеристикаСтрокСовпадает   = СвойствоСтрокСовпадает(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции, "Характеристика");
		СерияСтрокСовпадает            = СвойствоСтрокСовпадает(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции, "Серия");
		
		Если Не НоменклатураСопоставлена Тогда
			
			Если GTINСовпадают И СвойстваВидаПродукцииСовпадают Тогда
				
				Если НоменклатураСтрокСовпадает Тогда
					СтрокаАгрегаторПолноеСовпадение = СтрокаМаркируемойПродукции;
				Иначе
					СтрокаАгрегаторЧастичноеСовпадение = СтрокаМаркируемойПродукции;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли НоменклатураСтрокСовпадает Тогда
			
			Если GTINСовпадают И СвойстваВидаПродукцииСовпадают И ХарактеристикаСтрокСовпадает И СерияСтрокСовпадает Тогда
				
				СтрокаАгрегаторПолноеСовпадение = СтрокаМаркируемойПродукции;
				
			Иначе
				
				СтрокиДляАнализаИРаспределения.Добавить(СтрокаМаркируемойПродукции);
				
				Если ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(СвойстваВидаПродукции.ВидПродукции) Тогда
					
					ГоденДоСовпадает = СвойстваВидаПродукции.ПроверитьСрокГодности
						И СвойствоСтрокСовпадает(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции, "ГоденДо");
					
					ИдентификаторСовпадает = СвойстваВидаПродукции.ПроверитьИдентификаторПроисхожденияВЕТИС
						И СвойстваВидаПродукции.ПрисутствуютВДанныхДокумента
						И СвойствоСтрокСовпадает(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции, "ИдентификаторПроисхожденияВЕТИС");
					
					ВесСвойствВидаПродукцииСтроки = ?(ГоденДоСовпадает,       1, 0)
					                              + ?(ИдентификаторСовпадает, 1, 0);
					
				Иначе
					
					ВесСвойствВидаПродукцииСтроки = ?(СвойстваВидаПродукцииСовпадают, 1, 0);
					
				КонецЕсли;
				
				ВесаСтрок[СтрокаМаркируемойПродукции] = ВесСвойствВидаПродукцииСтроки
					+ ?(GTINСовпадают,                  1, 0)
					+ ?(ХарактеристикаСтрокСовпадает,   1, 0)
					+ ?(СерияСтрокСовпадает,            1, 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиДляАнализаИРаспределения.Количество() = 0 Тогда
		
		Если СтрокаАгрегаторЧастичноеСовпадение = Неопределено Тогда
			Возврат СтрокаАгрегаторПолноеСовпадение;
		КонецЕсли;
		Возврат СтрокаАгрегаторЧастичноеСовпадение;
		
	КонецЕсли;
	
	СтрокаРезультата = Неопределено;
	
	Для Каждого СтрокаМаркируемойПродукции Из СтрокиДляАнализаИРаспределения Цикл
		
		Если ЭтоСтрокаАгрегаторСКодамиGTIN(СтрокаМаркируемойПродукции, Ложь) Тогда
			
			Если СтрокаРезультата = Неопределено
				Или ВесаСтрок[СтрокаМаркируемойПродукции] > ВесаСтрок[СтрокаРезультата] Тогда
				СтрокаРезультата = СтрокаМаркируемойПродукции;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаРезультата = Неопределено И Не СвойстваВидаПродукции.РежимПодбораСуществующихУпаковок Тогда
		
		Для Каждого СтрокаМаркируемойПродукции Из СтрокиДляАнализаИРаспределения Цикл
			
			Если ЭтоСтрокаАгрегаторСКодамиGTIN(СтрокаМаркируемойПродукции) И СтрокаМаркируемойПродукции.КоличествоПодобрано = 0 Тогда
				
				Если СтрокаРезультата = Неопределено
					Или ВесаСтрок[СтрокаМаркируемойПродукции] > ВесаСтрок[СтрокаРезультата] Тогда
					СтрокаРезультата = СтрокаМаркируемойПродукции;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаРезультата;
	
КонецФункции

Функция ПредставлениеМассиваGTIN(КодыGTIN) Экспорт
	
	Если КодыGTIN.Количество() = 1 Тогда
		Возврат КодыGTIN[0].Значение;
	ИначеЕсли КодыGTIN.Количество() > 1 Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 ( + еще %2)'"),
			КодыGTIN[0].Значение, КодыGTIN.Количество() - 1);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ЭтоСтрокаАгрегаторСКодамиGTIN(СтрокаМаркируемойПродукции, GTINМожетБытьЗаполненЕслиДляНоменклатурыПредусмотреноНесколькоGTIN = Истина)
	
	GTIN     = СтрокаМаркируемойПродукции.GTIN;
	КодыGTIN = СтрокаМаркируемойПродукции.КодыGTIN;
	
	Если КодыGTIN.Количество() = 0 Тогда
		Возврат Не ЗначениеЗаполнено(GTIN);
	КонецЕсли;
	
	ПредставлениеGTIN = СтрокаМаркируемойПродукции.ПредставлениеGTIN;
	Если ПредставлениеGTIN <> ПредставлениеМассиваGTIN(КодыGTIN) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КодыGTIN.Количество() > 1 Тогда
		
		Если Не ЗначениеЗаполнено(GTIN) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если GTINМожетБытьЗаполненЕслиДляНоменклатурыПредусмотреноНесколькоGTIN Тогда
			
			Для Каждого Строка Из КодыGTIN Цикл
				Если GTINРавны(GTIN, Строка.Значение) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(GTIN) И GTINРавны(GTIN, КодыGTIN[0].Значение);
	
КонецФункции

Функция СвойстваВидаПродукцииСовпадают(ИсходнаяСтрока, СтрокаИзменений, СвойстваВидаПродукции, ПолноеСовпадение = Истина)
	
	Если Не СвойстваВидаПродукции.ПроверятьСвойстваВидаПродукции Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		
		Возврат СвойствоСтрокСовпадает(ИсходнаяСтрока, СтрокаИзменений, "МРЦ", ПолноеСовпадение);
		
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(СвойстваВидаПродукции.ВидПродукции) Тогда
		
		Если СвойстваВидаПродукции.ПроверитьСрокГодности Тогда
			
			Если Не СвойствоСтрокСовпадает(ИсходнаяСтрока, СтрокаИзменений, "ГоденДо", ПолноеСовпадение) Тогда
				Возврат Ложь;
			ИначеЕсли ИсходнаяСтрока.СкоропортящаясяПродукция <> СтрокаИзменений.СкоропортящаясяПродукция Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СвойстваВидаПродукции.ПроверитьИдентификаторПроисхожденияВЕТИС
			И СвойстваВидаПродукции.ПрисутствуютВДанныхДокумента
			И Не СвойствоСтрокСовпадает(ИсходнаяСтрока, СтрокаИзменений, "ИдентификаторПроисхожденияВЕТИС", ПолноеСовпадение) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьСвойствоВключаетМРЦ(ВидПродукции, НоваяСтрока, СтрокаИсточника) Экспорт
	
	Если ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока.ВключаетМРЦ = (НоваяСтрока.МРЦ <> 0);
	
	Если НоваяСтрока.ВключаетМРЦ Или СтрокаИсточника.ДанныеРазбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаИсточника.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
		Или СтрокаИсточника.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
		
		НоваяСтрока.ВключаетМРЦ = СтрокаИсточника.ДанныеРазбора.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
			И СтрокаИсточника.ДанныеРазбора.СоставКодаМаркировки.ВключаетМРЦ;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СвойстваВидаПродукцииПоДаннымФормы(Форма)
	
	ВидПродукции = Форма.ВидМаркируемойПродукции;
	
	ПроверятьСвойстваВидаПродукции = Ложь;
	ПрисутствуютВДанныхДокумента   = Ложь;
	
	// Мерный товар
	ДопустимУчетМерныхТоваров          = Ложь;
	ЗапрашиватьКоличествоМерногоТовара = Ложь;
	
	СвойстваВидаПродукции = Новый Структура;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		
		Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
			ПроверятьСвойстваВидаПродукции = Истина;
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции) Тогда
		
		ПроверятьСвойстваВидаПродукции = Истина;
		ПрисутствуютВДанныхДокумента   = ТипЗнч(Форма.ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП");
		
		Если ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции) Тогда
			
			СвойстваВидаПродукции.Вставить("ПроверитьСрокГодности",                    Форма.ПараметрыСканирования.ЗаполнятьСрокГодности);
			СвойстваВидаПродукции.Вставить("ПроверитьИдентификаторПроисхожденияВЕТИС", Форма.ПараметрыСканирования.ЗаполнятьДанныеВЕТИС);
			
		КонецЕсли;
		
		ДопустимУчетМерныхТоваров          = Форма.ДопустимУчетМерныхТоваров;
		ЗапрашиватьКоличествоМерногоТовара = Форма.ПараметрыПроверкиКодовМаркировки.ЗапрашиватьКоличествоМерногоТовара;
		
	КонецЕсли;
	
	СвойстваВидаПродукции.Вставить("ВидПродукции",                   ВидПродукции);
	СвойстваВидаПродукции.Вставить("ПроверятьСвойстваВидаПродукции", ПроверятьСвойстваВидаПродукции);
	СвойстваВидаПродукции.Вставить("ПрисутствуютВДанныхДокумента",   ПрисутствуютВДанныхДокумента);
	
	СвойстваВидаПродукции.Вставить("ОтдельноеПолеКоличестваКодов",       Форма.ДопустимаПроизвольнаяЕдиницаУчета);
	СвойстваВидаПродукции.Вставить("ДопустимУчетМерныхТоваров",          ДопустимУчетМерныхТоваров);
	СвойстваВидаПродукции.Вставить("ЗапрашиватьКоличествоМерногоТовара", ЗапрашиватьКоличествоМерногоТовара);
	
	СвойстваВидаПродукции.Вставить("РежимПодбораСуществующихУпаковок", Форма.РежимПодбораСуществующихУпаковок);
	
	Возврат СвойстваВидаПродукции;
	
КонецФункции

Процедура ОбработатьИзменениеНоменклатурыВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста, КэшированныеЗначения)
	Если ТипЗнч(Форма) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	МодульКонтекста.ОбработатьИзменениеНоменклатурыВСтроке(Форма, СтрокаАгрегатор, КэшированныеЗначения);
КонецПроцедуры

Процедура ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста, КэшированныеЗначения)
	Если ТипЗнч(Форма) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	МодульКонтекста.ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, КэшированныеЗначения);
КонецПроцедуры

Функция СтрокиПоДокументуДляАгрегатора(ПродукцияПоДокументу, СтрокаАгрегатор, СвойстваВидаПродукции)
	
	СтрокиПоДокументу = Новый Массив;
	Для Каждого СтрокаПоДокументу Из ПродукцияПоДокументу Цикл
		Если НоменклатурыСтрокСовпадают(СтрокаАгрегатор, СтрокаПоДокументу, Ложь)
			И СвойстваВидаПродукцииСовпадают(СтрокаАгрегатор, СтрокаПоДокументу, СвойстваВидаПродукции, Ложь) Тогда
			СтрокиПоДокументу.Добавить(СтрокаПоДокументу);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиПоДокументу.Количество() = 0 Тогда
		Возврат Новый Структура("СтрокиПоДокументу, ВесаСтрок",
			СтрокиПоДокументу, Новый Соответствие);
	КонецЕсли;
	
	ВесаСтрок               = Новый Соответствие;
	СтрокиПоВозростаниюВеса = Новый Массив;
	
	Для Каждого СтрокаПоДокументу Из СтрокиПоДокументу Цикл
		
		СвойстваВидаПродукцииСовпадают = СвойстваВидаПродукцииСовпадают(СтрокаАгрегатор, СтрокаПоДокументу, СвойстваВидаПродукции);
		ХарактеристикаСтрокСовпадает   = СвойствоСтрокСовпадает(СтрокаАгрегатор, СтрокаПоДокументу, "Характеристика");
		СерияСтрокСовпадает            = СвойствоСтрокСовпадает(СтрокаАгрегатор, СтрокаПоДокументу, "Серия");
		
		Если ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(СвойстваВидаПродукции.ВидПродукции) Тогда
			
			ГоденДоСовпадает = СвойстваВидаПродукции.ПроверитьСрокГодности
				И СвойствоСтрокСовпадает(СтрокаАгрегатор, СтрокаПоДокументу, "ГоденДо");
			
			ИдентификаторСовпадает = СвойстваВидаПродукции.ПроверитьИдентификаторПроисхожденияВЕТИС
				И СвойстваВидаПродукции.ПрисутствуютВДанныхДокумента
				И СвойствоСтрокСовпадает(СтрокаАгрегатор, СтрокаПоДокументу, "ИдентификаторПроисхожденияВЕТИС");
			
			ВесСвойствВидаПродукцииСтроки = ?(ГоденДоСовпадает,       1, 0)
			                              + ?(ИдентификаторСовпадает, 1, 0);
			
		Иначе
			
			ВесСвойствВидаПродукцииСтроки = ?(СвойстваВидаПродукцииСовпадают, 1, 0);
			
		КонецЕсли;
		
		ВесХарактеристики = ?(ХарактеристикаСтрокСовпадает,   1, 0);
		ВесСерии          = ?(СерияСтрокСовпадает,            1, 0);
		
		ВесСтроки = ВесСвойствВидаПродукцииСтроки
			+ ВесХарактеристики
			+ ВесСерии;
		
		ОписаниеВесов = Новый Структура();
		ОписаниеВесов.Вставить("ВесСвойствВидаПродукцииСтроки", ВесСвойствВидаПродукцииСтроки);
		ОписаниеВесов.Вставить("ВесХарактеристики",             ВесХарактеристики);
		ОписаниеВесов.Вставить("ВесСерии",                      ВесСерии);
		ОписаниеВесов.Вставить("ВесСтроки",                     ВесСтроки);
		
		СтрокиПоВозростаниюВеса.Добавить(СтрокаПоДокументу);
		
		ВесаСтрок[СтрокаПоДокументу] = ОписаниеВесов;
		
	КонецЦикла;
	
	Сч = СтрокиПоВозростаниюВеса.ВГраница();
	Пока Сч > 0 Цикл
		Для ТекущийИндекс = 0 По Сч - 1 Цикл
			ОписаниеВесов1 = ВесаСтрок[СтрокиПоВозростаниюВеса[ТекущийИндекс]];
			ОписаниеВесов2 = ВесаСтрок[СтрокиПоВозростаниюВеса[ТекущийИндекс + 1]];
			Если ОписаниеВесов1.ВесСтроки > ОписаниеВесов2.ВесСтроки
				Или ОписаниеВесов1.ВесСтроки = ОписаниеВесов2.ВесСтроки
				И ОписаниеВесов1.ВесСвойствВидаПродукцииСтроки > ОписаниеВесов2.ВесСвойствВидаПродукцииСтроки Тогда
				Строка = СтрокиПоВозростаниюВеса[ТекущийИндекс + 1];
				СтрокиПоВозростаниюВеса[ТекущийИндекс + 1] = СтрокиПоВозростаниюВеса[ТекущийИндекс];
				СтрокиПоВозростаниюВеса[ТекущийИндекс]     = Строка;
			КонецЕсли;
		КонецЦикла;
		Сч = Сч - 1;
	КонецЦикла;
	
	Возврат Новый Структура("СтрокиПоДокументу, ВесаСтрок",
		СтрокиПоВозростаниюВеса, ВесаСтрок);
	
КонецФункции

Функция ДанныеРаспределенияСтрокиАгрегатораПоДаннымДокумента(Форма, МодульКонтекста, СтрокаАгрегатор, СвойстваВидаПродукции)
	
	ДанныеПоАгрегатору = СтрокиПоДокументуДляАгрегатора(Форма.ПродукцияПоДокументу, СтрокаАгрегатор, СвойстваВидаПродукции);
	
	Если ДанныеПоАгрегатору.СтрокиПоДокументу.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДанныеПоАгрегаторам = Новый Соответствие;
	ДанныеПоАгрегаторам[СтрокаАгрегатор] = ДанныеПоАгрегатору;
	
	ПодобраннаяМаркируемаяПродукция = Форма.ПодобраннаяМаркируемаяПродукция;
	
	ПодобраннаяМаркируемаяПродукцияПоНоменклатуре = ПодобраннаяМаркируемаяПродукция.НайтиСтроки(
		Новый Структура("Номенклатура", СтрокаАгрегатор.Номенклатура));
	
	СопоставленныеСтроки           = Новый Соответствие;
	СопоставленныеСтрокиКоличество = Новый Соответствие;
	КоличествоОстатокПоСтроке      = Новый Соответствие;
	Для Каждого СтрокаМаркируемойПродукции Из ПодобраннаяМаркируемаяПродукцияПоНоменклатуре Цикл
		
		Если СтрокаМаркируемойПродукции.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПоАгрегатору = ДанныеПоАгрегаторам[СтрокаМаркируемойПродукции];
		Если ДанныеПоАгрегатору = Неопределено Тогда
			ДанныеПоАгрегатору = СтрокиПоДокументуДляАгрегатора(Форма.ПродукцияПоДокументу, СтрокаМаркируемойПродукции, СвойстваВидаПродукции);
			ДанныеПоАгрегаторам[СтрокаМаркируемойПродукции] = ДанныеПоАгрегатору;
		КонецЕсли;
		
		Для Каждого СтрокаПоДокументу Из ДанныеПоАгрегатору.СтрокиПоДокументу Цикл
			
			Если СтрокаПоДокументу.Количество > 0
				И НоменклатурыСтрокСовпадают(СтрокаМаркируемойПродукции, СтрокаПоДокументу)
				И СвойстваВидаПродукцииСовпадают(СтрокаМаркируемойПродукции, СтрокаПоДокументу, СвойстваВидаПродукции)
				И ЭтоСтрокаАгрегаторСКодамиGTIN(СтрокаМаркируемойПродукции, Ложь) Тогда
				
				Если КоличествоОстатокПоСтроке[СтрокаПоДокументу] = Неопределено Тогда
					КоличествоОстатокПоСтроке[СтрокаПоДокументу] = СтрокаПоДокументу.Количество;
				КонецЕсли;
				КоличествоОстаток = КоличествоОстатокПоСтроке[СтрокаПоДокументу];
				
				КоличествоКИзменению = Мин(СтрокаМаркируемойПродукции.Количество, КоличествоОстаток);
				
				КоличествоОстатокПоСтроке[СтрокаПоДокументу] = КоличествоОстаток - КоличествоКИзменению;
				
				СопоставленныеСтроки[СтрокаМаркируемойПродукции]  = СтрокаПоДокументу;
				СопоставленныеСтроки[СтрокаПоДокументу]           = СтрокаМаркируемойПродукции;
				СопоставленныеСтрокиКоличество[СтрокаПоДокументу] = КоличествоКИзменению;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	КоллекцияСтрокАгрегата          = Новый Массив;
	КоличествоПоСтрокеДляАгрегатора = Новый Соответствие;
	
	Для Каждого СтрокаМаркируемойПродукции Из ПодобраннаяМаркируемаяПродукцияПоНоменклатуре Цикл
		
		Если СтрокаМаркируемойПродукции.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоКРаспределению = СтрокаМаркируемойПродукции.Количество;
		
		ЭтоСтрокаАгрегатор = (СтрокаМаркируемойПродукции = СтрокаАгрегатор);
		
		ОсновнаяСтрокаПоДокументу = СопоставленныеСтроки[СтрокаМаркируемойПродукции];
		Если ОсновнаяСтрокаПоДокументу <> Неопределено Тогда
			КоличествоКИзменению = СопоставленныеСтрокиКоличество[ОсновнаяСтрокаПоДокументу];
			КоличествоКРаспределению = КоличествоКРаспределению - КоличествоКИзменению;
			Если ЭтоСтрокаАгрегатор Тогда
				КоллекцияСтрокАгрегата.Добавить(ОсновнаяСтрокаПоДокументу);
				КоличествоПоСтрокеДляАгрегатора[ОсновнаяСтрокаПоДокументу] = КоличествоКИзменению;
			КонецЕсли;
		КонецЕсли;
		
		Если КоличествоКРаспределению > 0 Тогда
			
			ДанныеПоАгрегатору = ДанныеПоАгрегаторам[СтрокаМаркируемойПродукции];
			
			ТекущийИндекс = ДанныеПоАгрегатору.СтрокиПоДокументу.ВГраница();
			Пока ТекущийИндекс >= 0 Цикл
				
				СтрокаПоДокументу = ДанныеПоАгрегатору.СтрокиПоДокументу[ТекущийИндекс];
				
				ТекущийИндекс = ТекущийИндекс - 1;
				
				Если КоличествоКРаспределению = 0 Тогда
					Прервать;
				ИначеЕсли ОсновнаяСтрокаПоДокументу = СтрокаПоДокументу Тогда
					Продолжить;
				КонецЕсли;
				
				Если КоличествоОстатокПоСтроке[СтрокаПоДокументу] = Неопределено Тогда
					КоличествоОстатокПоСтроке[СтрокаПоДокументу] = СтрокаПоДокументу.Количество;
				КонецЕсли;
				
				КоличествоОстаток = КоличествоОстатокПоСтроке[СтрокаПоДокументу];
				Если КоличествоОстаток = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоКИзменению = Мин(КоличествоКРаспределению, КоличествоОстаток);
				
				КоличествоОстатокПоСтроке[СтрокаПоДокументу] = КоличествоОстаток        - КоличествоКИзменению;
				КоличествоКРаспределению                     = КоличествоКРаспределению - КоличествоКИзменению;
				
				Если ЭтоСтрокаАгрегатор Тогда
					КоллекцияСтрокАгрегата.Добавить(СтрокаПоДокументу);
					КоличествоПоСтрокеДляАгрегатора[СтрокаПоДокументу] = КоличествоКИзменению;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЭтоСтрокаАгрегатор Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИтоговоеКоличествоКРаспределению = СтрокаАгрегатор.Количество - СтрокаАгрегатор.КоличествоПодобрано;
	ОсновнаяСтрокаПоДокументу = СопоставленныеСтроки[СтрокаМаркируемойПродукции];
	Если ОсновнаяСтрокаПоДокументу <> Неопределено Тогда
		Если ОсновнаяСтрокаПоДокументу.Количество > СтрокаАгрегатор.КоличествоПодобрано Тогда
			ИтоговоеКоличествоКРаспределению = СтрокаАгрегатор.Количество - ОсновнаяСтрокаПоДокументу.Количество;
		КонецЕсли;
	КонецЕсли;
	
	ДоступныеСтрокиРаспределения = Новый Массив;
	ДоступноеКоличествоПоСтроке  = Новый Соответствие;
	
	КоличествоКРаспределению = ИтоговоеКоличествоКРаспределению;
	
	ТекущийИндекс = КоллекцияСтрокАгрегата.ВГраница();
	Пока ТекущийИндекс >= 0 Цикл
		
		СтрокаПоДокументу = КоллекцияСтрокАгрегата[ТекущийИндекс];
		
		КоличествоОстаток = КоличествоПоСтрокеДляАгрегатора[СтрокаПоДокументу];
		
		КоличествоКИзменению = Мин(КоличествоКРаспределению, КоличествоОстаток);
		
		КоличествоКРаспределению = КоличествоКРаспределению - КоличествоКИзменению;
		
		ДоступныеСтрокиРаспределения.Добавить(СтрокаПоДокументу);
		ДоступноеКоличествоПоСтроке[СтрокаПоДокументу] = КоличествоКИзменению;
		
		Если КоличествоКРаспределению = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ТекущийИндекс = ТекущийИндекс - 1;
		
	КонецЦикла;
	
	КоличествоКРаспределению = ИтоговоеКоличествоКРаспределению - КоличествоКРаспределению;
	
	Результат = Новый Структура;
	Результат.Вставить("ДоступныеСтрокиРаспределения", ДоступныеСтрокиРаспределения);
	Результат.Вставить("ДоступноеКоличествоПоСтроке",  ДоступноеКоличествоПоСтроке);
	Результат.Вставить("КоличествоКРаспределению",     КоличествоКРаспределению);
	Результат.Вставить("СопоставленныеСтроки",         СопоставленныеСтроки);
	
	Возврат Результат;
	
КонецФункции

Процедура РаспределитьСвободныйОстатокПоСтрокамПодобраннойПродукции(Форма, МодульКонтекста, СтрокаАгрегатор, СвойстваВидаПродукции, ДанныеРаспределения, КэшированныеЗначения)
	
	КоличествоКРаспределению = ДанныеРаспределения.КоличествоКРаспределению;
	
	Если КоличествоКРаспределению <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодобраннаяМаркируемаяПродукция = Форма.ПодобраннаяМаркируемаяПродукция;
	ДоступныеСтрокиРаспределения    = ДанныеРаспределения.ДоступныеСтрокиРаспределения;
	ДоступноеКоличествоПоСтроке     = ДанныеРаспределения.ДоступноеКоличествоПоСтроке;
	
	Для Каждого СтрокаМаркируемойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
		
		Если КоличествоКРаспределению = 0 Тогда
			Прервать;
		ИначеЕсли СтрокаМаркируемойПродукции.Количество >= СтрокаМаркируемойПродукции.КоличествоПодобрано Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПоАгрегатору = СтрокиПоДокументуДляАгрегатора(ДоступныеСтрокиРаспределения, СтрокаМаркируемойПродукции, СвойстваВидаПродукции);
		
		ТекущийИндекс = ДанныеПоАгрегатору.СтрокиПоДокументу.ВГраница();
		Пока (ТекущийИндекс >= 0 И КоличествоКРаспределению > 0) Цикл
			
			СтрокаПоДокументу = ДанныеПоАгрегатору.СтрокиПоДокументу[ТекущийИндекс];
			
			ТекущийИндекс = ТекущийИндекс - 1;
			
			КоличествоКИзменению = Мин(КоличествоКРаспределению, ДоступноеКоличествоПоСтроке[СтрокаПоДокументу]);
			Если КоличествоКИзменению = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоКИзменению = Мин(КоличествоКИзменению, (СтрокаМаркируемойПродукции.КоличествоПодобрано - СтрокаМаркируемойПродукции.Количество));
			
			ДоступноеКоличествоПоСтроке[СтрокаПоДокументу] = ДоступноеКоличествоПоСтроке[СтрокаПоДокументу] - КоличествоКИзменению;
			
			СтрокаМаркируемойПродукции.Количество = СтрокаМаркируемойПродукции.Количество + КоличествоКИзменению;
			
			КоличествоКРаспределению = КоличествоКРаспределению - КоличествоКИзменению;
			
			СтрокаАгрегатор.Количество = СтрокаАгрегатор.Количество - КоличествоКИзменению;
			
			ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаМаркируемойПродукции, МодульКонтекста, КэшированныеЗначения);
			УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаМаркируемойПродукции, СвойстваВидаПродукции);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеРаспределения.КоличествоКРаспределению = КоличествоКРаспределению;
	
КонецПроцедуры

Процедура СоздатьСтрокиПодобраннойПродукцииПоСвободномуОстатку(Форма, МодульКонтекста, СтрокаАгрегатор, СвойстваВидаПродукции, ДанныеРаспределения, КэшированныеЗначения)
	
	КоличествоКРаспределению = ДанныеРаспределения.КоличествоКРаспределению;
	
	Если КоличествоКРаспределению <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодобраннаяМаркируемаяПродукция = Форма.ПодобраннаяМаркируемаяПродукция;
	ДоступныеСтрокиРаспределения    = ДанныеРаспределения.ДоступныеСтрокиРаспределения;
	ДоступноеКоличествоПоСтроке     = ДанныеРаспределения.ДоступноеКоличествоПоСтроке;
	СопоставленныеСтроки            = ДанныеРаспределения.СопоставленныеСтроки;
	
	Для Каждого СтрокаПоДокументу Из ДоступныеСтрокиРаспределения Цикл
		
		Если КоличествоКРаспределению = 0 Тогда
			Прервать;
		КонецЕсли;
		
		КоличествоКИзменению = Мин(КоличествоКРаспределению, ДоступноеКоличествоПоСтроке[СтрокаПоДокументу]);
		
		Если КоличествоКИзменению = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДоступноеКоличествоПоСтроке[СтрокаПоДокументу] = ДоступноеКоличествоПоСтроке[СтрокаПоДокументу] - КоличествоКИзменению;
		
		ИндексВставки = 0;
		
		СтрокаМаркируемойПродукции = СопоставленныеСтроки[СтрокаПоДокументу];
		Если СтрокаМаркируемойПродукции = Неопределено Или СтрокаМаркируемойПродукции = СтрокаАгрегатор Тогда
			
			СтрокаМаркируемойПродукции = ПодобраннаяМаркируемаяПродукция.Вставить(ИндексВставки);
			ЗаполнитьЗначенияСвойств(СтрокаМаркируемойПродукции, СтрокаПоДокументу);
			СтрокаМаркируемойПродукции.НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаМаркируемойПродукции.Номенклатура);
			СтрокаМаркируемойПродукции.Количество               = 0;
			СтрокаМаркируемойПродукции.КоличествоИС             = 0;
			СтрокаМаркируемойПродукции.КоличествоПодобрано      = 0;
			
			ЗначениеGTIN = "";
			Если СтрокаМаркируемойПродукции.КодыGTIN.Количество() = 1 Тогда
				ЗначениеGTIN = СтрокаМаркируемойПродукции.КодыGTIN[0].Значение;
			КонецЕсли;
			
			СтрокаМаркируемойПродукции.GTIN              = ЗначениеGTIN;
			СтрокаМаркируемойПродукции.ПредставлениеGTIN = ПредставлениеМассиваGTIN(СтрокаМаркируемойПродукции.КодыGTIN);
			
			ОбработатьИзменениеНоменклатурыВСтроке(Форма, СтрокаМаркируемойПродукции, МодульКонтекста, КэшированныеЗначения);
			
		КонецЕсли;
		
		СтрокаМаркируемойПродукции.Количество = СтрокаМаркируемойПродукции.Количество + КоличествоКИзменению;
		СтрокаАгрегатор.Количество            = СтрокаАгрегатор.Количество            - КоличествоКИзменению;
		
		КоличествоКРаспределению = КоличествоКРаспределению - КоличествоКИзменению;
		
		ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаМаркируемойПродукции, МодульКонтекста, КэшированныеЗначения);
		УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаМаркируемойПродукции, СвойстваВидаПродукции);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиДопустимыйСвободныйОстатокНаСтрокуАгрегатор(Форма, СтрокаИзменений, МодульКонтекста, СтрокаАгрегаторИсточник, СтрокаАгрегатор, СвойстваВидаПродукции, Знач ИзменениеКоличества, ДополнительныеПараметры = Неопределено, КэшированныеЗначения)
	
	ПодобраннаяМаркируемаяПродукция = Форма.ПодобраннаяМаркируемаяПродукция;
	
	УточнитьКоличествоИС = ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("УточнитьКоличествоИС")
		И ДополнительныеПараметры.УточнитьКоличествоИС;
	
	ДобавляемоеКоличество = 0;
	
	ДобавляемоеКоличествоИС = 0;
	Если УточнитьКоличествоИС Тогда
		ДобавляемоеКоличествоИС = ИзменениеКоличества;
	КонецЕсли;
	
	ДоступноеКоличество = 0;
	Если СтрокаАгрегатор.Количество > СтрокаАгрегатор.КоличествоПодобрано Тогда
		ДоступноеКоличество = СтрокаАгрегатор.Количество - СтрокаАгрегатор.КоличествоПодобрано;
	КонецЕсли;
	ДоступноеКоличество = Мин(ДоступноеКоличество, ИзменениеКоличества);
	
	Если ДоступноеКоличество < ИзменениеКоличества Тогда
		
		КоличествоКРаспределению = ИзменениеКоличества - ДоступноеКоличество;
		
		Если Форма.РежимПодбораСуществующихУпаковок Или УточнитьКоличествоИС Тогда
			
			КоличествоКРаспределениюИС = 0;
			
		Иначе
			
			ДоступноеКоличествоИС = 0;
			Если СтрокаАгрегатор.КоличествоИС > СтрокаАгрегатор.КоличествоПодобрано Тогда
				ДоступноеКоличествоИС = СтрокаАгрегатор.КоличествоИС - СтрокаАгрегатор.КоличествоПодобрано;
			КонецЕсли;
			ДоступноеКоличествоИС = Мин(ДоступноеКоличествоИС, ИзменениеКоличества);
			
			КоличествоКРаспределениюИС = ИзменениеКоличества - ДоступноеКоличествоИС;
			
		КонецЕсли;
		
		Пока Не (СтрокаАгрегаторИсточник = Неопределено Или СтрокаАгрегаторИсточник = СтрокаАгрегатор Или КоличествоКРаспределению = 0) Цикл
			
			ТекущееКоличество   = Мин(СтрокаАгрегаторИсточник.Количество,   КоличествоКРаспределению);
			ТекущееКоличествоИС = Мин(СтрокаАгрегаторИсточник.КоличествоИС, КоличествоКРаспределениюИС);
			
			СтрокаАгрегаторИсточник.Количество   = СтрокаАгрегаторИсточник.Количество   - ТекущееКоличество;
			СтрокаАгрегаторИсточник.КоличествоИС = СтрокаАгрегаторИсточник.КоличествоИС - ТекущееКоличествоИС;
			
			Если СтрокаАгрегаторИсточник.Количество = 0 И СтрокаАгрегаторИсточник.КоличествоПодобрано = 0 Тогда
				ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегаторИсточник);
			Иначе
				ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегаторИсточник, МодульКонтекста, КэшированныеЗначения);
				УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегаторИсточник, СвойстваВидаПродукции);
			КонецЕсли;
			
			КоличествоКРаспределению   = КоличествоКРаспределению   - ТекущееКоличество;
			КоличествоКРаспределениюИС = КоличествоКРаспределениюИС - ТекущееКоличествоИС;
			
			ДобавляемоеКоличество    = ДобавляемоеКоличество    + ТекущееКоличество;
			ДобавляемоеКоличествоИС  = ДобавляемоеКоличествоИС  + ТекущееКоличествоИС;
			
			Если КоличествоКРаспределению > 0 Тогда
				СтрокаАгрегаторИсточник = СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаИзменений, СвойстваВидаПродукции, Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаАгрегатор.Количество          = СтрокаАгрегатор.Количество          + ДобавляемоеКоличество;
	СтрокаАгрегатор.КоличествоИС        = СтрокаАгрегатор.КоличествоИС        + ДобавляемоеКоличествоИС;
	СтрокаАгрегатор.КоличествоПодобрано = СтрокаАгрегатор.КоличествоПодобрано + ИзменениеКоличества;
	
	ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста, КэшированныеЗначения);
	УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор, СвойстваВидаПродукции);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
