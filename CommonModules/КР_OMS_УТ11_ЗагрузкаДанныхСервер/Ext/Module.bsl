
////////////////////////////////////////////////////
//// Общий модуль "КР_OMS_УТ11_ЗагрузкаДанныхСервер"
//// Создан: 24.11.2022, Федоров Д.Е., КРОК, JIRA№ A2105505-802
//// Разработка по ФДР С51.014 Интеграция системы OMS - УТ11

#Область ПрограммныйИнтерфейс

// Добавляет в настройки загрузки объекта новое правило
//
// Параметры:
//  ПараметрыЗагрузки - Массив - содержит структуры данных о  загрузке.
//
// Возвращамое значение:
//  Массив - параметры загрузки.
//
Функция ДобавитьНастройкиЗагрузкиОбъектов(ПараметрыЗагрузки) Экспорт
	
	НастройкаЗагрузки(ПараметрыЗагрузки, "OrderObject");

	Возврат ПараметрыЗагрузки; 
	
КонецФункции

#Область ПравилаЗагрузкиОбъектов

// Обработка пакета данных "Заказ клиента"
//
// Параметры:
//  СообщениеОбмена - Структура - входящее сообщение обмена.
//
Процедура ПЗО_OrderObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	ПКО_ДокументОбъект_ЗаказКлиента(ПакетДанных, СообщениеОбмена);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПравилаКонвертации

#Область Справочники

Функция ПКО_СправочникСсылка_Склады(ПакетДанных, СообщениеОбмена)
	
	СвойстваПакетаДанных =	ПакетДанных.Свойства();
	МетаданныеСправочника = Метаданные.Справочники.Склады;
	ТекстОшибки = "";
	ТипОшибки 
	= КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибкаПоискаСсылки(МетаданныеСправочника);
		
	СкладРезультат = Справочники.Склады.ПустаяСсылка();
	СпособПолученияСклада = ПакетДанных.Fullfilmend.ID;
	
	Если СпособПолученияСклада = "2" Тогда
		
		Если СвойстваПакетаДанных.Получить("Storage") <> Неопределено Тогда
			КодМагазина = ПакетДанных.Storage.TorgCode;
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Склады.Ссылка КАК Склад
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	НЕ Склады.ПометкаУдаления
			|	И Склады.Код = &КР_КодМагазина";
			
			Запрос.УстановитьПараметр("КР_КодМагазина", КодМагазина);
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				СкладРезультат = ВыборкаДетальныеЗаписи.Склад;
			Иначе
				ТекстОшибки = НСтр("ru = 'В пакете данных не заполнен склад.'");
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'В пакете данных не заполнен склад.'");
		КонецЕсли;
		
	ИначеЕсли СпособПолученияСклада = "3" Тогда
		
		СкладРезультат = КР_ДополнительныеНастройкиПовтИсп.СкладEsolutions();
		Если СкладРезультат = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнена дополнительная настройка ""Склад Esolutions"".'");
			СкладРезультат = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Неизвестный вариант поиска склада, Фулфилмент = %1.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, СпособПолученияСклада);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстОшибки, ТипОшибки);
	КонецЕсли;
	
	Возврат СкладРезультат;
	
КонецФункции

#КонецОбласти

#Область Документы

Процедура ПКО_ДокументОбъект_ЗаказКлиента(ПакетДанных, СообщениеОбмена)
	
	СозданиеДокументаНеТребуется = Ложь;
	ТекущийЗаказКлиента = ЗаказКлиентаДоступныйДляРедактирования(ПакетДанных, СообщениеОбмена, СозданиеДокументаНеТребуется);
	Если СозданиеДокументаНеТребуется Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийЗаказКлиента) Тогда
		ЗаказОбъект = ТекущийЗаказКлиента.ПолучитьОбъект();
	Иначе
		ЗаказОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
	КонецЕсли;
	
	ПКО_ДокументОбъект_ЗаказКлиента_ЗаполнитьШапку(ПакетДанных, СообщениеОбмена, ЗаказОбъект);
	
	#Область ТабличнаяЧастьТовары
	
	ТаблицаТовары = ПакетДанных.Items.Row;
	ТЧТовары = ЗаказОбъект.Товары;
	ТЧТовары.Очистить();
	
	// Заполним массив штрихкодов, чтобы получить данные по номенклатуре одним запросом
	МассивШтрихкодов = МассивШтрихкодов(ТаблицаТовары);
	
	// Получим данные для всех строк штрихкодов пакета
	ДанныеНоменклатуры 								= ДанныеПоШтрихкодуНоменклатуры(МассивШтрихкодов);
	ИтоговаяСуммаДокумента							= 0;
	
	Для Каждого СтрокаПакета Из ТаблицаТовары Цикл
		
		// Найдем данные текущей строки в ТЗ "Данные номенклатуры"
		ПараметрыПоиска = Новый Структура("Штрихкод", СтрокаПакета.Barcode);
		МассивСтрок = ДанныеНоменклатуры.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрок.Количество() = 0 Тогда
			МетаданныеСправочника					= Метаданные.Справочники.Номенклатура;
			ТекстОшибки 							= НСтр("ru='Не найдены данные номенклатуры по штрихкоду %1.'");
			ТекстОшибки								= СтрШаблон(ТекстОшибки, СтрокаПакета.Barcode);
			ТипОшибки								
			= КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибкаПоискаСсылки(МетаданныеСправочника);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстОшибки, ТипОшибки);
			Продолжить;
		Иначе
			ДанныеТекущейСтроки = МассивСтрок[0];
		КонецЕсли;
		
		СтрокаТовары								= ТЧТовары.Добавить();
		СтрокаТовары.ИдентификаторСтроки 			= Строка(Новый УникальныйИдентификатор);
		СтрокаТовары.ДатаОтгрузки					= ПакетДанных.DateCreate;
		СтрокаТовары.Номенклатура					= ДанныеТекущейСтроки.Номенклатура;
		СтрокаТовары.Характеристика					= ДанныеТекущейСтроки.Характеристика;
		СтрокаТовары.Упаковка						= ДанныеТекущейСтроки.Упаковка;
		СтрокаТовары.Количество						= 1; // В OMS формируется отдельная строка для каждого товара
		СтрокаТовары.КоличествоУпаковок				= 1;
		СтрокаТовары.Цена							= СтрокаПакета.ItemPrice;
		СтрокаТовары.СуммаРучнойСкидки				= СтрокаПакета.ItemPrice - СтрокаПакета.Price;
		СтрокаТовары.Сумма							= СтрокаТовары.Цена - СтрокаТовары.СуммаРучнойСкидки;
		Если СтрокаПакета.ItemPrice <> 0 Тогда
			СтоПроцентов							= 100;
			СтрокаТовары.ПроцентРучнойСкидки		= Окр(СтрокаТовары.СуммаРучнойСкидки / СтрокаТовары.Цена * СтоПроцентов, 2);
		КонецЕсли;
		СтрокаТовары.Склад							= ЗаказОбъект.Склад;
		СтрокаТовары.ВариантОбеспечения				= Перечисления.ВариантыОбеспечения.Отгрузить;
		СтрокаТовары.СтавкаНДС						= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.Номенклатура, "СтавкаНДС");
		
		СтруктураПересчетаНДС						= Новый Структура("ЦенаВключаетНДС", ЗаказОбъект.ЦенаВключаетНДС);
		СтруктураДействий							= Новый Структура("ПересчитатьСуммуНДС, ПересчитатьСуммуСНДС",
														СтруктураПересчетаНДС, СтруктураПересчетаНДС);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовары, СтруктураДействий, Неопределено);
		
		СтатусОтменен								= СтрокаПакета.OrderItemState.ID;
		СтрокаТовары.Отменено						= (СтатусОтменен = "3") ИЛИ (СтатусОтменен = "5");
		// << 06.03.2023,  Федоров Д.Е.,  КРОК, A2105505-1358
		// При расчете итоговой суммы документа учитываем даже отменнные строки, т.к. на стороне OMS
		// в реквизите "Price" лежит сумма документа по всем строкам (включая отменнные)
		// >> 06.03.2023,  Федоров Д.Е.,  КРОК, A2105505-1358
		ИтоговаяСуммаДокумента					= ИтоговаяСуммаДокумента + СтрокаТовары.СуммаСНДС;
		
	КонецЦикла;

	#КонецОбласти
	
	#Область ПроверкаИтоговойСуммы
	
	СуммаДокументаПоДаннымПакета					= ПакетДанных.Price;
	Если СуммаДокументаПоДаннымПакета <> ИтоговаяСуммаДокумента Тогда
		ТекущиеМетаданные							= Метаданные.Документы.ЗаказКлиента;
		ТекстОшибки 								= НСтр("ru='Итоговая сумма по документу %1 отличается от суммы в пакете данных %2.'");
		ТекстОшибки									= СтрШаблон(ТекстОшибки, ИтоговаяСуммаДокумента, СуммаДокументаПоДаннымПакета);
		ТипОшибки
		= КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибкаПоискаСсылки(ТекущиеМетаданные);
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстОшибки, ТипОшибки);
	КонецЕсли;
	
	#КонецОбласти
	
	// << 27.05.2024 Петухов А.В., Фактор, #4133
	мсвСтатусЗакрыт = СтрРазделить("10,13,23,24",",",Ложь);
	ИдентификаторСтатусаЗаказа = ПакетДанных.OrderStateid.ID;
	Если мсвСтатусЗакрыт.Найти(ИдентификаторСтатусаЗаказа) <> Неопределено Тогда
		// << 28.06.2024 Петухов А.В., Фактор, #4334
		//Если Не ЗаказОбъект.УстановитьСтатус("Закрыт") Тогда				
		Если Не ЗаказОбъект.УстановитьСтатус("Закрыт", Неопределено) Тогда				
		// >> 28.06.2024 Петухов А.В., Фактор, #4334
			ТекущиеМетаданные							= Метаданные.Документы.ЗаказКлиента;
			ТекстОшибки 								= НСтр("ru='Не удалось установить статус Закрыт.'");
			ТипОшибки = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(ТекущиеМетаданные);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстОшибки, ТипОшибки);
		КонецЕсли;		
	КонецЕсли;
	// >> 27.05.2024 Петухов А.В., Фактор, #4133
	
	#Область ЗаписьПроведениеДокумента
	
	ЗаказОбъект.Проведен = Истина;
	КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(ЗаказОбъект, СообщениеОбмена);

	#КонецОбласти
	
КонецПроцедуры

Процедура ПКО_ДокументОбъект_ЗаказКлиента_ЗаполнитьШапку(ПакетДанных, СообщениеОбмена, ЗаказОбъект)
	
	ЗаказОбъект.КР_НомерЗаказаИнтернетМагазина		= ПакетДанных.OrderId;
	ЗаказОбъект.Дата								= ПакетДанных.DateCreate;
	ЗаказОбъект.КР_ДатаПоследнегоИзмененияOms		= ПакетДанных.LastChangeDate;
	ЗаказОбъект.КР_МиллисекундаПоследнегоИзмененияOms
													= ПакетДанных.LastChangeDateMS;
	ЗаказОбъект.Контрагент							= Справочники.Контрагенты.РозничныйПокупатель;
	ЗаказОбъект.Партнер								= Справочники.Партнеры.РозничныйПокупатель;
	ЗаказОбъект.Организация							= Справочники.Организации.ОрганизацияПоУмолчанию();
	// << 16.01.2023, Федоров Д.Е., КРОК, JIRA№ A2105505-802
	ЗаказОбъект.Соглашение							
		= КР_ДополнительныеНастройкиПовтИсп.Значение("ТиповоеСоглашениеДляРозничногоПокупателяИм", Ложь);
	// >> 16.01.2023, Федоров Д.Е., КРОК, JIRA№ A2105505-802
	Если Не ЗначениеЗаполнено(ЗаказОбъект.Соглашение) Тогда
		МетаданныеСправочника = Метаданные.Справочники.СоглашенияСКлиентами;
		ТекстОшибки
		= НСтр("ru='Не заполнена дополнительная настройка системы ""Типовое соглашение для розничного покупателя ИМ"".'");
		ТипОшибки 
		= КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибка(МетаданныеСправочника);
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстОшибки, ТипОшибки);
	КонецЕсли;
	ЗаказОбъект.Валюта								= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказОбъект.Соглашение, "Валюта");
	ЗаказОбъект.Склад								= ПКО_СправочникСсылка_Склады(ПакетДанных, СообщениеОбмена);
	РеквизитыСоглашенияСтрокой 						= "ЦенаВключаетНДС, Менеджер, ХозяйственнаяОперация, ПорядокРасчетов, ОплатаВВалюте";
	РеквизитыСоглашения 							
													= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказОбъект.Соглашение, РеквизитыСоглашенияСтрокой);
	ЗаполнитьЗначенияСвойств(ЗаказОбъект, РеквизитыСоглашения);
	ЗаказОбъект.Статус								= Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
	ЗаказОбъект.ДатаСогласования					= ПакетДанных.DateCreate;
	ЗаказОбъект.Согласован							= Истина;
	ЗаказОбъект.ДатаОтгрузки						= ПакетДанных.DateCreate;
	ЗаказОбъект.НалогообложениеНДС					= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ЗаказОбъект.Комментарий							= ПакетДанных.СlientMemo;
	ЗаказОбъект.Автор								= Пользователи.ТекущийПользователь();
	// В рамках ФДР приходится искать по наименованию
	ЗаказОбъект.Приоритет							= Справочники.Приоритеты.НайтиПоНаименованию("Средний");
	ЗаказОбъект.СпособДоставки						= Перечисления.СпособыДоставки.Самовывоз;
	// << 16.01.2023, Федоров Д.Е., КРОК, JIRA№ A2105505-802
	ЗаказОбъект.Подразделение						= КР_ДополнительныеНастройкиПовтИсп.Значение("ПодразделениеИм", Ложь);
	Если Не ЗначениеЗаполнено(ЗаказОбъект.Подразделение) Тогда
		МетаданныеСправочника = Метаданные.Справочники.СтруктураПредприятия;
		ТекстОшибки
		= НСтр("ru='Не заполнена дополнительная настройка системы ""Подразделение ИМ"".'");
		ТипОшибки 
		= КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибка(МетаданныеСправочника);
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстОшибки, ТипОшибки);
	КонецЕсли;
	// >> 16.01.2023, Федоров Д.Е., КРОК, JIRA№ A2105505-802
	// << 04.04.2023, Федоров Д.Е., КРОК, JIRA№ A2105505-1520
	ЗаказОбъект.СкидкиРассчитаны 					= Истина;
	// >> 04.04.2023, Федоров Д.Е., КРОК, JIRA№ A2105505-1520
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область НастройкиЗагрузкиОбъектов

Функция НастройкаЗагрузки(ПараметрыЗагрузки, ТипДанных)
	
	ШаблонПравилаЗагрузки = "КР_OMS_УТ11_ЗагрузкаДанныхСервер.ПЗО_%1";
	
	СтрокаЗагрузки = ПараметрыЗагрузки.Добавить();
	СтрокаЗагрузки.ТипДанных = ТипДанных;
	СтрокаЗагрузки.Отправитель = ""; // любой
	СтрокаЗагрузки.ОчередьОбмена = ""; // любой
	СтрокаЗагрузки.ПравилоЗагрузки = СтрШаблон(ШаблонПравилаЗагрузки, ТипДанных);
	СтрокаЗагрузки.ДополнительныеПараметры = Новый Структура;
	
	Возврат СтрокаЗагрузки;
	
КонецФункции

#КонецОбласти

#Область Алгоритмы

// << 24.04.2023 Федоров Д.Е., КРОК, JIRA№ A2105505-1583
Функция ЗаказКлиентаДоступныйДляРедактирования(ПакетДанных, СообщениеОбмена, СозданиеДокументаНеТребуется)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказКлиента.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.КР_ДатаПоследнегоИзмененияOms > &ДатаПоследнегоИзмененияOms
		|			ТОГДА ЛОЖЬ
		|		КОГДА ЗаказКлиента.КР_ДатаПоследнегоИзмененияOms < &ДатаПоследнегоИзмененияOms
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЗаказКлиента.КР_МиллисекундаПоследнегоИзмененияOms <= &МиллисекундаПоследнегоИзмененияOms
		|	КОНЕЦ КАК ЭтоБолееНоваяДатаИзменения,
		|	ЗаказКлиента.ПометкаУдаления КАК ПометкаУдаления,
		|	МИНИМУМ(ISNULL(ЗаказКлиентаТовары.Отменено, Истина)) КАК ВсеСтрокиОтменены,
		|	ЗаказКлиента.Проведен КАК Проведен,
		|	ЗаказКлиента.Номер КАК Номер
		|ПОМЕСТИТЬ Заказы
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ПО (ЗаказКлиентаТовары.Ссылка = ЗаказКлиента.Ссылка)
		|ГДЕ
		|	ЗаказКлиента.КР_НомерЗаказаИнтернетМагазина = &НомерЗаказаИнтернетМагазина
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиента.Ссылка,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.КР_ДатаПоследнегоИзмененияOms > &ДатаПоследнегоИзмененияOms
		|			ТОГДА ЛОЖЬ
		|		КОГДА ЗаказКлиента.КР_ДатаПоследнегоИзмененияOms < &ДатаПоследнегоИзмененияOms
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЗаказКлиента.КР_МиллисекундаПоследнегоИзмененияOms <= &МиллисекундаПоследнегоИзмененияOms
		|	КОНЕЦ,
		|	ЗаказКлиента.ПометкаУдаления,
		|	ЗаказКлиента.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказыКлиентовОстатки.КОформлениюОстаток КАК КОформлениюОстаток,
		|	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента
		|ПОМЕСТИТЬ ЗаказыКлиентовОстатки
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(
		|			,
		|			ЗаказКлиента В
		|				(ВЫБРАТЬ
		|					Заказы.Ссылка КАК Ссылка
		|				ИЗ
		|					Заказы КАК Заказы)) КАК ЗаказыКлиентовОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказКлиента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюОстаток, 0) КАК КОформлениюОстаток,
		|	Заказы.Ссылка КАК ЗаказКлиента,
		|	Заказы.ЭтоБолееНоваяДатаИзменения КАК ЭтоБолееНоваяДатаИзменения,
		|	Заказы.ПометкаУдаления КАК ПометкаУдаления,
		|	Заказы.ВсеСтрокиОтменены КАК ВсеСтрокиОтменены,
		|	Заказы.Проведен КАК Проведен,
		|	Заказы.Номер КАК Номер
		|ИЗ
		|	Заказы КАК Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыКлиентовОстатки КАК ЗаказыКлиентовОстатки
		|		ПО Заказы.Ссылка = ЗаказыКлиентовОстатки.ЗаказКлиента";
	
	Запрос.УстановитьПараметр("ДатаПоследнегоИзмененияOms",			ПакетДанных.LastChangeDate);
	Запрос.УстановитьПараметр("НомерЗаказаИнтернетМагазина",		ПакетДанных.OrderId);
	Запрос.УстановитьПараметр("МиллисекундаПоследнегоИзмененияOms",	ПакетДанных.LastChangeDateMS);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Документы.ЗаказКлиента.ПустаяСсылка();
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Количество() > 1 Тогда
			СтрокаНомеровЗаказов = "";
			Пока Выборка.Следующий() Цикл
				СтрокаНомеровЗаказов = СтрШаблон("%1%2%3", СтрокаНомеровЗаказов,
					?(СтрокаНомеровЗаказов = "", "", "; "), Выборка.Номер);
			КонецЦикла;
			ШаблонОшибки	= НСтр("ru = 'По номеру заказа интернет магазина ""%1"" найдено больше одного заказа [%2].'");
			ТекстОшибки		= СтрШаблон(ШаблонОшибки, ПакетДанных.OrderId, СтрокаНомеровЗаказов);
			ЗарегистрироватьОшибкуПоДокументу(СообщениеОбмена, ТекстОшибки);
			СозданиеДокументаНеТребуется = Истина;
			Возврат Документы.ЗаказКлиента.ПустаяСсылка();
		КонецЕсли;
		
		Выборка.Следующий();
		Если Выборка.ПометкаУдаления Тогда
			ШаблонОшибки	= НСтр("ru = 'Найденный документ ""%1"" помечен на удаление.'");
			ТекстОшибки		= СтрШаблон(ШаблонОшибки, Выборка.ЗаказКлиента);
			ЗарегистрироватьОшибкуПоДокументу(СообщениеОбмена, ТекстОшибки);
			СозданиеДокументаНеТребуется = Истина;
			Возврат Документы.ЗаказКлиента.ПустаяСсылка();
		ИначеЕсли НЕ Выборка.ЭтоБолееНоваяДатаИзменения Тогда
			ШаблонОшибки	= НСтр("ru = 'Найденный документ ""%1"" имеет более новую дату последнего изменения, чем в пакете.'");
			ТекстОшибки		= СтрШаблон(ШаблонОшибки, Выборка.ЗаказКлиента);
			// << 10.05.2023 Федотов А.М., КРОК, Jira№A2105505-1633
			// {
			//ЗарегистрироватьОшибкуПоДокументу(СообщениеОбмена, ТекстОшибки);
			// }
			МетаданныеДокумента = Метаданные.Документы.ЗаказКлиента;
			ТипОшибки = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_ИнформацияУстаревшиеДанные(МетаданныеДокумента, Выборка.ЗаказКлиента);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстОшибки, ТипОшибки);
			// >> 10.05.2023 Федотов А.М., КРОК, Jira№A2105505-1633
			СозданиеДокументаНеТребуется = Истина;
			Возврат Документы.ЗаказКлиента.ПустаяСсылка();
		ИначеЕсли Выборка.Проведен И Выборка.КОформлениюОстаток <= 0 Тогда
			Если Выборка.ВсеСтрокиОтменены Тогда
				// Если в документе все строки отменены, то проверка на "продажи отражены" не требуется
				Возврат Выборка.ЗаказКлиента;
			ИначеЕсли ТипЗнч(ПакетДанных.OrderStateId.Name) = Тип("Строка") И НРег(ПакетДанных.OrderStateId.Name) = "выдан" Тогда
				ШаблонОшибки	= НСтр("ru = 'По найденному документ ""%1"" уже отражены продажи.
				|Статус заказа ""Выдан"". Данный документ не обрабатывается.'");
				ТекстОшибки		= СтрШаблон(ШаблонОшибки, Выборка.ЗаказКлиента);
				// В данном случае ошибку не регистрируем, добавляем информационное сообщение
				КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстОшибки);
				СозданиеДокументаНеТребуется = Истина;
				Возврат Документы.ЗаказКлиента.ПустаяСсылка();
			Иначе
				ШаблонОшибки	= НСтр("ru = 'По найденному документ ""%1"" уже отражены продажи.'");
				ТекстОшибки		= СтрШаблон(ШаблонОшибки, Выборка.ЗаказКлиента);
				ЗарегистрироватьОшибкуПоДокументу(СообщениеОбмена, ТекстОшибки);
				СозданиеДокументаНеТребуется = Истина;
				Возврат Документы.ЗаказКлиента.ПустаяСсылка();
			КонецЕсли;
		Иначе
			// Ошибок нет
			ТекстОшибки		= "";
			Возврат Выборка.ЗаказКлиента;
		КонецЕсли;

	КонецЕсли;
	
КонецФункции // >> 24.04.2023 Федоров Д.Е., КРОК, JIRA№ A2105505-1583

// << 24.04.2023 Федоров Д.Е., КРОК, JIRA№ A2105505-1583
Процедура ЗарегистрироватьОшибкуПоДокументу(СообщениеОбмена, ТекстОшибки)
	
	МетаданныеДокумента										= Метаданные.Документы.ЗаказКлиента;
	ТипОшибки												= КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(МетаданныеДокумента);
	КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстОшибки, ТипОшибки);
	
КонецПроцедуры // >> 24.04.2023 Федоров Д.Е., КРОК, JIRA№ A2105505-1583

Функция ДанныеПоШтрихкодуНоменклатуры(МассивШтрихкодов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод В (&МассивШтрихкодов)";
	
	Запрос.УстановитьПараметр("МассивШтрихкодов", МассивШтрихкодов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	Возврат Выгрузка;
	
КонецФункции

Функция МассивШтрихкодов(ТаблицаТовары)

	МассивШтрихкодов = Новый Массив;
	
	Для Каждого СтрокаПакета Из ТаблицаТовары Цикл
		Если МассивШтрихкодов.Найти(СтрокаПакета.Barcode) = Неопределено Тогда
			МассивШтрихкодов.Добавить(СтрокаПакета.Barcode);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивШтрихкодов;

КонецФункции

#КонецОбласти

#КонецОбласти
