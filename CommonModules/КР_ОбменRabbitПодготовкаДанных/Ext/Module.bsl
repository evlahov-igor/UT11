
#Область ПрограммныйИнтерфейс

Функция ПолучитьНастройкиПодключенияКRabbit(ИнформационнаяБаза) Экспорт 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КР_НастройкиОбмена.АдресСервера КАК АдресСервера,
		|	КР_НастройкиОбмена.Порт КАК Порт,
		|	КР_НастройкиОбмена.Хост КАК Хост,
		|	КР_НастройкиОбмена.Пользователь КАК Пользователь,
		|	КР_НастройкиОбмена.Пароль КАК Пароль,
		|	КР_НастройкиОбмена.ПодписчикОчередей КАК ПодписчикОчередей,
		|	КР_НастройкиОбмена.ОбработкаБезГруппировокПоТипамДанных КАК ОбработкаБезГруппировокПоТипамДанных,
		|	КР_НастройкиОбмена.ЛимитВМинутахВСтатусеОбрабатывается КАК ЛимитВМинутахВСтатусеОбрабатывается,
		|	КР_НастройкиОбмена.КоличествоПотоковПараллельнойОбработки КАК КоличествоПотоковПараллельнойОбработки,
		|	КР_НастройкиОбмена.ТипыДанныхПараллельнойОбработки КАК ТипыДанныхПараллельнойОбработки,
		|	КР_НастройкиОбмена.РазрешенныеОтправители КАК РазрешенныеОтправители,
		|	КР_НастройкиОбмена.КоличествоПовторовПриОшибке КАК КоличествоПовторовПриОшибке,
		|	КР_НастройкиОбмена.ИтервалПовтораПриОшибкеВМинутах КАК ИтервалПовтораПриОшибкеВМинутах,
		|	КР_НастройкиОбмена.ЛимитВДняхХраненияОшибокПоискаДанных КАК ЛимитВДняхХраненияОшибокПоискаДанных
		|ИЗ
		|	РегистрСведений.КР_НастройкиОбмена КАК КР_НастройкиОбмена
		|ГДЕ
		|	КР_НастройкиОбмена.ИнформационнаяБаза = &ИнформационнаяБаза";
	
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтруктураОтвета = Новый Структура("АдресСервера,Порт,Хост,Пользователь,Пароль");
		ЗаполнитьЗначенияСвойств(СтруктураОтвета, ВыборкаДетальныеЗаписи);    
		
		// A2105505-1540
		СтруктураОтвета.Вставить("ОбработкаБезГруппировокПоТипамДанных", 
			ВыборкаДетальныеЗаписи.ОбработкаБезГруппировокПоТипамДанных);
		// A2105505-1431
		СтруктураОтвета.Вставить("ЛимитВМинутахВСтатусеОбрабатывается", 
			ВыборкаДетальныеЗаписи.ЛимитВМинутахВСтатусеОбрабатывается);
		// A2105505-1530	
		СтруктураОтвета.Вставить("КоличествоПовторовПриОшибке", 
			ВыборкаДетальныеЗаписи.КоличествоПовторовПриОшибке);
		СтруктураОтвета.Вставить("ИтервалПовтораПриОшибкеВМинутах", 
			ВыборкаДетальныеЗаписи.ИтервалПовтораПриОшибкеВМинутах);	
			
		СтруктураОтвета.Вставить("КоличествоПотоковПараллельнойОбработки", 
			ВыборкаДетальныеЗаписи.КоличествоПотоковПараллельнойОбработки);  
		ТипыДанныхПараллельнойОбработки = ВыборкаДетальныеЗаписи.ТипыДанныхПараллельнойОбработки.Получить();
		Если ТипЗнч(ТипыДанныхПараллельнойОбработки) <> Тип("Массив") Тогда 
			ТипыДанныхПараллельнойОбработки	= Новый Массив;
		КонецЕсли;	
		СтруктураОтвета.Вставить("ТипыДанныхПараллельнойОбработки", ТипыДанныхПараллельнойОбработки);
		
		РазрешенныеОтправители = ВыборкаДетальныеЗаписи.РазрешенныеОтправители.Получить();
		Если ТипЗнч(РазрешенныеОтправители) <> Тип("Массив") Тогда 
			РазрешенныеОтправители	= Новый Массив;
		КонецЕсли;	
		СтруктураОтвета.Вставить("РазрешенныеОтправители", РазрешенныеОтправители);
		
		СтруктураОтвета.Вставить("ЛимитВДняхХраненияОшибокПоискаДанных", 
			ВыборкаДетальныеЗаписи.ЛимитВДняхХраненияОшибокПоискаДанных);
		
		СтруктураОтвета.Вставить("ПодписчикОчередей", ВыборкаДетальныеЗаписи.ПодписчикОчередей.Получить());
		Возврат СтруктураОтвета;
	Иначе
		Возврат Неопределено;		
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьНастройкиВыгрузкиОбъекта(ИмяИсточника) Экспорт
	
	МассивПараметров = Новый Массив;
	
	// здесь получаем массив строк общей ТЧ с правилами выгрузки
	// далее его нужно преобразовать в отдельную сущность, так как из повт.исп получили ссылку на ранее созданную таблицу
	// и спользовать ее повторно нельзя.
	ПараметрыВыгрузкиОбъекта = КР_ОбменRabbitОбщиеМеханизмыПовтИсп.ПолучитьНастройкиВыгрузкиОбъекта(ИмяИсточника);	
	
	Для Каждого СтрокаПараметра Из ПараметрыВыгрузкиОбъекта Цикл
		СтруктураПараметра = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаПараметра);
		РезультирующаяСтруктура = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметра);
		МассивПараметров.Добавить(РезультирующаяСтруктура);	
	КонецЦикла;
	
	Возврат МассивПараметров;
	
КонецФункции


Функция ПолучитьТекущуюИнформационнуюБазу() Экспорт
	
	// Перетащить в параметры сеанса
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КР_ИнформационныеБазыСтрокиСоединения.Ссылка КАК Ссылка,
		|	КР_ИнформационныеБазыСтрокиСоединения.Ссылка.Наименование КАК Наименование
		|ИЗ
		|	Справочник.КР_ИнформационныеБазы.СтрокиСоединения КАК КР_ИнформационныеБазыСтрокиСоединения
		|ГДЕ
		|	КР_ИнформационныеБазыСтрокиСоединения.СтрокаСоединения = &СтрокаСоединения
		|	И НЕ КР_ИнформационныеБазыСтрокиСоединения.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СтрокаСоединения", СтрокаСоединения);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СтруктураОтвета = Новый Структура("Ссылка,Наименование");
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураОтвета, ВыборкаДетальныеЗаписи);
	Иначе
		//Srvr="ZOLLA-APP-01";Ref="zolla_demo";
		МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСоединения, ";", Истина, Истина);
		Если МассивСлов.Количество() = 2 Тогда
			Наименование = МассивСлов[1];
			Наименование = СтрЗаменить(Наименование, "Ref=", "");
			Наименование = СтрЗаменить(Наименование, """", "");
		Иначе
			Наименование = СтрокаСоединения;	
		КонецЕсли;		
		
		НоваяБаза = Справочники.КР_ИнформационныеБазы.СоздатьЭлемент();
		НоваяБаза.Наименование = Наименование;
		НовоеСоединение = НоваяБаза.СтрокиСоединения.Добавить();
		НовоеСоединение.СтрокаСоединения = СтрокаСоединения;
		НоваяБаза.Записать();
		
		СтруктураОтвета.Ссылка = НоваяБаза.Ссылка;
		СтруктураОтвета.Наименование = Наименование;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// << 24.10.2022, Маскаев П.Ю., КРОК, Jira№ A2105505-626
Функция ПолучитьИнформационнуюБазу(НаименованиеИБ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеИБ", НаименованиеИБ);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КР_ИнформационныеБазы.Ссылка КАК ИнформационнаяБаза
	|ИЗ
	|	Справочник.КР_ИнформационныеБазы КАК КР_ИнформационныеБазы
	|ГДЕ
	|	КР_ИнформационныеБазы.Наименование = &НаименованиеИБ
	|	И НЕ КР_ИнформационныеБазы.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИнформационнаяБаза;
	Иначе
		НоваяБаза = Справочники.КР_ИнформационныеБазы.СоздатьЭлемент();
		НоваяБаза.Наименование = НаименованиеИБ;
		НоваяБаза.Записать();
		Возврат НоваяБаза.Ссылка;
	КонецЕсли;

КонецФункции

#КонецОбласти
