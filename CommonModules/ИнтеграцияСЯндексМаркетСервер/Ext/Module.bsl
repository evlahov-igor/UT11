#Область ПрограммныйИнтерфейс

// Функция получает данные авторизации
//
// Параметры:
//  СтруктураОтвета  - Структура - структура содержит набор ключей, которые необходимо вернуть.
//
// Возвращаемое значение:
//  СтруктураДанныхАвторизации  - Структура - структура содержит запрошенный набор ключей.
//
Функция ДанныеАвторизации(СтруктураОтвета) Экспорт
	
	СтруктураДанныхАвторизации = Новый Структура();

	Если СтруктураОтвета.Свойство("access_token") И
		 СтруктураОтвета.Свойство("expires_in") И 
		 СтруктураОтвета.Свойство("refresh_token") Тогда
		 
			expires_in = СтруктураОтвета.expires_in;
			
			Если ОбщегоНазначенияУТКлиентСервер.ЭтаСтрокаЯвляетсяЦелымНеотрицательнымЧислом(expires_in) Тогда
				СрокЖизниТокена = НачалоДня(ТекущаяДата() + Число(expires_in));
				СтруктураДанныхАвторизации.Вставить("access_token",СтруктураОтвета.access_token);
				СтруктураДанныхАвторизации.Вставить("access_token_expires",СрокЖизниТокена);
				СтруктураДанныхАвторизации.Вставить("refresh_token",СтруктураОтвета.refresh_token);
			Иначе
				ТекстОшибки = НСтр("ru = 'Некорректное значение свойства expires_in при получении ключа авторизации - '" +СтруктураОтвета.expires_in +"; en = 'Out of order property value expires_in'" +СтруктураОтвета.expires_in);		
				ТекстОписанияСобытия = НСтр("ru = 'Ошибка сохранения данных в безопасном хранилище.'");
				ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);	
			КонецЕсли;
	КонецЕсли;
			
	Возврат СтруктураДанныхАвторизации;
	
КонецФункции

// Функция возвращает HTTPЗапрос запрос для обновления ключей доступа к сервису для организации.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - ссылка на организацию, для которой запрашиваются ключи.
//
// Возвращаемое значение:
//  HTTPЗапрос  - HTTPЗапрос - HTTPЗапрос для получения ключей.
//
Функция ЗапросОбновитьТокеныДоступа(Организация) Экспорт
		
	IDПриложения = "cc9b7be075074e6caaff515a3c5ef0e5";
	ПарольПриложения = "dc807379134444cca2a27e21c9bf9d7d";

	СтруктураДанныхАвторизации = ТекущиеДанныеАвторизации(Организация);
	
	Если СтруктураДанныхАвторизации <> Неопределено Тогда
		refresh_token = СтруктураДанныхАвторизации.refresh_token;	
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");	

	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить("grant_type=refresh_token");
	ПараметрыURL.Добавить("refresh_token" + refresh_token);
	ПараметрыURL.Добавить("client_id=" + IDПриложения);
	ПараметрыURL.Добавить("client_secret=" + ПарольПриложения);
	
	Адрес = "/token?"; 
	HTTPЗапрос = Новый HTTPЗапрос(Адрес, Заголовки);
	Тело = СтрСоединить(ПараметрыURL, "&");
	
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,"windows-1251");
	
	Возврат HTTPЗапрос;
	
КонецФункции


// Функция возвращает имя сервера авторизации для обновления ключей доступа к сервису.
//
// Возвращаемое значение:
//  Сервер  - строка - имя сервера сервиса
//
Функция СерверАвторизации() Экспорт
	
	Сервер = "oauth.yandex.ru";	
	
	Возврат  Сервер;
	
КонецФункции

// Функция возвращает имя сервера партнерского API.
//
// Возвращаемое значение:
//  Сервер  - строка - имя сервера сервиса
//
Функция СерверПартнерскогоAPI() Экспорт
	
	Сервер = "api.partner.market.yandex.ru/v2/campaigns";	
	
	Возврат  Сервер;
	
КонецФункции


// Функция возвращает url авторизации.
//
// Возвращаемое значение:
//  Сервер  - строка - 
//
Функция АдресАвторизации() Экспорт
	
	IDПриложения = "cc9b7be075074e6caaff515a3c5ef0e5";
	ПарольПриложения = "dc807379134444cca2a27e21c9bf9d7d";
	Адрес = "https://oauth.yandex.ru/authorize?response_type=code&client_id=" + IDПриложения + "&client_secret=" + ПарольПриложения+ "&redirect_uri=" + "https://oauth.yandex.ru/verification_code";		
	Возврат  Адрес;
	
КонецФункции

Функция ЗапросПолучитьТокеныПоКоду(ВременныйКод) Экспорт
		
	IDПриложения = "cc9b7be075074e6caaff515a3c5ef0e5";
	ПарольПриложения = "dc807379134444cca2a27e21c9bf9d7d";


    Заголовки = Новый Соответствие;
    Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");	

	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить("grant_type=authorization_code");
	ПараметрыURL.Добавить("code=" + ВременныйКод);
    ПараметрыURL.Добавить("client_id=" + IDПриложения);    
    ПараметрыURL.Добавить("client_secret=" + ПарольПриложения);
	
	Адрес = "/token?"; 
    HTTPЗапрос = Новый HTTPЗапрос(Адрес, Заголовки);
	Тело = СтрСоединить(ПараметрыURL, "&");
	
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,"windows-1251");
    
	Возврат HTTPЗапрос;
	
КонецФункции

Функция ПолучитьКороткийНомерМагазина(НомерМагазина)
	
	КороткийНомерМагазина = НомерМагазина;
	
	ПозицияИскомогоСимвола = СтрНайти(НомерМагазина,"-");
	Если ПозицияИскомогоСимвола > 0 Тогда
		КороткийНомерМагазина = Прав(НомерМагазина,СтрДлина(НомерМагазина)- ПозицияИскомогоСимвола);
	КонецЕсли;
	
	Возврат КороткийНомерМагазина;
	
КонецФункции

Функция УстановитьНастройкиАвторизации(ДанныеАвторизации, Организация, НомерМагазина) Экспорт
		
	ИдентификаторОрганизации = Строка(Организация.УникальныйИдентификатор());
	КороткийНомерМагазина = ПолучитьКороткийНомерМагазина(НомерМагазина);
	
	Если ИдентификаторОрганизации <> Неопределено И 
		 ДанныеАвторизации.Свойство("access_token") И
		 ДанныеАвторизации.Свойство("access_token_expires") И 
		 ДанныеАвторизации.Свойство("refresh_token") Тогда
		 	//сохранение данных организации
			ВладелецИмяСервиса = "ЯндексМаркетВитринаПлюсФулфилмент";
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ВладелецИмяСервиса, Организация, "organization_id");
			//сохранение данных ключей и идентификатора магазина
			Владелец = ИдентификаторОрганизации + "/ЯндексМаркетВитринаПлюсФулфилмент";
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ДанныеАвторизации.access_token, "access_token");
		    ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ДанныеАвторизации.access_token_expires, "access_token_expires");	
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ДанныеАвторизации.refresh_token, "refresh_token");
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, КороткийНомерМагазина, "campaign_id");
			НастройкиУстановлены = Истина;
	Иначе
		НастройкиУстановлены = Ложь;	
	КонецЕсли;
	
	Если Не НастройкиУстановлены Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удалось сохранить данные авторизации в безопасном хранилище, владелец = .'" +Владелец+ "; en = 'Failed to save data, owner = '" + Владелец);		
		ТекстОписанияСобытия = НСтр("ru = 'Ошибка сохранения данных в безопасном хранилище.'");
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		
	КонецЕсли;
	
	Возврат НастройкиУстановлены;
	
КонецФункции

Функция ТекущиеДанныеАвторизации(Организация) Экспорт
	
	ИдентификаторОрганизации = Строка(Организация.УникальныйИдентификатор());
	Владелец = ИдентификаторОрганизации + "/ЯндексМаркетВитринаПлюсФулфилмент";
	ДанныеАвторизации = "access_token, access_token_expires, refresh_token, campaign_id";
	
	ТекущиеДанные =
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, ДанныеАвторизации, Ложь);

	Возврат ТекущиеДанные;
КонецФункции

Функция ТекущиеДанныеАвторизацииОрганизация() Экспорт
	
	Владелец = "ЯндексМаркетВитринаПлюсФулфилмент";
	ДанныеАвторизации = "organization_id";
	
	ТекущиеДанные =
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, ДанныеАвторизации, Ложь);

	Возврат ТекущиеДанные;
КонецФункции

Процедура УдалитьДанныеАвторизации(Организация) Экспорт
	
	ИдентификаторОрганизации = Строка(Организация.УникальныйИдентификатор());
	Владелец = ИдентификаторОрганизации + "/ЯндексМаркетВитринаПлюсФулфилмент";
	ДанныеАвторизации = "access_token, access_token_expires, refresh_token";
	
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, ДанныеАвторизации);
	
	ВладелецИмяСервиса = "ЯндексМаркетВитринаПлюсФулфилмент";
	ДанныеАвторизацииОрганизации = "organization_id";
	
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ВладелецИмяСервиса, ДанныеАвторизацииОрганизации);
	
КонецПроцедуры

//Фоновые задания
Процедура ПолучитьРекомендацииПоСклейкеТовараЯндексМаркет(ShopSKU = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеРекомендацийПоСклейкеТовараЯндексМаркет);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по расписанию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "", НСтр("ru = 'Запуск'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	Попытка
		ПолучитьРекомендации(ShopSKU);
	Исключение
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              НСтр("ru = 'Ошибка вызова API Яндекс.Маркет'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		              ИнформацияОбОшибке());
		
	КонецПопытки;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "",НСтр("ru = 'Завершение'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

Процедура ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурнала , ИмяСобытия, 
		Знач КомментарийСПараметрами , ИнформацияОбОшибке = "") Экспорт
	
	// Определение уровня журнала регистрации на основе типа переданного сообщения об ошибке.
	Если ТипЗнч(УровеньЖурнала) <> Тип("УровеньЖурналаРегистрации") Тогда
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Если КомментарийСПараметрами = "" Тогда
			ТекстСообщенияПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Иначе
			ТекстСообщенияПользователю = КомментарийСПараметрами + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") И ИнформацияОбОшибке <> "" Тогда
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ИнформацияОбОшибке;
		КонецЕсли;
		ТекстСообщенияПользователю = КомментарийСПараметрами;
	КонецЕсли;
	
	// Журнал регистрации 
	УстановитьПривилегированныйРежим(Истина);
	ГруппаСобытий = ПараметрыЖурнала.ГруппаСобытий + ?(ИмяСобытия = "", "", "."+ ИмяСобытия);
	ЗаписьЖурналаРегистрации(
		ГруппаСобытий, 
		УровеньЖурнала, 
		,
		,
		КомментарийСПараметрами);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка ИЛИ УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение Тогда
		Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка Тогда
			ПараметрыЖурнала.Вставить("БылиОшибки", Истина);
		Иначе
			ПараметрыЖурнала.Вставить("БылиПредупреждения", Истина);
		КонецЕсли;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СокрЛП(ТекстСообщенияПользователю); //  + Символы.ПС + Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.'")
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьРекомендации(ShopSKU = Неопределено)   
	
	Организация = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизацииОрганизация();
	
	Если Организация <> Неопределено И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизации(Организация);
	КонецЕсли;
	
	IDПриложения = "cc9b7be075074e6caaff515a3c5ef0e5";
	
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPI();
	ИмяМетода = "/offer-mapping-entries/suggestions.json";	
	campaign_id = ДанныеАвторизации.campaign_id;
	Адрес ="/" + campaign_id + ИмяМетода;	

	Запрос = Новый Запрос();
	Если ShopSKU = Неопределено Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 200
		|	   СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК shopSku,
		|	   СтатусыПубликацииТоваровЯндексМаркет.ПредставлениеТовара КАК name,
		|	   СтатусыПубликацииТоваровЯндексМаркет.ТоварнаяКатегория КАК category,
		|	   ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Марка.Наименование,"""") КАК vendor,
		|	   ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул,"""") КАК vendorCode
		|	   ИЗ
		|	   РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|ГДЕ
		|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.Новый) ИЛИ 
		|   СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.СозданиеНового)";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	   СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК shopSku,
		|	   СтатусыПубликацииТоваровЯндексМаркет.ПредставлениеТовара КАК name,
		|	   СтатусыПубликацииТоваровЯндексМаркет.ТоварнаяКатегория КАК category,
		|	   ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Марка.Наименование,"""") КАК vendor,
		|	   ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул,"""") КАК vendorCode
		|	   ИЗ
		|	   РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|ГДЕ
		|	(СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.Новый) ИЛИ 
		|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.СозданиеНового))
		|	И СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации = &shopSku";
		Запрос.Параметры.Вставить("shopSku",ShopSKU);
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	СтруктураДляJSON = Неопределено;
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		СтруктураПредложения = Новый Структура("shopSku, name, category, vendor, vendorCode");
		СтруктураДляJSON = Неопределено;
		ЗаполнитьЗначенияСвойств(СтруктураПредложения,РезультатЗапроса);					
		offers = Новый Массив();
		offers.Добавить(СтруктураПредложения);	
		СтруктураДляJSON = Новый Структура();
		СтруктураДляJSON.Вставить("offers",offers);
		
		Если СтруктураДляJSON<>Неопределено Тогда
			ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON(СтруктураДляJSON);
			
			Попытка	
				HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Новый СертификатыУдостоверяющихЦентровОС()),Истина);
			Исключение
				ТекстОшибки = НСтр("ru = 'Отсутствует соединение с сервером '" + Сервер);		
				ТекстОписанияСобытия = НСтр("ru = 'Отсутствует соединение с сервером '"+Сервер);
				ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			КонецПопытки;
			
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Content-Type", "application/json");
			Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + IDПриложения);
			
			HTTPЗапрос = Новый HTTPЗапрос(Адрес,Заголовки);
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
			Попытка
				Результат =  HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
			Исключение
			КонецПопытки;
			
			Попытка
				HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  
				СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
				СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
				КодСостояния = HTTPОтвет.КодСостояния;
				
			Исключение 
				ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса '");	
				ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '; "+ HTTPЗапрос.ПолучитьТелоКакСтроку());
				ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			КонецПопытки;	
			
			Если КодСостояния= 200 И СтруктураОтвета.status = "OK" Тогда
				ОбновитьСтатусыПубликации(СтруктураОтвета.result);
			Иначе
				Если СтруктураОтвета.status = "ERROR" Тогда
					ОбработатьОшибкиПриОтправкеСтатусов(РезультатЗапроса.ShopSKU,СтруктураОтвета.errors);
				Иначе
					ОбработатьОшибкиПриОтправкеСтатусов(РезультатЗапроса.ShopSKU);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьОшибкиПриОтправкеСтатусов(shopSku,МассивОшибок = Неопределено)
	
	Для каждого СтруктураОшибки Из МассивОшибок Цикл
			Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
			СтруктураИзмерений = ПолучитьСтруктуруИзмерений(shopSku);
			Набор.Отбор.Номенклатура.Установить(СтруктураИзмерений.Номенклатура);
			Набор.Отбор.Характеристика.Установить(СтруктураИзмерений.Характеристика);
			Набор.Отбор.Упаковка.Установить(СтруктураИзмерений.Упаковка);
			Набор.Прочитать();
			Если Набор.Количество() Тогда
				Запись = Набор[0];
				Запись.КодОшибки = СтруктураОшибки.code; 
				Запись.ОписаниеОшибки = СтруктураОшибки.message;
				Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОшибкаПриОтправкеНаМодерацию;
				Набор.Записать();
			КонецЕсли;
			
	КонецЦикла;

	
КонецПроцедуры

Функция ПолучитьСтруктуруИзмерений(ИдентификаторПубликации) Экспорт
	
	Структура = Новый Структура("Номенклатура, Характеристика, Упаковка");
	Запрос = Новый Запрос();  
	Запрос.Параметры.Вставить("ИдентификаторПубликации",ИдентификаторПубликации);
	Запрос.Текст = "ВЫБРАТЬ
	                |	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
	                |	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
	                |	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка
	                |ИЗ
	                |	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	                |ГДЕ
	                |	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации = &ИдентификаторПубликации";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Структура,Результат);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Процедура ОбновитьСтатусыПубликации(Рекомендации)
	
	Для каждого СтруктураПредложения Из Рекомендации.offers Цикл
		Если СтруктураПредложения.Свойство("shopSku") Тогда
			Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
			СтруктураИзмерений = ПолучитьСтруктуруИзмерений(СтруктураПредложения.shopSku);
			Набор.Отбор.Номенклатура.Установить(СтруктураИзмерений.Номенклатура);
			Набор.Отбор.Характеристика.Установить(СтруктураИзмерений.Характеристика);
			Набор.Отбор.Упаковка.Установить(СтруктураИзмерений.Упаковка);
			Набор.Прочитать();
			Если Набор.Количество() Тогда
				Запись = Набор[0];
				Если СтруктураПредложения.Свойство("marketSku") Тогда
					marketSku = СокрЛП(СтрЗаменить(СтруктураПредложения.marketSku,Символ(160),""));  
					Запись.ИдентификаторТовараПлощадки = marketSku; 
					Запись.ЕстьИдентификаторПлощадки = Истина;
				КонецЕсли;
				Если СтруктураПредложения.Свойство("marketSkuName") Тогда 
					Запись.НаименованиеТовараПлощадки = СтруктураПредложения.marketSkuName;
					Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ПолученаРекомендация;
				Иначе
					Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.РекомендацияНеНайдена;
					Запись.ОписаниеОшибки = "Для товара с указанными свойствами не была подобрана рекомендованная карточка товара на Яндекс.Маркет. 
					|Для получения рекомендации укажите в запросе как можно больше информации о товаре (категорию, бренд (марку),штрих-коды товара, ориентировочную цену товара). После заполненения данных отправьте повторно публикацию на получение рекомендации (кнопка ""Получить рекомендацию"").
					|Попробуйте найти товар в поиске по разделу «Покупки» на Маркете. 
					|Если товар найдется, SKU на Яндексе можно взять из URL его страницы. 
					|Например, если URL страницы товара — https://pokupki.market.yandex.ru/product/7715752, то его SKU на Яндексе — 7715752.
					|Если вы смогли самостоятельно подобрать SKU на Яндексе - заполните его и отправьте товар на модерацию (кнопка ""Отправить на модерацию"").
					|Если SKU не удалось подобрать - наиболее подробно опишите товар и отправьте запрос без указания SKU (кнопка ""Отправить на модерацию"") - сотрудники Маркета могут подобрать или создать карточки для ваших товаров в личном кабинете, если товар еще не продается на Маркете."; 
				КонецЕсли;
				Если СтруктураПредложения.Свойство("marketCategoryName") Тогда 
					Запись.НаименованиеКатегорииПлощадки = СтруктураПредложения.marketCategoryName;
				КонецЕсли;
				Если СтруктураПредложения.Свойство("marketModelName") Тогда 
					Запись.НаименованиеМоделиПлощадки = СтруктураПредложения.marketModelName;
				КонецЕсли;
				Набор.Записать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьНаМодерациюСвязиТоваровЯндексМаркет() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаНаМодерациюСвязейТоваровЯндексМаркет);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по расписанию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
	Попытка
		ОтправитьСвязиТоваровНаМодерацию();	
	Исключение
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              НСтр("ru = 'Ошибка вызова API Яндекс.Маркет'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		              ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтправитьСвязиТоваровНаМодерацию() 
	
	Организация = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизацииОрганизация();
	
	Если Организация <> Неопределено И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизации(Организация);
	КонецЕсли;
	
	IDПриложения = "cc9b7be075074e6caaff515a3c5ef0e5";
	
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPI();
	ИмяМетода = "/offer-mapping-entries/updates.json";	
	campaign_id = ДанныеАвторизации.campaign_id;
	Адрес ="/" + campaign_id + ИмяМетода;
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 200
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Ссылка КАК Номенклатура,
	|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика.Ссылка КАК Характеристика, 
	|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка, 
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК shopSku,
	|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Марка.Наименование,"""") КАК vendor,
	|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул,"""") КАК vendorCode,
	|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Производитель.Наименование,"""") КАК manufacturer,
	|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.СтранаПроисхождения.Наименование,"""") КАК manufacturerCountry,
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК marketSku,
	|	СтатусыПубликацииТоваровЯндексМаркет.НаименованиеТовараПлощадки КАК name,
	|	СтатусыПубликацииТоваровЯндексМаркет.НаименованиеКатегорииПлощадки КАК category
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	|ГДЕ
	|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.УтвержденаРекомендация)";
	
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
    СтруктураДляJSON = Неопределено;
	
	Пока РезультатЗапроса.Следующий() Цикл
 
		
		СтруктураОписанияТовара = Новый Структура("shopSku,name,category,manufacturer,manufacturerCountries,weightDimensions,urls,barcodes,vendor,vendorCode");
		ЗаполнитьЗначенияСвойств(СтруктураОписанияТовара,РезультатЗапроса);			
			
	    urls = Новый Массив;
		urls.Добавить("https://pokupki.market.yandex.ru/product/"+СокрЛП(СтрЗаменить(РезультатЗапроса.marketSku,Символ(160),"")));
		СтруктураОписанияТовара.urls = urls;
		
		barcodes = ПолучитьШрихКоды(РезультатЗапроса.Номенклатура, РезультатЗапроса.Характеристика);
		СтруктураОписанияТовара.Вставить("barcodes", barcodes);
		СтруктураОписанияТовара.barcodes = barcodes; 
		
		manufacturerCountries = Новый Массив;
		manufacturerCountries.Добавить(РезультатЗапроса.manufacturerCountry);
		СтруктураОписанияТовара.manufacturerCountries = manufacturerCountries;
		
		СтруктураВесогабаритов = ПолучитьВесогабариты(РезультатЗапроса.Упаковка);
		СтруктураОписанияТовара.weightDimensions = СтруктураВесогабаритов;
		
		СтруктураСвязи = Новый Структура("offer,mapping");
		СтруктураСвязи.mapping = Новый Структура("marketSku",РезультатЗапроса.marketSku);
		СтруктураСвязи.offer = СтруктураОписанияТовара; 
		
		offerMappingEntries = Новый Массив();
		offerMappingEntries.Добавить(СтруктураСвязи);
		
		СтруктураДляJSON = Новый Структура();
		СтруктураДляJSON.Вставить("offerMappingEntries",offerMappingEntries);		
		
		ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON(СтруктураДляJSON);
		
		Попытка	
			HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Новый СертификатыУдостоверяющихЦентровОС()),Истина);
		Исключение
			ТекстОшибки = НСтр("ru = 'Отсутствует соединение с сервером '" + Сервер);		
			ТекстОписанияСобытия = НСтр("ru = 'Отсутствует соединение с сервером '"+Сервер);
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		КонецПопытки;
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + IDПриложения);
		
		HTTPЗапрос = Новый HTTPЗапрос(Адрес,Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		Попытка
			Результат =  HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
		Исключение
		КонецПопытки;
		
		Попытка
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  
			СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
			КодСостояния = HTTPОтвет.КодСостояния;
			
		Исключение 
			ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса '");	
			ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '; "+ HTTPЗапрос.ПолучитьТелоКакСтроку());
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		КонецПопытки;	
		
		Если КодСостояния= 200 И СтруктураОтвета.status = "OK" Тогда
			offerMappingEntries = СтруктураДляJSON.offerMappingEntries;
			shopSku = offerMappingEntries[0].offer.shopSku;
			ЗаписатьСтатусНаМодерации(shopSku);
		Иначе	
			Если СтруктураОтвета.status = "ERROR" Тогда
				ОбработатьОшибкиПриОтправкеСтатусов(СтруктураДляJSON.offerMappingEntries[0].offer.shopSku,СтруктураОтвета.errors);
			Иначе
				ОбработатьОшибкиПриОтправкеСтатусов(СтруктураДляJSON.offerMappingEntries[0].offer.shopSku);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры


Функция ПолучитьШрихКоды(Номенклатура, Характеристика)
	
	Запрос = Новый Запрос ();
	Запрос.Параметры.Вставить("Номенклатура",Номенклатура);
	Запрос.Параметры.Вставить("Характеристика",Характеристика);
	Запрос.Текст = "ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК barcode,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ШтрихКоды = новый Массив;
	
	Если Результат.Количество()>0 Тогда
		ШтрихКоды = Результат.ВыгрузитьКолонку("barcode");
	КонецЕсли;	
	
	Возврат ШтрихКоды;
КонецФункции
 
Функция ПолучитьВесогабариты(Упаковка) Экспорт
	
	СтруктураВесогабаритов = Новый Структура("length,width,height,weight");
	
	СтруктураВесогабаритов.length = 0; 
	СтруктураВесогабаритов.width = 0; 
	СтруктураВесогабаритов.height = 0; 
	СтруктураВесогабаритов.weight = 0;
		
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("УпаковкаЕдиницаИзмерения",Упаковка);  
	Запрос.Текст = "ВЫБРАТЬ
	               |	УпаковкиЕдиницыИзмерения.Вес КАК Вес,
	               |	УпаковкиЕдиницыИзмерения.Высота КАК Высота,
	               |	УпаковкиЕдиницыИзмерения.Глубина КАК Глубина,
	               |	УпаковкиЕдиницыИзмерения.Ширина КАК Ширина,
	               |	УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения КАК ВесЕдиницаИзмерения,
	               |	УпаковкиЕдиницыИзмерения.ГлубинаЕдиницаИзмерения КАК ГлубинаЕдиницаИзмерения,
	               |	УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения КАК ШиринаЕдиницаИзмерения,
	               |	УпаковкиЕдиницыИзмерения.ВысотаЕдиницаИзмерения КАК ВысотаЕдиницаИзмерения
	               |ИЗ
	               |	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	               |ГДЕ
	               |	УпаковкиЕдиницыИзмерения.Ссылка = &УпаковкаЕдиницаИзмерения
	               |	И УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл   
		СокращенияЕдИзмГлубина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ГлубинаЕдиницаИзмерения,"МеждународноеСокращение");
		Если СокращенияЕдИзмГлубина = "MTR" Тогда //м 
			Глубина = Формат(Результат.Глубина*100,"ЧДЦ=2; ЧРД=.");  
		ИначеЕсли СокращенияЕдИзмГлубина = "KMT" Тогда //км 
			Глубина = Формат(Результат.Глубина*100000,"ЧДЦ=2; ЧРД=.");
		ИначеЕсли СокращенияЕдИзмГлубина = "CMT" Тогда //см
			Глубина = Формат(Результат.Глубина,"ЧДЦ=2; ЧРД=.");  
		Иначе
			Глубина = ""; 
		КонецЕсли;
		
		СокращенияЕдИзмШирина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ШиринаЕдиницаИзмерения,"МеждународноеСокращение");
		Если СокращенияЕдИзмШирина = "MTR" Тогда //м 
			Ширина = Формат(Результат.Ширина*100,"ЧДЦ=2; ЧРД=.");  
		ИначеЕсли СокращенияЕдИзмШирина = "KMT" Тогда //км 
			Ширина = Формат(Результат.Ширина*100000,"ЧДЦ=2; ЧРД=.");
		ИначеЕсли СокращенияЕдИзмШирина = "CMT" Тогда //см
			Ширина = Формат(Результат.Ширина,"ЧДЦ=2; ЧРД=."); 
		Иначе
			Ширина = "";
		КонецЕсли;   
		
		СокращенияЕдИзмВысота = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ВысотаЕдиницаИзмерения,"МеждународноеСокращение");
		Если СокращенияЕдИзмВысота = "MTR" Тогда //м 
			Высота = Формат(Результат.Высота*100,"ЧДЦ=2; ЧРД=.");  
		ИначеЕсли СокращенияЕдИзмВысота = "KMT" Тогда //км 
			Высота = Формат(Результат.Высота*100000,"ЧДЦ=2; ЧРД=.");
		ИначеЕсли СокращенияЕдИзмВысота = "CMT" Тогда //см
			Высота = Формат(Результат.Высота,"ЧДЦ=2; ЧРД=.");
		Иначе
			Высота = "";						
		КонецЕсли;
		
		СокращенияЕдИзмВес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ВесЕдиницаИзмерения,"МеждународноеСокращение");
		Если СокращенияЕдИзмВес = "GRM" Тогда //г 
			Вес = Формат(Результат.Вес/1000,"ЧДЦ=2; ЧРД=.");  
		ИначеЕсли СокращенияЕдИзмВес = "CTM" Тогда //кар 
			Вес = Формат(Результат.Вес/5000,"ЧДЦ=2; ЧРД=.");
		ИначеЕсли СокращенияЕдИзмВес = "KGM" Тогда //кг
			Вес = Формат(Результат.Вес,"ЧДЦ=2; ЧРД=.");   
		ИначеЕсли СокращенияЕдИзмВес = "TNE" Тогда //т
			Вес = Формат(Результат.Вес*1000,"ЧДЦ=2; ЧРД=.");
		Иначе 
			Вес = "";	
		КонецЕсли;

		СтруктураВесогабаритов.length = Глубина; 
		СтруктураВесогабаритов.width = Ширина; 
		СтруктураВесогабаритов.height = Высота; 
		СтруктураВесогабаритов.weight = Вес;
		
	КонецЦикла;   
	
	Возврат СтруктураВесогабаритов;
	
КонецФункции

Процедура ЗаписатьСтатусНаМодерации(shopSku)
	
	Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
	СтруктураИзмерений = ПолучитьСтруктуруИзмерений(shopSku);
	Набор.Отбор.Номенклатура.Установить(СтруктураИзмерений.Номенклатура);
	Набор.Отбор.Характеристика.Установить(СтруктураИзмерений.Характеристика);
	Набор.Отбор.Упаковка.Установить(СтруктураИзмерений.Упаковка);
	Набор.Прочитать();
	Если Набор.Количество() Тогда
		Запись = Набор[0];
		Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСтатусПубликации(shopSku)
	
	Организация = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизацииОрганизация();
	
	Если Организация <> Неопределено И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ТекущиеДанныеАвторизации(Организация);
	КонецЕсли;
	
	IDПриложения = "cc9b7be075074e6caaff515a3c5ef0e5";
	
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPI();
	ИмяМетода = "/offer-mapping-entries.json";	
	campaign_id = ДанныеАвторизации.campaign_id;
	Адрес ="/" + campaign_id + ИмяМетода +"?";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + IDПриложения);
	
	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить("shop_sku=" + shopSku);
	
	Попытка	
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Новый СертификатыУдостоверяющихЦентровОС()),Истина);
	Исключение
		ТекстОшибки = НСтр("ru = 'Отсутствует соединение с сервером '" + Сервер);		
		ТекстОписанияСобытия = НСтр("ru = 'Отсутствует соединение с сервером '"+Сервер);
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
	КонецПопытки;
	
	ТелоЗапроса = СтрСоединить(ПараметрыURL, "&");
	Адрес = Адрес+ТелоЗапроса;
	
	HTTPЗапрос = Новый HTTPЗапрос(Адрес, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "windows-1251");
		
	Попытка
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);  
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
		КодСостояния = HTTPОтвет.КодСостояния;
		
	Исключение 
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса '");	
		ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса '; "+ HTTPЗапрос.ПолучитьТелоКакСтроку());
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
	КонецПопытки;	
	
	Если КодСостояния= 200 И СтруктураОтвета.status = "OK" Тогда
		ОбновитьСтатусыНаМодерации(СтруктураОтвета.result,shopSku);
	Иначе
		ЗаписатьОшибкуПриПолученииСтатусовМодерации(shopSku);	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСатусМодерацииСОписанием(status, ТекущийСтатус ,notes = Неопределено)
	
	Структура = Новый Структура("Статус,ОписаниеОшибки");
	
	Если status = "IN_WORK" Тогда
		Если  ТекущийСтатус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации Тогда			
			
			Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 
		
		ИначеЕсли  ТекущийСтатус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОжидаетМодерации Тогда
			
			Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 
			
		КонецЕсли;
		
	ИначеЕсли status = "READY" Тогда
		
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена; 
		
	ИначеЕсли status = "NEED_CONTENT" Тогда
		
			Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
			
			Структура.ОписаниеОшибки = "Для товара не указан SKU на Яндексе, и сотрудники Маркета не смогли привязать его к карточке. Найдите карточку товара самостоятельно в поиске по разделу «Покупки» или создайте ее, если товар еще не продается на Маркете.";
		
	ИначеЕсли status = "NEED_INFO" Тогда
			
			Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
			СтрокаКомментария = "Вы указали для товара неверную или недостаточную информацию. Уточните входные данные запроса и отправьте связь на модерацию повторно.";
			Если notes <> "Неопределено" и ТипЗнч(notes) = Тип("Строка") Тогда 
				СтрокаКомментария  = СтрокаКомментария + notes; 
			КонецЕсли;	
			
			Структура.ОписаниеОшибки = СтрокаКомментария;
		
	ИначеЕсли status = "SUSPENDED" Тогда
		
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОжидаетМодерации;
		Структура.ОписаниеОшибки = "Маркет пока не размещает товары данной категории, но начнет в ближайшее время. После этого товар автоматически отправится на модерацию, и статус изменится на IN_WORK. Чтобы уточнить сроки появления категорий товаров на Маркете, обратитесь в службу поддержки."
		
	ИначеЕсли status = "REJECTED" Тогда
		
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = "В ближайшее время Маркет не планирует размещать товары данной категории. Если у вас есть вопросы по категориям товаров, размещаемым на Маркете, обратитесь в службу поддержки.";
		
	ИначеЕсли status = "OTHER" Тогда
		
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена; 
		Структура.ОписаниеОшибки = "Товар не прошел модерацию по неуточненной причине. Обратитесь в службу поддержки или к вашему менеджеру.";
		
	КонецЕсли;
	
	Возврат Структура;
КонецФункции

Процедура ОбновитьСтатусыНаМодерации(result,shopSku)
	
	offerMappingEntries = result.offerMappingEntries;
	offer = offerMappingEntries[0].offer;
	processingState = offer.processingState;
	Если shopSku = offer.shopSku Тогда
		Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
		СтруктураИзмерений = ПолучитьСтруктуруИзмерений(shopSku);
		Набор.Отбор.Номенклатура.Установить(СтруктураИзмерений.Номенклатура);
		Набор.Отбор.Характеристика.Установить(СтруктураИзмерений.Характеристика);
		Набор.Отбор.Упаковка.Установить(СтруктураИзмерений.Упаковка);
		Набор.Прочитать();
		Если Набор.Количество() Тогда
			Запись = Набор[0];
			Если processingState.Свойство("notes") Тогда 
				СтатусСОписанием = ПолучитьСатусМодерацииСОписанием(processingState.status, Запись.Статус, processingState.notes);
			Иначе
				СтатусСОписанием = ПолучитьСатусМодерацииСОписанием(processingState.status, Запись.Статус);
			КонецЕсли;
			Если offerMappingEntries[0].Свойство("mapping") Тогда
				marketSku = СокрЛП(СтрЗаменить(offerMappingEntries[0].mapping.marketSku,Символ(160),"")); 
				Запись.ИдентификаторТовараПлощадки = marketSku;
			КонецЕсли;
			Запись.Статус = СтатусСОписанием.Статус;
			Запись.ОписаниеОшибки = СтатусСОписанием.ОписаниеОшибки;
			Набор.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОшибкуПриПолученииСтатусовМодерации(shopSku)
КонецПроцедуры
	
Процедура ПолучитьСтатусыМодерации()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	                |	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК ИдентификаторПубликации
	                |ИЗ
	                |	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
					|ГДЕ 
					|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации)";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		ПолучитьСтатусПубликации(Результат.ИдентификаторПубликации);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСтатусыМодерацииТоваровЯндексМаркет() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеСтатусовМодерацииТоваровЯндексМаркет);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Вызов API Яндекс.Маркет. Запуск по расписанию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	//ПараметрыЖурнала.Метаданные    = Сегмент.Метаданные();
	//ПараметрыЖурнала.Данные        = Сегмент;
	
	//ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "", НСтр("ru = 'Запуск'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	Попытка
		ПолучитьСтатусыМодерации();
	Исключение
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              НСтр("ru = 'Ошибка вызова API Яндекс.Маркет'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		              ИнформацияОбОшибке());
		
	КонецПопытки;
	
	//ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "",НСтр("ru = 'Завершение'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

#КонецОбласти

Функция ВJSON(Структура)Экспорт

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();	
	ЗаписьJSON.ПроверятьСтруктуру = Истина;
	ЗаписатьJSON(ЗаписьJSON, Структура);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция ИзJSON(Строка,СтрДат="",ФлСоответствие=Ложь)Экспорт

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	ЗапросСтруктура = ПрочитатьJSON(ЧтениеJSON,ФлСоответствие,СтрДат);
	
	Возврат ЗапросСтруктура;

КонецФункции


