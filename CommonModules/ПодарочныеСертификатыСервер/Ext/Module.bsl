
#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	//Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПодарочныеСертификаты);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ИсторияПодарочныхСертификатов);
		
	КонецЕсли;
	
	// Контроль даты запрета
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ПодарочныеСертификаты);
	КонецЕсли;
			
	Возврат Параметры;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийПодарочныеСертификаты", 
		РегистрыНакопления.ПодарочныеСертификаты.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПодарочныеСертификаты;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),	
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам подарочных сертификатов.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Область ПодарочныеСертификаты
	
	ИмяТаблицы = "Таблица" + "ПодарочныеСертификаты";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		
		Движения.ПодарочныеСертификаты.Записывать = Истина;
		Движения.ПодарочныеСертификаты.Загрузить(ТаблицыДляДвижений[ИмяТаблицы]);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ИсторияПодарочныхСертификатов
	
	ИмяТаблицы = "Таблица" + "ИсторияПодарочныхСертификатов";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		
		Движения.ИсторияПодарочныхСертификатов.Записывать = Истина;
		Движения.ИсторияПодарочныхСертификатов.Загрузить(ТаблицыДляДвижений[ИмяТаблицы]);
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Процедура записывает в базу данных подарочный сертификат на основании
// переданной структуры с данными подарочного сертификата.
//
// Параметры:
//  СтруктураДанныхПодарочногоСертификата - см. ПодарочныеСертификатыВызовСервера.ИнициализироватьОписаниеПодарочногоСертификата
//
// Возвращаемое значение:
//  СправочникСсылка.ПодарочныеСертификаты - Зарегистрированный подарочный сертификат.
//
Функция ЗарегистрироватьПодарочныйСертификат(СтруктураДанныхПодарочногоСертификата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодарочныйСертификатОбъект = Справочники.ПодарочныеСертификаты.СоздатьЭлемент();
	
	ПодарочныйСертификатОбъект.Штрихкод      = СтруктураДанныхПодарочногоСертификата.Штрихкод;
	ПодарочныйСертификатОбъект.МагнитныйКод  = СтруктураДанныхПодарочногоСертификата.МагнитныйКод;
	
	ПодарочныйСертификатОбъект.Владелец      = СтруктураДанныхПодарочногоСертификата.ВидПодарочногоСертификата;
	Если ЗначениеЗаполнено(СтруктураДанныхПодарочногоСертификата.СерийныйНомер) Тогда
		ПодарочныйСертификатОбъект.Код = СтруктураДанныхПодарочногоСертификата.СерийныйНомер;
	КонецЕсли;
	
	ПодарочныйСертификатОбъект.Наименование = Строка(ПодарочныйСертификатОбъект.Владелец)
	                                        + ?(ЗначениеЗаполнено(ПодарочныйСертификатОбъект.Штрихкод), " " + Строка(ПодарочныйСертификатОбъект.Штрихкод), "")
	                                        + ?(ЗначениеЗаполнено(ПодарочныйСертификатОбъект.МагнитныйКод), " " + Строка(ПодарочныйСертификатОбъект.МагнитныйКод), "");
	ПодарочныйСертификатОбъект.Записать();
	
	Возврат ПодарочныйСертификатОбъект.Ссылка;
	
КонецФункции

// Функция возвращает тип кода подарочного сертификата, если только он
// используется в видах подарочных сертификатов.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыКодовКарт, Неопределено - Основной тип кода подарочного сертификата.
//
Функция ПолучитьОсновнойТипКодаПодарочногоСертификата() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыПодарочныхСертификатов.ТипКарты КАК ТипКарты
	|ИЗ
	|	Справочник.ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Количество = Выборка.Количество();
	Если Количество = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли Количество = 1 Тогда
		Выборка.Следующий();
		Если Выборка.ТипКарты = Перечисления.ТипыКарт.Штриховая Тогда
			Возврат Перечисления.ТипыКодовКарт.Штрихкод;
		ИначеЕсли Выборка.ТипКарты = Перечисления.ТипыКарт.Магнитная Тогда
			Возврат Перечисления.ТипыКодовКарт.МагнитныйКод;
		ИначеЕсли Выборка.ТипКарты = Перечисления.ТипыКарт.Смешанная Тогда
			Возврат Неопределено;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура проверяет заполнение подарочных сертификатов табличной части "ПодарочныеСертификаты".
//
// Параметры:
//  Объект - ДокументОбъект - Текущий документ.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ПроверитьЗаполнениеПодарочныхСертификатов(Объект, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДопустимыеСтатусы = Новый Массив;
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияПодарочныхСертификатов") Тогда
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.НеАктивирован);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.АннулированиеПодарочныхСертификатов") Тогда
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.Активирован);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.Возвращен);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.ЧастичноПогашен);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.ПолностьюПогашен);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратПодарочныхСертификатов") Тогда
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.Активирован);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатков") 
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковОПродажахЗаПрошлыеПериоды") Тогда
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.НеАктивирован);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЧекККМ") Тогда
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.Активирован);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.ЧастичноПогашен);
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Таблица.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	Таблица.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ПодарочныеСертификаты
	|ИЗ
	|&ПодарочныеСертификаты КАК Таблица
	|;
	|
	|ВЫБРАТЬ
	|	ПодарочныеСертификаты.НомерСтроки КАК НомерСтроки,
	|	ПодарочныеСертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ЕСТЬNULL(ПодарочныеСертификаты.ПодарочныйСертификат.Владелец.Номинал, 0) КАК Номинал,
	|	ЕСТЬNULL(ПодарочныеСертификаты.ПодарочныйСертификат.Владелец.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
	|	ПодарочныеСертификаты.ПодарочныйСертификат.Владелец КАК ВидСертификата,
	|	ПодарочныеСертификаты.ПодарочныйСертификат.Владелец.СтатьяДоходов КАК СтатьяДоходов,
	|	ЕСТЬNULL(ИсторияПодарочныхСертификатовСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован)) КАК Статус,
	|	ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток,0) КАК Остаток,
	|	АктивацияПодарочныхСертификатов.Период КАК ДатаАктивации,
	|	АктивацияПодарочныхСертификатов.Регистратор КАК РегистраторАктивации,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ДЕНЬ, АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, НЕДЕЛЯ, АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, МЕСЯЦ, АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, КВАРТАЛ, АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ГОД, АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ДЕКАДА, АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ПОЛУГОДИЕ, АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		ИНАЧЕ АктивацияПодарочныхСертификатов.Период
	|	КОНЕЦ, ДатаВремя(1,1,1)) КАК ДатаОкончанияДействия
	|ИЗ
	|	ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних(&Дата, ПодарочныйСертификат В (Выбрать Т.ПодарочныйСертификат ИЗ ПодарочныеСертификаты КАК Т)) КАК ИсторияПодарочныхСертификатовСрезПоследних
	|		ПО ПодарочныеСертификаты.ПодарочныйСертификат = ИсторияПодарочныхСертификатовСрезПоследних.ПодарочныйСертификат
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов КАК АктивацияПодарочныхСертификатов
	|		ПО ПодарочныеСертификаты.ПодарочныйСертификат = АктивацияПодарочныхСертификатов.ПодарочныйСертификат
	|			И (АктивацияПодарочныхСертификатов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован))
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&Дата, ПодарочныйСертификат В (Выбрать Т.ПодарочныйСертификат ИЗ ПодарочныеСертификаты КАК Т)) КАК ПодарочныеСертификатыОстатки
	|		ПО ПодарочныеСертификаты.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
	|
	|");
	
	Запрос.УстановитьПараметр("ПодарочныеСертификаты", Объект.ПодарочныеСертификаты.Выгрузить());
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата - 1, ТекущаяДатаСеанса()));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатков") 
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковОПродажахЗаПрошлыеПериоды") Тогда
		РеквизитыВидПодарочногоСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидПодарочногоСертификата, "Номинал, Валюта");
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если (ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатков") 
				Или ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковОПродажахЗаПрошлыеПериоды"))
			И РеквизитыВидПодарочногоСертификата.Номинал < Объект.ПодарочныеСертификаты[Выборка.НомерСтроки - 1].СуммаВВалютеСертификата Тогда
			
			ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""Подарочные сертификаты"" имеет остаток, превышающий номинал %Номинал% %Валюта%.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  Выборка.ПодарочныйСертификат);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номинал%",     РеквизитыВидПодарочногоСертификата.Номинал);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",      РеквизитыВидПодарочногоСертификата.Валюта);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", Выборка.НомерСтроки, "ПодарочныйСертификат"),
				,
				Отказ);
				
		КонецЕсли;
		
		Если (ДопустимыеСтатусы.Найти(Выборка.Статус) = Неопределено
				И ТипЗнч(Объект) <> Тип("ДокументОбъект.ВводОстатков")
				И ТипЗнч(Объект) <> Тип("ДокументОбъект.ВводОстатковОПродажахЗаПрошлыеПериоды"))
			Или (ДопустимыеСтатусы.Найти(Выборка.Статус) = Неопределено 
				И (ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатков")
					Или ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковОПродажахЗаПрошлыеПериоды"))
				И Выборка.РегистраторАктивации <> Объект.Ссылка) Тогда
			
			ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""Подарочные сертификаты"" имеет недопустимый статус ""%Статус%"".'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  Выборка.ПодарочныйСертификат);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%",      Выборка.Статус);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", Выборка.НомерСтроки, "ПодарочныйСертификат"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЧекККМ")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратПодарочныхСертификатов") Тогда
			Если Выборка.ДатаОкончанияДействия < Объект.Дата Тогда
			
				ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""Подарочные сертификаты"" просрочен. Дата окончания действия %ДатаОкончанияДействия%.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",             Выборка.ПодарочныйСертификат);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",            Выборка.НомерСтроки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОкончанияДействия%",  Выборка.ДатаОкончанияДействия);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", Выборка.НомерСтроки, "ПодарочныйСертификат"),
					,
					Отказ);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратПодарочныхСертификатов") Тогда
			Если Не Выборка.Номинал = Выборка.Остаток Тогда
				
				ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""Подарочные сертификаты"" имеет остаток %Остаток% %Валюта% при номинале в %Номинал% %Валюта% и недоступен для возврата.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  Выборка.ПодарочныйСертификат);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Остаток%",     Выборка.Остаток);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",      Выборка.Валюта);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номинал%",     Выборка.Номинал);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", Выборка.НомерСтроки, "ПодарочныйСертификат"),
					,
					Отказ);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")
			И НЕ ЗначениеЗаполнено(Выборка.СтатьяДоходов) Тогда
			
			ТекстОшибки = НСтр("ru='В строке %НомерСтроки% табличной части """"Подарочные сертификаты"""" не заполнены данные вида сертификата %ВидСертификата%. 
									|Заполните статью доходов в виде сертификата.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидСертификата%",  Выборка.ВидСертификата);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  Выборка.ПодарочныйСертификат);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", Выборка.НомерСтроки, "ПодарочныйСертификат"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатков") 
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковОПродажахЗаПрошлыеПериоды") Тогда
		
		ТипКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидПодарочногоСертификата, "ТипКарты");
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Таблица.ВидПодарочногоСертификата КАК ВидПодарочногоСертификата,
		|	Таблица.Штрихкод КАК Штрихкод,
		|	Таблица.МагнитныйКод КАК МагнитныйКод,
		|	Таблица.ДлинаШтрихкода КАК ДлинаШтрихкода,
		|	Таблица.ДлинаМагнитногоКода КАК ДлинаМагнитногоКода,
		|	Таблица.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ Таблица
		|ИЗ
		|	&ПодарочныеСертификаты КАК Таблица
		|;
		|
		|ВЫБРАТЬ
		|	Таблица.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ КорректныеКоды
		|ИЗ
		|	Таблица КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов.ШаблоныКодовПодарочныхСертификатов КАК ШаблоныКодовПодарочныхСертификатов
		|		ПО ШаблоныКодовПодарочныхСертификатов.Ссылка = Таблица.ВидПодарочногоСертификата
		|	И &ПроверитьМагнитныйКод
		|	И &ПроверитьШтрихкод
		|;
		|ВЫБРАТЬ
		|	Таблица.НомерСтроки КАК НомерСтроки,
		|	Таблица.МагнитныйКод КАК МагнитныйКод,
		|	Таблица.Штрихкод КАК Штрихкод
		|ИЗ
		|	Таблица
		|ГДЕ
		|	Таблица.НомерСтроки НЕ В (ВЫБРАТЬ Т.НомерСтроки ИЗ КорректныеКоды КАК Т)
		|");
		
		ПодарочныеСертификаты = Объект.ПодарочныеСертификаты.Выгрузить();
		ПодарочныеСертификаты.Колонки.Добавить("ВидПодарочногоСертификата", Новый ОписаниеТипов("СправочникСсылка.ВидыПодарочныхСертификатов"));
		ПодарочныеСертификаты.Колонки.Добавить("ДлинаШтрихкода",            ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(3,0));
		ПодарочныеСертификаты.Колонки.Добавить("ДлинаМагнитногоКода",       ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(3,0));
		Для Каждого СтрокаТЧ Из ПодарочныеСертификаты Цикл
			СтрокаТЧ.ВидПодарочногоСертификата = Объект.ВидПодарочногоСертификата;
			СтрокаТЧ.ДлинаШтрихкода = СтрДлина(СтрокаТЧ.Штрихкод);
			СтрокаТЧ.ДлинаМагнитногоКода = СтрДлина(СтрокаТЧ.МагнитныйКод);
		КонецЦикла;
		
		ТипКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидПодарочногоСертификата, "ТипКарты");
		Если ТипКарты = Перечисления.ТипыКарт.Магнитная ИЛИ ТипКарты = Перечисления.ТипыКарт.Смешанная Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ПроверитьМагнитныйКод", 
				"И ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаМагнитногоКода <= Таблица.МагнитныйКод
				|	И ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаМагнитногоКода  >= Таблица.МагнитныйКод
				|	И ШаблоныКодовПодарочныхСертификатов.ДлинаМагнитногоКода           = Таблица.ДлинаМагнитногоКода");
		Иначе	
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ПроверитьМагнитныйКод", "");
		КонецЕсли;
		Если ТипКарты = Перечисления.ТипыКарт.Штриховая ИЛИ ТипКарты = Перечисления.ТипыКарт.Смешанная Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ПроверитьШтрихкод", 
				"И ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаШтрихкода <= Таблица.Штрихкод
				|	И ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаШтрихкода  >= Таблица.Штрихкод
				|	И ШаблоныКодовПодарочныхСертификатов.ДлинаШтрихкода           = Таблица.ДлинаШтрихкода");
		Иначе	
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ПроверитьШтрихкод", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПодарочныеСертификаты", ПодарочныеСертификаты);
		
		Если ТипКарты = Перечисления.ТипыКарт.Магнитная Тогда
			ТекстОшибки = НСтр("ru='Магнитный код %МагнитныйКод% в строке %НомерСтроки% табличной части """"Подарочные сертификаты"""" не соответствует требованиям вида подарочного сертификата """"%ВидПодарочногоСертификата%""""'");
		ИначеЕсли ТипКарты = Перечисления.ТипыКарт.Штриховая  Тогда
			ТекстОшибки = НСтр("ru='Штрихкод %Штрихкод% в строке %НомерСтроки% табличной части """"Подарочные сертификаты"""" не соответствует требованиям вида подарочного сертификата """"%ВидПодарочногоСертификата%""""'");
		Иначе
			ТекстОшибки = НСтр("ru='Магнитный код %МагнитныйКод% или штрихкод %Штрихкод% в строке %НомерСтроки% табличной части """"Подарочные сертификаты"""" не соответствует требованиям вида подарочного сертификата """"%ВидПодарочногоСертификата%""""'");
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Текст = ТекстОшибки;
			Текст = СтрЗаменить(Текст, "%ВидПодарочногоСертификата%",             Объект.ВидПодарочногоСертификата);
			Текст = СтрЗаменить(Текст, "%Штрихкод%",     Выборка.Штрихкод);
			Текст = СтрЗаменить(Текст, "%МагнитныйКод%", Выборка.МагнитныйКод);
			Текст = СтрЗаменить(Текст, "%НомерСтроки%",  Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", Выборка.НомерСтроки, "ПодарочныйСертификат"),
				,
				Отказ);
		
		КонецЦикла;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Таблица.Штрихкод КАК Штрихкод,
		|	Таблица.МагнитныйКод КАК МагнитныйКод,
		|	Таблица.НомерСтроки КАК НомерСтроки,
		|	Таблица.СерийныйНомер КАК СерийныйНомер
		|ПОМЕСТИТЬ Таблица
		|ИЗ
		|	&ПодарочныеСертификаты КАК Таблица
		|;
		|
		|ВЫБРАТЬ
		|	Таблица.Штрихкод КАК Штрихкод,
		|	Таблица.МагнитныйКод КАК МагнитныйКод,
		|	Таблица.НомерСтроки КАК НомерСтроки,
		|	Таблица.СерийныйНомер КАК СерийныйНомер,
		|	ЕСТЬNULL(СправочникПодарочныеСертификатыПоШтрихкоду.Ссылка, ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)) КАК ПодарочныйСертификатПоШтрихкоду,
		|	ЕСТЬNULL(СправочникПодарочныеСертификатыПоМагнитномуКоду.Ссылка, ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)) КАК ПодарочныйСертификатПоМагнитномуКоду,
		|	ЕСТЬNULL(СправочникПодарочныйСертификатПоСерийномуНомеру.Ссылка, ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)) КАК ПодарочныйСертификатПоСерийномуНомеру
		|ИЗ
		|	Таблица КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодарочныеСертификаты КАК СправочникПодарочныеСертификатыПоШтрихкоду
		|		ПО СправочникПодарочныеСертификатыПоШтрихкоду.Штрихкод = Таблица.Штрихкод
		|		И СправочникПодарочныеСертификатыПоШтрихкоду.Владелец = &ВидПодарочногоСертификата
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодарочныеСертификаты КАК СправочникПодарочныеСертификатыПоМагнитномуКоду
		|		ПО СправочникПодарочныеСертификатыПоМагнитномуКоду.МагнитныйКод = Таблица.МагнитныйКод
		|		И СправочникПодарочныеСертификатыПоМагнитномуКоду.Владелец = &ВидПодарочногоСертификата
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодарочныеСертификаты КАК СправочникПодарочныйСертификатПоСерийномуНомеру
		|		ПО СправочникПодарочныйСертификатПоСерийномуНомеру.Код = Таблица.СерийныйНомер
		|");
		
		Запрос.УстановитьПараметр("ВидПодарочногоСертификата", Объект.ВидПодарочногоСертификата);
		Запрос.УстановитьПараметр("ПодарочныеСертификаты", Объект.ПодарочныеСертификаты.Выгрузить());
		
		Таблица = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТЧ Из ПодарочныеСертификаты Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ПодарочныйСертификат) Тогда
				
				НайденнаяСтрока = Таблица.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТЧ.НомерСтроки))[0]; // СтрокаТабличнойЧасти
				
				Если ТипКарты = Перечисления.ТипыКарт.Штриховая Тогда
					
					Если НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру <> НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду Тогда
						
						Текст = НСтр("ru='В строке %НомерСтроки% табличной части """"Подарочные сертификаты"""" данные заполнены некорректно.
						                 |Для штрихкода %Штрихкод% сертификат %1%.
						                 |Для серийного номера %СерийныйНомер% сертификат %2%.'");
						Текст = СтрЗаменить(Текст, "%Штрихкод%",      НайденнаяСтрока.Штрихкод);
						Текст = СтрЗаменить(Текст, "%СерийныйНомер%", НайденнаяСтрока.СерийныйНомер);
						Текст = СтрЗаменить(Текст, "%МагнитныйКод%",  НайденнаяСтрока.МагнитныйКод);
						Текст = СтрЗаменить(Текст, "%НомерСтроки%",   НайденнаяСтрока.НомерСтроки);
						Текст = СтрЗаменить(Текст, "%1%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду),НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду,НСтр("ru = 'не найден'")));
						Текст = СтрЗаменить(Текст, "%2%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру),НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру,НСтр("ru = 'не найден'")));
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Текст,
							Объект,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", НайденнаяСтрока.НомерСтроки, "ПодарочныйСертификат"),
							,
							Отказ);
					КонецЕсли;
					
				ИначеЕсли ТипКарты = Перечисления.ТипыКарт.Магнитная Тогда
					
					Если НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру <> НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду Тогда
						
						Текст = НСтр("ru='В строке %НомерСтроки% табличной части """"Подарочные сертификаты"""" данные заполнены некорректно.
						                 |Для магнитного кода %МагнитныйКод% сертификат %1%.
						                 |Для серийного номера %СерийныйНомер% сертификат %2%.'");
						Текст = СтрЗаменить(Текст, "%Штрихкод%",      НайденнаяСтрока.Штрихкод);
						Текст = СтрЗаменить(Текст, "%СерийныйНомер%", НайденнаяСтрока.СерийныйНомер);
						Текст = СтрЗаменить(Текст, "%МагнитныйКод%",  НайденнаяСтрока.МагнитныйКод);
						Текст = СтрЗаменить(Текст, "%НомерСтроки%",   НайденнаяСтрока.НомерСтроки);
						Текст = СтрЗаменить(Текст, "%1%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду),НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду,НСтр("ru = 'не найден'")));
						Текст = СтрЗаменить(Текст, "%2%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру),НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру,НСтр("ru = 'не найден'")));
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Текст,
							Объект,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", НайденнаяСтрока.НомерСтроки, "ПодарочныйСертификат"),
							,
							Отказ);
						
					КонецЕсли;
					
				Иначе
					
					Если НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру <> НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду
						ИЛИ НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру <> НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду Тогда
						
						Текст = НСтр("ru='В строке %НомерСтроки% табличной части """"Подарочные сертификаты"""" данные заполнены некорректно.
						                 |Для магнитного кода %МагнитныйКод% сертификат %1%.
						                 |Для штрихкода %Штрихкод% сертификат %2%.
						                 |Для серийного номера %СерийныйНомер% сертификат %3%.'");
						Текст = СтрЗаменить(Текст, "%Штрихкод%",      НайденнаяСтрока.Штрихкод);
						Текст = СтрЗаменить(Текст, "%СерийныйНомер%", НайденнаяСтрока.СерийныйНомер);
						Текст = СтрЗаменить(Текст, "%МагнитныйКод%",  НайденнаяСтрока.МагнитныйКод);
						Текст = СтрЗаменить(Текст, "%НомерСтроки%",   НайденнаяСтрока.НомерСтроки);
						Текст = СтрЗаменить(Текст, "%1%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду),НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду,НСтр("ru = 'не найден'")));
						Текст = СтрЗаменить(Текст, "%2%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду),НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду,НСтр("ru = 'не найден'")));
						Текст = СтрЗаменить(Текст, "%3%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру),НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру,НСтр("ru = 'не найден'")));
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Текст,
							Объект,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", НайденнаяСтрока.НомерСтроки, "ПодарочныйСертификат"),
							,
							Отказ);
						
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	КлючевыеРеквизиты = Новый Массив;
	КлючевыеРеквизиты.Добавить("ПодарочныйСертификат");
	ОбщегоНазначенияУТ.ПроверитьНаличиеДублейСтрокТЧ(Объект, "ПодарочныеСертификаты", КлючевыеРеквизиты, Отказ, НСтр("ru = 'Подарочные сертификаты'"));
	
КонецПроцедуры

// Процедура выполняет заполнение реквизита "СуммаВВалютеСертификата" в табличной части ПодарочныеСертификаты.
//
// Параметры:
//	ТабличнаяЧасть - ТабличнаяЧасть - подарочные сертификаты.
//	Организация - СправочникСсылка.Организации - Организация документа.
//	Дата - Дата - Дата документа.
//	Валюта - СправочникСсылка.Валюты - Валюта документа.
//
Процедура ЗаполнитьСуммуВВалютеСертификатаВТабличнойЧасти(ТабличнаяЧасть, Организация, Дата, Валюта) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.СуммаВВалютеСертификата КАК СуммаВВалютеСертификата,
	|	ТаблицаДокумента.ПодарочныйСертификат КАК ПодарочныйСертификат
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.СуммаВВалютеСертификата = 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|
	|	ВЫБОР КОГДА ТаблицаДокумента.СуммаВВалютеСертификата = 0 ТОГДА
	|		(ТаблицаДокумента.Сумма *
	|		ЕСТЬNULL(КурсыВалютДокумента.КурсЧислитель, 1) * 
	|		ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1)
	|		) / (
	|		ЕСТЬNULL(КурсыВалют.КурсЧислитель, 1) * 
	|		ЕСТЬNULL(КурсыВалютДокумента.КурсЗнаменатель, 1)
	|		)
	|	ИНАЧЕ
	|		ТаблицаДокумента.СуммаВВалютеСертификата
	|	КОНЕЦ КАК СуммаВВалютеСертификата
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютДокумента
	|	ПО
	|		ИСТИНА
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалют
	|	ПО
	|		ТаблицаДокумента.ПодарочныйСертификат.Владелец.Валюта = КурсыВалют.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	
	Запрос.Параметры.Вставить("ТаблицаДокумента", ТабличнаяЧасть.Выгрузить());
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));
	
	// Получим таблицу документа с рассчитанной суммой взаиморасчетов.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ТабличнаяЧасть.Найти(Выборка.НомерСтроки, "НомерСтроки");
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, ,"НомерСтроки");
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПоискПодарочныхСертификатов

// Выполняет поиск видов подарочных сертификатов, которые могут иметь заданный код и тип кода.
//
// Параметры:
//  КодКарты - Строка - Код карты.
//  ТипКода - ПеречислениеСсылка.ТипыКодовКарт - Тип кода карты.
//
// Возвращаемое значение:
//  Массив - Ссылки на найденные виды подарочных сертификатов.
//
Функция ПолучитьВозможныеВидыПодарочныхСертификатовПоКодуПодарочногоСертификата(КодКарты, ТипКода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыПодарочныхСертификатов = Новый Массив;
	
	Если ТипКода = Перечисления.ТипыКодовКарт.МагнитныйКод Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ШаблоныКодовПодарочныхСертификатов.Ссылка КАК ВидПодарочногоСертификата
		|ИЗ
		|	Справочник.ВидыПодарочныхСертификатов.ШаблоныКодовПодарочныхСертификатов КАК ШаблоныКодовПодарочныхСертификатов
		|ГДЕ
		|	  ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаМагнитногоКода <= &КодКарты
		|	И ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаМагнитногоКода  >= &КодКарты
		|	И ШаблоныКодовПодарочныхСертификатов.ДлинаМагнитногоКода = &ДлинаКода
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоДиапазонаМагнитногоКода");
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ШаблоныКодовПодарочныхСертификатов.Ссылка КАК ВидПодарочногоСертификата
		|ИЗ
		|	Справочник.ВидыПодарочныхСертификатов.ШаблоныКодовПодарочныхСертификатов КАК ШаблоныКодовПодарочныхСертификатов
		|ГДЕ
		|	ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаШтрихкода <= &КодКарты
		|	И ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаШтрихкода >= &КодКарты
		|	И ШаблоныКодовПодарочныхСертификатов.ДлинаШтрихкода = &ДлинаКода
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаШтрихкода");
	КонецЕсли;

	Запрос.УстановитьПараметр("КодКарты",  Строка(КодКарты));
	Запрос.УстановитьПараметр("ДлинаКода", СтрДлина(Строка(КодКарты)));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВидыПодарочныхСертификатов.Добавить(Выборка.ВидПодарочногоСертификата);
	КонецЦикла;
	
	Возврат ВидыПодарочныхСертификатов;
	
КонецФункции

// Выполняет поиск подарочных сертификатов.
//
// Параметры:
//  КодКарты - Строка - Код карты подарочного сертификата.
//  ТипКода - ПеречислениеСсылка.ТипыКодовКарт - Тип кода карты подарочного сертификата.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ЗарегистрированныеПодарочныеСертификаты - Массив из см. ПодарочныеСертификатыВызовСервера.ИнициализироватьОписаниеПодарочногоСертификата - 
//   * НеЗарегистрированныеПодарочныеСертификаты - Массив из см. ПодарочныеСертификатыВызовСервера.ИнициализироватьОписаниеПодарочногоСертификата - 
//
Функция НайтиПодарочныеСертификаты(КодКарты, ТипКода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗарегистрированныеПодарочныеСертификаты = Новый Массив;
	НеЗарегистрированныеПодарочныеСертификаты = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка                            КАК Ссылка,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.ПериодДействия             КАК ПериодДействия,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.КоличествоПериодовДействия КАК КоличествоПериодовДействия,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.Номинал                    КАК Номинал,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.Валюта                     КАК Валюта,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.ТипКарты                   КАК ТипКарты,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.СегментНоменклатуры        КАК СегментНоменклатуры
	|ПОМЕСТИТЬ ВидыПодарочныхСертификатов
	|ИЗ
	|	Справочник.ВидыПодарочныхСертификатов.ШаблоныКодовПодарочныхСертификатов КАК ШаблоныКодовПодарочныхСертификатов
	|ГДЕ
	|	&УсловиеНачалоДиапазона                    <= &КодКарты
	|	И &УсловиеКонецДиапазона                   >= &КодКарты
	|	И &УсловиеДлинаКода                         = &ДлинаКода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодарочныеСертификаты.Ссылка                КАК Ссылка,
	|	ПодарочныеСертификаты.Наименование          КАК Наименование,
	|	ПодарочныеСертификаты.МагнитныйКод          КАК МагнитныйКод,
	|	ПодарочныеСертификаты.Штрихкод              КАК Штрихкод,
	|	ПодарочныеСертификаты.Код                   КАК СерийныйНомер,
	|	ЕСТЬNULL(ИсторияПодарочныхСертификатов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован)) КАК Статус,
	|	ЕСТЬNULL(ОстаткиДенежныхСредствНаПодарочныхСертификатах.СуммаОстаток, 0)                                           КАК Остаток,
	|	
	|	ВидыПодарочныхСертификатов.Ссылка                            КАК ВидПодарочногоСертификата,
	|	ВидыПодарочныхСертификатов.ПериодДействия                    КАК ПериодДействия,
	|	ВидыПодарочныхСертификатов.КоличествоПериодовДействия        КАК КоличествоПериодовДействия,
	|	ВидыПодарочныхСертификатов.Номинал                           КАК Номинал,
	|	ВидыПодарочныхСертификатов.Валюта                            КАК Валюта,
	|	ВидыПодарочныхСертификатов.ТипКарты                          КАК ТипКарты,
	|	ВидыПодарочныхСертификатов.СегментНоменклатуры               КАК СегментНоменклатуры,
	|
	|	ЕСТЬNULL(АктивацияПодарочныхСертификатов.Период, ДатаВремя(1,1,1)) КАК ДатаНачалаДействия,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ДЕНЬ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, НЕДЕЛЯ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, МЕСЯЦ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, КВАРТАЛ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ГОД, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ДЕКАДА, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ПОЛУГОДИЕ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		ИНАЧЕ АктивацияПодарочныхСертификатов.Период
	|	КОНЕЦ, ДатаВремя(1,1,1)) КАК ДатаОкончанияДействия
	|
	|ПОМЕСТИТЬ ПодарочныеСертификаты
	|ИЗ
	|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыПодарочныхСертификатов
	|		ПО ВидыПодарочныхСертификатов.Ссылка  = ПодарочныеСертификаты.Владелец
	|		 И &ИмяПоляКодКарты = &КодКарты
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних(&ТекущаяДата) КАК ИсторияПодарочныхСертификатов
	|		ПО ИсторияПодарочныхСертификатов.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&ТекущаяДата) КАК ОстаткиДенежныхСредствНаПодарочныхСертификатах
	|		ПО ОстаткиДенежныхСредствНаПодарочныхСертификатах.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов КАК АктивацияПодарочныхСертификатов
	|		ПО ПодарочныеСертификаты.Ссылка = АктивацияПодарочныхСертификатов.ПодарочныйСертификат
	|			И (АктивацияПодарочныхСертификатов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован))
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1                                           КАК Порядок,
	|	ПодарочныеСертификаты.Ссылка                КАК Ссылка,
	|	ПодарочныеСертификаты.Наименование          КАК Наименование,
	|	ПодарочныеСертификаты.МагнитныйКод          КАК МагнитныйКод,
	|	ПодарочныеСертификаты.Штрихкод              КАК Штрихкод,
	
	|	ПодарочныеСертификаты.СерийныйНомер         КАК СерийныйНомер,
	|	ПодарочныеСертификаты.Статус                КАК Статус,
	|	ПодарочныеСертификаты.Остаток               КАК Остаток,
	|	
	|	ПодарочныеСертификаты.ВидПодарочногоСертификата         КАК ВидПодарочногоСертификата,
	|	ПодарочныеСертификаты.ПериодДействия                    КАК ПериодДействия,
	|	ПодарочныеСертификаты.КоличествоПериодовДействия        КАК КоличествоПериодовДействия,
	|	ПодарочныеСертификаты.Номинал                           КАК Номинал,
	|	ПодарочныеСертификаты.Валюта                            КАК Валюта,
	|	ПодарочныеСертификаты.ТипКарты                          КАК ТипКарты,
	|	ПодарочныеСертификаты.СегментНоменклатуры               КАК СегментНоменклатуры,
	|	ПодарочныеСертификаты.ДатаНачалаДействия                КАК ДатаНачалаДействия,
	|	ПодарочныеСертификаты.ДатаОкончанияДействия             КАК ДатаОкончанияДействия
	|ИЗ
	|	ПодарочныеСертификаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                         КАК Порядок,
	|	ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)   КАК Ссылка,
	|	Неопределено                                              КАК Наименование,
	|	&МагнитныйКод                                             КАК МагнитныйКод,
	|	&Штрихкод                                                 КАК Штрихкод,
	|	Неопределено                                                       КАК СерийныйНомер,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован) КАК Статус,
	|	0                                                                  КАК Остаток,
	|	
	|	ВидыПодарочныхСертификатов.Ссылка                            КАК ВидПодарочногоСертификата,
	|	ВидыПодарочныхСертификатов.ПериодДействия                    КАК ПериодДействия,
	|	ВидыПодарочныхСертификатов.КоличествоПериодовДействия        КАК КоличествоПериодовДействия,
	|	ВидыПодарочныхСертификатов.Номинал                           КАК Номинал,
	|	ВидыПодарочныхСертификатов.Валюта                            КАК Валюта,
	|	ВидыПодарочныхСертификатов.ТипКарты                          КАК ТипКарты,
	|	ВидыПодарочныхСертификатов.СегментНоменклатуры               КАК СегментНоменклатуры,
	|	
	|	&ТекущаяДата КАК ДатаНачалаДействия,
	|	ВЫБОР
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, КВАРТАЛ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕКАДА, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ПОЛУГОДИЕ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		ИНАЧЕ &ТекущаяДата
	|	КОНЕЦ КАК ДатаОкончанияДействия
	|ИЗ
	|	ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов
	|ГДЕ
	|	(НЕ ВидыПодарочныхСертификатов.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.ВидПодарочногоСертификата
	|				ИЗ
	|					ПодарочныеСертификаты КАК Т))
	|УПОРЯДОЧИТЬ ПО
	|	Порядок ВОЗР
	|");
	
	Если ТипКода = Перечисления.ТипыКодовКарт.МагнитныйКод Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеНачалоДиапазона", "ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаМагнитногоКода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеКонецДиапазона",  "ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаМагнитногоКода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеДлинаКода",       "ШаблоныКодовПодарочныхСертификатов.ДлинаМагнитногоКода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ИмяПоляКодКарты",        "ПодарочныеСертификаты.МагнитныйКод");
		
		Запрос.УстановитьПараметр("Штрихкод",     "");
		Запрос.УстановитьПараметр("МагнитныйКод", КодКарты);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеНачалоДиапазона", "ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаШтрихкода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеКонецДиапазона",  "ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаШтрихкода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеДлинаКода",       "ШаблоныКодовПодарочныхСертификатов.ДлинаШтрихкода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ИмяПоляКодКарты",        "ПодарочныеСертификаты.Штрихкод");
		
		Запрос.УстановитьПараметр("Штрихкод",     КодКарты);
		Запрос.УстановитьПараметр("МагнитныйКод", "");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КодКарты",    КодКарты);
	Запрос.УстановитьПараметр("ДлинаКода",   СтрДлина(КодКарты));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ПодарочныеСертификатыВызовСервера.ИнициализироватьОписаниеПодарочногоСертификата();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			ЗарегистрированныеПодарочныеСертификаты.Добавить(НоваяСтрока);
		Иначе
			НеЗарегистрированныеПодарочныеСертификаты.Добавить(НоваяСтрока);
		КонецЕсли;
	
	КонецЦикла;
	
	ВозвращаемоеЗначение = Новый Структура("ЗарегистрированныеПодарочныеСертификаты, НеЗарегистрированныеПодарочныеСертификаты");
	ВозвращаемоеЗначение.ЗарегистрированныеПодарочныеСертификаты   = ЗарегистрированныеПодарочныеСертификаты;
	ВозвращаемоеЗначение.НеЗарегистрированныеПодарочныеСертификаты = НеЗарегистрированныеПодарочныеСертификаты;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет поиск подарочных сертификатов по магнитному коду.
//
// Параметры:
//  МагнитныйКод - Строка - Магнитный код.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ЗарегистрированныеПодарочныеСертификаты - Массив из см. ПодарочныеСертификатыВызовСервера.ИнициализироватьОписаниеПодарочногоСертификата
//   * НеЗарегистрированныеПодарочныеСертификаты - Массив из см. ПодарочныеСертификатыВызовСервера.ИнициализироватьОписаниеПодарочногоСертификата
//
Функция НайтиПодарочныеСертификатыПоМагнитномуКоду(МагнитныйКод) Экспорт
	
	Возврат НайтиПодарочныеСертификаты(МагнитныйКод, Перечисления.ТипыКодовКарт.МагнитныйКод);
	
КонецФункции

#КонецОбласти

#Область ОтражениеДвиженийВРегистрах

// Процедура формирования движений по регистру "ДвиженияДенежныеСредстваКонтрагент"
// для документов "РеализацияПодарочныхСертификатов" и "ВозвратПодарочныхСертификатов".
// Определяет какие сертификаты оплачены картой
// (распределяет сумму оплаты по карте по стоимостям сертификатов в порядке следования серификатов).
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица, содержащая таблицы движений.
// 
Функция ПодготовитьТаблицуДвиженияДенежныеСредстваКонтрагент(ОплатаПодарочныеСертификаты, ОплатаПлатежныеКарты) Экспорт
	
	ТаблицаДвижений = РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.СоздатьНаборЗаписей().ВыгрузитьКолонки();
		
	ВсеОплатыПлатежнымиКартамиРаспределены = Ложь;
	Для Каждого Сертификат Из ОплатаПодарочныеСертификаты Цикл
		
		Если Не ВсеОплатыПлатежнымиКартамиРаспределены Тогда
			СтруктураПоиска = Новый Структура("ОплатаОбработана", Ложь);
			НеОбработанныеОплатыПлатежнымиКартами = ОплатаПлатежныеКарты.НайтиСтроки(СтруктураПоиска);
			ВсеОплатыПлатежнымиКартамиРаспределены = (НеОбработанныеОплатыПлатежнымиКартами.Количество() = 0);
			Для Каждого СтрокаОплаты Из НеОбработанныеОплатыПлатежнымиКартами Цикл
				
				Сумма =     ВзаиморасчетыСервер.СписатьСумму(СтрокаОплаты.СуммаОплатыВВалютеПлатежа, Сертификат.СуммаОплатыВВалютеПлатежа);
				СуммаУпр =  ВзаиморасчетыСервер.СписатьСумму(СтрокаОплаты.СуммаОплаты,               Сертификат.СуммаОплаты);
				СуммаРегл = ВзаиморасчетыСервер.СписатьСумму(СтрокаОплаты.СуммаОплатыРегл,           Сертификат.СуммаОплатыРегл);
				
				// Часть стоимости оплатим картой
				Если Сумма > 0 Тогда
					
					НовоеДвижение = ТаблицаДвижений.Добавить();
					ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаОплаты);
					НовоеДвижение.ОбъектРасчетов = Сертификат.ОбъектРасчетов;
					
					НовоеДвижение.СуммаОплаты = СуммаУпр;
					НовоеДвижение.СуммаОплатыРегл = СуммаРегл;
					НовоеДвижение.СуммаОплатыВВалютеПлатежа = Сумма;
					НовоеДвижение.СуммаОплатыВВалютеВзаиморасчетов = Сумма;
					
					НовоеДвижение.СуммаПредоплаты = СуммаУпр;
					НовоеДвижение.СуммаПредоплатыРегл = СуммаРегл;
					НовоеДвижение.СуммаПредоплатыВВалютеПлатежа = Сумма;
					НовоеДвижение.СуммаПредоплатыВВалютеВзаиморасчетов = Сумма;
					
				КонецЕсли;	
				
				СтрокаОплаты.ОплатаОбработана = (СтрокаОплаты.СуммаОплатыВВалютеПлатежа = 0);
				
				Если Сертификат.СуммаОплатыВВалютеПлатежа = 0 Тогда
					// Полностью покрыли стоимость сертификата, переходим к другому
					Прервать;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
			
		// Оставшуюся стоимость сертификата закроем наличными
		Если Сертификат.СуммаОплатыВВалютеПлатежа > 0 Тогда
			
			НовоеДвижение = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, Сертификат);
			
			НовоеДвижение.СуммаОплатыВВалютеВзаиморасчетов = НовоеДвижение.СуммаОплатыВВалютеПлатежа;
			
			НовоеДвижение.СуммаПредоплаты = НовоеДвижение.СуммаОплаты;
			НовоеДвижение.СуммаПредоплатыРегл = НовоеДвижение.СуммаОплатыРегл;
			НовоеДвижение.СуммаПредоплатыВВалютеПлатежа = НовоеДвижение.СуммаОплатыВВалютеПлатежа;
			НовоеДвижение.СуммаПредоплатыВВалютеВзаиморасчетов = НовоеДвижение.СуммаОплатыВВалютеВзаиморасчетов;
			
		КонецЕсли;
		
	КонецЦикла;	
		
	Возврат ТаблицаДвижений;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область АннулированиеСертификатов

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_АннулированиеПодарочныхСертификатов(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.АннулированиеПодарочныхСертификатов,,,,
		Перечисления.ОперацииЗакрытияМесяца.ОтражениеЗарплатыВФинансовомУчете);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Аннулировать'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ПодарочныеСертификатыСервер.Использование_АннулированиеПодарочныхСертификатов");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"ПодарочныеСертификатыСервер.Выполнить_АннулированиеПодарочныхСертификатов");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.АннулированиеПодарочныхСертификатов.Формы.ФормаСписка.ПолноеИмя());
		
КонецПроцедуры

// Обработчики этапа.

Процедура Использование_АннулированиеПодарочныхСертификатов(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru='Подарочные сертификаты не используются.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = Документы.АннулированиеПодарочныхСертификатов.ТекстЗапросаСертификатыКАннулированию() + Символы.ПС + ";" + Символы.ПС + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Аннулирование.Организация КАК Организация
	|ПОМЕСТИТЬ АннулированныеСертификаты
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов КАК Аннулирование
	|ГДЕ
	|	Аннулирование.Организация В(&МассивОрганизаций)
	|	И Аннулирование.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аннулирование.Проведен";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.СертификатыКАннулированию > 0 Тогда
			
		ЗакрытиеМесяцаСервер.ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(
			ПараметрыОбработчика,
			НСтр("ru='По организации ""%1"" за период %2 есть сертификаты, которые необходимо аннулировать.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Запрос,
			"СертификатыКАннулированию",
			Ложь,
			Истина);
		
	ИначеЕсли РазмерыВременныхТаблиц.АннулированныеСертификаты = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет сертификатов, которые необходимо аннулировать.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_АннулированиеПодарочныхСертификатов(ПараметрыОбработчика) Экспорт
	
	Документы.АннулированиеПодарочныхСертификатов.АннулироватьПодарочныеСертификатыПриЗакрытииМесяца(
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти