
#Область СлужебныйПрограммныйИнтерфейс

// Создает документ оплаты по одной или нескольким заявкам на расход денежных средств.
//
// Параметры:
//	МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//	ИмяДокумента - Строка - имя документа в метаданных, который будет создан на основании заявок.
//
Процедура СоздатьДокументОплатыНаОснованииЗаявокНаРасходДС(МассивСсылок, ИмяДокумента) Экспорт
	
	ФормаОплаты = "";
	Если ИмяДокумента = "СписаниеБезналичныхДенежныхСредств" Тогда
		ФормаОплаты = "Безналичная";
	ИначеЕсли ИмяДокумента = "РасходныйКассовыйОрдер" Тогда
		ФормаОплаты = "Наличная";
	КонецЕсли;
	
	ОчиститьСообщения();
	
	РаспределениеОплаты = Неопределено;
	Если ДенежныеСредстваВызовСервера.СформироватьДанныеЗаполненияОплаты(МассивСсылок, ФормаОплаты, РаспределениеОплаты) Тогда
		
		Если ИмяДокумента = "ОперацияПоПлатежнойКарте" Тогда
			ОткрытьФорму("Документ.ОперацияПоПлатежнойКарте.ФормаОбъекта", Новый Структура("Основание", МассивСсылок[0]));
		Иначе
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ДокументОснование",                     МассивСсылок);
			ДополнительныеПараметры.Вставить("НесколькоЗаявокНаРасходованиеСредств",  МассивСсылок.Количество() > 1);
			ДополнительныеПараметры.Вставить("ИмяДокумента",                          ИмяДокумента);
			ДополнительныеПараметры.Вставить("ФормаОплаты",                           ФормаОплаты);
			
			Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораБанковскогоСчетаКассы", ЭтотОбъект, ДополнительныеПараметры);
			
			Если РаспределениеОплаты.Количество() > 1 Тогда
				ДополнительныеПараметры.Вставить("ЗакрыватьПриВыборе", Истина);
				ОткрытьФорму("Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.РаспределениеОплаты", ДополнительныеПараметры,,,,,
					Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			ИначеЕсли РаспределениеОплаты.Количество() = 1 Тогда
				ВыполнитьОбработкуОповещения(Оповещение,
					Новый Структура("БанковскийСчетКасса, Сумма", РаспределениеОплаты[0].БанковскийСчетКасса, РаспределениеОплаты[0].Сумма));
			Иначе
				ВыполнитьОбработкуОповещения(Оповещение, Новый Структура("БанковскийСчетКасса, Сумма", Неопределено, 0));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПослеВыбораБанковскогоСчетаКассы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ИмяФормы = "Документ." + ДополнительныеПараметры.ИмяДокумента + ".ФормаОбъекта";
		ДополнительныеПараметры.Вставить("БанковскийСчетКасса", Результат.БанковскийСчетКасса);
		ДополнительныеПараметры.Вставить("Сумма", Результат.Сумма);
		ОткрытьФорму(ИмяФормы, Новый Структура("Основание", ДополнительныеПараметры));
	КонецЕсли;
	
КонецПроцедуры

// Создает платежные документы на основании выделенных строк графика платежей
//
// Параметры:
//    ЭлементФормы - ТаблицаФормы - Элемент с выделенными строками графика оплаты
//    ТипДокумента - Строка - Тип создаваемого документа. Если не задан, определяется автоматически.
//
Процедура ОплатитьСтрокиГрафика(ЭлементФормы, ТипДокумента = "") Экспорт
	
	СтрокиГрафика = ЭлементФормы.ВыделенныеСтроки;
	Если СтрокиГрафика.Количество() Тогда
		Результат = ДенежныеСредстваВызовСервера.ОплатитьСтрокиГрафика(СтрокиГрафика, ТипДокумента);
		ОткрытьРезультатОплатыСтрокГрафика(ЭлементФормы, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму помощника создания, если создано несколько документов, либо форму одного документа.
//
// Параметры:
//    ЭлементФормы - ТаблицаФормы - Элемент с выделенными строками графика оплаты
//    Результат - Структура - Результат создания документов оплаты.
//
Процедура ОткрытьРезультатОплатыСтрокГрафика(ЭлементФормы, Результат) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ОплатаСтрокГрафикаЗавершение", ЭтотОбъект, ЭлементФормы);
	
	Если ДенежныеСредстваКлиентЛокализация.ОткрытьРезультатОплатыСтрокГрафика(ЭлементФормы, Результат, Оповещение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ОткрыватьФормуПомощника Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЭлементФормы", ЭлементФормы);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииСозданияПлатежныхДокументов", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.Вставить("ТекстСообщения", НСтр("ru = 'Создание платежных документов...'"));
		ПараметрыОжидания.Вставить("ВыводитьПрогрессВыполнения", Истина);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат.ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	Иначе
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("Основание", Результат.ДокументКСозданию.ДанныеЗаполнения);
		
		ОткрытьФорму("Документ." + Результат.ДокументКСозданию.ТипДокумента + ".ФормаОбъекта",
			СтруктураПараметры,
			ЭлементФормы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗавершенииСозданияПлатежныхДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		Возврат;
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		ОткрытьФорму("ОбщаяФорма.ПомощникФормированияПлатежныхДокументов",,
			ДополнительныеПараметры.ЭлементФормы,,,,
			Новый ОписаниеОповещения("ОплатаСтрокГрафикаЗавершение", ЭтотОбъект, ДополнительныеПараметры.ЭлементФормы),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Обработка завершения формирования документов по строкам графика платежей
// 
//  Параметры:
//     Результат - Булево - Признак успешного завершения на сервере
//     ЭлементФормы - ТаблицаФормы - Элемент формы, в котором была инициирована процедура формирования документов
//
Процедура ОплатаСтрокГрафикаЗавершение(Результат, ЭлементФормы) Экспорт
	
	Если Результат <> Неопределено И Результат Тогда
		ЭлементФормы.Обновить();
		Оповестить("ОплаченыСтрокиГрафикаПлатежей",, ЭлементФормы);
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает дату авансового отчета
//
// Параметры:
//    ПериодАвансовогоОтчета - Строка, Дата - Выбранный пользователем способ определения даты
//    Дата - Дата - Дата выдачи аванса
//
// Возвращаемое значение:
//    Дата - Дата авансового отчета
//
Функция ПересчитатьДатуАвансовогоОтчета(ПериодАвансовогоОтчета, Дата) Экспорт
	
	ДатаАвансовогоОтчета = Неопределено;
	
	Если ПериодАвансовогоОтчета = НСтр("ru='Через неделю'") Тогда
		ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()) + 7 * 24 * 3600;
		
	ИначеЕсли ПериодАвансовогоОтчета = НСтр("ru='Через две недели'") Тогда
		ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()) + 14 * 24 * 3600;
		
	ИначеЕсли ПериодАвансовогоОтчета = НСтр("ru='Через месяц'") Тогда
		ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()) + 30 * 24 * 3600;
		
	ИначеЕсли ТипЗнч(ПериодАвансовогоОтчета) = Тип("Дата") Тогда
		Если ПериодАвансовогоОтчета < Дата Тогда
			ПериодАвансовогоОтчета = Дата;
		КонецЕсли;
		
		ДатаАвансовогоОтчета = ПериодАвансовогоОтчета;
	КонецЕсли;
	
	Возврат ДатаАвансовогоОтчета;
	
КонецФункции

Процедура ПериодАвансовогоОтчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Форма, Дата, ОповещениеФормы) Экспорт
	
	Если ВыбранноеЗначение = "ДоДаты" Тогда
		
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораДаты", ЭтотОбъект,
			Новый Структура("Форма, Дата, ОповещениеФормы", Форма, Дата, ОповещениеФормы));
		ПоясняющийТекст = НСтр("ru='Выберите дату отчета по выдаваемому авансу'") + " ";
		ОткрытьФорму("ОбщаяФорма.ВыборДаты",
			Новый Структура("ПоясняющийТекст, НачальноеЗначение", ПоясняющийТекст),,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) <> Тип("Дата") Тогда
		
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("Строка");
		Элемент.КнопкаВыбора = Ложь;
		Элемент.РедактированиеТекста = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПослеВыбораДаты(ВыбраннаяДата, Параметры) Экспорт
	
	Форма = Параметры.Форма; // ФормаКлиентскогоПриложения
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	Дата = Параметры.Дата;
	
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		Если ВыбраннаяДата < Дата Тогда
			ВыбраннаяДата = Дата;
		КонецЕсли;
		
		Объект.ДатаАвансовогоОтчета = ВыбраннаяДата;
		Форма.ПериодАвансовогоОтчета = ВыбраннаяДата;
		
		Элементы.ПериодАвансовогоОтчета.ОграничениеТипа = Новый ОписаниеТипов("Дата");
		Элементы.ПериодАвансовогоОтчета.КнопкаВыбора = Истина;
		Элементы.ПериодАвансовогоОтчета.РедактированиеТекста = Истина;
	Иначе
		
		Если ТипЗнч(Форма.ПериодАвансовогоОтчета) = Тип("Дата") Тогда
			Возврат;
		КонецЕсли;
		
		Если Объект.ДатаАвансовогоОтчета = ТекущаяДата() + 7 * 24 * 3600 Тогда
			Форма.ПериодАвансовогоОтчета = НСтр("ru='Через неделю'");
		ИначеЕсли Объект.ДатаАвансовогоОтчета = ТекущаяДата() + 14 * 24 * 3600 Тогда
			Форма.ПериодАвансовогоОтчета = НСтр("ru='Через две недели'");
		ИначеЕсли Объект.ДатаАвансовогоОтчета = ДобавитьМесяц(ТекущаяДата(), 1) Тогда
			Форма.ПериодАвансовогоОтчета = НСтр("ru='Через месяц'");
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОповещениеФормы);
	
КонецПроцедуры

Процедура ВалютыИКурсПлатежаНажатие(Форма, Элемент, СтандартнаяОбработка, Оповещение = Неопределено) Экспорт
	
	Попытка
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр",          Форма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("ВалютаДокумента",         Объект.Валюта);
	ПараметрыФормы.Вставить("СуммаДокумента",          Объект.СуммаДокумента);
	ПараметрыФормы.Вставить("ВалютаВзаиморасчетов",    Форма.ВалютаВзаиморасчетов);
	ПараметрыФормы.Вставить("СуммаВзаиморасчетов",     Форма.СуммаВзаиморасчетов);
	ПараметрыФормы.Вставить("КурсЧислительВзаиморасчетов",      Форма.КурсЧислительВзаиморасчетов);
	ПараметрыФормы.Вставить("КурсЗнаменательВзаиморасчетов", Форма.КурсЗнаменательВзаиморасчетов);
	ПараметрыФормы.Вставить("ВалютаРеглУчета",         Форма.ВалютаРеглУчета);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ОповещениеПослеЗавершения", Оповещение);
	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВалютыИКурсПлатежаНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ВалютыИКурсПлатежа", ПараметрыФормы, Форма,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

// Обработчик завершения редактирования курса и валют документа.
// 
Процедура ВалютыИКурсПлатежаНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатыОбработки = Новый Структура;
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Если ДополнительныеПараметры.ОповещениеПослеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеЗавершения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	ПараметрыФормы = ДополнительныеПараметры.ПараметрыФормы;
	ВалютаРеглУчета = ДополнительныеПараметры.ПараметрыФормы.ВалютаРеглУчета;
	
	ИзмененныеРеквизиты = Новый Массив;
	Для каждого КлючИЗначение Из Результат Цикл
		Если КлючИЗначение.Значение <> ПараметрыФормы[КлючИЗначение.Ключ] Тогда
			ИзмененныеРеквизиты.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	РезультатыОбработки.Вставить("ИзмененныеРеквизиты", ИзмененныеРеквизиты);
	
	Если ИзмененныеРеквизиты.Количество() Тогда
		
		Форма.Модифицированность = Истина;
		
		Если ИзмененныеРеквизиты.Найти("КурсЧислительВзаиморасчетов") <> Неопределено Тогда
			Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
				СтрокаРасшифровки.КурсЧислительВзаиморасчетов = Результат.КурсЧислительВзаиморасчетов;
			КонецЦикла;
		КонецЕсли;
		
		Если ИзмененныеРеквизиты.Найти("КурсЗнаменательВзаиморасчетов") <> Неопределено Тогда
			Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов = Результат.КурсЗнаменательВзаиморасчетов;
			КонецЦикла;
		КонецЕсли;
		
		Если ИзмененныеРеквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
			Объект.СуммаДокумента = Результат.СуммаДокумента;
			ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Результат.СуммаДокумента, Ложь);
		КонецЕсли;
		
		Если ИзмененныеРеквизиты.Найти("СуммаДокумента") <> Неопределено
			И ИзмененныеРеквизиты.Найти("СуммаВзаиморасчетов") = Неопределено Тогда
			
			Для каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
				ДенежныеСредстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
					СтрокаТЧ, Объект.Валюта, ВалютаРеглУчета);
			КонецЦикла;
		КонецЕсли;
		
		Если ИзмененныеРеквизиты.Найти("СуммаВзаиморасчетов") <> Неопределено
			Или Объект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов") <> Результат.СуммаВзаиморасчетов Тогда
			
			Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
				Объект.РасшифровкаПлатежа[0].СуммаВзаиморасчетов = Результат.СуммаВзаиморасчетов;
			Иначе
				Для каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
					ДенежныеСредстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
						СтрокаТЧ, Объект.Валюта, Форма.ВалютаРеглУчета);
				КонецЦикла;
				
				Если Объект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов") <> Результат.СуммаВзаиморасчетов Тогда
					
					СуммаРазницы = Объект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов") - Результат.СуммаВзаиморасчетов;
					НомерСтроки = Объект.РасшифровкаПлатежа.Количество() - 1;
					
					Пока НомерСтроки >= 0 Цикл
						СтрокаРасшифровки = Объект.РасшифровкаПлатежа[НомерСтроки];
						Если СтрокаРасшифровки.СуммаВзаиморасчетов = СуммаРазницы Тогда
							Объект.РасшифровкаПлатежа.Удалить(НомерСтроки);
							Прервать;
						ИначеЕсли СтрокаРасшифровки.СуммаВзаиморасчетов > СуммаРазницы Тогда
							СтрокаРасшифровки.СуммаВзаиморасчетов = СтрокаРасшифровки.СуммаВзаиморасчетов - СуммаРазницы;
							Если СтрокаРасшифровки.ВалютаВзаиморасчетов = Объект.Валюта Тогда
								СтрокаРасшифровки.Сумма = СтрокаРасшифровки.СуммаВзаиморасчетов;
							КонецЕсли;
							Прервать;
						ИначеЕсли СтрокаРасшифровки.СуммаВзаиморасчетов < СуммаРазницы Тогда
							СуммаРазницы = СуммаРазницы - СтрокаРасшифровки.СуммаВзаиморасчетов;
							Объект.РасшифровкаПлатежа.Удалить(НомерСтроки);
						КонецЕсли;
						НомерСтроки = НомерСтроки - 1;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеПослеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеЗавершения, РезультатыОбработки);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает доступность редактирования колонки "Сумма взаиморасчетов" в табличной части "Расшифровка платежа"
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, на которой расположена колонка "Сумма взаиморасчетов"
//  ВалютаДокумента - СправочникСсылка.Валюты - текущая валюта объекта
//
Процедура УстановитьДоступностьЭлементаРасшифровкаПлатежаСуммаВзаиморасчетов(Форма, ВалютаДокумента) Экспорт

	ЯчейкаТабличнойЧасти = Форма.Элементы.РасшифровкаПлатежа.ТекущийЭлемент;
	
	Если ЯчейкаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЯчейкаТабличнойЧасти.Имя <> "РасшифровкаПлатежаСуммаВзаиморасчетов" Тогда
		Возврат;
	Конецесли;
	
	СтрокаТабличнойЧасти = Форма.Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		ЯчейкаТабличнойЧасти.ТолькоПросмотр = СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ВалютаДокумента;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
