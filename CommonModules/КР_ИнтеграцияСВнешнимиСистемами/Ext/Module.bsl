
////////////////////////////////////////////////////
//// Общий модуль "КР_ИнтеграцияСВнешнимиСистемами"
//// Создан: 25.01.2023, Маскаев П.Ю., КРОК, JIRA№ A2105505-489
//// Разработка по ФДР С51.006 Интеграция PLM - УТ11

#Область ПрограммныйИнтерфейс        

// << 02.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-1153
Функция ПолучитьМодульAPI(ИдентификаторAPI, Результат) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(Т.Ссылка) КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.Ссылка) КАК КоличествоРазличных
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК Т
	|ГДЕ
	|	Т.Наименование = &ИдентификаторAPI
	|	И НЕ Т.ПометкаУдаления
	|	И Т.Публикация <> ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена)");    
	
	Запрос.УстановитьПараметр("ИдентификаторAPI", ИдентификаторAPI);
	РезультатЗапроса = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если Не ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ТекстСообщения = НСтр("ru = 'Не найден модуль интеграции по идентификатору ""%1""'"); 
		Результат = СтрШаблон(ТекстСообщения, ИдентификаторAPI);
		Возврат Ложь;
	КонецЕсли;	

	Если ВыборкаДетальныеЗаписи.КоличествоРазличных > 1 Тогда 
		ТекстСообщения = НСтр("ru = 'Найдено более одного модуля интеграции по идентификатору ""%1""'"); 
		Результат = СтрШаблон(ТекстСообщения, ИдентификаторAPI);
		Возврат Ложь;
	КонецЕсли;	   
	
	Результат = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ВыборкаДетальныеЗаписи.Ссылка);
	Если Результат = Неопределено Тогда 
		ТекстСообщения = НСтр("ru = 'Не удалось создать модуль интеграции по идентификатору ""%1""'"); 
		Результат = СтрШаблон(ТекстСообщения, ИдентификаторAPI);
		Возврат Ложь;
	КонецЕсли;	   
	
	Возврат Истина;
	
КонецФункции // >> 02.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-1153	

// --> Евлахов Игорь Николаевич (Начало) 17.01.2024
// Задача #3518
Функция ПолучитьВнешнююОбработкуСБИС(Результат) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
		
	ВнешняяОбработкаСБИС = КР_ДополнительныеНастройкиПовтИсп.Значение("ВнешняяОбработкаСБИС", Ложь);
	
	Если ЗначениеЗаполнено(ВнешняяОбработкаСБИС) Тогда
		Результат = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ВнешняяОбработкаСБИС);
		Если Результат = Неопределено Тогда 
			Результат = НСтр("ru = 'Не удалось создать модуль ""Внешняя обработка СБИС""'");			
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Результат = НСтр("ru = 'Не удалось получить настройку ""Внешняя обработка СБИС""'");
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Истина;
	
КонецФункции
// <-- Евлахов Игорь Николаевич (Конец) 17.01.2024

#Область PLM_API

Функция PLM_ПолучитьДанныеКИЗ(ДанныеКИЗ, ПараметрыЗапроса) Экспорт
	
	Перем ДокументСсылка;
	Перем GUIDДокумента;
	
	Если Не ПараметрыЗапроса.Свойство("ДокументСсылка", ДокументСсылка)
		Или Не ПараметрыЗапроса.Свойство("ИдентификаторДокумента", GUIDДокумента) Тогда
		ТекстСообщения = НСтр("ru = 'Не установлены параметры запроса к серверу'");
		
		ДобавитьВЛог("PLM_API", ТекстСообщения, "ПараметрыЗапроса");
		
		Возврат Ложь;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Если ТипДокумента = Тип("ДокументСсылка.ЗаказНаПеремещение")
		Или ТипДокумента = Тип("ДокументСсылка.ЗаказКлиента")  Тогда
		ЧастьЗапроса = "guid";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЧастьЗапроса = "rguid";
	Иначе
		ТекстСообщения = НСтр("ru = 'Переданный тип ""%1"" не обрабатывается для обращения к PLM'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(ТипДокумента));
		
		ДобавитьВЛог("PLM_API", ТекстСообщения, "ПараметрыЗапроса");
		
		Возврат Ложь;
	КонецЕсли;
	
	HTTPСоединение = PLM_УстановитьСоединение();
	Если HTTPСоединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	АдресAPI = "/new_bulk/api/ecom_dm.php";
	ПараметрыМетода = "?action=get&%1=%2";
	ПараметрыМетода = СтрШаблон(ПараметрыМетода, ЧастьЗапроса, GUIDДокумента);
	
	РезультатЗапроса = ВыполнитьGETЗапрос(HTTPСоединение, АдресAPI + ПараметрыМетода, "PLM_API");
	Если РезультатЗапроса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не PLM_ОбработатьСоответствиеКИЗ(РезультатЗапроса, ДанныеКИЗ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция PLM_ПолучитьКИЗТовара(РезультатЗапроса, ПараметрыЗапроса) Экспорт
	
	Перем ШтрихкодТовара;
	Перем GUIDМагазина;
	
	Если Не ПараметрыЗапроса.Свойство("Штрихкод", ШтрихкодТовара)
		Или Не ПараметрыЗапроса.Свойство("ИдентификаторМагазина", GUIDМагазина) Тогда
		ТекстСообщения = НСтр("ru = 'Не установлены параметры запроса к серверу'");
		
		ДобавитьВЛог("PLM_API", ТекстСообщения, "ПараметрыЗапроса");
		
		Возврат Ложь;
	КонецЕсли;
	
	HTTPСоединение = PLM_УстановитьСоединение();
	Если HTTPСоединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	АдресAPI = "/new_bulk/api/dm_1c_v2.php";
	ПараметрыМетода = "?action=get&barcode=%1&store=%2";
	ПараметрыМетода = СтрШаблон(ПараметрыМетода, ШтрихкодТовара, GUIDМагазина);
	
	РезультатЗапроса = ВыполнитьGETЗапрос(HTTPСоединение, АдресAPI + ПараметрыМетода, "PLM_API");
	Если РезультатЗапроса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// #4100.. Фомин Д.Ю. 24.05.2024.
Функция PLM_ПакетноеПолучениеКодовDataMatrix(РезультатЗапроса, СтрокаПараметров) Экспорт
	
	HTTPСоединение = PLM_УстановитьСоединение();
	Если HTTPСоединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	АдресAPI = "/new_bulk/api/dm_1c_v2.php";
	ПараметрыМетода = "?action=get_old_v2&data=%1";
	ПараметрыМетода = СтрШаблон(ПараметрыМетода, СтрокаПараметров);
	
	РезультатЗапроса = ВыполнитьGETЗапрос(HTTPСоединение, АдресAPI + ПараметрыМетода, "PLM_API");
	Если РезультатЗапроса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции
// ..#4100

#КонецОбласти

#Область Обмен_Artix

// << 01.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
//
// Параметры:
//  ПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование - Подключаемое оборудование
// 
// Возвращаемое значение:
// Структура - Структура: "Успешно, ТекстОшибки", "Булево, Строка"
//
Функция ВыгрузкаТоварыArtix(ПодключаемоеОборудование = Неопределено) Экспорт
	
	Текст = НСтр("ru='Не найдено оборудование'");
	Результат = Новый Структура("Успешно, ТекстСообщения", Ложь, Текст);
	
	Выборка = ОборудованиеДляОбменаArtix(ПодключаемоеОборудование);
	
	СписокСообщений = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ПодключаемоеОборудование = Выборка.ПодключаемоеОборудование;
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ПодключаемоеОборудование);
		ДанныеУстройства.Вставить("Склад", Выборка.Склад);
		УстройствоПодключено = ПроверитьПодключениеArtix(ДанныеУстройства, "КаталогОбменаТовары");
		
		Если УстройствоПодключено Тогда
			
			НаборВыгружаемыхДанных = Новый Структура;
			НаборВыгружаемыхДанных.Вставить("Настройки", Истина);
			НаборВыгружаемыхДанных.Вставить("ПрайсЛист", Истина);
			НаборВыгружаемыхДанных.Вставить("Заказы", Ложь);
			
			Параметры = Новый Структура;
			Параметры.Вставить("ИдентификаторУстройства", 	ПодключаемоеОборудование);
			Параметры.Вставить("НаборВыгружаемыхДанных", 	НаборВыгружаемыхДанных);
			
			ДанныеДляВыгрузки = МенеджерОфлайнОборудованияВызовСервера.ПолучитьДанныеДляВыгрузки(Параметры);
			
			ТекстОшибки = ВыгрузитьТоварыArtix(ДанныеУстройства, ДанныеДляВыгрузки);
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				
				СписокСообщений.Добавить(ТекстОшибки);
				
			Иначе
				
				ОповеститьОбУдачнойВыгрузкеТовары(ПодключаемоеОборудование);
			
				Шаблон = НСтр("ru='Выгрузка товаров для %1 завершена'");
				ТекстСообщения = СтрШаблон(Шаблон, ПодключаемоеОборудование);
				Результат.Успешно = Истина;
				СписокСообщений.Добавить(ТекстСообщения);
				
			КонецЕсли;
			
		Иначе
			
			Шаблон = НСтр("ru='Не задан каталог выгрузки товаров для %1'");
			ТекстОшибки = СтрШаблон(Шаблон, ПодключаемоеОборудование);
			
			Результат.Успешно = Ложь;
			СписокСообщений.Добавить(ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокСообщений.Количество() > 0 Тогда
		Текст = СтрСоединить(СписокСообщений, Символы.ПС);
		Результат.ТекстСообщения = Текст;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // >> 01.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 02.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
//
// Параметры:
//  ПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование - Подключаемое оборудование
// 
// Возвращаемое значение:
// Структура - Структура: "Успешно, ТекстОшибки", "Булево, Строка"
//
Функция ВыгрузкаПользователиArtix(ПодключаемоеОборудование = Неопределено) Экспорт
	
	Текст = НСтр("ru='Не найдено оборудование'");
	Результат = Новый Структура("Успешно, ТекстСообщения", Ложь, Текст);
	
	Выборка = ОборудованиеДляОбменаArtix(ПодключаемоеОборудование);
	
	СписокСообщений = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ПодключаемоеОборудование = Выборка.ПодключаемоеОборудование;
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ПодключаемоеОборудование);
		
		ТекстОшибки = ПроверитьНастройкиВыгрузкиПользователей(
			Выборка.ПравилоОбменаПользователи,
			ПодключаемоеОборудование,
			ДанныеУстройства);
		
		Если ТекстОшибки = "" Тогда
			
			ТаблицаПользователи = ПользователиДляВыгрузкиArtix(Выборка);
			ТекстОшибки = ВыгрузитьПользователейArtiх(ТаблицаПользователи, ДанныеУстройства, Выборка.КодСклада);
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				
				СписокСообщений.Добавить(ТекстОшибки);
				
			Иначе
				
				ОповеститьОбУдачнойВыгрузкеТовары(ПодключаемоеОборудование);
			
				Шаблон = НСтр("ru='Выгрузка пользователей для %1 завершена'");
				ТекстСообщения = СтрШаблон(Шаблон, ПодключаемоеОборудование);
				Результат.Успешно = Истина;
				СписокСообщений.Добавить(ТекстСообщения);
				
			КонецЕсли;
			
		Иначе
			
			Результат.Успешно = Ложь;
			СписокСообщений.Добавить(ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокСообщений.Количество() > 0 Тогда
		Текст = СтрСоединить(СписокСообщений, Символы.ПС);
		Результат.ТекстСообщения = Текст;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // >> 02.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
//
// Параметры:
//  ПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование - Подключаемое оборудование
//  ЗакрытиеСмены			 - Булево - Закрытие смены
// 
// Возвращаемое значение:
// Структура - Структура: "Успешно, ТекстОшибки", "Булево, Строка"
//
Функция ЗагрузкаПродажArtix(ПодключаемоеОборудование = Неопределено, ЗакрытиеСмены = Ложь) Экспорт
	
	Текст = НСтр("ru='Не найдено оборудование'");
	Результат = Новый Структура("Успешно, ТекстСообщения", Ложь, Текст);
	
	Выборка = ОборудованиеДляОбменаArtix(ПодключаемоеОборудование);
	
	СписокСообщений = Новый Массив;
	
	Если ЗакрытиеСмены Тогда
		ИмяСобытияЖР 	= НСтр("ru = 'Загрузка продаж за смену Artix'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		ИмяСобытияЖР 	= НСтр("ru = 'Загрузка опер. продаж Artix'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ПодключаемоеОборудование = Выборка.ПодключаемоеОборудование;
		КассаККМ = КассаККМ(Выборка.КассаККМ, ПодключаемоеОборудование);
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ПодключаемоеОборудование);
		
		Параметры = Новый Структура;
		Параметры.Вставить("Склад", 					Выборка.Склад);
		Параметры.Вставить("КассаККМ", 					КассаККМ);
		Параметры.Вставить("ПодключаемоеОборудование", 	ПодключаемоеОборудование);
		Параметры.Вставить("ДанныеУстройства", 			ДанныеУстройства);
		
		ТекстОшибки = ПроверитьНастройкиОбменаОперПродаж(Параметры);
		
		Если ТекстОшибки = "" Тогда
			
			Если ЗакрытиеСмены Тогда
				КаталогОбмена = ДанныеУстройства.Параметры.КаталогОбменаПродажиЗаСмену;
			Иначе
				КаталогОбмена = ДанныеУстройства.Параметры.КаталогОбменаОперПродажи;
			КонецЕсли;
			
			Параметры = Новый Структура;
			Параметры.Вставить("Склад", 					Выборка.Склад);
			Параметры.Вставить("КассаККМ", 					КассаККМ);
			Параметры.Вставить("ПодключаемоеОборудование", 	ПодключаемоеОборудование);
			Параметры.Вставить("КаталогОбмена", 			КаталогОбмена);
			Параметры.Вставить("ЗакрытиеСмены", 			ЗакрытиеСмены);
			Параметры.Вставить("ИмяСобытияЖР", 				ИмяСобытияЖР);
			
			ТекстОшибки = ПрочитатьОперативныеПродажи(Параметры);
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				
				СписокСообщений.Добавить(ТекстОшибки);
				
			Иначе
				
				Шаблон 						= НСтр("ru='Загрузка опер. продаж для %1 завершена'");
				ТекстСообщения 				= СтрШаблон(Шаблон, ПодключаемоеОборудование);
				
				Результат.Успешно 			= Истина;
				СписокСообщений.Добавить(ТекстСообщения);
				
				// << 07.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2468
				УзелОбъект = ПодключаемоеОборудование.УзелИнформационнойБазы.ПолучитьОбъект();
				УзелОбъект.ДатаЗагрузки = ТекущаяДатаСеанса();
				УзелОбъект.Записать();  
				// >> 07.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2468
				
			КонецЕсли;
			
		Иначе
			
			Результат.Успешно = Ложь;
			СписокСообщений.Добавить(ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокСообщений.Количество() > 0 Тогда
		Текст = СтрСоединить(СписокСообщений, Символы.ПС);
		Результат.ТекстСообщения = Текст;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 21.03.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
//
// Параметры:
//  ПравилоОбмена	 - Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline - Правило обмена
// 
// Возвращаемое значение:
// Булево - Признак Artix
//
Функция КР_ЭтоArtix(ПравилоОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодключаемоеОборудование.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.ПравилоОбмена = &ПравилоОбмена
		|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.КР_ДрайверArtix)
		|	И НЕ ПодключаемоеОборудование.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Пустой = Запрос.Выполнить().Пустой();
	
	Возврат Не Пустой;
	
КонецФункции // >> 21.03.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

#КонецОбласти

// --> Евлахов Игорь Николаевич (Начало) 14.03.2024
// Задача #3883
#Область WMS_API  

// Получает КИЗ из базы WMS
//
// Параметры:
//  КодыКоробов  - Массив - Содержит строки коды коробов
//
// Возвращаемое значение:
//   Структура:
//		* ЕстьОшибка - Булево - признак ошибки. Истина - есть ошибка; Ложь - ошибок нет,
//		* ТекстОшибки - Строка - описание ошибки,
//		* СоответствиеКИЗ - Соответствие из КлючИЗначение:
//			** Ключ - строка - штрихкод номенклатуры
//			** Значение - строка - штрихкод КИЗ
//
Функция ПолучитьДанныеКИЗ(КодыКоробов) Экспорт

	ИсходящиеДанные = Новый Структура();
	
	ИсходящиеДанные.Вставить("ЕстьОшибка", Ложь);
	ИсходящиеДанные.Вставить("ТекстОшибки", "");	
	ИсходящиеДанные.Вставить("КИЗ", Новый Соответствие());
	
	// Сформируем параметры подключения к базе WMS
	ПараметрыПодключения = Новый Структура();
	
	ПараметрыПодключения.Вставить("Протокол", "http");
	ПараметрыПодключения.Вставить("АдресСервера", "wh-zel-wms01.somecorp.ru");
	ПараметрыПодключения.Вставить("АдресAPI", "wms/hs/externalexchange/getmarksbyboxes");
	ПараметрыПодключения.Вставить("Логин", "exchange1c");
	ПараметрыПодключения.Вставить("Пароль", "ExRwkiPjYKJ1dmlokKO2");
	
	URLОперации = URLОперацииСервиса(ПараметрыПодключения);
	
	// Сформируем данные для обработки в виде строки JSON	
	СтрокаJSON = ЗначениеВJSON(КодыКоробов);
	
	// Сформируем параметры запроса данных
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод", 					"POST");
	ПараметрыОтправки.Вставить("ФорматОтвета",				1);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 	1);
	ПараметрыОтправки.Вставить("НастройкиПрокси", 			ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере());
	ПараметрыОтправки.Вставить("Таймаут", 					30);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки", 		СтрокаJSON);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
															URLОперации,
															ПараметрыПодключения.Логин,
															ПараметрыПодключения.Пароль,
															ПараметрыОтправки);

	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда			
		ТекстШаблона = НСтр("ru = 'При получении данных КИЗ, сервис %1 вернул ошибку.
									|Причина:
									|%2'");
		ПодробноеОписаниеОшибки = СтрШаблон(ТекстШаблона, 
								   URLОперации,
								   РезультатОтправки.ИнформацияОбОшибке);
				
		ИсходящиеДанные.Вставить("ЕстьОшибка",  	Истина);
		ИсходящиеДанные.Вставить("ТекстОшибки", 	ПодробноеОписаниеОшибки);
		
		ДобавитьВЛог("WMS_API", ПодробноеОписаниеОшибки, "ОтветСервера");
		
		Возврат(ИсходящиеДанные);
	Иначе
		ОтветСервера = JSONВЗначение(РезультатОтправки.Содержимое,, Истина);
		ОбработатьСоответствиеКИЗ(ОтветСервера, ИсходящиеДанные.КИЗ);
	КонецЕсли;
		
	Возврат(ИсходящиеДанные);
	
КонецФункции // ПолучитьДанныеКИЗ()

#КонецОбласти
// <-- Евлахов Игорь Николаевич (Конец) 14.03.2024

#КонецОбласти

#Область СлужебныеПроцедурыФункции

// --> Евлахов Игорь Николаевич (Начало) 15.03.2024
// Задача #3883
// Блок сериализации добавлен из новой версии (БСП) конфигурации.
// В текущей подсистеме версии 3.1.5.473 еще нет процедур в общем модуле "ОбщегоНазначения". 
// В более поздних версиях БСП (СтандартныеПодсистемы) будут добавлены 
// в модуль ОбщегоНазначения функции ЗначениеВJSON и JSONВЗначение.
// После обновления конфигурации требуется проверить наличие функций:
//		* ОбщегоНазначения.ЗначениеВJSON
//		* ОбщегоНазначения.JSONВЗначение
// Если функции появились, то требуется удалить из текущего модуля 
// функции ЗначениеВJSON и JSONВЗначение, и заменить на вызов из модуля "ОбщегоНазначения"

#Область СериализацияJSON

// Преобразует значение в строку JSON при помощи метода глобального контекста ЗаписатьJSON.
// Допускаются не все типы значений, подробности см. в синтакс-помощнике.
// Даты преобразуются в формат ISO (YYYY-MM-DDThh:mm:ssZ).
// 
// Параметры:
//  Значение - Произвольный
//
// Возвращаемое значение:
//  Строка
//
Функция ЗначениеВJSON(Знач Значение) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Преобразует строку в формате JSON в значение при помощи метода глобального контекста ПрочитатьJSON.
// См. ограничения в синтакс-помощнике.
// Объекты JSON по умолчанию преобразует в значения типа Соответствие. 
// Имена свойств со значением типа Дата необходимо явно указывать, чтобы было выполнено преобразование.
// Ожидаемый формат дат - ISO (YYYY-MM-DDThh:mm:ssZ).
// 
// Параметры:
//   Строка - Строка - значение в формате JSON.
//   ИменаСвойствСоЗначениямиДата - Строка - имя свойства, содержащее значение типа Дата. Допустимо указывать несколько
//                                           свойств через запятую.
//                                - Массив из Строка 
//   ПрочитатьВСоответствие       - Булево - если Ложь, то объекты JSON будут преобразованы в значение типа Структура.
//   
// Возвращаемое значение:
//  Произвольный
//
Функция JSONВЗначение(Знач Строка, Знач ИменаСвойствСоЗначениямиДата = Неопределено, Знач ПрочитатьВСоответствие = Истина) Экспорт
	
	Если ТипЗнч(ИменаСвойствСоЗначениямиДата) = Тип("Строка") Тогда
		ИменаСвойствСоЗначениямиДата = СтрРазделить(ИменаСвойствСоЗначениямиДата, ", " + Символы.ПС, Ложь);
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	
	Возврат ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие, ИменаСвойствСоЗначениямиДата);
	
КонецФункции

#КонецОбласти
// <-- Евлахов Игорь Николаевич (Конец) 15.03.2024

Функция ВыполнитьGETЗапрос(Соединение, Метод, ИдентификаторAPI, Знач ПараметрыЗапроса = Неопределено)

	HTTPЗапрос = Новый HTTPЗапрос(Метод);
	
	Попытка
		РезультатЗапроса = Соединение.Получить(HTTPЗапрос); // GET
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения результата запроса:
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ДобавитьВЛог(ИдентификаторAPI, ТекстСообщения, "ЗапросКСерверу");
		
		Возврат Неопределено;
	КонецПопытки;
	
	ЕстьОшибка = РезультатЗапроса.КодСостояния < 200
		Или РезультатЗапроса.КодСостояния > 299;
	
	Если ЕстьОшибка Тогда 
		ОписаниеОшибки = НСтр("ru = 'Ошибка %1 выполнения запроса (%2):
			|%3'");
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, 
			РезультатЗапроса.КодСостояния,  
			Метод,
			РезультатЗапроса.ПолучитьТелоКакСтроку()); 
		
		ДобавитьВЛог(ИдентификаторAPI, ОписаниеОшибки, "ОтветСервера");
		
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		// Десерилизуем ответ
		Поток = РезультатЗапроса.ПолучитьТелоКакПоток();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьПоток(Поток);
		
		ОтветСервера = ПрочитатьJSON(ЧтениеJSON, Истина); 
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка разбора полученного сообщения:
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ДобавитьВЛог(ИдентификаторAPI, ТекстСообщения, "РазборОтветаСервера");
		
		Возврат Неопределено;	
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции	

Функция ВыполнитьPOSTЗапрос(Соединение, Метод, ИдентификаторAPI, Знач ПараметрыЗапроса = Неопределено)

	HTTPЗапрос = Новый HTTPЗапрос(Метод);

	Если ПараметрыЗапроса <> Неопределено Тогда 
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
		
		HTTPЗапрос.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
	КонецЕсли;
	
	Попытка
		РезультатЗапроса = Соединение.ОтправитьДляОбработки(HTTPЗапрос); // POST
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения результата запроса:
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ДобавитьВЛог(ИдентификаторAPI, ТекстСообщения, "ЗапросКСерверу");
		
		Возврат Неопределено;
	КонецПопытки;
	
	ЕстьОшибка = РезультатЗапроса.КодСостояния < 200
		Или РезультатЗапроса.КодСостояния > 299;
	
	Если ЕстьОшибка Тогда 
		ОписаниеОшибки = НСтр("ru = 'Ошибка %1 выполнения запроса (%2):
			|%3'");
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, 
			РезультатЗапроса.КодСостояния,  
			Метод,
			РезультатЗапроса.ПолучитьТелоКакСтроку()); 
		
		ДобавитьВЛог(ИдентификаторAPI, ОписаниеОшибки, "ОтветСервера");
		
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		// Десерилизуем ответ
		Поток = РезультатЗапроса.ПолучитьТелоКакПоток();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьПоток(Поток);
		
		ОтветСервера = ПрочитатьJSON(ЧтениеJSON, Истина);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка разбора полученного сообщения:
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ДобавитьВЛог(ИдентификаторAPI, ТекстСообщения, "РазборОтветаСервера");
		
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции	

Процедура ДобавитьВЛог(ИдентификаторAPI, ТекстСообщения, ИмяСобытия, ЭтоОшибка = Истина)
	
	Если ЭтоОшибка Тогда
		УровеньСообщенияЖурнала = УровеньЖурналаРегистрации.Ошибка;
	Иначе
		УровеньСообщенияЖурнала = УровеньЖурналаРегистрации.Информация;	
	КонецЕсли;
		
	ОбъектМетаданных = Неопределено;
	Данные = Неопределено;
					
	СобытиеЖурналаРегистрации = НСтр("ru = '%1.%2'");
	СобытиеЖурналаРегистрации = СтрШаблон(СобытиеЖурналаРегистрации, ИдентификаторAPI, ИмяСобытия);
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации,
		УровеньСообщенияЖурнала,
		ОбъектМетаданных,
		Данные,
		ТекстСообщения);
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#Область PLM

Функция PLM_УстановитьСоединение()
	
	Сервер = "co-plm.company.ru";
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(Сервер);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка установки соединения с сервером:
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ДобавитьВЛог("PLM_API", ТекстСообщения, "СоединениеССервером");
		
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат HTTPСоединение;
	
КонецФункции

Функция PLM_ОбработатьСоответствиеКИЗ(РезультатЗапроса, СоответствиеКИЗ)
	
	Если СоответствиеКИЗ = Неопределено Тогда
		СоответствиеКИЗ = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого Данные Из РезультатЗапроса Цикл
		Если НРег(Данные.Ключ) = "error" Тогда
			ТекстСообщения = НСтр("ru = 'В ответе сервера получена ошибка:
				|%1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Данные.Значение);
			
			ДобавитьВЛог("PLM_API", ТекстСообщения, "ОбработкаРезультатаЗапроса");
		ИначеЕсли НРег(Данные.Ключ) = "result" Тогда
			Для Каждого ШК Из Данные.Значение Цикл
				МассивКИЗ = СоответствиеКИЗ.Получить(ШК["barcode"]);
				Если МассивКИЗ = Неопределено Тогда
					МассивКИЗ = Новый Массив;
				КонецЕсли;
				
				Для Каждого КИЗ Из ШК["DM"] Цикл
					ТекКИЗ = PLM_ОбработатьКИЗ(КИЗ);
					Если МассивКИЗ.Найти(ТекКИЗ) = Неопределено Тогда
						МассивКИЗ.Добавить(ТекКИЗ);
					КонецЕсли; 						
				КонецЦикла; 
				СоответствиеКИЗ.Вставить(ШК["barcode"], МассивКИЗ);
			КонецЦикла;
		Иначе
			ТекстСообщения = НСтр("ru = 'Отсутствует механизм обработки ответа сервера'");
			
			ДобавитьВЛог("PLM_API", ТекстСообщения, "ОбработкаРезультатаЗапроса");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция PLM_ОбработатьКИЗ(КИЗСтрокой)
	
	Если ПустаяСтрока(КИЗСтрокой) Тогда
		Возврат "";
	КонецЕсли;
	
	// Удаляем непечатаемый символ ASCII с кодом 29
	Результат = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(КИЗСтрокой);
	
	// Обратное преобразование							// Прямое преобразование
	Результат = СтрЗаменить(Результат, "%25", "%");		// $dm = str_replace("%", "%25", $dm);
	Результат = СтрЗаменить(Результат, "%21", "!");		// $dm = str_replace("!", "%21", $dm);
	Результат = СтрЗаменить(Результат, "%5C", "\\");	// $dm = str_replace("\\", "%5C", $dm);
	Результат = СтрЗаменить(Результат, "%22", "\");		// $dm = str_replace("\"", "%22", $dm);
	Результат = СтрЗаменить(Результат, "%26", "&");		// $dm = str_replace("&", "%26", $dm);
	Результат = СтрЗаменить(Результат, "%27", "'");		// $dm = str_replace("'", "%27", $dm);
	Результат = СтрЗаменить(Результат, "%2A", "*");		// $dm = str_replace("*", "%2A", $dm);
	Результат = СтрЗаменить(Результат, "%2B", "+");		// $dm = str_replace("+", "%2B", $dm);
	Результат = СтрЗаменить(Результат, "%2D", "-");		// $dm = str_replace("-", "%2D", $dm);
	Результат = СтрЗаменить(Результат, "%2E", ".");		// $dm = str_replace(".", "%2E", $dm);
	Результат = СтрЗаменить(Результат, "%2F", "/");		// $dm = str_replace("/", "%2F", $dm);
	Результат = СтрЗаменить(Результат, "%5F", "_");		// $dm = str_replace("_", "%5F", $dm);
	Результат = СтрЗаменить(Результат, "%2C", ",");		// $dm = str_replace(",", "%2C", $dm);
	Результат = СтрЗаменить(Результат, "%3A", ":");		// $dm = str_replace(":", "%3A", $dm);
	Результат = СтрЗаменить(Результат, "%3B", ";");		// $dm = str_replace(";", "%3B", $dm);
	Результат = СтрЗаменить(Результат, "%3D", "=");		// $dm = str_replace("=", "%3D", $dm);
	Результат = СтрЗаменить(Результат, "%3C", "<");		// $dm = str_replace("<", "%3C", $dm);
	Результат = СтрЗаменить(Результат, "%3E", ">");		// $dm = str_replace(">", "%3E", $dm);
	Результат = СтрЗаменить(Результат, "%3F", "?");		// $dm = str_replace("?", "%3F", $dm);
	Результат = СтрЗаменить(Результат, "%28", "(");		// $dm = str_replace("(", "%28", $dm);
	Результат = СтрЗаменить(Результат, "%29", ")");		// $dm = str_replace(")", "%29", $dm);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Artix

// << 01.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ОборудованиеДляОбменаArtix(ПодключаемоеОборудование)
	
	Склады = КР_ДополнительныеНастройкиПовтИсп.МассивЗначений("СкладыТекущейБазыДанных");

	ОтборПоОборудованию = Не (ПодключаемоеОборудование = Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОборудованиеArtix();
	Запрос.УстановитьПараметр("Склады", 					Склады);
	Запрос.УстановитьПараметр("ОтборПоОборудованию", 		ОтборПоОборудованию);
	Запрос.УстановитьПараметр("ПодключаемоеОборудование", 	ПодключаемоеОборудование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции // >> 01.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 01.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ВыгрузитьТоварыArtix(ДанныеУстройства, ВходныеПараметры)
	
	ИмяФайла = ДанныеУстройства.Параметры.КаталогОбменаТовары + "\pos_tax_meas_good.aif";
	ИмяФайлаФлага = ДанныеУстройства.Параметры.КаталогОбменаТовары + "\pos_tax_meas_good.flz";
	ИмяСобытияЖР = НСтр("ru = 'Выгрузка товаров Artix'", ОбщегоНазначения.КодОсновногоЯзыка());
	ТекстОшибки = "";
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокументФлаг = Новый ТекстовыйДокумент;
	Попытка
		
		ДобавитьОчищающиеКомандыТовары(ТекстовыйДокумент);
		ДобавитьДанныеТовары(ДанныеУстройства, ТекстовыйДокумент, ВходныеПараметры);
		
		ТекстовыйДокумент.Записать(ИмяФайла, КодировкаТекста.UTF8);
		ТекстовыйДокументФлаг.Записать(ИмяФайлаФлага, КодировкаТекста.UTF8);
	Исключение
		
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Шаблон = НСтр("ru='Не удалось выгрузить товары в Artix для %1 по причине:
			| %2'");
		ТекстОшибки = СтрШаблон(Шаблон, ДанныеУстройства.Наименование, ОписаниеОшибки);
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;
	
	Возврат ТекстОшибки;
	
КонецФункции // >> 01.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 30.01.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Процедура ДобавитьОчищающиеКомандыТовары(ТекстовыйДокумент)
	
	ТекстовыйДокумент.ДобавитьСтроку("### data begin ###");
	ТекстовыйДокумент.ДобавитьСтроку("{""command"": ""clearTaxGroup""}");
	ДобавитьРазделитель(ТекстовыйДокумент);
	ТекстовыйДокумент.ДобавитьСтроку("{""command"": ""addTaxGroup"", ""taxGroup"": {""idTaxGroup"": 1, ""taxes"": [{""changebase"": false, ""name"": ""НДС"", ""rate"": 20}]}}");
	ДобавитьРазделитель(ТекстовыйДокумент);
	ТекстовыйДокумент.ДобавитьСтроку("{""command"": ""clearUnit""}");
	ДобавитьРазделитель(ТекстовыйДокумент);
	ТекстовыйДокумент.ДобавитьСтроку("{""command"": ""addUnit"", ""unit"": {""unitCode"": ""166"", ""name"": ""кг"", ""fractional"": false, ""frunit"": 0}}");
	ДобавитьРазделитель(ТекстовыйДокумент);
	ТекстовыйДокумент.ДобавитьСтроку("{""command"": ""addUnit"", ""unit"": {""unitCode"": ""055"", ""name"": ""м2"", ""fractional"": false, ""frunit"": 0}}");
	ДобавитьРазделитель(ТекстовыйДокумент);
	ТекстовыйДокумент.ДобавитьСтроку("{""command"": ""addUnit"", ""unit"": {""unitCode"": ""113"", ""name"": ""м3"", ""fractional"": false, ""frunit"": 0}}");
	ДобавитьРазделитель(ТекстовыйДокумент);
	ТекстовыйДокумент.ДобавитьСтроку("{""command"": ""addUnit"", ""unit"": {""unitCode"": ""778"", ""name"": ""упак"", ""fractional"": false, ""frunit"": 0}}");
	ДобавитьРазделитель(ТекстовыйДокумент);
	ТекстовыйДокумент.ДобавитьСтроку("{""command"": ""addUnit"", ""unit"": {""unitCode"": ""796"", ""name"": ""шт"", ""fractional"": false, ""frunit"": 0}}");
	ДобавитьРазделитель(ТекстовыйДокумент);
	ТекстовыйДокумент.ДобавитьСтроку("{""command"": ""clearPrice""}");
	ДобавитьРазделитель(ТекстовыйДокумент);
	ТекстовыйДокумент.ДобавитьСтроку("{""command"": ""clearInventory""}");
	ДобавитьРазделитель(ТекстовыйДокумент);
	
КонецПроцедуры // >> 30.01.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 30.01.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Процедура ДобавитьРазделитель(ТекстовыйДокумент)
	
	ТекстовыйДокумент.ДобавитьСтроку("---");
	
КонецПроцедуры // >> 30.01.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 01.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Процедура ДобавитьДанныеТовары(ДанныеУстройства, ТекстовыйДокумент, ВходныеПараметры)
	
	Товары = ВходныеПараметры.ПрайсЛист.Товары;
	
	// #4641.. Фомин Д.Ю. 03.09.2024.
	//ШаблонТовар =
	//		"{""command"": ""addInventItem"", ""invent"": {""inventCode"": ""%1"", ""articul"": ""%1"", ""name"": ""%2"", ""barcode"": ""%3"", ""measurecode"": ""%4""%5, ""price"": %6, ""taxgroupcode"": 1, ""remain"": 0, ""remaindate"": ""0001-01-01""}}";
	ШаблонТовар =
			"{""command"": ""addInventItem"", ""invent"": {""inventCode"": ""%1"", ""articul"": ""%2"", ""name"": ""%3"", ""barcode"": ""%4"", ""measurecode"": ""%5""%6, ""price"": %7, ""taxgroupcode"": 1, ""remain"": 0, ""remaindate"": ""0001-01-01""}}";
	// ..#4641
	
	ШаблонШтрихкодОбщий = ", ""barcodes"": [%1]";
	
	// #4043.. Фомин Д.Ю. 24.04.2024.
	//ШаблонШтрихкод = "{""barcode"": ""%1"", ""cquant"": 1, ""measurecode"": ""%2"", ""price"": %3, ""tmctype"": %4}";
	ШаблонШтрихкод = "{""barcode"": ""%1"", ""cquant"": 1, ""measurecode"": ""%2"", ""price"": %3, ""tmctype"": %4, ""ntin"": """"}";
	// ..#4043
	
	ШаблонНаименование = "%1 (%2,%3,%4)";
	КонецВыгрузки = "### data end ###";
	
	ТаблицаЦены = ТаблицаТоваровСЦенами(ДанныеУстройства.Склад, Товары);
	
	Для Каждого Элемент Из Товары Цикл
		
		//ОсобенностьУчета = ОсобенностьУчета(Элемент.КР_ОсобенностьУчета);	// #4120.. Фомин Д.Ю. 17.05.2024. Перенес в цикл по хар-кам.
		
		Для Каждого ЭлементХарактеристика Из Элемент.Характеристики Цикл
			
			ОсобенностьУчета = ОсобенностьУчета(Элемент.КР_ОсобенностьУчета, ЭлементХарактеристика.КР_Маркируется);		// #4120.. Фомин Д.Ю. 17.05.2024. Добавил параметр КР_Маркируется.
			
			Штрихкоды = Новый Массив;
			
			ТекстШтрихкодыОбщий = "";
			
			Если ЭлементХарактеристика.Упаковки.Количество() > 0 Тогда
				Упаковка = ЭлементХарактеристика.Упаковки[0];
				Если Упаковка.Штрихкоды.Количество() > 0 Тогда
					ШтрикодПервый = Упаковка.Штрихкоды[0].Штрихкод;
					Штрихкоды = Упаковка.Штрихкоды;
				КонецЕсли;
			ИначеЕсли ЭлементХарактеристика.Штрихкоды.Количество() > 0 Тогда 
				ШтрикодПервый = ЭлементХарактеристика.Штрихкоды[0].Штрихкод;
				Штрихкоды = ЭлементХарактеристика.Штрихкоды;
			Иначе
				ШтрикодПервый = "";
			КонецЕсли;
			
			Цена = ЦенаТовара(ТаблицаЦены, Элемент.СсылкаНоменклатура, ЭлементХарактеристика.СсылкаХарактеристика);
			
			МассивШтрихкоды = Новый Массив;
			
			// #4043.. Фомин Д.Ю. 24.04.2024. Блок barcodes выводим для всех товаров.
			//Если ЭлементХарактеристика.КР_Маркируется Тогда
				
			Для Каждого Структура Из Штрихкоды Цикл
				
				ТекстШтрихкод = СтрШаблон(ШаблонШтрихкод,
					Структура.Штрихкод,
					Элемент.КодЕдиницыИзмерения,
					// << 18.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2398
					//Цена,                                                   
					XMLСтрока(Цена),
					// >> 18.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2398
					ОсобенностьУчета);
					
				МассивШтрихкоды.Добавить(ТекстШтрихкод);
				
			КонецЦикла;
			
			// #4043.. Фомин Д.Ю. 24.04.2024.
			Если ЗначениеЗаполнено(ЭлементХарактеристика.злGTIN) Тогда

				ТекстШтрихкод = СтрШаблон(ШаблонШтрихкод,
					ЭлементХарактеристика.злGTIN,
					Элемент.КодЕдиницыИзмерения,
					XMLСтрока(Цена),
					ОсобенностьУчета);
					
				МассивШтрихкоды.Добавить(ТекстШтрихкод);	
				
			КонецЕсли;	
			// ..#4043
			
			ТекстШтрихкоды = СтрСоединить(МассивШтрихкоды, " ,");
			ТекстШтрихкодыОбщий = СтрШаблон(ШаблонШтрихкодОбщий, ТекстШтрихкоды);
				
			//КонецЕсли;
			
			Наименование = СтрШаблон(ШаблонНаименование,
				Элемент.КР_НаименованиеНаЦеннике,
				Элемент.Артикул,
				ЭлементХарактеристика.Наименование,
				Элемент.КР_ЦветКод);     
				
			// << 20.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2394  

			// Экранирование специальных символов
			Наименование = СтрЗаменить(Наименование, """", "\""");   
			Наименование = СтрЗаменить(Наименование, "\", "\\");   
			Наименование = СтрЗаменить(Наименование, "/", "\/");   
			
			// Прочие символы форматирования
			Наименование = СтрЗаменить(Наименование, Символы.ПС, " ");
			Наименование = СтрЗаменить(Наименование, Символы.ВК, "");
			Наименование = СтрЗаменить(Наименование, Символы.Таб, " ");    
			
			// A2105505-2507
			Наименование = СтрЗаменить(Наименование, ",", " ");  
			
			// Лишние пробелы, в том числе те которые сами и добавили
			Наименование = СтрЗаменить(Наименование, "  ", " ");
			Наименование = СтрЗаменить(Наименование, "  ", " ");
			Наименование = СтрЗаменить(Наименование, "  ", " ");
			// >> 20.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2394	
			
			ТекстТовар = СтрШаблон(ШаблонТовар,
				ШтрикодПервый,
				Элемент.КР_Модель,		// #4641.. Фомин Д.Ю. 03.09.2024.
				Наименование,
				ШтрикодПервый,
				Элемент.КодЕдиницыИзмерения,
				ТекстШтрихкодыОбщий,
				// << 18.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2398
				//Цена                                                   
				XMLСтрока(Цена)
				// >> 18.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2398
			);
				
			ТекстовыйДокумент.ДобавитьСтроку(ТекстТовар);
			ДобавитьРазделитель(ТекстовыйДокумент);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстовыйДокумент.ДобавитьСтроку(КонецВыгрузки);
	
КонецПроцедуры // >> 01.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 23.03.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ОсобенностьУчета(ОсобенностьУчета, Маркируется = Истина)		// #4120.. Фомин Д.Ю. 17.05.2024. Добавил параметр Маркируется.
	
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция Тогда
		Значение = "4";
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность Тогда
		// #4120.. Фомин Д.Ю. 17.05.2024.
		//Значение = "7";
		Значение = ?(Маркируется, "7", "0");	
		// ..#4120
	Иначе
		Значение = "0";
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // >> 23.03.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 14.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ТаблицаТоваровСЦенами(Склад, Товары)
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	
	// << 26.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2280
	ТаблицаТовары.Индексы.Добавить("Номенклатура");
	ТаблицаТовары.Индексы.Добавить("Характеристика");
	// >> 26.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2280
	
	Для Каждого Элемент Из Товары Цикл
		
		Для Каждого ЭлементХарактеристика Из Элемент.Характеристики Цикл
			
			НоваяСтрока = ТаблицаТовары.Добавить();
			
			НоваяСтрока.Номенклатура 	= Элемент.СсылкаНоменклатура;
			НоваяСтрока.Характеристика 	= ЭлементХарактеристика.СсылкаХарактеристика;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ГруппаВидовНоменклатурыАксессуаров = КР_ДополнительныеНастройкиПовтИсп.Значение("ГруппаВидовНоменклатурыАксессуаров");
	
	ПараметрыЦен = Новый Структура;
	ПараметрыЦен.Вставить("Склад", 								Склад);
	ПараметрыЦен.Вставить("Дата", 								ТекущаяДатаСеанса());
	ПараметрыЦен.Вставить("Таблица", 							ТаблицаТовары);
	ПараметрыЦен.Вставить("ГруппаВидовНоменклатурыАксессуаров", ГруппаВидовНоменклатурыАксессуаров);
	
	Обработки.ПечатьЭтикетокИЦенников2_5.КР_ПереопределитьЦены(ПараметрыЦен);
	
	Возврат ТаблицаТовары;
	
КонецФункции // >> 14.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 14.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ЦенаТовара(ТаблицаЦены, Номенклатура, Характеристика)
	
	Цена = 0;
	
	Отбор = Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика);
	Строки = ТаблицаЦены.НайтиСтроки(Отбор);
	
	Если Строки.Количество() > 0 Тогда
		Строка = Строки[0];
		Цена = Строка.Цена;
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции // >> 14.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 01.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ПроверитьПодключениеArtix(ДанныеУстройства, ИмяНастройки)
	
	Результат = Ложь;
	
	КаталогОбмена = ДанныеУстройства.Параметры[ИмяНастройки];
	КаталогСуществует = ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(КаталогОбмена, Истина);
	
	Если КаталогСуществует Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // >> 01.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 01.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ТекстЗапросаОборудованиеArtix()
	
	Текст =
	"ВЫБРАТЬ
	|	СправочникПодключаемоеОборудование.Ссылка КАК ПодключаемоеОборудование,
	|	СправочникПодключаемоеОборудование.УзелИнформационнойБазы.ДатаВыгрузки КАК ДатаВыгрузки,
	|	СправочникПодключаемоеОборудование.УзелИнформационнойБазы.ДатаЗагрузки КАК ДатаЗагрузки,
	|	СправочникПодключаемоеОборудование.УзелИнформационнойБазы.ВыгрузкаВыполнена КАК ВыгрузкаВыполнена,
	|	СправочникПодключаемоеОборудование.УзелИнформационнойБазы.ЗагрузкаВыполнена КАК ЗагрузкаВыполнена,
	|	СправочникПодключаемоеОборудование.КР_ПравилоОбменаПользователи КАК ПравилоОбменаПользователи,
	|	СправочникПодключаемоеОборудование.КР_ПравилоОбменаПользователи.НастройкиКомпоновкиДанных КАК НастройкиПользователи,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	ВЫБОР
	|		КОГДА 1 В
	|				(ВЫБРАТЬ
	|					1 КАК Поле1
	|				ИЗ
	|					РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline.Изменения КАК КодыТоваров
	|				ГДЕ
	|					КодыТоваров.ПравилоОбмена = СправочникПодключаемоеОборудование.ПравилоОбмена
	|					И КодыТоваров.Узел = СправочникПодключаемоеОборудование.УзелИнформационнойБазы)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Изменения,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Склад КАК Склад,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Склад.Код КАК КодСклада
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК СправочникПодключаемоеОборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
	|		ПО (КассыККМ.ПодключаемоеОборудование = СправочникПодключаемоеОборудование.Ссылка)
	|ГДЕ
	|	СправочникПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И СправочникПодключаемоеОборудование.УстройствоИспользуется
	|	И СправочникПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.КР_ДрайверArtix)
	|	И СправочникПодключаемоеОборудование.ПравилоОбмена.Склад В(&Склады)
	|	И ВЫБОР
	|			КОГДА &ОтборПоОборудованию = ИСТИНА
	|				ТОГДА СправочникПодключаемоеОборудование.Ссылка = &ПодключаемоеОборудование
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Возврат Текст;
	
КонецФункции // >> 01.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 01.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Процедура ОповеститьОбУдачнойВыгрузкеТовары(ОфлайнОборудование)
	
	НаборВыгруженныхДанных = МенеджерОфлайнОборудования.ПолучитьНаборВыгруженныхДанных();
	
	НаборВыгруженныхДанных.Настройки = Истина;
	НаборВыгруженныхДанных.ПрайсЛист = Истина;
	НаборВыгруженныхДанных.Заказы = Истина;
	
	МенеджерОфлайнОборудованияВызовСервера.ОповеститьОбУдачнойВыгрузке(ОфлайнОборудование, НаборВыгруженныхДанных);
	
КонецПроцедуры // >> 01.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 02.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ПроверитьНастройкиВыгрузкиПользователей(Правило, ПодключаемоеОборудование, ДанныеУстройства)
	
	ТекстОшибки 	= "";
	СписокОшибок 	= Новый Массив;
	
	УстройствоПодключено 	= ПроверитьПодключениеArtix(ДанныеУстройства, "КаталогОбменаКассиры");
	ЗаданоПравило 			= ЗначениеЗаполнено(Правило);
	
	Если Не УстройствоПодключено Тогда
		Шаблон = НСтр("ru='Не задан каталог выгрузки товаров для %1'");
		ТекстОшибки = СтрШаблон(Шаблон, ПодключаемоеОборудование);
		СписокОшибок.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если Не ЗаданоПравило Тогда
		Шаблон = НСтр("ru='Не задано правило выгрузки пользователей для %1'");
		ТекстОшибки = СтрШаблон(Шаблон, ПодключаемоеОборудование);
		СписокОшибок.Добавить(ТекстОшибки);
	КонецЕсли;
		
	Если СписокОшибок.Количество() > 0 Тогда
		ТекстОшибки = СтрСоединить(СписокОшибок, Символы.ПС);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // >> 02.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 02.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ПользователиДляВыгрузкиArtix(Выборка)
	
	НастройкиКомпоновкиДанных = Выборка.НастройкиПользователи.Получить();
	СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("КР_ВыгрузкаКассиры");
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки);
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	ЭлементыОтбора = Компоновщик.Настройки.Отбор.Элементы;
	
	Для Каждого Элемент Из НастройкиКомпоновкиДанных.Отбор.Элементы Цикл
		
		НовыйЭлемент = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
		
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		Компоновщик.ПолучитьНастройки(), , ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ДанныеОтчета = Новый ТаблицаЗначений();
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ДанныеОтчета;
	
КонецФункции // >> 02.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 02.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ВыгрузитьПользователейArtiх(ТаблицаПользователи, ДанныеУстройства, Знач КодСклада)
	
	ТекстОшибки = "";
	СписокПользователей = ТаблицаПользователи.ВыгрузитьКолонку("Пользователь");
	СписокПользователей.Добавить(Справочники.Пользователи.КассирКСО);		// #4704.. Фомин Д.Ю. 11.09.2024.
	
	Каталог = ДанныеУстройства.Параметры.КаталогОбменаКассиры;
	
	ИмяФайла = Каталог + "\pos_cashusers.aif";
	ИмяФайлаФлаг = Каталог + "\pos_cashusers.flz";
	
	ТаблицаПользователиИБ = Новый ТаблицаЗначений;
	ТаблицаПользователиИБ.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаПользователиИБ.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	
	ШаблонПользователь =
			"{""command"": ""addMCashUser"", ""mcashuser"": {""code"": %1, ""name"": ""%2"", ""login"": ""%3"", ""password"": ""%4"", ""keyposition"": 1, ""rank"": ""%5"", ""roleusers"": [{""rolecode"": %6, ""rule"": 1}]}}";
	ШаблонПароль = "0%1%2";
	КонецВыгрузки = "### data end ###";
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого Элемент Из ПользователиИБ Цикл
		НоваяСтрока = ТаблицаПользователиИБ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПользователи();
	Запрос.УстановитьПараметр("ПользователиИБ", 		ТаблицаПользователиИБ);
	Запрос.УстановитьПараметр("СписокПользователей", 	СписокПользователей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокументФалаг = Новый ТекстовыйДокумент;
	ДобавитьОчищающиеКомандыПользователи(ТекстовыйДокумент);
	
	Шаг = 3;
	
	Пока Выборка.Следующий() Цикл
		
		КодСклада			= СокрЛП(Выборка.КодСклада);
		ДлинаСклада 		= СтрДлина(КодСклада);
		КодСклада 			= Сред(КодСклада, ДлинаСклада - Шаг, Шаг);
		// A2105505-2168 
		КодПродавца			= Выборка.КодПродавца; // Стало Число(5.0)   
		КодПродавца			= Формат(КодПродавца, "ЧЦ=5; ЧН=; ЧВН=; ЧГ=");
		КодПродавца			= Прав(КодПродавца, 3);
        //
		
		Если Выборка.name = "Кассир КСО" Тогда		// #4704.. Фомин Д.Ю. 11.09.2024. Для пользователя "Кассир КСО" пароль всегда "1".
			Пароль				= "1";	
		Иначе	
			Пароль 				= СтрШаблон(ШаблонПароль, КодСклада, КодПродавца);
		
			КонтрольныйСимвол 	= МенеджерОборудованияКлиентСервер.РассчитатьКонтрольныйСимволGTIN8(Пароль);
			Пароль 				= Пароль + КонтрольныйСимвол;
		КонецЕсли;	
		
		// A2105505-2347 
		login = Выборка.login; 
		Если Не ЗначениеЗаполнено(login) Тогда 
			login = ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(Выборка.name);
		КонецЕсли;	
		//
		
		Текст = СтрШаблон(ШаблонПользователь,
		        // << 26.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2280
				//СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Выборка.code, "0"),  
				XMLСтрока(Выборка.code),
				// >> 26.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2280
				Выборка.name,
				login, // A2105505-2347
				Пароль,
				Выборка.rank,
				Выборка.rolecode);
				
			ТекстовыйДокумент.ДобавитьСтроку(Текст);
			ДобавитьРазделитель(ТекстовыйДокумент);
		
	КонецЦикла;
	
	ТекстовыйДокумент.ДобавитьСтроку(КонецВыгрузки);
	
	ИмяСобытияЖР = НСтр("ru = 'Выгрузка пользователей Artix'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Попытка
		
		ТекстовыйДокумент.Записать(ИмяФайла, КодировкаТекста.UTF8);
		ТекстовыйДокументФалаг.Записать(ИмяФайлаФлаг, КодировкаТекста.UTF8);
		
	Исключение
		
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Шаблон = НСтр("ru='Не удалось выгрузить пользователей в Artix для %1 по причине:
			| %2'");
		ТекстОшибки = СтрШаблон(Шаблон, ДанныеУстройства.Наименование, ОписаниеОшибки);
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
		КонецПопытки;
	
	Возврат ТекстОшибки;
	
КонецФункции // >> 02.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 02.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ТекстЗапросаПользователи()
	
	// A2105505-2168 изменения по доп.требованиям
	Текст =
	"ВЫБРАТЬ
	|	ПользователиИБ.УникальныйИдентификатор КАК УникальныйИдентификатор,
	|	ПользователиИБ.Имя КАК Имя
	|ПОМЕСТИТЬ втПользователиИБ
	|ИЗ
	|	&ПользователиИБ КАК ПользователиИБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Наименование КАК name,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	|	ЕСТЬNULL(Пользователи.ФизическоеЛицо.КР_Должность, """") КАК rank,
	|	ВЫБОР
	// #4704.. Фомин Д.Ю. 11.09.2024.
	|       КОГДА Пользователи.Ссылка = ЗНАЧЕНИЕ(Справочник.Пользователи.КассирКСО)
	|			ТОГДА 3
	// ..#4704
	|		КОГДА ЕСТЬNULL(Пользователи.ФизическоеЛицо.КР_Должность, """") ПОДОБНО ""%Продавец%""
	|				ИЛИ ЕСТЬNULL(Пользователи.ФизическоеЛицо.КР_Должность, """") ПОДОБНО ""%Кассир%""
	|			ТОГДА 1
	|		КОГДА ЕСТЬNULL(Пользователи.ФизическоеЛицо.КР_Должность, """") ПОДОБНО ""%Администратор%""
	|				ИЛИ ЕСТЬNULL(Пользователи.ФизическоеЛицо.КР_Должность, """") ПОДОБНО ""%Управляющий%""
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК rolecode,
	|	ЕСТЬNULL(втПользователиИБ.Имя, """") КАК login,
	// #4704.. Фомин Д.Ю. 11.09.2024.
	//|	Пользователи.КР_КодПродавца КАК КодПродавца,
	|	ВЫБОР
	|       КОГДА Пользователи.Ссылка = ЗНАЧЕНИЕ(Справочник.Пользователи.КассирКСО)
	|			ТОГДА 9999
	|		ИНАЧЕ Пользователи.КР_КодПродавца
	|	КОНЕЦ КАК КодПродавца, 
	// ..#4704
	|	ЕСТЬNULL(Пользователи.Подразделение.КР_Склад.Код, """") КАК КодСклада,
	|	Пользователи.КР_КодПродавца КАК code
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПользователиИБ КАК втПользователиИБ
	|		ПО Пользователи.ИдентификаторПользователяИБ = втПользователиИБ.УникальныйИдентификатор
	|ГДЕ
	|	Пользователи.Ссылка В(&СписокПользователей)";
	
	Возврат Текст;
	
КонецФункции // >> 02.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 02.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Процедура ДобавитьОчищающиеКомандыПользователи(ТекстовыйДокумент)
	
	ТекстовыйДокумент.ДобавитьСтроку("### data begin ###");
	ТекстовыйДокумент.ДобавитьСтроку("{""command"": ""clearMCashUser""}");
	ДобавитьРазделитель(ТекстовыйДокумент);
	
КонецПроцедуры // >> 02.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция КассаККМ(НастройкаРМК, ПодключаемоеОборудование)
	
	КассаККМ = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НастройкиРМККассыККМ.КассаККМ КАК КассаККМ
		|ИЗ
		|	Справочник.НастройкиРМК.КассыККМ КАК НастройкиРМККассыККМ
		|ГДЕ
		|	НастройкиРМККассыККМ.Ссылка = &НастройкаРМК
		|	И НастройкиРМККассыККМ.ПодключаемоеОборудование = &ПодключаемоеОборудование";
	
	Запрос.УстановитьПараметр("НастройкаРМК", 				НастройкаРМК);
	Запрос.УстановитьПараметр("ПодключаемоеОборудование", 	ПодключаемоеОборудование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		КассаККМ = Выборка.КассаККМ;
	КонецЕсли;
	
	Возврат КассаККМ;
	
КонецФункции // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ПроверитьНастройкиОбменаОперПродаж(Параметры)
	
	ТекстОшибки 	= "";
	СписокОшибок 	= Новый Массив;
	
	Склад 						= Параметры.Склад;
	КассаККМ 					= Параметры.КассаККМ;
	ПодключаемоеОборудование 	= Параметры.ПодключаемоеОборудование;
	ДанныеУстройства 			= Параметры.ДанныеУстройства;
	
	УстройствоПодключено = ПроверитьПодключениеArtix(ДанныеУстройства, "КаталогОбменаОперПродажи");
	
	Если Не УстройствоПодключено Тогда
		Шаблон = НСтр("ru='Не задан каталог обмена опер. продаж %1'");
		ТекстОшибки = СтрШаблон(Шаблон, ПодключаемоеОборудование);
		СписокОшибок.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Шаблон = НСтр("ru='Не задан склад для %1'");
		ТекстОшибки = СтрШаблон(Шаблон, ПодключаемоеОборудование);
		СписокОшибок.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КассаККМ) Тогда
		Шаблон = НСтр("ru='Не задана касса ККМ для %1'");
		ТекстОшибки = СтрШаблон(Шаблон, ПодключаемоеОборудование);
		СписокОшибок.Добавить(ТекстОшибки);
	КонецЕсли;
		
	Если СписокОшибок.Количество() > 0 Тогда
		ТекстОшибки = СтрСоединить(СписокОшибок, Символы.ПС);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ПрочитатьОперативныеПродажи(Параметры)
	
	СписокОшибок = Новый Массив;
	ТекстОшибки = "";
	
	Каталог = Параметры.КаталогОбмена;
	
	РасширениеJson = "*.json";
	СписокФайлов = НайтиФайлы(Каталог, РасширениеJson);
	
	Если Параметры.ЗакрытиеСмены Тогда
		ШаблонЧтение = НСтр("ru='Не удалось прочитать файл ""%1"" продаж за смену Artix для %2 по причине:
			| %3'");
	Иначе
		ШаблонЧтение = НСтр("ru='Не удалось прочитать файл ""%1"" опер. продажи Artix для %2 по причине:
			| %3'");
	КонецЕсли;
	
	Если СписокФайлов.Количество() = 0 Тогда
		
		Если Параметры.ЗакрытиеСмены Тогда
			ШаблонОтсутствие = НСтр("ru='Не найдены файлы продаж за смену Artix для %1.'");
		Иначе
			ШаблонОтсутствие = НСтр("ru='Не найдены файлы опер. продаж Artix для %1.'");
		КонецЕсли;
		
		ТекстОшибки = СтрШаблон(ШаблонОтсутствие, Параметры.ПодключаемоеОборудование);
		СписокОшибок.Добавить(ТекстОшибки);
		
	КонецЕсли;
	
	Для Каждого Файл Из СписокФайлов Цикл
		
		ФайлПрочитан = Ложь;
		
		Попытка
			
			Данные = ДанныеПоОперативнымПродажам(Файл.ПолноеИмя);
			ФайлПрочитан = Истина;
			
		Исключение
			
			ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = СтрШаблон(ШаблонЧтение, Файл.ПолноеИмя, Параметры.ПодключаемоеОборудование, ОписаниеОшибки);
			
			ЗаписьЖурналаРегистрации(Параметры.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			
			СписокОшибок.Добавить(ТекстОшибки);
			
		КонецПопытки;
		
		// << 24.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168
		//Параметры.Вставить("Данные", 			Данные);
		//Параметры.Вставить("ИмяБезРасширения", 	Файл.ИмяБезРасширения);
		// >> 24.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168
		
		Если ФайлПрочитан Тогда                 
			
			// << 24.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168 
			ДанныеПродажи = Данные.МассивПродажи;
			ДанныеСмены = Данные.МассивСмены;
			ЗакрытиеСмены = ЗакрытиеСмены(ДанныеСмены);
			
			СгруппированныеДанныеПоДате = СгруппироватьДанныеПродажПоДате(ДанныеПродажи);
			Для Каждого КлючЗначение Из СгруппированныеДанныеПоДате Цикл 
				
				Параметры.Вставить("ДанныеПродажи", КлючЗначение.Значение);
				Параметры.Вставить("ДатаДокумента", КлючЗначение.Ключ);
					
				// >> 24.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168
				
				ДокументЗаписан = ЗагрузитьДанныеОперативныеПродажи(Параметры, ЗакрытиеСмены, СписокОшибок);
				Если ДокументЗаписан Тогда
					ОбработатьФайлыПослеЗагрузки(Параметры, Файл, СписокОшибок);
				КонецЕсли;    
				
				// << 24.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168
			КонецЦикла;
			// >> 24.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168	
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьАрхивныеФайлы(Параметры, Каталог, СписокОшибок);
	
	Если СписокОшибок.Количество() > 0 Тогда
		ТекстОшибки = СтрСоединить(СписокОшибок, Символы.ПС);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ОбработатьФайлыПослеЗагрузки(Параметры, Файл, СписокОшибок)
	
	Расширение = ".bak";
	
	НовоеИмя = Файл.Путь + Файл.ИмяБезРасширения  + Расширение;
	Шаблон = НСтр("ru='Не удалось переместить файл ""%1"" продаж за смену Artix для %2 по причине:
			| %3'");
	
	Попытка
		
		ПереместитьФайл(Файл.ПолноеИмя, НовоеИмя);
		Файл = Новый Файл(НовоеИмя);
		Файл.УстановитьВремяИзменения(ТекущаяДатаСеанса());
		
	Исключение
		
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(Шаблон, Файл.ПолноеИмя, Параметры.ПодключаемоеОборудование, ОписаниеОшибки);
		
		ЗаписьЖурналаРегистрации(Параметры.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		СписокОшибок.Добавить(ТекстОшибки);
		
	КонецПопытки;
	
КонецФункции // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Процедура УдалитьАрхивныеФайлы(Параметры, Каталог, СписокОшибок)
	
	Расширение 		= "*.bak";
	СписокФайлов 	= НайтиФайлы(Каталог, Расширение);
	ТекущаяДата 	= ТекущаяДатаСеанса();
	Час 			= 3600;
	ПериодХранения 	= 72;
	
	Если Параметры.ЗакрытиеСмены Тогда
		ШаблонЧтение = НСтр("ru='Не удалось удалить файл ""%1"" продаж за смену Artix для %2 по причине:
			| %3'");
	Иначе
		ШаблонЧтение = НСтр("ru='Не удалось удалить файл ""%1"" опер. продажи Artix для %2 по причине:
			| %3'");
	КонецЕсли;
	
	Для Каждого Файл Из СписокФайлов Цикл
		
		ВремяИзменения = Файл.ПолучитьВремяИзменения();
		
		РазницаВЧасах = (ТекущаяДата - ВремяИзменения) / Час;
		
		Если Не РазницаВЧасах > ПериодХранения Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			УдалитьФайлы(Файл.ПолноеИмя);
			
		Исключение
			
			ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = СтрШаблон(ШаблонЧтение, Файл.ПолноеИмя, Параметры.ПодключаемоеОборудование, ОписаниеОшибки);
			
			ЗаписьЖурналаРегистрации(Параметры.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			СписокОшибок.Добавить(ТекстОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ДанныеПоОперативнымПродажам(ИмяФайла)
	
	Текст 			= Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.ANSI);
	ТекстСтроки 	= Текст.ПрочитатьСтроку();
	ДанныеПродажи 	= Новый Массив;
	ДанныеСмены 	= Новый Массив;
	ТекстJSON 		= "";
	
	НачалоПродаж 		= Ложь;
	НачалоСмены 		= Ложь;
	ТекстНачалоПродаж 	= "### sales data begin ###";
	ТекстКонецПродаж 	= "### sales data end ###";  
	ТекстНачалоСмена 	= "### shift info begin ###";
	ТекстКонецСмена 	= "### shift info end ###";
	ТекстРазделитель 	= "---";
	
	Пока Не ТекстСтроки = Неопределено Цикл
		
		Если СтрНайти(ТекстСтроки, ТекстНачалоПродаж) > 0 Тогда
			НачалоПродаж = Истина;
			ТекстСтроки = Текст.ПрочитатьСтроку();
		КонецЕсли;
		
		Если СтрНайти(ТекстСтроки, ТекстНачалоСмена) > 0 Тогда
			НачалоСмены = Истина;
			ТекстСтроки = Текст.ПрочитатьСтроку();
		КонецЕсли;
		
		Если СтрНайти(ТекстСтроки, ТекстКонецПродаж) = 0 Тогда
			
			Если НачалоПродаж Тогда
				
				Если Не ТекстСтроки = ТекстРазделитель Тогда
					ТекстJSON = ТекстJSON + ТекстСтроки;
				Иначе
					ДанныеПродажи.Добавить(ТекстJSON);
					ТекстJSON = "";
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			НачалоПродаж = Ложь;
			
		КонецЕсли;
		
		Если СтрНайти(ТекстСтроки, ТекстКонецСмена) = 0 Тогда
			
			Если НачалоСмены Тогда
				
				Если Не ТекстСтроки = ТекстРазделитель Тогда
					ТекстJSON = ТекстJSON + ТекстСтроки;
				Иначе
					ДанныеСмены.Добавить(ТекстJSON);
					ТекстJSON = "";
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			НачалоСмены = Ложь;
			
		КонецЕсли;
		
		ТекстСтроки = Текст.ПрочитатьСтроку();
		
	КонецЦикла;
	
	ЧтениеJSON 		= Новый ЧтениеJSON;
	МассивПродажи 	= Новый Массив;
	МассивСмены 	= Новый Массив;
	СвойстваДата 	= Новый Массив;
	СвойстваДата.Добавить("timeEnd");
	
	МассивИменВосстановления = Новый Массив;
	// << 25.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168
	МассивИменВосстановления.Добавить("timeBeg");   
	// >> 25.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168
	МассивИменВосстановления.Добавить("timeEnd");   
	
	Для Каждого ТекстJSON Из ДанныеПродажи Цикл
		
		ЧтениеJSON.УстановитьСтроку(ТекстJSON);
		Результат = ПрочитатьJSON(ЧтениеJSON, , , ,
			"ФункцияВосстановленияЧтения",
			КР_ИнтеграцияСВнешнимиСистемами, ,
			МассивИменВосстановления);
			
		МассивПродажи.Добавить(Результат);
		ЧтениеJSON.Закрыть();
		
	КонецЦикла;
	
	Для Каждого ТекстJSON Из ДанныеСмены Цикл
		
		ЧтениеJSON.УстановитьСтроку(ТекстJSON);
		Результат = ПрочитатьJSON(ЧтениеJSON, , , ,
			"ФункцияВосстановленияЧтения",
			КР_ИнтеграцияСВнешнимиСистемами, ,
			МассивИменВосстановления);
			
		МассивСмены.Добавить(Результат);
		ЧтениеJSON.Закрыть();
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("МассивПродажи", МассивПродажи);
	Результат.Вставить("МассивСмены", 	МассивСмены);
	
	Возврат Результат;
	
КонецФункции // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 23.03.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ФункцияВосстановленияЧтения(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если Свойство = "timeEnd" 
		// << 25.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168
		Или Свойство = "timeBeg"   
		// >> 25.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168
		Тогда
		
		Результат = Дата(1,1,1);
		
		Если ЗначениеЗаполнено(Значение) Тогда
			Результат = ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // >> 23.03.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ЗагрузитьДанныеОперативныеПродажи(Параметры,
	// << 24.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168
	ЗакрытиеСмены,
	// >> 24.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168
	СписокОшибок) 
	
	// << 24.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168
	//ДанныеПродажи 		= Параметры.Данные.МассивПродажи;
	//ДанныеСмены 		= Параметры.Данные.МассивСмены;
	//ИмяБезРасширения 	= Параметры.ИмяБезРасширения;
	//ЗакрытиеСмены 		= ЗакрытиеСмены(ДанныеСмены);
	ДанныеПродажи = Параметры.ДанныеПродажи;
	ДатаДокумента = Параметры.ДатаДокумента;
	// >> 24.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168
	
	НомерПустойКарты 	= "0000";
	ТипШтрихкод 		= ОбщегоНазначения.ОписаниеТипаСтрока(200);
	// << 08.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2482
	//ТипСтрока3 			= ОбщегоНазначения.ОписаниеТипаСтрока(3);
	// >> 08.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2482
	ТипСтрока32 		= ОбщегоНазначения.ОписаниеТипаСтрока(32);
	ТипСтрока40 		= ОбщегоНазначения.ОписаниеТипаСтрока(40);
	ТипСтрока 			= Новый ОписаниеТипов("Строка");
	ТипЧисло 			= Новый ОписаниеТипов("Число");
	ТипДата 			= Новый ОписаниеТипов("Дата");
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("НомерЧека", ТипСтрока);
	ТаблицаТовары.Колонки.Добавить("ИдентификаторЧека", ТипСтрока32);
	ТаблицаТовары.Колонки.Добавить("docType", ТипЧисло);
	ТаблицаТовары.Колонки.Добавить("sourceidentifier", ТипСтрока32);
	ТаблицаТовары.Колонки.Добавить("Штрихкод", ТипШтрихкод);
	ТаблицаТовары.Колонки.Добавить("Количество", ТипЧисло);
	ТаблицаТовары.Колонки.Добавить("Цена", ТипЧисло);
	ТаблицаТовары.Колонки.Добавить("Сумма", ТипЧисло);
	ТаблицаТовары.Колонки.Добавить("СуммаНДС", ТипЧисло);
	ТаблицаТовары.Колонки.Добавить("СуммаРучнойСкидки", ТипЧисло);
	ТаблицаТовары.Колонки.Добавить("ПроцентРучнойСкидки", ТипЧисло);  
	// << 08.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2482
	//ТаблицаТовары.Колонки.Добавить("Продавец", ТипСтрока3);
	ТаблицаТовары.Колонки.Добавить("Продавец", ТипЧисло);
	// >> 08.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2482
	ТаблицаТовары.Колонки.Добавить("ДатаЧека", Новый ОписаниеТипов("Дата"));
	ТаблицаТовары.Колонки.Добавить("КартаЛояльности", ТипШтрихкод);
	
	ТаблицаОплата = Новый ТаблицаЗначений;
	ТаблицаОплата.Колонки.Добавить("НомерЧека", ТипСтрока);
	ТаблицаОплата.Колонки.Добавить("ИдентификаторЧека", ТипСтрока);
	ТаблицаОплата.Колонки.Добавить("docType", ТипЧисло);
	ТаблицаОплата.Колонки.Добавить("paymentmethod", ТипЧисло);
	ТаблицаОплата.Колонки.Добавить("frnum", ТипСтрока40);
	ТаблицаОплата.Колонки.Добавить("valCode", ТипЧисло);
	ТаблицаОплата.Колонки.Добавить("КодАвторизации", ТипСтрока);
	ТаблицаОплата.Колонки.Добавить("НомерПлатежнойКарты", ТипСтрока);
	ТаблицаОплата.Колонки.Добавить("Сумма", ТипЧисло);
	ТаблицаОплата.Колонки.Добавить("ДатаЧека", ТипДата);
	
	ТипыДляЗагрузки 		= ТипыДокументовДляЗагрузки();
	ТипыДляЗагрузкиЗакрытие = ТипыДокументовДляЗагрузкиЗакрытие();
	// << 24.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168
	//ДатаДокумента 			= ДатаДокументаПоИмениФайла(ИмяБезРасширения);
	// >> 24.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168
	
	Параметры.Вставить("ДатаДокумента", ДатаДокумента);
	
	// << 07.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2471    
	Для Итератор = -ДанныеПродажи.Количество() + 1 По 0 Цикл
		СтрокаДанных = ДанныеПродажи[-Итератор];
		Если ТипыДляЗагрузки.Найти(СтрокаДанных.docType) = Неопределено
			Или ТипыДляЗагрузкиЗакрытие.Найти(СтрокаДанных.closed) = Неопределено Тогда
			ДанныеПродажи.Удалить(-Итератор);
		КонецЕсли;                          
	КонецЦикла;	                            
	Если Не ЗначениеЗаполнено(ДанныеПродажи) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	// >> 07.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2471
	
	ДокументОбъект = ПолучитьОтчетОРозничныхПродажах(Параметры);
    // << 27.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2455
	Если Не ДокументОбъект.ЭтоНовый()
		И ДокументОбъект.КР_Закрыт Тогда 
		ТекстСообщения = НСтр("ru = '%1 закрыт. Повторная загрузка не выполнена'");   
		ТекстСообщения = СтрШаблон(ТекстСообщения, ДокументОбъект);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;	
	// >> 27.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2455
	ДокументОбъект.КР_Закрыт = ЗакрытиеСмены;
	
	Для Каждого Структура Из ДанныеПродажи Цикл
		
		// << 08.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2482
		//userCode = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Структура.userCode, 3, "0"); 
		userCode = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Структура.userCode); 
		// >> 08.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2482
		
		// << 07.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2471
		//Если ТипыДляЗагрузки.Найти(Структура.docType) = Неопределено
		//	Или ТипыДляЗагрузкиЗакрытие.Найти(Структура.closed) = Неопределено Тогда
		//	Продолжить;
		//КонецЕсли;                                              
		// >> 07.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2471
		
		Для Каждого Строка Из Структура.inventPositions Цикл
			
			НоваяСтрока = ТаблицаТовары.Добавить();
			
			НоваяСтрока.docType 			= Структура.docType;
			НоваяСтрока.sourceidentifier 	= Структура.sourceidentifier;
			НоваяСтрока.Штрихкод 			= Строка.barCode;
			НоваяСтрока.Количество 			= Строка.quant;
			НоваяСтрока.Цена 				= Строка.price;
			НоваяСтрока.Сумма	            = Строка.posSum;
			НоваяСтрока.СуммаНДС 			= СуммаНДС(Строка.taxes);      
			// << 10.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2485
			//НоваяСтрока.СуммаРучнойСкидки 	= Строка.disc_abs;  
			discSum = 0;
			Для Каждого ОписаниеСкидки Из Строка.discountPositions Цикл 
				discSum = discSum + ОписаниеСкидки.discSum;
			КонецЦикла;	
			НоваяСтрока.СуммаРучнойСкидки 	= discSum;
			// >> 10.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2485
			НоваяСтрока.Продавец 			= userCode;
			НоваяСтрока.НомерЧека 			= Структура.docNum;
			НоваяСтрока.ИдентификаторЧека 	= Структура.identifier;
			НоваяСтрока.ДатаЧека 			= Структура.timeEnd;
			НоваяСтрока.КартаЛояльности 	= КартаЛояльности(Структура.cardPositions);
			
			// << 10.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2485
			//Если ЗначениеЗаполнено(НоваяСтрока.Сумма) Тогда
			//	НоваяСтрока.ПроцентРучнойСкидки = НоваяСтрока.СуммаРучнойСкидки / НоваяСтрока.Сумма * 100;
			//КонецЕсли;
			Если Строка.quant * Строка.price > 0  Тогда
				НоваяСтрока.ПроцентРучнойСкидки = discSum / (Строка.quant * Строка.price) * 100;   
			Иначе	
				НоваяСтрока.ПроцентРучнойСкидки = 0;   
			КонецЕсли;
			// >> 10.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2485
			
		КонецЦикла;
		
		Для Каждого Строка Из Структура.moneyPositions Цикл
			
			Если Строка.valCode = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			НомерПлатежнойКарты = ?(ЗначениеЗаполнено(Строка.endcardnum), Строка.endcardnum, НомерПустойКарты);
			
			НоваяСтрока = ТаблицаОплата.Добавить();
			
			НоваяСтрока.ИдентификаторЧека 	= Структура.identifier;
			НоваяСтрока.docType 			= Структура.docType;
			НоваяСтрока.paymentmethod 		= Строка.paymentmethod;
			НоваяСтрока.frnum 				= Строка.frnum;
			НоваяСтрока.valCode 			= Строка.valCode;
			НоваяСтрока.КодАвторизации 		= Строка.authcode;
			НоваяСтрока.НомерПлатежнойКарты = НомерПлатежнойКарты;
			НоваяСтрока.Сумма 				= ?(Структура.docType = 1, Строка.sumB, - Строка.sumB);
			НоваяСтрока.НомерЧека 			= Структура.docNum;
			НоваяСтрока.ДатаЧека 			= Структура.timeEnd;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// << 26.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2280 
	Если Не ЗначениеЗаполнено(ТаблицаТовары) Тогда 
		Возврат Истина;	
	КонецЕсли;	
	// >> 26.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2280
		
	ДанныеДокумента = ДанныеДляРозничныхПродаж(ТаблицаТовары, ТаблицаОплата, ДокументОбъект.Склад);
	
	ЗаполнитьДокумент(ДокументОбъект, ДанныеДокумента);
	
	ТекстОшибки 	= "";
	Успешно 		= Ложь;
	
	ЕстьОшибки = Не ДокументОбъект.ПроверитьЗаполнение();
	
	Если ЕстьОшибки Тогда
		
		Шаблон = НСтр("ru='Не удалось загрузить опер. продажи Artix для %1 по причине:
			| Не прошла проверка заполнения обязательных реквизитов.'");
		ТекстОшибки = СтрШаблон(Шаблон, Параметры.ПодключаемоеОборудование);
		
		ЗаписьЖурналаРегистрации(Параметры.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		СписокОшибок.Добавить(ТекстОшибки);
		
		Возврат Успешно;
		
	КонецЕсли;
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Успешно = Истина;
		
	Исключение
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Шаблон = НСтр("ru='Не удалось загрузить опер. продажи Artix для %1 по причине:
			| %2'");
		ТекстОшибки = СтрШаблон(Шаблон, Параметры.ПодключаемоеОборудование, ОписаниеОшибки);
		
		ЗаписьЖурналаРегистрации(Параметры.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		СписокОшибок.Добавить(ТекстОшибки);
		
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 24.03.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ЗакрытиеСмены(ДанныеСмены)
	
	ЗакрытиеСмены = Истина;
	
	Для Каждого Элемент Из ДанныеСмены Цикл
		
		Если Не ЗначениеЗаполнено(Элемент.timeEnd) Тогда
			ЗакрытиеСмены = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗакрытиеСмены;
	
КонецФункции // >> 24.03.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция СуммаНДС(Массив)
	
	Сумма = 0;
	
	Для Каждого Структура Из Массив Цикл
		Сумма = Сумма + Структура.taxSum;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция КартаЛояльности(Массив)
	
	Значение = "";
	
	Если Массив.Количество() > 0 Тогда
		Значение = Массив[0].number;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Процедура ЗаполнитьДокумент(ДокументОбъект, ДанныеДокумента)
	
	ВыборкаОтмены 		= ДанныеДокумента.Отмены;
	ВыборкаТовары 		= ДанныеДокумента.Товары;
	ВыборкаОплата 		= ДанныеДокумента.Оплата;
	
	Товары = ДокументОбъект.Товары;
	Оплата = ДокументОбъект.ОплатаПлатежнымиКартами;
	
	ОчиститьПродажиПередЗагрузкой(ДокументОбъект, ВыборкаТовары, ВыборкаОплата);
	
	// << 26.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2280
	СообщенияОбОшибках = Новый Массив;
	КэшПовторений = Новый Соответствие;       
	ШаблонОшибкиПоискаНоменклатуры = НСтр("ru = 'Не найден товар по штрихкоду ""%1""'");
	// >> 26.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2280
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		// << 26.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2280
		Если Не ЗначениеЗаполнено(ВыборкаТовары.Номенклатура)
			И КэшПовторений[ВыборкаТовары.Штрихкод] = Неопределено Тогда 
			
			ТекстСообщения = СтрШаблон(ШаблонОшибкиПоискаНоменклатуры, ВыборкаТовары.Штрихкод);
			СообщенияОбОшибках.Добавить(ТекстСообщения);
			КэшПовторений[ВыборкаТовары.Штрихкод] = Истина; 
			
		КонецЕсли;	
		// >> 26.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2280
		
		// УДАЛИТЬ ДЛЯ ТЕСТА
		Если Не ЗначениеЗаполнено(ВыборкаТовары.Номенклатура) Или Не ЗначениеЗаполнено(ВыборкаТовары.Помещение) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары);
		
	КонецЦикла;
	
	Пока ВыборкаОплата.Следующий() Цикл
		
		// УДАЛИТЬ ДЛЯ ТЕСТА
		Если Не ЗначениеЗаполнено(ВыборкаОплата.ЭквайринговыйТерминал) Или Не ЗначениеЗаполнено(ВыборкаТовары.Помещение) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Оплата.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаОплата);
		
	КонецЦикла;
	
	Пока ВыборкаОтмены.Следующий() Цикл
		
		Отбор = Новый Структура("КР_ИдентификаторЧека", ВыборкаОтмены.КР_ИдентификаторЧека);
		СтрокиТовары = Товары.НайтиСтроки(Отбор);
		СтрокиОплата = Оплата.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления Из СтрокиТовары Цикл
			Товары.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		Для Каждого СтрокаУдаления Из СтрокиОплата Цикл
			Товары.Удалить(СтрокаУдаления);
		КонецЦикла;
		
	КонецЦикла;
	
	// << 26.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2280
	Если ЗначениеЗаполнено(СообщенияОбОшибках) Тогда 
		
		ДокументОбъект.Комментарий = ДокументОбъект.Комментарий + Символы.ПС
			+ СтрСоединить(СообщенияОбОшибках, Символы.ПС);
			
	КонецЕсли;	
	// >> 26.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-2280

КонецПроцедуры // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 24.03.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Процедура ОчиститьПродажиПередЗагрузкой(ДокументОбъект, ВыборкаТовары, ВыборкаОплата)
	
	ЧекиДляУдаления = Новый Массив;
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		Если ЧекиДляУдаления.Найти(ВыборкаТовары.КР_ИдентификаторЧека) = Неопределено Тогда
			ЧекиДляУдаления.Добавить(ВыборкаТовары.КР_ИдентификаторЧека);
		КонецЕсли;
		
	КонецЦикла;
	
	Пока ВыборкаОплата.Следующий() Цикл
		
		Если ЧекиДляУдаления.Найти(ВыборкаОплата.КР_ИдентификаторЧека) = Неопределено Тогда
			ЧекиДляУдаления.Добавить(ВыборкаОплата.КР_ИдентификаторЧека);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИдентификаторЧека Из ЧекиДляУдаления Цикл
		
		Отбор = Новый Структура("КР_ИдентификаторЧека", ИдентификаторЧека);
		СтрокиТовары = ДокументОбъект.Товары.НайтиСтроки(Отбор);
		СтрокиОплата = ДокументОбъект.ОплатаПлатежнымиКартами.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из СтрокиТовары Цикл
			ДокументОбъект.Товары.Удалить(Строка);
		КонецЦикла;
		
		Для Каждого Строка Из СтрокиОплата Цикл
			ДокументОбъект.ОплатаПлатежнымиКартами.Удалить(Строка);
		КонецЦикла;
		
	КонецЦикла;
	
	ВыборкаТовары.Сбросить();
	ВыборкаОплата.Сбросить();
	
КонецПроцедуры // >> 24.03.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ДанныеДляРозничныхПродаж(ТаблицаТовары, ТаблицаОплата, Склад)
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеДляРозничныхПродаж();
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.УстановитьПараметр("ТаблицаОплата", ТаблицаОплата);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаОтмена	 	= РезультатЗапроса[РезультатЗапроса.ВГраница() - 2].Выбрать();
	ВыборкаТовары 		= РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выбрать();
	ВыборкаОплата 		= РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	
	Результат.Вставить("Отмены", 	ВыборкаОтмена);
	Результат.Вставить("Товары", 	ВыборкаТовары);
	Результат.Вставить("Оплата", 	ВыборкаОплата);
	
	Возврат Результат;
	
КонецФункции // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ТекстЗапросаДанныеДляРозничныхПродаж()
	
	Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерЧека КАК НомерЧека,
	|	ТаблицаТовары.ИдентификаторЧека КАК ИдентификаторЧека,
	|	ТаблицаТовары.docType КАК docType,
	|	ТаблицаТовары.sourceidentifier КАК sourceidentifier,
	|	ТаблицаТовары.Штрихкод КАК Штрихкод,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТаблицаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТаблицаТовары.Продавец КАК Продавец,
	|	ТаблицаТовары.ДатаЧека КАК ДатаЧека,
	|	ТаблицаТовары.КартаЛояльности КАК КартаЛояльности
	|ПОМЕСТИТЬ втТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплата.НомерЧека КАК НомерЧека,
	|	ТаблицаОплата.ИдентификаторЧека КАК ИдентификаторЧека,
	|	ТаблицаОплата.docType КАК docType,
	|	ТаблицаОплата.paymentmethod КАК paymentmethod,
	|	ТаблицаОплата.frnum КАК frnum,
	|	ТаблицаОплата.valCode КАК valCode,
	|	ТаблицаОплата.КодАвторизации КАК КодАвторизации,
	|	ТаблицаОплата.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	ТаблицаОплата.Сумма КАК Сумма,
	|	ТаблицаОплата.ДатаЧека КАК ДатаЧека
	|ПОМЕСТИТЬ втТаблицаОплата
	|ИЗ
	|	&ТаблицаОплата КАК ТаблицаОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайринговыйТерминал
	|ПОМЕСТИТЬ втЭквайринговыеТерминалы
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втТаблицаТовары.ИдентификаторЧека КАК ИдентификаторЧека,
	|	МАКСИМУМ(ЕСТЬNULL(КР_РозничныеПродажи.НомерЗаказаИнтернетМагазина, """")) КАК КР_НомерЗаказаИнтернетМагазина
	|ПОМЕСТИТЬ втНомерИМ
	|ИЗ
	|	втТаблицаТовары КАК втТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КР_РозничныеПродажи КАК КР_РозничныеПродажи
	|		ПО втТаблицаТовары.sourceidentifier = КР_РозничныеПродажи.ИдентификаторЧека
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаТовары.ИдентификаторЧека
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втТаблицаТовары.docType КАК docType,
	// << 14.06.2024 Петухов А.В., Фактор, #4254
	//|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	//|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура,ХарактеристикиНоменклатуры.Владелец) КАК Номенклатура,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика,ХарактеристикиНоменклатуры.Ссылка) КАК Характеристика,
	// >> 14.06.2024 Петухов А.В., Фактор, #4254
	|	втТаблицаТовары.Количество КАК Количество,
	|	втТаблицаТовары.Количество КАК КоличествоУпаковок,
	|	втТаблицаТовары.Цена КАК Цена,
	|	втТаблицаТовары.Сумма КАК Сумма,
	// << 14.06.2024 Петухов А.В., Фактор, #4254
	//|	ШтрихкодыНоменклатуры.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура.СтавкаНДС,ХарактеристикиНоменклатуры.Владелец.СтавкаНДС) КАК СтавкаНДС,
	// >> 14.06.2024 Петухов А.В., Фактор, #4254
	|	втТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	втТаблицаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	втТаблицаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель) КАК Партнер,
	// #4704.. Фомин Д.Ю. 11.09.2024.
	//|	Пользователи.Ссылка КАК Продавец,
	|	ВЫБОР
	|		КОГДА втТаблицаТовары.Продавец = 9999
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Пользователи.КассирКСО)
	|		ИНАЧЕ Пользователи.Ссылка
	|	КОНЕЦ КАК Продавец,
	// ..#4704
	|	втТаблицаТовары.НомерЧека КАК КР_НомерЧека,
	|	втТаблицаТовары.ДатаЧека КАК КР_ДатаЧека,
	|	ВЫБОР
	|		КОГДА КартыЛояльности.Ссылка ЕСТЬ NULL
	|			ТОГДА втТаблицаТовары.КартаЛояльности
	|		ИНАЧЕ КартыЛояльности.Ссылка
	|	КОНЕЦ КАК КР_КартаЛояльности,
	|	втТаблицаТовары.Штрихкод КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА втТаблицаТовары.docType = 1
	|			ТОГДА втТаблицаТовары.sourceidentifier
	|		ИНАЧЕ втНомерИМ.КР_НомерЗаказаИнтернетМагазина
	|	КОНЕЦ КАК КР_НомерЗаказаИнтернетМагазина,
	|	втТаблицаТовары.ИдентификаторЧека КАК КР_ИдентификаторЧека
	|ПОМЕСТИТЬ втДанныеТовары
	|ИЗ
	|	втТаблицаТовары КАК втТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО втТаблицаТовары.Штрихкод = ШтрихкодыНоменклатуры.Штрихкод
	// << 14.06.2024 Петухов А.В., Фактор, #4254
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО втТаблицаТовары.Штрихкод = ХарактеристикиНоменклатуры.КиЗГИСМGTIN
	// >> 14.06.2024 Петухов А.В., Фактор, #4254
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КартыЛояльности КАК КартыЛояльности
	|		ПО втТаблицаТовары.КартаЛояльности = КартыЛояльности.Штрихкод
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНомерИМ КАК втНомерИМ
	|		ПО втТаблицаТовары.ИдентификаторЧека = втНомерИМ.ИдентификаторЧека
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО втТаблицаТовары.Продавец = Пользователи.КР_КодПродавца
	|			И (Пользователи.Подразделение.КР_Склад = &Склад)
	|			И (НЕ Пользователи.ПометкаУдаления)
	|ГДЕ
	|	НЕ втТаблицаТовары.docType В (7, 8)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// << 08.08.2023, Фомичев А.Е., КРОК, Jira№ A2105505-2168
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайрингПодели
	|ПОМЕСТИТЬ втЭквайрингПодели
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.КР_СистемаБыстрыхПлатежей
	|	И НЕ ЭквайринговыеТерминалы.Ссылка = (ЗНАЧЕНИЕ(Справочник.КР_ДополнительныеНастройкиСистемы.Подели)).Значение
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	// >> 08.08.2023, Фомичев А.Е., КРОК, Jira№ A2105505-2168
	|ВЫБРАТЬ
	|	втТаблицаОплата.docType КАК docType,
	|	ВЫБОР
	|		КОГДА втТаблицаОплата.valCode = 15
	|			ТОГДА ЕСТЬNULL(ЭквайринговыеТерминалы2.Ссылка, ЗНАЧЕНИЕ(Справочник.ЭквайринговыеТерминалы.ПустаяСсылка))   
	// << 24.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2529
	|		КОГДА втТаблицаОплата.valCode = 16
	|			ТОГДА ВЫРАЗИТЬ(ЗНАЧЕНИЕ(Справочник.КР_ДополнительныеНастройкиСистемы.СервисПодели) 
	|							КАК Справочник.КР_ДополнительныеНастройкиСистемы).Значение   
	// >> 24.11.2023 Марченко С.Н., КРОК, JIRA№A2105505-2529
	// << 08.08.2023, Фомичев А.Е., КРОК, Jira№ A2105505-2168
	//|		ИНАЧЕ ЕСТЬNULL(ЭквайринговыеТерминалы1.Ссылка, ЗНАЧЕНИЕ(Справочник.ЭквайринговыеТерминалы.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(втЭквайрингПодели.ЭквайрингПодели.Ссылка, ЗНАЧЕНИЕ(Справочник.ЭквайринговыеТерминалы.ПустаяСсылка))
	// >> 08.08.2023, Фомичев А.Е., КРОК, Jira№ A2105505-2168
	|	КОНЕЦ КАК ЭквайринговыйТерминал,
	|	втТаблицаОплата.ИдентификаторЧека КАК ИдентификаторЧека,
	|	втТаблицаОплата.КодАвторизации КАК КодАвторизации,
	|	втТаблицаОплата.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	втТаблицаОплата.Сумма КАК Сумма,
	|	втТаблицаОплата.НомерЧека КАК КР_НомерЧека,
	|	втТаблицаОплата.ДатаЧека КАК КР_ДатаЧека,
	|	втТаблицаОплата.ИдентификаторЧека КАК КР_ИдентификаторЧека
	|ПОМЕСТИТЬ втДанныеОплата
	|ИЗ
	|	втТаблицаОплата КАК втТаблицаОплата
	// << 08.08.2023, Фомичев А.Е., КРОК, Jira№ A2105505-2168
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы1
	//|		ПО (НЕ втТаблицаОплата.valCode = 15)
	//|			И (ЭквайринговыеТерминалы1.Код = втТаблицаОплата.frnum)
	// >> 08.08.2023, Фомичев А.Е., КРОК, Jira№ A2105505-2168
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы2
	|		ПО (втТаблицаОплата.valCode = 15)
	|			И (ЭквайринговыеТерминалы2.КР_СистемаБыстрыхПлатежей)
	// << 08.08.2023, Фомичев А.Е., КРОК, Jira№ A2105505-2168
	|		,
	| 		втЭквайрингПодели КАК втЭквайрингПодели
	// >> 08.08.2023, Фомичев А.Е., КРОК, Jira№ A2105505-2168
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СкладскиеПомещения.Ссылка КАК Помещение
	|ПОМЕСТИТЬ втПомещениеИТ
	|ИЗ
	|	Справочник.СкладскиеПомещения КАК СкладскиеПомещения
	|ГДЕ
	|	СкладскиеПомещения.Владелец = &Склад
	|	И СкладскиеПомещения.КР_ТипСкладскогоПомещения = ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ИнтернетТорговля)
	|	И НЕ СкладскиеПомещения.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СкладскиеПомещения.Ссылка КАК Помещение
	|ПОМЕСТИТЬ втПомещениеТЗ
	|ИЗ
	|	Справочник.СкладскиеПомещения КАК СкладскиеПомещения
	|ГДЕ
	|	СкладскиеПомещения.Владелец = &Склад
	|	И СкладскиеПомещения.КР_ТипСкладскогоПомещения = ЗНАЧЕНИЕ(Перечисление.КР_ТипыСкладскихПомещений.ТорговыйЗал)
	|	И НЕ СкладскиеПомещения.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДанныеТовары.КР_ИдентификаторЧека КАК КР_ИдентификаторЧека,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втДанныеТовары.КР_НомерЗаказаИнтернетМагазина, """") = """"
	|			ТОГДА втПомещениеТЗ.Помещение
	|		ИНАЧЕ втПомещениеИТ.Помещение
	|	КОНЕЦ КАК Помещение
	|ПОМЕСТИТЬ втПомещения
	|ИЗ
	|	втДанныеТовары КАК втДанныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПомещениеИТ КАК втПомещениеИТ
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПомещениеТЗ КАК втПомещениеТЗ
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДанныеТовары.КР_ИдентификаторЧека КАК КР_ИдентификаторЧека
	|ИЗ
	|	втДанныеТовары КАК втДанныеТовары
	|ГДЕ
	|	втДанныеТовары.docType В (7, 8)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеТовары.Номенклатура КАК Номенклатура,
	|	втДанныеТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА втДанныеТовары.docType = 2
	|				ИЛИ втДанныеТовары.docType = 25
	|			ТОГДА -втДанныеТовары.Количество
	|		ИНАЧЕ втДанныеТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА втДанныеТовары.docType = 2
	|				ИЛИ втДанныеТовары.docType = 25
	|			ТОГДА -втДанныеТовары.КоличествоУпаковок
	|		ИНАЧЕ втДанныеТовары.КоличествоУпаковок
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	втДанныеТовары.Цена КАК Цена,
	// << 08.08.2023, Фомичев А.Е., КРОК, Jira№ A2105505-2168
	//|	втДанныеТовары.Сумма КАК Сумма, 
	|	ВЫБОР
	|		КОГДА втДанныеТовары.docType = 2
	|				ИЛИ втДанныеТовары.docType = 25
	|			ТОГДА -втДанныеТовары.Сумма
	|		ИНАЧЕ втДанныеТовары.Сумма
	|	КОНЕЦ КАК Сумма,
	// >> 08.08.2023, Фомичев А.Е., КРОК, Jira№ A2105505-2168
	|	втДанныеТовары.СтавкаНДС КАК СтавкаНДС,
	// << 08.08.2023, Фомичев А.Е., КРОК, Jira№ A2105505-2168
	//|	втДанныеТовары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА втДанныеТовары.docType = 2
	|				ИЛИ втДанныеТовары.docType = 25
	|			ТОГДА -втДанныеТовары.СуммаНДС
	|		ИНАЧЕ втДанныеТовары.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	// >> 08.08.2023, Фомичев А.Е., КРОК, Jira№ A2105505-2168
	|	втДанныеТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	втДанныеТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	втДанныеТовары.Партнер КАК Партнер,
	|	втДанныеТовары.Продавец КАК Продавец,
	|	втДанныеТовары.КР_НомерЧека КАК КР_НомерЧека,
	|	втДанныеТовары.КР_ДатаЧека КАК КР_ДатаЧека,
	|	втДанныеТовары.КР_КартаЛояльности КАК КР_КартаЛояльности,
	|	втДанныеТовары.Штрихкод КАК Штрихкод,
	|	втДанныеТовары.КР_НомерЗаказаИнтернетМагазина КАК КР_НомерЗаказаИнтернетМагазина,
	|	втДанныеТовары.КР_ИдентификаторЧека КАК КР_ИдентификаторЧека,
	|	втПомещения.Помещение КАК Помещение
	|ИЗ
	|	втДанныеТовары КАК втДанныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПомещения КАК втПомещения
	|		ПО втДанныеТовары.КР_ИдентификаторЧека = втПомещения.КР_ИдентификаторЧека
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеОплата.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	втДанныеОплата.ИдентификаторЧека КАК ИдентификаторЧека,
	|	втДанныеОплата.КодАвторизации КАК КодАвторизации,
	|	втДанныеОплата.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	втДанныеОплата.Сумма КАК Сумма,
	|	втДанныеОплата.КР_НомерЧека КАК КР_НомерЧека,
	|	втДанныеОплата.КР_ДатаЧека КАК КР_ДатаЧека,
	|	втДанныеОплата.КР_ИдентификаторЧека КАК КР_ИдентификаторЧека
	|ИЗ
	|	втДанныеОплата КАК втДанныеОплата
	|ГДЕ
	|	НЕ втДанныеОплата.docType В (7, 8)";
	
	Возврат Текст;
	
КонецФункции // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ПолучитьОтчетОРозничныхПродажах(Параметры)
	
	Дата 		= Параметры.ДатаДокумента;
	КассаККМ 	= Параметры.КассаККМ;
	Склад 		= Параметры.Склад;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Дата = &Дата
	|	И ОтчетОРозничныхПродажах.Проведен
	|	И НЕ ОтчетОРозничныхПродажах.ПометкаУдаления
	|	И ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ";
	
	//Запрос.УстановитьПараметр("Дата", 		Дата); 
	Запрос.УстановитьПараметр("Дата", 		НачалоДня(Дата)); //A2105505-2458
	
	Запрос.УстановитьПараметр("КассаККМ", 	КассаККМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Документ = Выборка.Ссылка.ПолучитьОбъект();
		
	Иначе
		
		ВалютаРегл 	= Константы.ВалютаРегламентированногоУчета.Получить();
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		ВидЦены = КР_ДополнительныеНастройкиПовтИсп.Значение("ВидЦеныРозничный");
		
		Документ = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		Документ.Заполнить(Неопределено);
		
		//Документ.Дата 				= Дата;  
		Документ.Дата 				= НачалоДня(Дата);//A2105505-2458
		Документ.ВидЦены 			= ВидЦены;
		Документ.КассаККМ 			= КассаККМ;
		Документ.Валюта 			= ВалютаРегл;
		Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		Документ.Организация 		= Организация;
		Документ.Склад 				= Склад;
		Документ.ЦенаВключаетНДС 	= Истина;    
		
		// << 25.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2422
		Документ.Подразделение = Документ.КассаККМ.Подразделение;
		// >> 25.10.2023 Марченко С.Н., КРОК, JIRA№A2105505-2422
		
	КонецЕсли;
	
	Если Параметры.ЗакрытиеСмены Тогда
		Комментарий = "Загружено из Aritx POS - продажи за смену";
	Иначе
		Комментарий = "Загружено из Aritx POS - оперативные продажи";
	КонецЕсли;
	
	Документ.Комментарий = Комментарий;
	
	Возврат Документ;
	
КонецФункции // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ДатаДокументаПоИмениФайла(ИмяБезРасширения)
	
	Год 	= Сред(ИмяБезРасширения, 13, 	4);
	Месяц 	= Сред(ИмяБезРасширения, 10, 	2);
	День 	= Сред(ИмяБезРасширения, 7, 	2);
	Час 	= Сред(ИмяБезРасширения, 18, 	2);
	Минута 	= Сред(ИмяБезРасширения, 21, 	2);
	Секунда = Сред(ИмяБезРасширения, 24, 	2);
	
	ДатаДокумента = Дата(Год, Месяц, День, Час, Минута, Секунда);
	
	Возврат ДатаДокумента;
	
КонецФункции // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ТипыДокументовДляЗагрузки()
	
	ТипыДляЗагрузки = Новый Массив;
	ТипыДляЗагрузки.Добавить(1);
	ТипыДляЗагрузки.Добавить(2);
	ТипыДляЗагрузки.Добавить(25);
	ТипыДляЗагрузки.Добавить(7);
	ТипыДляЗагрузки.Добавить(8);
	
	Возврат ТипыДляЗагрузки;
	
КонецФункции // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150
Функция ТипыДокументовДляЗагрузкиЗакрытие()
	
	ТипыДляЗагрузки = Новый Массив;
	ТипыДляЗагрузки.Добавить(1);
	
	Возврат ТипыДляЗагрузки;
	
КонецФункции // >> 07.02.2023, Гашников А.П., КРОК, Jira№ A2105505-1150

// << 24.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168 
Функция СгруппироватьДанныеПродажПоДате(ДанныеПродажи)
	
	ГруппировкаДанных = Новый Соответствие;
	
	Для Каждого СтрокаДанных Из ДанныеПродажи Цикл 
		
		ДатаПродажи = КонецДня(СтрокаДанных.timeBeg);
		
		ДетализацияПродаж = ГруппировкаДанных[ДатаПродажи];   
		Если ДетализацияПродаж = Неопределено Тогда 
			ДетализацияПродаж = Новый Массив;
			ГруппировкаДанных[ДатаПродажи] = ДетализацияПродаж;
		КонецЕсли;
		
		ДетализацияПродаж.Добавить(СтрокаДанных);
		
	КонецЦикла;  
	
	Возврат ГруппировкаДанных;
	
КонецФункции // >> 24.08.2023 Марченко С.Н., КРОК, JIRA№A2105505-2168	

#КонецОбласти

#Область СБИС

#Область ПодпискиНаСобытия

// << 16.03.2023 Маскаев П.Ю., КРОК, JIRA№ A2105505-1153
Процедура ИсходящийДокументСБИСПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда  
		
		ИсточникТипЗначения = ТипЗнч(Источник);
		Если ИсточникТипЗначения = Тип("ДокументОбъект.ЛистКассовойКниги")
			Или (ИсточникТипЗначения = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
				И Не Источник.КР_ПоступлениеВКассуККМ)   
			Или (ИсточникТипЗначения = Тип("ДокументОбъект.РасходныйКассовыйОрдер")
				И Не Источник.КР_ВозвратИзКассыККМ) Тогда 
				
			Источник.ДополнительныеСвойства.Вставить(
				"КР_РегистрироватьКВыгрузкеВСБИС", Истина);   
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Источник.ДополнительныеСвойства.Вставить(
			"КР_УдалитьСостояниеИсходящегоДокументаСБИС", Истина);
	КонецЕсли;
	
КонецПроцедуры // >> 16.03.2023 Маскаев П.Ю., КРОК, JIRA№ A2105505-1153

// << 16.03.2023 Маскаев П.Ю., КРОК, JIRA№ A2105505-1153
Процедура ИсходящийДокументСБИСПриЗаписи(Источник, Отказ) Экспорт
	
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("КР_РегистрироватьКВыгрузкеВСБИС")
		И Источник.ДополнительныеСвойства.КР_РегистрироватьКВыгрузкеВСБИС = Истина Тогда

		РегистрыСведений.КР_ИсходящиеДокументыСБИС.ЗаписатьСостояниеИсходящегоДокументаСБИС(Источник.Ссылка); 
			
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("КР_УдалитьСостояниеИсходящегоДокументаСБИС")
		И Источник.ДополнительныеСвойства.КР_УдалитьСостояниеИсходящегоДокументаСБИС = Истина Тогда
		РегистрыСведений.КР_ИсходящиеДокументыСБИС.УдалитьСостояниеИсходящегоДокументаСБИС(Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры // >> 16.03.2023 Маскаев П.Ю., КРОК, JIRA№ A2105505-1153

// << 14.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-1153
Процедура ПриЗаписиСправочникаСБИСПриЗаписи(Источник, Отказ) Экспорт

	ИсточникТипЗначения = ТипЗнч(Источник);
	Если (ИсточникТипЗначения = Тип("СправочникОбъект.КР_ПриходныйКассовыйОрдерПрисоединенныеФайлы")
			И Источник.ВладелецФайла.Проведен И Не Источник.ВладелецФайла.КР_ПоступлениеВКассуККМ)   
		Или (ИсточникТипЗначения = Тип("СправочникОбъект.КР_РасходныйКассовыйОрдерПрисоединенныеФайлы")
			И Источник.ВладелецФайла.Проведен И Не Источник.ВладелецФайла.КР_ВозвратИзКассыККМ) Тогда 

		РегистрыСведений.КР_ИсходящиеДокументыСБИС.ЗаписатьСостояниеИсходящегоДокументаСБИС(Источник.ВладелецФайла); 
					
	КонецЕсли;
	
КонецПроцедуры // >> 14.09.2023 Марченко С.Н., КРОК, JIRA№A2105505-1153

#КонецОбласти

#КонецОбласти

#Область КИЗ

// --> Евлахов Игорь Николаевич (Начало) 15.03.2024
// Задача #3883
Процедура ОбработатьСоответствиеКИЗ(РезультатЗапроса, СоответствиеКИЗ)
	
	// РезультатЗапроса - соответствие. Ключ - штрихкод номенклатуры, Значение - штрихкод КИЗ
	// Требуется конвертация из base64

	Для Каждого СтрокаОтветаШКН Из РезультатЗапроса Цикл
		КонтрольныеИдентификационныеЗнаки = Новый Массив;
		
		Если ТипЗнч(СтрокаОтветаШКН.Значение) = Тип("Массив") Тогда
			Для Каждого ЗначениеКодаBase64 Из СтрокаОтветаШКН.Значение Цикл
				ДвоичныеДанныеСтроки = Base64Значение(ЗначениеКодаBase64);
				ЗначениеКода = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеСтроки);
				КонтрольныеИдентификационныеЗнаки.Добавить(ЗначениеКода);
			КонецЦикла;
		Иначе
			ТекстСообщения = НСтр("ru = 'Отсутствует механизм обработки ответа сервера'");
			ДобавитьВЛог("WMS_API", ТекстСообщения, "ОбработкаРезультатаЗапроса");
		КонецЕсли;
		
		СоответствиеКИЗ.Вставить(СтрокаОтветаШКН.Ключ, КонтрольныеИдентификационныеЗнаки);
	КонецЦикла;
	
КонецПроцедуры
// <-- Евлахов Игорь Николаевич (Конец) 15.03.2024

#КонецОбласти

#Область Прочее

// --> Евлахов Игорь Николаевич (Начало) 15.03.2024
// Задача #3883
Функция URLОперацииСервиса(ПараметрыПодключения)
	
	ЗащищенноеСоединение = Ложь;
	
	Если ПараметрыПодключения.Протокол = "https" Тогда
		ЗащищенноеСоединение = Истина;	
	КонецЕсли;
	
	Если ПараметрыПодключения.Свойство("Порт") И ЗначениеЗаполнено(ПараметрыПодключения.Порт) Тогда
		Порт = ПараметрыПодключения.Порт;		
	Иначе
		Порт = ?(ЗащищенноеСоединение, 443, 80);	
	КонецЕсли;
	
	ТекстШаблона = НСтр("ru = '%1://%2:%3/%4'");
	URLОперации = СтрШаблон(ТекстШаблона, 
							ПараметрыПодключения.Протокол,
							ПараметрыПодключения.АдресСервера,
							Формат(Порт, "ЧГ=0"),
							ПараметрыПодключения.АдресAPI);
	Возврат(URLОперации);
	
КонецФункции
// <-- Евлахов Игорь Николаевич (Конец) 15.03.2024

#КонецОбласти

#КонецОбласти
