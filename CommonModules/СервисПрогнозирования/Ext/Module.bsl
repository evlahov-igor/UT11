
#Область ПрограммныйИнтерфейс

#Область РаботаСВнешнимиРесурсами
///////////////////////////////////////////////////////////////////////////////
// Инициализации параметров сеанса.

///////////////////////////////////////////////////////////////////////////////
// Работа с запросами API.

// Выполняет итоговый запрос согласно структуре входящих параметров.
// 
// Параметры:
//  Метод - Строка - Метод HTTP-запроса.
//  URLЗапроса - Строка - Строка соединения с сервером.
//  Заголовки - Неопределено, Соответствие - Заголовки.
//  ТелоЗапроса - Строка - Тело запроса в формате JSON.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ВыполнитьHTTPЗапрос(Метод,
	URLЗапроса,
	Заголовки = Неопределено,
	ТелоЗапроса = "") Экспорт
	
	СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
	
	СтруктураURI = СтруктураURI(URLЗапроса);
	
	ИнформацияОРесурсе = Новый Структура("Метод, РесурсСервиса, Заголовки",
		Метод,
		URLЗапроса,
		"");
	
	Если ЗначениеЗаполнено(Заголовки) Тогда
		Для Каждого КлючЗначение Из Заголовки Цикл
			ИнформацияОРесурсе.Заголовки = ИнформацияОРесурсе.Заголовки + КлючЗначение.Ключ + ":" 
				+ КлючЗначение.Значение + ";";
		КонецЦикла;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, , , ,60);
	
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Charset", "utf-8");
	
	Если ЗначениеЗаполнено(Заголовки) Тогда
		Для Каждого КлючЗначение Из Заголовки Цикл
			HTTPЗапрос.Заголовки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Результат = Неопределено;
	СтруктураРезультата = СтруктураОтвета();
	
	Попытка
		Результат = HTTPСоединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
		РегистрыСведений.ЖурналСервисаПрогнозирования.ЗаписатьИнформациюОбОбмене(ИнформацияОРесурсе,
			Результат.КодСостояния,
			ТелоЗапроса,
			Ложь,
			Истина);
	Исключение
		// Запрос не дошел до HTTP-Сервера.
		// Failure when receiving data from the peer.
		ТекстСообщения = СтрШаблон(НСтр("ru='По запросу URL: %1 произошла сетевая ошибка. %2'"),
			URLЗапроса,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		РегистрыСведений.ЖурналСервисаПрогнозирования.ЗаписатьИнформациюОбОбмене(ИнформацияОРесурсе,
			-1,
			ТелоЗапроса,
			Истина,
			Истина);
		РегистрыСведений.ЖурналСервисаПрогнозирования.ЗаписатьИнформациюОбОбмене(ИнформацияОРесурсе,
			-1,
			ТекстСообщения,
			Истина,
			Ложь);
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	КонецПопытки;
	
	Если Результат <> Неопределено Тогда
		ЕстьОшибка = Ложь;
		Если Результат.КодСостояния >= 400 И Результат.КодСостояния < 500  Тогда // Код статуса 4XX, ошибка запроса
			ЕстьОшибка = Истина;
			Если Метод = "GET" Тогда
				ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - ошибка запроса.
					|Метод: %3'");
				ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, Результат.КодСостояния, Метод);
			Иначе
				ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - ошибка запроса.
					|Метод: %3
					|Тело запроса: %4'");
				ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, Результат.КодСостояния, Метод, Лев(ТелоЗапроса, 200));
			КонецЕсли;
				
			РегистрыСведений.ЖурналСервисаПрогнозирования.ЗаписатьИнформациюОбОбмене(ИнформацияОРесурсе,
				Результат.КодСостояния,
				ТекстСообщения,
				Истина,
				Ложь);

			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецЕсли;
		
		Если Результат.КодСостояния >= 500 И Результат.КодСостояния < 600 Тогда // Код статуса 5XX, ошибка сервера
			ЕстьОшибка = Истина;
			
			Если Метод = "GET" Тогда
				ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - ошибка сервера.
					|Метод: %3'");
				ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, Результат.КодСостояния, Метод);
			Иначе
				ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - ошибка сервера.
					|Метод: %3
					|Тело запроса: %4'");
				ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, Результат.КодСостояния, Метод, Лев(ТелоЗапроса, 200));
			КонецЕсли;
			
			РегистрыСведений.ЖурналСервисаПрогнозирования.ЗаписатьИнформациюОбОбмене(ИнформацияОРесурсе,
				Результат.КодСостояния,
				ТекстСообщения,
				Истина,
				Ложь);
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецЕсли;
		
		// Обрабатываем перенаправление.
		Если Результат.КодСостояния >= 300 И Результат.КодСостояния < 400 Тогда // Код статуса 3XX, Перенаправление.
			
			Если Метод = "GET" Тогда
				ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - перенаправление.
					|Метод: %3'");
				ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, Результат.КодСостояния, Метод);
			Иначе
				ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - перенаправление.
					|Метод: %3
					|Тело запроса: %4'");
				ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, Результат.КодСостояния, Метод, Лев(ТелоЗапроса, 200));
			КонецЕсли;
			
			Если Результат.КодСостояния = 302 Тогда // Код статуса 302, Постоянное перенаправление.
				АдресРесурса = Результат.Заголовки.Получить("Location");
				
				Если АдресРесурса <> Неопределено Тогда
					
					Если Метод = "GET" Тогда
						ШаблонТекста = НСтр("ru='По запросу URL: %1 производится попытка выполнения по новому адресу %2.
							|Метод: %3'");
						ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, АдресРесурса, Метод);
					Иначе
						ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - перенаправление.
							|Метод: %3
							|Тело запроса: %4'");
						ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, АдресРесурса, Метод, Лев(ТелоЗапроса, 200));
					КонецЕсли;
					
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
					
					URLЗапроса = СтрЗаменить(URLЗапроса, СтруктураURI.Хост, АдресРесурса);
					Попытка
						ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапроса);
					Исключение
						
						Если Метод = "GET" Тогда
							ШаблонТекста = НСтр("ru='По запросу URL: %1 попытка выполнения(перенаправления) его по новому адресу %2 произошла с ошибкой.
								|Метод: %3'");
							ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, АдресРесурса, Метод);
						Иначе
							ШаблонТекста = НСтр("ru='По запросу URL: %1 попытка выполнения(перенаправления) его по новому адресу %2 произошла с ошибкой.
								|Метод: %3
								|Тело запроса: %4'");
							ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, АдресРесурса, Метод, Лев(ТелоЗапроса, 200));
						КонецЕсли;
						
						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
					КонецПопытки;
				Иначе
					
					Если Метод = "GET" Тогда
					ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - постоянное перенаправление, но сервер не сообщил адрес ресурса.
							|Метод: %3'");
						ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, Результат.КодСостояния, Метод);
					Иначе
						ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - постоянное перенаправление, но сервер не сообщил адрес ресурса.
							|Метод: %3
							|Тело запроса: %4'");
						ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, Результат.КодСостояния, Метод, Лев(ТелоЗапроса, 200));
					КонецЕсли;
					
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		СтруктураРезультата = СтруктураОтветаСервиса(Результат);
		
		РегистрыСведений.ЖурналСервисаПрогнозирования.ЗаписатьИнформациюОбОбмене(ИнформацияОРесурсе,
			Результат.КодСостояния,
			Результат.ПолучитьТелоКакСтроку(),
			ЕстьОшибка,
			Ложь);
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область Авторизация

// Получить тикет ИТС.
// 
// Возвращаемое значение:
//  Структура - Ответ функции получения тикета ИТС:
// * Тикет - Строка -
// * ТекстОшибки - Строка -
Функция ПолучитьТикет() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура("Тикет, ТекстОшибки", "", "");
	
	Тикет = "";
	ВладелецТикета = "https://forecast.1c.ai";
	УстановитьПривилегированныйРежим(Истина);
	МодульИнтернетПоддержкаПользователей = СервисПрогнозирования.МодульИнтернетПоддержкаПользователей();
	Если МодульИнтернетПоддержкаПользователей = Неопределено Тогда
		ТекстСообщенияОбОшибке = ТекстОшибкиНеУдалосьПолучитьМодульИнтернетПоддержкаПользователей();
		ВозвращаемоеЗначение.ТекстОшибки = ТекстСообщенияОбОшибке;
		ВозвращаемоеЗначение.Тикет = Тикет;
		Возврат ВозвращаемоеЗначение;
	Иначе
		РезультатПолученияТикета =
			МодульИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Если Не ПустаяСтрока(РезультатПолученияТикета.Тикет) Тогда
		// Вызвать целевой сервис, используя полученный тикет.
		Тикет = РезультатПолученияТикета.Тикет;
	ИначеЕсли РезультатПолученияТикета.КодОшибки = "НеверныйЛогинИлиПароль" Тогда
		// Отсутствуют сохраненные данные аутентификации или данные аутентификации некорректны.
		ТекстСообщенияОбОшибке = ТекстОшибкиНеверныйЛогинПарольИТС();
		ВозвращаемоеЗначение.ТекстОшибки = ТекстСообщенияОбОшибке;
	Иначе
		// При получении тикета возникла сетевая или иная ошибка.
		ТекстСообщенияОбОшибке = ТекстОшибкиНеУдалосьПолучитьТикет();
		ВозвращаемоеЗначение.ТекстОшибки = ТекстСообщенияОбОшибке;
	КонецЕсли;
	
	
	ВозвращаемоеЗначение.Тикет = Тикет;
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Отправить заявку на подключение к сервису.
// 
// Возвращаемое значение:
//  Булево -
Функция ОтправитьЗаявкуВСервис() Экспорт
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	Если Не ЗначениеЗаполнено(НастройкиСервиса.ТокенПриложения) Тогда
		Ответ = ПолучитьТикет();
		Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
			СтруктураОтвета = СтруктураОтвета();
			СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
			Возврат СтруктураОтвета;
		КонецЕсли;
		
		Ответ = ЗарегистрироватьПриложениеВСервисеПоИТС(Ответ.Тикет);
		Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
			Возврат Ответ;
		КонецЕсли;
		
		НастройкиСервиса = ПолучитьНастройкиСервиса();
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("feedback");
	ПараметрыАдреса.Добавить(НастройкиСервиса.ИдентификаторПриложения);
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	ВложенноеТелоЗапроса = Новый Структура();
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("НазваниеКомпании"),
		НастройкиСервиса.НазваниеКомпании);
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ФИОКонтактногоЛица"),
		НастройкиСервиса.ФИОКонтактногоЛица);
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ЭлектроннаяПочта"),
		НастройкиСервиса.ЭлектроннаяПочта);
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("НомерТелефона"),
		НастройкиСервиса.НомерТелефона);
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("НомерТелефонаКомментарий"),
		НастройкиСервиса.НомерТелефонаКомментарий);
		
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("НовыйПользователь"),
		ВложенноеТелоЗапроса);
	
	Заголовки = Новый Соответствие();
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ЗаявкаНаПодключение",
			СтруктураОтвета.КодСостояния);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Зарегистрировать пользователя сервиса.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ЗарегистрироватьПользователяСервиса() Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("login");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Логин"),
		НастройкиСервиса.Логин);
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Пароль"),
		НастройкиСервиса.Пароль);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Неопределено, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "РегистрацияПользователя");
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Зарегистрировать приложение в сервисе.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ЗарегистрироватьПриложениеВСервисе() Экспорт
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("auth");
	ПараметрыАдреса.Добавить("login");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ВложенноеТелоЗапроса = Новый Структура();
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ИмяБазы"),
		НастройкиСервиса.ИмяБазы);
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Логин"),
		НастройкиСервиса.Логин);
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Пароль"),
		НастройкиСервиса.Пароль);
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Тариф"),
		НастройкиСервиса.Тариф);
	ТелоЗапроса.Вставить("scope",
		ВложенноеТелоЗапроса);
	
	Заголовки = Новый Соответствие();
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "РегистрацияПриложения",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Зарегистрировать приложение в сервисе по ИТС.
// 
// Параметры:
//  Тикет - Строка -
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ЗарегистрироватьПриложениеВСервисеПоИТС(Тикет) Экспорт
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("auth");
	ПараметрыАдреса.Добавить("its");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ВложенноеТелоЗапроса = Новый Структура();
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ИмяБазы"),
		НастройкиСервиса.ИмяБазы);
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить("ticket",
		Тикет);
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Тариф"),
		НастройкиСервиса.Тариф);
	ТелоЗапроса.Вставить("scope",
		ВложенноеТелоЗапроса);
	
	Заголовки = Новый Соответствие();
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "РегистрацияПриложения",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Повторная регистрация приложения в сервисе.
// 
// Параметры:
//  ИдентификаторПриложения - Строка - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПовторнаяРегистрацияПриложенияВСервисе(ИдентификаторПриложения) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("auth");
	ПараметрыАдреса.Добавить("login");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ВложенноеТелоЗапроса = Новый Структура();
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ИмяБазы"),
		НастройкиСервиса.ИмяБазы);
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Логин"),
		НастройкиСервиса.Логин);
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Пароль"),
		НастройкиСервиса.Пароль);
	ТелоЗапроса.Вставить("application_uuid",
		ИдентификаторПриложения);
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Тариф"),
		НастройкиСервиса.Тариф);
	ТелоЗапроса.Вставить("scope",
		ВложенноеТелоЗапроса);
	
	Заголовки = Новый Соответствие();
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "РегистрацияПриложения",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Повторная регистрация приложения в сервисе по ИТС.
// 
// Параметры:
//  Тикет - Строка - 
//  ИдентификаторПриложения - Строка - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПовторнаяРегистрацияПриложенияВСервисеПоИТС(Тикет, ИдентификаторПриложения) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("auth");
	ПараметрыАдреса.Добавить("its");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ВложенноеТелоЗапроса = Новый Структура();
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ИмяБазы"),
		НастройкиСервиса.ИмяБазы);
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить("ticket",
		Тикет);
	ТелоЗапроса.Вставить("application_uuid",
		ИдентификаторПриложения);
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Тариф"),
		НастройкиСервиса.Тариф);
	ТелоЗапроса.Вставить("scope",
		ВложенноеТелоЗапроса);
	
	Заголовки = Новый Соответствие();
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "РегистрацияПриложения",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Обновить токен доступа приложения в сервисе.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ОбновитьТокенДоступаПриложенияВСервисе() Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("auth_application");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ТокенОбновления"),
		НастройкиСервиса.ТокенОбновления);
	
	Заголовки = Новый Соответствие();
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "РегистрацияПриложения");
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Выдать права приложению в сервисе.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ВыдатьПраваПриложениюВСервисе() Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("copy_grants");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ИдентификаторПриложения"),
		НастройкиСервиса.ТокенПриложения);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПользователя);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Выдать права приложению в сервисе.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьСтатусПодключенияКСервису() Экспорт
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("auth");
	ПараметрыАдреса.Добавить("info");
	
	Метод = "GET";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ТелоЗапроса = "";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучениеСтатуса",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область Коллекции

// Создать коллекции.
// 
// Параметры:
//  КоллекцииДляСоздания - Неопределено, Массив из Строка - Коллекции для создания
Процедура СоздатьКоллекции(КоллекцииДляСоздания = Неопределено) Экспорт
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	Для Каждого КлючЗначениеКоллекции Из НастройкиСервиса.Коллекции Цикл
		Если КоллекцииДляСоздания <> Неопределено
			И КоллекцииДляСоздания.Найти(КлючЗначениеКоллекции.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеКоллекции = КлючЗначениеКоллекции.Значение;
		
		КоллекцияВыгружалась = НастройкиСервиса.ИдКоллекций.Свойство(ОписаниеКоллекции.ИмяВСервисе);
		Если ОписаниеКоллекции.Выгружать
			И НастройкиСервиса.ИзмененияКоллекций.Свойство(ОписаниеКоллекции.ИмяВИсточнике) Тогда
			ИзмененФормат = НастройкиСервиса.ИзмененияКоллекций[ОписаниеКоллекции.ИмяВИсточнике].ИзмененФормат;
			
			Если Не КоллекцияВыгружалась Тогда
				СоздатьКоллекцию(ОписаниеКоллекции.ИмяВСервисе);
			ИначеЕсли КоллекцияВыгружалась
				И ИзмененФормат Тогда
				УдалитьКоллекцию(ОписаниеКоллекции.ИмяВИсточнике);
				СоздатьКоллекцию(ОписаниеКоллекции.ИмяВСервисе);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Очистить или удалить коллекцию на сервере.
// 
// Параметры:
//  ИдКоллекции - Число - Ид коллекции
//  УдалитьКоллекцию - Булево - Удалить коллекцию
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ОчиститьУдалитьКоллекцию(ИдКоллекции, УдалитьКоллекцию = Ложь) Экспорт
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("data");
	ПараметрыАдреса.Добавить(ИдКоллекции);
	
	Если УдалитьКоллекцию Тогда
		Метод = "DELETE";
	Иначе
		Метод = "PUT";
	КонецЕсли;
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	ТелоЗапроса = Новый Структура();
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции


// Выгрузить коллекции.
// 
// Параметры:
//  КоллекцииДляВыгрузки - Массив из Строка - Коллекции для выгрузки
//  АдресХранилища - Строка - Адрес хранилища
Процедура ВыгрузитьКоллекции(КоллекцииДляВыгрузки = Неопределено, АдресХранилища = Неопределено) Экспорт
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ЗапланированоВыгрузитьКоллекций = 0;
	Если КоллекцииДляВыгрузки <> Неопределено Тогда
		ЗапланированоВыгрузитьКоллекций = КоллекцииДляВыгрузки.Количество();
	Иначе
		Для Каждого КлючЗначениеКоллекции Из НастройкиСервиса.Коллекции Цикл
			ОписаниеКоллекции = КлючЗначениеКоллекции.Значение;
			Если ОписаниеКоллекции.Выгружать Тогда
				ЗапланированоВыгрузитьКоллекций = ЗапланированоВыгрузитьКоллекций + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьСтатусВыгрузки(Истина, ЗапланированоВыгрузитьКоллекций, 0, "");
	
	ВыгруженоКоллекций = 0;
	Для Каждого КлючЗначениеКоллекции Из НастройкиСервиса.Коллекции Цикл
		Если КоллекцииДляВыгрузки <> Неопределено
			И КоллекцииДляВыгрузки.Найти(КлючЗначениеКоллекции.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеКоллекции = КлючЗначениеКоллекции.Значение;
		Выгружать = ОписаниеКоллекции.Выгружать;
		Категориальный = ОписаниеКоллекции.Категориальный;
		
		УстановитьСтатусВыгрузки(Истина, ЗапланированоВыгрузитьКоллекций, ВыгруженоКоллекций, ОписаниеКоллекции.Представление);
		
		ОбработаноПолностью = Истина;
		Если Выгружать
			И Категориальный Тогда
			ОбработаноПолностью = ВыгрузитьКатегориальнуюКоллекцию(ОписаниеКоллекции.ИмяВИсточнике);
			ВыгруженоКоллекций = ВыгруженоКоллекций + 1;
		ИначеЕсли Выгружать
			И Не Категориальный Тогда
			ОбработаноПолностью = ВыгрузитьПериодическуюКоллекцию(ОписаниеКоллекции.ИмяВИсточнике);
			ВыгруженоКоллекций = ВыгруженоКоллекций + 1;
		КонецЕсли;
		
		Если Не ОбработаноПолностью Тогда
			Прервать;
		КонецЕсли;
		
		УстановитьСтатусВыгрузки(Истина, ЗапланированоВыгрузитьКоллекций, ВыгруженоКоллекций, ОписаниеКоллекции.Представление);
		
	КонецЦикла;
	
	УстановитьСтатусВыгрузки(Ложь);
	
КонецПроцедуры

// Получить информацию о коллекциях.
// 
// Параметры:
//  ИмяКоллекции - Строка - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьИнформациюОКоллекциях(ИмяКоллекции) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	ИдКоллекции = НастройкиСервиса.ИдКоллекций[НастройкиСервиса.Коллекции[ИмяКоллекции].ИмяВСервисе];
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("data");
	ПараметрыАдреса.Добавить(ИдКоллекции);
	ПараметрыАдреса.Добавить("info");
	
	Метод = "GET";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	ТелоЗапроса = Новый Структура();
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область Модели

// Проверить создать модель.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПроверитьСоздатьМодель(ВидПлана) Экспорт
	
	ПроверитьВидПлана(ВидПлана);
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	СтруктураОтвета = Новый Структура("ТекстОшибки");
	Если НастройкиСервиса.МоделиПрогнозирования.Получить(ВидПлана) = Неопределено Тогда
		Ответ = СоздатьМодель(ВидПлана);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Создать модель.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция СоздатьМодель(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ИдМодели = НастройкиСервиса.МоделиПрогнозирования.Получить(ВидПлана);
	Если ИдМодели <> Неопределено Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстМоделиУжеНазначенИдентификатор();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ИмяМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "Наименование");
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("models");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить("modelName",
		ИмяМодели);
	ТелоЗапроса.Вставить("service",
		НастройкиСервиса.ИмяСервиса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "СозданиеМодели",
			ВидПлана);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить информацию о моделях.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьИнформациюОМоделях() Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("models");
	
	Метод = "GET";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ОбновлениеИнформацииОКоллекциях");
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область КонфигурацииМоделей

// Проверить создать конфигурацию модели.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПроверитьСоздатьКонфигурациюМодели(ВидПлана) Экспорт
	
	ПроверитьВидПлана(ВидПлана);
	Ответ = СоздатьКонфигурациюМодели(ВидПлана);
	Возврат Ответ;
	
КонецФункции

// Создать конфигурацию модели.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция СоздатьКонфигурациюМодели(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ИдМодели = НастройкиСервиса.МоделиПрогнозирования.Получить(ВидПлана);
	Если ИдМодели = Неопределено Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ТребуемыеРеквизиты = СервисПрогнозированияПереопределяемыйКлиентСервер.РеквизитыВидаПланаДляСервисаПрогнозирования();
	ТребуемыеРеквизиты = ТребуемыеРеквизиты + ", ЗаполнятьПоХарактеристикамНоменклатуры, ЗаполнятьПартнера, ЗаполнятьПартнераВТЧ, ЗаполнятьСклад, ЗаполнятьСкладВТЧ";
	НастройкиВидаПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, ТребуемыеРеквизиты);
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("config");
	
	Метод = "PUT";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Если НастройкиСервиса.ИдКоллекций.Количество() = 0 Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНетКоллекцийДляВыгрузки();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ТелоЗапросаКоллекции = Новый Структура();
	Для Каждого КлючЗначение Из НастройкиСервиса.Коллекции Цикл
		Если КлючЗначение.Значение.Выгружать Тогда
			ИмяВСервисе = КлючЗначение.Значение.ИмяВСервисе;
			Если НастройкиСервиса.ИдКоллекций.Свойство(ИмяВСервисе) Тогда
				НомерКоллекции = НастройкиСервиса.ИдКоллекций[ИмяВСервисе];
				ТелоЗапросаКоллекции.Вставить(ИмяВСервисе, Число(НомерКоллекции));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТелоЗапросаJSONКоллекции = СформироватьТелоЗапросаJSON(ТелоЗапросаКоллекции);
	
	ТелоЗапросаПользовательскиеПоляЧисловые = Новый Структура();
	ТелоЗапросаПользовательскиеПоляКатегориальные = Новый Структура();
	ТелоЗапросаПоляСезонности = Новый Массив();
	Для Каждого КлючЗначение Из НастройкиСервиса.Коллекции Цикл
		КатегориальныеПоля = Новый Массив();
		ЧисловыеПоля = Новый Массив();
		Для Каждого КлючЗначениеПоля Из КлючЗначение.Значение.ВложенноеОписание Цикл
			Если КлючЗначениеПоля.Значение.ЭтоПользовательскоеПоле Тогда
				Если КлючЗначениеПоля.Значение.Категориальный Тогда
					КатегориальныеПоля.Добавить(КлючЗначениеПоля.Значение.ИмяВСервисе);
				Иначе
					ЧисловыеПоля.Добавить(КлючЗначениеПоля.Значение.ИмяВСервисе);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ИмяВСервисе = КлючЗначение.Значение.ИмяВСервисе;
		Если КатегориальныеПоля.Количество() > 0 Тогда
			ТелоЗапросаПользовательскиеПоляКатегориальные.Вставить(ИмяВСервисе, КатегориальныеПоля);
		КонецЕсли;
		Если ЧисловыеПоля.Количество() > 0 Тогда
			ТелоЗапросаПользовательскиеПоляЧисловые.Вставить(ИмяВСервисе, ЧисловыеПоля);
		КонецЕсли;
	КонецЦикла;
	Если Не НастройкиВидаПлана.ИсключатьСезонность Тогда
		РезультатЗапроса = НастройкиВидаПлана.РеквизитыРасчетаСезонности; // РезультатЗапроса.
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТелоЗапросаПоляСезонности.Добавить(Выборка.ИмяВСервисе);
		КонецЦикла;
	КонецЕсли;
	
	ТелоЗапросаJSONПользовательскиеПоляЧисловые = СформироватьТелоЗапросаJSON(ТелоЗапросаПользовательскиеПоляЧисловые);
	ТелоЗапросаJSONПользовательскиеПоляКатегориальные = СформироватьТелоЗапросаJSON(ТелоЗапросаПользовательскиеПоляКатегориальные);
	ТелоЗапросаJSONПоляСезонности = СформироватьТелоЗапросаJSON(ТелоЗапросаПоляСезонности);
	
	ТелоЗапроса = Новый Структура();
	
	СпособРасчетаСреднегоИСтандартногоОтклонения = "auto";
	Если НастройкиВидаПлана.РассчитыватьОтклонениеПоСезоннымЗначениям = 1 Тогда
		СпособРасчетаСреднегоИСтандартногоОтклонения = "season";
	ИначеЕсли НастройкиВидаПлана.РассчитыватьОтклонениеПоСезоннымЗначениям = 2 Тогда
		СпособРасчетаСреднегоИСтандартногоОтклонения = "trend";
	КонецЕсли;
	
	ВерхняяГраницаВыброса = НастройкиВидаПлана.ВерхняяГраницаВыброса;
	НижняяГраницаВыброса = НастройкиВидаПлана.НижняяГраницаВыброса;
	Если НастройкиВидаПлана.СглаживаниеВыбросовИсторическихДанных = 0 Тогда
		СпособСглаживанияВыбросов = "no";
		ВерхняяГраницаВыброса = 3;
		НижняяГраницаВыброса = 3;
	ИначеЕсли НастройкиВидаПлана.СглаживаниеВыбросовИсторическихДанных = 1 Тогда
		СпособСглаживанияВыбросов = "bound";
	Иначе
		СпособСглаживанияВыбросов = "mean";
	КонецЕсли;
	КоличествоПериодовДляОценкиТочности = ?(НастройкиВидаПлана.КоличествоПериодовДляОценкиТочности = 0,
		1, НастройкиВидаПлана.КоличествоПериодовДляОценкиТочности);
	
	СилаОбучения = ?(НастройкиВидаПлана.УскоритьОбучениеСПотерейКачества, 0, 1);
	
	РазрезыПрогнозирования = Новый Массив();
	РазрезыПрогнозирования.Добавить("item");
	Если НастройкиВидаПлана.ЗаполнятьПартнера Или НастройкиВидаПлана.ЗаполнятьПартнераВТЧ Тогда
		РазрезыПрогнозирования.Добавить("customer");
	КонецЕсли;
	Если НастройкиВидаПлана.ЗаполнятьСклад Или НастройкиВидаПлана.ЗаполнятьСкладВТЧ Тогда
		РазрезыПрогнозирования.Добавить("shop");
	КонецЕсли;
	
	ДеньНеделиНачалаПрогноза = ПреобразоватьВТипСервиса(НастройкиВидаПлана.ДеньНеделиНачалаПрогноза);
	Если ПустаяСтрока(ДеньНеделиНачалаПрогноза) Тогда
		ДеньНеделиНачалаПрогноза = 0;
	КонецЕсли;
	
	ТелоЗапроса.Вставить("timeframe", ПреобразоватьВТипСервиса(НастройкиВидаПлана.Периодичность));
	ТелоЗапроса.Вставить("start_week_day", ДеньНеделиНачалаПрогноза);
	ТелоЗапроса.Вставить("horizont", НастройкиВидаПлана.КоличествоПериодов);
	ТелоЗапроса.Вставить("dt_start_forecast", ПреобразоватьВТипСервиса(НастройкиВидаПлана.НачалоПрогнозирования));
	ТелоЗапроса.Вставить("metric", НастройкиВидаПлана.МетрикаОценкиКачестваПрогноза);
	ТелоЗапроса.Вставить("restore_stock", ?(НастройкиВидаПлана.УчетПотерянныхПродаж = 1, "true", "false"));
	ТелоЗапроса.Вставить("restore_orders", ?(НастройкиВидаПлана.УчетПотерянныхПродаж = 2, "true", "false"));
	ТелоЗапроса.Вставить("lost_orders_coef", НастройкиВидаПлана.КоэффициентВосстановленияУчетаПотерянныхПродаж);
	ТелоЗапроса.Вставить("restore_scenario", Строка(НастройкиСервиса.СценарийПрогнозированияФактИПлан));
	ТелоЗапроса.Вставить("evaluation_periods", КоличествоПериодовДляОценкиТочности);
	ТелоЗапроса.Вставить("std_upper_bound", ВерхняяГраницаВыброса);
	ТелоЗапроса.Вставить("std_lower_bound", НижняяГраницаВыброса);
	ТелоЗапроса.Вставить("std_calculating_type", СпособРасчетаСреднегоИСтандартногоОтклонения); 
	ТелоЗапроса.Вставить("smoothing_type", СпособСглаживанияВыбросов);
	ТелоЗапроса.Вставить("train_power", СилаОбучения);
	ТелоЗапроса.Вставить("forecastObject", РазрезыПрогнозирования);
	ТелоЗапроса.Вставить("deseasonality", ?(НастройкиВидаПлана.ИсключатьСезонность, "true", "false"));
	ТелоЗапроса.Вставить("collections", "&collections"); // Вложенный JSON
	
	ТелоЗапроса.Вставить("userNumFields", "&userNumFields"); // Вложенный JSON
	ТелоЗапроса.Вставить("userCatFields", "&userCatFields"); // Вложенный JSON
	ТелоЗапроса.Вставить("seasonalityObject", "&seasonalityObject"); // Вложенный JSON
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	ТелоЗапросаJSON = СтрЗаменить(ТелоЗапросаJSON, """&collections""", ТелоЗапросаJSONКоллекции);
	ТелоЗапросаJSON = СтрЗаменить(ТелоЗапросаJSON, """&userNumFields""", ТелоЗапросаJSONПользовательскиеПоляЧисловые);
	ТелоЗапросаJSON = СтрЗаменить(ТелоЗапросаJSON, """&userCatFields""", ТелоЗапросаJSONПользовательскиеПоляКатегориальные);
	ТелоЗапросаJSON = СтрЗаменить(ТелоЗапросаJSON, """&seasonalityObject""", ТелоЗапросаJSONПоляСезонности);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "СозданиеКонфигурацииМодели",
			ВидПлана);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область ОбучениеМоделей

// Получить типы сервисов.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьТипыСервисов() Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("sales_forecast");
	
	Метод = "GET";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
		
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
		
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ОбновлениеИнформацииОМоделях");
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Запустить обучение.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ЗапуститьОбучение(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ИдМодели = НастройкиСервиса.МоделиПрогнозирования.Получить(ВидПлана);
	Если ИдМодели = Неопределено Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	Идентификаторы = РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ИдентификаторыОбученияВидаПлана(ВидПлана);
	Если Идентификаторы <> Неопределено
		И ЗначениеЗаполнено(Идентификаторы.ИдОбучения)
		И (Идентификаторы.СтатусОбучения = СтатусОбучается()
			Или Идентификаторы.СтатусОбучения = СтатусОжидаетОбучения()
			Или Идентификаторы.СтатусОбучения = СтатусГотовКПолучению()) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОжиданиеЗавершенияОбученияМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	Если ИдетВыгрузка() Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОбучениеНевозможноИдетВыгрузкаДанных();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить(НастройкиСервиса.ИмяСервиса);
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("train");
	
	ПараметрыЗапроса = Новый Соответствие();
	ПараметрыЗапроса.Вставить("ServiceType",
		"sales_forecast");
	ПараметрыЗапроса.Вставить("ModelID",
		Число(ИдМодели));
	ПараметрыЗапроса.Вставить("make_default",
		1);
	
	Метод = "GET";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса, ПараметрыЗапроса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ЗапускОбученияМодели",
			ВидПлана);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить статус обучения.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов -
// 
// Возвращаемое значение:
//  Структура - из:
//  * ТекстОшибки - Строка -
//  * ВидПлана - СправочникСсылка.ВидыПланов -
//  * ИдОбучения - Строка -
//  * Статус - Строка -
Функция ПолучитьСтатусОбучения(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ИдМодели = НастройкиСервиса.МоделиПрогнозирования.Получить(ВидПлана);
	Если ИдМодели = Неопределено Тогда
		ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ДобавитьТекстОшибкиКОбучениюПоВидуПлана(ВидПлана,
			ТекстОшибки);
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ИдентификаторыОбучения = РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ИдентификаторыОбученияВидаПлана(ВидПлана);
	Если ИдентификаторыОбучения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИдОбучения = ИдентификаторыОбучения.ИдОбучения;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить(НастройкиСервиса.ИмяСервиса);
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("result");
	ПараметрыАдреса.Добавить(ИдОбучения);
	
	Метод = "GET";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	Заголовки.Вставить("ServiceType",
		"sales_forecast");
	Заголовки.Вставить("ModelID",
		ИдМодели);
	Заголовки.Вставить("resultUUID",
		ИдОбучения);
		
	ОтветФункции = Новый Структура();
	ОтветФункции.Вставить("ТекстОшибки");
	
	СтруктураОтвета = Неопределено;
	СтатусОбучения = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		
		ДополнительныйПараметр = Новый Структура("ВидПлана, ИдОбучения", ВидПлана, ИдОбучения);
		
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение,
			"ОбновлениеИнформацииОСтатусеОбучения",
			ДополнительныйПараметр);
		СтатусОбучения = Ответ.ВозвращаемоеЗначение;
		ОтветФункции.Вставить("ТекстОшибки",Ответ.ТекстОшибки);
	КонецЕсли;
	
	ОтветФункции.Вставить("ВидПлана", ВидПлана);
	ОтветФункции.Вставить("ИдОбучения", ИдОбучения);
	ОтветФункции.Вставить("Статус", СтатусОбучения);
	
	Возврат ОтветФункции;
	
КонецФункции

#Область ПолучениеПрогнозов

// Получить прогноз сервиса.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - Вид плана
//  ИдОбучения - Строка - Ид обучения
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьПрогнозСервиса(ВидПлана, ИдОбучения) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ИдМодели = НастройкиСервиса.МоделиПрогнозирования.Получить(ВидПлана);
	Если ИдМодели = Неопределено Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("sales_forecast");
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("process?target_data=predictions");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		СтруктураОтветаКачествоМодели = Новый Массив();
		
		ДополнительныйПараметр = Новый Структура("ВидПлана, ИдОбучения, КачествоМодели",
			ВидПлана, ИдОбучения, СтруктураОтветаКачествоМодели);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучениеПрогнозаСервиса",
			ДополнительныйПараметр);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить качество моделей.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьКачествоМоделей(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ИдМодели = НастройкиСервиса.МоделиПрогнозирования.Получить(ВидПлана);
	Если ИдМодели = Неопределено Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("sales_forecast");
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("process?target_data=models_quality");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
		
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучениеКачестваМоделей",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить качество моделей по объектам.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьКачествоМоделейПоОбъектам(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ИдМодели = НастройкиСервиса.МоделиПрогнозирования.Получить(ВидПлана);
	Если ИдМодели = Неопределено Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("sales_forecast");
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("process?target_data=models_item_quality");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучениеКачестваМоделей",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить фактические значения и предсказания на тестовых периодах.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьФактическиеЗначенияИПредсказанияНаТестовыхПериодах(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ИдМодели = НастройкиСервиса.МоделиПрогнозирования.Получить(ВидПлана);
	Если ИдМодели = Неопределено Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("sales_forecast");
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("process?target_data=test_models");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучитьФактическиеЗначенияИПредсказанияНаТестовыхПериодах",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить сумму план факт моделей за все тестовые периоды.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьСуммуПланФактМоделейЗаВсеТестовыеПериоды(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ИдМодели = НастройкиСервиса.МоделиПрогнозирования.Получить(ВидПлана);
	Если ИдМодели = Неопределено Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("sales_forecast");
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("process?target_data=test_models_series");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучитьСуммуПланФактМоделейЗаВсеТестовыеПериоды",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить исключенные объекты обучения.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьИсключенныеОбъектыОбучения(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ИдМодели = НастройкиСервиса.МоделиПрогнозирования.Получить(ВидПлана);
	Если ИдМодели = Неопределено Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("sales_forecast");
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("process?target_data=excluded_objects");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучитьИсключенныеОбъектыОбучения",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить сезонность.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьСезонность(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ИдМодели = НастройкиСервиса.МоделиПрогнозирования.Получить(ВидПлана);
	Если ИдМодели = Неопределено Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("sales_forecast");
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("process?target_data=seasonality");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучитьСезонность",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить сезонность.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьСезонностьПоМесяцам(ВидПлана) Экспорт
	Возврат ПолучитьСезонность(ВидПлана);
КонецФункции

// Получить историю обучения.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов -
//  НомерПорции - Число - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьИсториюОбучения(ВидПлана, НомерПорции = 0) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ИдМодели = НастройкиСервиса.МоделиПрогнозирования.Получить(ВидПлана);
	Если ИдМодели = Неопределено Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("sales_forecast");
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	
	Если НомерПорции = 0 Тогда
		ПараметрыАдреса.Добавить("process?target_data=history");
	Иначе
		КоличествоВПорции = 1000;
		
		НачалоПорции = (КоличествоВПорции * НомерПорции) - КоличествоВПорции + 1;
		КонецПорции = КоличествоВПорции * НомерПорции;
		
		НачалоПорцииФормат = Формат(НачалоПорции, "ЧГ=");
		КонецПорцииФормат = Формат(КонецПорции, "ЧГ=");
		
		ШаблонЗапроса = "process?target_data=history&start=%1&end=%2";
		
		ПараметрыАдреса.Добавить(СтрШаблон(ШаблонЗапроса, НачалоПорцииФормат, КонецПорцииФормат));
	КонецЕсли;
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучитьИсториюОбучения",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить прогноз сервиса расширенный.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьПрогнозСервисаРасширенный(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ИдМодели = НастройкиСервиса.МоделиПрогнозирования.Получить(ВидПлана);
	Если ИдМодели = Неопределено Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("sales_forecast");
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("process?target_data=final_prediction");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучитьПрогнозСервисаРасширенный",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить список коллекций на сервере.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьПереченьКоллекцийНаСервере() Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("data");
	
	Метод = "GET";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучитьПереченьКоллекцийНаСервере",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции

// Получить инфо коллекции на сервере.
// 
// Параметры:
//  ИдКоллекции - Число - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьИнфоКоллекцииНаСервере(ИдКоллекции) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("data");
	ПараметрыАдреса.Добавить(ИдКоллекции);
	ПараметрыАдреса.Добавить("info");
	
	Метод = "GET";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучитьИнфоКоллекцииНаСервере",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПолучениеДополнительнойИнформации

// Статус обучения модели.
// 
// Параметры:
//  СценарийПрогнозирования - СправочникСсылка.СценарииТоварногоПланирования - 
//  ВидПлана - СправочникСсылка.ВидыПланов - 
//  ОжидаетсяИнформацияОПрогнозе - Булево - 
//  ОжидаетсяЗагрузкаПрогноза - Булево - 
// 
// Возвращаемое значение:
//  см. СтатусОбученияМоделиОтвет.
Функция СтатусОбученияМодели(СценарийПрогнозирования, ВидПлана,
	ОжидаетсяИнформацияОПрогнозе = Ложь,
	ОжидаетсяЗагрузкаПрогноза = Ложь) Экспорт
	
	Отказ = Ложь;
	ЕстьИнформацияОСтатусеОбучения = Истина;
	Если Не ЗначениеЗаполнено(ВидПлана) Тогда
		СтатусОбучения = Новый ФорматированнаяСтрока(НСтр("ru='Нет прогнозов. Не выбран вид плана.'"));
		ЕстьИнформацияОСтатусеОбучения = Ложь;
		Отказ = Истина;
	ИначеЕсли Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ЗаполнятьПоДаннымСервиса") Тогда
		СтатусОбучения = Новый ФорматированнаяСтрока(НСтр("ru='Нет прогнозов. Вид плана не настроен для работы с сервисом прогнозирования.'"));
		ЕстьИнформацияОСтатусеОбучения = Ложь;
		Отказ = Истина;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	Если СценарийПрогнозирования = НастройкиСервиса.СценарийПрогнозированияФактИПлан
		И ЗначениеЗаполнено(СценарийПрогнозирования) Тогда
		ШаблонТекстаОшибки = НСтр("ru='Сценарий прогнозирования %1 запрещен для выбора, поскольку используется для подмены данных о продажах.'");
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, СценарийПрогнозирования);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "СценарийПрогнозирования");
		СценарийПрогнозирования = Справочники.СценарииТоварногоПланирования.ПустаяСсылка();
		Отказ = Истина;
	ИначеЕсли СценарийПрогнозирования = НастройкиСервиса.СценарийПрогнозированияКонтрольныхПланов
		И ЗначениеЗаполнено(СценарийПрогнозирования) Тогда
		ШаблонТекстаОшибки = НСтр("ru='Сценарий прогнозирования %1 запрещен для выбора, поскольку используется для выгрузки контрольных планов продаж.'");
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, СценарийПрогнозирования);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "СценарийПрогнозирования");
		СценарийПрогнозирования = Справочники.СценарииТоварногоПланирования.ПустаяСсылка();
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Ответ = СтатусОбученияМоделиОтвет(ЕстьИнформацияОСтатусеОбучения, СтатусОбучения);
		Возврат Ответ;
	КонецЕсли;
	
	ИнфоМодели = РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ИнформацияОбОбученииМодели(ВидПлана);
	
	ДатаПостроенияПрогноза = Дата(1, 1, 1);
	ДатаОбновленияСтатусаОбучения = Дата(1, 1, 1);
	СтатусОбучения = "";
	ТекстОшибки = "";
	Готовность = 0;
	
	Если ИнфоМодели.ЗагруженнаяМодель <> Неопределено Тогда
		ДатаПостроенияПрогноза = ИнфоМодели.ЗагруженнаяМодель.ВремяИзмененияСостояния;
	КонецЕсли;
	
	Если ИнфоМодели.ОбучающаясяМодель <> Неопределено Тогда
		ДатаОбновленияСтатусаОбучения = ИнфоМодели.ОбучающаясяМодель.ВремяИзмененияСостояния;
		СтатусОбучения = НРег(ИнфоМодели.ОбучающаясяМодель.СтатусОбучения);
		Готовность = ИнфоМодели.ОбучающаясяМодель.Готовность;
		ТекстОшибки = ИнфоМодели.ОбучающаясяМодель.ТекстОшибки;
	КонецЕсли;
	
	ЕстьОшибка = Не ПустаяСтрока(ТекстОшибки) Или СтрНайти(СтатусОбучения, "ошибка") > 0;
	
	ПроцентВыполнения = НСтр("ru='готовность: %1%%'");
	ПроцентВыполнения = СтрШаблон(ПроцентВыполнения, Готовность);
	
	СтатусПрогнозаИОбучения = Новый ФорматированнаяСтрока("");
	
	Если ДатаПостроенияПрогноза > ДатаОбновленияСтатусаОбучения Тогда
		// Есть прогноз, обучение еще не запущено.
		
		ШаблонСтроки = "%1: %2, <a href=""ЗапуститьОбучение"">%3</a>.";
		ТекстЗаголовок = НСтр("ru='Последний прогноз построен'");
		ТекстГиперссылки = НСтр("ru='запросить новый прогноз'");
		СтатусПрогнозаИОбучения = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки,
			ТекстЗаголовок,
			Строка(ДатаПостроенияПрогноза),
			ТекстГиперссылки);
		
	ИначеЕсли ДатаПостроенияПрогноза > Дата(1, 1, 1)
		И ДатаПостроенияПрогноза <= ДатаОбновленияСтатусаОбучения Тогда
		// Есть прогноз, запущено повторное обучение.
		
		Если Не ЕстьОшибка Тогда
			ШаблонСтроки = "%1: %2. %3, %4 <a href=""ЗагрузитьПрогноз"">%5</a>.";
			ТекстЗаголовок = НСтр("ru='Последний прогноз построен'");
			ТекстЗаголовок2 = НСтр("ru='Идет обучение'");
			ТекстГиперссылки = НСтр("ru='обновить статус'");
			СтатусПрогнозаИОбучения = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки,
				ТекстЗаголовок,
				Строка(ДатаПостроенияПрогноза),
				ТекстЗаголовок2,
				ПроцентВыполнения,
				ТекстГиперссылки);
		Иначе
			ШаблонСтроки = "%1: %2, <a href=""ТекстОшибки"">%3</a>, <a href=""ЗапуститьОбучение"">%4</a>, <a href=""ЗагрузитьПрогноз"">%5</a>.";
			ТекстЗаголовок = НСтр("ru='Последний прогноз построен'");
			ТекстГиперссылки = НСтр("ru='запросить новый прогноз'");
			ТекстГиперссылки2 = НСтр("ru='обновить статус'");
			СтатусПрогнозаИОбучения = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки,
				ТекстЗаголовок,
				Строка(ДатаПостроенияПрогноза),
				СтатусОбучения,
				ТекстГиперссылки,
				ТекстГиперссылки2);
		КонецЕсли;
		
	ИначеЕсли ДатаПостроенияПрогноза = Дата(1, 1, 1)
		И ДатаОбновленияСтатусаОбучения > Дата(1, 1, 1) Тогда
		// Нет прогноза, запущено обучение.
		
		Если Не ЕстьОшибка Тогда
			ШаблонСтроки = "%1. %2, %3 <a href=""ЗагрузитьПрогноз"">%4</a>.";
			ТекстЗаголовок = НСтр("ru='Нет построенных прогнозов'");
			ТекстЗаголовок2 = НСтр("ru='Идет обучение'");
			ТекстГиперссылки = НСтр("ru='обновить статус'");
			СтатусПрогнозаИОбучения = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки,
				ТекстЗаголовок,
				ТекстЗаголовок2,
				ПроцентВыполнения,
				ТекстГиперссылки);
		Иначе
			ШаблонСтроки = "%1, <a href=""ТекстОшибки"">%2</a>, <a href=""ЗапуститьОбучение"">%3</a>, <a href=""ЗагрузитьПрогноз"">%4</a>.";
			ТекстЗаголовок = НСтр("ru='Нет построенных прогнозов'");
			ТекстГиперссылки = НСтр("ru='запросить новый прогноз'");
			ТекстГиперссылки2 = НСтр("ru='обновить статус'");
			СтатусПрогнозаИОбучения = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки,
				ТекстЗаголовок,
				СтатусОбучения,
				ТекстГиперссылки,
				ТекстГиперссылки2);
		КонецЕсли;
		
	Иначе
		// Нет прогноза, нет обучения.
		
		ШаблонСтроки = "%1, <a href=""ЗапуститьОбучение"">%2</a>.";
		ТекстЗаголовок = НСтр("ru='Нет построенных прогнозов'");
		ТекстГиперссылки = НСтр("ru='запросить прогноз'");
		СтатусПрогнозаИОбучения = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки,
			ТекстЗаголовок,
			ТекстГиперссылки);
		
		ЕстьИнформацияОСтатусеОбучения = Ложь;
		
	КонецЕсли;
	
	Если ОжидаетсяИнформацияОПрогнозе Тогда
		СтатусПрогнозаИОбучения = Новый ФорматированнаяСтрока(НСтр("ru='ожидание ответа'"));
	ИначеЕсли ОжидаетсяЗагрузкаПрогноза Тогда
		СтатусПрогнозаИОбучения = Новый ФорматированнаяСтрока(НСтр("ru='ожидание ответа'"));
	КонецЕсли;
	
	СтрокаКачества = НСтр("ru='нет информации'");
	КачествоМодели = Новый ФорматированнаяСтрока(СтрокаКачества);
	
	Ответ = СтатусОбученияМоделиОтвет(ЕстьИнформацияОСтатусеОбучения, СтатусПрогнозаИОбучения);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область НастройкиСервиса
// Получить настройки сервиса.
// 
// Возвращаемое значение:
//  см. ШаблонНастроекСервиса.
Функция ПолучитьНастройкиСервиса() Экспорт
	
	ВсеНастройкиСервиса = ШаблонНастроекСервиса();
	
	СохраненныеНастройкиСервиса = Константы.НастройкиСервисаПрогнозирования.Получить().Получить();
	
	Для Каждого КлючЗначение Из ВсеНастройкиСервиса Цикл
		Если СохраненныеНастройкиСервиса <> Неопределено
			И СохраненныеНастройкиСервиса.Свойство(КлючЗначение.Ключ)
			И ЗначениеЗаполнено(СохраненныеНастройкиСервиса[КлючЗначение.Ключ]) Тогда
			
			Если ((ТипЗнч(КлючЗначение.Значение) = Тип("Структура")
				Или ТипЗнч(КлючЗначение.Значение) = Тип("Соответствие"))
					И КлючЗначение.Значение.Количество() > 0) Тогда
				
				Для Каждого КлючЗначениеВнутренний Из КлючЗначение.Значение Цикл
					Если СохраненныеНастройкиСервиса[КлючЗначение.Ключ] <> Неопределено
						И СохраненныеНастройкиСервиса[КлючЗначение.Ключ].Свойство(КлючЗначениеВнутренний.Ключ)
						И ЗначениеЗаполнено(СохраненныеНастройкиСервиса[КлючЗначение.Ключ][КлючЗначениеВнутренний.Ключ]) Тогда
						ВсеНастройкиСервиса[КлючЗначение.Ключ][КлючЗначениеВнутренний.Ключ]
							= СохраненныеНастройкиСервиса[КлючЗначение.Ключ][КлючЗначениеВнутренний.Ключ];
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				ВсеНастройкиСервиса[КлючЗначение.Ключ] = СохраненныеНастройкиСервиса[КлючЗначение.Ключ];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВсеНастройкиСервиса;
	
КонецФункции

// Сбросить настройки сервиса в значения по умолчанию.
Процедура СброситьНастройкиСервиса() Экспорт
	
	СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
									УровеньЖурналаРегистрации.Информация,
									,
									,
									ТекущаяДатаСеанса());
	
	НастройкиПоУмолчанию = ШаблонНастроекСервиса();
	ХранилищеПараметров = Новый ХранилищеЗначения(НастройкиПоУмолчанию);
	Константы.НастройкиСервисаПрогнозирования.Установить(ХранилищеПараметров);
	
	УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
	
КонецПроцедуры

// Восстановить удаленные настройки и пересоздать настройки с некорректным типом.
Процедура ВосстановитьНастройкиСервиса() Экспорт
	
	СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
									УровеньЖурналаРегистрации.Информация,
									,
									,
									ТекущаяДатаСеанса());
	
	НастройкиПоУмолчанию = ШаблонНастроекСервиса();
	ТекущиеНастройки = ПолучитьНастройкиСервиса();
	ВосстановитьНастройкиПоШаблону(ТекущиеНастройки, НастройкиПоУмолчанию);
	
	Для Каждого КлючЗначение Из ТекущиеНастройки.ИзмененияКоллекций Цикл
		ШаблонИзменения = ОписаниеИзмененияКоллекции();
		ЗаполнитьЗначенияСвойств(ШаблонИзменения, КлючЗначение.Значение);
		ТекущиеНастройки.ИзмененияКоллекций[КлючЗначение.Ключ] = ШаблонИзменения;
	КонецЦикла;
	
	ТекущиеНастройки.Версия = НастройкиПоУмолчанию.Версия;
	
	УстановитьПривилегированныйРежим(Истина);
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ПарольПользователяСервисаПрогнозирования",
		"Пароль");
	Если Не ЗначениеЗаполнено(Пароль)
		И ЗначениеЗаполнено(ТекущиеНастройки.Пароль) Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ПарольПользователяСервисаПрогнозирования",
			ТекущиеНастройки.Пароль, "Пароль");
		ТекущиеНастройки.Пароль = "";
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбновитьНастройкиСервиса(ТекущиеНастройки);
	УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Разное

// Получает значения часто используемых и редко изменяемых настроек сервиса прогнозирования.
// Если требуется получить настройку не заданную в этой функции, следует вызвать метод
// который получит полный список настроек - ПолучитьНастройкиСервиса().
// 
// Возвращаемое значение:
//  см. ШаблонАвторизационныхНастроекСервиса.
Функция ПолучитьАвторизационныеНастройкиСервиса() Экспорт
	
	Возврат ПараметрыСеанса.НастройкиСервисаПрогнозирования;
	
КонецФункции

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("НастройкиСервисаПрогнозирования", "СервисПрогнозирования.УстановкаПараметровСеанса");
	
КонецПроцедуры

// Устанавливает параметры сеанса работы с сервисом прогнозирования продаж.
//
// Параметры:
//   ИмяПараметра - Строка - 
//   УстановленныеПараметры - Массив из Строка - 
//
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "НастройкиСервисаПрогнозирования" Тогда
		УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
		УстановленныеПараметры.Добавить("НастройкиСервисаПрогнозирования");
	КонецЕсли;
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса
Процедура УстановитьПараметрыСеансаНастроекСервисаПрогнозирования() Экспорт
	
	ТекущиеНастройкиСервисаСтруктура = ШаблонАвторизационныхНастроекСервиса();
	ВсеНастройкиСервиса = ПолучитьНастройкиСервиса();
	ЗаполнитьЗначенияСвойств(ТекущиеНастройкиСервисаСтруктура, ВсеНастройкиСервиса);
	
	УстановитьПривилегированныйРежим(Истина);
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ПарольПользователяСервисаПрогнозирования",
		"Пароль");
	ТекущиеНастройкиСервисаСтруктура.Пароль = Пароль;
	
	ПараметрыСеанса.НастройкиСервисаПрогнозирования = Новый ФиксированнаяСтруктура(ТекущиеНастройкиСервисаСтруктура);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Установить статус выгрузки.
// 
// Параметры:
//  ВыгрузкаАктивна - Булево - 
//  ЗапланированоВыгрузитьКоллекций - Число - 
//  ВыгруженоКоллекций - Число - 
//  ИмяВыгружаемойСейчасКоллекции - Строка - 
Процедура УстановитьСтатусВыгрузки(ВыгрузкаАктивна, ЗапланированоВыгрузитьКоллекций = 0,
	ВыгруженоКоллекций = 0, ИмяВыгружаемойСейчасКоллекции = "") Экспорт
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	НастройкиСервиса.ВыгрузкаАктивна = ВыгрузкаАктивна;
	НастройкиСервиса.ЗапланированоВыгрузитьКоллекций = ЗапланированоВыгрузитьКоллекций;
	НастройкиСервиса.ВыгруженоКоллекций = ВыгруженоКоллекций;
	НастройкиСервиса.ИмяВыгружаемойСейчасКоллекции = ИмяВыгружаемойСейчасКоллекции;
	ОбновитьНастройкиСервиса(НастройкиСервиса);
	
КонецПроцедуры

// Идет выгрузка.
// 
// Возвращаемое значение:
//  Булево -
Функция ИдетВыгрузка() Экспорт
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	Если НастройкиСервиса.ВыгрузкаАктивна Тогда
		Если ТекущаяДатаСеанса() > НастройкиСервиса.ДатаПоследнейВыгрузки + НастройкиСервиса.ТаймаутВыгрузки Тогда
			НастройкиСервиса.ВыгрузкаАктивна = Ложь;
			ОбновитьНастройкиСервиса(НастройкиСервиса);
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Это уникальный идентификатор.
// 
// Параметры:
//  ТекстСсылки - Строка - 
// 
// Возвращаемое значение:
//  Булево - 
Функция ЭтоУникальныйИдентификатор(ТекстСсылки) Экспорт
	
	Возврат СтрДлина(ТекстСсылки) = 36 И СтрЧислоВхождений(ТекстСсылки, "-") = 4;
	
КонецФункции

// Пустое значение сервиса.
// 
// Параметры:
//  Значение - Произвольный - 
// 
// Возвращаемое значение:
//  Булево - 
Функция ПустоеЗначениеСервиса(Значение) Экспорт
	
	Если Значение = Неопределено
		Или Значение = "x0"
		Или Значение = "NaN"
		Или Значение = "0"
		Или Значение = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Получить уникальный идентификатор.
// 
// Параметры:
//  ТекстИдентификатора - Строка - 
// 
// Возвращаемое значение:
//  УникальныйИдентификатор
Функция ПолучитьУникальныйИдентификатор(ТекстИдентификатора) Экспорт
	
	Если ТекстИдентификатора = Неопределено
		Или ТекстИдентификатора = "x0"
		Или ТекстИдентификатора = "NaN" Тогда
		ПустойИдентификатор = "00000000-0000-0000-0000-000000000000";
		Возврат Новый УникальныйИдентификатор(ПустойИдентификатор);
	КонецЕсли;
	
	Возврат Новый УникальныйИдентификатор(ТекстИдентификатора);
	
КонецФункции

// Дата сервиса в дату программы.
// 
// Параметры:
//  СтрокаДаты - Строка - 
// 
// Возвращаемое значение:
//  Дата - Дата сервиса в дату программы
Функция ДатаСервисаВДатуПрограммы(СтрокаДаты) Экспорт
	
	ЭлементыДаты = СтрРазделить(СтрокаДаты, "-");
	ДатаПродажи = Дата(ЭлементыДаты[0], ЭлементыДаты[1], ЭлементыДаты[2]);
	Возврат ДатаПродажи;
	
КонецФункции

// Обновить настройки сервиса.
// 
// Параметры:
//  НовыеНастройки - см. ШаблонНастроекСервиса.
//  
Процедура ОбновитьНастройкиСервиса(НовыеНастройки) Экспорт
	
	Если ТипЗнч(НовыеНастройки.ИдКоллекций) = Тип("Строка")
		Или ТипЗнч(НовыеНастройки.МоделиПрогнозирования) = Тип("Строка") Тогда
		ВызватьИсключение ТекстОбнаруженоПовреждениеНастроек();
	КонецЕсли;
	
	ТекущиеНастройки = ПолучитьНастройкиСервиса();
	
	Для Каждого КлючЗначение Из ТекущиеНастройки Цикл
		
		Если НовыеНастройки.Свойство(КлючЗначение.Ключ)
			И НовыеНастройки[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
			ТекущиеНастройки[КлючЗначение.Ключ] = НовыеНастройки[КлючЗначение.Ключ];
		КонецЕсли;
		
	КонецЦикла;
	
	ХранилищеПараметров = Новый ХранилищеЗначения(ТекущиеНастройки);
	
	Константы.НастройкиСервисаПрогнозирования.Установить(ХранилищеПараметров);
	
КонецПроцедуры

// Диапазон дат для выгрузки.
// 
// Параметры:
//  ИмяКоллекции - Строка - 
//  ДатаНачалаВводаДанных - Дата - 
// 
// Возвращаемое значение:
//  Структура - Диапазон дат для выгрузки:
// * ДатаНачала - Дата -
// * ДатаОкончания - Дата -
Функция ДиапазонДатДляВыгрузки(ИмяКоллекции, ДатаНачалаВводаДанных) Экспорт
	
	День = 86400;
	
	ДатаНачалаВводаДанных = ?(ТипЗнч(ДатаНачалаВводаДанных) = Тип("Null"), Дата(1, 1, 1), ДатаНачалаВводаДанных);
	ДатаНачалаВводаДанных = ?(ТипЗнч(ДатаНачалаВводаДанных) = Тип("Неопределено"), Дата(1, 1, 1), ДатаНачалаВводаДанных);
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	ПорцияВыгрузкиПериодическихДанныхВДнях = НастройкиСервиса.ПорцияВыгрузкиПериодическихДанныхВДнях;
	ДатаАктуальности = НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаАктуальности;
	ДатаАктуальности = Макс(ДатаАктуальности, ДатаНачалаВводаДанных);
	
	Если Не НастройкиСервиса.ВыгружатьОстаткиЗаВсеВремя
		И ДатаАктуальности < НастройкиСервиса.ДатаНачалаВыгрузкиОстатковИПродаж
		И ИмяКоллекции <> "ПланыПродаж" Тогда
		ДатаАктуальности = НастройкиСервиса.ДатаНачалаВыгрузкиОстатковИПродаж;
	ИначеЕсли Не НастройкиСервиса.ВыгружатьКонтрольныеПланыЗаВсеВремя
		И ДатаАктуальности < НастройкиСервиса.ДатаНачалаВыгрузкиКонтрольныхПланов
		И ИмяКоллекции = "ПланыПродаж" Тогда
		ДатаАктуальности = НастройкиСервиса.ДатаНачалаВыгрузкиКонтрольныхПланов;
	КонецЕсли;
	
	ДатаОкончания = ДатаАктуальности + (ПорцияВыгрузкиПериодическихДанныхВДнях * День);
	
	Если Не НастройкиСервиса.ВыгружатьОстаткиЗаВсеВремя
		И ДатаОкончания > НастройкиСервиса.ДатаОкончанияВыгрузкиОстатковИПродаж
		И ИмяКоллекции <> "ПланыПродаж" Тогда
		ДатаОкончания = НастройкиСервиса.ДатаОкончанияВыгрузкиОстатковИПродаж;
	ИначеЕсли Не НастройкиСервиса.ВыгружатьКонтрольныеПланыЗаВсеВремя
		И ДатаОкончания > НастройкиСервиса.ДатаОкончанияВыгрузкиКонтрольныхПланов
		И ИмяКоллекции = "ПланыПродаж" Тогда
		ДатаОкончания = НастройкиСервиса.ДатаОкончанияВыгрузкиКонтрольныхПланов;
	КонецЕсли;
	
	ДатаАктуальности = НачалоДня(ДатаАктуальности);
	ДатаОкончания = НачалоДня(ДатаОкончания);
	
	Возврат Новый Структура("ДатаНачала, ДатаОкончания", ДатаАктуальности, ДатаОкончания);
	
КонецФункции

// Модуль интернет поддержка пользователей.
// 
// Возвращаемое значение:
//  ОбщийМодуль, Неопределено - Модуль интернет поддержка пользователей.
Функция МодульИнтернетПоддержкаПользователей() Экспорт
	
	Попытка
		Возврат ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	Исключение
		Возврат Неопределено;
	КонецПопытки; 
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

// Процедура обработки регламентного задания по выгрузке данных
//
Процедура ВыгрузкаДанныхВСервисПрогнозированияПродаж() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВыгрузкаДанныхВСервисПрогнозированияПродаж);
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	Если НастройкиСервиса.ВыгрузкаДанныхПоРасписаниюАктивна Тогда
		СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
									УровеньЖурналаРегистрации.Информация,
									,
									,
									ТекущаяДатаСеанса());
		
		// 1. Полная выгрузка
		СоздатьКоллекции();
		ВыгрузитьКоллекции();
		
		// 2. Инициировать обучение по моделям, чей срок подошел.
		Если НастройкиСервиса.ВыгрузкаДанныхПоРасписаниюЗапускатьОбучение Тогда
			ЗапуститьАвтообновлениеПрогнозов();
			
			СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
										УровеньЖурналаРегистрации.Информация,
										,
										,
										ТекущаяДатаСеанса());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки регламентного задания по загрузке данных
//
Процедура ЗагрузкаДанныхИзСервисаПрогнозированияПродаж() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаДанныхИзСервисаПрогнозированияПродаж);
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	Если НастройкиСервиса.ЗагрузкаДанныхПоРасписаниюАктивна Тогда
		СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
									УровеньЖурналаРегистрации.Информация,
									,
									,
									ТекущаяДатаСеанса());
		
		// 1. Обновить инфо по всем ИД обучения, которые в статусе Обучение
		ТекущиеНастройки = ПолучитьНастройкиСервиса();
		Для Каждого КлючЗначение Из ТекущиеНастройки.МоделиПрогнозирования Цикл
			ВидПлана = КлючЗначение.Ключ;
			ИнфоСтатусаОбучения = ПолучитьСтатусОбучения(ВидПлана);
			Если ИнфоСтатусаОбучения.Статус = СтатусГотовКПолучению() Тогда
				ПолучитьПрогнозСервиса(ВидПлана, ИнфоСтатусаОбучения.ИдОбучения);
			КонецЕсли;
		КонецЦикла;
		
		// 2. Загрузить данные по тем ИД, по котором статус К получению
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
									УровеньЖурналаРегистрации.Информация,
									,
									,
									ТекущаяДатаСеанса());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыПодключения

// Служебный статус подключения Активен.
// 
// Возвращаемое значение:
//  Число - 
Функция СтатусПодключенияАктивен() Экспорт
	Возврат 1;
КонецФункции

// Служебный статус подключения В очереди.
// 
// Возвращаемое значение:
//  Число - 
Функция СтатусПодключенияВОчереди() Экспорт
	Возврат -1;
КонецФункции

// Служебный статус подключения Неизвестен.
// 
// Возвращаемое значение:
//  Число - 
Функция СтатусПодключенияНеПодключено() Экспорт
	Возврат 0;
КонецФункции

// Служебный статус обучения СтатусНеизвестен().
// 
// Возвращаемое значение:
//  Строка - 
Функция СтатусНеизвестен() Экспорт
	Возврат НСтр("ru = 'Статус неизвестен'");
КонецФункции

// Служебный статус обучения СтатусОжидаетОбучения().
// 
// Возвращаемое значение:
//  Строка - 
Функция СтатусОжидаетОбучения() Экспорт
	Возврат НСтр("ru = 'Ожидает обучения'");
КонецФункции

// Служебный статус обучения СтатусОбучается().
// 
// Возвращаемое значение:
//  Строка - 
Функция СтатусОбучается() Экспорт
	Возврат НСтр("ru = 'Обучается'");
КонецФункции

// Служебный статус обучения СтатусОшибкаОбучения().
// 
// Возвращаемое значение:
//  Строка - 
Функция СтатусОшибкаОбучения() Экспорт
	Возврат НСтр("ru = 'Ошибка обучения'");
КонецФункции

// Служебный статус обучения СтатусГотовКПолучению().
// 
// Возвращаемое значение:
//  Строка - 
Функция СтатусГотовКПолучению() Экспорт
	Возврат НСтр("ru = 'Готов к получению'");
КонецФункции

// Служебный статус обучения СтатусЗагружен().
// 
// Возвращаемое значение:
//  Строка - 
Функция СтатусЗагружен() Экспорт
	Возврат НСтр("ru = 'Загружен'");
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСВнешнимиРесурсами

Функция ВыполнитьHTTPЗапросСКонтролемПередачиДанных(Метод,
	URLЗапроса,
	ИдКоллекции,
	ТелоЗапроса,
	Заголовки = Неопределено,
	ДобавляетсяОбъектов = 0)
	
	СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
	
	Для Счетчик = 0 По 3 Цикл
		ВозвращаемоеЗначение = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапроса);
		
		ПринятоОбъектовСервером = 0;
		Если ТипЗнч(ВозвращаемоеЗначение.ДесериализованноеЗначение["newObjects"]) = Тип("Число") Тогда
			ПринятоОбъектовСервером = ВозвращаемоеЗначение.ДесериализованноеЗначение["newObjects"];
		КонецЕсли;
		
		ИнфоКоллекции = ПолучитьИнфоКоллекцииНаСервере(ИдКоллекции);
		ТекущееКоличествоДанных = 0;
		Если ТипЗнч(ИнфоКоллекции) <> Неопределено
			И ИнфоКоллекции.Свойство("ДесериализованноеЗначение")
			И ТипЗнч(ИнфоКоллекции.ДесериализованноеЗначение) = Тип("Соответствие") Тогда
			ИнфоКоллекцииОбработанное = ИнфоКоллекции.ДесериализованноеЗначение;
			Если ИнфоКоллекцииОбработанное.Получить("info") <> Неопределено Тогда
				ТекущееКоличествоДанных = Число(ИнфоКоллекцииОбработанное["info"]["rowCount"]);
			КонецЕсли;
		КонецЕсли;
		
		ДанныеНаСервере = (ДобавляетсяОбъектов = ПринятоОбъектовСервером);
		ДанныеНаСервереЧастично = (ДобавляетсяОбъектов <> ПринятоОбъектовСервером);
		ДанныхНетНаСервере = (ПринятоОбъектовСервером = 0);
		
		Если ДанныеНаСервере Тогда
			ВозвращаемоеЗначение.КоличествоДанныхНаСервере = ТекущееКоличествоДанных;
			Возврат ВозвращаемоеЗначение;
		ИначеЕсли ДанныхНетНаСервере Тогда
			// Произведем еще одну попытку.
		ИначеЕсли ДанныеНаСервереЧастично Тогда
			// Произошла ошибка, из-за которой данные стали некорректны.
			ТекстСообщения = ТекстСервисПринялНеВсеВыгружаемыеДанные(ДобавляетсяОбъектов, ПринятоОбъектовСервером);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			
			ВозвращаемоеЗначение.КоличествоДанныхНаСервере = ТекущееКоличествоДанных;
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
	// Произошла ошибка, данные не были отправлены.
	ТекстСообщения = ТекстСервисНеПринялДанные();
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	
	Возврат СтруктураОтвета();
	
КонецФункции

// Функция формирует запрос исходя из входных параметров
//
// Параметры:
//  ПараметрыАдреса - Массив - содержит массив параметров для формирования итогового запроса URL.
//  ПараметрыЗапроса - Соответствие - содержит соответствие параметров для формирования итогового запроса URL.
// Возвращаемое значение:
//  Строка - Итоговый запрос к API.
//
Функция СформироватьПутьЗапроса(ПараметрыАдреса, ПараметрыЗапроса = Неопределено) 
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	ИтоговыйЗапрос = НастройкиСервиса.АдресПодключения 
		+ ?(Прав(НастройкиСервиса.АдресПодключения, 1) = "/", "", "/") + "api/v2/";
	
	Для каждого Параметр Из ПараметрыАдреса Цикл
		ОбработанныйПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Параметр,
			Формат(Параметр, "ЧГ="));
		ИтоговыйЗапрос = ИтоговыйЗапрос + ?(Прав(ИтоговыйЗапрос, 1) = "/", "", "/") + ОбработанныйПараметр;
	КонецЦикла;
	
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Соответствие") Тогда 
		Если ПараметрыЗапроса.Количество() > 0 Тогда
			ИтоговыйЗапрос = ИтоговыйЗапрос + "?";
		КонецЕсли;
		Для каждого Параметр Из ПараметрыЗапроса Цикл
			ИтоговыйЗапрос = ИтоговыйЗапрос + Параметр.Ключ + "=" + Параметр.Значение + "&";
		КонецЦикла;
		ИтоговыйЗапрос = Лев(ИтоговыйЗапрос, СтрДлина(ИтоговыйЗапрос) - ?(Прав(ИтоговыйЗапрос, 1) = "&", 1, 0));
	КонецЕсли;
	
	Возврат ИтоговыйЗапрос
	
КонецФункции

#КонецОбласти

#Область Разное

Функция ВыгрузитьКатегориальнуюКоллекцию(ИмяКоллекции)
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	ИнфоОКоллекции = НастройкиСервиса.Коллекции[ИмяКоллекции];
	Выгружать = ИнфоОКоллекции.Выгружать;
	
	Если Не Выгружать Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеВыгружались = НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаВыгрузки > Дата(1, 1, 1);
	ДоступныеРеквизиты = ИнфоОКоллекции.ВложенноеОписание;
	ИдКоллекции = НастройкиСервиса.ИдКоллекций[НастройкиСервиса.Коллекции[ИмяКоллекции].ИмяВСервисе];
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("data");
	ПараметрыАдреса.Добавить(ИдКоллекции);
	
	Если ДанныеВыгружались Тогда
		// Удаление данных на сервере и полная выгрузка.
		Метод = "PUT";
	Иначе
		Метод = "POST";
	КонецЕсли;
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ВыгружаемыеДанныеИсходныйНабор = СервисПрогнозированияПереопределяемый.ПолучитьИсходнуюКоллекцию(ИмяКоллекции);
	
	ОбщееКоличествоОбъектов = 0;
	ТекущееКоличествоДанныхНаСервере = 0;
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	
	ДиапазоныВыгрузки = ОпределитьДиапазоны(ВыгружаемыеДанныеИсходныйНабор, НастройкиСервиса.ПорцияВыгрузкиКатегориальныхДанных);
	Для Каждого Диапазон Из ДиапазоныВыгрузки Цикл
		
		ИсходныйНабор = ОтфильтроватьИсходныйНаборПоДиапазону(ВыгружаемыеДанныеИсходныйНабор, Диапазон);
		ВыгружаемыеДанные = СервисПрогнозированияПереопределяемый.ПолучитьКоллекцию(ИмяКоллекции, ИсходныйНабор);
		
		ПреобразованныеДанные = ТаблицуЗначенийВМассивСтруктур(ВыгружаемыеДанные, НастройкиСервиса, ИмяКоллекции, ДоступныеРеквизиты); // Диапазон
		ТекущееКоличествоОбъектов = ПреобразованныеДанные.Количество();
		ОбщееКоличествоОбъектов = ОбщееКоличествоОбъектов + ТекущееКоличествоОбъектов;
		
		Если ПреобразованныеДанные.Количество() > 0 Тогда
			ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ПреобразованныеДанные, ЕстьОшибки);
			
			Если ЕстьОшибки Тогда
				ТекстОшибки = ТекстОшибкиФормированияОбъектаДляВыгрузки();
				Прервать;
			КонецЕсли;
			
			СтруктураОтвета = Неопределено;
			Если НастройкиСервиса.РазрешенОбменССервисом Тогда
				СтруктураОтвета = ВыполнитьHTTPЗапросСКонтролемПередачиДанных(Метод,
					URLЗапроса,
					ИдКоллекции,
					ТелоЗапросаJSON,
					Заголовки,
					ТекущееКоличествоОбъектов);
				ТекущееКоличествоДанныхНаСервере = СтруктураОтвета.КоличествоДанныхНаСервере;
				ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, ИмяКоллекции);
			КонецЕсли;
			
		КонецЕсли;
		
		НастройкиСервиса = ПолучитьНастройкиСервиса();
		
		Если Метод = "PUT" Тогда
			НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаНачалаВыгрузки = ТекущаяДатаСеанса();
			Метод = "POST"; // Удаление имеющейся коллекции на сервере требуется только в первый раз.
		КонецЕсли;
		
		НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаВыгрузки = ТекущаяДатаСеанса();
		НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ИдКоллекции = Число(ИдКоллекции);
		НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].КоличествоДанныхВыгруженное = ОбщееКоличествоОбъектов;
		НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].КоличествоДанныхНаСервере = ТекущееКоличествоДанныхНаСервере;
		
		Если НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаНачалаВыгрузки = Дата(1, 1, 1) Тогда
			НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаНачалаВыгрузки = ТекущаяДатаСеанса();
		КонецЕсли;
		
		НастройкиСервиса.ДатаПоследнейВыгрузки = ТекущаяДатаСеанса();
		ОбновитьНастройкиСервиса(НастройкиСервиса);
		
		Если Не НастройкиСервиса.ВыгрузкаАктивна Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		УстановитьСтатусВыгрузки(Ложь);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыгрузитьПериодическуюКоллекцию(ИмяКоллекции)
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	ИнфоОКоллекции = НастройкиСервиса.Коллекции[ИмяКоллекции];
	Выгружать = ИнфоОКоллекции.Выгружать;
	
	Если Не Выгружать Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИзмененыОтборы = НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ИзмененыОтборы;
	ДатаАктуальности = НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаАктуальности;
	
	ДоступныеРеквизиты = ИнфоОКоллекции.ВложенноеОписание;
	
	ИдКоллекции = НастройкиСервиса.ИдКоллекций[НастройкиСервиса.Коллекции[ИмяКоллекции].ИмяВСервисе];
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("data");
	ПараметрыАдреса.Добавить(ИдКоллекции);
	
	Если ИзмененыОтборы Тогда
		// Удаление данных на сервере и полная выгрузка.
		Метод = "PUT";
		НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаАктуальности = Дата(1, 1, 1);
		ОбновитьНастройкиСервиса(НастройкиСервиса);
	Иначе
		Метод = "POST";
	КонецЕсли;
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ДатаАктуальности = НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаАктуальности;
	НоваяДатаАктуальности = ДатаАктуальности;
	КоличествоНеудач = 0;
	
	ОбщееКоличествоОбъектов = 0;
	ТекущееКоличествоДанныхНаСервере = 0;
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	
	Пока ЕстьНевыгруженныйПериод(ИмяКоллекции) Цикл
		
		ПорцияВыгрузки = СервисПрогнозированияПереопределяемый.ПолучитьКоллекцию(ИмяКоллекции);
		
		СброситьДатуНачалаВыгрузки = Ложь;
		НоваяДатаНачалаВыгрузки = Неопределено;
		
		Если ПорцияВыгрузки.КоличествоДанных > 0 Тогда
		
			ПреобразованныеДанные = ТаблицуЗначенийВМассивСтруктур(ПорцияВыгрузки.Коллекция, НастройкиСервиса, ИмяКоллекции, ДоступныеРеквизиты);
			ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ПреобразованныеДанные, ЕстьОшибки);
			
			Если ЕстьОшибки Тогда
				ТекстОшибки = ТекстОшибкиФормированияОбъектаДляВыгрузки();
				Прервать;
			КонецЕсли;
			
			ТекущееКоличествоОбъектов = ПреобразованныеДанные.Количество();
			ОбщееКоличествоОбъектов = ОбщееКоличествоОбъектов + ТекущееКоличествоОбъектов;
			
			СтруктураОтвета = Неопределено;
			Если НастройкиСервиса.РазрешенОбменССервисом Тогда
				СтруктураОтвета = ВыполнитьHTTPЗапросСКонтролемПередачиДанных(Метод,
					URLЗапроса,
					ИдКоллекции,
					ТелоЗапросаJSON,
					Заголовки,
					ТекущееКоличествоОбъектов);
				ТекущееКоличествоДанныхНаСервере = СтруктураОтвета.КоличествоДанныхНаСервере;
				ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, ИмяКоллекции);
			КонецЕсли;
			
			Если Метод = "PUT" Тогда
				СброситьДатуНачалаВыгрузки = Истина;
				НоваяДатаНачалаВыгрузки = ТекущаяДатаСеанса();
				Метод = "POST"; // Удаление имеющейся коллекции на сервере требуется только в первый раз.
			КонецЕсли;
			
		КонецЕсли;
		
		// Следующую итерацию начинаем со следующего дня.
		НоваяДатаАктуальности = НачалоДня(ПорцияВыгрузки.ДатаОкончанияВыборкиПорции) + 86400;
		
		Если ДатаАктуальности = НоваяДатаАктуальности Тогда
			КоличествоНеудач = КоличествоНеудач + 1;
			Если КоличествоНеудач > 5 Тогда
				ТекстОшибки = ТекстОшибкиПроизошлоЗацикливание();
				Прервать;
			КонецЕсли;
		Иначе
			ДатаАктуальности = НоваяДатаАктуальности;
			КоличествоНеудач = 0;
		КонецЕсли;
		
		НастройкиСервиса = ПолучитьНастройкиСервиса();
		
		НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаАктуальности = НоваяДатаАктуальности;
		НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаВыгрузки = ТекущаяДатаСеанса();
		НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ИзмененыОтборы = Ложь;
		
		НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ИдКоллекции = Число(ИдКоллекции);
		НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].КоличествоДанныхВыгруженное = ОбщееКоличествоОбъектов;
		НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].КоличествоДанныхНаСервере = ТекущееКоличествоДанныхНаСервере;
		
		Если СброситьДатуНачалаВыгрузки Тогда
			НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаНачалаВыгрузки = НоваяДатаНачалаВыгрузки;
		ИначеЕсли НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаНачалаВыгрузки = Дата(1, 1, 1) Тогда
			НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаНачалаВыгрузки = ТекущаяДатаСеанса();
		КонецЕсли;
		
		НастройкиСервиса.ДатаПоследнейВыгрузки = ТекущаяДатаСеанса();
		ОбновитьНастройкиСервиса(НастройкиСервиса);
		
		Если Не НастройкиСервиса.ВыгрузкаАктивна Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		УстановитьСтатусВыгрузки(Ложь);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗапуститьАвтообновлениеПрогнозов()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыПланов.Ссылка КАК Ссылка,
	|	ВидыПланов.ПериодичностьОбновленияПрогноза КАК ПериодичностьОбновленияПрогноза,
	|	ВидыПланов.КоличествоОбновленийЗаПериод КАК КоличествоОбновленийЗаПериод
	|ИЗ
	|	Справочник.ВидыПланов КАК ВидыПланов
	|ГДЕ
	|	НЕ ВидыПланов.ПометкаУдаления
	|	И ВидыПланов.ЗаполнятьПоДаннымСервиса
	|	И ВидыПланов.АвтоматическиОбновлятьПрогноз";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		День = 86400;
		ДнейДоСледующегоОбновления = День * Выборка.КоличествоОбновленийЗаПериод;
		Если Выборка.ПериодичностьОбновленияПрогноза = Перечисления.Периодичность.Неделя Тогда
			ДнейДоСледующегоОбновления = ДнейДоСледующегоОбновления * 7;
		ИначеЕсли Выборка.ПериодичностьОбновленияПрогноза = Перечисления.Периодичность.Декада Тогда
			ДнейДоСледующегоОбновления = ДнейДоСледующегоОбновления * 10;
		ИначеЕсли Выборка.ПериодичностьОбновленияПрогноза = Перечисления.Периодичность.Месяц Тогда
			ДнейДоСледующегоОбновления = ДнейДоСледующегоОбновления * 31;
		ИначеЕсли Выборка.ПериодичностьОбновленияПрогноза = Перечисления.Периодичность.Квартал Тогда
			ДнейДоСледующегоОбновления = ДнейДоСледующегоОбновления * 92;
		ИначеЕсли Выборка.ПериодичностьОбновленияПрогноза = Перечисления.Периодичность.Полугодие Тогда
			ДнейДоСледующегоОбновления = ДнейДоСледующегоОбновления * 182;
		ИначеЕсли Выборка.ПериодичностьОбновленияПрогноза = Перечисления.Периодичность.Год Тогда
			ДнейДоСледующегоОбновления = ДнейДоСледующегоОбновления * 365;
		КонецЕсли;
		
		ИнфоОбучения = РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ИдентификаторыОбученияВидаПлана(
			Выборка.Ссылка, Ложь);
		
		Если ИнфоОбучения.ВремяИзмененияСостояния + ДнейДоСледующегоОбновления <= ТекущаяДатаСеанса() Тогда
			ПроверитьСоздатьМодель(Выборка.Ссылка);
			ПроверитьСоздатьКонфигурациюМодели(Выборка.Ссылка);
			ЗапуститьОбучение(Выборка.Ссылка);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицуЗначенийВМассивСтруктур(ТаблицаЗначений, НастройкиСервиса, ТипДанных = "", ДоступныеРеквизиты = Неопределено,
	Диапазон = Неопределено)
	
	МассивСтруктур = Новый Массив();
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат МассивСтруктур;
	КонецЕсли;
	
	ЛеваяГраница = 0;
	ПраваяГраница = ТаблицаЗначений.Количество() - 1;
	Если Диапазон <> Неопределено Тогда
		ЛеваяГраница = Диапазон["ЛеваяГраница"];
		ПраваяГраница = Диапазон["ПраваяГраница"];
	КонецЕсли;
	
	Для ТекущийИндекс = ЛеваяГраница По ПраваяГраница Цикл
		Строка = ТаблицаЗначений[ТекущийИндекс];
		Структура = Новый Структура();
		Для Каждого КлючЗначениеРеквизита Из ДоступныеРеквизиты Цикл
			ОписаниеРеквизита = КлючЗначениеРеквизита.Значение;
			
			Если ОписаниеРеквизита.Выгружать Тогда
				
				Если ОписаниеРеквизита.ЭтоПользовательскоеПоле Тогда
					ЧастиКлюча = СтрРазделить(ОписаниеРеквизита.ИмяВИсточнике, "_");
					ТипРеквизита = ЧастиКлюча[0];
					ИмяРеквизита = ЧастиКлюча[1];
					ИмяРеквизитаСТипом = ТипРеквизита + "_" + ИмяРеквизита;
					
					ИмяВСервисе = ПолучитьИмяВСервисе(ОписаниеРеквизита.ИмяВСервисе, ТипДанных, НастройкиСервиса);
					Структура.Вставить(ИмяВСервисе, ПреобразоватьВТипСервиса(Строка[ИмяРеквизитаСТипом]));
				Иначе
					ИмяВСервисе = ПолучитьИмяВСервисе(ОписаниеРеквизита.ИмяВСервисе, ТипДанных, НастройкиСервиса);
					Структура.Вставить(ИмяВСервисе, ПреобразоватьВТипСервиса(Строка[ОписаниеРеквизита.ИмяВИсточнике]));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		МассивСтруктур.Добавить(Структура);
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

Функция ПолучитьИмяВСервисе(ИмяВСервисе, ТипДанных, НастройкиСервиса)
	
	Если ТипДанных = "Товары" Тогда
		Если ЗначениеЗаполнено(НастройкиСервиса.РеквизитАналогиТовара)
			И НастройкиСервиса.РеквизитАналогиТовара = ИмяВСервисе Тогда
			Возврат "analog_id";
		Иначе
			Возврат ИмяВСервисе;
		КонецЕсли;
	Иначе
		Возврат ИмяВСервисе;
	КонецЕсли;
	
КонецФункции

Функция ПреобразоватьВТипСервиса(ВходящееЗначение)
	
	ТипЗначения = ТипЗнч(ВходящееЗначение);
	МетаданныеЗначения = Неопределено; // ОбъектМетаданных. 
	
	ЭтоПримитивныйТип =  ТипЗначения = Тип("Дата")
		Или ТипЗначения = Тип("Число")
		Или ТипЗначения = Тип("Строка")
		Или ТипЗначения = Тип("Булево")
		Или ТипЗначения = Тип("Неопределено")
		Или ТипЗначения = Тип("Null");
	
	Если Не ЭтоПримитивныйТип Тогда
		МетаданныеЗначения = ВходящееЗначение.Метаданные(); // ОбъектМетаданных. 
	КонецЕсли;
	
	Если ТипЗначения = Тип("Null") Тогда
		Возврат "";
	ИначеЕсли ТипЗначения = Тип("Неопределено") Тогда
		Возврат "";
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Возврат ВходящееЗначение;
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Возврат Строка(Формат(ВходящееЗначение, "ДФ=yyyy-MM-ddTHH:mm:ss"));
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ДниНедели") Тогда
		Если ВходящееЗначение = Перечисления.ДниНедели.ПустаяСсылка() Тогда
			Возврат 0;
		ИначеЕсли ВходящееЗначение = Перечисления.ДниНедели.Понедельник Тогда
			Возврат 1;
		ИначеЕсли ВходящееЗначение = Перечисления.ДниНедели.Вторник Тогда
			Возврат 2;
		ИначеЕсли ВходящееЗначение = Перечисления.ДниНедели.Среда Тогда
			Возврат 3;
		ИначеЕсли ВходящееЗначение = Перечисления.ДниНедели.Четверг Тогда
			Возврат 4;
		ИначеЕсли ВходящееЗначение = Перечисления.ДниНедели.Пятница Тогда
			Возврат 5;
		ИначеЕсли ВходящееЗначение = Перечисления.ДниНедели.Суббота Тогда
			Возврат 6;
		ИначеЕсли ВходящееЗначение = Перечисления.ДниНедели.Воскресенье Тогда
			Возврат 7;
		КонецЕсли;
		
	ИначеЕсли МетаданныеЗначения <> Неопределено
		И (ОбщегоНазначения.ЭтоСправочник(МетаданныеЗначения)
			Или ОбщегоНазначения.ЭтоДокумент(МетаданныеЗначения)) Тогда
		Возврат Строка(ВходящееЗначение.УникальныйИдентификатор());
	ИначеЕсли МетаданныеЗначения <> Неопределено
		И ОбщегоНазначения.ЭтоПеречисление(МетаданныеЗначения)
		И МетаданныеЗначения.Имя = Метаданные.Перечисления.Периодичность.Имя Тогда
		
		Если ВходящееЗначение = Перечисления.Периодичность.День Тогда
			Возврат "day";
		ИначеЕсли ВходящееЗначение = Перечисления.Периодичность.Неделя Тогда
			Возврат "week";
		ИначеЕсли ВходящееЗначение = Перечисления.Периодичность.Месяц Тогда
			Возврат "month";
		Иначе
			ВызватьИсключение ТекстВыбраннаяПериодичностьНеПредусмотрена(Строка(ВходящееЗначение));
		КонецЕсли;
	ИначеЕсли МетаданныеЗначения <> Неопределено
		И ОбщегоНазначения.ЭтоПеречисление(МетаданныеЗначения) Тогда
		
		Возврат Строка(ВходящееЗначение);
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Возврат СокрЛП(ВходящееЗначение);
	Иначе
		Возврат Строка(ВходящееЗначение);
	КонецЕсли;
	
КонецФункции

// Функция разбирает входящую строку и определяет структуру URI
//
Функция СтруктураURI(Знач СтрокаURI)
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Функция десериализует строку формата JSON, полученную от сервера, и возвращает результат этого действия.
//
// Параметры:
//  СтрокаВФорматеJSON - Строка - Строка в формате JSON.
//
// Возвращаемое значение:
//  Соответствие, Массив, Структура - десериализованное значение чтения JSON.
//
Функция ПрочитатьТелоЗапросаJSON(СтрокаВФорматеJSON)
	
	ДесериализованноеЗначение = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаВФорматеJSON);
	// Строка может быть не в формате JSON (например при ошибке)
	Попытка
		ДесериализованноеЗначение = ПрочитатьJSON(ЧтениеJSON, Истина);
	Исключение
		СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , 
			ТекстНевозможноПрочитатьJSON(СтрокаВФорматеJSON));
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат ДесериализованноеЗначение;
	
КонецФункции

// Функция формирует строку JSON из передаваемого для записи объекта.
//
// Параметры:
//  ЗаписываемыйОбъект - Произвольный - записываемый объект в тело запроса JSON.
//
// Возвращаемое значение:
//  Строка - Строка в формате JSON
//
Функция СформироватьТелоЗапросаJSON(ЗаписываемыйОбъект, ЕстьОшибки = Ложь)
	
	СтрокаJSON = Новый ЗаписьJSON;
	СтрокаJSON.УстановитьСтроку();
	Попытка
		ЗаписатьJSON(СтрокаJSON, ЗаписываемыйОбъект);
	Исключение
		ЕстьОшибки = Истина;
		СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстНевозможноСформироватьJSON(ЗаписываемыйОбъект, ОписаниеОшибки));
	КонецПопытки;
	ТелоЗапросаJSON = СтрокаJSON.Закрыть();
	
	Возврат ТелоЗапросаJSON;
	
КонецФункции

Функция ПолучитьПредставлениеСвойстваСервиса(ИмяСвойства, ВыдаватьОшибку = Истина)
	
	СоответствиеИменСвойств = СоответствиеИменСвойств();
	Если Не СоответствиеИменСвойств.Свойство(ИмяСвойства) Тогда
		Если ВыдаватьОшибку Тогда
			ТекстСообщения = ТекстНеНайденаНастройка(ИмяСвойства);
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СоответствиеИменСвойств[ИмяСвойства];
	
КонецФункции

Функция ЕстьСвойствоСтруктурыСоответствия(Коллекция, ИмяСвойства)
	
	Если ТипЗнч(Коллекция) = Тип("Структура") Тогда
		Возврат Коллекция.Свойство(ИмяСвойства);
	ИначеЕсли ТипЗнч(Коллекция) = Тип("Соответствие") Тогда
		Возврат Коллекция[ИмяСвойства] <> Неопределено;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ИзвлечьДатыИзСтроки(Строка)
	
	МассивДат = Новый Массив();
	
	НачальнаяПозиция = 1;
	
	ПредыдущийРазделитель = СтрНайти(Строка, "-", , НачальнаяПозиция);
	Пока ПредыдущийРазделитель > 0 Цикл
		СледующийРазделитель = СтрНайти(Строка, "-", , ПредыдущийРазделитель + 1);
		Если СледующийРазделитель - ПредыдущийРазделитель = 3 Тогда
			Год = Сред(Строка, ПредыдущийРазделитель - 4, 4);
			Месяц = Сред(Строка, ПредыдущийРазделитель + 1, 2);
			День = Сред(Строка, СледующийРазделитель + 1, 2);
			МассивДат.Добавить(Дата(Год, Месяц, День));
		КонецЕсли;
		ПредыдущийРазделитель = СледующийРазделитель;
	КонецЦикла;
	
	Возврат МассивДат;
	
КонецФункции

Функция ИзвлечьЧислаИзСтроки(Строка)
	
	МассивЧисел = Новый Массив();
	
	СтрокаЛишнихБукв = СтрСоединить(СтрРазделить(Строка, "-0123456789."));
	ИскомыеЧисла = СтрРазделить(Строка, СтрокаЛишнихБукв, Ложь);
	Для Каждого НайденноеЧисло Из ИскомыеЧисла Цикл
		Если НайденноеЧисло = "."
			Или НайденноеЧисло = "-" Тогда
			Продолжить;
		КонецЕсли;
		МассивЧисел.Добавить(Число(НайденноеЧисло));
	КонецЦикла;
	
	Возврат МассивЧисел;
	
КонецФункции

Функция ОпределитьДиапазоны(КоллекцияДляОпределения, КоличествоВПорции = 1000)
	
	Диапазоны = Новый Массив();
	
	КоличествоЭлементов = КоллекцияДляОпределения.Количество();
	ЦелыхПорций = Цел(КоличествоЭлементов / КоличествоВПорции);
	ПоследняяПорция = КоличествоЭлементов % КоличествоВПорции;
	
	Если ЦелыхПорций > 0 Тогда
		Для НомерПорции = 0 По ЦелыхПорций - 1 Цикл
			ЭлементДиапазона = Новый Структура("ЛеваяГраница, ПраваяГраница");
			ЭлементДиапазона["ЛеваяГраница"] = НомерПорции * КоличествоВПорции;
			ЭлементДиапазона["ПраваяГраница"] = НомерПорции * КоличествоВПорции + КоличествоВПорции - 1;
			Диапазоны.Добавить(ЭлементДиапазона);
		КонецЦикла;
	КонецЕсли;
	
	Если ПоследняяПорция > 0 Тогда
		ЭлементДиапазона = Новый Структура("ЛеваяГраница, ПраваяГраница");
		ЭлементДиапазона["ЛеваяГраница"] = ЦелыхПорций * КоличествоВПорции;
		ЭлементДиапазона["ПраваяГраница"] = КоличествоЭлементов - 1;
		Диапазоны.Добавить(ЭлементДиапазона);
	КонецЕсли;
	
	Возврат Диапазоны;
	
КонецФункции

Функция ОтфильтроватьИсходныйНаборПоДиапазону(ИсходныйНабор, Диапазон)
	
	ОтфильтрованныйНабор = Новый Массив;
	
	Для Индекс = Диапазон.ЛеваяГраница По Диапазон.ПраваяГраница Цикл
		ОтфильтрованныйНабор.Добавить(ИсходныйНабор[Индекс]);
	КонецЦикла;
	
	Возврат ОтфильтрованныйНабор;
	
КонецФункции

Процедура ПроверитьВидПлана(ВидПлана)
	
	Если Не ЗначениеЗаполнено(ВидПлана) Тогда
		ВызватьИсключение ТекстПустойВидПлана();
	ИначеЕсли Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ЗаполнятьПоДаннымСервиса") Тогда
		ВызватьИсключение ТекстНекорректныйВидПлана();
	КонецЕсли;
	
КонецПроцедуры

Функция ПередВызовомМетодаСервиса()
	
	ПолучитьСтатусПодключенияКСервису();
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	Если НастройкиСервиса.СтатусПодключения = СтатусПодключенияАктивен() Тогда
		ТекстОшибки = "";
	ИначеЕсли НастройкиСервиса.СтатусПодключения = СтатусПодключенияВОчереди() Тогда
		ТекстОшибки = ТекстОжидаетсяПодключение();
	Иначе
		ТекстОшибки = ТекстНеПодключено();
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Создать коллекцию.
// 
// Параметры:
//  ТипКоллекции - Строка - Тип коллекции
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция СоздатьКоллекцию(ТипКоллекции = "sales")
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("data");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить("dataName",
		ТипКоллекции);
	ТелоЗапроса.Вставить("dataType",
		"table");
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ОбновлениеИнформацииОКоллекциях",
			ТипКоллекции);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Удалить коллекцию.
// 
// Параметры:
//  ИмяКоллекции - Строка - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция УдалитьКоллекцию(ИмяКоллекции)
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ИдКоллекции = НастройкиСервиса.ИдКоллекций[НастройкиСервиса.Коллекции[ИмяКоллекции].ИмяВСервисе];
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("data");
	ПараметрыАдреса.Добавить(ИдКоллекции);
	
	Метод = "DELETE";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	ТелоЗапроса = Новый Структура();
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "УдалениеКоллекции", ИмяКоллекции);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОтветаСервиса
Функция ПолучитьПредставлениеОбщейОшибки(СтруктураОтвета, ЭтоДействиеССобственнойОбработкойСпецифическихОшибок)
	
	ТекстОшибки = "";
	
	ОбработанныйОтвет = "";
	Если ТипЗнч(СтруктураОтвета) = Тип("Строка") Тогда
		ОбработанныйОтвет = НРег(СтруктураОтвета);
	ИначеЕсли ТипЗнч(СтруктураОтвета) = Тип("Соответствие")
			И ЗначениеЗаполнено(СтруктураОтвета["error"]) Тогда
		ОбработанныйОтвет = НРег(СтруктураОтвета["error"]);
	КонецЕсли;
	
	Если НРег(ОбработанныйОтвет) = "timeout while authorization" Тогда
		ТекстОшибки = ТекстТаймаутАутентификации();
	ИначеЕсли ОбработанныйОтвет = "application not authorized"
			Или ОбработанныйОтвет = "данные для аутентификации не найдены" Тогда
		ТекстОшибки = ТекстДанныеАутентификацииНеНайдены();
	ИначеЕсли СтрНайти(ОбработанныйОтвет, "sales collection is empty") > 0 Тогда
		ТекстОшибки = ТекстКоллекцияПродажПустая();
	ИначеЕсли СтрНайти(ОбработанныйОтвет, "no processor for that model, check if model is trained") > 0 Тогда
		ТекстОшибки = ТекстВидПланаНеОбучен();
	ИначеЕсли СтрНайти(ОбработанныйОтвет, "the json object must be str, bytes or bytearray") > 0 Тогда
		ТекстОшибки = ТекстПриПолученииДанныхПроизошлаОшибка();
	ИначеЕсли СтрНайти(ОбработанныйОтвет, "forbidden for user") > 0 Тогда
		ЧислаВСтроке = ИзвлечьЧислаИзСтроки(ОбработанныйОтвет);
		ТекстОшибки = ТекстНедостаточноПравДляПользователя(ЧислаВСтроке[0]);
	ИначеЕсли СтрНайти(ОбработанныйОтвет, "if specified category collection, column ""category_id"" should present in products collection") > 0 Тогда
		ТекстОшибки = ТекстНеОтмеченаКВыгрузкеКолонкаКатегория();
	ИначеЕсли ТипЗнч(СтруктураОтвета) = Тип("Соответствие") 
			И ЗначениеЗаполнено(СтруктураОтвета["error"])
			И СтрНайти(НРег(СтруктураОтвета["error"]), "the json object must be str, bytes or bytearray") > 0 Тогда
		ТекстОшибки = ТекстПриПолученииДанныхПроизошлаОшибка();
	ИначеЕсли ТипЗнч(СтруктураОтвета) = Тип("Соответствие") 
			И ЗначениеЗаполнено(СтруктураОтвета["error"])
			И Не ЭтоДействиеССобственнойОбработкойСпецифическихОшибок Тогда
		ТекстОшибки = ТекстВоВремяОбращенияКСервисуПроизошлаОшибка(СтруктураОтвета["error"]);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ОбработатьОтветСервиса(СтруктураОтвета, ИмяДействия,
	ДополнительныйПараметр = Неопределено)
	
	Ответ = ОбработатьОтветСервисаВнутренний(СтруктураОтвета, ИмяДействия, ДополнительныйПараметр);
	Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
		СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
		ШаблонЗаписиЖурналаРегистрации = НСтр("ru = 'Произошла ошибка во время выполнения действия %1, текст ошибки: %2'");
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , ,
			СтрШаблон(ШаблонЗаписиЖурналаРегистрации, ИмяДействия, Ответ.ТекстОшибки));
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

Функция ОбработатьОтветСервисаВнутренний(СтруктураОтвета, ИмяДействия, ДополнительныйПараметр = Неопределено)
	
	Ответ = ОтветФункцииОбработкиОтветаСервиса();
	
	ДействияССобственнойОбработкойСпецифическихОшибок = Новый Массив();
	ДействияССобственнойОбработкойСпецифическихОшибок.Добавить("ОбновлениеИнформацииОСтатусеОбучения");
	
	ЭтоДействиеССобственнойОбработкойСпецифическихОшибок 
		= ДействияССобственнойОбработкойСпецифическихОшибок.Найти(ИмяДействия) <> Неопределено;
	
	ТекстОшибки = ПолучитьПредставлениеОбщейОшибки(СтруктураОтвета, ЭтоДействиеССобственнойОбработкойСпецифическихОшибок);
	Если Не ПустаяСтрока(ТекстОшибки)
		И Не ИмяДействия = "ПолучениеПрогнозаСервиса" Тогда
		Ответ.ТекстОшибки = ТекстОшибки;
		Возврат Ответ;
	КонецЕсли;
	
	ЭтоИтерируемыйТип = ТипЗнч(СтруктураОтвета) = Тип("Структура")
			Или ТипЗнч(СтруктураОтвета) = Тип("Соответствие")
			Или ТипЗнч(СтруктураОтвета) = Тип("Массив");
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	Если ИмяДействия = "РегистрацияПользователя"
		И СтруктураОтвета <> Неопределено Тогда
		
		НастройкиСервиса.ТокенПользователя = СтруктураОтвета["token"];
		ОбновитьНастройкиСервиса(НастройкиСервиса);
		УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
		
	ИначеЕсли ИмяДействия = "РегистрацияПриложения"
		И СтруктураОтвета <> Неопределено Тогда
		
		Если ЭтоИтерируемыйТип Тогда
			НастройкиСервиса.ТокенПриложения = СтруктураОтвета["access_token"];
			НастройкиСервиса.ТокенОбновления = СтруктураОтвета["refresh_token"];
			НастройкиСервиса.ИдентификаторПриложения = СтруктураОтвета["application_uuid"];
			НастройкиСервиса.ДатаОбновленияТокенов = ТекущаяДатаСеанса();
			ОбновитьНастройкиСервиса(НастройкиСервиса);
			УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
		Иначе
			Ответ.ТекстОшибки = ТекстВоВремяРегистрацииПриложенияПроизошлаОшибка(СтруктураОтвета);
			Возврат Ответ;
		КонецЕсли;
		
	ИначеЕсли ИмяДействия = "ЗаявкаНаПодключение"
		И СтруктураОтвета <> Неопределено Тогда
		
		Если ДополнительныйПараметр = 200 Тогда
			НастройкиСервиса.ЗаявкаНаПодключениеОтправлена = Истина;
			ОбновитьНастройкиСервиса(НастройкиСервиса);
		КонецЕсли;
		
	ИначеЕсли ИмяДействия = "ПолучениеСтатуса"
		И СтруктураОтвета <> Неопределено Тогда
		
		Если СтруктураОтвета["status"] = "active" Тогда
			НастройкиСервиса.СтатусПодключения = СтатусПодключенияАктивен();
		ИначеЕсли СтруктураОтвета["status"] = "pending" Тогда
			НастройкиСервиса.СтатусПодключения = СтатусПодключенияВОчереди();
		Иначе
			НастройкиСервиса.СтатусПодключения = СтатусПодключенияНеПодключено();
		КонецЕсли;
		
		ОбновитьНастройкиСервиса(НастройкиСервиса);
		
	ИначеЕсли ИмяДействия = "ОбновлениеИнформацииОКоллекциях"
		И СтруктураОтвета <> Неопределено Тогда
		
		Если НастройкиСервиса.ИдКоллекций.Свойство(ДополнительныйПараметр) Тогда
			НастройкиСервиса.ИдКоллекций[ДополнительныйПараметр] = СтруктураОтвета["dataID"];
		Иначе
			НастройкиСервиса.ИдКоллекций.Вставить(ДополнительныйПараметр, СтруктураОтвета["dataID"]); //@skip-warning
		КонецЕсли;
		ОбновитьНастройкиСервиса(НастройкиСервиса);
		
	ИначеЕсли ИмяДействия = "УдалениеКоллекции"
		И СтруктураОтвета <> Неопределено Тогда
		
		НастройкиСервиса.ИдКоллекций.Удалить(ДополнительныйПараметр);
		НастройкиСервиса.ИзмененияКоллекций[ДополнительныйПараметр].ИзмененФормат = Ложь;
		НастройкиСервиса.ИзмененияКоллекций[ДополнительныйПараметр].ДатаНачалаВыгрузки = Дата(1, 1, 1);
		НастройкиСервиса.ИзмененияКоллекций[ДополнительныйПараметр].ДатаВыгрузки = Дата(1, 1, 1);
		ОбновитьНастройкиСервиса(НастройкиСервиса);
		
	ИначеЕсли ИмяДействия = "СозданиеМодели"
		И СтруктураОтвета <> Неопределено Тогда
		
		Если Не ЭтоИтерируемыйТип Тогда
			Ответ.ТекстОшибки = ТекстПриПолученииДанныхПроизошлаОшибка();
			Возврат Ответ;
		КонецЕсли;
		
		НастройкиСервиса.МоделиПрогнозирования.Вставить(ДополнительныйПараметр, СтруктураОтвета["modelId"]);
		ОбновитьНастройкиСервиса(НастройкиСервиса);
		
	ИначеЕсли ИмяДействия = "ОбновлениеИнформацииОМоделях"
		И СтруктураОтвета <> Неопределено Тогда
		
	ИначеЕсли ИмяДействия = "СозданиеКонфигурацииМодели"
		И СтруктураОтвета <> Неопределено Тогда
		
		
	ИначеЕсли ИмяДействия = "ЗапускОбученияМодели"
		И СтруктураОтвета = Неопределено Тогда
		Ответ.ТекстОшибки = ТекстПриПолученииДанныхПроизошлаОшибка();
	ИначеЕсли ИмяДействия = "ЗапускОбученияМодели"
		И СтруктураОтвета <> Неопределено Тогда
		
		Если Лев(СтруктураОтвета, 2) = "t_" Тогда
			СтатусОбучения = СтатусОжидаетОбучения();
			РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ЗаполнитьИдентификаторыОбученияПоВидуПлана(
				ДополнительныйПараметр,
				СтруктураОтвета,
				СтатусОбучения);
			Ответ.ВозвращаемоеЗначение = СтатусОбучения;
			Возврат Ответ;
		Иначе
			Ответ.ТекстОшибки = ТекстВоВремяЗапускаОбученияПроизошлаОшибка(СтатусОбучения);
			Возврат Ответ;
		КонецЕсли;
		
	ИначеЕсли ИмяДействия = "ОбновлениеИнформацииОСтатусеОбучения"
		И СтруктураОтвета = Неопределено Тогда
		Ответ.ТекстОшибки = ТекстПриПолученииДанныхПроизошлаОшибка();
	ИначеЕсли ИмяДействия = "ОбновлениеИнформацииОСтатусеОбучения"
		И СтруктураОтвета <> Неопределено Тогда
		
		ТекстОшибкиВнутренний = "";
		Готовность = 0;
		
		СтатусОбучения = СтатусОбучается();
		Если ТипЗнч(СтруктураОтвета["status"]) = Тип("Строка") Тогда
			Если НРег(СтруктураОтвета["status"]) = "pending" Тогда
				СтатусОбучения = СтатусОжидаетОбучения();
			ИначеЕсли НРег(СтруктураОтвета["status"]) = "progress" Тогда
				СтатусОбучения = СтатусОбучается();
			ИначеЕсли НРег(СтруктураОтвета["status"]) = "finished" Тогда
				СтатусОбучения = СтатусГотовКПолучению();
				Готовность = 100;
			ИначеЕсли НРег(СтруктураОтвета["result"]) = "fail" Тогда
				СтатусОбучения = СтатусОшибкаОбучения();
			Иначе
				СтатусОбучения = СтатусНеизвестен();
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтруктураОтвета["status"]) = Тип("Соответствие") Тогда
			Если НРег(СтруктураОтвета["result"]) = "fail" Тогда
				СтатусОбучения = СтатусОшибкаОбучения();
				Если СтрНайти(НРег(СтруктураОтвета["error"]), "try to reduce predictions date") > 0 Тогда
					ДатаПродажи = ИзвлечьДатыИзСтроки(СтруктураОтвета["error"]);
					ТекстОшибкиВнутренний = ТекстТребуетсяСдвинутьДатуНачалаПрогнозаКДатеПродажи(ДатаПродажи[0]);
				ИначеЕсли СтрНайти(НРег(СтруктураОтвета["error"]), "try to add predictions date") > 0 Тогда
					ДатаПродажи = ИзвлечьДатыИзСтроки(СтруктураОтвета["error"]);
					ТекстОшибкиВнутренний = ТекстТребуетсяДобавитьПродажиДляПостроенияПрогноза(ДатаПродажи[0]);
				ИначеЕсли СтрНайти(НРег(СтруктураОтвета["error"]), "no one item has enought sales history") > 0 Тогда
					ЧислаВСтроке = ИзвлечьЧислаИзСтроки(СтруктураОтвета["error"]);
					ТекстОшибкиВнутренний = ТекстТребуетсяДнейДляПостроенияПрогноза(ЧислаВСтроке[0]);
				КонецЕсли;
			ИначеЕсли СтруктураОтвета["status"]["progress"] > 0.1 Тогда
				СтатусОбучения = СтатусОбучается();
				Готовность = СтруктураОтвета["status"]["progress"] * 100;
				Готовность = ?(Готовность > 100, 100, Готовность);
			ИначеЕсли СтруктураОтвета["status"]["progress"] >= 100 Тогда
				СтатусОбучения = СтатусГотовКПолучению();
				Готовность = 100;
			Иначе
				СтатусОбучения = СтатусНеизвестен();
			КонецЕсли;
		ИначеЕсли НРег(СтруктураОтвета.Получить("error")) = "no such uuid" Тогда
			СтатусОбучения = СтатусОшибкаОбучения();
			ТекстОшибкиВнутренний = НСтр("ru='Идентификатор не найден'");
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстОшибкиВнутренний) Тогда
			Если ТипЗнч(СтруктураОтвета) = Тип("Структура")
				И СтруктураОтвета.Свойство("error") Тогда
				ТекстОшибкиВнутренний = СтруктураОтвета["error"]; //@skip-warning
			ИначеЕсли ТипЗнч(СтруктураОтвета) = Тип("Соответствие")
				И СтруктураОтвета.Получить("error") <> Неопределено Тогда
				ТекстОшибкиВнутренний = СтруктураОтвета["error"];
			КонецЕсли;
		КонецЕсли;
		
		РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ЗаполнитьИдентификаторыОбученияПоВидуПлана(
			ДополнительныйПараметр.ВидПлана,
			ДополнительныйПараметр.ИдОбучения,
			СтатусОбучения,
			ТекстОшибкиВнутренний,
			Готовность);
		
		Ответ.ВозвращаемоеЗначение = СтатусОбучения;
		Возврат Ответ;
		
	ИначеЕсли ИмяДействия = "ПолучениеПрогнозаСервиса" Тогда
		
		СтатусОбучения = СтатусЗагружен();
		ТекстОшибкиВнутренний = "";
		Готовность = 100;
		
		Если Не ЭтоИтерируемыйТип Тогда
			Ответ.ТекстОшибки = ТекстПриПолученииДанныхПроизошлаОшибка();
			Возврат Ответ;
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ЗаполнитьИдентификаторыОбученияПоВидуПлана(
				ДополнительныйПараметр.ВидПлана,
				ДополнительныйПараметр.ИдОбучения,
				СтатусОшибкаОбучения(),
				ТекстОшибки,
				Готовность);
			Возврат Ответ; // Возврат текста ошибки не требуется, ошибка будет выведена в интерфейс через метод выше.
		КонецЕсли;
		
		СервисПрогнозированияПереопределяемый.ЗаписатьПрогнозПродаж(СтруктураОтвета,
			ДополнительныйПараметр.ВидПлана,
			ДополнительныйПараметр.ИдОбучения,
			ДополнительныйПараметр.КачествоМодели);
			
		РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ЗаполнитьИдентификаторыОбученияПоВидуПлана(
			ДополнительныйПараметр.ВидПлана,
			ДополнительныйПараметр.ИдОбучения,
			СтатусОбучения,
			ТекстОшибкиВнутренний,
			Готовность);
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Процедура ВосстановитьНастройкиПоШаблону(ТекущиеНастройки, ШаблонНастроек)
	
	Для Каждого КлючЗначение Из ШаблонНастроек Цикл
		
		ЕстьСвойство = ЕстьСвойствоСтруктурыСоответствия(ТекущиеНастройки, КлючЗначение.Ключ);
		
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура")
			Или ТипЗнч(КлючЗначение.Значение) = Тип("Соответствие") Тогда
			
			Если ЕстьСвойство
				И ТипЗнч(КлючЗначение.Значение) <> ТипЗнч(ТекущиеНастройки[КлючЗначение.Ключ]) Тогда
				ТекущиеНастройки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			ИначеЕсли ЕстьСвойство Тогда
				ВосстановитьНастройкиПоШаблону(ТекущиеНастройки[КлючЗначение.Ключ], КлючЗначение.Значение);
			Иначе
				ТекущиеНастройки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЕсли;
			
		ИначеЕсли ЕстьСвойство
			И ТипЗнч(КлючЗначение.Значение) <> ТипЗнч(ТекущиеНастройки[КлючЗначение.Ключ]) Тогда
			ТекущиеНастройки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		ИначеЕсли Не ЕстьСвойство Тогда
			ТекущиеНастройки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОписаниеИзмененийКоллекций()
	
	Коллекции = СервисПрогнозированияПереопределяемый.ПолучитьОписаниеРеквизитовВсехКоллекций();
	
	Структура = Новый Структура();
	Для Каждого КлючЗначение Из Коллекции Цикл
		Структура.Вставить(КлючЗначение.Значение.ИмяВИсточнике, ОписаниеИзмененияКоллекции());
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Функция ЕстьНевыгруженныйПериод(ИмяКоллекции)
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	Если ИмяКоллекции <> "ПланыПродаж" Тогда
		Если НастройкиСервиса.ВыгружатьОстаткиЗаВсеВремя Тогда
			ДатаОкончания = НачалоДня(ТекущаяДатаСеанса());
		Иначе
			ДатаОкончания = НастройкиСервиса.ДатаОкончанияВыгрузкиОстатковИПродаж;
		КонецЕсли;
	Иначе
		Если НастройкиСервиса.ВыгружатьКонтрольныеПланыЗаВсеВремя Тогда
			ДатаОкончания = НачалоДня(ТекущаяДатаСеанса());
		Иначе
			ДатаОкончания = НастройкиСервиса.ДатаОкончанияВыгрузкиКонтрольныхПланов;
		КонецЕсли;
	КонецЕсли;
	
	Если ДатаОкончания < Дата(2000, 1, 1) Тогда
		ДатаОкончания = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ДатаАктуальности = НастройкиСервиса.ИзмененияКоллекций[ИмяКоллекции].ДатаАктуальности;
	
	Если НачалоДня(ДатаАктуальности) < НачалоДня(ДатаОкончания) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


#КонецОбласти

#Область ШаблоныИСтруктуры

// Шаблон настроек сервиса.
// 
// Возвращаемое значение:
//  Структура - Шаблон настроек сервиса:
// * Версия - Число -
// * НазваниеКомпании - Строка - 
// * ФИОКонтактногоЛица - Строка - 
// * ЭлектроннаяПочта - Строка - 
// * НомерТелефона - Строка -  
// * НомерТелефонаЗначенияПолей - Строка - 
// * НомерТелефонаКомментарий - Строка - 
// * ЗаявкаНаПодключениеОтправлена - Булево - 
// * ТипАвторизации - Число -
// * АдресПодключения - Строка -
// * Логин - Строка -
// * Пароль - Строка -
// * ТокенПриложения - Строка -
// * ТокенОбновления - Строка -
// * ИдентификаторПриложения - Строка -
// * ДатаОбновленияТокенов - Дата -
// * ИмяБазы - Строка -
// * Тариф - Строка -
// * РазрешенОбменССервисом - Булево -
// * ВыгрузкаДанныхПоРасписаниюАктивна - Булево -
// * ВыгрузкаДанныхПоРасписаниюЗапускатьОбучение - Булево -
// * ЗагрузкаДанныхПоРасписаниюАктивна - Булево -
// * ИспользоватьРеальныеОстаткиИПродажи - Булево -
// * ИспользоватьПлановыеОстаткиИПродажи - Булево -
// * СценарийПрогнозированияФактИПлан - СправочникСсылка.СценарииТоварногоПланирования -
// * ВыгружатьОстаткиЗаВсеВремя - Булево -
// * ДатаНачалаВыгрузкиОстатковИПродаж - Дата -
// * ДатаОкончанияВыгрузкиОстатковИПродаж - Дата -
// * ПорцияВыгрузкиКатегориальныхДанных - Число -
// * ПорцияВыгрузкиПериодическихДанныхВДнях - Число -
// * СценарийПрогнозированияКонтрольныхПланов - СправочникСсылка.СценарииТоварногоПланирования -
// * ВыгружатьКонтрольныеПланыЗаВсеВремя - Булево -
// * ДатаНачалаВыгрузкиКонтрольныхПланов - Дата -
// * ДатаОкончанияВыгрузкиКонтрольныхПланов - Дата -
// * РеквизитАналогиТовара - Строка -
// * РеквизитАналогиТовараВИсточнике - Строка -
// * РеквизитАналогиТовараСвойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения -
// * РеквизитАналогиТовараПредставление - Строка -
// * Коллекции - см. СервисПрогнозированияПереопределяемый.ПолучитьОписаниеРеквизитовВсехКоллекций.
// * ИдКоллекций - Структура - описывает идентификаторы коллекций:
// ** Ключ - Строка - Имя коллекции
// ** Значение - Число - Номер коллекции
// * ИзмененияКоллекций - см. СервисПрогнозированияПереопределяемый.ПолучитьОписаниеРеквизитовВсехКоллекций.
// * ИмяСервиса - Строка -
// * МоделиПрогнозирования - Соответствие -
// * ВыгрузкаАктивна - Булево -
// * ДатаПоследнейВыгрузки - Дата -
// * ТаймаутВыгрузки - Число -
// * ИмяВыгружаемойСейчасКоллекции - Строка -
// * ЗапланированоВыгрузитьКоллекций - Число -
// * ВыгруженоКоллекций - Число -
Функция ШаблонНастроекСервиса()
	
	Коллекции = СервисПрогнозированияПереопределяемый.ПолучитьОписаниеРеквизитовВсехКоллекций();
	ИзмененияКоллекций = ПолучитьОписаниеИзмененийКоллекций();
	
	ВсеНастройкиСервиса = Новый Структура();
	ВсеНастройкиСервиса.Вставить("Версия", 0.61);
	
	// Заявка на подключение
	ВсеНастройкиСервиса.Вставить("НазваниеКомпании", "");
	ВсеНастройкиСервиса.Вставить("ФИОКонтактногоЛица", "");
	ВсеНастройкиСервиса.Вставить("ЭлектроннаяПочта", "");
	ВсеНастройкиСервиса.Вставить("НомерТелефона", "");
	ВсеНастройкиСервиса.Вставить("НомерТелефонаЗначенияПолей", "");
	ВсеНастройкиСервиса.Вставить("НомерТелефонаКомментарий", "");
	ВсеНастройкиСервиса.Вставить("ЗаявкаНаПодключениеОтправлена", Ложь);
	
	// Авторизация.
	ВсеНастройкиСервиса.Вставить("ТипАвторизации", 1);
	ВсеНастройкиСервиса.Вставить("АдресПодключения", "http://forecast.1c.ai");
	ВсеНастройкиСервиса.Вставить("Логин", "");
	ВсеНастройкиСервиса.Вставить("Пароль", ""); // Сохраняется в безопасном хранилище.
	ВсеНастройкиСервиса.Вставить("ТокенПриложения", "");
	ВсеНастройкиСервиса.Вставить("ТокенОбновления", "");
	ВсеНастройкиСервиса.Вставить("ИдентификаторПриложения", "");
	ВсеНастройкиСервиса.Вставить("ДатаОбновленияТокенов", '00010101');
	ВсеНастройкиСервиса.Вставить("ИмяБазы", Метаданные.Имя);
	ВсеНастройкиСервиса.Вставить("Тариф", "FORECAST_ERP_PILOT");
	ВсеНастройкиСервиса.Вставить("СтатусПодключения", СтатусПодключенияНеПодключено());
	
	ВсеНастройкиСервиса.Вставить("РазрешенОбменССервисом", Истина);
	ВсеНастройкиСервиса.Вставить("ВыгрузкаДанныхПоРасписаниюАктивна", Ложь);
	ВсеНастройкиСервиса.Вставить("ВыгрузкаДанныхПоРасписаниюЗапускатьОбучение", Ложь);
	ВсеНастройкиСервиса.Вставить("ЗагрузкаДанныхПоРасписаниюАктивна", Ложь);
	ВсеНастройкиСервиса.Вставить("ИспользоватьРеальныеОстаткиИПродажи", Истина);
	ВсеНастройкиСервиса.Вставить("ИспользоватьПлановыеОстаткиИПродажи", Ложь);
	ВсеНастройкиСервиса.Вставить("СценарийПрогнозированияФактИПлан", Справочники.СценарииТоварногоПланирования.ПустаяСсылка());
	ВсеНастройкиСервиса.Вставить("ВыгружатьОстаткиЗаВсеВремя", Истина);
	ВсеНастройкиСервиса.Вставить("ДатаНачалаВыгрузкиОстатковИПродаж", '00010101');
	ВсеНастройкиСервиса.Вставить("ДатаОкончанияВыгрузкиОстатковИПродаж", '00010101');
	ВсеНастройкиСервиса.Вставить("ПорцияВыгрузкиКатегориальныхДанных", 1000);
	ВсеНастройкиСервиса.Вставить("ПорцияВыгрузкиПериодическихДанныхВДнях", 30 * 3);
	ВсеНастройкиСервиса.Вставить("СценарийПрогнозированияКонтрольныхПланов", Справочники.СценарииТоварногоПланирования.ПустаяСсылка());
	ВсеНастройкиСервиса.Вставить("ВыгружатьКонтрольныеПланыЗаВсеВремя", Истина);
	ВсеНастройкиСервиса.Вставить("ДатаНачалаВыгрузкиКонтрольныхПланов", '00010101');
	ВсеНастройкиСервиса.Вставить("ДатаОкончанияВыгрузкиКонтрольныхПланов", '00010101');
	ВсеНастройкиСервиса.Вставить("РеквизитАналогиТовара", "");
	ВсеНастройкиСервиса.Вставить("РеквизитАналогиТовараВИсточнике", "");
	ВсеНастройкиСервиса.Вставить("РеквизитАналогиТовараСвойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка());
	ВсеНастройкиСервиса.Вставить("РеквизитАналогиТовараПредставление", "");
	ВсеНастройкиСервиса.Вставить("Коллекции", Коллекции);
	ВсеНастройкиСервиса.Вставить("ИдКоллекций", Новый Структура());
	ВсеНастройкиСервиса.Вставить("ИзмененияКоллекций", ИзмененияКоллекций);
	ВсеНастройкиСервиса.Вставить("ИмяСервиса", "sales_forecast");
	ВсеНастройкиСервиса.Вставить("МоделиПрогнозирования", Новый Соответствие());
	
	// Информация о выгрузке.
	ВсеНастройкиСервиса.Вставить("ВыгрузкаАктивна", Ложь);
	ВсеНастройкиСервиса.Вставить("ДатаПоследнейВыгрузки", '00010101');
	ВсеНастройкиСервиса.Вставить("ТаймаутВыгрузки", 60*60*5); // 5 часов.
	ВсеНастройкиСервиса.Вставить("ИмяВыгружаемойСейчасКоллекции", "");
	ВсеНастройкиСервиса.Вставить("ЗапланированоВыгрузитьКоллекций", 0);
	ВсеНастройкиСервиса.Вставить("ВыгруженоКоллекций", 0);
	
	Возврат ВсеНастройкиСервиса;
	
КонецФункции

// Шаблон авторизационных настроек сервиса.
// 
// Возвращаемое значение:
//  Структура - Шаблон авторизационных настроек сервиса:
// * Версия - Число -
// * ТипАвторизации - Строка -
// * АдресПодключения - Строка -
// * Логин - Строка -
// * Пароль - Строка -
// * ТокенПриложения - Строка -
// * ТокенОбновления - Строка -
// * ИдентификаторПриложения - Строка -
// * ДатаОбновленияТокенов - Дата -
// * ИмяБазы - Строка -
// * Тариф - Строка -
// * РазрешенОбменССервисом - Булево -
Функция ШаблонАвторизационныхНастроекСервиса()
	
	Структура = Новый Структура();
	Структура.Вставить("Версия", 0);
	Структура.Вставить("ТипАвторизации", "");
	Структура.Вставить("АдресПодключения", "");
	Структура.Вставить("Логин", "");
	Структура.Вставить("Пароль", "");
	Структура.Вставить("ТокенПриложения", "");
	Структура.Вставить("ТокенОбновления", "");
	Структура.Вставить("ИдентификаторПриложения", "");
	Структура.Вставить("ДатаОбновленияТокенов", '00010101');
	Структура.Вставить("ИмяБазы", "");
	Структура.Вставить("Тариф", "");
	Структура.Вставить("РазрешенОбменССервисом", Ложь);
	
	Возврат Структура;
	
КонецФункции

// Описание изменения коллекции.
// 
// Возвращаемое значение:
//  Структура - Описание изменения коллекции:
// * ИзмененФормат - Булево -
// * ИзмененыОтборы - Булево -
// * ДатаАктуальности - Дата -
// * ДатаНачалаВыгрузки - Дата -
// * ДатаВыгрузки - Дата -
// * ИдКоллекции - Число -
// * КоличествоДанныхВыгруженное - Число -
// * КоличествоДанныхНаСервере - Число -
Функция ОписаниеИзмененияКоллекции()
	
	Структура = Новый Структура();
	Структура.Вставить("ИзмененФормат", Ложь);
	Структура.Вставить("ИзмененыОтборы", Ложь);
	Структура.Вставить("ДатаАктуальности", Дата(1, 1, 1));
	Структура.Вставить("ДатаНачалаВыгрузки", Дата(1, 1, 1));
	Структура.Вставить("ДатаВыгрузки", Дата(1, 1, 1));
	Структура.Вставить("ИдКоллекции", 0);
	Структура.Вставить("КоличествоДанныхВыгруженное", 0);
	Структура.Вставить("КоличествоДанныхНаСервере", 0);
	
	Возврат Структура;
	
КонецФункции

// Структура ответа.
// 
// Возвращаемое значение:
//  Структура - Структура ответа:
// * Ответ - Произвольный - 
// * КодСостояния - Число - 
// * ДесериализованноеЗначение - Произвольный - 
// * КоличествоДанныхНаСервере - Число - 
// * ТекстОшибки - Строка - 
Функция СтруктураОтвета()
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Ответ");
	СтруктураРезультата.Вставить("КодСостояния");
	СтруктураРезультата.Вставить("ДесериализованноеЗначение");
	
	СтруктураРезультата.Вставить("КоличествоДанныхНаСервере");
	СтруктураРезультата.Вставить("ТекстОшибки");
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Структура ответа сервиса.
// 
// Параметры:
//  Результат - Неопределено, HTTPОтвет - Результат
// 
// Возвращаемое значение:
//  см. СтруктураОтвета.
Функция СтруктураОтветаСервиса(Результат)
	
	ТелоОтветаНаЗапрос = Результат.ПолучитьТелоКакСтроку();
	ДесериализованноеЗначение = ПрочитатьТелоЗапросаJSON(ТелоОтветаНаЗапрос);
	
	СтруктураРезультата = СтруктураОтвета();
	СтруктураРезультата.Ответ = ТелоОтветаНаЗапрос;
	СтруктураРезультата.КодСостояния = Результат.КодСостояния;
	СтруктураРезультата.ДесериализованноеЗначение = ДесериализованноеЗначение;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Ответ функции обработки ответа сервиса.
// 
// Возвращаемое значение:
//  Структура - Ответ функции обработки ответа сервиса:
// * ВозвращаемоеЗначение - Неопределено -
// * ТекстОшибки - Строка -
Функция ОтветФункцииОбработкиОтветаСервиса()
	
	Ответ = Новый Структура();
	Ответ.Вставить("ВозвращаемоеЗначение", Неопределено);
	Ответ.Вставить("ТекстОшибки", "");
	
	Возврат Ответ;
	
КонецФункции

Функция СоответствиеИменСвойств(ВключаяОбратные = Истина)
	
	СоответствиеИмен = Новый Структура();
	// Основные
	СоответствиеИмен.Вставить("Логин", "login");
	СоответствиеИмен.Вставить("Пароль", "password");
	СоответствиеИмен.Вставить("ТокенПриложения", "access_token");
	СоответствиеИмен.Вставить("ТокенОбновления", "refresh_token");
	СоответствиеИмен.Вставить("ИдентификаторПриложения", "application_uuid");
	СоответствиеИмен.Вставить("ИмяСервиса", "service_name");
	СоответствиеИмен.Вставить("ИмяБазы", "application_name");
	СоответствиеИмен.Вставить("Тариф", "tariff");
	СоответствиеИмен.Вставить("НовыйПользователь", "new_user");
	СоответствиеИмен.Вставить("НазваниеКомпании", "company_name");
	СоответствиеИмен.Вставить("ФИОКонтактногоЛица", "client_name");
	СоответствиеИмен.Вставить("ЭлектроннаяПочта", "email");
	СоответствиеИмен.Вставить("НомерТелефона", "tel");
	СоответствиеИмен.Вставить("НомерТелефонаКомментарий", "tel_comment");
	// Коллекции
	СоответствиеИмен.Вставить("Продажи", "sales");
	СоответствиеИмен.Вставить("Товары", "products");
	СоответствиеИмен.Вставить("КатегорииТоваров", "product_categories");
	СоответствиеИмен.Вставить("Покупатели", "customers");
	СоответствиеИмен.Вставить("Склады", "shops");
	СоответствиеИмен.Вставить("Остатки", "stock");
	СоответствиеИмен.Вставить("ЗаказыКлиентов", "customer_orders");
	СоответствиеИмен.Вставить("ПромоАкции", "promo");
	СоответствиеИмен.Вставить("ПланыПродаж", "sales_plans");
	СоответствиеИмен.Вставить("Сезонность", "seasonality");
	СоответствиеИмен.Вставить("КлассификацияТоваров", "ABC_XYZ_classification");
	СоответствиеИмен.Вставить("Календарь", "calendar");
	
	Если ВключаяОбратные Тогда
		СоответствиеИменОбратное = Новый Структура();
		
		Для Каждого КлючЗначение Из СоответствиеИмен Цикл
			СоответствиеИменОбратное.Вставить(КлючЗначение.Значение, КлючЗначение.Ключ);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СоответствиеИмен, СоответствиеИменОбратное, Ложь);
	КонецЕсли;
	
	Возврат СоответствиеИмен;
	
КонецФункции

// Статус обучения модели ответ.
// 
// Параметры:
//  ЕстьИнформацияОСтатусеОбучения - Булево -  
//  СтатусПрогнозаИОбучения - Строка -  
// 
// Возвращаемое значение:
//  Структура - Статус обучения модели ответ:
// * ЕстьИнформацияОСтатусеОбучения - Булево - 
// * СтатусПрогнозаИОбучения - Строка -
Функция СтатусОбученияМоделиОтвет(ЕстьИнформацияОСтатусеОбучения,
	СтатусПрогнозаИОбучения)
	
	Структура = Новый Структура();
	Структура.Вставить("ЕстьИнформацияОСтатусеОбучения", ЕстьИнформацияОСтатусеОбучения);
	Структура.Вставить("СтатусПрогнозаИОбучения", СтатусПрогнозаИОбучения);
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#Область Тексты

Функция ТекстПустойВидПлана()
	Возврат НСтр("ru='Не выбран вид плана.'");
КонецФункции

Функция ТекстНекорректныйВидПлана()
	Возврат НСтр("ru='Выбранный вид плана не настроен для работы с сервисом прогнозирования.'");
КонецФункции

Функция ТекстНеПолученИдентификаторМодели()
	Возврат НСтр("ru='Для выбранного вида плана не получен идентификатор модели.
	|Рекомендуется запустить обучение повторно.'");
КонецФункции

Функция ТекстВидПланаНеОбучен()
	ТекстОшибки = НСтр("ru='По выбранному виду плана не завершено или не запущено обучение.'");
	Возврат ТекстОшибки;
КонецФункции

Функция ТекстНетКоллекцийДляВыгрузки()
	Возврат НСтр("ru='Идентификаторы коллекций не известны. Требуется выполнить полную выгрузку данных.'");
КонецФункции

Функция ТекстОжиданиеЗавершенияОбученияМодели()
	Возврат НСтр("ru='По выбранному виду плана уже производится обучение. 
		|Дождитесь окончания и загрузите результат перед повторным запуском обучения.'");
КонецФункции

Функция ТекстОбучениеНевозможноИдетВыгрузкаДанных()
	Возврат НСтр("ru='Невозможно запустить обучение поскольку в данный момент идет выгрузка данных на сервер.'");
КонецФункции

Функция ТекстМоделиУжеНазначенИдентификатор()
	Возврат НСтр("ru='Модели уже назначен идентификатор.'");
КонецФункции

Функция ТекстВоВремяЗапускаОбученияПроизошлаОшибка(ТекстОшибки)
	ТекстШаблона = НСтр("ru='Во время запуска обучения модели произошла ошибка:
		|%1'");
	Возврат СтрШаблон(ТекстШаблона, ТекстОшибки);
КонецФункции

Функция ТекстТребуетсяСдвинутьДатуНачалаПрогнозаКДатеПродажи(ДатаПродажи)
	ТекстШаблона = НСтр("ru = 'Недостаточно данных для построения прогноза. Последняя известная дата продажи: %1.
						|Попробуйте сдвинуть дату начала прогноза к этой дате.'");
	Возврат СтрШаблон(ТекстШаблона, ДатаПродажи);
КонецФункции

Функция ТекстТребуетсяДобавитьПродажиДляПостроенияПрогноза(ДатаПрогнозирования)
	ТекстШаблона = НСтр("ru = 'Недостаточно данных для построения прогноза. Дата начала прогнозирования: %1.
						|Попробуйте добавить данные для построения прогноза.'");
	Возврат СтрШаблон(ТекстШаблона, ДатаПрогнозирования);
КонецФункции

Функция ТекстТребуетсяДнейДляПостроенияПрогноза(ТребуетсяДней)
	ТекстШаблона = НСтр("ru = 'Нет истории продаж достаточной длины для построения прогноза.
						|Минимальное требуемое количество различных дней продаж: %1.'");
	Возврат СтрШаблон(ТекстШаблона, ТребуетсяДней);
КонецФункции

Функция ТекстНедостаточноПравДляПользователя(ИдентификаторПользователя)
	ТекстШаблона = НСтр("ru = 'Недостаточно прав для пользователя с идентификатором %1.'");
	Возврат СтрШаблон(ТекстШаблона, ИдентификаторПользователя);
КонецФункции

Функция ТекстВоВремяОбращенияКСервисуПроизошлаОшибка(ТекстОшибки)
	ТекстШаблона = НСтр("ru='Во время обращения к сервису произошла ошибка: %1'");
	Возврат СтрШаблон(ТекстШаблона, ТекстОшибки);
КонецФункции

Функция ТекстДанныеАутентификацииНеНайдены()
	ТекстШаблона = НСтр("ru='Данные аутентификации не найдены. Проверьте подключение к сервису.'");
	Возврат ТекстШаблона;
КонецФункции

Функция ТекстТаймаутАутентификации()
	ТекстШаблона = НСтр("ru='Таймаут проверки аутентификации. Попробуйте снова.'");
	Возврат ТекстШаблона;
КонецФункции

Функция ТекстВоВремяРегистрацииПриложенияПроизошлаОшибка(ТекстОшибки)
	ТекстШаблона = НСтр("ru='Во время регистрации приложения произошла ошибка:
		|%1
		|Проверьте аутентификационные данные и попробуйте снова.'");
	Возврат СтрШаблон(ТекстШаблона, ТекстОшибки);
КонецФункции

Функция ТекстСервисПринялНеВсеВыгружаемыеДанные(КоличествоВыгружено, КоличествоПринято)
	ТекстСообщения = НСтр("ru = 'Сервис прогнозирования принял данные частично. Выгружено: %1 Принято: %2'");
	Возврат СтрШаблон(ТекстСообщения, КоличествоВыгружено, КоличествоПринято);
КонецФункции

Функция ТекстСервисНеПринялДанные()
	ТекстШаблона = НСтр("ru='Сервис прогнозирования не принял выгружаемые данные.'");
	Возврат ТекстШаблона;
КонецФункции

Функция ТекстНевозможноСформироватьJSON(ЗаписываемыйОбъект, ТекстОшибки)
	ТекстШаблона = НСтр("ru='Невозможно сформировать тело запроса JSON. Записываемый объект: %1 Описание ошибки: %2'");
	Возврат СтрШаблон(ТекстШаблона, ЗаписываемыйОбъект, ТекстОшибки);
КонецФункции

Функция ТекстНевозможноПрочитатьJSON(ЧитаемыйОбъект)
	ТекстШаблона = НСтр("ru='Невозможно прочитать тело запроса JSON. Читаемый объект(первые 150 символов): %1'");
	ЧитаемыйОбъектСтрока = Лев(Строка(ЧитаемыйОбъект), 150);
	Возврат СтрШаблон(ТекстШаблона, ЧитаемыйОбъектСтрока);
КонецФункции

Функция ТекстОшибкиФормированияОбъектаДляВыгрузки()
	Возврат НСтр("ru='Произошла ошибка формирования тела объекта JSON.'");
КонецФункции

Функция ТекстОшибкиПроизошлоЗацикливание()
	Возврат НСтр("ru='Произошло зацикливание.'");
КонецФункции

Функция ТекстКоллекцияПродажПустая()
	ТекстОшибки = НСтр("ru='Коллекция продаж в сервисе прогнозирования пустая, работа сервиса невозможна.
		|Проверьте наличие продаж в информационной базе и установленные фильтры на выгрузку, после чего повторите выгрузку данных.'");
	Возврат ТекстОшибки;
КонецФункции

Функция ТекстОбнаруженоПовреждениеНастроек()
	ТекстОшибки = НСтр("ru='Обнаружено повреждение настроек, запись блокирована.'");
	Возврат ТекстОшибки;
КонецФункции

Функция ТекстПриПолученииДанныхПроизошлаОшибка()
	ТекстОшибки = НСтр("ru='Произошла ошибка при получении данных. Попробуйте еще раз позже.'");
	Возврат ТекстОшибки;
КонецФункции

Функция ТекстВыбраннаяПериодичностьНеПредусмотрена(Периодичность)
	ТекстШаблона = НСтр("ru='Выбранная периодичность не предусмотрена сервисом. Значение: %1'");
	Возврат СтрШаблон(ТекстШаблона, Периодичность);
КонецФункции

Функция ТекстНеНайденаНастройка(ИмяНастройки)
	ТекстШаблона = НСтр("ru='Не найдена настройка сервиса с именем %1'");
	Возврат СтрШаблон(ТекстШаблона, ИмяНастройки);
КонецФункции

Функция ТекстНеОтмеченаКВыгрузкеКолонкаКатегория()
	ТекстШаблона = НСтр("ru = 'Коллекция ""Категории товаров"" выгружена, но не используется.
	|Пожалуйста, отметьте к выгрузке реквизит ""Код категории"" в коллекции ""Товары"", или отключите выгрузку коллекции ""Категории товаров"".'");
	Возврат ТекстШаблона;
КонецФункции

Функция ТекстОжидаетсяПодключение()
	ТекстОшибки = НСтр("ru='Подключение к сервису прогнозирования в очереди. Попробуйте позже.'");
	Возврат ТекстОшибки;
КонецФункции

Функция ТекстНеПодключено()
	ТекстОшибки = НСтр("ru='Нет подключения к сервису прогнозирования. Проверьте авторизацию в помощнике подключения.'");
	Возврат ТекстОшибки;
КонецФункции

Функция ТекстОшибкиНеверныйЛогинПарольИТС()
	Возврат НСтр("ru = 'Неверный логин или пароль пользователя ИТС.'");
КонецФункции

Функция ТекстОшибкиНеУдалосьПолучитьМодульИнтернетПоддержкаПользователей()
	Возврат НСтр("ru = 'Не удалось получить модуль ""Интернет поддержка пользователей"". Обратитесь к администратору.'");
КонецФункции

Функция ТекстОшибкиНеУдалосьПолучитьТикет()
	Возврат НСтр("ru = 'Не удалось получить тикет.'");
КонецФункции

#КонецОбласти

#КонецОбласти
