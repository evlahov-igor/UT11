#Область ПрограммныйИнтерфейс

// Проверяет, что это не новый элемент справочника
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика:
// 		* Объект - СправочникОбъект -
// 	ИмяФормы - Строка - имя подчиненной формы
// 	ОповещениеПослеЗаписи - ОписаниеОповещения - Описание
// 	ТекстВопроса - Строка - текст вопроса
//
Процедура ПроверитьЧтоЭтоНеНовыйЭлемент(Форма, ИмяФормы, ОповещениеПослеЗаписи, ТекстВопроса = Неопределено) Экспорт
	
	// Проверим, что это не новый элемент справочника.
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		Если ТекстВопроса = Неопределено Тогда
			ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
			|Переход к ""%ИмяФормы%"" возможен только после записи данных.
			|Данные будут записаны.'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИмяФормы%", ИмяФормы);
		КонецЕсли;
		ПараметрыОповещения = Новый Структура("Оповещение, Форма", ОповещениеПослеЗаписи, Форма);
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьЧтоЭтоНеНовыйЭлементОбработкаОтвета", ЭтотОбъект, ПараметрыОповещения), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПослеЗаписи);
	
КонецПроцедуры

// Проверяет соответствие ИНН требованиям.
//
// Параметры:
//  ИНН                - Строка - проверяемый индивидуальный номер налогоплательщика.
//  Объект - СправочникОбъект.Организации - проверяемая организация.
//
Процедура ПроверитьИНН(ИНН, Объект) Экспорт
	//++ Локализация
	Перем ТекстСообщения;
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(ИНН) 
		И НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, 
			ЭтоЮрЛицо, 
			ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.ИНН",,);
		
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормыЭлемента

// Обработчик события ПослеЗаписи формы элемента справочника Организации
//
// Параметры:
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//  Форма           - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПослеЗаписи(ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация
	
	
	Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены = Ложь;
	Форма.ДанныеРегистрацийПФРИзменены = Ложь;
	
	//-- Локализация
КонецПроцедуры

// Обработчик события ПослеЗаписи формы элемента справочника Организации
//
// Параметры:
//  Отказ           - Булево - признак отказа.
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//  Форма           - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация
	Если Форма.ДанныеРегистрацийПФРИзменены Тогда
		ЗаполнитьЗначенияСвойств(Форма.Объект, Форма, "КодОрганаПФР, НаименованиеТерриториальногоОрганаПФР, РегистрационныйНомерПФР, ИПРегистрационныйНомерПФР");
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Обработчик события ОбработкаВыбора формы элемента справочника Организации
// 
// Параметры:
// 	ВыбранноеЗначение - Произвольный - Результат выбора в подчиненной форме.
// 	ИсточникВыбора    - Произвольный - Форма-источник события.
//  Форма             - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, Форма) Экспорт
	//++ Локализация
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Организации.Форма.ФормаНастройкиДокументооборота" И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ЗаполнитьЗначенияСвойств(Форма.Объект, ВыбранноеЗначение);
	КонецЕсли;
	
	//-- Локализация
КонецПроцедуры

// Обработчик события ОбработкаОповещения формы элемента справочника Организации
//
// Параметры:
//  ИмяСобытия - Строка -
//  Параметр - Произвольный -
//  Источник - Произвольный -
//  Форма - ФормаКлиентскогоПриложения -
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник, Форма) Экспорт
	//++ Локализация
	Если ИмяСобытия = "ЗавершеноРедактированиеРегистраций" Тогда
		МассивОбработчиков = Новый Массив;
		Если Параметр.ОткатитьИзменения Тогда
			Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены = Ложь;
			МассивОбработчиков.Добавить("ВосстановитьДанныеРегистрацийВНалоговыхОрганах");
		Иначе
			Форма.Модифицированность = Истина;
			Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены = Истина;
			Форма.РегистрацияВНалоговомОргане = Параметр.ОсновнаяРегистрация;
		КонецЕсли;
		МассивОбработчиков.Добавить("ЗаполнитьОписаниеРегистрацииВНалоговомОргане");
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, МассивОбработчиков, Истина);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Обработчик события ПриЗакрытии формы элемента справочника Организации
//
// Параметры:
//  ЗавершениеРаботы - Булево - признак завершения работы.
//  Форма - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПриЗакрытии(ЗавершениеРаботы, Форма) Экспорт
	//++ Локализация
	МассивОбработчиков = Новый Массив;
	Если НЕ ЗавершениеРаботы И Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены Тогда
		МассивОбработчиков.Добавить("ВосстановитьДанныеРегистрацийВНалоговыхОрганах");
	КонецЕсли;
	
	Если НЕ ЗавершениеРаботы И Форма.ДанныеРегистрацийПФРИзменены Тогда
		МассивОбработчиков.Добавить("ВосстановитьДанныеРегистрацийВПФР");
	КонецЕсли;
	Если МассивОбработчиков.Количество() > 0 Тогда
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, МассивОбработчиков, Истина);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Обработчик события ПриЗакрытии формы элемента справочника Организации
//
// Параметры:
//  Отказ - Булево - признак отказа.
//  ЗавершениеРаботы - Булево - признак завершения работы.
//  ТекстПредупреждения - Строка - текст предупреждения.
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//  Форма - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Форма) Экспорт
	//++ Локализация	
	Если ЗавершениеРаботы И (Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены ИЛИ Форма.ДанныеРегистрацийПФРИзменены) Тогда
		Отказ = Истина;
	КонецЕсли;
	//-- Локализация	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура Нажатие_Организации(Элемент, СтандартнаяОбработка, Форма) Экспорт
	//++ Локализация
	СтандартнаяОбработка = Ложь;
	Если Элемент.Имя = "ВидОбменаСКонтролирующимиОрганамиПредставление" Тогда
		ВидОбменаСКонтролирующимиОрганамиПредставлениеНажатие(Элемент, СтандартнаяОбработка, Форма);
	КонецЕсли;
	Если Элемент.Имя = "ОбменФСС" Тогда
		ОбменФССНажатие(Элемент, СтандартнаяОбработка, Форма);
	КонецЕсли;
	Если Элемент.Имя = "ОбменСЭДОФСС" Тогда
		ОбменСЭДОФССНажатие(Элемент, СтандартнаяОбработка, Форма);
	КонецЕсли;
	Если Элемент.Имя = "ОбменРАР" Тогда
		ОбменРАРНажатие(Элемент, СтандартнаяОбработка, Форма);
	КонецЕсли;
	Если Элемент.Имя = "ОбменФТС" Тогда
		ОбменФТСНажатие(Элемент, СтандартнаяОбработка, Форма);
	КонецЕсли;
	Если Элемент.Имя = "ОбменРПН" Тогда
		ОбменРПННажатие(Элемент, СтандартнаяОбработка, Форма);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

Процедура ОбработкаНавигационнойСсылкиФормы_Организации(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Форма) Экспорт
	//++ Локализация
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "НастроитьТаблицуПримененияЕНВД" Тогда
		ЗакрытиеФормыПрименениеЕНВД =  Новый ОписаниеОповещения("ЗакрытиеФормыПрименениеЕНВД", ЭтотОбъект, Новый Структура("Форма", Форма));
		ОткрытьФорму("Справочник.Организации.Форма.ФормаПрименениеЕНВД",
			Новый Структура("Организация", Форма.ГоловнаяОрганизация),
			Форма,,,,
			ЗакрытиеФормыПрименениеЕНВД,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьНастройкиСистемыНалогообложения" Тогда
		ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
			НСтр("ru = 'Настройки системы налогообложения'"),
			Новый ОписаниеОповещения("ОткрытьНастройкиСистемыНалогообложенияОбъектЗаписан", 
				ЭтотОбъект,
				Новый Структура("Форма", Форма)));
	КонецЕсли;
			
	Если НавигационнаяСсылкаФорматированнойСтроки = "НастроитьТаблицуПримененияПСН" Тогда
		ЗакрытиеФормыПрименениеПСН =  Новый ОписаниеОповещения("ЗакрытиеФормыПрименениеПСН", ЭтотОбъект, Новый Структура("Форма", Форма));
		ЗначениеОтбора = Новый Структура("Владелец", Форма.Объект.Ссылка);
		ОткрытьФорму("Справочник.Патенты.ФормаСписка",
			Новый Структура("Отбор", ЗначениеОтбора),
			Форма,,,,
			ЗакрытиеФормыПрименениеПСН,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьНастройкиУчетаУСН" Тогда
		ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
			НСтр("ru = 'Настройки учета УСН'"),
			Новый ОписаниеОповещения("ОткрытьНастройкиУчетаУСНОбъектЗаписан", 
				ЭтотОбъект,
				Новый Структура("Форма", Форма)));
	КонецЕсли;
	
	//-- Локализация
КонецПроцедуры

Процедура СкопироватьНастройкиЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Или Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура();
	ИмяСобытия = "ЗаписьНастроекНалоговУчетныхПолитик";
	Оповестить(ИмяСобытия, ПараметрыОповещения);
	
КонецПроцедуры

Процедура ПриИзмененииРеквизита(Элемент, Форма) Экспорт
	//++ Локализация
	Если Элемент.Имя = "ИНН"
		ИЛИ Элемент.Имя = "ИННИП" Тогда
		ИННПриИзменении(Элемент, Форма);
	КонецЕсли;
	Если Элемент.Имя = "КодОКВЭД"
		ИЛИ Элемент.Имя = "КодПоОКВЭДОбособленногоПодразделения"
		ИЛИ Элемент.Имя = "КодПоОКВЭДИндивидуальногоПредпринимателя" Тогда
		КодОКВЭДПриИзменении(Элемент, Форма);
	КонецЕсли;

	Если Элемент.Имя = "КодОКВЭД2"
		ИЛИ Элемент.Имя = "КодПоОКВЭД2ИндивидуальногоПредпринимателя"
		ИЛИ Элемент.Имя = "КодПоОКВЭД2ОбособленногоПодразделения" Тогда
		КодОКВЭД2ПриИзменении(Элемент, Форма);
	КонецЕсли;
	
	Если Элемент.Имя = "КрупнейшийНалогоплательщик" Тогда
		КрупнейшийНалогоплательщикПриИзменении(Элемент, Форма);
	КонецЕсли;
	Если Элемент.Имя = "ГоловнаяОрганизация" Тогда
		ГоловнаяОрганизацияПриИзменении(Элемент, Форма);
	КонецЕсли;
	Если Элемент.Имя = "ИндивидуальныйПредприниматель" Тогда
		ИндивидуальныйПредпринимательПриИзменении(Элемент, Форма);
	КонецЕсли;

	//-- Локализация
КонецПроцедуры

Процедура ОкончаниеВводаТекста_Организации(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка, Форма) Экспорт
	//++ Локализация
	Если Элемент.Имя = "КПП"
		ИЛИ Элемент.Имя = "КППОбособленногоПодразделения" Тогда
		
		ПриОкончанииВводаКПП(Текст, Форма);
	КонецЕсли;
	Если Элемент.Имя = "КодПоОКПО"
		ИЛИ Элемент.Имя = "КодПоОКПОИндивидуальногоПредпринимателя"
		ИЛИ Элемент.Имя = "КодПоОКПООбособленногоПодразделения" Тогда
		
		ПриОкончанииВводаКодПоОКПО(Текст, Форма);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

Процедура НачалоВыбора_Организации(Элемент, ДанныеВыбора, СтандартнаяОбработка, Форма) Экспорт
	//++ Локализация
	Если Элемент.Имя = "КодОКВЭД"
		ИЛИ Элемент.Имя = "КодПоОКВЭДОбособленногоПодразделения"
		ИЛИ Элемент.Имя = "КодПоОКВЭДИндивидуальногоПредпринимателя" Тогда
		КодОКВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Форма);
	КонецЕсли;

	Если Элемент.Имя = "КодОКВЭД2"
		ИЛИ Элемент.Имя = "КодПоОКВЭД2ИндивидуальногоПредпринимателя"
		ИЛИ Элемент.Имя = "КодПоОКВЭД2ОбособленногоПодразделения" Тогда
		КодОКВЭД2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Форма);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыЭлемента

Процедура ВыполнитьКомандуЛокализации(Команда, Форма) Экспорт
	//++ Локализация
	Если Команда.Имя = "ЗаявлениеНаПодключениеОткрытьМастер" Тогда
		ЗаявлениеНаПодключениеОткрытьМастер(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьПараметрыПФР" Тогда
		ОткрытьПараметрыПФР(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьПараметрыФСС" Тогда
		ОткрытьПараметрыФСС(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьПараметрыТФОМС" Тогда
		ОткрытьПараметрыТФОМС(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьПараметрыКлассификаторов" Тогда
		ОткрытьПараметрыКлассификаторов(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьПараметрыРасчетаЗарплаты" Тогда
		ОткрытьПараметрыРасчетаЗарплаты(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьПараметрыМестаРегистрации" Тогда
		ОткрытьПараметрыМестаРегистрации(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьКадровыйУчетИРасчетЗарплаты" Тогда
		ОткрытьКадровыйУчетИРасчетЗарплаты(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьБухучетИВыплатуЗарплаты" Тогда
		ОткрытьБухучетИВыплатуЗарплаты(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьВоинскийУчет" Тогда
		ОткрытьВоинскийУчет(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьРегистрациюВНалоговыхОрганах" Тогда
		ОткрытьРегистрациюВНалоговыхОрганах(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "УстановитьПорядокУплатыНалоговНаМестах" Тогда
		УстановитьПорядокУплатыНалоговНаМестах(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ЗаполнитьПоИНН" Тогда
		ЗаполнитьПоИНН(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ЗаявлениеНаПодключениеОткрытьСписок" Тогда
		ЗаявлениеНаПодключениеОткрытьСписок(Команда, Форма);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация
#Область ОбработчикиСобытийЭлементовШапкиФормы_Служебные

#Область ОбменыСГосОрганами

Процедура ВидОбменаСКонтролирующимиОрганамиПредставлениеНажатие(Элемент, СтандартнаяОбработка, Форма)
	
	Возврат;
	
КонецПроцедуры

Процедура ОбменФССНажатие(Элемент, СтандартнаяОбработка, Форма)
		
	Возврат;
КонецПроцедуры

Процедура ОбменСЭДОФССНажатие(Элемент, СтандартнаяОбработка, Форма)
	
	Возврат;
КонецПроцедуры

Процедура ОбменРАРНажатие(Элемент, СтандартнаяОбработка, Форма)
	
	Возврат;
КонецПроцедуры

Процедура ОбменРПННажатие(Элемент, СтандартнаяОбработка, Форма)
	
	Возврат;
КонецПроцедуры

Процедура ОбменФТСНажатие(Элемент, СтандартнаяОбработка, Форма)
	
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область Классификаторы

Процедура КодОКВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Форма)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора(Форма, "ОКВЭД");
	
КонецПроцедуры

Процедура КодОКВЭД2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Форма)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора(Форма, "ОКВЭД2");
	
КонецПроцедуры

Процедура КодОКВЭДПриИзменении(Элемент, Форма)
	
	КодКлассификатораПриИзменении(Форма, "ОКВЭД");
	
КонецПроцедуры

Процедура КодОКВЭД2ПриИзменении(Элемент, Форма)
	
	КодКлассификатораПриИзменении(Форма, "ОКВЭД2");
	
КонецПроцедуры

#КонецОбласти

#Область НалогиУчетныеПолитики

Процедура ОткрытьНастройкиСистемыНалогообложенияОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ОткрытьФорму("РегистрСведений.НастройкиСистемыНалогообложения.ФормаЗаписи",
		Новый Структура("Организация", Форма.Объект.Ссылка),
		Форма,,,,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура ОткрытьНастройкиУчетаУСНОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ОткрытьФорму("РегистрСведений.НастройкиУчетаУСН.ФормаЗаписи",
		Новый Структура("Организация", Форма.Объект.Ссылка),
		Форма,,,,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

#КонецОбласти

Процедура ИННПриИзменении(Элемент, Форма)
	
	Объект = Форма.Объект;
	Если СтрДлина(Объект.ИНН) >= 4 
		И ПустаяСтрока(Объект.КПП) Тогда
		
		Объект.КПП = Лев(Объект.ИНН, 4) + "01001";
		
	КонецЕсли;
	
	ПартнерыИКонтрагентыЛокализацияКлиентСервер.УстановитьДоступностьКнопкиЗаполнитьПоИНН(Форма,
		Форма.Объект.ЮрФизЛицо,
		Форма.Объект.ИНН,
		Форма.Объект.ОбособленноеПодразделение,
		Форма.НастройкиПодключенияКСервисуИППЗаданы,
		Ложь);
	
КонецПроцедуры

Процедура КрупнейшийНалогоплательщикПриИзменении(Элемент, Форма)
	
	Форма.Элементы.КодНалоговогоОрганаПолучателя.Доступность = Форма.Объект.КрупнейшийНалогоплательщик;
	
	Если НЕ Форма.Объект.КрупнейшийНалогоплательщик Тогда
		Форма.Объект.КодНалоговогоОрганаПолучателя = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ИндивидуальныйПредпринимательПриИзменении(Элемент, Форма)
	ПараметрыОбработки = Новый Структура();
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.ИндивидуальныйПредприниматель) Тогда
		Форма.Объект.ИНН = "";
		ПараметрыОбработки.Вставить("ИмяПроцедуры", "УправлениеФормойНаСервере")
	Иначе
		ОрганизацииВызовСервераЛокализация.ИзменитьИНН(Форма.Объект.ИндивидуальныйПредприниматель);
	КонецЕсли;
	
	ФИОФизическогоЛица = ОрганизацииВызовСервераЛокализация.ПолучитьФИОФизическогоЛица(Форма.Объект.ИндивидуальныйПредприниматель);
	
	Форма.ФИОИндивидуальногоПредпринимателя	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3",
		ФИОФизическогоЛица.Фамилия, ФИОФизическогоЛица.Имя, ФИОФизическогоЛица.Отчество);
		
	Форма.Объект.НаименованиеСокращенное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ИП %1 %2 %3'"),
		ФИОФизическогоЛица.Фамилия,
		?(ПустаяСтрока(ФИОФизическогоЛица.Имя), "", Лев(ФИОФизическогоЛица.Имя, 1) + "."),
		?(ПустаяСтрока(ФИОФизическогоЛица.Отчество), "", Лев(ФИОФизическогоЛица.Отчество, 1) + "."));
		
	Форма.Объект.НаименованиеПолное	= "";
	ОбщегоНазначенияУТКлиент.ПродолжитьИзменениеРеквизита(Форма, "НаименованиеСокращенное", Истина, ПараметрыОбработки);
КонецПроцедуры

Процедура ГоловнаяОрганизацияПриИзменении(Элемент, Форма)
	Форма.Объект.ИНН = ОрганизацииВызовСервераЛокализация.ИзменитьИНН(Форма.Объект.ГоловнаяОрганизация);
	ПараметрыОбработки = Новый Структура("ИмяПроцедуры", "УправлениеФормойНаСервере");
	ОбщегоНазначенияУТКлиент.ПродолжитьИзменениеРеквизита(Форма,Элемент.Имя, Истина, ПараметрыОбработки);
КонецПроцедуры

Процедура ЗакрытиеФормыПрименениеЕНВД(Результат, ДополнительныеПараметры) Экспорт
	Форма =  ДополнительныеПараметры.Форма;
	Если Результат = Истина Тогда
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, "НастроитьТаблицуПримененияЕНВД", Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ЗакрытиеФормыПрименениеПСН(Результат, ДополнительныеПараметры) Экспорт
	Форма =  ДополнительныеПараметры.Форма;
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, "НастроитьТаблицуПримененияПСН", Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Контрагенты_Служебные

Процедура ЗаявлениеНаПодключениеОткрытьМастер(Команда, Форма)
	Возврат;
КонецПроцедуры

Процедура ЗаявлениеНаПодключениеОткрытьСписок(Команда, Форма)
	
	Возврат;

КонецПроцедуры

Процедура ОткрытьПараметрыПФР(Команда, Форма)
	
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

Процедура ОткрытьПараметрыПФРОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

Процедура ОткрытьПараметрыПФРЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

Процедура ОткрытьПараметрыФСС(Команда, Форма)
		
	Возврат;

КонецПроцедуры

Процедура ОткрытьПараметрыТФОМС(Команда, Форма)
	
	Возврат;

КонецПроцедуры

Процедура ОткрытьПараметрыКлассификаторов(Команда, Форма)
	
	Возврат;

КонецПроцедуры

Процедура ОткрытьПараметрыРасчетаЗарплаты(Команда, Форма)
	
	Возврат;

КонецПроцедуры

Процедура ОткрытьПараметрыМестаРегистрации(Команда, Форма)
	
	Возврат;

КонецПроцедуры

Процедура ОткрытьКадровыйУчетИРасчетЗарплаты(Команда, Форма)
	
	Возврат;
КонецПроцедуры

Процедура ОткрытьБухучетИВыплатуЗарплаты(Команда, Форма)
	Возврат;
КонецПроцедуры

Процедура ОткрытьВоинскийУчет(Команда, Форма)
	Возврат;
КонецПроцедуры

Процедура ОткрытьРегистрациюВНалоговыхОрганах(Команда, Форма)
	
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Налоговые органы'"),
		Новый ОписаниеОповещения("ОткрытьРегистрациюВНалоговыхОрганахОбъектЗаписан", ЭтотОбъект, Новый Структура("Форма", Форма)));
			
КонецПроцедуры

Процедура ОткрытьРегистрациюВНалоговыхОрганахОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт 
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Форма.РегистрацииСохраненныеЗначения) Тогда
		Форма.РегистрацииСохраненныеЗначения = ОрганизацииВызовСервераЛокализация.РегистрацииВНалоговыхОрганахВХранилище(Форма.Объект.Ссылка, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Ссылка);
	СтруктураПараметров.Вставить("ОсновнаяРегистрация", Форма.РегистрацияВНалоговомОргане);
	СтруктураПараметров.Вставить("ОткрытиеИзОрганизации", Истина);
	
	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.Форма.ФормаНастройкиРегистраций", СтруктураПараметров, Форма);

КонецПроцедуры


Процедура УстановитьПорядокУплатыНалоговНаМестах(Команда, Форма)
	
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Порядку уплаты авансов по налогам'"),
		Новый ОписаниеОповещения("ОткрытьПорядокУплатыАвансовПоНалогам", ЭтотОбъект, Новый Структура("Форма", Форма)));
	
КонецПроцедуры

Процедура ОткрытьПорядокУплатыАвансовПоНалогам(Результат, ДополнительныеПараметры) Экспорт 
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьПоИНН(Команда, Форма)
	
	ИННЗаполненКорректно = Истина;
	
	ТекстСообщения = "";
	Если ПустаяСтрока(Форма.Объект.ИНН) Тогда
		ИННЗаполненКорректно = Ложь;
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Форма.Объект.ИНН, 
		ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(Форма.Объект.ЮрФизЛицо),
		ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.ИНН",,);
			
	КонецЕсли;
	
	Если ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно, Форма) Тогда
		Форма.ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
		РеквизитыКонтрагента = ПартнерыИКонтрагентыЛокализацияВызовСервера.ДанныеКонтрагентаПоИНН(
		                       ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(Форма.Объект.ЮрФизЛицо),
		                       Форма.Объект.ИНН,
		                       Форма.ФоновоеЗаданиеИдентификатор);
		
		ВыполнитьЗаполнениеРеквизитовПоИНН(Форма,РеквизитыКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКлассификаторами

Процедура ВыбратьКодИзКлассификатора(Форма, ИмяКлассификатора, Комментарий = "", Знач ИмяРеквизитаКод = "")
 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта",      "Справочник");
	ПараметрыФормы.Вставить("НазваниеОбъекта", "Организации");
	ПараметрыФормы.Вставить("НазваниеМакета",  ИмяКлассификатора);
	ПараметрыФормы.Вставить("ТекущийПериод",   Дата(2000, 1, 1)); // дата - любая заполненная, для целей получения кодов классификаторов не играет роли.
	ИмяРеквизитаКод = ?(НЕ ЗначениеЗаполнено(ИмяРеквизитаКод), "Код" + ИмяКлассификатора, ИмяРеквизитаКод);
	ПараметрыФормы.Вставить("ТекущийКод",      Форма.Объект[ИмяРеквизитаКод]);
	ПараметрыФормы.Вставить("Комментарий",     Комментарий);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКлассификатора", ИмяКлассификатора);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаКод",   ИмяРеквизитаКод);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаНаименование", "Наименование" + Сред(ИмяРеквизитаКод, 4));
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьКодИзКлассификатораЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКода", ПараметрыФормы,,,,, ОповещениеОЗакрытии);
		
КонецПроцедуры

Процедура ВыбратьКодИзКлассификатораЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Форма = ДопПараметры.Форма;
	Форма.Объект[ДопПараметры.ИмяРеквизитаКод] = РезультатВыбора.Код;
	Форма.Объект[ДопПараметры.ИмяРеквизитаНаименование] = РезультатВыбора.Наименование;
	
КонецПроцедуры

Процедура КодКлассификатораПриИзменении(Форма, ИмяКлассификатора, Знач ИмяРеквизитаКод = "")
	
	ИмяРеквизитаКод = ?(НЕ ЗначениеЗаполнено(ИмяРеквизитаКод), "Код" + ИмяКлассификатора, ИмяРеквизитаКод);
	ИмяРеквизитаНаименование = "Наименование" + Сред(ИмяРеквизитаКод, 4);
	
	// Исправление возможной опечатки в разделителе
	Форма.Объект[ИмяРеквизитаКод] = СтрЗаменить(Форма.Объект[ИмяРеквизитаКод], ",", ".");
	
	Форма.Объект[ИмяРеквизитаНаименование] = ОрганизацииВызовСервераЛокализация.НаименованиеКодаКлассификатора(ИмяКлассификатора, Форма.Объект[ИмяРеквизитаКод]);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРеквизитовПоИНН

Функция ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно, Форма)

	Возврат ПартнерыИКонтрагентыЛокализацияКлиентСервер.ЗаполнениеРеквизитовПоДаннымИННВозможно(
	               ИННЗаполненКорректно,
	               Форма.НастройкиПодключенияКСервисуИППЗаданы,
	               Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"),
	               Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель"),
	               Форма.Объект.ОбособленноеПодразделение); 

КонецФункции

Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(Форма, РеквизитыКонтрагента, ЗаполнятьИНН = Ложь)
	
	Если РеквизитыКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		
		ПартнерыИКонтрагентыЛокализацияКлиент.ПоказатьПользователюОшибкуПолученияРеквизитовКонтрагентаПоИНН(РеквизитыКонтрагента.ОписаниеОшибки);
		
	Иначе
		
		Если РеквизитыКонтрагента.Свойство("ЭтоОКВЭД2") И ТипЗнч(РеквизитыКонтрагента.ЭтоОКВЭД2) = Тип("Булево")
			И РеквизитыКонтрагента.ЭтоОКВЭД2 Тогда
			РеквизитыКонтрагента.Вставить("КодОКВЭД2", РеквизитыКонтрагента.КодОКВЭД);
			РеквизитыКонтрагента.КодОКВЭД = Неопределено;
		КонецЕсли;
		
		РезультатСравнения = ПартнерыИКонтрагентыЛокализацияКлиент.РезультатСравненияПолученныхДанныхКонтрагентаСИмеющимися(РеквизитыКонтрагента,
		                                                                                                         ДанныеОбъектаДляСравнения(Форма),
		                                                                                                         ЗаполнятьИНН);
																												 
		Если НЕ РезультатСравнения.ЕстьИзменения ИЛИ НЕ РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах Тогда
			
			РезультатПоДопРеквизитам = РезультатСравненияПолученныхДанныхОрганизацииСИмеющимися(РеквизитыКонтрагента, Форма);
			
			РезультатСравнения.ЕстьИзменения = РезультатСравнения.ЕстьИзменения ИЛИ РезультатПоДопРеквизитам.ЕстьИзменения;
			РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах = РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах ИЛИ РезультатПоДопРеквизитам.ЕстьИзмененияВЗаполненныхРеквизитах;
			
		КонецЕсли;
		
		Если РезультатСравнения.ЕстьИзменения Тогда
			
			Если РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах
				И ЗначениеЗаполнено(Форма.Объект.ВерсияДанных)
				Тогда 
				
				ОписаниеОповещенияПерезаполнить = Новый ОписаниеОповещения("ЗаполнениеРеквизитовПоИННЗавершение",
				                                                           ЭтотОбъект,
				                                                           Новый Структура("РеквизитыКонтрагента, Форма", РеквизитыКонтрагента, Форма));
				ТекстВопроса = НСтр("ru = 'Перезаполнить реквизиты контрагента на основании данных ЕГРЮЛ\ЕГРИП?'");
				ПоказатьВопрос(ОписаниеОповещенияПерезаполнить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Иначе
				
				ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента, Форма);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнениеРеквизитовПоИННЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(ДополнительныеПараметры.РеквизитыКонтрагента, ДополнительныеПараметры.Форма);
		
	КонецЕсли;

КонецПроцедуры

Функция РезультатСравненияПолученныхДанныхОрганизацииСИмеющимися(РеквизитыКонтрагента, Форма)
	Перем ЗначениеОбъекта;
	
	РезультатСравнения = Новый Структура("ЕстьИзменения,ЕстьИзмененияВЗаполненныхРеквизитах",Ложь,Ложь);
	
	ДанныеОбъектаДляСравнения = Новый Структура;
	
	СопоставлениеРеквизитовСравнения = СопоставлениеРеквизитовСравнения(Форма);
	
	Для каждого ЭлементИмя Из СопоставлениеРеквизитовСравнения Цикл
		ДанныеОбъектаДляСравнения.Вставить(ЭлементИмя.Ключ, Форма.Объект[ЭлементИмя.Ключ]);
	КонецЦикла; 
	
	Для каждого ЭлементСопоставления Из СопоставлениеРеквизитовСравнения Цикл
		
		Если НРег(ЭлементСопоставления.Ключ) = НРег("СвидетельствоСерияНомер") Тогда
			Форма.Объект.Свойство("СвидетельствоСерияНомер",ЗначениеОбъекта);
			ДанныеКонтрагента = СокрЛП(""  + ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоОРегистрации.Серия") +" "
											+ ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоОРегистрации.Номер")
										);
			Если ЗначениеОбъекта <> ДанныеКонтрагента Тогда 
				РезультатСравнения.ЕстьИзменения = Истина;
				Если ЗначениеЗаполнено(ЗначениеОбъекта) Тогда
					РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
					
					Возврат РезультатСравнения;
					
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		
		ЗначениеРеквизитаКонтрагента = ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,ЭлементСопоставления.Значение);
		
		Если Форма.Объект.Свойство(ЭлементСопоставления.Ключ,ЗначениеОбъекта) И ЗначениеОбъекта <> ЗначениеРеквизитаКонтрагента Тогда
			
			//пустые значения локальное и внешнее могут казаться разнотипными - это не может быть признаком изменения значения
			Если НЕ ЗначениеЗаполнено(ЗначениеОбъекта) И НЕ ЗначениеЗаполнено(ЗначениеРеквизитаКонтрагента) Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатСравнения.ЕстьИзменения = Истина;
			
			Если ЗначениеЗаполнено(ЗначениеОбъекта) Тогда
				
				РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
				
				Возврат РезультатСравнения;
				
			КонецЕсли;
		
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если ДанныеОбъектаДляСравнения.Свойство("СвидетельствоСерияНомер",ЗначениеОбъекта) Тогда
		
		ДанныеКонтрагента = "" + ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоОРегистрации.Серия") +" "
								+ ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоОРегистрации.Номер");
		Если ЗначениеОбъекта <> ДанныеКонтрагента Тогда 
			РезультатСравнения.ЕстьИзменения = Истина;
			Если ЗначениеЗаполнено(ЗначениеОбъекта) Тогда
				РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
				
				Возврат РезультатСравнения;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатСравнения;

КонецФункции // РезультатСравненияПолученныхДанныхОрганизацииСИмеющимися()

Функция ДанныеОбъектаДляСравнения(Форма)
	Объект = Форма.Объект;
	ДанныеДляСравнения = ПартнерыИКонтрагентыЛокализацияКлиент.ИнициироватьСтруктураДанныхДляСравнения();
	ЗаполнитьЗначенияСвойств(ДанныеДляСравнения, Объект, "КПП, ИНН, Наименование");
	ДанныеДляСравнения.НаименованиеСокращенное = Объект.НаименованиеПолное;
	
	ДанныеКонтактнойИнформации = ПартнерыИКонтрагентыКлиент.ДанныеСтрокиКонтактнойИнформацииПоВиду(
	                                      Форма,
	                                      ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации"));
	Если ДанныеКонтактнойИнформации <> Неопределено Тогда
		ДанныеДляСравнения.Телефон = ДанныеКонтактнойИнформации.Представление;
	КонецЕсли;
	
	ДанныеКонтактнойИнформации = ПартнерыИКонтрагентыКлиент.ДанныеСтрокиКонтактнойИнформацииПоВиду(
	                                      Форма,
	                                      ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
	Если ДанныеКонтактнойИнформации <> Неопределено Тогда
		ДанныеДляСравнения.ЮридическийАдрес = ДанныеКонтактнойИнформации.Представление;
	КонецЕсли;
	
	Возврат ДанныеДляСравнения;

КонецФункции 

// Возвращает сопоставление локальных реквизитов объекта и данных полученных из ЕГРН
// заполнению подлежат только реквизиты специфичные для справочника Организации, и размещаемые непосредственно в нем
//
// Возвращаемое значение:
// Структура - 	Ключ - локальное имя реквизита
//				Значение - путь к реквизиту данных ЕГРН (возможно через ".")
Функция СопоставлениеРеквизитовСравнения(Форма)
	
	Результат = Новый Структура;
	
	ПрефиксРеквизита = "";
	Если Форма.ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		ПрефиксРеквизита = "ИП";
		
		Результат.Вставить("СвидетельствоДатаВыдачи","РегистрацияВНалоговомОргане.ДатаРегистрации");
		Результат.Вставить(ПрефиксРеквизита+"РегистрационныйНомерПФР","РегистрацияВПенсионномФонде.РегистрационныйНомерПФР");
		Результат.Вставить("СвидетельствоСерияНомер");	//значение этого реквизита конкатенируется из двух:  РегистрацияВНалоговомОргане.Серия и РегистрацияВНалоговомОргане.Номер
		
	КонецЕсли;
	
	Результат.Вставить("ДатаРегистрации","ДатаРегистрации");
	Результат.Вставить("КодОКВЭД","КодОКВЭД");
	Результат.Вставить("КодОКВЭД2","КодОКВЭД2");
	
	Результат.Вставить("КодПоОКАТО","РегистрацияВНалоговомОргане.ОКАТО");
	Результат.Вставить("КодНалоговогоОргана","РегистрацияВНалоговомОргане.Код");
	Результат.Вставить("НаименованиеНалоговогоОргана","РегистрацияВНалоговомОргане.Наименование");
	
	
	Результат.Вставить("КодОрганаПФР","РегистрацияВПенсионномФонде.КодОрганаПФР");
	Результат.Вставить("НаименованиеТерриториальногоОрганаПФР","РегистрацияВПенсионномФонде.НаименованиеОрганаПФР");
	
	Результат.Вставить(ПрефиксРеквизита+"КодПодчиненностиФСС","РегистрацияВФСС.КодПодчиненности");
	Результат.Вставить("НаименованиеТерриториальногоОрганаФСС","РегистрацияВФСС.НаименованиеОрганаФСС");
	Результат.Вставить(ПрефиксРеквизита+"РегистрационныйНомерФСС","РегистрацияВФСС.РегистрационныйНомерФСС");
	
	Возврат Результат;
	
КонецФункции // СопоставлениеРеквизитовСравнения()

Процедура ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента, Форма)
	
	Если Форма.ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ОтложеннаяИнициализация
		И НЕ Форма.ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		ДополнительныеПараметрыОбработки = Новый Структура();
		ДополнительныеПараметрыОбработки.Вставить("ИмяПроцедуры", "КонтактнаяИнформацияПриСменеСтраницы");
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, , Истина, ДополнительныеПараметрыОбработки);
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента, "ИНН, Наименование");
	Если РеквизитыКонтрагента.Свойство("КПП") Тогда
		Если РеквизитыКонтрагента.КПП <> Объект.КПП Тогда
			Объект.КПП = РеквизитыКонтрагента.КПП;
		КонецЕсли;
	КонецЕсли;

	Если РеквизитыКонтрагента.Свойство("РегистрационныйНомер") Тогда
		Объект.ОГРН = РеквизитыКонтрагента.РегистрационныйНомер;
	КонецЕсли;
	
	Если Объект.НаименованиеПолное <> РеквизитыКонтрагента.НаименованиеСокращенное Тогда
		Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") Тогда
		ПартнерыИКонтрагентыКлиент.ЗаполнитьЭлементКонтактнойИнформации(Форма,
		                                                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации"),
		                                                                РеквизитыКонтрагента.Телефон);
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") Тогда
		
		
		ПартнерыИКонтрагентыКлиент.ЗаполнитьЭлементКонтактнойИнформации(Форма,
		                                                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"),
		                                                                РеквизитыКонтрагента.ЮридическийАдрес);
		
		ПартнерыИКонтрагентыКлиент.ЗаполнитьИсториюАдресов(Форма, РеквизитыКонтрагента);
	КонецЕсли;
	
	// Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП
	
	СтруктураРеквизитовФормыПФР = Новый Структура("КодОрганаПФР,НаименованиеТерриториальногоОрганаПФР,РегистрационныйНомерПФР,ИПРегистрационныйНомерПФР");
	
	СопоставлениеРеквизитовСравнения = СопоставлениеРеквизитовСравнения(Форма);
	Для каждого ЭлементСопоставления Из СопоставлениеРеквизитовСравнения Цикл
		РеквизитКонтрагента = ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,ЭлементСопоставления.Значение);
		Если ЗначениеЗаполнено(РеквизитКонтрагента) И Объект[ЭлементСопоставления.Ключ] <> РеквизитКонтрагента Тогда
			Объект[ЭлементСопоставления.Ключ] = РеквизитКонтрагента;

			Если СтруктураРеквизитовФормыПФР.Свойство(ЭлементСопоставления.Ключ) Тогда
				Форма[ЭлементСопоставления.Ключ] = РеквизитКонтрагента;
			КонецЕсли;

		КонецЕсли; 
		
	КонецЦикла; 
	
	
	Если СопоставлениеРеквизитовСравнения.Свойство("СвидетельствоСерияНомер") Тогда
		Объект["СвидетельствоСерияНомер"] = "" 	+ ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоОРегистрации.Серия") +" "
												+ ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоОРегистрации.Номер");
	КонецЕсли;
	// Конец Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП
	
	ОрганизацииКлиентСерверЛокализация.УправлениеДоступностью(Форма);
	Форма.Модифицированность = Истина;
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, "ЗаполнитьОписанияПараметров", Истина);
	
КонецПроцедуры

Функция ПолучитьРеквизитКонтрагента(Знач РеквизитыКонтрагента, Знач ПутьРеквизита)
	Перем ЗначениеШага;
	
	ШагиПути = СтрРазделить(ПутьРеквизита,".",Ложь);
	КоличествоШагов = ШагиПути.Количество();
	
	Если КоличествоШагов = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ РеквизитыКонтрагента.Свойство(ШагиПути[0],ЗначениеШага) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КоличествоШагов > 1 И ЗначениеЗаполнено(ЗначениеШага) Тогда
		ШагиПути.Удалить(0);
		
		Возврат ПолучитьРеквизитКонтрагента(ЗначениеШага,СтрСоединить(ШагиПути,"."));
		
	КонецЕсли; 
	
	Возврат ЗначениеШага;
	
КонецФункции // ПолучитьРеквизитКонтрагента()

#КонецОбласти

#Область МетодыДляОбработчиковСобытийФормы

Процедура ПриОкончанииВводаКодПоОКПО(ТекстРедактирования, Форма)
	
	Перем ТекстСообщения;
	ОчиститьСообщения();
	
	ЭтоЮрЛицо = Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	Если НЕ ПустаяСтрока(ТекстРедактирования) 
		И НЕ РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(ТекстРедактирования, 
			ЭтоЮрЛицо,
			ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.КодПоОКПО",,);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОкончанииВводаКПП(ТекстРедактирования, Форма)
	
	Перем ТекстСообщения;
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(ТекстРедактирования)
		И НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(ТекстРедактирования, ТекстСообщения) Тогда
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.КПП",,);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
//-- Локализация

#Область ПрочиеСлужебныеМетоды

Процедура ПроверитьЧтоЭтоНеНовыйЭлементОбработкаОтвета(КодОтвета, ДополнительныеПараметры) Экспорт
	
	Если КодОтвета = КодВозвратаДиалога.ОК Тогда 
		Форма = ДополнительныеПараметры.Форма; // РасширениеУправляемойФормыДляДокумента - 
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("НеЗакрыватьФорму", Истина);
		
		ЭлементЗаписан = Форма.Записать(ПараметрыЗаписи);
		
		Если Не ЭлементЗаписан Тогда
			Возврат;
		КонецЕсли;
		
		Оповещение = ДополнительныеПараметры.Оповещение;
		
		ВыполнитьОбработкуОповещения(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоступныеРегистрыНалоговУчетныхПолитик(МассивРегистров) Экспорт
	//++ Локализация
	МассивРегистров.Добавить("НастройкиСистемыНалогообложения");
	МассивРегистров.Добавить("УчетнаяПолитикаБухУчета");
	МассивРегистров.Добавить("НастройкиУчетаНалогаНаПрибыль");
	МассивРегистров.Добавить("НастройкиУчетаУСН");
	МассивРегистров.Добавить("СтавкиНалогаНаИмущество");
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#КонецОбласти
