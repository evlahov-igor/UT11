
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	Если Не ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейРФ") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками") Тогда
		ДанныеЗаполнения.Вставить("ИспользоватьПрямойОбменСБанком", Истина);
		ДанныеЗаполнения.Вставить("ИспользоватьОбменСБанком", Ложь);
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	ТекстОшибки = "";
	Если Не Объект.ИностранныйБанк
		И Не ДенежныеСредстваКлиентСерверЛокализация.ПроверитьКорректностьНомераСчета(Объект.НомерСчета,, ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект, "НомерСчета",, Отказ);
	КонецЕсли;
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Дополнительно = Новый Структура;
	
	НастройкиПолей = ДенежныеСредстваСервер.ИнициализироватьНастройкиПолейФормы();
	НастройкиПолейФормы(НастройкиПолей);
	СвойстваЭлементов = ДенежныеСредстваКлиентСервер.СвойстваЭлементовФормы(Объект, НастройкиПолей,,, Дополнительно);
	ДенежныеСредстваСервер.ОтключитьПроверкуЗаполненияРеквизитовОбъекта(СвойстваЭлементов, НепроверяемыеРеквизиты);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПередЗаписью(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - СправочникОбъект - Обрабатываемый объект
//  ОбъектКопирования - СправочникОбъект - Исходный справочник, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//++ Локализация

// Определяет свойства полей формы в зависимости от данных
//
// Возвращаемое значение:
//    ТаблицаЗначений - таблица с колонками Поля, Условие, Свойства.
//
Процедура НастройкиПолейФормы(Настройки) Экспорт
	
	Финансы = ФинансоваяОтчетностьСервер;

	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГосударственныйКонтракт");
	Финансы.НовыйОтбор(Элемент.Условие, "ОтдельныйСчетГОЗ", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Элемент.Свойства.Вставить("Доступность");
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ОтдельныйСчетГОЗ");
	Элемент.Поля.Добавить("ГосударственныйКонтракт");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.СчетФизЛица", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГруппаГосударственныеКонтракты");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ОтдельныйСчетГОЗ");
	Элемент.Поля.Добавить("ГосударственныйКонтракт");
	Финансы.НовыйОтбор(Элемент.Условие, "ТипСчета", Перечисления.ТипыБанковскихСчетов.Транзитный);
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЗаголовокТранзитныйСчет");
	Элемент.Поля.Добавить("ВвестиТранзитныйСчет");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ТранзитныйСчетЗадан", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "ТипСчета", Перечисления.ТипыБанковскихСчетов.Расчетный);
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьВалютныеПлатежи", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ТранзитныйСчет");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ТранзитныйСчетЗадан", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "ТипСчета", Перечисления.ТипыБанковскихСчетов.Расчетный);
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьВалютныеПлатежи", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	// Печать платежных поручений
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ТекстКорреспондента");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьТекстКорреспондента", Истина);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ВариантВыводаМесяца");
	Финансы.НовыйОтбор(Элемент.Условие, "ИностранныйБанк", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ВыводитьСуммуБезКопеек");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйСчет", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	// Обмен с банком
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РежимОбменаКлиентБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "ОбменСБанкомВключен", Истина);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РежимОбменаПрямойОбмен");
	Финансы.НовыйОтбор(Элемент.Условие, "ОбменСБанкомВключен", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "РучноеИзменениеРеквизитовБанка", Ложь);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ДекорацияПояснениеИспользованиеПрямогоОбменаДаннымиСБанком");
	Элемент.Поля.Добавить("ДекорацияОтступИспользованиеПрямогоОбменаДаннымиСБанком");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ДиректБанкНастроен", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ДекорацияСоглашениеЭД");
	Элемент.Поля.Добавить("ДекорацияДобавитьСоглашениеЭД");
	Элемент.Поля.Добавить("ДекорацияНетПравСоглашениеЭД");
	Финансы.НовыйОтбор(Элемент.Условие, "ОбменСБанкомВключен", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "ИспользоватьПрямойОбменСБанком", Истина);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БИКБанка");
	Финансы.НовыйОтбор(Элемент.Условие, "СтранаБанка", Справочники.СтраныМира.Россия);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'БИК'"));
	
	ДенежныеСредстваСерверЛокализация.НастройкиЭлементовБанков(Настройки);
	
КонецПроцедуры
//-- Локализация

#КонецОбласти
