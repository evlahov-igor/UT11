#Область ПрограммныйИнтерфейс

// См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииИспользуемыхТиповЭлектронныхДокументов.
Процедура ПриОпределенииИспользуемыхТиповЭлектронныхДокументов(АктуальныеТипы) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	// Для обмена по форматам ФНС.
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.ТоварнаяНакладная);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.АктВыполненныхРабот);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.СчетФактура);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.КорректировочныйСчетФактура);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.СоглашениеОбИзмененииСтоимости);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.АктНаПередачуПрав);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.УПД);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.УКД);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.АктОРасхождениях);
	
	// Для обмена по форматам CML 2.
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.КаталогТоваров);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.ЗаказТовара);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.ОтветНаЗаказ);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.СчетНаОплату);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.ПрайсЛист);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.ОтчетОПродажахКомиссионногоТовара);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.ОтчетОСписанииКомиссионногоТовара);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.ЗапросКоммерческихПредложений);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.КоммерческоеПредложение);

	// Для обмена между организациями
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.ПередачаТоваровМеждуОрганизациями);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(АктуальныеТипы, ТипыДокументов.ВозвратТоваровМеждуОрганизациями);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПодготовитьСтруктуруОбъектовКомандЭДО.
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Исходящие.Добавить("Документ.РеализацияТоваровУслуг");
	СоставКомандЭДО.Исходящие.Добавить("Документ.РеализацияУслугПрочихАктивов");
	СоставКомандЭДО.Исходящие.Добавить("Документ.АктВыполненныхРабот");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактураВыданный");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактураВыданныйАванс");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактураКомиссионеру");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказКлиента");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетНаОплатуКлиенту");
	СоставКомандЭДО.Исходящие.Добавить("Документ.КоммерческоеПредложениеКлиенту");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ОтчетКомитенту");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ОтчетКомитентуОСписании");
	СоставКомандЭДО.Исходящие.Добавить("Документ.КорректировкаРеализации");
	СоставКомандЭДО.Исходящие.Добавить("Обработка.ЖурналДокументовЗакупки");	
	СоставКомандЭДО.Исходящие.Добавить("Обработка.ЖурналДокументовПродажи");
	СоставКомандЭДО.Исходящие.Добавить("Обработка.ЖурналДокументовНДС");
	СоставКомандЭДО.Исходящие.Добавить("Обработка.ЖурналДокументовОтчетыКомитентам");	
	СоставКомандЭДО.Исходящие.Добавить("Документ.АктОРасхожденияхПослеПриемки");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ВозвратТоваровПоставщику");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ВыкупТоваровХранителем");
	
	СоставКомандЭДО.Входящие.Добавить("Документ.ПриобретениеТоваровУслуг");
	СоставКомандЭДО.Входящие.Добавить("Документ.ПриобретениеУслугПрочихАктивов");
	СоставКомандЭДО.Входящие.Добавить("Документ.ВозвратТоваровОтКлиента");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураПолученный");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураПолученныйАванс");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураКомитента");
	СоставКомандЭДО.Входящие.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.Входящие.Добавить("Документ.ЗаказКлиента");
	СоставКомандЭДО.Входящие.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
	СоставКомандЭДО.Входящие.Добавить("Документ.РегистрацияЦенНоменклатурыПоставщика");
	СоставКомандЭДО.Входящие.Добавить("Документ.ОтчетКомиссионера");
	СоставКомандЭДО.Входящие.Добавить("Документ.ОтчетКомиссионераОСписании");
	СоставКомандЭДО.Входящие.Добавить("Документ.КорректировкаПриобретения");
	СоставКомандЭДО.Входящие.Добавить("Обработка.ЖурналДокументовЗакупки");
 	СоставКомандЭДО.Входящие.Добавить("Обработка.ЖурналДокументовНДС");
	СоставКомандЭДО.Входящие.Добавить("Обработка.ЖурналДокументовОтчетыКомиссионеров");
	СоставКомандЭДО.Входящие.Добавить("Документ.АктОРасхожденияхПослеОтгрузки");
   		
	СоставКомандЭДО.Интеркампани.Добавить("Документ.ПередачаТоваровМеждуОрганизациями");
	СоставКомандЭДО.Интеркампани.Добавить("Документ.ВозвратТоваровМеждуОрганизациями");
	
	СоставКомандЭДО.БезПодписи.Добавить("Документ.РеализацияТоваровУслуг");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.РеализацияУслугПрочихАктивов");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.АктВыполненныхРабот");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказКлиента");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.СчетНаОплатуКлиенту");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КоммерческоеПредложениеКлиенту");
	СоставКомандЭДО.БезПодписи.Добавить("ЖурналДокументов.ОтчетыКомитентам");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомитенту");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомитентуОСписании");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КорректировкаРеализации");
	СоставКомандЭДО.БезПодписи.Добавить("Обработка.ЖурналДокументовПродажи");
	
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ПриобретениеТоваровУслуг");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ПриобретениеУслугПрочихАктивов");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.РегистрацияЦенНоменклатурыПоставщика");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомиссионера");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомиссионераОСписании");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КорректировкаПриобретения");
	СоставКомандЭДО.БезПодписи.Добавить("Обработка.ЖурналДокументовЗакупки");
	
	СоставКомандЭДО.Внутренние.Добавить("Документ.ИнвентаризационнаяОпись");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ОприходованиеИзлишковТоваров");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ВнутреннееПотреблениеТоваров");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ПеремещениеТоваров");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ПересортицаТоваров");
	СоставКомандЭДО.Внутренние.Добавить("Документ.СписаниеНедостачТоваров");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ЛистКассовойКниги");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ПриходныйКассовыйОрдер");
	СоставКомандЭДО.Внутренние.Добавить("Документ.РасходныйКассовыйОрдер");
	СоставКомандЭДО.Внутренние.Добавить("Документ.АвансовыйОтчет");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ДоверенностьВыданная");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ИнвентаризацияНаличныхДенежныхСредств");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ПоступлениеТоваровНаСклад");
	СоставКомандЭДО.Внутренние.Добавить("Документ.СборкаТоваров");
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	Если ИспользоватьПартнеровКакКонтрагентов Тогда	
		СоставКомандЭДО.Контрагенты.Добавить("Справочник.Партнеры");
	Иначе	
		СоставКомандЭДО.Контрагенты.Добавить("Справочник.Контрагенты");
	КонецЕсли;
	СоставКомандЭДО.Организации.Добавить("Справочник.Организации");
	СоставКомандЭДО.Договоры.Добавить("Справочник.ДоговорыКонтрагентов");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СоответствиеИсходящихТиповЭлектронныхДокументовДокументамИБ.
Процедура СоответствиеИсходящихТиповЭлектронныхДокументовДокументамИБ(СоответствиеТиповЭлектронныхДокументовДокументамИБ) Экспорт 
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.ТоварнаяНакладная,         				НСтр("ru = 'Реализация товаров и услуг'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.АктВыполненныхРабот,        				НСтр("ru = 'Акт выполненных работ для клиента'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.АктНаПередачуПрав,     					НСтр("ru = 'Акт на передачу прав'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.СчетФактура,            					НСтр("ru = 'Счет-фактура выданный'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.СоглашениеОбИзмененииСтоимости, 			НСтр("ru = 'Корректировка реализации'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.КорректировочныйСчетФактура, 			НСтр("ru = 'Счет-фактура выданный (корректировка)'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.ОтветНаЗаказ,           					НСтр("ru = 'Заказ клиента'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.ЗаказТовара,            					НСтр("ru = 'Заказ поставщику'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.ПрайсЛист,              					НСтр("ru = 'Коммерческое предложение клиенту'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.СчетНаОплату,           					НСтр("ru = 'Счет на оплату клиенту'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.ОтчетОСписанииКомиссионногоТовара, 		НСтр("ru = 'Отчет комитенту о списании'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.ОтчетОПродажахКомиссионногоТовара, 		НСтр("ru = 'Отчет комитенту о продажах'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.УПД,            							НСтр("ru = 'Акты, накладные, счет-фактуры'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.УКД,            							НСтр("ru = 'Акты, накладные, счет-фактуры (Корректировка)'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.АктОРасхождениях,       					НСтр("ru = 'Акт о расхождениях после поступления'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.КаталогТоваров,         					НСтр("ru = 'Каталог товаров (формируется из Настройки отправки)'"));
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СписокТиповДокументовПоТипуЭлектронногоДокумента.
Процедура СписокТиповДокументовПоТипуЭлектронногоДокумента(ТипДокумента, СписокВозврата) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	Если ТипДокумента = ТипыДокументов.ТоварнаяНакладная 
		Или ТипДокумента = ТипыДокументов.АктНаПередачуПрав 
		Или ТипДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		
		СписокВозврата.Добавить(Документы.ПриобретениеТоваровУслуг.ПустаяСсылка(), 
			Метаданные.Документы.ПриобретениеТоваровУслуг.Представление());
			
	ИначеЕсли ТипДокумента = ТипыДокументов.СчетФактура Или ТипДокумента = ТипыДокументов.КорректировочныйСчетФактура
		Или ТипДокумента = ТипыДокументов.УПД Или ТипДокумента = ТипыДокументов.УКД Тогда
		
		СписокВозврата.Добавить(Документы.СчетФактураПолученный.ПустаяСсылка(),
			Метаданные.Документы.СчетФактураПолученный.Представление());
		
	ИначеЕсли ТипДокумента = ТипыДокументов.АктВыполненныхРабот Тогда
		
		СписокВозврата.Добавить(Документы.ПриобретениеУслугПрочихАктивов.ПустаяСсылка(), 
			Метаданные.Документы.ПриобретениеУслугПрочихАктивов.Представление());
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара Тогда
		
		СписокВозврата.Добавить(Документы.ОтчетКомиссионера.ПустаяСсылка(), 
			Метаданные.Документы.ОтчетКомиссионера.Представление());
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтчетОСписанииКомиссионногоТовара Тогда
		
		СписокВозврата.Добавить(Документы.ОтчетКомиссионераОСписании.ПустаяСсылка(), 
			Метаданные.Документы.ОтчетКомиссионераОСписании.Представление());
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ПрайсЛист Тогда
		
		СписокВозврата.Добавить(Документы.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка(), 
			 Метаданные.Документы.РегистрацияЦенНоменклатурыПоставщика.Представление());
		
	ИначеЕсли ТипДокумента = ТипыДокументов.СчетНаОплату Тогда
		
		СписокВозврата.Добавить(Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка(), 
			Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.Представление());
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ЗаказТовара Тогда
		
		СписокВозврата.Добавить(Документы.ЗаказКлиента.ПустаяСсылка(),
			Метаданные.Документы.ЗаказКлиента.Представление());
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтветНаЗаказ Тогда
		
		СписокВозврата.Добавить(Документы.ЗаказПоставщику.ПустаяСсылка(),
			Метаданные.Документы.ЗаказПоставщику.Представление());
			
	ИначеЕсли ТипДокумента = ТипыДокументов.АктОРасхождениях Тогда
		
		СписокВозврата.Добавить(Документы.АктОРасхожденияхПослеОтгрузки.ПустаяСсылка(),
			Метаданные.Документы.АктОРасхожденияхПослеОтгрузки.Представление());
			
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СвязанныеКонтрагенты.
Процедура СвязанныеКонтрагенты(СсылкиНаОбъекты, СоответствиеКонтрагентов) Экспорт
	
	Для Каждого ПартнерСсылка Из СсылкиНаОбъекты Цикл
		Если ТипЗнч(ПартнерСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
			КонтрагентПоУмолчанию = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ПартнерСсылка);
			СоответствиеКонтрагентов.Вставить(ПартнерСсылка, КонтрагентПоУмолчанию);
		КонецЕсли;
	КонецЦикла	 
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику.
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭлектронногоДокумента) Экспорт
	
	Перем Тип, НаправлениеЭД, Организация, Контрагент;
	
	ТипыДокументов        = ОбменСКонтрагентами.ТипыДокументов();
	НаправленияДокументов = ОбменСКонтрагентами.НаправленияДокументов();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	ТипИсточника = ТипЗнч(Источник);
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипИсточника);
	СтрокаПараметров = ПараметрыЭлектронногоДокумента.Добавить();
	
	Если ТипИсточника = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		Если Источник.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
			Тип = ТипыДокументов.АктНаПередачуПрав;
		Иначе			
			Тип = ТипыДокументов.ТоварнаяНакладная;
		КонецЕсли;
		
		Если Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию 
				Или Источник.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			СтрокаПараметров.ФормированиеУниверсальногоДокумента = 
				ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
		КонецЕсли;
		
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
	
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РеализацияУслугПрочихАктивов") Тогда
		
		Тип = ТипыДокументов.ТоварнаяНакладная;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		
		Тип = ТипыДокументов.АктВыполненныхРабот;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
		Если Источник.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			СтрокаПараметров.ФормированиеУниверсальногоДокумента = 
				ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
		КонецЕсли; 		
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
		
		Тип = ТипыДокументов.ТоварнаяНакладная;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПриобретениеУслугПрочихАктивов") Тогда
		
		Тип = ТипыДокументов.АктВыполненныхРабот;	
		НаправлениеЭД = НаправленияДокументов.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПередачаТоваровМеждуОрганизациями") Тогда
		
		Тип = ТипыДокументов.ПередачаТоваровМеждуОрганизациями;
		НаправлениеЭД = НаправленияДокументов.Интеркампани;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, ОрганизацияПолучатель, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.ОрганизацияПолучатель;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.ОрганизацияПолучатель;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ВозвратТоваровМеждуОрганизациями") Тогда
		
		Тип = ТипыДокументов.ВозвратТоваровМеждуОрганизациями;
		НаправлениеЭД = НаправленияДокументов.Интеркампани;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, ОрганизацияПолучатель, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.ОрганизацияПолучатель;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.ОрганизацияПолучатель;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		
		Тип = ТипыДокументов.ТоварнаяНакладная;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		СтрокаПараметров.ФормированиеУниверсальногоДокумента = ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
		
		Тип = ТипыДокументов.ТоварнаяНакладная;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли; 		
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			Тип = ТипыДокументов.КорректировочныйСчетФактура;
		Иначе
			Тип = ТипыДокументов.СчетФактура;
		КонецЕсли;
		
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, ДокументОснование");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент  = ЗначенияРеквизитов.Контрагент;
			ДокументОснование = ЗначенияРеквизитов.ДокументОснование;
		Иначе
			Организация = Источник.Организация;
			Контрагент  = Источник.Контрагент;
			ДокументОснование = Источник.ДокументОснование;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОснование)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("Договор", ДокументОснование.Метаданные()) Тогда
			
			Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Договор");
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураКомиссионеру")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураКомиссионеру") Тогда
		
		Тип = ТипыДокументов.СчетФактура;
		
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Комиссионер, ДокументОснование");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент  = ЗначенияРеквизитов.Комиссионер;
			ДокументОснование = ЗначенияРеквизитов.ДокументОснование;
		Иначе
			Организация = Источник.Организация;
			Контрагент  = Источник.Комиссионер;
			ДокументОснование = Источник.ДокументОснование;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОснование)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("Договор", ДокументОснование.Метаданные()) Тогда
			Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Договор");
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданныйАванс")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданныйАванс") Тогда
		
		Тип = ТипыДокументов.СчетФактура;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		СтрокаПараметров.ФормированиеУниверсальногоДокумента = ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент  = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент  = Источник.Контрагент;
		КонецЕсли;

	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			Тип = ТипыДокументов.КорректировочныйСчетФактура;
		Иначе
			Тип = ТипыДокументов.СчетФактура;
		КонецЕсли;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		
		Если ЭтоСсылка Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураПолученный.Организация КАК Организация
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.Ссылка = &Источник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
			|ГДЕ
			|	СчетФактураПолученныйДокументыОснования.Ссылка = &Источник";
			Запрос.УстановитьПараметр("Источник", Источник);
			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			Реквизиты = РезультатыЗапроса[0].Выбрать();
			Реквизиты.Следующий();
			
			Организация = Реквизиты.Организация;
			ДокументыОснования = РезультатыЗапроса[1].Выгрузить();
		Иначе
			Организация = Источник.Организация;
			ДокументыОснования = Источник.ДокументыОснования;
		КонецЕсли;
		
		Для Каждого Строка Из ДокументыОснования Цикл
			Если ЗначениеЗаполнено(Строка.ДокументОснование) Тогда
				
				РеквизитыОснования = Новый Структура("Контрагент");
				Если Строка.ДокументОснование.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
					РеквизитыОснования.Вставить("Договор");
				КонецЕсли;
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.ДокументОснование, РеквизитыОснования);
				Контрагент = ЗначенияРеквизитов.Контрагент;
				Если ЗначенияРеквизитов.Свойство("Договор") Тогда
					Договор = ЗначенияРеквизитов.Договор;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученныйНалоговыйАгент") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			Тип = ТипыДокументов.КорректировочныйСчетФактура;
		Иначе
			Тип = ТипыДокументов.СчетФактура;
		КонецЕсли;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		
		Если ЭтоСсылка Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураПолученный.Организация КАК Организация
			|ИЗ
			|	Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.Ссылка = &Источник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование
			|ИЗ
			|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
			|ГДЕ
			|	СчетФактураПолученныйДокументыОснования.Ссылка = &Источник";
			Запрос.УстановитьПараметр("Источник", Источник);
			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			Реквизиты = РезультатыЗапроса[0].Выбрать();
			Реквизиты.Следующий();
			
			Организация = Реквизиты.Организация;
			ДокументыОснования = РезультатыЗапроса[1].Выгрузить();
		Иначе
			Организация = Источник.Организация;
			ДокументыОснования = Источник.ДокументыОснования;
		КонецЕсли;
		
		Для Каждого Строка Из ДокументыОснования Цикл
			Если ЗначениеЗаполнено(Строка.ДокументОснование) Тогда
				
				РеквизитыОснования = Новый Структура("Контрагент");
				Если Строка.ДокументОснование.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
					РеквизитыОснования.Вставить("Договор");
				КонецЕсли;
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.ДокументОснование, РеквизитыОснования);
				Контрагент = ЗначенияРеквизитов.Контрагент;
				Если ЗначенияРеквизитов.Свойство("Договор") Тогда
					Договор = ЗначенияРеквизитов.Договор;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураКомитента")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураКомитента") Тогда
		
		Тип = ТипыДокументов.СчетФактура;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Комитент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент  = ЗначенияРеквизитов.Комитент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Комитент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученныйАванс")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученныйАванс") Тогда
		
		Тип = ТипыДокументов.СчетФактура;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент  = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
	
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		Тип = ТипыДокументов.ЗаказТовара;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказКлиента")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		
		Тип = ТипыДокументов.ОтветНаЗаказ;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуКлиенту")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуКлиенту") Тогда
		
		Тип = ТипыДокументов.СчетНаОплату;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент; 
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		Тип = ТипыДокументов.СчетНаОплату;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.РегистрацияЦенНоменклатурыПоставщика")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РегистрацияЦенНоменклатурыПоставщика") Тогда
		
		Тип = ТипыДокументов.ПрайсЛист;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
		
		Тип = ТипыДокументов.ПрайсЛист;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		Если ЭтоСсылка Тогда
			Реквизиты = Новый Структура("Организация, Контрагент", "Организация", "Соглашение.Контрагент");
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КоммерческоеПредложениеПоставщика")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.КоммерческоеПредложениеПоставщика") Тогда
		
		Тип = ТипыДокументов.КоммерческоеПредложение;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		Если ЭтоСсылка Тогда
			Реквизиты = Новый Структура("Организация, Контрагент");
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитенту")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомитенту") Тогда
		
		Тип = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомиссионера")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомиссионера") Тогда
		
		Тип = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитентуОСписании")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомитентуОСписании") Тогда
		
		Тип = ТипыДокументов.ОтчетОСписанииКомиссионногоТовара;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомиссионераОСписании")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомиссионераОСписании") Тогда
		
		Тип = ТипыДокументов.ОтчетОСписанииКомиссионногоТовара;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли; 		
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, 
				"ВидКорректировки, Организация, Контрагент, Договор");
			ХозяйственнаяОперация = ЗначенияРеквизитов.ВидКорректировки;
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			ХозяйственнаяОперация = Источник.ВидКорректировки;
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон Тогда
			Тип = ТипыДокументов.СоглашениеОбИзмененииСтоимости;
			НаправлениеЭД = НаправленияДокументов.Исходящий;
		ИначеЕсли ЗначениеЗаполнено(Источник.ДокументОснование) Тогда
			Если ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
				Тип = ТипыДокументов.АктВыполненныхРабот;
				НаправлениеЭД = НаправленияДокументов.Исходящий;
			ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
					И Источник.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
			Тип = ТипыДокументов.АктНаПередачуПрав;
			НаправлениеЭД = НаправленияДокументов.Исходящий;
			ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
					Или ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
			Тип = ТипыДокументов.ТоварнаяНакладная;
			НаправлениеЭД = НаправленияДокументов.Исходящий;
			КонецЕсли;
		Иначе
			Тип = ТипыДокументов.Внутренний;
			НаправлениеЭД = НаправленияДокументов.Внутренний;
		КонецЕсли;
		
		Если Источник.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			СтрокаПараметров.ФормированиеУниверсальногоДокумента = 
				ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов().Запрещено;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаПриобретения")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаПриобретения") Тогда
		
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, 
				"ВидКорректировки, Организация, Контрагент, Договор");
			ХозяйственнаяОперация = ЗначенияРеквизитов.ВидКорректировки;			
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			ХозяйственнаяОперация = Источник.ВидКорректировки;			
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон Тогда
			Тип = ТипыДокументов.СоглашениеОбИзмененииСтоимости;
			НаправлениеЭД = НаправленияДокументов.Входящий;
		ИначеЕсли ЗначениеЗаполнено(Источник.ДокументОснование) Тогда
			Если ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
				Тип = ТипыДокументов.АктВыполненныхРабот;
				НаправлениеЭД = НаправленияДокументов.Входящий;
			ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				Тип = ТипыДокументов.ТоварнаяНакладная;
				НаправлениеЭД = НаправленияДокументов.Входящий;
			КонецЕсли;
		Иначе
			Тип = ТипыДокументов.Внутренний;
			НаправлениеЭД = НаправленияДокументов.Внутренний;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.АктОРасхожденияхПослеПриемки") Тогда
		
		Тип = ТипыДокументов.АктОРасхождениях;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.АктОРасхожденияхПослеОтгрузки") Тогда
		
		Тип = ТипыДокументов.АктОРасхождениях;
		НаправлениеЭД = НаправленияДокументов.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
	
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ВыкупТоваровХранителем")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ВыкупТоваровХранителем") Тогда
		
		Тип = ТипыДокументов.ТоварнаяНакладная;
		НаправлениеЭД = НаправленияДокументов.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
	
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АвансовыйОтчет")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ИнвентаризационнаяОпись")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ПеремещениеТоваров")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ПересортицаТоваров")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.СписаниеНедостачТоваров")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ЛистКассовойКниги")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ДоверенностьВыданная")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ИнвентаризацияНаличныхДенежныхСредств")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ПоступлениеТоваровНаСклад")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.СборкаТоваров")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.АвансовыйОтчет")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ИнвентаризационнаяОпись")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОприходованиеИзлишковТоваров")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПеремещениеТоваров")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПересортицаТоваров")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СписаниеНедостачТоваров")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЛистКассовойКниги")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РасходныйКассовыйОрдер")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ДоверенностьВыданная")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ИнвентаризацияНаличныхДенежныхСредств")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваровНаСклад")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СборкаТоваров")
		Тогда
		
		Реквизиты = "Организация";
		
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
		Иначе
			ЗначенияРеквизитов = Новый Структура(Реквизиты);
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Источник);
		КонецЕсли;
		
		Тип = ТипыДокументов.Внутренний;
		НаправлениеЭД = НаправленияДокументов.Внутренний;
		Организация   = ЗначенияРеквизитов.Организация;
		
	КонецЕсли;
	
	СтрокаПараметров.Тип = Тип;
	СтрокаПараметров.Направление = НаправлениеЭД;
	СтрокаПараметров.Организация = Организация;
	СтрокаПараметров.Контрагент  = Контрагент;
	СтрокаПараметров.ДоговорКонтрагента = Договор;

КонецПроцедуры

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка, имя справочника, объект которого надо найти,
//  ИмяРеквизита - Строка, имя реквизита, по которому будет проведен поиск,
//  ЗначРеквизита - произвольное значение, значение реквизита, по которому будет проведен поиск,
//  Владелец - Ссылка на владельца для поиска в иерархическом справочнике.
//
Функция НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Владелец = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита) // нестандартный реквизит
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита)<> Неопределено Тогда // другой реквизит
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИскСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК ИскСправочник
	|ГДЕ
	|	ИскСправочник."+ИмяРеквизита+" = &ЗначРеквизита";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", 	Владелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// См. ОбменСКонтрагентамиПереопределяемый.ПослеЗавершенияОбменаЭлектроннымДокументом.
Процедура ПослеЗавершенияОбменаЭлектроннымДокументом(ЭлектронныйДокумент) Экспорт
	
	
КонецПроцедуры

Функция НайтиСсылкуНаНоменклатуруПоИдентификаторуНоменклатурыПоставщика(Идентификатор) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СпрНоменклатура.Номенклатура КАК Ссылка
	               |ИЗ
	               |	Справочник.НоменклатураКонтрагентов КАК СпрНоменклатура
	               |ГДЕ
	               |	СпрНоменклатура.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДоговорКонтрагентаПоРеквизитам(РеквизитыДоговора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Номер = &НомерДоговора
	|	И ДоговорыКонтрагентов.Дата = &ДатаДоговора
	|	И ДоговорыКонтрагентов.Контрагент = &Владелец";
	Запрос.УстановитьПараметр("НомерДоговора", РеквизитыДоговора.НомерДоговора);
	Запрос.УстановитьПараметр("ДатаДоговора", РеквизитыДоговора.ДатаДоговора);
	Запрос.УстановитьПараметр("Владелец", РеквизитыДоговора.Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Договор;
	
КонецФункции

Процедура УдалитьДокументыНеподходящиеДляФормированияЭД(МассивДокументов, МассивДокументовДляУдаления, ШаблонСообщения) Экспорт
	
	Для Каждого Документ Из МассивДокументовДляУдаления Цикл
		Найденный = МассивДокументов.Найти(Документ);
		Если Найденный <> Неопределено Тогда
			МассивДокументов.Удалить(Найденный);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(Документ)), 
				Документ);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

// Находит ссылку на номенклатуру БД по переданной номенклатуре контрагента.
//
// Параметры:
//  НоменклатураКонтрагента - СправочникСсылка.НоменклатураКонтрагентов - идентификатор номенклатуры поставщика
//
// Возвращаемое значение:
//  СправочникСсылка.Номенклатура - ссылка на элемент справочника.
//
Функция НайтиСсылкуНаНоменклатуруПоНоменклатуреПоставщика(НоменклатураКонтрагента) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Номенклатура КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &НоменклатураКонтрагента";
	
	Запрос.УстановитьПараметр("НоменклатураКонтрагента", НоменклатураКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Юр", ДатаКИ = Неопределено) Экспорт
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		Или СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		 
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН", СведенияОбУчастнике.ИНН);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП", СведенияОбУчастнике.КПП);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
	
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН", СведенияОбУчастнике.ИНН);
			
		Если ЗначениеЗаполнено(СведенияОбУчастнике.ПолноеНаименование)
			И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование", СведенияОбУчастнике.ПолноеНаименование);
		КонецЕсли;
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия", СведенияОбУчастнике.Фамилия);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя", СведенияОбУчастнике.Имя);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество", СведенияОбУчастнике.Отчество);
		
	КонецЕсли;
	
	СведенияОбУчастнике.Вставить("ДатаКИ", ДатаКИ);
	АдресУчастника = Новый Структура();
	ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике, "Ссылка", ВидАдреса);
	
	Если АдресУчастника.Свойство("АдресРФ") Тогда
		ПолныйПуть = ВидУчастника + ".Адрес.Структурированный";
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			Если АдресУчастника.ПроизвольныйАдрес Тогда
				ТипАдреса = "Произвольный";
			Иначе
				ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");				
			КонецЕсли;			
		Иначе
			ТипАдреса = "Произвольный";
		КонецЕсли;
		
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".Контакт.Телефон") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Контакт.Телефон",
									СведенияОбУчастнике.Телефоны);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) 
		 И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".БанковскийСчет") Тогда
		Банк = "";
		БИК = "";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскийСчет.НомерСчета", НомерСчета);
		
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			Если ТипЗнч(Банк) = Тип("Строка") Тогда
				БанкНаименование = Банк
			Иначе
				БанкНаименование = Банк.Наименование
			КонецЕсли;
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".БанковскийСчет.НаимБанк", БанкНаименование);
		КонецЕсли;
		
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".БанковскийСчет.БИК", БИК);
		КонецЕсли;
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия", Значение.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя", Значение.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", Значение.Отчество);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", Значение.Должность);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) 
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".КодОКПО";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("КодПоОКПО", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаТОРГ(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Юр", ДатаКИ = Неопределено) Экспорт
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		 
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН", СведенияОбУчастнике.ИНН);			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП", СведенияОбУчастнике.КПП);			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
			
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.Страна", СведенияОбУчастнике.СтранаРегистрации.НаименованиеПолное);
			
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН", СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации", СведенияОбУчастнике.Свидетельство);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия", СведенияОбУчастнике.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Имя", СведенияОбУчастнике.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество", СведенияОбУчастнике.Отчество);
			
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН", СведенияОбУчастнике.ИНН);
		Если ЗначениеЗаполнено(СведенияОбУчастнике.ПолноеНаименование)
			И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование", СведенияОбУчастнике.ПолноеНаименование);
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия", СведенияОбУчастнике.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя", СведенияОбУчастнике.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество", СведенияОбУчастнике.Отчество);
		
	КонецЕсли;
	
	СведенияОбУчастнике.Вставить("ДатаКИ", ДатаКИ);
	АдресУчастника = Новый Структура();
	ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике, "Ссылка", ВидАдреса);
	
	Если АдресУчастника.Свойство("АдресРФ") Тогда
		ПолныйПуть = ВидУчастника + ".Адрес.Структурированный";
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			Если АдресУчастника.ПроизвольныйАдрес Тогда
				ТипАдреса = "Произвольный";
			Иначе
				ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");				
			КонецЕсли;			
		Иначе
			ТипАдреса = "Произвольный";
		КонецЕсли;
		
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".Контакт.Телефон") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Контакт.Телефон",
									СведенияОбУчастнике.Телефоны);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) 
		 И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".БанковскийСчет") Тогда
		Банк = "";
		БИК = "";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскийСчет.НомерСчета", НомерСчета);
		
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			Если ТипЗнч(Банк) = Тип("Строка") Тогда
				БанкНаименование = Банк
			Иначе
				БанкНаименование = Банк.Наименование
			КонецЕсли;
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".БанковскийСчет.НаимБанк", БанкНаименование);
		КонецЕсли;
		
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".БанковскийСчет.БИК", БИК);
		КонецЕсли;
		
		КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет)
			И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".БанковскийСчет.КорСчет") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".БанковскийСчет.КорСчет", КоррСчет);
		КонецЕсли;
		
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия", Значение.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя", Значение.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", Значение.Отчество);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", Значение.Должность);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) 
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".КодОКПО";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("КодПоОКПО", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктурноеПодразделение(ДеревоДанных, ВидУчастника, Подразделение) Экспорт
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".СтруктурноеПодразделение", Подразделение.Наименование);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда 
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе // Передали строку с реквизитом
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		
		Если ИмяРеквизита = "СтавкаНДС" ИЛИ ИмяРеквизита = "НалСтВел" Тогда
			Результат = НайтиПеречисление("НДС", Результат);
		ИначеЕсли ИмяРеквизита = "ВариантОплаты" Тогда
			Если Результат = Перечисления.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения Тогда
				Результат = Перечисления.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения
			ИначеЕсли Результат = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки Тогда
				Результат = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления 
			ИначеЕсли Результат = Перечисления.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
				Результат = Перечисления.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления
			ИначеЕсли Результат = Перечисления.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления Тогда
				Результат = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки
			ИначеЕсли Результат = Перечисления.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения Тогда
				Результат = Перечисления.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения
			ИначеЕсли Результат = Перечисления.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления Тогда
				Результат = Перечисления.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки
			КонецЕсли
		Иначе
			// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора), тогда нашли всего лишь индекс строки
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАдресИзКонтактнойИнформации(Владелец, ТипАдреса = "Юр", ДатаКИ = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ВидыКИ = Справочники.ВидыКонтактнойИнформации[ТипАдреса + "АдресОрганизации"].Ссылка;
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидыКИ = Справочники.ВидыКонтактнойИнформации[ТипАдреса + "АдресКонтрагента"].Ссылка;
	Иначе
		ВидыКИ = Неопределено;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Владелец);
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, , ВидыКИ, ДатаКИ);
	
	Для Каждого Колонка Из КонтактнаяИнформация.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Результат, КонтактнаяИнформация[0]);
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТелефонИзКонтактнойИнформации(Владелец) Экспорт
	
	Результат = ФормированиеПечатныхФорм.ПолучитьТелефонИзКонтактнойИнформации(Владелец);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАдресЭПИзКонтактнойИнформации(Владелец) Экспорт
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК АдресЭП
	|ИЗ
	|	Справочник.%ИмяСправочника%.КонтактнаяИнформация КАК КонтактнаяИнформация 
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Владелец
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &ВидEmail";
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailОрганизации"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Организации");
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailКонтрагента"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Контрагенты");
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Партнеры") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailПартнера"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Партнеры");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Тип",      Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ВидEmail", ВидEmail);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.АдресЭП;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьБанковскиеСчета.
Процедура ПолучитьБанковскиеСчета(Организация, Таблица) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Владелец = &Владелец
	|	";
	
	Запрос.УстановитьПараметр("Владелец", Организация);
	Таблица = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьБанковскиеРеквизиты.
Процедура ПолучитьБанковскиеРеквизиты(МассивСчетов, Таблица) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка,
	|	БанковскиеСчетаОрганизаций.НомерСчета КАК РасчетныйСчет,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.КоррСчетБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.КоррСчет
	|	КОНЕЦ КАК КорреспондентскийСчет,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.БИКБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.Код
	|	КОНЕЦ КАК БИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.НаименованиеБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.Наименование
	|	КОНЕЦ КАК Банк,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.Наименование
	|	КОНЕЦ КАК БанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.БИКБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.Код
	|	КОНЕЦ КАК БанкДляРасчетовБИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ КАК БанкДляРасчетовКоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Ссылка В(&МассивСчетов)";
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Таблица = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо.
Процедура ЭтоФизЛицо(ДанныеКонтрагента, ПризнакФизЛица) Экспорт
	
	Если ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ЮрФизЛицо") = Неопределено Тогда
		ПризнакФизЛица = Ложь;
	КонецЕсли;
	
	ЮрФизЛицо = ДанныеКонтрагента.ЮрФизЛицо;
	
	Если ТипЗнч(ЮрФизЛицо) <> Тип("ПеречислениеСсылка.ЮрФизЛицо") Тогда
		ПризнакФизЛица = Ложь;
	КонецЕсли;
		
	ПризнакФизЛица = Ложь;
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
		ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		ПризнакФизЛица = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Получает таблицу с ключевыми реквизитами объекта.
// 
// Параметры:
//  ИмяОбъекта - Строка - имя объекта конфигурации, ключевые реквизиты которого необходимо получить.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица ключевых реквизитов.
//
Функция КлючевыеРеквизитыОбъекта(ИмяОбъекта) Экспорт
	
	ТаблицаРеквизитов = ИнициализацияТаблицыРеквизитовОбъектов();
	
	Если ИмяОбъекта = "Документ.ПакетЭД" Тогда
		Возврат ТаблицаРеквизитов;
	КонецЕсли;
	
	СтруктураКлючевыхРеквизитов = Новый Структура;
	ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта, СтруктураКлючевыхРеквизитов);
	
	ТекПорядок = -50;
	Для Каждого ТекЭлемент Из СтруктураКлючевыхРеквизитов Цикл
		НовСтрока                            = ТаблицаРеквизитов.Добавить();
		НовСтрока.Порядок                    = ТекПорядок;
		НовСтрока.ИмяОбъекта                 = ИмяОбъекта;
		НовСтрока.ИмяТабличнойЧасти          = ?(ТекЭлемент.Ключ = "Шапка", "", ТекЭлемент.Ключ);
		НовСтрока.РеквизитыОбъекта           = ТекЭлемент.Значение;
		НовСтрока.СтруктураРеквизитовОбъекта = Новый Структура(ТекЭлемент.Значение);
		ТекПорядок = ТекПорядок + 100;
	КонецЦикла;
	
	ТаблицаРеквизитов.Сортировать("Порядок Возр");
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Функция ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаТаблицыРеквизитовРегистрации) Экспорт
	
	Если ПустаяСтрока(СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти) Тогда
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = РеквизитыРегистрацииШапкиДоИзменения(Объект,
			СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = РеквизитыРегистрацииШапкиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	Иначе
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = РеквизитыРегистрацииТабличнойЧастиДоИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = РеквизитыРегистрацииТабличнойЧастиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	КонецЕсли;
	
	Возврат НЕ ТаблицыРеквизитовОбъектовОдинаковые(ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения,
												   ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения,
												   СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
	
КонецФункции

Функция ПодлежитОбменуЭД(Объект) Экспорт
	
	ПодлежитОбменуЭД = Истина;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств")
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		
		ПодлежитОбменуЭД = Не Объект.ПроведеноБанком;
	КонецЕсли;
	
	Возврат ПодлежитОбменуЭД;
	
КонецФункции

// Заполняет сопоставление номенклатуры для дерева ЭД.
// 
// Параметры:
//  Строка - СтрокаТаблицыЗначений - строка данных из документа.
//  ШтрихкодыКомбинаций - Массив - штрихкоды номенклатуры.
//  ШтрихкодыНоменклатуры - Массив - штрихкоды номенклатуры.
//  Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковки из строки документа.
//  СоответствиеСтавокНДСКонтрагента - Соответствие - соответствие ставок НДС.
//
// Возвращаемое значение:
//  Структура - структура содержащая данные сопоставления.
//
Функция ЗаполнитьСопоставлениеНоменклатуры(Строка, ШтрихкодыКомбинаций = Неопределено, ШтрихкодыНоменклатуры = Неопределено, Упаковка = Неопределено, СоответствиеСтавокНДСКонтрагента = Неопределено) Экспорт
	
	Таблица = Строка.Владелец();
	Сопоставление = Новый Структура;
	Сопоставление.Вставить("НоменклатураИБ", 		Строка.Номенклатура);
	Сопоставление.Вставить("ХарактеристикаИБ", 		Строка.Характеристика);
	Если Упаковка <> Неопределено Тогда
		ЗначениеУпаковки = Упаковка
	Иначе
		ЗначениеУпаковки = Строка.Упаковка 		
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЗначениеУпаковки) И СоответствиеСтавокНДСКонтрагента = Неопределено Тогда
		ЗначениеУпаковки = Строка.ЕдиницаИзмерения
	КонецЕсли;
	Сопоставление.Вставить("УпаковкаИБ", 			ЗначениеУпаковки);
	
	Если Таблица.Колонки.Найти("Идентификатор") <> Неопределено Тогда
		Сопоставление.Вставить("Идентификатор", 		Строка.Идентификатор);
	Иначе
		Сопоставление.Вставить("Идентификатор", 		"");
	КонецЕсли;	
	
	Если Таблица.Колонки.Найти("ЕдиницаИзмеренияНаименование") <> Неопределено Тогда
		Сопоставление.Вставить("ЕдиницаИзмерения", 		Строка.ЕдиницаИзмеренияНаименование);
	Иначе
		Сопоставление.Вставить("ЕдиницаИзмерения", 		"");
	КонецЕсли;
		
	Если Таблица.Колонки.Найти("ЕдиницаИзмеренияКод") <> Неопределено Тогда
		Сопоставление.Вставить("ЕдиницаИзмеренияКод", 	Строка.ЕдиницаИзмеренияКод);
	ИначеЕсли Таблица.Колонки.Найти("ЕдиницаИзмеренияКодПоОКЕИ") <> Неопределено Тогда
		Сопоставление.Вставить("ЕдиницаИзмеренияКод", 	Строка.ЕдиницаИзмеренияКодПоОКЕИ);
	Иначе
		Сопоставление.Вставить("ЕдиницаИзмеренияКод", 		"");
	КонецЕсли;
	
	Если Таблица.Колонки.Найти("ХарактеристикаНаименование") <> Неопределено Тогда
		Сопоставление.Вставить("Характеристика", 		Строка.ХарактеристикаНаименование);
	ИначеЕсли Таблица.Колонки.Найти("ХарактеристикаНаименованиеПолное") <> Неопределено Тогда
		Сопоставление.Вставить("Характеристика", 		Строка.ХарактеристикаНаименованиеПолное);		
	ИначеЕсли Таблица.Колонки.Найти("НаименованиеХарактеристики") <> Неопределено Тогда
		Сопоставление.Вставить("Характеристика", 		Строка.НаименованиеХарактеристики);
	Иначе
		Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
			Сопоставление.Вставить("Характеристика", 		Строка.Характеристика.Наименование);
		Иначе
			Сопоставление.Вставить("Характеристика", 		"");
		КонецЕсли;	
	КонецЕсли;
	
	Если Таблица.Колонки.Найти("НоменклатураНаименование") <> Неопределено Тогда
		Сопоставление.Вставить("Наименование", 			Строка.НоменклатураНаименование);
	ИначеЕсли Таблица.Колонки.Найти("УслугаНаименованиеПолное") <> Неопределено Тогда
		Сопоставление.Вставить("Наименование", 			Строка.УслугаНаименованиеПолное);		
	Иначе
		Сопоставление.Вставить("Наименование", 			Строка.Наименование);
	КонецЕсли;
	
	Если Таблица.Колонки.Найти("НоменклатураКод") <> Неопределено Тогда
		Сопоставление.Вставить("Артикул", 			Строка.НоменклатураКод);
	ИначеЕсли Таблица.Колонки.Найти("Артикул") <> Неопределено Тогда
		Сопоставление.Вставить("Артикул", 			Строка.Артикул);
	Иначе
		Сопоставление.Вставить("Артикул", 			"");		
	КонецЕсли;
	
	Если Сопоставление.Идентификатор <> "" И Сопоставление.Идентификатор <> NULL 
		И СоответствиеСтавокНДСКонтрагента <> Неопределено // для акта о расхождениях (ГосИС)
		Тогда
		Сопоставление.Вставить("СтавкаНДС", СоответствиеСтавокНДСКонтрагента.Получить(Строка.СтавкаНДС));
		Сопоставление.Вставить("ШтрихкодыНоменклатуры", Строка.ШтрихкодыНоменклатуры);
		Сопоставление.Вставить("ШтрихкодКомбинации",    Строка.ШтрихкодКомбинации);		
	Иначе
		Сопоставление.Вставить("СтавкаНДС", Строка.СтавкаНДС);
		НоменклатураПартнеровСервер.ЗаполнитьШтрихкодыТоваровВСопоставление(Сопоставление, ШтрихкодыНоменклатуры, ШтрихкодыКомбинаций,
				Строка.Номенклатура, Строка.Характеристика, ЗначениеУпаковки);
	КонецЕсли;
	
	Возврат Сопоставление
	
КонецФункции

// Обработчик события "ОбработкаЗаполнения" электронных документов.
// 
// Параметры:
//  Источник		 		- Объект 	   - Электронный документ;
//	ДанныеЗаполнения 		- Произвольный - Значение, которое используется как основание для заполнения;
//  СтандартнаяОбработка    - Булево       - Признак выполнения стандартной (системной) обработки события.
//
Процедура ЗаполнитьЗначениеРеквизитаОрганизацияПриОднофирменномУчетеОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт

	ОбщегоНазначенияУТ.ОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

Функция НайтиСоздатьПриобретениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПриобретенияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументПриобретенияТоваровУслуг(Документ, ДанныеДляЗагрузки, Записывать);
	
	Возврат Документ;
	
КонецФункции

Функция НайтиСоздатьВозвратТоваровОтПокупателя(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПриобретенияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументВозвратаТоваровОтПокупателя(Документ, ДанныеДляЗагрузки, Записывать);
	
	Возврат Документ;
	
КонецФункции

Функция НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактуры(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументСчетФактура(Документ, ДанныеДляЗагрузки, Записывать);
	
	Возврат Документ;

КонецФункции

Функция НайтиСоздатьСчетФактуруАванс(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактуры(СтрокаДляЗагрузки, ДеревоРазбора, Истина);
	ДанныеШапки = ДанныеДляЗагрузки.Шапка;
	Авансы = ДанныеДляЗагрузки.Авансы;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов'");
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(истина);
		ДокументОбъект = Документы.СчетФактураПолученныйАванс.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
		ДокументОбъект.Заполнить(ДанныеШапки);
	КонецЕсли;
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеШапки);
	
	ДокументОбъект.Авансы.Загрузить(Авансы);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(ВозвращаемоеЗначение, "РеестрДокументов");
			РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, ВозвращаемоеЗначение,  Неопределено, Ложь);
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьСчетФактуруКомитента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактуры(СтрокаДляЗагрузки, ДеревоРазбора);
	ДанныеШапки = ДанныеДляЗагрузки.Шапка;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов'");
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(истина);
		ДокументОбъект = Документы.СчетФактураКомитента.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеШапки);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеШапки);
	КонецЕсли;
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеШапки);
	
	// Заполним ТЧ Покупатели
	Если ДанныеШапки.Свойство("Покупатель") Тогда
		ДокументОбъект.Покупатели.Очистить();
		НоваяСтрока = ДокументОбъект.Покупатели.Добавить();
		НоваяСтрока.Покупатель = ДанныеШапки.Покупатель;
	КонецЕсли;
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьПоступлениеУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументПоступленияУслуг(Документ, ДанныеДляЗагрузки, Записывать);
	
	Возврат Документ;
	
КонецФункции

Функция НайтиСоздатьЗаявкуНаРасходованиеДенежныхСредств(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств") Тогда
		Текст = НСтр("ru = 'Для создания документа ""Заявка на расходование денежных средств"" необходимо включить функциональную опцию ""Использовать заявки на расходование денежных средств""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);		
		Возврат Неопределено		
	КонецЕсли;
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаявкиНаРасходование(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов'");
        КонецЕсли;
		ДокументОбъект.РасшифровкаПлатежа.Очистить();
	Иначе  // создаем новый
		ДокументОбъект = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	Если ДанныеЗаполнения.Свойство("СрокПлатежа") Тогда 
		ДокументОбъект.ЖелательнаяДатаПлатежа = ДанныеЗаполнения.СрокПлатежа;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("НомерДокументаОснования") 
	   И ДанныеЗаполнения.Свойство("ДатаДокументаОснования") 
	   И ЗначениеЗаполнено(ДанныеЗаполнения.НомерДокументаОснования)
	   И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаДокументаОснования) Тогда
	   	РеквизитыИБ = Новый Структура;
		РеквизитыИБ.Вставить("Номер", 	ДанныеЗаполнения.НомерДокументаОснования);
		Если ТипЗнч(ДанныеЗаполнения.ДатаДокументаОснования) = Тип("Строка") Тогда
        	РеквизитыИБ.Вставить("Дата", 	ПолучитьДатуВремяИзСтроки(ДанныеЗаполнения.ДатаДокументаОснования));
		Иначе
        	РеквизитыИБ.Вставить("Дата", 	ДанныеЗаполнения.ДатаДокументаОснования);
		КонецЕсли;
		ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();			
		НайденныйДок = НайтиДокумент(ТипыДокументов.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ);
		Если ЗначениеЗаполнено(НайденныйДок) Тогда
			ДокументОбъект.ДокументОснование = НайденныйДок;
		КонецЕсли;	
	КонецЕсли;   
	 	
	ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ДанныеЗаполнения.Сумма;
	
	// табл.часть расшифровка
	НовСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
	НовСтрока.ВалютаВзаиморасчетов 	= ДокументОбъект.Валюта;
	НовСтрока.Сумма 				= ДокументОбъект.СуммаДокумента;
	НовСтрока.СуммаВзаиморасчетов 	= ДокументОбъект.СуммаДокумента;
	Если ДанныеЗаполнения.Свойство("СуммаНалогаИтог") Тогда
		НовСтрока.СуммаНДС			= ДанныеЗаполнения.СуммаНалогаИтог;
	КонецЕсли;
	
    Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		НовСтрока.Партнер = ДанныеЗаполнения.Партнер;
	КонецЕсли;
	Если ЗначениеЗаполнено(НайденныйДок) Тогда
		НовСтрока.ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(НайденныйДок);
	КонецЕсли;
	
	Попытка
		Если Записывать Тогда
			// запись версии создаваемого документа в подсистеме версионирования
			ДокументОбъект.ОбменДанными.Загрузка = Ложь;
			ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюДокумента(ДокументОбъект, Ложь, РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			// запись версии конец
						
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьРегистрацияЦен(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляРегистрацииЦен(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов'");
        КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина; 
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		
	Попытка
		Если Записывать Тогда
			// запись версии создаваемого документа в подсистеме версионирования
			ДокументОбъект.ОбменДанными.Загрузка = Ложь;
			ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюДокумента(ДокументОбъект, Ложь, РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			// запись версии конец
						
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьЗаказКлиента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";   
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаКлиента(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
			
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов'");
        КонецЕсли;
	Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
		НайденныйДок = Неопределено;
		Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
			РеквизитыИБКонтрагента = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
				РеквизитыИБКонтрагента.Вставить("НомерПоДаннымКлиента", ДанныеЗаполнения.НомерПоДаннымКлиента);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымКлиента) Тогда
				РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымКлиента", ДанныеЗаполнения.ДатаПоДаннымКлиента);
			КонецЕсли;
				РеквизитыИБ = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
				РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымПоставщика);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
				РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
			КонецЕсли;
			Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
				ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();				
				НайденныйДок = НайтиДокумент(ТипыДокументов.ЗаказТовара, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
			КонецЕсли;
		КонецЕсли;
		Если Записывать И ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
			ДокументОбъект = НайденныйДок.ПолучитьОбъект();
			//Попытка заблокировать документ
			Попытка
				ДокументОбъект.Заблокировать();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось изменить данные документа ""%1"".
					|Возможно, документ редактируется другим пользователем'"),
					Строка(ДокументОбъект.Ссылка));
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			//конец попытки заблокировать документ
			Возврат ДокументОбъект.Ссылка;
		КонецЕсли;
		ДокументОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		Если ДанныеЗаполнения.Свойство("ДополнительнаяИнформация") Тогда
			ДанныеЗаполнения.Вставить("ДопИнф", ДанныеЗаполнения.ДополнительнаяИнформация);
			ДанныеЗаполнения.Удалить("ДополнительнаяИнформация");
		КонецЕсли;
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		Если ДанныеЗаполнения.Свойство("ДопИнф") Тогда
			ДокументОбъект.ДополнительнаяИнформация = ДанныеЗаполнения.ДопИнф;
		КонецЕсли;
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
		
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по прайс-листу из торгового предложения
	Если ДанныеЗаполнения.Свойство("ПрайсЛист") Тогда
		ДокументОбъект.Соглашение = ДанныеЗаполнения.ПрайсЛист;
	КонецЕсли;	
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	// заполнение способа доставки
	Если ДанныеЗаполнения.Свойство("СпособДоставки") Тогда
	     СпособДоставки = ДанныеЗаполнения.СпособДоставки;
	     Если СпособДоставки = "Доставка" Тогда
	          ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
	     ИначеЕсли СпособДоставки = "Самовывоз" Тогда
	          ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	     КонецЕсли;
	КонецЕсли;
	
	// заполнение договора
	Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) И ДанныеЗаполнения.Свойство("ДоговорКонтрагента") Тогда
		Если ДокументОбъект.Соглашение.ИспользуютсяДоговорыКонтрагентов И ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорКонтрагента) Тогда
			ДокументОбъект.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(ДанныеДляЗагрузки.ЭтапыГрафикаОплаты);
	
	// склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	// сумма документа
	Если ДанныеДляЗагрузки.Шапка.Свойство("Сумма") Тогда
		ДокументОбъект.СуммаДокумента = ДанныеДляЗагрузки.Шапка.Сумма;
	КонецЕсли;
	
	Если ДанныеДляЗагрузки.Товары.Итог("СуммаСНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя;
	ИначеЕсли ДанныеДляЗагрузки.Товары.Итог("СуммаНДС") = 0 Тогда 
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	Попытка
		Если Записывать Тогда
			// запись версии создаваемого документа в подсистеме версионирования
			ДокументОбъект.ОбменДанными.Загрузка = Ложь;
			ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюДокумента(ДокументОбъект, Ложь, РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			// запись версии конец
						
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(ВозвращаемоеЗначение, "РеестрДокументов");
			РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, ВозвращаемоеЗначение,  Неопределено, Ложь);
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов'");
		КонецЕсли;
	Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
		НайденныйДок = Неопределено;
		Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
			РеквизитыИБКонтрагента = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
				РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
				РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
			КонецЕсли;
			РеквизитыИБ = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
				РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымКлиента) Тогда
				РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымКлиента);
			КонецЕсли;
			Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
				ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();				
				НайденныйДок = НайтиДокумент(ТипыДокументов.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
			КонецЕсли;
		КонецЕсли;
		Если Записывать И ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
			ДокументОбъект = НайденныйДок.ПолучитьОбъект();
			//Попытка заблокировать документ
			Попытка
				ДокументОбъект.Заблокировать();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось изменить данные документа ""%1"".
					|Возможно, документ редактируется другим пользователем'"),
					Строка(ДокументОбъект.Ссылка));
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			//конец попытки заблокировать документ
			Возврат ДокументОбъект.Ссылка;
		КонецЕсли;
		ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
	
	// заполнение реквизита ЗакупкаПодДеятельность
	ПараметрыЗаполнения = Документы.ЗаказПоставщику.ПараметрыЗаполненияВидаДеятельностиНДС(ДокументОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ДокументОбъект.ЗакупкаПодДеятельность, ПараметрыЗаполнения);
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	// заполнение способа доставки
	Если ДанныеЗаполнения.Свойство("СпособДоставки") Тогда
	     СпособДоставки = ДанныеЗаполнения.СпособДоставки;
	     Если СпособДоставки = "Доставка" Тогда
	          ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
	     ИначеЕсли СпособДоставки = "Самовывоз" Тогда
	          ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя;
	     КонецЕсли;
	КонецЕсли;
	
	// заполнение договора
	Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) И ДанныеЗаполнения.Свойство("ДоговорКонтрагента") Тогда
		Если ДокументОбъект.Соглашение.ИспользуютсяДоговорыКонтрагентов И ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорКонтрагента) Тогда
			ДокументОбъект.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Партнер) Тогда
			НоменклатураПартнеровСервер.ЗаполнитьНоменклатуруПартнераПоНоменклатуреВТаблице(ДокументОбъект.Товары, ДанныеЗаполнения.Партнер);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеДляЗагрузки.Товары.Итог("СуммаСНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя;
	ИначеЕсли ДанныеДляЗагрузки.Товары.Итог("СуммаНДС") = 0 Тогда 
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(ДанныеДляЗагрузки.ЭтапыГрафикаОплаты);
	
	// склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			// запись версии создаваемого документа в подсистеме версионирования
			ДокументОбъект.ОбменДанными.Загрузка = Ложь;
			ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюДокумента(ДокументОбъект, Ложь, РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			// запись версии конец
						
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(ВозвращаемоеЗначение, "РеестрДокументов");
			РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, ВозвращаемоеЗначение,  Неопределено, Ложь);
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьОтчетКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляОтчетаКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов'");
        КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ОтчетКомиссионера.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина; 
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Для Каждого Строка ИЗ ДокументОбъект.Товары Цикл
		Строка.Сумма = Строка.СуммаСНДС - Строка.СуммаНДС;
	КонецЦикла;	
	
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(ДанныеДляЗагрузки.ЭтапыГрафикаОплаты);
	
	Попытка
		Если Записывать Тогда
			// запись версии создаваемого документа в подсистеме версионирования
			ДокументОбъект.ОбменДанными.Загрузка = Ложь;
			ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюДокумента(ДокументОбъект, Ложь, РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			// запись версии конец
						
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(ДокументОбъект.Ссылка, "РеестрДокументов");
			РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, ДокументОбъект.Ссылка, Неопределено, Ложь);
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьОтчетКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляОтчетаКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов'");
        КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ОтчетКомиссионераОСписании.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина; 
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		
	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			// запись версии создаваемого документа в подсистеме версионирования
			ДокументОбъект.ОбменДанными.Загрузка = Ложь;
			ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюДокумента(ДокументОбъект, Ложь, РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			// запись версии конец
						
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(ДокументОбъект.Ссылка, "РеестрДокументов");
			РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, ДокументОбъект.Ссылка, Неопределено, Ложь);
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументКорректировкиПоступления(Документ, ДанныеДляЗагрузки, Записывать);
	
	Возврат Документ;
	
КонецФункции

Процедура ЗаполнитьДокументПриобретенияТоваровУслуг(Документ, ДанныеДляЗагрузки, Записывать) Экспорт
	
	Текст = "";
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов'");
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	РеквизитыИБКонтрагента = Новый Структура;
	
	// попробуем найти заказ поставщику
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();				
	НайденныйДок = Неопределено;
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
		КонецЕсли;
		РеквизитыИБ = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымКлиента);
		КонецЕсли;
		Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
			НайденныйДок = НайтиДокумент(ТипыДокументов.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ВидОборота") И ЗначениеЗаполнено(ДанныеЗаполнения.ВидОборота) Тогда
		Если ДанныеЗаполнения.ВидОборота = "04" Тогда
			ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
		ДопПараметры.ВалютаВзаиморасчетов = ДанныеЗаполнения.Валюта;
		Если ЗначениеЗаполнено(ДокументОбъект.ХозяйственнаяОперация) Тогда
			ХозяйственнаяОперацияДоговора = ДокументОбъект.ХозяйственнаяОперация;
		Иначе
			ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
		КонецЕсли;
		ДокументОбъект.Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ДокументОбъект, ХозяйственнаяОперацияДоговора, ДопПараметры);
	КонецЕсли;
	
	// Заполнение партнера, если контрагент создается новый.
	ПартнерКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "Партнер"); 
	Если Не ЗначениеЗаполнено(ДокументОбъект.Партнер) И ЗначениеЗаполнено(ПартнерКонтрагента) Тогда
		ДокументОбъект.Партнер = ПартнерКонтрагента;
	КонецЕсли;
	
	ДокументОбъект.ЗаказПоставщику = НайденныйДок;
	
	Если ЗначениеЗаполнено(НайденныйДок) Тогда
		ДокументОбъект.ПоступлениеПоЗаказам = Истина;
	КонецЕсли;

	// заполнение реквизита ЗакупкаПодДеятельность
	ПараметрыЗаполнения = Документы.ПриобретениеТоваровУслуг.ПараметрыЗаполненияВидаДеятельностиНДС(ДокументОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ДокументОбъект.ЗакупкаПодДеятельность, ПараметрыЗаполнения);

	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ЕстьЗаказВТЧ = Ложь;
	Для Каждого Строка Из ДанныеДляЗагрузки.Товары Цикл
		РеквизитыИБ = Новый Структура;
		Если ЗначениеЗаполнено(Строка.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", Строка.НомерПоДаннымКлиента);
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДатаПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Дата", Строка.ДатаПоДаннымКлиента);
		КонецЕсли;
		Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
			Строка.ЗаказПоставщику = НайтиДокумент(ТипыДокументов.ОтветНаЗаказ, ДокументОбъект.Контрагент, РеквизитыИБ);
			ЕстьЗаказВТЧ = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Соглашение.ВидЦеныПоставщика) Тогда
				Строка.ВидЦеныПоставщика = ДокументОбъект.Соглашение.ВидЦеныПоставщика;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Если ЗначениеЗаполнено(ДокументОбъект.Партнер) Тогда
		НоменклатураПартнеровСервер.ЗаполнитьНоменклатуруПартнераПоНоменклатуреВТаблице(ДокументОбъект.Товары, ДокументОбъект.Партнер);
	КонецЕсли;
	
	Если ДанныеДляЗагрузки.Свойство("ШтрихкодыУпаковок") Тогда 
		ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ДанныеДляЗагрузки.ШтрихкодыУпаковок);
		Если ЗначениеЗаполнено(Документ) Тогда// получены изменения по существующему документу 
			ЭлектронноеВзаимодействиеИСМП.ОчиститьРезультатыПроверкиДокументаПриЗагрузкеДокумента(Документ);
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	
	НоменклатураПартнеровСервер.ЗаполнитьПустоеСопоставлениеВНоменклатуреПартнераПоНоменклатуреИБ(ДокументОбъект.Товары, Отказ);
	
	Если ЕстьЗаказВТЧ Тогда
		ДанныеДляЗагрузки.Товары.Свернуть("ЗаказПоставщику");
		Если ДанныеДляЗагрузки.Товары.Количество()>1 Тогда
			ДокументОбъект.ПоступлениеПоЗаказам=Истина;
			ДанныеПривязки = ПолучитьДанныеПривязкиСтрокЗаказов(ДокументОбъект.Товары.Выгрузить(,"Номенклатура, Количество, ЗаказПоставщику"));
			индекс = 0;
			Для Каждого Строка ИЗ ДанныеПривязки Цикл
				ДокСтрокаТовары = документОбъект.Товары.Получить(Индекс);
				ЗаполнитьЗначенияСвойств(ДокСтрокаТовары, Строка);
				Если НЕ ЗначениеЗаполнено(ДокСтрокаТовары.КодСтроки) ИЛИ ДокСтрокаТовары.КодСтроки = 0 Тогда
					ДокСтрокаТовары.ЗаказПоставщику = Документы.ЗаказПоставщику.ПустаяСсылка();
				КонецЕсли;
				Индекс = индекс + 1;
			КонецЦикла
		ИначеЕсли ДанныеДляЗагрузки.Товары.Количество()=1 Тогда
			ДокументОбъект.ЗаказПоставщику = ДанныеДляЗагрузки.Товары[0].ЗаказПоставщику;
		КонецЕсли
	КонецЕсли;
	
	// склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	// заполнение реквизита ВариантПриемкиТоваров
	Если ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
		Распоряжение = РаспоряжениеДляПолученияВариантаПриемкиТоваров(ДокументОбъект);		
		ДокументОбъект.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Распоряжение, ДокументОбъект.Договор);	
	КонецЕсли;
		
	Если ДанныеЗаполнения.Свойство("Сумма") И ДанныеЗаполнения.Сумма = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя;
	ИначеЕсли ДокументОбъект.Товары.Итог("СуммаНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	Для Каждого Строка Из ДокументОбъект.Товары Цикл 
		Если ДокументОбъект.ЦенаВключаетНДС И Строка.Сумма <> Строка.СуммаСНДС Тогда
			Строка.Сумма = Строка.СуммаСНДС;
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Окр(Строка.Сумма/Строка.Количество, 2);
			Иначе
				Строка.Цена = Строка.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		// Проверка заполнения партнера в номенклатуре поставщика 
		Если ЗначениеЗаполнено(ДокументОбъект.Партнер) И ЗначениеЗаполнено(Строка.НоменклатураПартнера)
			И НЕ ЗначениеЗаполнено(Строка.НоменклатураПартнера.Владелец) Тогда
				НоменклатураПартнераОбъект = Строка.НоменклатураПартнера.ПолучитьОбъект();
				Попытка 
					НоменклатураПартнераОбъект.Заблокировать();
				Исключение
					ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось изменить данные номенклатуры поставщика ""%1"".
					|Возможно, номенклатура поставщика редактируется другим пользователем'"),
					НоменклатураПартнераОбъект.Наименование);			
					ВызватьИсключение ТекстИсключенияЗаписи;
				КонецПопытки;
				НоменклатураПартнераОбъект.Владелец = ДокументОбъект.Партнер;
				НоменклатураПартнераОбъект.Записать();
				НоменклатураПартнераОбъект.Разблокировать();
		КонецЕсли;		
	КонецЦикла;

	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			// запись версии создаваемого документа в подсистеме версионирования
			ДокументОбъект.ОбменДанными.Загрузка = Ложь;
			ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюДокумента(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			// запись версии конец
						
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();
			Документ = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(Документ, "РеестрДокументов");
			РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, Документ,  Неопределено, Ложь);
		Иначе
			Документ = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), Документ, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоступленияУслуг(Документ, ДанныеДляЗагрузки, Записывать) Экспорт
	
	Текст = "";
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов'");
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ПриобретениеУслугПрочихАктивов.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	// попробуем найти заказ поставщику
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
		РеквизитыИБКонтрагента = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
		КонецЕсли;
		РеквизитыИБ = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
		КонецЕсли;
	КонецЕсли;

	// заполнение реквизита ЗакупкаПодДеятельность
	ПараметрыЗаполнения = Документы.ПриобретениеУслугПрочихАктивов.ПараметрыЗаполненияВидаДеятельностиНДС(ДокументОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ДокументОбъект.ЗакупкаПодДеятельность, ПараметрыЗаполнения);
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.Расходы.Загрузить(ДанныеДляЗагрузки.Расходы);
	
	Если ДокументОбъект.Расходы.Итог("СуммаНДС") > 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Конецесли;
	ДокументОбъект.ЦенаВключаетНДС = Ложь;
	
	Для Каждого Строка Из ДокументОбъект.Расходы Цикл 
		Если ДокументОбъект.ЦенаВключаетНДС И Строка.Сумма <> Строка.СуммаСНДС Тогда
			Строка.Сумма = Строка.СуммаСНДС;
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Окр(Строка.Сумма/Строка.Количество, 2);
			Иначе
				Строка.Цена = Строка.Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Расходы, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			// запись версии создаваемого документа в подсистеме версионирования
			ДокументОбъект.ОбменДанными.Загрузка = Ложь;
			ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюДокумента(ДокументОбъект, Ложь, РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			// запись версии конец
						
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();
			Документ = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(Документ, "РеестрДокументов");
			РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, Документ,  Неопределено, Ложь);
		Иначе
			Документ = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДокументСчетФактура(Документ, ДанныеДляЗагрузки, Записывать) Экспорт
	
	Текст = "";
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеШапки = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	Если ДанныеШапки.Свойство("ПриемНаКомиссию") И ДанныеШапки.ПриемНаКомиссию Тогда 
		Возврат;
	КонецЕсли; 	
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда
		ДокументОбъект = Документ.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов'");
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(истина);
		Если ДанныеШапки.КодВидаОперации = "02" Тогда
			ДокументОбъект = Документы.СчетФактураПолученныйАванс.СоздатьДокумент();
		ИначеЕсли ДанныеШапки.Свойство("Сумма") И (ДанныеШапки.Сумма = 0 ИЛИ ДанныеШапки.Сумма = "-") Тогда
			ДокументОбъект = Документы.СчетФактураПолученныйНалоговыйАгент.СоздатьДокумент();
			ДанныеШапки.КодВидаОперации = "42";
		Иначе
			ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		КонецЕсли;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Заполнить(ДанныеШапки);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеШапки);
	КонецЕсли;
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеШапки);
	
	Если ДанныеШапки.Свойство("НомерИсправления") Тогда
		Если Не ДокументОбъект.Исправление Тогда
			Если ЗначениеЗаполнено(ДанныеШапки.НомерИсправления) Тогда
				ДокументОбъект.Исправление = Истина;
				ДокументОбъект.НомерИсправления = ДанныеШапки.НомерИсправления;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеШапки.Свойство("ДокументыОснования") Тогда
		Если ТипЗнч(ДанныеШапки.ДокументыОснования) = Тип("Массив") Тогда
			Для Каждого Основание Из ДанныеШапки.ДокументыОснования Цикл
				Если ТипЗнч(Основание.Ссылка) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда 
					Если Основание.Ссылка.ВидКорректировки = Перечисления.ХозяйственныеОперации.ИсправлениеОшибок Тогда
						ДокументОбъект.Корректировочный = Ложь;
						ДокументОбъект.Исправление = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДанныеШапки.КодВидаОперации = "02" Тогда
		// Заполним ТЧ ДокументыОснования
		Если ДанныеШапки.Свойство("ДокументыОснования") Тогда
			ДокументОбъект.ДокументыОснования.Очистить();
			Для Каждого ДокументОснование Из ДанныеШапки.ДокументыОснования Цикл
				Если ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.СчетФактураВыданный") И
				                     ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование = ДокументОснование;
				КонецЕсли;
			КонецЦикла;
			
			// Дополнительно заполним суммы документа.
			// Если суммы по документу-основанию не найдены, то добавляем суммы к первой строке ТЧ.
			Если Не ДокументОбъект.ДокументыОснования.Количество() = 0 И ДанныеДляЗагрузки.Свойство("Суммы") Тогда
				Суммы = ДанныеДляЗагрузки.Суммы;
				Для Каждого СтрокаТЧ Из ДокументОбъект.ДокументыОснования Цикл
					СтрокаТЧ.Сумма = 0;
					СтрокаТЧ.СуммаНДС = 0;
					Если Не ДанныеШапки.КодВидаОперации = "42" Тогда
						СтрокаТЧ.СуммаУвеличение = 0;
						СтрокаТЧ.СуммаУменьшение = 0;
						СтрокаТЧ.СуммаНДСУвеличение = 0;
						СтрокаТЧ.СуммаНДСУменьшение = 0;
					КонецЕсли;
				КонецЦикла;
				Для Каждого ТекущаяСтрока Из Суммы Цикл
					Если Не ДанныеШапки.КодВидаОперации = "42" Тогда
						СтруктураПоиска = Новый Структура("ДокументОснование,ХозяйственнаяОперация,ИсходныйДокумент,СтавкаНДС");
					Иначе
						СтруктураПоиска = Новый Структура("ДокументОснование,ИсходныйДокумент,СтавкаНДС");
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
					
					НайденныеСтроки = ДокументОбъект.ДокументыОснования.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() = 0 Тогда
						НужнаяСтрока = ДокументОбъект.ДокументыОснования[0];
					Иначе
						НужнаяСтрока = НайденныеСтроки[0];
					КонецЕсли;
					
					НужнаяСтрока.Сумма = НужнаяСтрока.Сумма + ТекущаяСтрока.Сумма;
					НужнаяСтрока.СуммаНДС = НужнаяСтрока.СуммаНДС + ТекущаяСтрока.СуммаНДС;
					
					Если ДокументОбъект.Корректировочный И Не ДанныеШапки.КодВидаОперации = "42" Тогда
						Если Суммы.Колонки.Найти("СуммаУвеличение") <> Неопределено Тогда
							НужнаяСтрока.СуммаУвеличение = НужнаяСтрока.СуммаУвеличение + ТекущаяСтрока.СуммаУвеличение;
							НужнаяСтрока.СуммаУменьшение = НужнаяСтрока.СуммаУменьшение + ТекущаяСтрока.СуммаУменьшение;
							НужнаяСтрока.СуммаНДСУвеличение = НужнаяСтрока.СуммаНДСУвеличение + ТекущаяСтрока.СуммаНДСУвеличение;
							НужнаяСтрока.СуммаНДСУменьшение = НужнаяСтрока.СуммаНДСУменьшение + ТекущаяСтрока.СуммаНДСУменьшение;
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
				
				// Устанавливаем флаг ручной корректировки сумм документа,
				// чтобы не затерлись при перезаполнении из торгового документа.
				ДокументОбъект.РучнаяКорректировкаСуммДокумента = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Заполним ТЧ Авансы
		ДокументОбъект.Авансы.Загрузить(ДанныеДляЗагрузки.Авансы);
		Если ДанныеШапки.Свойство("Сумма") И ДанныеШапки.Сумма = 0 Тогда
			ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя;
			ДокументОбъект.КодВидаОперации = "41";
			Для Каждого СтрокаАванса Из ДокументОбъект.Авансы Цикл
				СтрокаАванса.СтавкаНДС = УчетНДСУП.СтавкаНДСПоУмолчанию(ДокументОбъект.Организация, ДокументОбъект.Дата, Истина);
				ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтрокаАванса.СтавкаНДС);
				СтрокаАванса.СуммаНДС = СтрокаАванса.Сумма * ПроцентНДС / (100 + ПроцентНДС);
			КонецЦикла;
			ДокументОбъект.Сумма = ДокументОбъект.Авансы.Итог("Сумма");
			ДокументОбъект.СуммаНДС = ДокументОбъект.Авансы.Итог("СуммаНДС");
			ДокументОбъект.ДатаОтраженияВРеглУчете = ДокументОбъект.ДатаСоставления;
		Иначе
			ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			ДокументОбъект.ДатаОтраженияВРеглУчете = ДокументОбъект.Дата;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();
			Документ = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(Документ, "РеестрДокументов");
			РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, Документ,  Неопределено, Ложь);
		Иначе
			Документ = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), Документ, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДокументКорректировкиПоступления(Документ, ДанныеДляЗагрузки, Записывать) Экспорт
	
	Текст = "";
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов'");
		КонецЕсли;
	Иначе // создаем новый
		ДокументОбъект = Документы.КорректировкаПриобретения.СоздатьДокумент();
		Если ДанныеЗаполнения.Свойство("ДокументОснование") И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
			ДокументОбъект.Заполнить(ДанныеЗаполнения.ДокументОснование);
		Иначе
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
		КонецЕсли;
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	//++ Локализация
	Если ЗначениеЗаполнено(ДанныеДляЗагрузки.ШтрихкодыУпаковок) Тогда
		ЭлектронноеВзаимодействиеИСМП.НормализоватьШтрихкодыУпаковок(ДанныеДляЗагрузки.Товары, ДанныеДляЗагрузки.ШтрихкодыУпаковок);
		ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ДанныеДляЗагрузки.ШтрихкодыУпаковок);
	КонецЕсли;
	//-- Локализация
	
	Отказ = Ложь;
	НоменклатураПартнеровСервер.ЗаполнитьПустоеСопоставлениеВНоменклатуреПартнераПоНоменклатуреИБ(ДокументОбъект.Товары, Отказ);
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	// Склады в ТЧ
	Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование.Склад) И Не ЗначениеЗаполнено(ДокументОбъект.Склад) Тогда
			ДокументОбъект.Склад = ДанныеЗаполнения.ДокументОснование.Склад;
		КонецЕсли
	КонецЕсли;	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	Для Каждого Строка Из ДокументОбъект.Товары Цикл 
		Если ДокументОбъект.ЦенаВключаетНДС И Строка.Сумма <> Строка.СуммаСНДС Тогда
			Строка.Сумма = Строка.СуммаСНДС;
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Окр(Строка.Сумма/Строка.Количество, 2);
			Иначе
				Строка.Цена = Строка.Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Заполним расхождения
	Если ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
		ИспользуетсяДокументПоступлениеТоваров = Ложь;
		
		ОперацииРаздельнойЗакупки = Новый Массив;
		ОперацииРаздельнойЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
		ОперацииРаздельнойЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки);
		ОперацииРаздельнойЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути);
		ОперацииРаздельнойЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки);
		ОперацииРаздельнойЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
		
		Если ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
			ОперацияОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДокументОснование,
																			"ХозяйственнаяОперация");
																			
			ИспользуетсяДокументПоступлениеТоваров = ОперацииРаздельнойЗакупки.Найти(ОперацияОснования) <> Неопределено;
		КонецЕсли;

		НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ДокументОбъект);		
		ДокументОбъект.ЗаполнитьРасхождения(ИспользуетсяДокументПоступлениеТоваров);
	КонецЕсли;
	
	// Сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			// запись версии создаваемого документа в подсистеме версионирования
			ДокументОбъект.ОбменДанными.Загрузка = Ложь;
			ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюДокумента(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			// запись версии конец
						
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();
			Документ = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(Документ, "РеестрДокументов");
			РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, Документ,  Неопределено, Ложь);
		Иначе
			Документ = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), Документ, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДокументВозвратаТоваровОтПокупателя(Документ, ДанныеДляЗагрузки, Записывать) Экспорт
	
	Текст = "";
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов'");
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	// попробуем найти документ реализации
	НайденныйДок = Неопределено;
	Если ДанныеЗаполнения.Свойство("НомерДокументаОснования") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерДокументаОснования) Тогда
		НайденныйДок = НайтиРеализациюТоваровУслуг(ДанныеЗаполнения.Организация, ДанныеЗаполнения.НомерДокументаОснования, ДанныеЗаполнения.ДатаДокументаОснования);
	КонецЕсли;
	
	ДокументОбъект.ДокументРеализации = НайденныйДок;
	
	// Заполнение партнера, если контрагент создается новый.
	ПартнерКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "Партнер"); 
	Если Не ЗначениеЗаполнено(ДокументОбъект.Партнер) И ЗначениеЗаполнено(ПартнерКонтрагента) Тогда
		ДокументОбъект.Партнер = ПартнерКонтрагента;
	КонецЕсли;
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Для Каждого Строка Из ДокументОбъект.Товары Цикл
		Если ЗначениеЗаполнено(НайденныйДок) Тогда 
			Строка.ДокументРеализации = НайденныйДок;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументОбъект.Товары.Итог("СуммаНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	Для Каждого Строка Из ДокументОбъект.Товары Цикл 
		Если ДокументОбъект.ЦенаВключаетНДС И Строка.Сумма <> Строка.СуммаСНДС Тогда
			Строка.Сумма = Строка.СуммаСНДС;
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Окр(Строка.Сумма/Строка.Количество, 2);
			Иначе
				Строка.Цена = Строка.Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			// запись версии создаваемого документа в подсистеме версионирования
			ДокументОбъект.ОбменДанными.Загрузка = Ложь;
			ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюДокумента(ДокументОбъект, Ложь, РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			// запись версии конец
						
			ДокументОбъект.Записать(РежимЗаписи);
			ДокументОбъект.Разблокировать();			
			Документ = ДокументОбъект.Ссылка;
			
			//Запись в Реестр документов
			ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(Документ, "РеестрДокументов");
			РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, Документ,  Неопределено, Ложь);
		Иначе
			Документ = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), Документ, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Функция ПодготовитьСтруктуруДляПриобретенияТоваровУслугПоПередачеТоваров(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", Валюта, ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	ДанныеОбъекта.Вставить("КурсЧислитель", 1);
	ДанныеОбъекта.Вставить("КурсЗнаменатель", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "Поставщик";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
	КонецЕсли;
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика, Контрагент);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В базе данных не удалось найти контрагента с ИНН ""%1"" и КПП ""%2""'"),
			ИННПоставщика, КПППоставщика);
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "Плательщик";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
	КонецЕсли;
	Организация = Справочники.Организации.ПустаяСсылка();
	СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя, Организация);
	ДанныеОбъекта.Вставить("Организация", Организация);
	
	Товары = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("НомерПоДаннымПоставщика");
	Товары.Колонки.Добавить("ДатаПоДаннымПоставщика");
	Товары.Колонки.Добавить("НомерПоДаннымКлиента");
	Товары.Колонки.Добавить("ДатаПоДаннымКлиента");
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Товары.Добавить();
	
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаНДС");
		
		// Необязательные реквизиты:
		МассаНетто = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.МассаНетто");
		КоличествоМест = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.КоличествоМест");
		НоваяСтрока.Количество = ?(ЗначениеЗаполнено(МассаНетто), МассаНетто, КоличествоМест);
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаСНДС");
		
		Сопоставление = СведенияОТоваре.Строки.Найти(
			"ТаблицаТоваров.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаТоваров.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаТоваров.НомерСтроки.Сопоставление.ХарактеристикаИБ");
			Если ЗначениеЗаполнено(Характеристика) Тогда
				НоваяСтрока.Характеристика = Характеристика;
			КонецЕсли;
			
			Упаковка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаТоваров.НомерСтроки.Сопоставление.УпаковкаИБ");
			Если ЗначениеЗаполнено(Упаковка) Тогда
				НоваяСтрока.Упаковка = Упаковка;
			КонецЕсли;
			
		КонецЕсли;
		
		ТипНоменклатуры = НоваяСтрока.Номенклатура.ТипНоменклатуры;
		Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			НоваяСтрока.СписатьНаРасходы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары", Товары);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПриобретенияТоваровУслугПоПередачеРабот(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", Валюта, ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	ДанныеОбъекта.Вставить("КурсЧислитель", 1);
	ДанныеОбъекта.Вставить("КурсЗнаменатель", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "Заказчик";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
	КонецЕсли;
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика, Контрагент);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В базе данных не удалось найти контрагента с ИНН ""%1"" и КПП ""%2""'"),
			ИННПоставщика, КПППоставщика);
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "Исполнитель";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
	КонецЕсли;
	Организация = Справочники.Организации.ПустаяСсылка();
	СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя, Организация);
	ДанныеОбъекта.Вставить("Организация", Организация);
	
	Товары = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("НомерПоДаннымПоставщика");
	Товары.Колонки.Добавить("ДатаПоДаннымПоставщика");
	Товары.Колонки.Добавить("НомерПоДаннымКлиента");
	Товары.Колонки.Добавить("ДатаПоДаннымКлиента");
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Товары.Добавить();
	
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СуммаНДС");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СуммаБезНДС");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СуммаСНДС");
		
		Сопоставление = СведенияОТоваре.Строки.Найти(
			"ТаблицаУслуг.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаУслуг.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаУслуг.НомерСтроки.Сопоставление.ХарактеристикаИБ");
			Если ЗначениеЗаполнено(Характеристика) Тогда
				НоваяСтрока.Характеристика = Характеристика;
			КонецЕсли;
			
			Упаковка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаУслуг.НомерСтроки.Сопоставление.УпаковкаИБ");
			Если ЗначениеЗаполнено(Упаковка) Тогда
				НоваяСтрока.Упаковка = Упаковка;
			КонецЕсли;
			
		КонецЕсли;
		
		ТипНоменклатуры = НоваяСтрока.Номенклатура.ТипНоменклатуры;
		Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			НоваяСтрока.СписатьНаРасходы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары", Товары);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияУслугПоПередачеРабот(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", Валюта, ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	ДанныеОбъекта.Вставить("КурсЧислитель", 1);
	ДанныеОбъекта.Вставить("КурсЗнаменатель", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "Заказчик";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
	КонецЕсли;
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();	
	СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика, Контрагент);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "Исполнитель";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
	КонецЕсли;
	Организация = Справочники.Организации.ПустаяСсылка();
	СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя, Организация);
	ДанныеОбъекта.Вставить("Организация", Организация);
	
	ТЗ = Документы.ПриобретениеУслугПрочихАктивов.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,  "ТаблицаУслуг.НомерСтроки.СуммаНДС");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СуммаБезНДС");
		
		НаименованиеНоменклатуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.НаименованиеНоменклатуры");
		Если ЗначениеЗаполнено(НаименованиеНоменклатуры) Тогда
			НоваяСтрока.Содержание = НаименованиеНоменклатуры;
		Иначе
			НоваяСтрока.Содержание = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Описание");
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Расходы", ТЗ);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

#Область ПередачаТоваров

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаТоваров_ИнформацияПродавца.
Процедура ЗаполнитьДанныеПередачаТоваров_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	СтруктураЭД = ОбщегоНазначения.СкопироватьРекурсивно(Настройки, Ложь);
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Основание);
	ПараметрыПечати = Новый Структура("ВыводитьУслуги", Истина);
	
	ИмяОбъекта = Основание.Метаданные().Имя;	
	МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ИмяОбъекта);
	Если МенеджерОбъекта = Неопределено Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяОбъекта);
	КонецЕсли;
		
	ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыТОРГ12(ПараметрыПечати, МассивОбъектов);
	
	ВыборкаТоваров = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	РеквизитыШапки = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПоиска = Новый Структура("Ссылка", РеквизитыШапки.Ссылка);
	ВыборкаТоваров.Сбросить();
	
	НайденСледующий = ВыборкаТоваров.НайтиСледующий(СтруктураПоиска);
	
	Если НайденСледующий Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, 
			"НомерТоварнойНакладной", 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапки.Номер));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, 
			"ДатаТоварнойНакладной", 
			РеквизитыШапки.Дата);
		
		Если ЗначениеЗаполнено(РеквизитыШапки.Основание) 
			И ЗначениеЗаполнено(РеквизитыШапки.ОснованиеДата) Тогда
			ДокументыОснования = Новый ТаблицаЗначений;
			ДокументыОснования.Колонки.Добавить("ДокОснованиеНаименование");
			ДокументыОснования.Колонки.Добавить("ДокОснованиеНомер");
			ДокументыОснования.Колонки.Добавить("ДокОснованиеДата");
		
			СтрокаДокументыОснования = ДокументыОснования.Добавить();
			
			Если СтрНайти(РеквизитыШапки.Основание, "№") Тогда
				СтрокаНаименование = Лев(РеквизитыШапки.Основание, СтрНайти(РеквизитыШапки.Основание, "№") - 2);
			Иначе
				СтрокаНаименование = РеквизитыШапки.Основание;
			КонецЕсли;
			СтрокаДокументыОснования.ДокОснованиеНаименование 	= СтрокаНаименование;
			СтрокаДокументыОснования.ДокОснованиеНомер 			= РеквизитыШапки.ОснованиеНомер;
			СтрокаДокументыОснования.ДокОснованиеДата 			= РеквизитыШапки.ОснованиеДата;
			
			// Дополним таблицу оснований параметрами обработки ошибок.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыОснования,
				"ДокОснованиеНаименование",,, НСтр("ru = 'Не указано наименование документа основания'"));
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыОснования,
				"ДокОснованиеНомер",,, НСтр("ru = 'Не указан номер документа основания'"));
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыОснования,
				"ДокОснованиеДата",,, НСтр("ru = 'Не указана дата документа основания'"));
			
			Если ЗначениеЗаполнено(СтрокаНаименование) Тогда
				ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(Данные, ДокументыОснования, "Основание");
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'Возникла ошибка при заполнении основания отгрузки. Возможные причины:
			|	- в документе отгрузки не указан договор
			|	- в договоре не указана дата'");
			ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(Данные,
				"Основание.НомерСтроки.ДокОснованиеДата", ТекстОшибки);
		КонецЕсли;
			
		СведенияОПоставщике       = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.БанковскийСчетОрганизации, РеквизитыШапки.Дата);
		СведенияОПокупателе       = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.БанковскийСчетКонтрагента, РеквизитыШапки.Дата);
		ЗаполнитьДанныеУчастникаТОРГ(Данные, СведенияОПоставщике, "Поставщик",  "Юр", РеквизитыШапки.Дата);
		ЗаполнитьДанныеУчастникаТОРГ(Данные, СведенияОПокупателе, "Плательщик", "Юр", РеквизитыШапки.Дата);
		// Заполняем структурное подразделение
		ЗаполнитьСтруктурноеПодразделение(Данные, "Поставщик", РеквизитыШапки.Ссылка.Подразделение);

		Если ЗначениеЗаполнено(РеквизитыШапки.Организация) Тогда
			НаименованиеСоставителяДокумента = СведенияОПоставщике.ПолноеНаименование + ?(ЗначениеЗаполнено(
				СведенияОПоставщике.КПП), СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПоставщике.ИНН,
				СведенияОПоставщике.КПП), СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПоставщике.ИНН));
				
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				РеквизитыШапки.Ссылка, "Объект.Организация");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				Данные, "НаименованиеСоставителяДокумента", НаименованиеСоставителяДокумента,
				ПараметрыОбработкиОшибок);
		КонецЕсли;
		
		СведенияОГрузоотправителе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.БанковскийСчетГрузоотправителя, РеквизитыШапки.Дата);
		СведенияОГрузополучателе  = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель, РеквизитыШапки.БанковскийСчетГрузополучателя, РеквизитыШапки.Дата);
		Если РеквизитыШапки.Организация <> РеквизитыШапки.Грузоотправитель Тогда
			ЗаполнитьДанныеУчастникаТОРГ(Данные, СведенияОГрузоотправителе, "Грузоотправитель", "Факт", РеквизитыШапки.Дата);
		Иначе
			ЗаполнитьДанныеУчастникаТОРГ(Данные, СведенияОПоставщике, "Грузоотправитель", "Факт", РеквизитыШапки.Дата);
		КонецЕсли;
		ЗаполнитьДанныеУчастникаТОРГ(Данные, СведенияОГрузополучателе, "Грузополучатель",  "Факт", РеквизитыШапки.Дата);
		
		ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
		|	- в документе указана валюта,
		|	- для нее заполнен код по Общероссийскому классификатору валют.'");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ВалютаКод", "643", ТекстОшибки);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ВалютаНаименование", "Российский рубль");
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
		ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
		ТаблицаТоваров.Колонки.Добавить("Сорт");
		ТаблицаТоваров.Колонки.Добавить("Артикул");
		ТаблицаТоваров.Колонки.Добавить("КодТовара");
		ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
		ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
		ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
		ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
		ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
		ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
		ТаблицаТоваров.Колонки.Добавить("МассаНетто");
		ТаблицаТоваров.Колонки.Добавить("Цена");
		ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
		ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
		ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
		ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
		ТаблицаТоваров.Колонки.Добавить("Номенклатура");
		ТаблицаТоваров.Колонки.Добавить("Характеристика");
		ТаблицаТоваров.Колонки.Добавить("Упаковка");
		ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
		ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
		ТаблицаТоваров.Колонки.Добавить("Сопоставление");
		
		ИтоговыеСуммы = СтруктураИтоговыеСуммы(СтруктураЭД.ТипДокумента);
		
		ИспользоватьНаборы = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаТоваров, "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
		КонецЕсли;
	
		СтрокаТовары = ВыборкаТоваров.Выбрать();
		
		ЗаполнениеКодаТовара = СтруктураЭД.ВариантыЗаполненияПолей.ТоварКод;
	
		ШтрихкодыКомбинаций = Неопределено;
		ШтрихкодыНоменклатуры = Неопределено;
		НоменклатураПартнеровСервер.ШтрихкодыПоТоварам(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

		ВыборкаДляСопоставления = НоменклатураПартнеровСервер.ВыборкаДляСопоставленияНоменклатуры(Основание);
		СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
		ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
		ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
		
		Пока СтрокаТовары.Следующий() Цикл
			
			Если ИспользоватьНаборы Тогда
				Если СтрокаТовары.ЭтоНабор и СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах <> Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			
			НоваяСтрока.Артикул = СтрокаТовары.НоменклатураКод;
			
			НоваяСтрока.МассаНетто = СтрокаТовары.Количество;
			НоваяСтрока.Цена  = Окр(СтрокаТовары.Цена, 2);
			ОкруглитьМассыТовара(НоваяСтрока);
			
			Если ЗначениеЗаполнено(НоваяСтрока.КоличествоМест) Тогда
				Если НоваяСтрока.КоличествоМест <> Цел(НоваяСтрока.КоличествоМест) Тогда
					НоваяСтрока.КоличествоМест = Цел(НоваяСтрока.КоличествоМест) + 1;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(НоваяСтрока.КоличествоВОдномМесте) Тогда
				Если НоваяСтрока.КоличествоВОдномМесте <> Цел(НоваяСтрока.КоличествоВОдномМесте) Тогда
					НоваяСтрока.КоличествоВОдномМесте = Цел(НоваяСтрока.КоличествоВОдномМесте) + 1;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
			НоваяСтрока.НаименованиеНоменклатуры = СтрокаТовары.НоменклатураНаименование;
			НоваяСтрока.НаименованиеХарактеристики 	= СтрокаТовары.ХарактеристикаНаименование;

			УпаковкаИзДокумента = Неопределено;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "Упаковка") И ЗначениеЗаполнено(СтрокаТовары.Упаковка) Тогда
				УпаковкаИзДокумента = СтрокаТовары.Упаковка;
			Иначе
				УпаковкаИзДокумента = ЭлектронноеВзаимодействиеУТВызовСервера.ЕдиницаХраненияНоменклатуры(СтрокаТовары.Номенклатура)
			КонецЕсли;		
		
			// Сопоставление.
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
			Если СтрокаТовары.Характеристика <> Неопределено Тогда
				ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
			Иначе
				ПараметрыОтбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());				
			КонецЕсли;
			ПараметрыОтбора.Вставить("Упаковка", УпаковкаИзДокумента);
			СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
				НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
				НоваяСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
		    Иначе
				НоваяСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры, УпаковкаИзДокумента);
			КонецЕсли;
	
			//Анализ вариантов заполнения
			Если ЗаполнениеКодаТовара = "Штрихкод" И НоваяСтрока.Сопоставление.Свойство("ШтрихкодКомбинации") Тогда
				НоваяСтрока.КодТовара = НоваяСтрока.Сопоставление.ШтрихкодКомбинации;
			ИначеЕсли ЗаполнениеКодаТовара = "Штрихкод" И НоваяСтрока.Сопоставление.Свойство("ШтрихкодыНоменклатуры") Тогда
				НоваяСтрока.ТоварКод = НоваяСтрока.Сопоставление.ШтрихкодыНоменклатуры[0];				
			Иначе
				НоваяСтрока.КодТовара = СтрокаТовары.НоменклатураКод;
			КонецЕсли;
			//Конец анализа вариантов заполнения
			
			РассчитатьИтоговыеСуммы(ИтоговыеСуммы, НоваяСтрока, СтруктураЭД.ТипДокумента);
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ЕдиницаИзмеренияНаименование",,, НСтр("ru = 'Не заполнено наименование единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"БазоваяЕдиницаКод",,, НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(Данные, ТаблицаТоваров, "ТаблицаТоваров");
		
		ЗаполнитьРеквизитыПодвала(РеквизитыШапки, ИтоговыеСуммы, Данные);
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				Данные, 
				"ВидОперации", 
				Перечисления.ВидыОперацийЭД.Исправление);
			ЗаполнитьДокументыОснования(Данные, Основание);
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				Данные, 
				"ВидОперации", 
				Перечисления.ВидыОперацийЭД.ПродажаКомиссия);
			ЗаполнитьУИП(Данные, Основание.ИдентификаторПлатежа);			
		КонецЕсли;
		
	Иначе
		
		Если (РеквизитыШапки.Статус <> Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено) Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1 для формирования ЭД должен быть в статусе ""Реализовано"".'"), 
				РеквизитыШапки.Ссылка);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1 не содержит данных для формирования ЭД.'"), 
				РеквизитыШапки.Ссылка);				
		КонецЕсли;
			
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаТоваров_ИнформацияПокупателя.
Процедура ЗаполнитьДанныеПередачаТоваров_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	ДокументОснование = Документы.СчетФактураПолученный.ПустаяСсылка();
	Для каждого Основание Из Основания Цикл
		ДокументОснование = Основание;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.Дата КАК Дата,
	|	ПриобретениеТоваровУслуг.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	ПриобретениеТоваровУслуг.Организация.ИНН КАК ОрганизацияИНН,
	|	ПриобретениеТоваровУслуг.Организация.КПП КАК ОрганизацияКПП
	|ИЗ
	|	&ТипДокумента КАК ПриобретениеТоваровУслуг
	|ГДЕ
	|	ПриобретениеТоваровУслуг.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Дата КАК Дата,
	|	СчетФактураПолученный.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	СчетФактураПолученный.Организация.ИНН КАК ОрганизацияИНН,
	|	СчетФактураПолученный.Организация.КПП КАК ОрганизацияКПП	
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка = &Ссылка
	|";
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипДокумента", "Документ.ПриобретениеУслугПрочихАктивов");
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипДокумента", "Документ.КорректировкаПриобретения");
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипДокумента", "Документ.ВозвратТоваровОтКлиента");		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипДокумента", "Документ.ПриобретениеТоваровУслуг");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ДатаПолученияТоваров = ТекущаяДатаСеанса();
	ОрганизацияНаименованиеПолное =	"";
	
	Если Не РезультатЗапроса[0].Пустой() Тогда // В основаниях есть документ поступления
		
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		ДатаПолученияТоваров 		  =	Выборка.Дата;
		ОрганизацияНаименованиеПолное =	Выборка.ОрганизацияНаименованиеПолное;
		
	ИначеЕсли Не РезультатЗапроса[1].Пустой() Тогда // основание - СФ
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
		ДатаПолученияТоваров =			 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	ИначеЕсли РезультатЗапроса[0].Пустой() и РезультатЗапроса[1].Пустой() Тогда
		
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ДатаПолученияТоваров =		ДокументОснование.Дата;
			ОрганизацияСсылка = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(ДокументОснование.Организация);
			ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ОрганизацияСсылка.НаименованиеПолное), ОрганизацияСсылка.НаименованиеПолное, ОрганизацияСсылка.Наименование);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизацияНаименованиеПолное) И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ОрганизацияСсылка = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
		ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ОрганизацияСсылка.НаименованиеПолное), ОрганизацияСсылка.НаименованиеПолное, ОрганизацияСсылка.Наименование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка) Тогда
		СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН %2'"),
				ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));
	Иначе
		СоставительДокумента = ОрганизацияНаименованиеПолное;		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
		"СоставительДокументаНаименование", СоставительДокумента);
	
	Если ЗначениеЗаполнено(ДатаПолученияТоваров) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, "ДатаПолученияГруза", ДатаПолученияТоваров);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаТоваров.
Процедура НайтиСоздатьДокументПередачаТоваров(ДеревоДанных, СсылкаНаВладельца, СпособОбработки, ОписаниеОшибки) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПриобретенияТоваровУслугПоПередачеТоваров(ДеревоДанных);
	
	Если СпособОбработки = "ВозвратТоваровОтКлиента" Тогда
		ЗаполнитьДокументВозвратаТоваровОтПокупателя(СсылкаНаВладельца, ДанныеДляЗагрузки, Истина);		
	Иначе
		Если ДанныеДляЗагрузки.Шапка.Исправление Тогда
			ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеДляЗагрузки, Истина)
		Иначе
			ЗаполнитьДокументПриобретенияТоваровУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаУслуг

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаУслуг_ИнформацияПродавца.
Процедура ЗаполнитьДанныеПередачаУслуг_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт

	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Основание);
	
	ПараметрыПечати = Новый Структура;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ДанныеДляПечати = Документы["АктВыполненныхРабот"].ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
	Иначе
		ДанныеДляПечати = Документы[Основание.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыАктОбОказанииУслуг(ПараметрыПечати, МассивОбъектов);
	КонецЕсли;
	
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	РеквизитыШапки = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПоиска = Новый Структура("Ссылка", РеквизитыШапки.Ссылка);
	ВыборкаПоДокументам.Сбросить();
	
	Если ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, 
			"НомерАкта", 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапки.Номер, Ложь, Ложь));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, 
			"ДатаАкта", 
			РеквизитыШапки.Дата);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, 
			"СведенияПоВыполнениюУслуг.ДатаИсполнения",
			РеквизитыШапки.Дата);
			
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.Ссылка, "Основание, ОснованиеНомер, ОснованиеДата");
		ОснованиеНаименование = РеквизитыОснования.Основание;
		ОснованиеНомер = РеквизитыОснования.ОснованиеНомер;
		ОснованиеДата  = РеквизитыОснования.ОснованиеДата;
			
		Если ЗначениеЗаполнено(ОснованиеНаименование) 
			И ЗначениеЗаполнено(ОснованиеДата) Тогда
			
			ДокументыОснования = Новый ТаблицаЗначений;
			ДокументыОснования.Колонки.Добавить("ДокОснованиеНаименование");
			ДокументыОснования.Колонки.Добавить("ДокОснованиеНомер");
			ДокументыОснования.Колонки.Добавить("ДокОснованиеДата");
		
			СтрокаДокументыОснования = ДокументыОснования.Добавить();
			
			Если СтрНайти(ОснованиеНаименование, "№") Тогда
				СтрокаНаименование = Лев(ОснованиеНаименование, СтрНайти(ОснованиеНаименование, "№") - 2);
			Иначе
				СтрокаНаименование = ОснованиеНаименование;
			КонецЕсли;
			СтрокаДокументыОснования.ДокОснованиеНаименование 	= СтрокаНаименование;
			СтрокаДокументыОснования.ДокОснованиеНомер 			= ОснованиеНомер;
			СтрокаДокументыОснования.ДокОснованиеДата 			= ОснованиеДата;
			
			// Дополним таблицу оснований параметрами обработки ошибок.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыОснования,
				"ДокОснованиеНаименование",,, НСтр("ru = 'Не указано наименование документа основания'"));
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыОснования,
				"ДокОснованиеНомер",,, НСтр("ru = 'Не указан номер документа основания'"));
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыОснования,
				"ДокОснованиеДата",,, НСтр("ru = 'Не указана дата документа основания'"));
			
			Если ЗначениеЗаполнено(СтрокаНаименование) Тогда
				ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(Данные, ДокументыОснования, "Основание");
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'Возникла ошибка при заполнении основания отгрузки. Возможные причины:
			|	- в документе отгрузки не указан договор
			|	- в договоре не указана дата'");
			ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(Данные,
				"Основание.НомерСтроки.ДокОснованиеДата", ТекстОшибки);
		КонецЕсли;
			
		ТекстЗаголовка = "Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ, с одной стороны и представитель ЗАКАЗЧИКА с другой
						|стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги).";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "Заголовок", ТекстЗаголовка);
		
		Если ТипЗнч(Основание) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.СчетОрганизации, РеквизитыШапки.Дата);
			СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.СчетКонтрагента, РеквизитыШапки.Дата);
		Иначе
			СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, , РеквизитыШапки.Дата);
			СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, , РеквизитыШапки.Дата);
		КонецЕсли;	
		
		ЗаполнитьДанныеУчастникаТОРГ(Данные, СведенияОПоставщике, "Исполнитель", "Юр", РеквизитыШапки.Дата);
		ЗаполнитьДанныеУчастникаТОРГ(Данные, СведенияОПокупателе, "Заказчик",    "Юр", РеквизитыШапки.Дата);
	
		Если ЗначениеЗаполнено(РеквизитыШапки.Организация) Тогда
			НаименованиеСоставителяДокумента = СведенияОПоставщике.ПолноеНаименование + ?(ЗначениеЗаполнено(
				СведенияОПоставщике.КПП), СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПоставщике.ИНН,
				СведенияОПоставщике.КПП), СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПоставщике.ИНН));
				
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				РеквизитыШапки.Ссылка, "Объект.Организация");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				Данные, "НаименованиеСоставителяДокумента", НаименованиеСоставителяДокумента,
				ПараметрыОбработкиОшибок);
		КонецЕсли;
		
		// Заполняем структурное подразделение
		ЗаполнитьСтруктурноеПодразделение(Данные, "Исполнитель", РеквизитыШапки.Ссылка.Подразделение);
		
		ВалютаКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.Валюта, "Код");
		ВалютаНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.Валюта, "НаименованиеПолное");
		ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
		|	- в документе указана валюта,
		|	- для нее заполнен код по Общероссийскому классификатору валют.'");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ВалютаКод", ВалютаКод, ТекстОшибки);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ВалютаНаименование", ВалютаНаименование);
		
		ТаблицаУслуг = Новый ТаблицаЗначений();
		ТаблицаУслуг.Колонки.Добавить("НаименованиеНоменклатуры");
		ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
		ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияКод");
		ТаблицаУслуг.Колонки.Добавить("Количество");
		ТаблицаУслуг.Колонки.Добавить("Цена");
		ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС");
		ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
		ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
		ТаблицаУслуг.Колонки.Добавить("СуммаСНДС");
		ТаблицаУслуг.Колонки.Добавить("Описание");
		ТаблицаУслуг.Колонки.Добавить("ДокументОснование");
		ТаблицаУслуг.Колонки.Добавить("Номенклатура");
		ТаблицаУслуг.Колонки.Добавить("ДопДанныеПодписанные");
		ТаблицаУслуг.Колонки.Добавить("ДопДанныеНеПодписанные");
		ТаблицаУслуг.Колонки.Добавить("Сопоставление");
		
		// Выводим строки таблицы Услуги
		Выборка = ВыборкаПоДокументам.Выбрать();
		
		ШтрихкодыКомбинаций = Неопределено;
		ШтрихкодыНоменклатуры = Неопределено;
		НоменклатураПартнеровСервер.ШтрихкодыПоТоварам(Выборка, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

		ВыборкаДляСопоставления = НоменклатураПартнеровСервер.ВыборкаДляСопоставленияНоменклатуры(Основание);
		СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
		ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
		ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.НаименованиеНоменклатуры = Выборка.УслугаНаименованиеПолное;
			ЕстьХарактеристика = ЗначениеЗаполнено(Выборка.Характеристика);
			
			НоваяСтрока.Описание = 
				Выборка.УслугаНаименованиеПолное + ?(ЕстьХарактеристика, " (" + Выборка.ХарактеристикаНаименованиеПолное + ")", "");
			
			НоваяСтрока.СуммаБезНДС = Выборка.Сумма - ?(РеквизитыШапки.ЦенаВключаетНДС И Выборка.СуммаНДС > 0, Выборка.СуммаНДС, 0);
			НоваяСтрока.СуммаСНДС   = НоваяСтрока.СуммаБезНДС + Выборка.СуммаНДС;
			
			Если РеквизитыШапки.ЦенаВключаетНДС Тогда
				НоваяСтрока.Цена = ?(Выборка.Количество = 0, 0, Окр(НоваяСтрока.СуммаБезНДС / НоваяСтрока.Количество, 2));
			КонецЕсли;
			
			НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(Выборка.ЕдиницаИзмеренияКод);
			
			Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
				УпаковкаИзДокумента = Выборка.ЕдиницаИзмерения;
			Иначе
				УпаковкаИзДокумента = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();					
			КонецЕсли;
			
			// Сопоставление.
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", Выборка.Номенклатура);
			Если Выборка.Характеристика <> Неопределено Тогда
				ПараметрыОтбора.Вставить("Характеристика", Выборка.Характеристика);
			Иначе
				ПараметрыОтбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());				
			КонецЕсли;
			ПараметрыОтбора.Вставить("Упаковка", УпаковкаИзДокумента);
			СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
				НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
				НоваяСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
		    Иначе
				НоваяСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(Выборка, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры, УпаковкаИзДокумента);
			КонецЕсли;		
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг,
			"Количество",,, НСтр("ru = 'Не указано количество товара в табличной части'"));
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг,
			"ЕдиницаИзмеренияНаименование",,, НСтр("ru = 'Не заполнено наименование единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг,
			"ЕдиницаИзмеренияКод",,, НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(Данные, ТаблицаУслуг, "ТаблицаУслуг");
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, 
			"ОписаниеУслуги.НачалоРабот", 
			РеквизитыШапки.Дата);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные,
			"ОписаниеУслуги.КонецРабот", 
			РеквизитыШапки.Дата);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, 
			"ОписаниеУслуги.СуммаБезНДСИтого",
			ТаблицаУслуг.Итог("СуммаБезНДС"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, 
			"ОписаниеУслуги.СуммаНДСИтого",
			ТаблицаУслуг.Итог("СуммаНДС"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, 
			"ОписаниеУслуги.СуммаСНДСИтого",
			ТаблицаУслуг.Итог("СуммаСНДС"));
			
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				Данные, 
				"ВидОперации", 
				Перечисления.ВидыОперацийЭД.Исправление);
			ЗаполнитьДокументыОснования(Данные, Основание);
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				Данные, 
				"ВидОперации", 
				Перечисления.ВидыОперацийЭД.ПродажаКомиссия);
			ЗаполнитьУИП(Данные, Основание.ИдентификаторПлатежа); 			
		КонецЕсли; 		

	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаУслуг_ИнформацияПокупателя.
Процедура ЗаполнитьДанныеПередачаУслуг_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт

	Поступление = Документы.ПриобретениеУслугПрочихАктивов.ПустаяСсылка();
	Для каждого Основание Из Основания Цикл
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
			Поступление = Основание;
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриобретениеУслугПрочихАктивов.Дата КАК Дата,
		|	ПриобретениеУслугПрочихАктивов.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ПриобретениеУслугПрочихАктивов.Организация.ИНН КАК ОрганизацияИНН,
		|	ПриобретениеУслугПрочихАктивов.Организация.КПП КАК ОрганизацияКПП
		|ИЗ
		|	Документ.ПриобретениеУслугПрочихАктивов КАК ПриобретениеУслугПрочихАктивов
		|ГДЕ
		|	ПриобретениеУслугПрочихАктивов.Ссылка = &Основание";
	Запрос.УстановитьПараметр("Основание", Поступление);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Дата) Тогда
		ДатаПолучения = Выборка.Дата;
	Иначе
		ДатаПолучения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка) Тогда
		СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН %2'"),
				Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));
	Иначе
		СоставительДокумента = "";		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
		"СоставительДокументаНаименование", СоставительДокумента);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, 
		"СведенияПоВыполнениюУслуг.ДатаЗаказа", ДатаПолучения);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаРезультатовРабот.
Процедура НайтиСоздатьДокументПередачаРезультатовРабот(ДеревоДанных, СсылкаНаВладельца, СпособОбработки, ОписаниеОшибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СпособОбработки = "ПриобретениеТоваровУслуг" Тогда
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПриобретенияТоваровУслугПоПередачеРабот(ДеревоДанных);
		ЗаполнитьДокументПриобретенияТоваровУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Истина);
	Иначе
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияУслугПоПередачеРабот(ДеревоДанных);		
		Если ДанныеДляЗагрузки.Шапка.Исправление Тогда
			ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеДляЗагрузки, Истина)
		Иначе
			ЗаполнитьДокументПоступленияУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Методы_УПД_УКД

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУКД_ИнформацияПродавца.
Процедура ЗаполнитьДанныеУКД_ИнформацияПродавца(Основание, Настройки, Данные, Описание, Отказ) Экспорт

	ВсеВидыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ВидДокумента = Настройки.ТипДокумента;

	СтруктураЭД = ОбщегоНазначения.СкопироватьРекурсивно(Настройки, Ложь);

	ДокОснование = Основание; 
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		СчетФактура = Основание;
		ДокОснование = СчетФактура.ДокументОснование;
	Иначе
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(Основание);		
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(МассивОбъектов);
		МассивСчетовФактур = РезультатАнализа.СчетаФактурыНаПечать;
		Если МассивСчетовФактур.Количество() = 0 Тогда
			НоваяСчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяСчетФактура, Основание);
			СтрокаОснований = НоваяСчетфактура.ДокументыОснования.Добавить();
			
			НоваяСчетФактура.ДокументОснование 	= Основание;
			СтрокаОснований.ДокументОснование 	= Основание;
			НоваяСчетФактура.КодВидаОперации = 
				Документы.СчетФактураВыданный.КодВидаОперации(НоваяСчетфактура.ДокументыОснования, 
						НоваяСчетфактура.Покупатели, НоваяСчетфактура.Дата, Основание);
			НоваяСчетФактура.КодВидаОперацииНаУменьшение 	= "18";
			НоваяСчетФактура.Дата 				= ТекущаяДатаСеанса();
			НоваяСчетФактура.ДатаВыставления 	= ТекущаяДатаСеанса();
			НоваяСчетФактура.ЗаполнитьПараметрыСчетаФактурыПоОснованию(Основание);
			
			НоваяСчетФактура.Записать(РежимЗаписиДокумента.Проведение);
			МассивСчетовФактур.Добавить(НоваяСчетФактура.Ссылка);
			
			//Запись в Реестр документов
			ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(НоваяСчетФактура.Ссылка, "РеестрДокументов");
			РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, НоваяСчетФактура.Ссылка,  Неопределено, Ложь);
		КонецЕсли;
		СчетФактура = МассивСчетовФактур[0];
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СчетФактура);
	
	ПараметрыПечати = Новый Структура();
	ПараметрыПечати.Вставить("ЗаполнитьДанныеШтрихкодовДляУКДДо", Истина);
	
	СтруктураДанных = Документы.СчетФактураВыданный.ПолучитьДанныеДляПечатнойФормыУКД(ПараметрыПечати, МассивОбъектов);
	
	Если ВидДокумента = ВсеВидыДокументов.УКД Тогда				
		СтруктураЭД.Вставить("Функция", "КСЧФДИС");		
		ЗаполнитьДанныеСчетаФактурыУКД(СтруктураДанных, СтруктураЭД, Данные);		
		ЗаполнитьДанныеПервичногоДокументаУКД(СтруктураДанных, Настройки, СтруктураЭД, Данные);				
	ИначеЕсли ВидДокумента = ВсеВидыДокументов.КорректировочныйСчетФактура Тогда		
		СтруктураЭД.Вставить("Функция", "КСЧФ");
		ЗаполнитьДанныеСчетаФактурыУКД(СтруктураДанных, СтруктураЭД, Данные);
		ЗаполнитьДанныеПервичногоДокументаУКД(СтруктураДанных, Настройки, СтруктураЭД, Данные);
	Иначе		
		СтруктураЭД.Вставить("Функция", "ДИС");
		ЗаполнитьДанныеПервичногоДокументаУКД(СтруктураДанных, Настройки, СтруктураЭД, Данные);	
	КонецЕсли;

	ФункцияУКД = СтруктураЭД.Функция;	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "Функция", ФункцияУКД);

	ПередаточныеДокументы = Новый Массив;
	ПередаточныеДокументы.Добавить(ДокОснование);
	
	Если ФункцияУКД = "КСЧФДИС" Тогда		
		Если Основание = СчетФактура Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Описание.Основания, ПередаточныеДокументы);
		Иначе
			Описание.Основания.Добавить(СчетФактура);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУКД_ИнформацияПокупателя.
Процедура ЗаполнитьДанныеУКД_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	ДокументОснование = Документы.СчетФактураПолученный.ПустаяСсылка();
	Для каждого Основание Из Основания Цикл
		ДокументОснование = Основание;
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПриобретения.Дата,
	|	КорректировкаПриобретения.Организация.НаименованиеПолное,
	|	КорректировкаПриобретения.Организация.ИНН КАК ОрганизацияИНН,
	|	КорректировкаПриобретения.Организация.КПП КАК ОрганизацияКПП	
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|ГДЕ
	|	КорректировкаПриобретения.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.Организация.НаименованиеПолное,
	|	СчетФактураПолученный.Организация.ИНН КАК ОрганизацияИНН,
	|	СчетФактураПолученный.Организация.КПП КАК ОрганизацияКПП	
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка = &Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ДатаПолученияКорректировки = ТекущаяДатаСеанса();
	ОрганизацияНаименованиеПолное =	 "-";
	Если Не РезультатЗапроса[0].Пустой() Тогда // В основаниях есть документ поступления
		
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		ДатаПолученияКорректировки 	  =	 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	ИначеЕсли Не РезультатЗапроса[1].Пустой() Тогда // основание - СФ
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
		ДатаПолученияКорректировки 	  =	 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизацияНаименованиеПолное) И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Если ЗначениеЗаполнено(ДокументОснование) Тогда		
			ОрганизацияСсылка = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(ДокументОснование.Организация);
			ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ОрганизацияСсылка.НаименованиеПолное), ОрганизацияСсылка.НаименованиеПолное, ОрганизацияСсылка.Наименование);
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка) Тогда
		СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН %2'"),
				ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));
	Иначе
		СоставительДокумента = ОрганизацияНаименованиеПолное;		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
		"СоставительДокументаНаименование", СоставительДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ДатаСогласования", ДатаПолученияКорректировки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "СодержаниеОперации", НСтр("ru = 'С изменением стоимости согласен.'"));

КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйКорректировочныйДокумент.
Процедура НайтиСоздатьУниверсальныйКорректировочныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено, 
	СпособОбработки  = Неопределено, ОписаниеОшибки = "") Экспорт
	
	Текст = "";
	
	НачатьТранзакцию();
	Попытка
		
		ПервичныйДокумент = Неопределено;
		СчетФактура = Неопределено;
		
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для Каждого Ссылка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
				 Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент") Тогда
					СчетФактура = Ссылка;
				Иначе
					ПервичныйДокумент = Ссылка;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		НайтиСоздатьКорректировкуПоступленияУКД(ДеревоДанных, ПервичныйДокумент);
		ДокументыУчета.Добавить(ПервичныйДокумент);
		
		// Заполним основание в СФ.
		ДокументыОснованияСчетаФактуры = Новый Массив;
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		
		НайтиСоздатьКорректировочныйСчетФактуруУКД(ДеревоДанных, СчетФактура);
		ДокументыУчета.Добавить(СчетФактура);
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;	
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйПередаточныйДокумент.
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоДанных, СсылкиНаВладельцев, СпособОбработки, ОписаниеОшибки) Экспорт
	
	Текст = "";
	
	НачатьТранзакцию();
	Попытка
		
		ПервичныйДокумент = Неопределено;
		СчетФактура = Неопределено;
		
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для Каждого Ссылка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
				 Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент") Тогда
					СчетФактура = Ссылка;
				Иначе
					ПервичныйДокумент = Ссылка;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		НайтиСоздатьПриобретениеТоваровУслугУПД(ДеревоДанных, ПервичныйДокумент, , СпособОбработки);
		ДокументыУчета.Добавить(ПервичныйДокумент);
		
		// Заполним основание в СФ.
		ДокументыОснованияСчетаФактуры = Новый Массив;
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		
		НайтиСоздатьСчетФактуруУПД(ДеревоДанных, СчетФактура);
		ДокументыУчета.Добавить(СчетФактура);
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;	
	
КонецПроцедуры

Функция ПодготовитьСтруктуруДляСчетаФактурыУПД(ДеревоДанных) Экспорт
	
	ДанныеДляОбъекта = Новый Структура;
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Номер", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаСоставления", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	ДанныеОбъекта.Вставить("Дата", ТекущаяДатаСеанса());
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "СведенияОПродавце";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	КонецЕсли;	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();	
	СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика, Контрагент);
	ДанныеОбъекта.Вставить("Контрагент",  Контрагент);
	ДанныеОбъекта.Вставить("ИННКонтрагента", ИННПоставщика);
	ДанныеОбъекта.Вставить("КППКонтрагента", КПППоставщика);
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "СведенияОПокупателе";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	КонецЕсли;
	Организация = Справочники.Организации.ПустаяСсылка();
	СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя, Организация);
	ДанныеОбъекта.Вставить("Организация", Организация);
	
	// Если счет-фактура на аванс.
	ВидСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры");
	
	Если ВидСчетаФактуры = "Авансовый" Тогда
		КодВидаОперации = "02";
	Иначе
		КодВидаОперации = "01";
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("КодВидаОперации", КодВидаОперации);
	ДанныеОбъекта.Вставить("ПолученВЭлектронномВиде", Истина);
	
	НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
	КонецЕсли;	
	
	// Получим документы-основания
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		МассивДокументовОснований = Новый Массив;		
		Если ТипЗнч(ДокументыОснованияСчетаФактуры) = Тип("Массив") Тогда 
			Для Каждого ДокументОснования Из ДокументыОснованияСчетаФактуры Цикл
				МассивДокументовОснований.Добавить(ДокументОснования);
			КонецЦикла;
		Иначе
			МассивДокументовОснований.Добавить(ДокументыОснованияСчетаФактуры);
		КонецЕсли;
		ДанныеОбъекта.Вставить("ДокументыОснования", МассивДокументовОснований);		
	КонецЕсли;
	
	КодВалюты = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	ВалютаОбъекта = Неопределено;	
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", ВалютаОбъекта, КодВалюты);
	ДанныеОбъекта.Вставить("Валюта", ВалютаОбъекта);
	
	ДанныеОбъекта.Вставить("Сумма", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом"));
	ДанныеОбъекта.Вставить("СуммаНДС", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСуммаНалога"));
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеОбъекта);
	
	Если ВидСчетаФактуры = "Авансовый" Тогда
		Авансы = Документы.СчетФактураПолученныйАванс.ПустаяСсылка().Авансы.Выгрузить();
		СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
		Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
			НоваяСтрока = Авансы.Добавить();
			НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
			НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата, Истина), СтавкаНДС);
			НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		КонецЦикла;
		ДанныеДляОбъекта.Вставить("Авансы", Авансы);
	КонецЕсли;
	
	Если ВидСчетаФактуры = "Реализация" Тогда
		ЗаполнитьСуммыДляСчетаФактуры(ДанныеДляОбъекта, ДеревоДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактурыУКД(ДеревоДанных) Экспорт
	
	ДанныеДляОбъекта = Новый Структура;
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Номер", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаСоставления", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	ДанныеОбъекта.Вставить("Дата", ТекущаяДатаСеанса());
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "СведенияОПродавце";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	КонецЕсли;
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика,Контрагент);
	ДанныеОбъекта.Вставить("Контрагент",  Контрагент);
	ДанныеОбъекта.Вставить("ИННКонтрагента", ИННПоставщика);
	ДанныеОбъекта.Вставить("КППКонтрагента", КПППоставщика);
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "СведенияОПокупателе";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	КонецЕсли;
	Организация = Справочники.Организации.ПустаяСсылка();
	СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя, Организация);
	ДанныеОбъекта.Вставить("Организация", Организация);
	
	КодВидаОперации = "01";
	ДанныеОбъекта.Вставить("КодВидаОперации", КодВидаОперации);
	ДанныеОбъекта.Вставить("ПолученВЭлектронномВиде", Истина);
	
	НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
	КонецЕсли;	
	
	ДанныеОбъекта.Вставить("Сумма", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение")
									+ ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение"));
	
	// Получим документы-основания
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		МассивДокументовОснований = Новый Массив;		
		Если ТипЗнч(ДокументыОснованияСчетаФактуры) = Тип("Массив") Тогда 
			Для Каждого ДокументОснования Из ДокументыОснованияСчетаФактуры Цикл
				МассивДокументовОснований.Добавить(ДокументОснования);
			КонецЦикла;
		Иначе
			МассивДокументовОснований.Добавить(ДокументыОснованияСчетаФактуры);
		КонецЕсли;
		ДанныеОбъекта.Вставить("ДокументыОснования", МассивДокументовОснований);		
	КонецЕсли;
	
	КодВалюты = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	ВалютаОбъекта = Неопределено;	
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", ВалютаОбъекта, КодВалюты);
	ДанныеОбъекта.Вставить("Валюта", ВалютаОбъекта);
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеОбъекта);
	
	ЗаполнитьСуммыДляКорректировочногоСчетаФактуры(ДанныеДляОбъекта, ДеревоДанных);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПриобретенияТоваровУслугУПД(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", Валюта, ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	Курс = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("КурсЧислитель", ?(ЗначениеЗаполнено(Курс), Курс, 1));
	ДанныеОбъекта.Вставить("КурсЗнаменатель", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "СведенияОПродавце";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	КонецЕсли;
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();	
	СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика, Контрагент);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В базе данных не удалось найти контрагента с ИНН ""%1"" и КПП ""%2""'"),
			ИННПоставщика, КПППоставщика);
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "СведенияОПокупателе";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	КонецЕсли;
	Организация = Справочники.Организации.ПустаяСсылка();
	СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя, Организация);
	ДанныеОбъекта.Вставить("Организация", Организация);
	
	ДанныеОбъекта.Вставить("Сумма", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом"));
	
	Товары = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("НомерПоДаннымПоставщика");
	Товары.Колонки.Добавить("ДатаПоДаннымПоставщика");
	Товары.Колонки.Добавить("НомерПоДаннымКлиента");
	Товары.Колонки.Добавить("ДатаПоДаннымКлиента");
	Товары.Колонки.Добавить("ШтрихкодыУпаковок");
	
	ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.НоваяТаблицаШтрихкодыУпаковок();
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		Признак = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Признак");
		
		НоваяСтрока = Товары.Добавить();
	
		// Обязательные реквизиты:
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(Организация, ТекущаяДатаСеанса(), Истина), СтавкаНДС);
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Количество = 1;
			Если НоваяСтрока.Цена = 0 Тогда
				НоваяСтрока.Цена = НоваяСтрока.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		Сопоставление = СведенияОТоваре.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ");
			Если ЗначениеЗаполнено(Характеристика) Тогда
				НоваяСтрока.Характеристика = Характеристика;
			КонецЕсли;
			
			Упаковка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.УпаковкаИБ");
			Если ЗначениеЗаполнено(Упаковка) Тогда
				НоваяСтрока.Упаковка = Упаковка;
			КонецЕсли;
			
		КонецЕсли;
		
		ЭтоИмущество = Ложь;
		Если ЗначениеЗаполнено(Признак) Тогда
			ЭтоИмущество = ?(Признак = "1", Истина, Ложь);
		Иначе
			ЭтоИмущество = Истина;
		КонецЕсли;
		
		ТипНоменклатуры = НоваяСтрока.Номенклатура.ТипНоменклатуры;
		Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			НоваяСтрока.СписатьНаРасходы = Истина;
			ЭтоИмущество = Ложь;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ВестиУчетПоГТД") = Истина Тогда
			ВестиУчетПоГТД = Истина;
		Иначе
			ВестиУчетПоГТД = Ложь;
		КонецЕсли;
		
		Если ЭтоИмущество И ВестиУчетПоГТД Тогда
			СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
											"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			Если СведенияОТаможеннойДекларации <> Неопределено И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда				
				НомерТаможеннойДекларации = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
								"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
				КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
								"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");				
				Если ЗначениеЗаполнено(НомерТаможеннойДекларации) Тогда
					ТаможеннаяДекларация = Неопределено;
					СтранаПроисхождения = Неопределено;
					ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("СтраныМира", СтранаПроисхождения, КодСтраныПроисхождения);
					НайтиТаможенныеДекларации(ТаможеннаяДекларация, НомерТаможеннойДекларации, СтранаПроисхождения); 
					Если НЕ ЗначениеЗаполнено(ТаможеннаяДекларация) Тогда
						НоваяТаможеннаяДекларация = Справочники.НомераГТД.СоздатьЭлемент();
						
						ПараметрыДляЗаполнения = Справочники.НомераГТД.ПараметрыДляЗаполненияЭлемента(НомерТаможеннойДекларации, СтранаПроисхождения);
						ПараметрыДляЗаполнения.ЗаполнитьПорядковыйНомерТовараАвтоматически = Истина;
						НоваяТаможеннаяДекларация.Заполнить(ПараметрыДляЗаполнения);
						
						Реквизиты = Справочники.НомераГТД.РегистрационныйНомерИСтранаВвоза(НомерТаможеннойДекларации);
						ЗаполнитьЗначенияСвойств(НоваяТаможеннаяДекларация, Реквизиты, "РегистрационныйНомер,СтранаВвозаНеРФ,ПорядковыйНомерТовара");
						НоваяТаможеннаяДекларация.Записать();
						ТаможеннаяДекларация = НоваяТаможеннаяДекларация.Ссылка;
					КонецЕсли;
					НоваяСтрока.НомерГТД = ТаможеннаяДекларация;
				КонецЕсли;				
			КонецЕсли;			
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеИСМП.ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок, СведенияОТоваре);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеИСМП.СвернутьТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок);
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка",             ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары",            Товары);
	ДанныеДляЗаполнения.Вставить("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияУслугУПД(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = Неопределено;	
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", Валюта, ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	Курс = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("КурсЧислитель", ?(ЗначениеЗаполнено(Курс), Курс, 1));
	ДанныеОбъекта.Вставить("КурсЗнаменатель", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "СведенияОПродавце";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	КонецЕсли;
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика, Контрагент);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В базе данных не удалось найти контрагента с ИНН ""%1"" и КПП ""%2""'"),
			ИННПоставщика, КПППоставщика);
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "СведенияОПокупателе";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
	КонецЕсли;
	Организация = Справочники.Организации.ПустаяСсылка();
	СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя, Организация);
	ДанныеОбъекта.Вставить("Организация", Организация);
	
	ТЗ = Документы.ПриобретениеУслугПрочихАктивов.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		// Обязательные реквизиты:
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(Организация, ТекущаяДатаСеанса(), Истина), СтавкаНДС);
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,  "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		НоваяСтрока.Содержание = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
		
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Расходы", ТЗ);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляКорректировкиПоступленияУКД(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = Неопределено;	
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", Валюта, ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	ДанныеОбъекта.Вставить("ВалютаВзаиморасчетов", Валюта);
	Курс = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("КурсЧислитель", ?(ЗначениеЗаполнено(Курс), Курс, 1));
	ДанныеОбъекта.Вставить("КурсЗнаменатель", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	ДанныеОбъекта.Вставить("ВидКорректировки", Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон);
	
	ДокументыОснования = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		Для Каждого Основание Из ДокументыОснования Цикл
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				ДанныеОбъекта.Вставить("ДокументОснование", Основание);
				ДанныеОбъекта.Вставить("НалогообложениеНДС", Основание.НалогообложениеНДС);
				ДанныеОбъекта.Вставить("Соглашение", Основание.Соглашение);			
				ДанныеОбъекта.Вставить("Договор", Основание.Договор);			
			ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				Если Основание.ДокументыОснования.Количество() Тогда
					Для Каждого ЭлементТЧ Из Основание.ДокументыОснования Цикл
						Если ТипЗнч(ЭлементТЧ.ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
							ДанныеОбъекта.Вставить("ДокументОснование", ЭлементТЧ.ДокументОснование);
							ДанныеОбъекта.Вставить("НалогообложениеНДС", ЭлементТЧ.ДокументОснование.НалогообложениеНДС);
							ДанныеОбъекта.Вставить("Соглашение", ЭлементТЧ.ДокументОснование.Соглашение);							
							ДанныеОбъекта.Вставить("Договор", ЭлементТЧ.ДокументОснование.Договор);							
							АктОРасхождениях = ПроверкаИПодборПродукцииИСМП.СформированныйАктОРасхождениях(ЭлементТЧ.ДокументОснование);
							ДанныеОбъекта.Вставить("АктОРасхожденияхПослеПриемкиОснование", АктОРасхождениях);
						ИначеЕсли ТипЗнч(ЭлементТЧ.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
							ОснованиеДокументКорректировки = ЭлементТЧ.ДокументОснование;
							ДанныеОбъекта.Вставить("ДокументОснование", ОснованиеДокументКорректировки.ДокументОснование);
							ДанныеОбъекта.Вставить("НалогообложениеНДС", ОснованиеДокументКорректировки.ДокументОснование.НалогообложениеНДС);
							ДанныеОбъекта.Вставить("Соглашение", ОснованиеДокументКорректировки.ДокументОснование.Соглашение);
							ДанныеОбъекта.Вставить("Договор", ОснованиеДокументКорректировки.ДокументОснование.Договор);							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				ДанныеОбъекта.Вставить("ДокументОснование", Документы.ПриобретениеТоваровУслуг.ПустаяСсылка());
			КонецЕсли;
		КонецЦикла;
	Иначе
		ДанныеОбъекта.Вставить("ДокументОснование", Документы.ПриобретениеТоваровУслуг.ПустаяСсылка());		
	КонецЕсли;
	
	// Сведения о поставщике.
	ИННПоставщика = ""; КПППоставщика = "";
	ВидУчастника = "СведенияОПродавце";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПоставщика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	КонецЕсли;

	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	СсылкаНаОбъектПоИННКПП("Контрагенты", ИННПоставщика, КПППоставщика, Контрагент);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В базе данных не удалось найти контрагента с ИНН ""%1"" и КПП ""%2""'"),
			ИННПоставщика, КПППоставщика);
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	// Сведения о покупателе.
	ИННПокупателя = ""; КПППокупателя = "";
	ВидУчастника = "СведенияОПокупателе";
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПППокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		ИННПокупателя = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
	КонецЕсли;

	Организация = Справочники.Организации.ПустаяСсылка();
	СсылкаНаОбъектПоИННКПП("Организации", ИННПокупателя, КПППокупателя, Организация);
	ДанныеОбъекта.Вставить("Организация", Организация);
	
	ДанныеОбъекта.Вставить("Сумма", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение")
									+ ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение"));
									
	Товары = Документы.КорректировкаПриобретения.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("НомерПоДаннымПоставщика");
	Товары.Колонки.Добавить("ДатаПоДаннымПоставщика");
	Товары.Колонки.Добавить("НомерПоДаннымКлиента");
	Товары.Колонки.Добавить("ДатаПоДаннымКлиента");
	
	ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.НоваяТаблицаШтрихкодыУпаковок();
	
	ТоварыДокументаОснования = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары;
	Документы.КорректировкаПриобретения.ЗаполнитьТоварыПоИсходнымДанным(ДанныеОбъекта.ДокументОснование, ТоварыДокументаОснования);	
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Товары.Добавить();
	
		// Обязательные реквизиты:
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(Организация, ТекущаяДатаСеанса(), Истина), СтавкаНДС);
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		
		Сопоставление = СведенияОТоваре.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ");
			Если ЗначениеЗаполнено(Характеристика) Тогда
				НоваяСтрока.Характеристика = Характеристика;
			КонецЕсли;
			
			Упаковка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.УпаковкаИБ");
			Если ЗначениеЗаполнено(Упаковка) Тогда
				НоваяСтрока.Упаковка = Упаковка;
			КонецЕсли;
			
		КонецЕсли;

		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
		Если ЗначениеЗаполнено(НоваяСтрока.Характеристика) Тогда
			ПараметрыОтбора.Вставить("Характеристика", НоваяСтрока.Характеристика);
		КонецЕсли;
		Если ЗначениеЗаполнено(НоваяСтрока.Упаковка) Тогда
			ЕдиницаХраненияНоменклатуры = ЭлектронноеВзаимодействиеУТВызовСервера.ЕдиницаХраненияНоменклатуры(НоваяСтрока.Номенклатура);
			Если НоваяСтрока.Упаковка <> ЕдиницаХраненияНоменклатуры Тогда			
				ПараметрыОтбора.Вставить("Упаковка", НоваяСтрока.Упаковка);
			КонецЕсли;
		КонецЕсли;		
		НайденнаяСтрокаТоваров = ТоварыДокументаОснования.НайтиСтроки(ПараметрыОтбора);
			
		Если НайденнаяСтрокаТоваров.Количество() Тогда
			ИсключенияСвойствДляЗаполнения = "Номенклатура,Характеристика,Упаковка,
										|СтавкаНДС,СуммаНДС,Количество,КоличествоУпаковок,Цена,Сумма,СуммаСНДС,
										|СписатьНаРасходы,НомерГТД,КоличествоПоРНПТ";
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрокаТоваров[0],, ИсключенияСвойствДляЗаполнения);
			
			Для Каждого Строка Из НайденнаяСтрокаТоваров Цикл
				ТоварыДокументаОснования.Удалить(Строка);
			КонецЦикла;			
		КонецЕсли;			
	
		Если НоваяСтрока.Количество = 0 Тогда
			Товары.Удалить(НоваяСтрока);
			Продолжить;
		КонецЕсли;
		
		ЭтоИмущество = Истина;
		
		ТипНоменклатуры = НоваяСтрока.Номенклатура.ТипНоменклатуры;
		Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			НоваяСтрока.СписатьНаРасходы = Истина;
			ЭтоИмущество = Ложь;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ВестиУчетПоГТД") = Истина Тогда
			ВестиУчетПоГТД = Истина;
		Иначе
			ВестиУчетПоГТД = Ложь;
		КонецЕсли;
		
		Если ЭтоИмущество И ВестиУчетПоГТД Тогда
			
			// Заполняем количество для прослеживаемости
			СведенияОПрослеживаемости = СведенияОТоваре.Строки.Найти(
											"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости", "ПолныйПуть", Истина);
			Если СведенияОПрослеживаемости <> Неопределено И СведенияОПрослеживаемости.Строки.Количество() > 0 Тогда
				КоличествоПрослеживаемости = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОПрослеживаемости.Строки[0],
								"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.КоличествоТовараПослеИзменения");
				Если ЗначениеЗаполнено(КоличествоПрослеживаемости) Тогда
					НоваяСтрока.КоличествоПоРНПТ = КоличествоПрослеживаемости;	
				КонецЕсли;
			КонецЕсли;
			
			СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
											"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			Если СведенияОТаможеннойДекларации <> Неопределено И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда				
				НомерТаможеннойДекларации = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
								"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
				КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
								"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");				
				Если ЗначениеЗаполнено(НомерТаможеннойДекларации) Тогда
					ТаможеннаяДекларация = Неопределено;
					СтранаПроисхождения = Неопределено;
					ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("СтраныМира", СтранаПроисхождения, КодСтраныПроисхождения);
					НайтиТаможенныеДекларации(ТаможеннаяДекларация, НомерТаможеннойДекларации, СтранаПроисхождения); 
					Если НЕ ЗначениеЗаполнено(ТаможеннаяДекларация) Тогда
						НоваяТаможеннаяДекларация = Справочники.НомераГТД.СоздатьЭлемент();
						
						ПараметрыДляЗаполнения = Справочники.НомераГТД.ПараметрыДляЗаполненияЭлемента(НомерТаможеннойДекларации, СтранаПроисхождения);
						ПараметрыДляЗаполнения.ЗаполнитьПорядковыйНомерТовараАвтоматически = Истина;
						НоваяТаможеннаяДекларация.Заполнить(ПараметрыДляЗаполнения);
						
						Реквизиты = Справочники.НомераГТД.РегистрационныйНомерИСтранаВвоза(НомерТаможеннойДекларации);
						ЗаполнитьЗначенияСвойств(НоваяТаможеннаяДекларация, Реквизиты, "РегистрационныйНомер,СтранаВвозаНеРФ,ПорядковыйНомерТовара");
						НоваяТаможеннаяДекларация.Записать();
						ТаможеннаяДекларация = НоваяТаможеннаяДекларация.Ссылка;
					КонецЕсли;
					Если НоваяСтрока.КоличествоПоРНПТ > 0 Тогда
						ЗаполнитьПризнакРНПТвГТД(ТаможеннаяДекларация);
					КонецЕсли;
					НоваяСтрока.НомерГТД = ТаможеннаяДекларация;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
			
		ЭлектронноеВзаимодействиеИСМП.ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_УКД(ШтрихкодыУпаковок, СведенияОТоваре);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеИСМП.СвернутьТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок);
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;
	
	Для Каждого СтрокаТЧоснования Из ТоварыДокументаОснования Цикл
		ДобавляемаяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемаяСтрока, СтрокаТЧоснования);	
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары", Товары);
	ДанныеДляЗаполнения.Вставить("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	
	Возврат ДанныеДляЗаполнения;

КонецФункции

Процедура ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Юр", ДатаКИ = Неопределено) Экспорт
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									СведенияОбУчастнике.КПП);

	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование);
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.ИНН",
									СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
									СведенияОбУчастнике.Свидетельство);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Фамилия",
									СведенияОбУчастнике.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Имя",
									СведенияОбУчастнике.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Отчество",
									СведенияОбУчастнике.Отчество);
	КонецЕсли;
	
	СведенияОбУчастнике.Вставить("ДатаКИ", ДатаКИ);
	АдресУчастника = Новый Структура;
	ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике, "Ссылка", ВидАдреса);
	
	Если АдресУчастника.Свойство("АдресРФ") Тогда
		ТипАдреса = ?(АдресУчастника.АдресРФ, "АдресРФ", "АдресИнформация");
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.Телефон",
									СведенияОбУчастнике.Телефоны);
	КонецЕсли;

	Если ЗначениеЗаполнено(СведенияОбУчастнике.ЭлектроннаяПочта) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта",
									СведенияОбУчастнике.ЭлектроннаяПочта);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НомерСчета",
				НомерСчета);
				
		Банк = ""; БИК = ""; КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			Если ТипЗнч(Банк) = Тип("Строка") Тогда
				БанкНаименование = Банк
			Иначе
				БанкНаименование = Банк.Наименование
			КонецЕсли;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка",
										БанкНаименование);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.БИКБанка",
										БИК);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка",
										КоррСчет);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.КодПоОКПО) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".КодОКПО", СведенияОбУчастнике.КодПоОКПО);
	КонецЕсли;
		
КонецПроцедуры

Функция НомерСчетаФактурыНаПечать(Номер, ИндексПодразделения, УдалитьПользовательскийПрефикс = Ложь) Экспорт
	
	НомерНаПечать = "";
	
	Если Номер <> Неопределено Тогда
	
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Ложь, УдалитьПользовательскийПрефикс);
		
		ПозицияРазделителя = СтрНайти(НомерНаПечать, "-");
		Префикс = Лев(НомерНаПечать, ПозицияРазделителя);
		НомерБезПрефикса = Сред(НомерНаПечать, ПозицияРазделителя + 1);
		
		Если Лев(НомерБезПрефикса, 1) = "И" Тогда
			НомерНаПечать = Префикс + Сред(НомерБезПрефикса, 2);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИндексПодразделения) Тогда
			НомерНаПечать = НомерНаПечать + "/" + ИндексПодразделения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерНаПечать;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

// Определяет, является ли объект корректировочным документом.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка._ДемоСчетФактураВыданный.
//
// Возвращаемое значение:
//  Результат - Булево - Истина, объект является ли корректировочным документом.
//
Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Если СсылкаНаОбъект <> Документы.СчетФактураВыданный.ПустаяСсылка() Тогда
			Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Корректировочный");
		Иначе
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьРеквизитыПодвала(ДанныеПечати, ИтоговыеСуммы, ДеревоДанных) Экспорт

	КоэффициентПересчетаВТонны     = НоменклатураСервер.КоэффициентПересчетаВТонны(Константы.ЕдиницаИзмеренияВеса.Получить());
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"СведенияПоОтпускуГруза.ДатаОтпуска", 
			ДанныеПечати.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей", 
			ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписейПрописью", 
			ЧислоПрописью(ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей, ,",,,,,,,,0"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.ВсегоМест", 
			ИтоговыеСуммы.КоличествоМест);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто", 
			ИтоговыеСуммы.МассаНетто);
	
	Если ИтоговыеСуммы.КоличествоМест > 0 Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.ВсегоМестПрописью", 
			ЧислоПрописью(ИтоговыеСуммы.КоличествоМест, ,",,,,,,,,0"));
	КонецЕсли;
	
	Если ИтоговыеСуммы.МассаНетто > 0 Тогда
		ПараметрыМассыПрописью = ПараметрыМассыПрописью(ИтоговыеСуммы.МассаНетто, КоэффициентПересчетаВТонны);
		МассаГрузаНеттоПрописью = 
			ЧислоПрописью(ИтоговыеСуммы.МассаНетто * ПараметрыМассыПрописью.Коэффициент, "ДП=Истина", ПараметрыМассыПрописью.Формат);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНеттоПрописью", 
			МассаГрузаНеттоПрописью);
		
	КонецЕсли;
	
	Если ИтоговыеСуммы.МассаБрутто > 0 Тогда
		ПараметрыМассыПрописью = ПараметрыМассыПрописью(ИтоговыеСуммы.МассаНетто, КоэффициентПересчетаВТонны);
		МассаГрузаБруттоПрописью = 
			ЧислоПрописью(ИтоговыеСуммы.МассаБрутто * ПараметрыМассыПрописью.Коэффициент, "ДП=Истина", ПараметрыМассыПрописью.Формат);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.МассаГрузаБруттоПрописью", 
			МассаГрузаБруттоПрописью);
			
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто", 
			ИтоговыеСуммы.МассаБрутто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.КоличествоМест", 
			ИтоговыеСуммы.КоличествоМест);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.МассаБрутто", 
			ИтоговыеСуммы.МассаБрутто);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.МассаНетто", 
			ИтоговыеСуммы.МассаНетто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.СуммаБезНДС", 
			ИтоговыеСуммы.СуммаБезНДС);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.СуммаНДС", 
			ИтоговыеСуммы.СуммаНДС);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ВсегоПоНакладной.СуммаСНДС", 
			ИтоговыеСуммы.СуммаСНДС);
	
КонецПроцедуры

Процедура ОкруглитьМассыТовара(ДанныеСтроки) Экспорт
	
	ДанныеСтроки.МассаБрутто = Окр(ДанныеСтроки.МассаБрутто, 3);
	ДанныеСтроки.МассаНетто = Окр(ДанныеСтроки.МассаНетто, 3);

КонецПроцедуры

Процедура ОбработатьТаблицуТоваров(ТаблицаТоваров) Экспорт
	
	Для Каждого Строка из ТаблицаТоваров Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ИД) Тогда
			ИДТовара = Строка.Номенклатура.УникальныйИдентификатор();
			Если ТипЗнч(Строка.Характеристика) = Тип("Строка") Тогда
				СсылкаНаХарактеристику = Строка.ХарактеристикаСсылка;
			Иначе
				СсылкаНаХарактеристику = Строка.Характеристика;
			КонецЕсли;
			ИДХарактеристики = ?(ЗначениеЗаполнено(СсылкаНаХарактеристику),СсылкаНаХарактеристику.УникальныйИдентификатор(),"");
			Если ТипЗнч(Строка.Упаковка) = Тип("Строка") Тогда
				СсылкаНаУпаковку = Строка.УпаковкаСсылка;
			Иначе
				СсылкаНаУпаковку = Строка.Упаковка;
			КонецЕсли;
			ИДУпаковки = ?(ЗначениеЗаполнено(СсылкаНаУпаковку),СсылкаНаУпаковку.УникальныйИдентификатор(),"");
			Строка.ИД = Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
			Строка.Наименование = ?(ЗначениеЗаполнено(Строка.Наименование),Строка.Наименование,"")  //номенклатура
			+ ?(ЗначениеЗаполнено(Строка.Характеристика)," (","") //Открывающаяся скобка
			+ ?(ЗначениеЗаполнено(Строка.Характеристика),Строка.Характеристика,"") //характеристика
			+ ?(ЗначениеЗаполнено(Строка.Характеристика),")",""); //Закрывающаяся скобка
		КонецЕсли;
		//Коды единиц измерения для CML 4.02
		Строка.БазоваяЕдиницаКод = СокрЛП(Строка.БазоваяЕдиницаКод);
		Строка.УпаковкаКод = СокрЛП(Строка.УпаковкаКод);
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьКонтрагентаВБД(ДанныеКонтрагента) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеКонтрагента.ИНН) Тогда
		Возврат Неопределено; 
	КонецЕсли;
	
	НовыйПартнер        = Неопределено;
	СсылкаНаКонтрагента = Неопределено;
	
	Если СтрДлина(ДанныеКонтрагента.ИНН) = 10 Тогда
		ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
		ДанныеКонтрагента.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	Иначе
		ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
		ДанныеКонтрагента.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	КонецЕсли;
	Если ДанныеКонтрагента.Свойство("Наименование") Тогда
		ДанныеКонтрагента.Вставить("Наименование", ДанныеКонтрагента.Наименование);
		ДанныеКонтрагента.Вставить("НаименованиеПолное", ДанныеКонтрагента.Наименование);
	Иначе
		ДанныеКонтрагента.Вставить("Наименование", ДанныеКонтрагента.СокращенноеНаименование);
		ДанныеКонтрагента.Вставить("НаименованиеПолное", ДанныеКонтрагента.СокращенноеНаименование);
	КонецЕсли;
	Если ДанныеКонтрагента.Свойство("ПолноеНаименование") Тогда
		ДанныеКонтрагента.Вставить("НаименованиеПолное", ДанныеКонтрагента.ПолноеНаименование);
		Если Не ЗначениеЗаполнено(ДанныеКонтрагента.СокращенноеНаименование) Тогда
			ДанныеКонтрагента.Вставить("Наименование", ДанныеКонтрагента.ПолноеНаименование);
		КонецЕсли;
	КонецЕсли;
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйКонтрагент, ДанныеКонтрагента);
	
	Если ДанныеКонтрагента.Свойство("ЮрАдрес") Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйКонтрагент, 
		                                                             ДанныеКонтрагента.ЮрАдрес, 
		                                                             Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			                                                         ТекущаяДатаСеанса());
	КонецЕсли; 
		
	Если ДанныеКонтрагента.Свойство("ФактАдрес") Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйКонтрагент, 
		                                                             ДанныеКонтрагента.ФактАдрес, 
		                                                             Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	КонецЕсли;
	
	НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
		
	СсылкаНовогоПартнера = Справочники.Партнеры.ПолучитьСсылку();
	НовыйПартнер.УстановитьСсылкуНового(СсылкаНовогоПартнера);
	
	ЗаполнитьЗначенияСвойств(НовыйПартнер, ДанныеКонтрагента);
	
	НовыйПартнер.ДатаРегистрации = ТекущаяДатаСеанса();
	НовыйПартнер.Клиент 		 = Истина;
	НовыйПартнер.Поставщик 		 = Истина;
	НовыйПартнер.ПрочиеОтношения = Истина;
	
	Если ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	Иначе
		НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	КонецЕсли;
	
	ИспользуютсяГруппыДоступаПартнеров = Справочники.ГруппыДоступаПартнеров.ИспользуютсяГруппыДоступа();
	Если ИспользуютсяГруппыДоступаПартнеров
		И НЕ ЗначениеЗаполнено(НовыйПартнер.ГруппаДоступа) Тогда
		НовыйПартнер.ГруппаДоступа = ГруппаДоступаПартнера();
	КонецЕсли;
	
	Если ДанныеКонтрагента.Свойство("ФактАдрес") Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйПартнер, 
		                                                             ДанныеКонтрагента.ФактАдрес, 
		                                                             Справочники.ВидыКонтактнойИнформации.АдресПартнера);
	КонецЕсли;
	
	НачатьТранзакцию();	
	Попытка		
		//Записываем нового партнера
		Если НовыйПартнер <> Неопределено Тогда
			НовыйПартнер.Записать();
			НовыйКонтрагент.Партнер = НовыйПартнер.Ссылка;
		КонецЕсли;
		
		//Записываем нового контрагента
		НовыйКонтрагент.Записать();
		СсылкаНаКонтрагента = НовыйКонтрагент.Ссылка;		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + " " + НСтр("ru = '(подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Создание нового контрагента'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
	Возврат СсылкаНаКонтрагента; 
	
КонецФункции

Процедура ЗаполнитьДокументыОснования(ДеревоДанных, СсылкаНаОбъект) Экспорт
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДокументОснование");
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(ДокументОснование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ДокументыОснования", 
			МассивДокументовОснований);
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СтрокаОбъекта.СсылкаНаОбъект) Тогда
		НовЭл = СтрокаОбъекта.СсылкаНаОбъект.ПолучитьОбъект();
		Попытка 
			НовЭл.Заблокировать();
		Исключение
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось изменить данные номенклатуры поставщика ""%1"".
			|Возможно, номенклатура поставщика редактируется другим пользователем'"),
			НовЭл.Наименование);			
			ВызватьИсключение ТекстИсключенияЗаписи;
		КонецПопытки;
		СсылкаНаОбъектНоменклатура = СтрокаОбъекта.СсылкаНаОбъект.Номенклатура;
	Иначе
		НовЭл = Справочники.НоменклатураКонтрагентов.СоздатьЭлемент();
		СсылкаНаОбъектНоменклатура = Неопределено;
	КонецЕсли;
	//
	ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаОбъекта, НовЭл);
	// если нет ссылки на номенклатуру, то будем создавать ее
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъектНоменклатура) Тогда 
		НайденнаяСтрока = СтрокаОбъекта.Строки.Найти("Номенклатура", "Реквизит", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // Найдена ссылка
				СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
			Иначе // будем искать по индексу
				ИндексИскомойСтроки = НайденнаяСтрока.ЗначениеРеквизита;	
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина); // строка с объектом
				Если НайденнаяСтрока <> Неопределено Тогда
					Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект БД
						СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НовЭл.Номенклатура = СсылкаНаОбъектНоменклатура;
		// Заполняем идентификатор номенклатуры поставщика, если он получен в реквизите Ид
		СтрокаИд = СтрокаОбъекта.Строки.Найти("Ид", "Реквизит", Истина);
		Если НЕ ЗначениеЗаполнено(НовЭл.Идентификатор) И ЗначениеЗаполнено(СтрокаИд) Тогда
			НовЭл.Идентификатор = СтрокаИд.ЗначениеРеквизита;
		КонецЕсли;
		// Заполнение найденного поставщика (владельца, тип Справочник.Партнеры)
		СтрокиПартнеры = ДеревоРазбора.Строки.Найти("Партнеры", "ТипОбъекта", Истина);
		Если СтрокиПартнеры <> Неопределено и СтрокиПартнеры.Строки.Количество() = 1 Тогда
			НовЭл.Владелец = СтрокиПартнеры.Строки[0].СсылкаНаОбъект;
		Иначе
			СтрокиКонтрагент = ДеревоРазбора.Строки.Найти("Контрагенты", "ТипОбъекта", Истина);
			Если СтрокиКонтрагент <> Неопределено И СтрокиКонтрагент.Строки.Количество() = 1 Тогда
				НовЭл.Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокиКонтрагент.Строки[0].СсылкаНаОбъект, "Партнер");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовЭл.Код) Тогда
		НовЭл.УстановитьНовыйКод();
	КонецЕсли;
	//
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
		НовЭл.Разблокировать();
	Исключение
		Текст = НСтр("ru = 'Создание элемента справочника ""Номенклатура поставщиков"".'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция РеквизитыБанковскогоСчета(ИмяСправочника, СсылкаНаБанковскийСчет) Экспорт
	
	БанковскийСчет = Новый Структура;
	ЗапросСчет = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
					|	БанковскиеСчета.НомерСчета,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
					|			ТОГДА БанковскиеСчета.НаименованиеБанка
					|		ИНАЧЕ БанковскиеСчета.Банк.Наименование
					|	КОНЕЦ КАК НаименованиеБанка,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
					|			ТОГДА БанковскиеСчета.БИКБанка
					|		ИНАЧЕ БанковскиеСчета.Банк.Код
					|	КОНЕЦ КАК БИКБанка,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
					|			ТОГДА БанковскиеСчета.КоррСчетБанка
					|		ИНАЧЕ БанковскиеСчета.Банк.КоррСчет
					|	КОНЕЦ КАК КоррСчетБанка,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
					|			ТОГДА БанковскиеСчета.НаименованиеБанкаДляРасчетов
					|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.Наименование
					|	КОНЕЦ КАК НаименованиеБанкаДляРасчетов,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
					|			ТОГДА БанковскиеСчета.БИКБанкаДляРасчетов
					|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.Код
					|	КОНЕЦ КАК БИКБанкаДляРасчетов,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
					|			ТОГДА БанковскиеСчета.КоррСчетБанкаДляРасчетов
					|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.КоррСчет
					|	КОНЕЦ КАК КоррСчетБанкаДляРасчетов
					|ИЗ
					|	Справочник."+ИмяСправочника+" КАК БанковскиеСчета
					|ГДЕ
					|	БанковскиеСчета.Ссылка = &Ссылка";
					ЗапросСчет.Текст = ТекстЗапроса;
	ЗапросСчет.УстановитьПараметр("Ссылка", СсылкаНаБанковскийСчет);
	Выборка = ЗапросСчет.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		БанковскийСчет.Вставить("НомерСчета", Выборка.НомерСчета);
		Банк = Новый Структура;
		Банк.Вставить("Наименование", Выборка.НаименованиеБанка);
		Банк.Вставить("Код", Выборка.БИКБанка);
		Банк.Вставить("КоррСчет", Выборка.КоррСчетБанка);
		БанковскийСчет.Вставить("Банк", Банк);
		БанкДляРасчетов = Неопределено; // заполнение анализируется в модуле формирования
		Если ЗначениеЗаполнено(Выборка.БИКБанкаДляРасчетов) Тогда // используется банк для расчетов
			БанкДляРасчетов = Новый Структура;
			БанкДляРасчетов.Вставить("Наименование", Выборка.НаименованиеБанкаДляРасчетов);
			БанкДляРасчетов.Вставить("Код", Выборка.БИКБанкаДляРасчетов);
			БанкДляРасчетов.Вставить("КоррСчет", Выборка.КоррСчетБанкаДляРасчетов);
		КонецЕсли;
		БанковскийСчет.Вставить("БанкДляРасчетов", БанкДляРасчетов);
	КонецЕсли;
	Возврат БанковскийСчет;
	
КонецФункции

Функция СоздатьРасчетныйСчет(СтрокаОбъекта, ВидРС, ДеревоРазбора, СсылкаНаВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаОбъект = Неопределено;
	НайденнаяСтрока = СтрокаОбъекта;
	
	Если ВидРС = "БанковскийСчетКонтрагента" Тогда
		НовЭл = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
		Если (НЕ ДеревоРазбора.Строки.Найти("Контрагенты")=Неопределено) 
		   И ДеревоРазбора.Строки.Найти("Контрагенты").Строки.Количество()>0 Тогда
			СсылкаНаВладельца = ДеревоРазбора.Строки.Найти("Контрагенты").Строки[0].СсылкаНаОбъект;
		КонецЕсли;	
	ИначеЕсли ВидРС = "БанковскийСчетОрганизации" Тогда
		НовЭл = Справочники.БанковскиеСчетаОрганизаций.СоздатьЭлемент();
		НовЭл.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Числом;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	НовЭл.НомерСчета 	= ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "НомерСчета");
		
	НовЭл.ВалютаДенежныхСредств = ДенежныеСредстваСерверЛокализация.ПолучитьВалютуПоНомеруСчета(НовЭл.НомерСчета);
	//
	ИндексИскомойСтроки = ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "Банк");
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		НовЭл.Банк 			= НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки);
	КонецЕсли;
	//
	ИндексИскомойСтроки 	= ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "БанкКорреспондент");
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		НовЭл.БанкДляРасчетов 	= НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки);
	КонецЕсли;
	//
	Если НЕ ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		СсылкаНаВладельца = ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "Владелец");	
	КонецЕсли;
	НовЭл.Владелец 		= СсылкаНаВладельца;
	НовЭл.Наименование 	= Прав(СокрЛП(НовЭл.НомерСчета), 4) + " в " + НовЭл.Банк.Наименование; // наименование счета
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
	Исключение
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Создание элемента справочника %1.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ВидРС); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	НайденнаяСтрока.СсылкаНаОбъект = СсылкаНаОбъект; // запишем в дерево
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Процедура ДобавитьВДеревоДанныеСчета(ДеревоДокумента, ДанныеСчета) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", ДанныеСчета.НомерСчета);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", ДанныеСчета.Банк.Наименование);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", ДанныеСчета.Банк.Код);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", ДанныеСчета.Банк.КоррСчет);
	
	Если ЗначениеЗаполнено(ДанныеСчета.БанкДляРасчетов) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", ДанныеСчета.БанкДляРасчетов.Наименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", ДанныеСчета.БанкДляРасчетов.КоррСчет);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", ДанныеСчета.БанкДляРасчетов.Код);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУИП(ДеревоДокумента, УИП) Экспорт

	Если ЗначениеЗаполнено(УИП) Тогда
		ДопДанные = Новый ТаблицаЗначений;
		ДопДанные.Колонки.Добавить("Идентификатор");
		ДопДанные.Колонки.Добавить("Значение");
	
		СтрокаДопДанных = ДопДанные.Добавить();	
		СтрокаДопДанных.Идентификатор = "ИдентификаторПлатежа";
		СтрокаДопДанных.Значение = УИП;
		
		ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, ДопДанные, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПроверкеВозможностиСозданияУчетногоДокумента(Знач Параметры, Отказ, Описание) Экспорт
	
	Если Параметры.ЭтоСводныйУПД Тогда
		
		Отказ = Истина;
		Описание = НСтр("ru = 'Отражение в учете сводных счетов-фактур не поддерживается.'");
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПослеВозникновенииСобытияПоЭлектронномуСчетуФактуре.
Процедура ПослеВозникновенииСобытияПоЭлектронномуСчетуФактуре(ДокументыУчета, Событие, СостояниеОбработки) Экспорт
	
	ЭСФ = Неопределено;
	ИменаРеквизитов = Новый Массив();

	// Выделим счет-фактуру из документов учета
	СчетФактура = Неопределено;
	Для Каждого ДокументУчета Из ДокументыУчета Цикл
		ЭтоСчетФактура = Ложь;
		ОпределитьДокументЯвляетсяСчетомФактурой(ДокументУчета, ЭтоСчетФактура);
		Если ЭтоСчетФактура Тогда					
			СчетФактура = ДокументУчета;
		КонецЕсли;
	КонецЦикла;
	
	Если СчетФактура = Неопределено Тогда
		// Счет-фактура еще не привязан к электронному документу - прерываем обработку.
		Возврат;
	КонецЕсли;
	
	Если Событие = "ПолученПДП" Тогда
		
		// Датой выставления покупателю счета-фактуры в электронном виде по телекоммуникационным
		// каналам связи считается дата поступления файла счета-фактуры Оператору ЭДО от продавца,
		// указанная в подтверждении (ПДПЭСФ) этого Оператора ЭДО.
		// Счет-фактура в электронном виде считается выставленным, если продавцу поступило
		// соответствующее подтверждение (ПДПЭСФ) Оператора ЭДО.
		// Приказ Минфина России от 10.11.2015 N 174н.
		
		ЭСФ = СчетФактура.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ЭСФ.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ЭСФ.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		ЭСФ.ДатаВыставления = СостояниеОбработки.ДатаПоступленияСФОператоруОтПродавца;
		ИменаРеквизитов.Добавить("ДатыВыставления");
		ЭСФ.ВыставленВЭлектронномВиде = Истина;
		ИменаРеквизитов.Добавить("ВыставленВЭлектронномВиде");
		
	ИначеЕсли Событие = "ПолученПДО" Тогда
		
		// Датой получения покупателем счета-фактуры в электронном виде по телекоммуникационным
		// каналам связи считается дата направления покупателю Оператором ЭДО файла счета-фактуры продавца,
		// указанная в подтверждении (ПДОЭСФ) Оператора ЭДО.
		// Счет-фактура в электронном виде считается полученным покупателем, если ему поступило
		// соответствующее подтверждение (ПДОЭСФ) Оператора ЭДО.
		// Приказ Минфина России от 10.11.2015 N 174н.
		
		ЭСФ = СчетФактура.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ЭСФ.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ЭСФ.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		ЭСФ.Дата = СостояниеОбработки.ДатаОтправкиСФПокупателюОператором;
		ИменаРеквизитов.Добавить("Дата");
		ЭСФ.ПолученВЭлектронномВиде = Истина;
		ИменаРеквизитов.Добавить("ПолученВЭлектронномВиде");
		
	ИначеЕсли Событие = "ПолученИоП" Тогда
		
		// Счет-фактура в электронном виде считается выставленным, если продавцу поступило 
		// соответствующее подтверждение (ПДПЭСФ) Оператора ЭДО, при наличии у продавца извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и полученного через Оператора ЭДО.
		// ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ВыставленВЭлектронномВиде = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ВыставленВЭлектронномВиде");
		Если Не ВыставленВЭлектронномВиде Тогда
			ЭСФ = СчетФактура.ПолучитьОбъект();
			//Попытка заблокировать документ
			Попытка
				ЭСФ.Заблокировать();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось изменить данные документа ""%1"".
					|Возможно, документ редактируется другим пользователем'"),
					Строка(ЭСФ.Ссылка));
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			//конец попытки заблокировать документ			
			ЭСФ.ВыставленВЭлектронномВиде = Истина;
			ИменаРеквизитов.Добавить("ВыставленВЭлектронномВиде");
		КонецЕсли;
		
	ИначеЕсли Событие = "ПолученИоППДО" Тогда
		
		// Счет-фактура в электронном виде считается полученным покупателем, если ему поступило 
		// соответствующее подтверждение (ПДОЭСФ) Оператора ЭДО, при наличии извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и подтвержденного (ПДОИПЭСФ)
		// Оператором ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ПолученВЭлектронномВиде = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ПолученВЭлектронномВиде");
		Если Не ПолученВЭлектронномВиде Тогда
			ЭСФ = СчетФактура.ПолучитьОбъект();
			//Попытка заблокировать документ
			Попытка
				ЭСФ.Заблокировать();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось изменить данные документа ""%1"".
					|Возможно, документ редактируется другим пользователем'"),
					Строка(ЭСФ.Ссылка));
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			//конец попытки заблокировать документ
			ЭСФ.ПолученВЭлектронномВиде = Истина;
			ИменаРеквизитов.Добавить("ПолученВЭлектронномВиде");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РежимЗаписи = ?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ЭСФ.Записать(РежимЗаписи);
	Исключение
		
		Если ИменаРеквизитов.Количество() > 1 Тогда
			ШаблонОшибки = НСтр("ru = 'При установке реквизитов %1 документа %2 возникла ошибка. Описание ошибки: ""%3""'");
		Иначе
			ШаблонОшибки = НСтр("ru = 'При установке реквизита %1 документа %2 возникла ошибка. Описание ошибки: ""%3""'")
		КонецЕсли;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, 
			СтрСоединить(ИменаРеквизитов),
			ЭСФ.Ссылка,
			ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка установки реквизитов счета-фактуры при получении служебного ЭД от оператора'", 
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			ЭСФ.Метаданные(),
			ЭСФ.Ссылка,
			ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов(ВариантыЗаполненияПолей) Экспорт
	
	ВариантКодУПД = ВариантыЗаполненияПолей.УПД_ТоварКод.НайтиПоЗначению("Код");
	ВариантКодУПД.Представление = "Артикул";
	ВариантКодПередачаТоваров = ВариантыЗаполненияПолей.ПередачаТоваров_ТоварКод.НайтиПоЗначению("Код");
	ВариантКодПередачаТоваров.Представление = "Артикул";
	
КонецПроцедуры

Процедура ПолучитьЗапросКонструктораДополнительныхПолейШапки(Параметры, ТекстЗапроса) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	Если Параметры.ТипДокумента = ТипыДокументов.УПД
		ИЛИ Параметры.ТипДокумента = ТипыДокументов.УКД Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиУПД();
	
	ИначеЕсли Параметры.ТипДокумента = ТипыДокументов.СчетФактура
		ИЛИ Параметры.ТипДокумента = ТипыДокументов.КорректировочныйСчетФактура Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиСчетаФактуры();
		
	ИначеЕсли Параметры.ТипДокумента = ТипыДокументов.ТоварнаяНакладная
		ИЛИ Параметры.ТипДокумента = ТипыДокументов.АктНаПередачуПрав Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиРеализации();
		
	ИначеЕсли Параметры.ТипДокумента = ТипыДокументов.АктВыполненныхРабот Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиАкта();
		
	ИначеЕсли Параметры.ТипДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиКорректировкиРеализации();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеДляЗаполнения(НоменклатураКонтрагента) Экспорт
	
	СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
	РаботаСНоменклатуройУТ.ПреобразоватьСтавкуНДССервиса(НоменклатураКонтрагента.СтавкаНДС, СтавкаНДС);
			
	СсылкаНаЕдиницуИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	ЕдиницыИзмеренияКонтрагента = Новый Структура;
	ЕдиницыИзмеренияКонтрагента.Вставить("ОКЕИ", НоменклатураКонтрагента.ЕдиницаИзмеренияКод);
	ЕдиницыИзмеренияКонтрагента.Вставить("Наименование", НоменклатураКонтрагента.ЕдиницаИзмерения);
	РаботаСНоменклатуройУТ.ЕдиницаИзмеренияПоДаннымСервиса(ЕдиницыИзмеренияКонтрагента, СсылкаНаЕдиницуИзмерения);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Артикул", НоменклатураКонтрагента.Артикул);
	ДанныеЗаполнения.Вставить("Наименование", НоменклатураКонтрагента.Наименование);
	ДанныеЗаполнения.Вставить("НаименованиеПолное", НоменклатураКонтрагента.Наименование);
	ДанныеЗаполнения.Вставить("ЕдиницаИзмерения", СсылкаНаЕдиницуИзмерения);
	ДанныеЗаполнения.Вставить("СтавкаНДС", СтавкаНДС);
	
	Возврат ДанныеЗаполнения;

КонецФункции

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьОтветственногоПоЭД.
Процедура ПолучитьОтветственногоПоЭД(Контрагент, Организация, ДоговорКонтрагента, ОтветственныйПоЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтветственныйПоЭД = Справочники.Пользователи.ПустаяСсылка();
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Контрагент.Партнер) Тогда
		Если Контрагент.Партнер.Метаданные().Реквизиты.Найти("ОсновнойМенеджер")<> Неопределено 
			И ЗначениеЗаполнено(Контрагент.Партнер.ОсновнойМенеджер) Тогда 
			ОтветственныйПоЭД = Контрагент.Партнер.ОсновнойМенеджер;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СведенияФизЛицаПользователя
Процедура СведенияФизЛицаПользователя(Пользователь, Организация, ДанныеФизЛица) Экспорт

	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		ФизЛицо = Пользователь.ФизическоеЛицо;
		Если Не ЗначениеЗаполнено(ДанныеФизЛица.ИмяПолное) Тогда
			ДанныеФизЛица.ИмяПолное = ФизЛицо.Наименование;	
		КонецЕсли;
		ДанныеФизЛица.Должность = "";
		
		
		Если Не ЗначениеЗаполнено(ДанныеФизЛица.Должность) Тогда
			РеквизитыВладельцаСертификата = Обработки.ЗаявлениеНаВыпускНовогоКвалифицированногоСертификата.РеквизитыВладельцаСертификата(Неопределено);
			Реквизиты = Новый Структура(СтрСоединить(РеквизитыВладельцаСертификата.ВыгрузитьЗначения(), ","));		
			Реквизиты.Вставить("Директор");
			Реквизиты.Вставить("ГлавныйБухгалтер");
			Реквизиты.Вставить("Пользователь");
			Реквизиты.Вставить("ЭтоФизическоеЛицо", Истина);
			Реквизиты.Вставить("Организация", Организация);
			Реквизиты.Вставить("Сотрудник",   ФизЛицо);
			Реквизиты.Вставить("ТипВладельца");
			Реквизиты.Вставить("ИНН");
			
			ЗаявлениеНаСертификатПереопределяемый.ПриЗаполненииРеквизитовВладельцаВЗаявленииНаСертификат(Реквизиты);
			
			Если ЗначениеЗаполнено(Реквизиты.Должность) Тогда 
				ДанныеФизЛица.Должность = Реквизиты.Должность;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.Партнеры") Тогда	
		КонтактноеЛицо = ПартнерыИКонтрагенты.ПолучитьКонтактноеЛицоПартнераПоУмолчанию(Пользователь);
		ДанныеФизЛица.ИмяПолное = КонтактноеЛицо.Наименование;
		ДанныеФизЛица.Должность = КонтактноеЛицо.ДолжностьПоВизитке;
	ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда	
		ДанныеФизЛица.ИмяПолное = Пользователь.Наименование;
		ДанныеФизЛица.Должность = Пользователь.ДолжностьПоВизитке;		
	КонецЕсли;
	
КонецПроцедуры

// Определяет вид ЭД по полному имени объекта метаданных.
//
// Параметры:
//  ПолноеИмяОбъектаМетаданных - Строка - имя объекта метаданных.
//
// Возвращаемое значение:
//  Массив - массив из видов ЭД доступных для данного объекта метаданных.
//
Функция ВидыЭДПоИмениОбъекта(ПолноеИмяОбъектаМетаданных) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	ТекстСообщенияОбОшибке = НСтр("ru = 'Не удалось определить вид документа'");
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	
	Если МетаданныеОбъекта = Неопределено Тогда
		ВызватьИсключение ТекстСообщенияОбОшибке;
	КонецЕсли;
	
	Результат = Новый Массив;
		
	Если МетаданныеОбъекта = Метаданные.Документы.ПриобретениеТоваровУслуг Тогда
		
		Результат.Добавить(ТипыДокументов.АктНаПередачуПрав);
		Результат.Добавить(ТипыДокументов.ТоварнаяНакладная);

	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.КорректировкаПриобретения Тогда
		
		Результат.Добавить(ТипыДокументов.СоглашениеОбИзмененииСтоимости);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ПриобретениеУслугПрочихАктивов Тогда
		
		Результат.Добавить(ТипыДокументов.АктВыполненныхРабот);
	
	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ВозвратТоваровОтКлиента Тогда
		
		Результат.Добавить(ТипыДокументов.ТоварнаяНакладная);
	
	ИначеЕсли МетаданныеОбъекта = Метаданные.РегистрыСведений.РеестрДокументов Тогда	
		
		Результат.Добавить(ТипыДокументов.АктНаПередачуПрав);
		Результат.Добавить(ТипыДокументов.ТоварнаяНакладная);
		Результат.Добавить(ТипыДокументов.СоглашениеОбИзмененииСтоимости);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ЗаказКлиента Тогда
		
		Результат.Добавить(ТипыДокументов.ЗаказТовара);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ЗаказПоставщику Тогда	
		
		Результат.Добавить(ТипыДокументов.ОтветНаЗаказ);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств Тогда		
		
		Результат.Добавить(ТипыДокументов.СчетНаОплату);
	
	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.РегистрацияЦенНоменклатурыПоставщика Тогда		
		
		Результат.Добавить(ТипыДокументов.ПрайсЛист);
				
	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ОтчетКомиссионера Тогда	
		
		Результат.Добавить(ТипыДокументов.ОтчетОПродажахКомиссионногоТовара);
				
	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ОтчетКомиссионераОСписании Тогда	
		
		Результат.Добавить(ТипыДокументов.ОтчетОСписанииКомиссионногоТовара);
				
	Иначе
		ВызватьИсключение ТекстСообщенияОбОшибке;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// См. ОбменСКонтрагентамиПереопределяемый.ОпределитьДокументЯвляетсяСчетомФактурой.
Процедура ОпределитьДокументЯвляетсяСчетомФактурой(ДокументСсылка, Результат) Экспорт
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Если ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданныйАванс")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученныйАванс")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураКомиссионеру")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураКомитента")
		Тогда
		
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПриПолученииОписанияОснованияЭлектронногоДокумента.
Процедура ПриПолученииОписанияОснованияЭлектронногоДокумента(ОснованиеОбъект, Описание, СтандартнаяОбработка) Экспорт
	
	ТипОснования = ТипЗнч(ОснованиеОбъект);
	Если ТипОснования = Тип("ДокументОбъект.СчетФактураКомиссионеру") 
		Или ТипОснования = Тип("ДокументСсылка.СчетФактураКомиссионеру") Тогда
		СтандартнаяОбработка = Ложь;
		Описание.Организация = ОснованиеОбъект.Организация;
		Описание.Контрагент  = ОснованиеОбъект.Комиссионер;
		Описание.Дата  = ОснованиеОбъект.Дата;
		Описание.Номер = ОснованиеОбъект.Номер;
	КонецЕсли;
	Если ТипОснования = Тип("ДокументОбъект.СчетФактураКомитента") 
		Или ТипОснования = Тип("ДокументСсылка.СчетФактураКомитента") Тогда
		СтандартнаяОбработка = Ложь;
		Описание.Организация = ОснованиеОбъект.Организация;
		Описание.Контрагент  = ОснованиеОбъект.Комитент;
		Описание.Дата  = ОснованиеОбъект.Дата;
		Описание.Номер = ОснованиеОбъект.Номер;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП.
Процедура СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Ссылка, ДатаСведений = Неопределено) Экспорт
	
	Ссылка = Неопределено;
	
	Запрос = Новый Запрос;
	УсловиеПоКПП = "ИСТИНА";
	Если ТипОбъекта = "Контрагенты" И ЗначениеЗаполнено(ДатаСведений) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты.ИсторияКПП КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка.ИНН = &ИНН
		|	И &УсловиеПоКПП
		|	И Контрагенты.Период <= &ДатаСведений
        |
		|ОБЪЕДИНИТЬ ВСЕ
        |
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И &УсловиеПоКПП
		|	И НЕ Контрагенты.ПометкаУдаления";
		Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
		Если ЗначениеЗаполнено(КПП) Тогда
			Запрос.УстановитьПараметр("КПП", КПП);
			УсловиеПоКПП = "Контрагенты.КПП = &КПП";
		КонецЕсли;		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Выборка.Ссылка
		|ИЗ
		|	Справочник." + ТипОбъекта + " КАК Выборка
		|ГДЕ
		|	Выборка.ИНН = &ИНН 
		|	И &УсловиеПоКПП
		|	И НЕ Выборка.ПометкаУдаления";
		Если ЗначениеЗаполнено(КПП) Тогда
			Запрос.УстановитьПараметр("КПП", КПП);
			УсловиеПоКПП = "Выборка.КПП = &КПП";
		КонецЕсли;		
	КонецЕсли;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоКПП", УсловиеПоКПП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьРеквизитыКонтрагента.
Процедура ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов, КонтрагентСсылка) Экспорт
	
	КонтрагентСсылка = Неопределено;
	Партнер   = Неопределено;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
		Попытка 
			Контрагент.Заблокировать();
		Исключение
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось изменить контрагента ""%1"".
			|Возможно, контрагент редактируется другим пользователем'"),
			Контрагент.Наименование);			
			ВызватьИсключение ТекстИсключенияЗаписи;
		КонецПопытки;	
	Иначе
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	КонецЕсли;
	
	Контрагент.Наименование = СтруктураРеквизитов.Наименование;
	ИНН_КПП        = СтруктураРеквизитов.ИНН_КПП;
	Контрагент.ИНН = Сред(ИНН_КПП, 1, Найти(ИНН_КПП, "/") - 1);
	Контрагент.КПП = Сред(ИНН_КПП, Найти(ИНН_КПП, "/") + 1);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		// Заполним реквизиты партнера
		
		Если Контрагент.ЭтоНовый() Тогда
			Партнер = Справочники.Партнеры.СоздатьЭлемент();
			СсылкаНовогоПартнера = Справочники.Партнеры.ПолучитьСсылку();
			Партнер.УстановитьСсылкуНового(СсылкаНовогоПартнера);
			Контрагент.Партнер = СсылкаНовогоПартнера;
		Иначе
			Партнер = Контрагент.Партнер.ПолучитьОбъект();
			Попытка 
				Партнер.Заблокировать();
			Исключение
				ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить партнера ""%1"".
				|Возможно, партнер редактируется другим пользователем'"),
				Партнер.Наименование);			
				ВызватьИсключение ТекстИсключенияЗаписи;
			КонецПопытки;			
		КонецЕсли;
		
		Партнер.Наименование = Контрагент.Наименование;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Контрагент.Записать();
		Контрагент.Разблокировать();
		Если Партнер <> Неопределено Тогда
			Партнер.Записать();
			Партнер.Разблокировать();			
		КонецЕсли;
		КонтрагентСсылка = Контрагент.Ссылка;		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + " (" + НСтр("ru = 'подробности см. в Журнале регистрации'") + ").";
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Загрузка реквизитов контрагента'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл.
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
		"Наименование, НаименованиеПолное, ИНН, КПП, КодПоОКПО, ЮрФизЛицо, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи");
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, РеквизитыОрганизации);
	СтруктураВозврата.ОКПО = РеквизитыОрганизации.КодПоОКПО;
	
	ЮрАдресОрганизации = ПолучитьАдресИзКонтактнойИнформации(Организация, "Юр");
	СтруктураВозврата.ЮридическийАдрес     = ЮрАдресОрганизации.Представление;
	СтруктураВозврата.ЗначенияПолейЮрАдрес = ЮрАдресОрганизации.ЗначенияПолей;
	
	ФактАдресОрганизации = ПолучитьАдресИзКонтактнойИнформации(Организация, "Факт");
	СтруктураВозврата.ФактическийАдрес       = ФактАдресОрганизации.Представление;
	СтруктураВозврата.ЗначенияПолейФактАдрес = ФактАдресОрганизации.ЗначенияПолей;
	
	СтруктураВозврата.Телефон = ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	Если СтруктураВозврата.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураОтветственных = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация);
		СтруктураВозврата.Руководитель          = СтруктураОтветственных.Руководитель;
		СтруктураВозврата.ДолжностьРуководителя = СтруктураОтветственных.РуководительДолжность;
	Иначе
		СтруктураВозврата.СвидетельствоНомер = РеквизитыОрганизации.СвидетельствоСерияНомер;
		СтруктураВозврата.СвидетельствоДата  = РеквизитыОрганизации.СвидетельствоДатаВыдачи;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации.
Процедура ЗаполнитьРегистрационныеДанныеОрганизации(Организация, ДанныеОрганизации) Экспорт
	
	Подключение1СТакскомПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации(Организация, ДанныеОрганизации);
	
	РуководительДолжность = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(
		Организация,, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель).Должность;
	Если ЗначениеЗаполнено(РуководительДолжность) Тогда
		ДанныеОрганизации.Вставить("Должность", РуководительДолжность);
	Иначе
		ДанныеОрганизации.Вставить("Должность", "");
	КонецЕсли;
	ДанныеОрганизации.Вставить("КодРегиона", "");
	
	ДатаАдреса = ТекущаяДатаСеанса();
	ЮрАдресОрганизации = ПолучитьАдресИзКонтактнойИнформации(Организация, "Юр", ДатаАдреса);
	
	Если ЗначениеЗаполнено(ЮрАдресОрганизации.ЗначенияПолей) Тогда
		АдресСтруктурой = РаботаСАдресами.СведенияОбАдресе(ЮрАдресОрганизации.ЗначенияПолей);
		Если АдресСтруктурой.Свойство("Индекс") Тогда
			ДанныеОрганизации.Индекс = АдресСтруктурой.Индекс;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Регион") Тогда
			ДанныеОрганизации.Регион = АдресСтруктурой.Регион;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("КодРегиона") Тогда
			ДанныеОрганизации.КодРегиона = АдресСтруктурой.КодРегиона;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Район") Тогда
			ДанныеОрганизации.Район = АдресСтруктурой.Район;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Город") Тогда
			ДанныеОрганизации.Город = АдресСтруктурой.Город;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("НаселенныйПункт") Тогда
			ДанныеОрганизации.НаселенныйПункт = АдресСтруктурой.НаселенныйПункт;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Улица") Тогда
			ДанныеОрганизации.Улица = АдресСтруктурой.Улица;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Здание") И ЗначениеЗаполнено(АдресСтруктурой.Здание) Тогда
			ДанныеОрганизации.Дом = АдресСтруктурой.Здание.Номер;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Корпуса") И ЗначениеЗаполнено(АдресСтруктурой.Корпуса) Тогда
			ДанныеОрганизации.Корпус = АдресСтруктурой.Корпуса[0].Номер;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Помещения") И ЗначениеЗаполнено(АдресСтруктурой.Помещения) Тогда
			ДанныеОрганизации.Квартира = АдресСтруктурой.Помещения[0].Номер;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП.
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	РеквизитыСвидетельства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИП, "СвидетельствоДатаВыдачи, СвидетельствоСерияНомер");
	ШаблонДанныхСвидетельства = НСтр("ru = 'Свидетельство %1 от %2'");
	
	Сведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДанныхСвидетельства, 
		РеквизитыСвидетельства.СвидетельствоСерияНомер,
		Формат(РеквизитыСвидетельства.СвидетельствоДатаВыдачи, "ДЛФ=D"));
	
КонецПроцедуры

#Область УПД_2019

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД2019_ИнформацияПродавца.
Процедура ЗаполнитьДанныеУПД2019_ИнформацияПродавца(Основание, Настройки, Данные, Описание, Отказ) Экспорт

	ВсеВидыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ТипДокумента = Настройки.ТипДокумента;
	
	СтруктураЭД = ОбщегоНазначения.СкопироватьРекурсивно(Настройки, Ложь);

	Если ТипДокумента = ВсеВидыДокументов.УПД Тогда		
		СтруктураЭД.Вставить("Функция", "СЧФДОП");		
	ИначеЕсли ТипДокумента = ВсеВидыДокументов.СчетФактура Тогда		
		СтруктураЭД.Вставить("Функция", "СЧФ");		
	Иначе		
		СтруктураЭД.Вставить("Функция", "ДОП");		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Основание, "НалогообложениеНДС") 
										и ТипЗнч(Основание) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ТипыБезНДС = Перечисления.ТипыНалогообложенияНДС.ТипыБезНДС();
		Если ТипыБезНДС.Найти(Основание.НалогообложениеНДС) <> Неопределено И СтруктураЭД.Функция = "СЧФДОП" Тогда
			СтруктураЭД.Функция = "ДОП";
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")  И СтруктураЭД.Функция = "СЧФДОП" Тогда
		СтруктураЭД.Функция = "ДОП";		
	КонецЕсли;

	ДокОснование = Основание; 
	Если СтруктураЭД.Функция <> "ДОП" Тогда
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") 
				ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураКомиссионеру") 
				ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданныйАванс") Тогда
			СчетФактура = Основание;
			ДокОснование = СчетФактура.ДокументОснование;
		Иначе
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(Основание);		
			РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(МассивОбъектов);
			МассивСчетовФактур = РезультатАнализа.СчетаФактурыНаПечать;
			Если МассивСчетовФактур.Количество() = 0 Тогда
				НоваяСчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(НоваяСчетФактура, Основание);
				СтрокаОснований = НоваяСчетфактура.ДокументыОснования.Добавить();
				
				НоваяСчетФактура.ДокументОснование 	= Основание;
				СтрокаОснований.ДокументОснование 	= Основание;
				НоваяСчетФактура.КодВидаОперации = 
					Документы.СчетФактураВыданный.КодВидаОперации(НоваяСчетфактура.ДокументыОснования, 
							НоваяСчетфактура.Покупатели, НоваяСчетфактура.Дата, Основание);
				НоваяСчетФактура.Дата 				= ТекущаяДатаСеанса();
				НоваяСчетФактура.ДатаВыставления 	= ТекущаяДатаСеанса();
				НоваяСчетФактура.ЗаполнитьПараметрыСчетаФактурыПоОснованию();
				НоваяСчетФактура.УстановитьНовыйНомер();
				НоваяСчетФактура.Записать(РежимЗаписиДокумента.Проведение);
				МассивСчетовФактур.Добавить(НоваяСчетФактура.Ссылка);
				
				//Запись в Реестр документов
				ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(НоваяСчетФактура.Ссылка, "РеестрДокументов");
				РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, НоваяСчетФактура.Ссылка,  Неопределено, Ложь);
			КонецЕсли;
			СчетФактура = МассивСчетовФактур[0];
		КонецЕсли;
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(СчетФактура);
		ПараметрыПечати = Новый Структура();
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданныйАванс") Тогда
			СтруктураДанных = СчетФактураВыданныйАвансЛокализация.ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, МассивОбъектов);
		Иначе
			СтруктураДанных = Документы[СчетФактура.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
		КонецЕсли;	
		
		ЗаполнитьДанныеСчетаФактурыУПД_2019(СтруктураДанных, СтруктураЭД, Данные, Отказ);		
		ЗаполнитьДанныеПервичногоДокументаУПД_2019(СтруктураДанных, СтруктураЭД, Данные, Настройки, Отказ);
	Иначе
		ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС_2019(Основание, Настройки, СтруктураЭД, Данные, Отказ);
	КонецЕсли;

	ФункцияУПД = СтруктураЭД.Функция;	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "Функция", ФункцияУПД);

	ПередаточныеДокументы = Новый Массив;
	ПередаточныеДокументы.Добавить(ДокОснование);

	Если ФункцияУПД = "СЧФДОП" Тогда
		
		Если Основание = СчетФактура Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Описание.Основания, ПередаточныеДокументы);
		Иначе
			Описание.Основания.Добавить(СчетФактура);
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД2019_ИнформацияПокупателя.
Процедура ЗаполнитьДанныеУПД2019_ИнформацияПокупателя(Основания, Данные, Отказ) Экспорт
	
	ДокументОснование = Документы.СчетФактураПолученный.ПустаяСсылка();
	Для каждого Основание Из Основания Цикл
		ДокументОснование = Основание;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.Дата КАК Дата,
	|	ПриобретениеТоваровУслуг.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	ПриобретениеТоваровУслуг.Организация.ИНН КАК ОрганизацияИНН,
	|	ПриобретениеТоваровУслуг.Организация.КПП КАК ОрганизацияКПП,
	|	&Принял КАК Принял,
	|	&Должность КАК ПринялДолжность
	|ИЗ
	|	&ТипДокумента КАК ПриобретениеТоваровУслуг
	|ГДЕ
	|	ПриобретениеТоваровУслуг.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Дата КАК Дата,
	|	СчетФактураПолученный.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	СчетФактураПолученный.Организация.ИНН КАК ОрганизацияИНН,
	|	СчетФактураПолученный.Организация.КПП КАК ОрганизацияКПП	
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.Ссылка = &Ссылка И	
	|	ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Товар)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.Ссылка = &Ссылка И	
	|	ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Услуга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.Ссылка = &Ссылка И	
	|	ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Работа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктОРасхожденияхПослеПриемкиТовары.Ссылка.Номер КАК Номер,
	|	АктОРасхожденияхПослеПриемкиТовары.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхПослеПриемкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеПриемкиТовары.ДокументОснование = &Ссылка И	
	|	АктОРасхожденияхПослеПриемкиТовары.Ссылка.Статус <> Значение(Перечисление.СтатусыАктаОРасхождениях.ПустаяСсылка)
	|	И АктОРасхожденияхПослеПриемкиТовары.Ссылка.Статус <> Значение(Перечисление.СтатусыАктаОРасхождениях.НеСогласовано)
	|	И НЕ АктОРасхожденияхПослеПриемкиТовары.Ссылка.ПометкаУдаления
	|";
	
	ОснованиеАкт = Ложь;
	ОснованиеКорректировка = Ложь;
	ОснованиеВозврат = Ложь;
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда		
			ОснованиеАкт = Истина;
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
			ОснованиеКорректировка = Истина;
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
			ОснованиеВозврат = Истина;
		КонецЕсли;
	КонецЕсли;	
		
	Если ОснованиеАкт Или ОснованиеКорректировка Или ОснованиеВозврат Тогда
		Если ОснованиеАкт Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипДокумента", "Документ.ПриобретениеУслугПрочихАктивов");
		ИначеЕсли ОснованиеВозврат Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипДокумента", "Документ.ВозвратТоваровОтКлиента");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипДокумента", "Документ.КорректировкаПриобретения");
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Принял", "Неопределено");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Должность", "Неопределено");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипДокумента", "Документ.ПриобретениеТоваровУслуг");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Принял", "ПриобретениеТоваровУслуг.Принял");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Должность", "ПриобретениеТоваровУслуг.ПринялДолжность");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СодержаниеОперации = "-";
	ДатаПолученияТоваров = ТекущаяДатаСеанса();
	ОрганизацияНаименованиеПолное =	"-";
	ТоварПринял = "";
	ТоварПринялДолжность = "";
	ЕстьДокументыУчета = Истина;
	
	Если Не РезультатЗапроса[0].Пустой() Тогда // В основаниях есть документ поступления
		
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		ДатаПолученияТоваров 		  =	Выборка.Дата;
		ОрганизацияНаименованиеПолное =	Выборка.ОрганизацияНаименованиеПолное;
		Если Не ОснованиеАкт И Не ОснованиеКорректировка Тогда
			ТоварПринял 				  = Выборка.Принял;
			ТоварПринялДолжность 		  = Выборка.ПринялДолжность;
		КонецЕсли;
		
	ИначеЕсли Не РезультатЗапроса[1].Пустой() Тогда // основание - СФ
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
		ДатаПолученияТоваров =			 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	ИначеЕсли РезультатЗапроса[0].Пустой() и РезультатЗапроса[1].Пустой() Тогда
		
		ЕстьДокументыУчета = Ложь;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ДатаПолученияТоваров =		ДокументОснование.Дата;
			ОрганизацияСсылка = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(ДокументОснование.Организация);
			ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ОрганизацияСсылка.НаименованиеПолное), ОрганизацияСсылка.НаименованиеПолное, ОрганизацияСсылка.Наименование);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизацияНаименованиеПолное) И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ОрганизацияСсылка = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
		ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ОрганизацияСсылка.НаименованиеПолное), ОрганизацияСсылка.НаименованиеПолное, ОрганизацияСсылка.Наименование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка) Тогда
		СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН %2'"),
				ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));
	Иначе
		СоставительДокумента = ОрганизацияНаименованиеПолное;		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
		"СоставительДокументаНаименование", СоставительДокумента);
	
	Если ЕстьДокументыУчета Тогда 
		Если РезультатЗапроса[5].Пустой() Тогда

			СоставСодержания = Новый Массив;
			Если Не РезультатЗапроса[2].Пустой() Или ОснованиеКорректировка Тогда
				СоставСодержания.Добавить(НСтр("ru = 'Товары принял без претензий.'"));
			КонецЕсли;
			Если Не РезультатЗапроса[3].Пустой() Или ОснованиеАкт Тогда
				СоставСодержания.Добавить(НСтр("ru = 'Услуги получены, претензий нет.'"));
			КонецЕсли;
			Если Не РезультатЗапроса[4].Пустой() Тогда
				СоставСодержания.Добавить(НСтр("ru = 'Результаты работ принял без претензий.'"));
			КонецЕсли;
			Если СоставСодержания.Количество() Тогда
				СодержаниеОперации  = СтрСоединить(СоставСодержания, " ");
			КонецЕсли;
			
			КодИтога = "1";
			
		Иначе
			
			КодИтога = "2";
			СодержаниеОперации = НСтр("ru = 'Товары (работы, услуги, права) приняты с расхождениями (претензией)'");
			ВидДокументаОРасхождении = "3";
			Выборка = РезультатЗапроса[5].Выбрать();
			Выборка.Следующий();
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "СведенияОПринятииТоваров.ДокументОРасхождениях.Наименование", "Акт о расхождениях после приемки");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "СведенияОПринятииТоваров.ДокументОРасхождениях.Вид", ВидДокументаОРасхождении);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "СведенияОПринятииТоваров.ДокументОРасхождениях.Номер", Выборка.Номер);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "СведенияОПринятииТоваров.ДокументОРасхождениях.Дата", Выборка.Дата);
			
		КонецЕсли;
	Иначе
		КодИтога = "1";		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "СведенияОПринятииТоваров.ДатаПолученияТоваров", ДатаПолученияТоваров);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "СведенияОПринятииТоваров.СодержаниеОперации", СодержаниеОперации);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "СведенияОПринятииТоваров.КодИтога", КодИтога);

	Если ЗначениеЗаполнено(ТоварПринял) Тогда
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ТоварПринял);
		Если ЗначениеЗаполнено(ТоварПринялДолжность)
			И ЗначениеЗаполнено(ТоварПринял) Тогда
			// Принявший товар работает в организации
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Должность", Строка(ТоварПринялДолжность));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ОснованиеПолномочий", "Должностные обязанности");					
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Фамилия", ФИО.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Имя", ФИО.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Отчество", ФИО.Отчество);
		ИначеЕсли ЗначениеЗаполнено(ТоварПринял) Тогда
			// Принявший товар не работает в организации
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
				"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Фамилия", ФИО.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
				"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Имя", ФИО.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
				"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Отчество", ФИО.Отчество);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент_2019(ДеревоДанных, СсылкиНаВладельцев = Неопределено, СпособОбработки = Неопределено, ОписаниеОшибки = "") Экспорт
	
	Текст = "";
	
	НачатьТранзакцию();
	Попытка
		
		ПервичныйДокумент = Неопределено;
		СчетФактура = Неопределено;
		
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для Каждого Ссылка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
				 Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент") Тогда
					СчетФактура = Ссылка;
				Иначе
					ПервичныйДокумент = Ссылка;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		ФункцияУПД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");

		Если ФункцияУПД = "ДОП" Или ФункцияУПД = "СЧФДОП" Тогда
			НайтиСоздатьУПДДокументОПередаче_2019(ДеревоДанных, ПервичныйДокумент, Истина, СпособОбработки, ОписаниеОшибки);
			ДокументыУчета.Добавить(ПервичныйДокумент);
		КонецЕсли;
		
		// Заполним основание в СФ.
		Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
			ДокументыОснованияСчетаФактуры = Новый Массив;
			ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		КонецЕсли;

		Если ФункцияУПД = "СЧФ" Или ФункцияУПД = "СЧФДОП" Тогда		
			НайтиСоздатьУПДСчетФактуру_2019(ДеревоДанных, СчетФактура, СпособОбработки, ОписаниеОшибки);
			Если ЗначениеЗаполнено(СчетФактура) Тогда
				ДокументыУчета.Добавить(СчетФактура);
			КонецЕсли;
		КонецЕсли;
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;	
	
КонецПроцедуры

Процедура НайтиСоздатьУПДДокументОПередаче_2019(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки, ОписаниеОшибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СпособОбработки) = Тип("Строка") Тогда
		СпособОбработкиСтрокой = СпособОбработки;
	Иначе
		СпособОбработкиСтрокой = СпособОбработки.ПервичныйДокумент;
	КонецЕсли;
	
	Если СпособОбработкиСтрокой = "ПриобретениеУслугПрочихАктивов" Тогда
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияУслугУПД_2019(ДеревоДанных);		
		ЗаполнитьДокументПоступленияУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	Иначе
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПриобретенияТоваровУслугУПД_2019(ДеревоДанных);
		Если СпособОбработкиСтрокой = "ВозвратТоваровОтКлиента" Тогда
			ЗаполнитьДокументВозвратаТоваровОтПокупателя(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);		
		Иначе
			Если ДанныеДляЗагрузки.Шапка.Исправление Тогда
				ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
			Иначе
				ЗаполнитьДокументПриобретенияТоваровУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСоздатьУПДСчетФактуру_2019(ДеревоДанных, СсылкаНаВладельца = Неопределено, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактурыУПД_2019(ДеревоДанных);
	Если ДанныеДляЗагрузки.Шапка.Исправление Тогда
		Если ДанныеДляЗагрузки.Шапка.Свойство("ДокументыОснования") Тогда
			Для Каждого ДокументОснование Из ДанныеДляЗагрузки.Шапка.ДокументыОснования Цикл
				Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПриобретения") или
				  ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					Корректировка = ДокументОснование.Ссылка;
					ДокументОснование = Корректировка.ДокументОснование;
				Иначе
					ДокументОснование = ДокументОснование.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДанныеДляЗагрузки.Шапка.Вставить("Корректировочный", Ложь);
		ДанныеДляЗагрузки.Шапка.Вставить("Исправление", Ложь);					
			
		ТаблицаСчетаФактуры = УчетНДСУП.СчетаФактурыПолученныеПоДокументамОснованиям(ДокументОснование, Ложь);
		Если ТаблицаСчетаФактуры.Количество() = 0 Тогда
			СчетФактураОснование = Неопределено;
		Иначе
			СчетФактураОснование = ТаблицаСчетаФактуры[0].Ссылка;
		КонецЕсли;
		ДанныеДляЗагрузки.Шапка.Вставить("СчетФактураОснование", СчетФактураОснование);
	КонецЕсли;	
	
	ЗаполнитьДокументСчетФактура(СсылкаНаВладельца, ДанныеДляЗагрузки, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область УПД

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД_ИнформацияПокупателя.
Процедура ЗаполнитьДанныеУПД_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт

	ДокументОснование = Документы.СчетФактураПолученный.ПустаяСсылка();
	Для каждого Основание Из Основания Цикл
		ДокументОснование = Основание;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.Дата КАК Дата,
	|	ПриобретениеТоваровУслуг.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	ПриобретениеТоваровУслуг.Организация.ИНН КАК ОрганизацияИНН,
	|	ПриобретениеТоваровУслуг.Организация.КПП КАК ОрганизацияКПП,
	|	&Принял КАК Принял,
	|	&Должность КАК ПринялДолжность
	|ИЗ
	|	&ТипДокумента КАК ПриобретениеТоваровУслуг
	|ГДЕ
	|	ПриобретениеТоваровУслуг.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Дата КАК Дата,
	|	СчетФактураПолученный.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	СчетФактураПолученный.Организация.ИНН КАК ОрганизацияИНН,
	|	СчетФактураПолученный.Организация.КПП КАК ОрганизацияКПП	
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.Ссылка = &Ссылка И	
	|	ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Товар)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.Ссылка = &Ссылка И	
	|	ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Услуга)
	|";
	
	Если ЗначениеЗаполнено(ДокументОснование) И 
				ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		ОснованиеАкт = Истина;
	Иначе
		ОснованиеАкт = Ложь;
	КонецЕсли;	
		
	Если ОснованиеАкт Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипДокумента", "Документ.ПриобретениеУслугПрочихАктивов");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Принял", "Неопределено");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Должность", "Неопределено");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипДокумента", "Документ.ПриобретениеТоваровУслуг");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Принял", "ПриобретениеТоваровУслуг.Принял");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Должность", "ПриобретениеТоваровУслуг.ПринялДолжность");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СодержаниеОперации =			 "-";
	ДатаПолученияТоваров =			 ТекущаяДатаСеанса();
	ОрганизацияНаименованиеПолное =	 "-";
	ТоварПринял = "";
	ТоварПринялДолжность = "";
	ЕстьДокументыУчета = Истина;
	
	Если Не РезультатЗапроса[0].Пустой() Тогда // В основаниях есть документ поступления
		
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		ДатаПолученияТоваров 		  =	Выборка.Дата;
		ОрганизацияНаименованиеПолное =	Выборка.ОрганизацияНаименованиеПолное;
		Если Не ОснованиеАкт Тогда
			ТоварПринял 				  = Выборка.Принял;
			ТоварПринялДолжность 		  = Выборка.ПринялДолжность;
		КонецЕсли;
		
	ИначеЕсли Не РезультатЗапроса[1].Пустой() Тогда // основание - СФ
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
		ДатаПолученияТоваров =			 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	ИначеЕсли РезультатЗапроса[0].Пустой() и РезультатЗапроса[1].Пустой() Тогда
		
		ЕстьДокументыУчета = Ложь;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ДатаПолученияТоваров =		ДокументОснование.Дата;
			ОрганизацияСсылка = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(ДокументОснование.Организация);
			ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ОрганизацияСсылка.НаименованиеПолное), ОрганизацияСсылка.НаименованиеПолное, ОрганизацияСсылка.Наименование);
		КонецЕсли;
		
	КонецЕсли;
	
	СоставСодержания = Новый Массив;
	Если Не РезультатЗапроса[2].Пустой() ИЛИ Не ЕстьДокументыУчета  Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Товары принял без претензий.'"));
	КонецЕсли;
	Если Не РезультатЗапроса[3].Пустой() Или ОснованиеАкт Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Услуги получены, претензий нет.'"));
	КонецЕсли;
	Если СоставСодержания.Количество() Тогда
		СодержаниеОперации  = СтрСоединить(СоставСодержания, " ");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизацияНаименованиеПолное) И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ОрганизацияСсылка = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
		ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ОрганизацияСсылка.НаименованиеПолное), ОрганизацияСсылка.НаименованиеПолное, ОрганизацияСсылка.Наименование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка) Тогда
		СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН %2'"),
				ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));
	Иначе
		СоставительДокумента = ОрганизацияНаименованиеПолное;		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
		"СоставительДокументаНаименование", СоставительДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ДатаПолученияТоваров", ДатаПолученияТоваров);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "СодержаниеОперации", СодержаниеОперации);
	
	Если ЗначениеЗаполнено(ТоварПринял) Тогда
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ТоварПринял);
		Если ЗначениеЗаполнено(ТоварПринялДолжность)
			И ЗначениеЗаполнено(ТоварПринял) Тогда
			// Принявший товар работает в организации
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Должность", Строка(ТоварПринялДолжность));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ОснованиеПолномочий", "Должностные обязанности");					
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Фамилия", ФИО.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Имя", ФИО.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Отчество", ФИО.Отчество);
		ИначеЕсли ЗначениеЗаполнено(ТоварПринял) Тогда
			// Принявший товар не работает в организации
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
				"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Фамилия", ФИО.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
				"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Имя", ФИО.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
				"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Отчество", ФИО.Отчество);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УКД_2020

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУКД2020_ИнформацияПродавца
Процедура ЗаполнитьДанныеУКД2020_ИнформацияПродавца(Основание, Настройки, Данные, Описание, Отказ) Экспорт

	ВсеВидыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ВидДокумента = Настройки.ТипДокумента;
	
	СтруктураЭД = ОбщегоНазначения.СкопироватьРекурсивно(Настройки, Ложь);

	ДокОснование = Основание; 
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		СчетФактура = Основание;
		ДокОснование = СчетФактура.ДокументОснование;		
	Иначе
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(Основание);		
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(МассивОбъектов);
		МассивСчетовФактур = РезультатАнализа.СчетаФактурыНаПечать;
		Если МассивСчетовФактур.Количество() = 0 Тогда
			НоваяСчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяСчетФактура, Основание);
			СтрокаОснований = НоваяСчетфактура.ДокументыОснования.Добавить();
			
			НоваяСчетФактура.ДокументОснование 	= Основание;
			СтрокаОснований.ДокументОснование 	= Основание;
			НоваяСчетФактура.КодВидаОперации = 
				Документы.СчетФактураВыданный.КодВидаОперации(НоваяСчетфактура.ДокументыОснования, 
						НоваяСчетфактура.Покупатели, НоваяСчетфактура.Дата, Основание);
			НоваяСчетФактура.КодВидаОперацииНаУменьшение 	= "18";
			НоваяСчетФактура.Дата 				= ТекущаяДатаСеанса();
			НоваяСчетФактура.ДатаВыставления 	= ТекущаяДатаСеанса();
			НоваяСчетФактура.ЗаполнитьПараметрыСчетаФактурыПоОснованию(Основание);
			
			НоваяСчетФактура.Записать(РежимЗаписиДокумента.Проведение);
			МассивСчетовФактур.Добавить(НоваяСчетФактура.Ссылка);
			
			//Запись в Реестр документов
			ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(НоваяСчетФактура.Ссылка, "РеестрДокументов");
			РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, НоваяСчетФактура.Ссылка,  Неопределено, Ложь);
		КонецЕсли;
		СчетФактура = МассивСчетовФактур[0];
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СчетФактура);
	ПараметрыПечати = Новый Структура();
	
	// Маркировка
	ПараметрыПечати.Вставить("ЗаполнитьДанныеШтрихкодовДляУКДДо", Истина);

	СтруктураДанных = Документы.СчетФактураВыданный.ПолучитьДанныеДляПечатнойФормыУКД(ПараметрыПечати, МассивОбъектов);
	
	Если ВидДокумента = ВсеВидыДокументов.УКД Тогда		
		СтруктураЭД.Вставить("Функция", "КСЧФДИС");		
		ЗаполнитьДанныеСчетаФактурыУКД(СтруктураДанных, СтруктураЭД, Данные);		
		ЗаполнитьДанныеПервичногоДокументаУКД_2020(СтруктураДанных, СтруктураЭД, Данные, Настройки);		
	ИначеЕсли ВидДокумента = ВсеВидыДокументов.КорректировочныйСчетФактура Тогда		
		СтруктураЭД.Вставить("Функция", "КСЧФ");
		ЗаполнитьДанныеСчетаФактурыУКД(СтруктураДанных, СтруктураЭД, Данные);
		ЗаполнитьДанныеПервичногоДокументаУКД_2020(СтруктураДанных, СтруктураЭД, Данные, Настройки);		
	Иначе		
		СтруктураЭД.Вставить("Функция", "ДИС");
		ЗаполнитьДанныеПервичногоДокументаУКД_2020(СтруктураДанных, СтруктураЭД, Данные, Настройки);		
	КонецЕсли;
	
	ФункцияУКД = СтруктураЭД.Функция;	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "Функция", ФункцияУКД);

	ПередаточныеДокументы = Новый Массив;
	ПередаточныеДокументы.Добавить(ДокОснование);
	
	Если ФункцияУКД = "КСЧФДИС" Тогда		
		Если Основание = СчетФактура Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Описание.Основания, ПередаточныеДокументы);
		Иначе
			Описание.Основания.Добавить(СчетФактура);
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУКД2020_ИнформацияПокупателя.
Процедура ЗаполнитьДанныеУКД2020_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	ДокументОснование = Документы.СчетФактураПолученный.ПустаяСсылка();
	Для каждого Основание Из Основания Цикл
		ДокументОснование = Основание;
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПриобретения.Дата,
	|	КорректировкаПриобретения.Организация.НаименованиеПолное,
	|	КорректировкаПриобретения.Организация.ИНН КАК ОрганизацияИНН,
	|	КорректировкаПриобретения.Организация.КПП КАК ОрганизацияКПП	
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|ГДЕ
	|	КорректировкаПриобретения.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.Организация.НаименованиеПолное,
	|	СчетФактураПолученный.Организация.ИНН КАК ОрганизацияИНН,
	|	СчетФактураПолученный.Организация.КПП КАК ОрганизацияКПП	
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка = &Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ДатаПолученияКорректировки = ТекущаяДатаСеанса();
	ОрганизацияНаименованиеПолное =	 "-";
	Если Не РезультатЗапроса[0].Пустой() Тогда // В основаниях есть документ поступления
		
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		ДатаПолученияКорректировки 	  =	 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	ИначеЕсли Не РезультатЗапроса[1].Пустой() Тогда // основание - СФ
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
		ДатаПолученияКорректировки 	  =	 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизацияНаименованиеПолное) И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Если ЗначениеЗаполнено(ДокументОснование) Тогда	
			ОрганизацияСсылка = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(ДокументОснование.Организация);
			ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ОрганизацияСсылка.НаименованиеПолное), ОрганизацияСсылка.НаименованиеПолное, ОрганизацияСсылка.Наименование);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка) Тогда
		СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН %2'"),
				ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));
	Иначе
		СоставительДокумента = ОрганизацияНаименованиеПолное;		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
		"СоставительДокументаНаименование", СоставительДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ДатаСогласования", ДатаПолученияКорректировки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "СодержаниеОперации", НСтр("ru = 'С изменением стоимости согласен.'"));

КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУКД_2020.
Процедура НайтиСоздатьУКД_2020(ДеревоДанных, СсылкиНаВладельцев, СпособОбработки, ОписаниеОшибки = "") Экспорт
	
	Текст = "";	
	ФункцияУКД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");	
	ДокументыУчета = Новый Массив;			
	
	Если СсылкиНаВладельцев <> Неопределено Тогда
		Для Каждого Ссылка Из СсылкиНаВладельцев Цикл
			Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
			 Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент") Тогда
				СчетФактура = Ссылка;
			Иначе
				ПервичныйДокумент = Ссылка;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;			
	
	НачатьТранзакцию();
	Попытка
		
		Если ФункцияУКД = "КСЧФДИС" Тогда		
			ПервичныйДокумент = Неопределено;
			СчетФактура = Неопределено;
			
			НайтиСоздатьКорректировкуПоступленияУКД(ДеревоДанных, ПервичныйДокумент);
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
			// Заполним основание в СФ.
			ДокументыОснованияСчетаФактуры = Новый Массив;
			ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
			
			НайтиСоздатьКорректировочныйСчетФактуруУКД(ДеревоДанных, СчетФактура);
			ДокументыУчета.Добавить(СчетФактура);
			
		ИначеЕсли ФункцияУКД = "ДИС" Тогда
			НайтиСоздатьКорректировкуПоступленияУКД(ДеревоДанных, ПервичныйДокумент);
			ДокументыУчета.Добавить(ПервичныйДокумент);
		ИначеЕсли ФункцияУКД = "КСЧФ" Тогда
			НайтиСоздатьКорректировочныйСчетФактуруУКД(ДеревоДанных, СчетФактура);
			ДокументыУчета.Добавить(СчетФактура);			
		КонецЕсли;
		
		СсылкиНаВладельцев = ДокументыУчета;	
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеМетоды_УПД_УКД_2019

Процедура ЗаполнитьДанныеПервичногоДокументаУПД_2019(СтруктураДанных, СтруктураЭД, ДеревоДанных, Настройки, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапки, "НалогообложениеНДС") Тогда
		НДСИсчисляетсяНалоговымАгентом = (ДанныеШапки.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
			или ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураКомиссионеру") Тогда
		ДокументОтгрузки = ДанныеШапки.Ссылка.ДокументОснование;
	Иначе
		ДокументОтгрузки = ДанныеШапки.Ссылка;
	КонецЕсли;
	
	Если ДанныеШапки.ПредставлениеДокумента = "счет-фактура комиссионера" Тогда
		ЭтоКомиссия = Истина;
	Иначе
		ЭтоКомиссия = Ложь
	КонецЕсли;
	
	ЕстьТаблицаРезультатПоКонтрагентам = Ложь;
	Если СтруктураДанных.Свойство("РезультатПоКонтрагентам") Тогда
		ЕстьТаблицаРезультатПоКонтрагентам = Истина;
	КонецЕсли;
	
	Если ЕстьТаблицаРезультатПоКонтрагентам Тогда
		ВыборкаДанныхКонтрагента = СтруктураДанных.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаДанныхКонтрагента.НайтиСледующий(Новый Структура("Ссылка", ДанныеШапки.Ссылка));
		ДанныеКонтрагента = ВыборкаДанныхКонтрагента.Выбрать();
		ДанныеКонтрагента.Следующий();
		Если Не ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) Тогда
			ЕстьТаблицаРезультатПоКонтрагентам = Ложь;	
		КонецЕсли;		
	КонецЕсли;  	
	
		
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И СтруктураЭД.Функция <> "СЧФ" Тогда
		Если ДокументОтгрузки.Статус <> Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено Тогда
			ВидОперации = НСтр("ru = 'Формирование ЭД'");
			ПодробныйТекстОшибки = НСтр("ru = 'Ошибка при формирование ЭД. Неверный статус документа.'");
			ТекстСообщения = НСтр("ru = 'Формирование ЭД возможно только для документов в статусе ""Реализовано"".'");
			ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
			Отказ = Истина;
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПроверитьМаркируемуюПродукциюДокумента(ДокументОтгрузки, Отказ);
	
	Если Отказ Тогда
		ВидОперации = НСтр("ru = 'Формирование ЭД'");
		ПодробныйТекстОшибки = НСтр("ru = 'Ошибка при формирование ЭД. Неверное указание маркированной продукции.'");
		ТекстСообщения = НСтр("ru = 'Проверьте указание кодов маркировки.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Заполнение параметра ВидОборота
	ВидОборота = "";
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ДокументОтгрузки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			ВидОборота = "04";	
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Если ДокументОтгрузки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту Тогда
			ВидОборота = "05";	
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВидОборота) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОборота", ВидОборота);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВнестиСведенияОВыбытииМаркированныхТоваровВДеревоУПДУКД(ДеревоДанных, ДокументОтгрузки.ВариантВыбытияМаркируемойПродукции);
	КонецЕсли;
	
	СтрокаДереваВидСчетаФактуры = ЭлектронноеВзаимодействие.СтрокаДерева(ДеревоДанных, "ВидСчетаФактуры");
	ВидСчетаФактуры = СтрокаДереваВидСчетаФактуры.Значение;
	
	ОпцииПечати = Новый Структура;
	ОпцииПечати.Вставить("НомерСформированВСчетеФактуре", СтруктураДанных.Свойство("НомерСформированВСчетеФактуре"));
	
	Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента",  ДанныеШапки.Номер);		
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, 
			"НомерДокумента",  НомерСчетаФактурыНаПечать(ДанныеШапки.Номер, ДанныеШапки.ИндексПодразделения));
	КонецЕсли;
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДанныеШапки.Дата);
	
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Число(ДанныеШапки.НомерИсправления));	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", ДанныеШапки.ДатаИсправления);
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", "643", ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", "Российский рубль");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ДанныеШапки.ТолькоУслуги);			
	
	// Выводим данные продавца. 
	СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Организация, , ДанныеШапки.Дата);
	
	
	Если ЗначениеЗаполнено(ДанныеШапки.КПППоставщика) Тогда
		СведенияОПоставщике.КПП = ДанныеШапки.КПППоставщика;
	КонецЕсли;
	ТаблицаПродавцов = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОПродавце");
	ТаблицаПродавцов.Колонки.Добавить("СведенияОбУчастнике");
	ДанныеПродавца = ПолучитьДанныеУчастникаУПД(СведенияОПоставщике, "Юр");
	СтрокаПродавца = ТаблицаПродавцов.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПродавца, ДанныеПродавца);
	// Заполняем структурное подразделение
	Если ДанныеШапки.ПредставлениеДокумента <> "счет-фактура комиссионера" Тогда
		Если ЗначениеЗаполнено(ДанныеШапки.Ссылка.Подразделение) Тогда
			СтрокаПродавца.СтруктурноеПодразделение = ДанныеШапки.Ссылка.Подразделение.Наименование;
		КонецЕсли;
	КонецЕсли;
	ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаПродавцов);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаПродавцов, "СведенияОПродавце");
	
	Если ВидСчетаФактуры <> "Авансовый" Тогда	
		// Выводим данные грузоотправителя.
		ТаблицаГрузоотправителей = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОГрузоотправителе");
		ТаблицаГрузоотправителей.Колонки.Добавить("СведенияОбУчастнике");
		
		Если ДанныеШапки.Организация = ДанныеШапки.Грузоотправитель И Не ДанныеШапки.ТолькоУслуги Тогда
			ТаблицаГрузоотправителей.Добавить().ОнЖе = Истина;	
		ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.Грузоотправитель) И Не ДанныеШапки.ТолькоУслуги Тогда
			СведенияОГрузоотправителе = Неопределено; 
			СведенияОГрузоотправителе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузоотправитель, , ДанныеШапки.Дата);
			ДанныеГрузоотправителя = ПолучитьДанныеУчастникаУПД(СведенияОГрузоотправителе, "Факт");
			СтрокаГрузоотправителя = ТаблицаГрузоотправителей.Добавить();
			СтрокаГрузоотправителя.Грузоотправитель = ДанныеГрузоотправителя;		
			СтрокаГрузоотправителя.СведенияОбУчастнике = СведенияОГрузоотправителе;
		КонецЕсли;
		ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаГрузоотправителей, "Грузоотправитель");
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаГрузоотправителей, "СведенияОГрузоотправителе");
		
		// Выводим данные грузополучателя.
		ТаблицаГрузополучателей = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОГрузополучателе");
		ТаблицаГрузополучателей.Колонки.Добавить("СведенияОбУчастнике");
		
		Если Не ДанныеШапки.ТолькоУслуги Тогда
			СведенияОГрузополучателе = "";
			Если НЕ ЕстьТаблицаРезультатПоКонтрагентам Тогда
				Если ДанныеШапки.Грузополучатель <> Неопределено Тогда
					СведенияОГрузополучателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузополучатель, , ДанныеШапки.Дата);
				КонецЕсли;	
			ИначеЕсли ЗначениеЗаполнено(ДанныеКонтрагента.Грузополучатель) Тогда
				СведенияОГрузополучателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента.Грузополучатель, , ДанныеШапки.Дата);
			КонецЕсли;
			Если ЗначениеЗаполнено(СведенияОГрузополучателе) Тогда
				ДанныеГрузополучателя = ПолучитьДанныеУчастникаУПД(СведенияОГрузополучателе, "Факт");
				СтрокаГрузополучателя = ТаблицаГрузополучателей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаГрузополучателя, ДанныеГрузополучателя);
			КонецЕсли; 
		
			ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаГрузополучателей);
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаГрузополучателей, "СведенияОГрузополучателе");
		КонецЕсли;
	КонецЕсли;
	
	// Выводим данные покупателя. 
	СведенияОПокупателе = "";
	Если НЕ ЕстьТаблицаРезультатПоКонтрагентам Тогда 
		СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Контрагент, , ДанныеШапки.Дата);
		Если Не ПустаяСтрока(ДанныеШапки.КПППокупателя) Тогда
			СведенияОПокупателе.КПП = ДанныеШапки.КПППокупателя;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) Тогда		
			СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента.Контрагент, , ДанныеШапки.Дата);
			Если Не ПустаяСтрока(ДанныеКонтрагента.КПППокупателя) Тогда
				СведенияОПокупателе.КПП = ДанныеКонтрагента.КПППокупателя;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияОПокупателе) Тогда
		ТаблицаПокупателей = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОПокупателе");
		ТаблицаПокупателей.Колонки.Добавить("СведенияОбУчастнике");
		ДанныеПокупателя = ПолучитьДанныеУчастникаУПД(СведенияОПокупателе, "Юр");
		СтрокаПокупателя = ТаблицаПокупателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПокупателя, ДанныеПокупателя);
		ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаПокупателей);
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаПокупателей, "СведенияОПокупателе");
	КонецЕсли;	
		
	Если ЭтоКомиссия Тогда
		// Получателем данного счета-фактуры является комиссионер. Поместим данные о получателе в доп. данные.
		СведенияОКомиссионере = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Ссылка.Комиссионер, , ДанныеШапки.Дата);
		ЗаполнитьДанныеУчастникаУПД_2019(ДеревоДанных, СведенияОКомиссионере, "СведенияОКомиссионере", "Юр", ДанныеШапки.Дата);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапки, "ПредставлениеВыставленКомиссионеру")
															И ЗначениеЗаполнено(ДанныеШапки.ПредставлениеВыставленКомиссионеру) Тогда
			ПутьВДереве = "ДопДанныеСчетаФактуры.ТекстоваяИнформация";
			ДобавитьДопополнительныеДанныеВДерево(ДеревоДанных, "ДополнительныеСведенияОКомиссионере",
				ДанныеШапки.ПредставлениеВыставленКомиссионеру, ПутьВДереве);
		КонецЕсли;		
	КонецЕсли;
	
	СоставительДокументаНаименование = СведенияОПоставщике.ПолноеНаименование
		+ ?(ЗначениеЗаполнено(СведенияОПоставщике.КПП),
			СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПоставщике.ИНН, СведенияОПоставщике.КПП),
			СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПоставщике.ИНН));
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СоставительДокументаНаименование", СоставительДокументаНаименование);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6)));
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом");
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("СведенияОТаможеннойДекларации");
	ТаблицаТоваров.Колонки.Добавить("СведенияОПрослеживаемости");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Признак");
	ТаблицаТоваров.Колонки.Добавить("ТоварКод");
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор");
	ТаблицаТоваров.Колонки.Добавить("КодВидаТовара");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТаблицаТоваров.Колонки.Добавить("СведенияОДокументеОтгрузки");
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировке");
	// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторМестаПоставкиЕИС");
	// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	
	ВыборкаПоДокументам = СтруктураДанных.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоДокументам.Следующий();
	СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапки, "ПредставлениеСтроки5а")
			И ЗначениеЗаполнено(ДанныеШапки.ПредставлениеСтроки5а) Тогда
			
		КоличествоСтрок = СтрокаТовары.Количество();		

		Если СтруктураЭД.Функция = "СЧФ" Тогда
			ПредставлениеСтроки5а = ДанныеШапки.ПредставлениеСтроки5а;
		Иначе			
			ПредставлениеСтроки5а = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '№ п/п %1 № %2 от %3'"),
						?(КоличествоСтрок = 1, "1" , "1-" + Формат(КоличествоСтрок, "ЧГ=0")),
						ДанныеШапки.Номер,
						Формат(ДанныеШапки.Дата, "ДЛФ=ДД"));
		КонецЕсли;				
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДокументОбОтгрузке", ПредставлениеСтроки5а);
		
		// Документы подтверждения отгрузки.
		ДокументыПодтвержденияОтгрузки = Новый ТаблицаЗначений;
		ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Наименование");
		ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Номер");
		ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Дата");
		СтрокаДокументыПодтвержденияОтгрузки = ДокументыПодтвержденияОтгрузки.Добавить();
		СтрокаДокументыПодтвержденияОтгрузки.Номер = ДанныеШапки.Номер;
		СтрокаДокументыПодтвержденияОтгрузки.Дата = ДанныеШапки.Дата;
		СтрокаДокументыПодтвержденияОтгрузки.Наименование = НСтр("ru = 'Реализация (акт, накладная, УПД)'");
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДокументыПодтвержденияОтгрузки, "ДокументыПодтвержденияОтгрузки");
		
	КонецЕсли; 
	
	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	ЕстьРаботы = Ложь;
	
	ИспользоватьНаборы = Ложь;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
		ИспользоватьНаборы = Истина;
	КонецЕсли;
	
	ЗаполнятьСопоставление = Истина;
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
			Или ВидСчетаФактуры = "Авансовый" Тогда
		ЗаполнятьСопоставление = Ложь;
	КонецЕсли;
	
	ТаблицаКодовМаркировки = Неопределено;
	СтруктураДанных.Свойство("Маркировка", ТаблицаКодовМаркировки);
	
	ЗаполнениеКодаТовара = СтруктураЭД.ВариантыЗаполненияПолей.ТоварКод;
	Если ЗначениеЗаполнено(СведенияОПокупателе) Тогда
		ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(СведенияОПокупателе.СтранаРегистрации, ДанныеШапки.Дата);
	Иначе
		ВыводитьКодыТНВЭД = Ложь;
	КонецЕсли;

	НомерСтроки = 1;
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	НоменклатураПартнеровСервер.ШтрихкодыПоТоварам(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

	Если ЗаполнятьСопоставление Тогда
		ВыборкаДляСопоставления = НоменклатураПартнеровСервер.ВыборкаДляСопоставленияНоменклатуры(ДокументОтгрузки);
		СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
		ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
		ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	КонецЕсли;
	
	// Получение данных по прослеживаемости
	ТаблицаДанныхПрослеживаемости = Неопределено;
	СтруктураДанных.Свойство("Прослеживаемость", ТаблицаДанныхПрослеживаемости);
	
	Пока СтрокаТовары.Следующий() Цикл
		
		Если ИспользоватьНаборы Тогда
			Если СтрокаТовары.ЭтоНабор и СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах <> Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Не (ЗначениеЗаполнено(СтрокаТовары.Номенклатура) или ЗначениеЗаполнено(СтрокаТовары.НоменклатураНаименование))  Тогда
			Продолжить;
		КонецЕсли;	
			
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			Если СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар 
				или СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
				ЕстьТовары = Истина;
			ИначеЕсли СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				ЕстьУслуги = Истина;
			ИначеЕсли СтрокаТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				ЕстьРаботы = Истина;
			КонецЕсли;
		КонецЕсли;
		
		СуммаСНДС   = Окр(СтрокаТовары.СуммаСНДС, 2);
		СуммаНДС    = Окр(СтрокаТовары.СуммаНДС, 2);
		СуммаБезНДС = Окр(СтрокаТовары.СуммаБезНДС, 2);
		
		НовСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТовары);
		НовСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		НовСтрока.ТоварНаименование  = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НоменклатураНаименование,
			СтрокаТовары.ХарактеристикаНаименование
			) + ?(СтрокаТовары.ЭтоВозвратнаяТара, НСтр("ru = ' (возвратная тара)'"), "");
			
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			НовСтрока.ТоварИдентификатор = Строка(СтрокаТовары.Номенклатура.УникальныйИдентификатор());
		КонецЕсли;
		НовСтрока.НалоговаяСтавка    = СтрокаТовары.СтавкаНДС;
			
		НовСтрока.ЦенаЗаЕдиницуИзмерения    = Окр(СтрокаТовары.Цена, 2);
		НовСтрока.СтоимостьТоваровБезНалога = СуммаБезНДС;
		НовСтрока.СуммаНалога               = СуммаНДС;
		НовСтрока.СтоимостьТоваровСНалогом  = СуммаСНДС;
		
		Если НДСИсчисляетсяНалоговымАгентом Тогда
			НовСтрока.НалоговаяСтавка          = "НДС исчисляется налоговым агентом";
			НовСтрока.СуммаНалога              = 0;
			НовСтрока.СтоимостьТоваровСНалогом = 0;
		КонецЕсли;		
		
		УпаковкаИзДокумента = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "Упаковка") И ЗначениеЗаполнено(СтрокаТовары.Упаковка) Тогда
			УпаковкаИзДокумента = СтрокаТовары.Упаковка;
		ИначеЕсли ЗаполнятьСопоставление Тогда
			УпаковкаИзДокумента = ЭлектронноеВзаимодействиеУТВызовСервера.ЕдиницаХраненияНоменклатуры(СтрокаТовары.Номенклатура)
		Иначе
			УпаковкаИзДокумента = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка()
		КонецЕсли;

		Если ЗаполнятьСопоставление Тогда				
			// Сопоставление.
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
			Если СтрокаТовары.Характеристика <> Неопределено Тогда
				ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
			Иначе
				ПараметрыОтбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());				
			КонецЕсли;
			ПараметрыОтбора.Вставить("Упаковка", УпаковкаИзДокумента);
			СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
				НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
				НовСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
		    Иначе
				НовСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры, УпаковкаИзДокумента);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ВидСчетаФактуры = "Авансовый" Тогда
			НовСтрока.ЕдиницаИзмеренияКод = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
			НовСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияНаименование);
			//Анализ вариантов заполнения
			Если ЗаполнениеКодаТовара = "Штрихкод" И НовСтрока.Сопоставление.Свойство("ШтрихкодКомбинации") Тогда
				НовСтрока.ТоварКод = НовСтрока.Сопоставление.ШтрихкодКомбинации;
			ИначеЕсли ЗаполнениеКодаТовара = "Штрихкод" И (НовСтрока.Сопоставление.Свойство("ШтрихкодыНоменклатуры") И НовСтрока.Сопоставление.ШтрихкодыНоменклатуры.Количество()) Тогда
				НовСтрока.ТоварКод = НовСтрока.Сопоставление.ШтрихкодыНоменклатуры[0];				
			Иначе
				НовСтрока.ТоварКод = СтрокаТовары.НоменклатураКод;
			КонецЕсли;
			//Конец анализа вариантов заполнения			
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаТовары.СтранаПроисхождения) Тогда
			НовСтрока.СтранаПроисхожденияНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.СтранаПроисхождения, "Наименование");
		КонецЕсли;
		
		НовСтрока.Признак = ОпределитьПризнакТовара(СтрокаТовары.Номенклатура, ДокументОтгрузки);
		
		Если Не ЭтоКомиссия 
			 И Не ВидСчетаФактуры = "Авансовый"   
			 И ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.АктВыполненныхРабот")
			 И ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			 И ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ВыкупТоваровХранителем")
			 И ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.КорректировкаРеализации") 
			 И ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") 
			 И ЗначениеЗаполнено(СтрокаТовары.КодТНВЭД) И ВыводитьКодыТНВЭД Тогда
			 
			НовСтрока.КодВидаТовара = СтрокаТовары.КодТНВЭД.Код;
		ИначеЕсли ВидСчетаФактуры = "Авансовый" 
			И ЗначениеЗаполнено(СтрокаТовары.Номенклатура.КодТНВЭД) И ВыводитьКодыТНВЭД Тогда
			
			НовСтрока.КодВидаТовара = СтрокаТовары.Номенклатура.КодТНВЭД.Код;
		КонецЕсли;	
			
		//Заполнение Таможенной декларации
		Если ЗначениеЗаполнено(СтрокаТовары.НомерГТД) Тогда
			СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
			СведенияОТаможеннойДекларации.Колонки.Добавить("СтранаПроисхожденияКод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(3)));
			СведенияОТаможеннойДекларации.Колонки.Добавить("ТаможеннаяДекларацияНомер", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
			СтрокаТД = СведенияОТаможеннойДекларации.Добавить();
			СтрокаТД.ТаможеннаяДекларацияНомер = СокрЛП(Строка(СтрокаТовары.НомерГТД));
			Если ЗначениеЗаполнено(СтрокаТовары.СтранаПроисхожденияКод) Тогда
				СтрокаТД.СтранаПроисхожденияКод = СтрокаТовары.СтранаПроисхожденияКод;
			КонецЕсли;
			НовСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НовСтрока.СведенияОТаможеннойДекларации, "СтранаПроисхожденияКод",,,
				НСтр("ru = 'Не заполнен код страны происхождения'"));			
		КонецЕсли;
		//Конец заполнения Таможенной декларации
		
		// Заполнение прослеживаемости
		Если ЗначениеЗаполнено(СтрокаТовары.КоличествоПоРНПТ) Тогда
			СведенияОПрослеживаемости = Новый ТаблицаЗначений;
			СведенияОПрослеживаемости.Колонки.Добавить("НомерТовара");
			СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияКод");
			СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
			СведенияОПрослеживаемости.Колонки.Добавить("Количество");
			СтрПрослеживаемости = СведенияОПрослеживаемости.Добавить();
				
			СтрПрослеживаемости.НомерТовара = СокрЛП(Строка(СтрокаТовары.НомерГТД));
			СтрПрослеживаемости.ЕдиницаИзмеренияКод = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияТНВЭДКод);
			СтрПрослеживаемости.ЕдиницаИзмеренияНаименование =  СокрЛП(СтрокаТовары.ЕдиницаИзмеренияТНВЭДНаименование);
			СтрПрослеживаемости.Количество = СтрокаТовары.КоличествоПоРНПТ; 
			
			НовСтрока.СведенияОПрослеживаемости = СведенияОПрослеживаемости;
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НовСтрока.СведенияОПрослеживаемости, "НомерТовара",,,
				НСтр("ru = 'Не заполнен номер ГТД'"));			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НовСтрока.СведенияОПрослеживаемости, "ЕдиницаИзмеренияКод",,,
				НСтр("ru = 'Не заполнена единица измерения ТН ВЭД'"));			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НовСтрока.СведенияОПрослеживаемости, "ЕдиницаИзмеренияНаименование",,,
				НСтр("ru = 'Не заполнена единица измерения ТН ВЭД'"));			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НовСтрока.СведенияОПрослеживаемости, "Количество",,,
				НСтр("ru = 'Не заполнено количество в единицах прослеживаемости'"));				
		ИначеЕсли ЗначениеЗаполнено(ТаблицаДанныхПрослеживаемости) Тогда
			ЗаполнитьПрослеживаемостьДляРеализацииАктивов(НовСтрока, СтрокаТовары, ТаблицаДанныхПрослеживаемости, ВыводитьКодыТНВЭД);
		КонецЕсли;		
		// Конец заполнения прослеживаемости

		ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировке_2019(НовСтрока, СтрокаТовары, ТаблицаКодовМаркировки);
		
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Количество",,, НСтр("ru = 'Не указано количество товара в табличной части'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияНаименование",,, НСтр("ru = 'Не заполнено наименование единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКод",,, НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ТекстОшибки = НСтр("ru = 'Возникла ошибка при заполнении страны происхождения в сведениях по ГТД. Возможные причины:
		|	- не заполнена колонка ""Страна происхождения""
		|	- указанной страны нет в классификаторе стран мира'");
	ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных,
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод", ТекстОшибки);
	
	СоставСодержания = Новый Массив;
	Если Не ВидСчетаФактуры = "Авансовый" Тогда
		Если ЕстьТовары Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.'"));
		КонецЕсли;
		Если ЕстьУслуги Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Услуги оказаны в полном объеме.'"));
		КонецЕсли;
		Если ЕстьРаботы Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Работы выполнены в полном объеме.'"));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СоставСодержания) Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.'"));
		КонецЕсли;
	Иначе
		СоставСодержания.Добавить(НСтр("ru = 'Регистрация счет-фактуры на аванс.'"));
	КонецЕсли;
	СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогом"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСуммаНалога", ТаблицаТоваров.Итог("СуммаНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоКоличество", ТаблицаТоваров.Итог("Количество"));
	
	//Заполним документы основания.
	Если ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.КорректировкаРеализации")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ОтчетКомиссионера")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ОтчетКомитенту")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			И ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ВыкупТоваровХранителем")
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") 
			и ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") 
			и Не ВидСчетаФактуры = "Авансовый" Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОтгрузки, "ЗаказКлиента");
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(ДокументОснование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки", МассивДокументовОснований);
	КонецЕсли;	
		
	Если ДанныеШапки.Исправление Тогда
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперацииЭД);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров", ДанныеШапки.Дата);
	
	Если Не ВидСчетаФактуры = "Авансовый" Тогда
		ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНомер");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДопСведения");
		
		Если ЗначениеЗаполнено(ДанныеШапки.ДоверенностьНомер) И ЗначениеЗаполнено(ДанныеШапки.ДоверенностьДата)
			И (ЗначениеЗаполнено(ДанныеШапки.ДоверенностьВыдана) Или ЗначениеЗаполнено(ДанныеШапки.ДоверенностьЛицо)) Тогда
			
			НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
			НоваяСтрока.ДокументНаименование = НСтр("ru = 'по доверенности'");
			НоваяСтрока.ДокументНомер = ДанныеШапки.ДоверенностьНомер;
			НоваяСтрока.ДокументДата = ДанныеШапки.ДоверенностьДата;
			НоваяСтрока.ДокументДопСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'выданной %1 %2'"),
					ДанныеШапки.ДоверенностьВыдана,
					ДанныеШапки.ДоверенностьЛицо);
					
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокументДата",,,
				НСтр("ru = 'Необходимо указать дату доверенности.'"));
					
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ДанныеШапки.Основание)
			И ЗначениеЗаполнено(ДанныеШапки.ОснованиеДата) Тогда
			НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
			Если СтрНайти(ДанныеШапки.Основание, "№") Тогда
				СтрокаНаименование = Лев(ДанныеШапки.Основание, СтрНайти(ДанныеШапки.Основание, "№") - 2);
				Если ПустаяСтрока(СтрокаНаименование) Тогда
					СтрокаНаименование = "Договор";
				КонецЕсли;
			Иначе
				СтрокаНаименование = ДанныеШапки.Основание;
			КонецЕсли;
			НоваяСтрока.ДокументНаименование = СтрокаНаименование;
			НоваяСтрока.ДокументНомер = ДанныеШапки.ОснованиеНомер;
			НоваяСтрока.ДокументДата = ДанныеШапки.ОснованиеДата;
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокументДата",,,
				НСтр("ru = 'Необходимо указать дату договора.'"));
			
		КонецЕсли;
		
		Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			Если ЗначениеЗаполнено(ДокументОтгрузки.ДокументПоступления) Тогда
				ДокументПоступления = ДокументОтгрузки.ДокументПоступления;
				Если ЗначениеЗаполнено(ДокументПоступления.ДатаВходящегоДокумента) И ЗначениеЗаполнено(ДокументПоступления.НомерВходящегоДокумента) Тогда
					НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
					НоваяСтрока.ДокументНаименование = "Входящий электронный документ";					
					НоваяСтрока.ДокументНомер = ДокументПоступления.НомерВходящегоДокумента;
					НоваяСтрока.ДокументДата = ДокументПоступления.ДатаВходящегоДокумента;
					
					ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокументДата",,,
						НСтр("ru = 'Необходимо указать дату документа поступления.'"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОснованиеОтгрузкиТоваров) Тогда
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
	    КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
			ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеШапки.Кладовщик);
			Если ЗначениеЗаполнено(ДанныеШапки.ДолжностьКладовщика)
				И ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
				// Кладовщик работает в организации
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность", Строка(ДанныеШапки.ДолжностьКладовщика));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество", ФИО.Отчество);
			ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
				// Кладовщик не работает в организации
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия", ФИО.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя", ФИО.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество", ФИО.Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСчетаФактурыУПД_2019(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	Если Не ЗначениеЗаполнено(ДанныеШапки.Ссылка) Тогда
		ВидОперации = НСтр("ru = 'Формирование ЭД'");
		ПодробныйТекстОшибки = НСтр("ru = 'Ошибка при формирование ЭД. Ошибка в документе-основании.'");
		ТекстСообщения = НСтр("ru = 'Невозможно сформировать ЭД. Проверьте корректность заполнения данных в счете-фактуре и документе-основании.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
		Отказ = Истина;
		Возврат
	КонецЕсли;	
	
	Если СтруктураДанных.Свойство("СчетФактураНаАванс") И СтруктураДанных.СчетФактураНаАванс Тогда
		ВидСчетаФактуры = "Авансовый";
	Иначе
		ВидСчетаФактуры = "Реализация";
	КонецЕсли;
	
	СчетФактура = ДанныеШапки.Ссылка;	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаСчетаФактуры",	СчетФактура);	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", ВидСчетаФактуры);
	ДокументыОснования = Новый Массив;
	Если ДанныеШапки.ПредставлениеДокумента = "счет-фактура комиссионера" или ВидСчетаФактуры = "Авансовый" Тогда
		Если ТипЗнч(СчетФактура.ДокументОснование) <> Тип("ДокументСсылка.ОтчетКомиссионера")
		            И ТипЗнч(СчетФактура.ДокументОснование) <> Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
			ДокументыОснования.Добавить(СчетФактура.ДокументОснование);
		КонецЕсли;
	Иначе
		Для Каждого СтрокаТЧ Из СчетФактура.ДокументыОснования Цикл
			ДокументыОснования.Добавить(СтрокаТЧ.ДокументОснование);
		КонецЦикла;	
		Если ДанныеШапки.Исправление И ЗначениеЗаполнено(СчетФактура.СчетФактураОснование) Тогда
			ДокументыОснования.Добавить(СчетФактура.СчетФактураОснование);
		КонецЕсли;		
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	ОбстоятельстваФормированияСФ = "";
	Если ДанныеШапки.ПредставлениеДокумента = "счет-фактура комиссионера" Тогда
		ОбстоятельстваФормированияСФ = "3";
	ИначеЕсли ВидСчетаФактуры = "Авансовый" Тогда
		ОбстоятельстваФормированияСФ = "2";
	ИначеЕсли ВидСчетаФактуры = "Реализация" Тогда
		ОбстоятельстваФормированияСФ = "1";
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ОбстоятельстваФормированияСФ", ОбстоятельстваФормированияСФ);
	
	Если ДанныеШапки.ПредставлениеДокумента <> "счет-фактура комиссионера" Тогда	
		Если ЗначениеЗаполнено(ДанныеШапки.ИдентификаторГосКонтракта) Тогда
			ЭтоГОЗ = Истина;			
			Если СтруктураДанных.Свойство("ДанныеЭлектронногоАктирования") Тогда
				ЭтоГОЗ = Ложь;
				ДанныеЭлектронногоАктированияЕИС = СтруктураДанных.ДанныеЭлектронногоАктирования;
				Если ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта.Количество() Тогда
					ДанныеКонтракта = ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта[0];
					Если ЗначениеЗаполнено(ДанныеКонтракта) Тогда
						ЭтоГОЗ = ДанныеКонтракта.Ссылка.ЭтоКонтрактГОЗ;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ЭтоГОЗ Тогда 
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ДанныеШапки.ИдентификаторГосКонтракта);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		
		ПлатежныеДокументы = Новый ТаблицаЗначений;
		ПлатежныеДокументы.Колонки.Добавить("НомерСтроки");
		ПлатежныеДокументы.Колонки.Добавить("НомерПРД");
		ПлатежныеДокументы.Колонки.Добавить("ДатаПРД");
		
		Если ВидСчетаФактуры = "Реализация" Тогда
			Если ЗначениеЗаполнено(СчетФактура.ПлатежноРасчетныеДокументы) Тогда
				Для Каждого СтрокаПРД Из СчетФактура.ПлатежноРасчетныеДокументы Цикл
					НоваяСтрока = ПлатежныеДокументы.Добавить();
					НоваяСтрока.НомерСтроки = СтрокаПРД.НомерСтроки;
					НоваяСтрока.НомерПРД    = СтрокаПРД.НомерПлатежноРасчетногоДокумента;
					НоваяСтрока.ДатаПРД     = СтрокаПРД.ДатаПлатежноРасчетногоДокумента;
				КонецЦикла;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураДанных, "ПлатежноРасчетныеДокументы")
																	И ЗначениеЗаполнено(СтруктураДанных.ПлатежноРасчетныеДокументы) Тогда
				Для Каждого СтрокаПРД Из СтруктураДанных.ПлатежноРасчетныеДокументы Цикл
					НоваяСтрока = ПлатежныеДокументы.Добавить();
					НоваяСтрока.НомерПРД    = СтрокаПРД.НомерПлатежноРасчетногоДокумента;
					НоваяСтрока.ДатаПРД     = СтрокаПРД.ДатаПлатежноРасчетногоДокумента;
				КонецЦикла;
			КонецЕсли;
		Иначе
			НоваяСтрока = ПлатежныеДокументы.Добавить();
			НоваяСтрока.НомерСтроки = 1;
			НоваяСтрока.НомерПРД    = СчетФактура.НомерПлатежноРасчетногоДокумента;
			НоваяСтрока.ДатаПРД     = СчетФактура.ДатаПлатежноРасчетногоДокумента;
		КонецЕсли;	
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаУПД_2019(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Юр", ДатаКИ = Неопределено) Экспорт
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН", СведенияОбУчастнике.ИНН);			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП", СведенияОбУчастнике.КПП);			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);

	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
			
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН", СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации", СведенияОбУчастнике.Свидетельство);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия", СведенияОбУчастнике.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Имя", СведенияОбУчастнике.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество", СведенияОбУчастнике.Отчество);
			
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН", СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия", СведенияОбУчастнике.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя", СведенияОбУчастнике.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество", СведенияОбУчастнике.Отчество);
		
	КонецЕсли;
	
	Если ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации[ВидАдреса + "АдресОрганизации"].Ссылка;
	ИначеЕсли ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации[ВидАдреса + "АдресКонтрагента"].Ссылка;
	Иначе
		ВидКонтактнойИнформации = Неопределено;
	КонецЕсли;
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ОбъектКонтактнойИнформации = СведенияОбУчастнике.Ссылка;
	
	АдресКонтрагентаЗаполнен = Истина;	
	Если ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПроверкаЗаполненностиАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ОбъектКонтактнойИнформации,
			ВидКонтактнойИнформации,
			ТекущаяДатаСеанса());
		АдресКонтрагентаЗаполнен = Ложь;
		Если ЗначениеЗаполнено(ПроверкаЗаполненностиАдреса) Тогда
			АдресКонтрагентаЗаполнен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПартнеровКакКонтрагентов И Не АдресКонтрагентаЗаполнен Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации["АдресПартнера"].Ссылка;		
		ОбъектКонтактнойИнформации = СведенияОбУчастнике.Ссылка.Партнер;	
	КонецЕсли;

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".Адрес.АвтоматическиЗаполняемый.ОбъектКонтактнойИнформации", ОбъектКонтактнойИнформации);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".Адрес.АвтоматическиЗаполняемый.ВидКонтактнойИнформации", ВидКонтактнойИнформации);
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.Телефон",
									СведенияОбУчастнике.Телефоны);
	КонецЕсли;

	Если ЗначениеЗаполнено(СведенияОбУчастнике.ЭлектроннаяПочта) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта",
									СведенияОбУчастнике.ЭлектроннаяПочта);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НомерСчета",
				НомерСчета);
				
		Банк = ""; БИК = ""; КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			Если ТипЗнч(Банк) = Тип("Строка") Тогда
				БанкНаименование = Банк
			Иначе
				БанкНаименование = Банк.Наименование
			КонецЕсли;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка",
										БанкНаименование);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.БИКБанка",
										БИК);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка",
										КоррСчет);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.КодПоОКПО) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".КодОКПО", СведенияОбУчастнике.КодПоОКПО);
	КонецЕсли;
		
КонецПроцедуры

Функция ПодготовитьСтруктуруДляСчетаФактурыУПД_2019(ДеревоДанных) Экспорт
	
	ДанныеДляОбъекта = Новый Структура;
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Номер", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаСоставления", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	ДанныеОбъекта.Вставить("Дата", ТекущаяДатаСеанса());
	
	СведенияОПродавце = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	СведенияОПокупателе = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	Если СведенияОПродавце.Строки.Количество() > 1
		ИЛИ СведенияОПокупателе.Строки.Количество() > 1 Тогда
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Ошибка загрузки электронной товарной накладной %1 от %2.'"), 
			ДанныеОбъекта.Номер, Формат(ДанныеОбъекта.ДатаСоставления,"ДЛФ=D")) + Символы.ПС
			+ НСтр("ru = 'Загрузка сводных накладных не поддерживается.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	// Сведения о поставщике.
	Для Каждого СтрокаПродавца Из СведенияОПродавце.Строки Цикл
		ДанныеОбъекта.Вставить("Контрагент", КонтрагентПоДаннымЭД(СтрокаПродавца, "СведенияОПродавце.НомерСтроки"));
		Прервать;
	КонецЦикла;
	
	// Сведения о покупателе.
	Для каждого СтрокаПокупателя Из СведенияОПокупателе.Строки Цикл
		ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(СтрокаПокупателя, "СведенияОПокупателе.НомерСтроки"));
		Прервать;
	КонецЦикла;
	
	// Если счет-фактура на аванс.
	ВидСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры");
	ПроверкаЧтоЭтоАванс(ДеревоДанных, ВидСчетаФактуры);
	
	Если ВидСчетаФактуры = "Авансовый" Тогда
		КодВидаОперации = "02";
	Иначе
		КодВидаОперации = "01";
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("КодВидаОперации", КодВидаОперации);
	ДанныеОбъекта.Вставить("ПолученВЭлектронномВиде", Истина);
	
	НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);		
	КонецЕсли;	
	
	// Получим документы-основания
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		МассивДокументовОснований = Новый Массив;		
		Если ТипЗнч(ДокументыОснованияСчетаФактуры) = Тип("Массив") Тогда 
			Для Каждого ДокументОснования Из ДокументыОснованияСчетаФактуры Цикл
				Если ТипЗнч(ДокументОснования) <> Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					МассивДокументовОснований.Добавить(ДокументОснования);
				КонецЕсли;
			КонецЦикла;
		Иначе
			МассивДокументовОснований.Добавить(ДокументыОснованияСчетаФактуры);
		КонецЕсли;
		ДанныеОбъекта.Вставить("ДокументыОснования", МассивДокументовОснований);		
	КонецЕсли;
	
	КодВалюты = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	ВалютаОбъекта = Неопределено;	
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", ВалютаОбъекта, КодВалюты);
	ДанныеОбъекта.Вставить("Валюта", ВалютаОбъекта);
	
	ДанныеОбъекта.Вставить("Сумма", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом"));
	ДанныеОбъекта.Вставить("СуммаНДС", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСуммаНалога"));

	ВидОборота = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОборота");
	Если ВидОборота = "04" Тогда
		ДанныеОбъекта.Вставить("ПриемНаКомиссию", Истина);
	Иначе
		ДанныеОбъекта.Вставить("ПриемНаКомиссию", Ложь);
	КонецЕсли;	
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеОбъекта);
	
	Если ВидСчетаФактуры = "Авансовый" Тогда
		Авансы = Документы.СчетФактураПолученныйАванс.ПустаяСсылка().Авансы.Выгрузить();
		СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
		Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
			НоваяСтрока = Авансы.Добавить();
			НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
			НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата, Истина), СтавкаНДС);
			НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		КонецЦикла;
		ДанныеДляОбъекта.Вставить("Авансы", Авансы);
	КонецЕсли;
	
	Если ВидСчетаФактуры = "Реализация" Тогда
		ЗаполнитьСуммыДляСчетаФактуры(ДанныеДляОбъекта, ДеревоДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПриобретенияТоваровУслугУПД_2019(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", Валюта, ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("Валюта", Валюта);
	ДанныеОбъекта.Вставить("ВалютаВзаиморасчетов", Валюта);
	Курс = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("КурсЧислитель", ?(ЗначениеЗаполнено(Курс), Курс, 1));
	ДанныеОбъекта.Вставить("КурсЗнаменатель", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	ДанныеОбъекта.Вставить("ВидОборота", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОборота"));
	
	СведенияОПродавце = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	СведенияОПокупателе = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	Если СведенияОПродавце.Строки.Количество() > 1
		ИЛИ СведенияОПокупателе.Строки.Количество() > 1 Тогда
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Ошибка загрузки электронной товарной накладной %1 от %2.'"), 
			ДанныеОбъекта.Номер, Формат(ДанныеОбъекта.ДатаСоставления,"ДЛФ=D")) + Символы.ПС
			+ НСтр("ru = 'Загрузка сводных накладных не поддерживается.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	// Сведения о поставщике.
	Для Каждого СтрокаПродавца Из СведенияОПродавце.Строки Цикл
		Контрагент = КонтрагентПоДаннымЭД(СтрокаПродавца, "СведенияОПродавце.НомерСтроки");
		Прервать;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	КонецЕсли;
	
	// Сведения о покупателе.
	Для каждого СтрокаПокупателя Из СведенияОПокупателе.Строки Цикл
		ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(СтрокаПокупателя, "СведенияОПокупателе.НомерСтроки"));
		Прервать;
	КонецЦикла;
	
	// Сведения об основании.
	СведенияОДокументеОтгрузки = ДеревоДанных.Строки.Найти("ОснованиеОтгрузкиТоваров", "ПолныйПуть");
	Для Каждого СтрокиСведений Из СведенияОДокументеОтгрузки.Строки Цикл
		ДанныеОбъекта.Вставить("ДатаДокументаОснования", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокиСведений, "ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументДата"));
		ДанныеОбъекта.Вставить("НомерДокументаОснования", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокиСведений, "ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументНомер"));
		Прервать;
	КонецЦикла;

	// Сведения о входящем документе.
	СведенияОДокументеПодтвержденияОтгрузки = ДеревоДанных.Строки.Найти("ДокументыПодтвержденияОтгрузки", "ПолныйПуть");
	НомерВходящегоДокумента = Неопределено;
	ДатаВходящегоДокумента = Неопределено;
	Для Каждого СтрокиСведений Из СведенияОДокументеПодтвержденияОтгрузки.Строки Цикл
		НомерВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокиСведений, "ДокументыПодтвержденияОтгрузки.НомерСтроки.Номер");
		ДатаВходящегоДокумента  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокиСведений, "ДокументыПодтвержденияОтгрузки.НомерСтроки.Дата");
		Прервать;
	КонецЦикла;	
	
	НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
		// попробуем найти документ поступления
		НайденныйДок = Неопределено;
		Если ЗначениеЗаполнено(ДанныеОбъекта.НомерВходящегоДокумента) Тогда
			НайденныйДок = НайтиПоступлениеТоваровУслуг(ДанныеОбъекта.Организация, ДанныеОбъекта.НомерВходящегоДокумента, ДанныеОбъекта.ДатаВходящегоДокумента);
		КонецЕсли;
		Если ЗначениеЗаполнено(НайденныйДок) Тогда	
			Если ТипЗнч(НайденныйДок) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				ДанныеОбъекта.Вставить("ДокументОснование", НайденныйДок.Ссылка);
				ДанныеОбъекта.Вставить("НалогообложениеНДС", НайденныйДок.НалогообложениеНДС);
				ДанныеОбъекта.Вставить("Соглашение", НайденныйДок.Соглашение);
				ДанныеОбъекта.Вставить("Договор", НайденныйДок.Договор);
				ДанныеОбъекта.Вставить("ПорядокРасчетов", НайденныйДок.ПорядокРасчетов);
				АктОРасхождениях = ПроверкаИПодборПродукцииИСМП.СформированныйАктОРасхождениях(НайденныйДок.Ссылка);
				ДанныеОбъекта.Вставить("АктОРасхожденияхПослеПриемкиОснование", АктОРасхождениях);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);		
	КонецЕсли;
		
	ДанныеОбъекта.Вставить("Сумма", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом"));
	
	Товары = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("НомерПоДаннымПоставщика");
	Товары.Колонки.Добавить("ДатаПоДаннымПоставщика");
	Товары.Колонки.Добавить("НомерПоДаннымКлиента");
	Товары.Колонки.Добавить("ДатаПоДаннымКлиента");

	ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.НоваяТаблицаШтрихкодыУпаковок();

	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		Признак = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Признак");
		
		НоваяСтрока = Товары.Добавить();
	
		// Обязательные реквизиты:
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(ДанныеОбъекта.Организация, ТекущаяДатаСеанса(), Истина), СтавкаНДС);
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Количество = 1;
			Если НоваяСтрока.Цена = 0 Тогда
				НоваяСтрока.Цена = НоваяСтрока.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		Сопоставление = СведенияОТоваре.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ");
			Если ЗначениеЗаполнено(Характеристика) Тогда
				НоваяСтрока.Характеристика = Характеристика;
			КонецЕсли;
			
			Упаковка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.УпаковкаИБ");
			Если ЗначениеЗаполнено(Упаковка) Тогда
				НоваяСтрока.Упаковка = Упаковка;
			КонецЕсли;
			
		КонецЕсли;
		
		ЭтоИмущество = Ложь;
		Если ЗначениеЗаполнено(Признак) Тогда
			ЭтоИмущество = ?(Признак = "1", Истина, Ложь);
		Иначе
			ЭтоИмущество = Истина;
		КонецЕсли;
		
		ТипНоменклатуры = НоваяСтрока.Номенклатура.ТипНоменклатуры;
		Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			НоваяСтрока.СписатьНаРасходы = Истина;
			ЭтоИмущество = Ложь;
		ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
				Или ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор") Тогда
			ЭтоИмущество = Истина;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ВестиУчетПоГТД") = Истина Тогда
			ВестиУчетПоГТД = Истина;
		Иначе
			ВестиУчетПоГТД = Ложь;
		КонецЕсли;
		
		Если ЭтоИмущество И ВестиУчетПоГТД Тогда
			
			// Заполняем количество для прослеживаемости
			СведенияОПрослеживаемости = СведенияОТоваре.Строки.Найти(
											"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости", "ПолныйПуть", Истина);
			Если СведенияОПрослеживаемости <> Неопределено И СведенияОПрослеживаемости.Строки.Количество() > 0 Тогда
				КоличествоПрослеживаемости = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОПрослеживаемости.Строки[0],
								"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.Количество");
				Если ЗначениеЗаполнено(КоличествоПрослеживаемости) Тогда
					НоваяСтрока.КоличествоПоРНПТ = КоличествоПрослеживаемости;	
				КонецЕсли;
			КонецЕсли;
			
			СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
											"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			Если СведенияОТаможеннойДекларации <> Неопределено И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда				
				НомерТаможеннойДекларации = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
								"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
				КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
								"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");				
				Если ЗначениеЗаполнено(НомерТаможеннойДекларации) Тогда
					ТаможеннаяДекларация = Неопределено;
					СтранаПроисхождения = Неопределено;
					ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("СтраныМира", СтранаПроисхождения, КодСтраныПроисхождения);
					НайтиТаможенныеДекларации(ТаможеннаяДекларация, НомерТаможеннойДекларации, СтранаПроисхождения); 
					Если НЕ ЗначениеЗаполнено(ТаможеннаяДекларация) Тогда
						НоваяТаможеннаяДекларация = Справочники.НомераГТД.СоздатьЭлемент();
						
						ПараметрыДляЗаполнения = Справочники.НомераГТД.ПараметрыДляЗаполненияЭлемента(НомерТаможеннойДекларации, СтранаПроисхождения);
						ПараметрыДляЗаполнения.ЗаполнитьПорядковыйНомерТовараАвтоматически = Истина;
						НоваяТаможеннаяДекларация.Заполнить(ПараметрыДляЗаполнения);
						
						Реквизиты = Справочники.НомераГТД.РегистрационныйНомерИСтранаВвоза(НомерТаможеннойДекларации);
						ЗаполнитьЗначенияСвойств(НоваяТаможеннаяДекларация, Реквизиты, "РегистрационныйНомер,СтранаВвозаНеРФ,ПорядковыйНомерТовара");
						НоваяТаможеннаяДекларация.Записать();
						ТаможеннаяДекларация = НоваяТаможеннаяДекларация.Ссылка;
					КонецЕсли;
					Если НоваяСтрока.КоличествоПоРНПТ > 0 Тогда
						ЗаполнитьПризнакРНПТвГТД(ТаможеннаяДекларация);
					КонецЕсли;
					НоваяСтрока.НомерГТД = ТаможеннаяДекларация;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
			НоваяСтрока.НомерВходящегоДокумента = НомерВходящегоДокумента;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаВходящегоДокумента) Тогда
			НоваяСтрока.ДатаВходящегоДокумента = ДатаВходящегоДокумента;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеИСМП.ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_2019(ШтрихкодыУпаковок, СведенияОТоваре);

	КонецЦикла;

	ЭлектронноеВзаимодействиеИСМП.СвернутьТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок);

	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары", Товары);
	ДанныеДляЗаполнения.Вставить("ШтрихкодыУпаковок", ШтрихкодыУпаковок);

	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияУслугУПД_2019(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Валюта = Неопределено;	
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", Валюта, ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	Курс = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("КурсЧислитель", ?(ЗначениеЗаполнено(Курс), Курс, 1));
	ДанныеОбъекта.Вставить("КурсЗнаменатель", 1);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	СведенияОПродавце = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	СведенияОПокупателе = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	Если СведенияОПродавце.Строки.Количество() > 1
		ИЛИ СведенияОПокупателе.Строки.Количество() > 1 Тогда
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Ошибка загрузки электронной товарной накладной %1 от %2.'"), 
			ДанныеОбъекта.Номер, Формат(ДанныеОбъекта.ДатаСоставления,"ДЛФ=D")) + Символы.ПС
			+ НСтр("ru = 'Загрузка сводных накладных не поддерживается.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	// Сведения о поставщике.
	Для Каждого СтрокаПродавца Из СведенияОПродавце.Строки Цикл
		Контрагент	= КонтрагентПоДаннымЭД(СтрокаПродавца, "СведенияОПродавце.НомерСтроки");	
		Прервать;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеОбъекта.Вставить("Контрагент", Контрагент);
		ДанныеОбъекта.Вставить("Партнер",  	 Контрагент.Партнер);
	КонецЕсли;
	
	// Сведения о покупателе.
	Для каждого СтрокаПокупателя Из СведенияОПокупателе.Строки Цикл
		ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(СтрокаПокупателя, "СведенияОПокупателе.НомерСтроки"));
		Прервать;
	КонецЦикла;
	
	ТЗ = Документы.ПриобретениеУслугПрочихАктивов.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		// Обязательные реквизиты:
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(ДанныеОбъекта.Организация, ТекущаяДатаСеанса(), Истина), СтавкаНДС);
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,  "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		НоваяСтрока.Содержание = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ТоварНаименование");

		// Заполняем номер ГТД
		СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
										"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
		Если СведенияОТаможеннойДекларации <> Неопределено И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда				
			НомерТаможеннойДекларации = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
							"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
			КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
							"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");				
			Если ЗначениеЗаполнено(НомерТаможеннойДекларации) Тогда
				ТаможеннаяДекларация = Неопределено;
				СтранаПроисхождения = Неопределено;
				ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("СтраныМира", СтранаПроисхождения, КодСтраныПроисхождения);
				НайтиТаможенныеДекларации(ТаможеннаяДекларация, НомерТаможеннойДекларации, СтранаПроисхождения); 
				Если НЕ ЗначениеЗаполнено(ТаможеннаяДекларация) Тогда
					НоваяТаможеннаяДекларация = Справочники.НомераГТД.СоздатьЭлемент();
						
					ПараметрыДляЗаполнения = Справочники.НомераГТД.ПараметрыДляЗаполненияЭлемента(НомерТаможеннойДекларации, СтранаПроисхождения);
					ПараметрыДляЗаполнения.ЗаполнитьПорядковыйНомерТовараАвтоматически = Истина;
					НоваяТаможеннаяДекларация.Заполнить(ПараметрыДляЗаполнения);
						
					Реквизиты = Справочники.НомераГТД.РегистрационныйНомерИСтранаВвоза(НомерТаможеннойДекларации);
					ЗаполнитьЗначенияСвойств(НоваяТаможеннаяДекларация, Реквизиты, "РегистрационныйНомер,СтранаВвозаНеРФ,ПорядковыйНомерТовара");
					НоваяТаможеннаяДекларация.Записать();
					ТаможеннаяДекларация = НоваяТаможеннаяДекларация.Ссылка;
				КонецЕсли;
				НоваяСтрока.НомерГТД = ТаможеннаяДекларация;
			КонецЕсли;
		КонецЕсли;
		
		// Заполняем ТНВЭД
		КодВидаТовара = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.КодВидаТовара");
		Если ЗначениеЗаполнено(КодВидаТовара) Тогда
			НоваяСтрока.КодТНВЭД = Справочники.КлассификаторТНВЭД.НайтиСоздатьЭлементКлассификатораТНВЭД(КодВидаТовара);
		КонецЕсли;	
			
		// Заполняем количество для прослеживаемости
		СведенияОПрослеживаемости = СведенияОТоваре.Строки.Найти(
										"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости", "ПолныйПуть", Истина);
		Если СведенияОПрослеживаемости <> Неопределено И СведенияОПрослеживаемости.Строки.Количество() > 0 Тогда
			КоличествоПрослеживаемости = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОПрослеживаемости.Строки[0],
							"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.Количество");
			Если ЗначениеЗаполнено(КоличествоПрослеживаемости) Тогда
				НоваяСтрока.КоличествоПоРНПТ = КоличествоПрослеживаемости;	
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Расходы", ТЗ);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ОрганизацияПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	Организация = Неопределено;
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.КПП = &КПП
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		НаименованиеПолное = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Организации.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.НаименованиеПолное = &НаименованиеПолное
				|	И НЕ Организации.ПометкаУдаления";
			Запрос.УстановитьПараметр("НаименованиеПолное", НаименованиеПолное);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Организация = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

Функция КонтрагентПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	Контрагент = Неопределено;
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И Контрагенты.КПП = &КПП
			|	И НЕ Контрагенты.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И НЕ Контрагенты.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		НаименованиеПолное = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Контрагенты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.НаименованиеПолное = &НаименованиеПолное
				|	И НЕ Контрагенты.ПометкаУдаления";
			Запрос.УстановитьПараметр("НаименованиеПолное", НаименованиеПолное);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		
		Фамилия  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		Имя      = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		Отчество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
		
		ЭлементыИмени = Новый Массив;
		Если ЗначениеЗаполнено(Фамилия) Тогда
			ЭлементыИмени.Добавить(Фамилия);
		КонецЕсли;
		Если ЗначениеЗаполнено(Имя) Тогда
			ЭлементыИмени.Добавить(Имя);
		КонецЕсли;
		Если ЗначениеЗаполнено(Отчество) Тогда
			ЭлементыИмени.Добавить(Отчество);
		КонецЕсли;
		ПолноеНаименование = СтрСоединить(ЭлементыИмени, " ");
		
		Если ЗначениеЗаполнено(ИНН) Или ЗначениеЗаполнено(НаименованиеПолное) Тогда 
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Контрагенты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.ИНН = &ИНН";
			Если ЗначениеЗаполнено(ИНН) Тогда
				Запрос.УстановитьПараметр("ИНН", ИНН);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагенты.ИНН = &ИНН", "Контрагенты.НаименованиеПолное = &НаименованиеПолное");
				Запрос.УстановитьПараметр("НаименованиеПолное", ПолноеНаименование);
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

Процедура ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаУчастников, ПутьКУчастнику = "")
	
	ПутьКПолю = ?(ЗначениеЗаполнено(ПутьКУчастнику), ПутьКУчастнику + ".", "");
	
	Для каждого СтрокаТаблицы Из ТаблицаУчастников Цикл
		
		Сведения = СтрокаТаблицы.СведенияОбУчастнике;
		Если Не ЗначениеЗаполнено(Сведения) Тогда
			Продолжить;
		КонецЕсли;
		
		Участник = ?(ЗначениеЗаполнено(ПутьКУчастнику), СтрокаТаблицы[ПутьКУчастнику], СтрокаТаблицы);
		
		Если Участник.ТипУчастника.Свойство("ЮЛ") Тогда
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ЮЛ.НаименованиеОрганизации", Сведения.Ссылка, "Объект.НаименованиеПолное");
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ЮЛ.ИНН", Сведения.Ссылка, "Объект.ИНН");
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ЮЛ.ИНН", Сведения.Ссылка, "Объект.КПП");
				
		ИначеЕсли Участник.ТипУчастника.Свойство("ИЛ") Тогда
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИЛ.НаименованиеОрганизации", Сведения.Ссылка, "Объект.НаименованиеПолное");
				
		ИначеЕсли Участник.ТипУчастника.Свойство("ИП") Тогда
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.ИНН", Сведения.Ссылка, "Объект.ИНН");
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.Фамилия", Сведения.Ссылка, "Объект.НаименованиеПолное");
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.Имя", Сведения.Ссылка, "Объект.НаименованиеПолное");
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.Отчество", Сведения.Ссылка, "Объект.НаименованиеПолное");
				
			Если ТипЗнч(Сведения.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
				
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
					ПутьКПолю + "ТипУчастника.ИП.СвидетельствоОГосРегистрации", Сведения.Ссылка, "Объект.СвидетельствоСерияНомер");
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПостфиксПоляАдрес = ?(ТипЗнч(Сведения.Ссылка) = Тип("СправочникСсылка.Контрагенты"), "Контрагента", "Организации");
		
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
			ПутьКПолю + "Адрес.АвтоматическиЗаполняемый", Сведения.Ссылка, "КонтактнаяИнформацияПолеЮрАдрес" + ПостфиксПоляАдрес);
			
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
			ПутьКПолю + "КонтактныеСведения.Телефон", Сведения.Ссылка);
			
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
			ПутьКПолю + "КонтактныеСведения.ЭлектроннаяПочта", Сведения.Ссылка);
			
		НомерСчета = "";
		Если Сведения.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
			
			Если Сведения.Свойство("БанковскийСчетСсылка") Тогда
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
					ПутьКПолю + "БанковскиеРеквизиты.НомерСчета", Сведения.БанковскийСчетСсылка, "Объект.НомерСчета");
			КонецЕсли;
				
			Банк = ""; БИК = ""; КоррСчет = "";
			Если Сведения.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
				Если Сведения.Свойство("БанкСсылка") Тогда
					ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
						ПутьКПолю + "БанковскиеРеквизиты.НаименованиеБанка", Сведения.БанкСсылка, "Объект.Наименование");
				КонецЕсли;
			КонецЕсли;
			Если Сведения.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
				Если Сведения.Свойство("БанкСсылка") Тогда
					ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
						ПутьКПолю + "БанковскиеРеквизиты.БИКБанка", Сведения.БанкСсылка, "Объект.Код");
				КонецЕсли;
			КонецЕсли;
			Если Сведения.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
				Если Сведения.Свойство("БанкСсылка") Тогда
					ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
						ПутьКПолю + "БанковскиеРеквизиты.КорреспондентскийСчетБанка", Сведения.БанкСсылка, "Объект.КоррСчет");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		КодПоОКПО = "";
		Если Сведения.Свойство("КодПоОКПО", КодПоОКПО) И ЗначениеЗаполнено(КодПоОКПО) Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "КодОКПО", Сведения.Ссылка, "Объект.КодПоОКПО");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеУчастникаУПД(Знач СведенияОбУчастнике, ВидАдреса = "Юр")
	
	Данные = Новый Структура("СведенияОбУчастнике", СведенияОбУчастнике);
	
	Данные.Вставить("ТипУчастника", Новый Структура);
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		
		Данные.ТипУчастника.Вставить("ЮЛ", Новый Структура);
		Данные.ТипУчастника.ЮЛ.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		Данные.ТипУчастника.ЮЛ.Вставить("ИНН", СведенияОбУчастнике.ИНН);
		Данные.ТипУчастника.ЮЛ.Вставить("КПП", СведенияОбУчастнике.КПП);
		
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		Данные.ТипУчастника.Вставить("ИЛ", Новый Структура);
		Данные.ТипУчастника.ИЛ.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		
		Данные.ТипУчастника.Вставить("ИП", Новый Структура);
		Данные.ТипУчастника.ИП.Вставить("ИНН", СведенияОбУчастнике.ИНН);
		Данные.ТипУчастника.ИП.Вставить("Фамилия", СведенияОбУчастнике.Фамилия);
		Данные.ТипУчастника.ИП.Вставить("Имя", СведенияОбУчастнике.Имя);
		Данные.ТипУчастника.ИП.Вставить("Отчество", СведенияОбУчастнике.Отчество);
		Данные.ТипУчастника.ИП.Вставить("СвидетельствоОГосРегистрации",  СведенияОбУчастнике.Свидетельство);
		
	Иначе
		
		Данные.ТипУчастника.Вставить("ФЛ", Новый Структура);
		Данные.ТипУчастника.ФЛ.Вставить("ИНН", СведенияОбУчастнике.ИНН);
		Данные.ТипУчастника.ФЛ.Вставить("Фамилия", СведенияОбУчастнике.Фамилия);
		Данные.ТипУчастника.ФЛ.Вставить("Имя", СведенияОбУчастнике.Имя);
		Данные.ТипУчастника.ФЛ.Вставить("Отчество", СведенияОбУчастнике.Отчество);
		
	КонецЕсли;
	
	Если ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации[ВидАдреса + "АдресОрганизации"].Ссылка;
	ИначеЕсли ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации[ВидАдреса + "АдресКонтрагента"].Ссылка;
	ИначеЕсли ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации["ФактАдресОбособленногоПодразделения"].Ссылка;
	Иначе
		ВидКонтактнойИнформации = Неопределено;
	КонецЕсли;
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ОбъектКонтактнойИнформации = СведенияОбУчастнике.Ссылка;
	
	АдресКонтрагентаЗаполнен = Истина;	
	Если ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПроверкаЗаполненностиАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ОбъектКонтактнойИнформации,
			ВидКонтактнойИнформации,
			ТекущаяДатаСеанса());
		АдресКонтрагентаЗаполнен = Ложь;
		Если ЗначениеЗаполнено(ПроверкаЗаполненностиАдреса) Тогда
			АдресКонтрагентаЗаполнен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПартнеровКакКонтрагентов И Не АдресКонтрагентаЗаполнен Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации["АдресПартнера"].Ссылка;		
		ОбъектКонтактнойИнформации = СведенияОбУчастнике.Ссылка.Партнер;	
	КонецЕсли;
	
	Данные.Вставить("Адрес", Новый Структура);
	Данные.Адрес.Вставить("АвтоматическиЗаполняемый", Новый Структура);
	Данные.Адрес.АвтоматическиЗаполняемый.Вставить("ОбъектКонтактнойИнформации", ОбъектКонтактнойИнформации);
	Данные.Адрес.АвтоматическиЗаполняемый.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформации);
	
	Данные.Вставить("КонтактныеСведения", Новый Структура);
	
	Телефон = "";
	Если СведенияОбУчастнике.Свойство("Телефоны", Телефон) И ЗначениеЗаполнено(Телефон) Тогда
		Данные.КонтактныеСведения.Вставить("Телефон", Телефон);
	КонецЕсли;
	
	ЭлектроннаяПочта = "";
	Если СведенияОбУчастнике.Свойство("ЭлектроннаяПочта", ЭлектроннаяПочта) И ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		Данные.КонтактныеСведения.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);
	КонецЕсли;
	
	Данные.Вставить("БанковскиеРеквизиты", Новый Структура);
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		
		Данные.БанковскиеРеквизиты.Вставить("НомерСчета", НомерСчета);
		
		Банк = ""; БИК = ""; КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			Если ТипЗнч(Банк) = Тип("Строка") Тогда
				БанкНаименование = Банк
			Иначе
				БанкНаименование = Банк.Наименование
			КонецЕсли;
			
			Данные.БанковскиеРеквизиты.Вставить("НаименованиеБанка", БанкНаименование);
			
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			
			Данные.БанковскиеРеквизиты.Вставить("БИКБанка", БИК);
			
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			
			Данные.БанковскиеРеквизиты.Вставить("КорреспондентскийСчетБанка", КоррСчет);
			
		КонецЕсли;
	КонецЕсли;
	
	КодПоОКПО = "";
	Если СведенияОбУчастнике.Свойство("КодПоОКПО", КодПоОКПО) И ЗначениеЗаполнено(КодПоОКПО) Тогда
	
		Данные.Вставить("КодОКПО", КодПоОКПО);
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Процедура ПроверкаЧтоЭтоАванс(ДеревоДанных, ВидСчетаФактуры)
	
	ОбстоятельстваФормированияСФ = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ОбстоятельстваФормированияСФ");
	Если Не ЗначениеЗаполнено(ОбстоятельстваФормированияСФ) Тогда
		СуммаБезНалогаВсего = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога");
		Если СуммаБезНалогаВсего = 0 Тогда
			ВидСчетаФактуры = "Авансовый";
		Иначе
			ВидСчетаФактуры = "Реализация";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АктОРасхождениях

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеАктОРасхождениях_ИнформацияПокупателя.
Процедура ЗаполнитьДанныеАктОРасхождениях_ИнформацияПокупателя(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Основание);
	ПараметрыПечати = Новый Структура();
	
	СтруктураДанных = АктОРасхожденияхПослеПриемкиЛокализация.ПолучитьДанныеДляПечатнойФормыТОРГ2(ПараметрыПечати, МассивОбъектов);
	ВыборкаШапка = СтруктураДанных.ДанныеПечати.Выбрать();
	ВыборкаШапка.Следующий();
	
	// Наименование документа
	НаименованиеДокумента = НСтр("ru = 'Акт об установленном расхождении по количеству и качеству при приемке товарно-материальных ценностей'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "НаименованиеДокумента", НаименованиеДокумента);
	
	// Номер документа.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "НомерДокумента", ВыборкаШапка.НомерДокумента);
	
	// Дата документа.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "ДатаДокумента", ВыборкаШапка.ДатаДокумента);
		
	// Покупатель / Составитель.
	Покупатель = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапка.Организация) Тогда
		
		Покупатель = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ВыборкаШапка.Организация, , ВыборкаШапка.ДатаДокумента);
		
		// Покупатель.
		ЗаполнитьДанныеУчастникаУПД_2019(Данные, Покупатель, "Покупатель", "Юр", ВыборкаШапка.ДатаДокумента);
		// Грузополучатель.
		ЗаполнитьДанныеУчастникаУПД_2019(Данные, Покупатель, "Грузополучатель", "Юр", ВыборкаШапка.ДатаДокумента);		
		// Составитель.
		СоставительДокументаНаименование = Покупатель.ПолноеНаименование
			+ ?(ЗначениеЗаполнено(Покупатель.КПП),
			СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), Покупатель.ИНН, Покупатель.КПП),
			СтрШаблон(НСтр("ru = ', ИНН %1'"), Покупатель.ИНН));
				
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			ВыборкаШапка.Ссылка, "Объект.Организация");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, "СоставительДокументаНаименование", СоставительДокументаНаименование, ПараметрыОбработкиОшибок);
	Иначе
		// Покупатель.
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			ВыборкаШапка.Ссылка, "Объект.Организация");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, "Покупатель", Покупатель, ПараметрыОбработкиОшибок);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, "Грузополучатель", Покупатель, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	// Продавец.
	Продавец = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапка.Поставщик) Тогда
		Продавец = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ВыборкаШапка.Поставщик, , ВыборкаШапка.ДатаДокумента);
		ЗаполнитьДанныеУчастникаУПД_2019(Данные, Продавец, "Продавец", "Юр", ВыборкаШапка.ДатаДокумента);
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			ВыборкаШапка.Ссылка, "Объект.Контрагент");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, "Продавец", Продавец, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	// Грузоотправитель.
	Грузоотправитель = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапка.Грузоотправитель) Тогда
		Грузоотправитель = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ВыборкаШапка.Грузоотправитель, , ВыборкаШапка.ДатаДокумента);
		ЗаполнитьДанныеУчастникаУПД_2019(Данные, Грузоотправитель, "Грузоотправитель", "Юр", ВыборкаШапка.ДатаДокумента);
	КонецЕсли;
	
	// Страховая компания.
	СтраховаяКомпания = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапка.СтраховаяКомпания) Тогда
		СтраховаяКомпания = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ВыборкаШапка.СтраховаяКомпания, , ВыборкаШапка.ДатаДокумента);
		ЗаполнитьДанныеУчастникаУПД_2019(Данные, СтраховаяКомпания, "СтраховаяКомпания", "Юр", ВыборкаШапка.ДатаДокумента);
	КонецЕсли;
	
	// Сведения по транспортным документам.
	ДокументОснование = Неопределено;
	СведенияПоТранспортнымДокументам = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "СведенияПоТранспортнымДокументам");
	ВыборкаТовары = СтруктураДанных.ДанныеТовары.Выбрать();
	Пока ВыборкаТовары.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаТовары.КоличествоПоДокументам) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = СведенияПоТранспортнымДокументам.Добавить();
		НоваяСтрока.ВидУпаковки = ВыборкаТовары.ВидУпаковки;
		НоваяСтрока.НаименованиеГруза = ВыборкаТовары.НоменклатураНаименование;
		НоваяСтрока.ЕдиницаИзмеренияКод = ВыборкаТовары.ЕдиницаИзмеренияКод;
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ВыборкаТовары.ЕдиницаИзмеренияНаименование;
		Если ЗначениеЗаполнено(ВыборкаТовары.ДокументОснование) Тогда
			ДокументОснование = ВыборкаТовары.ДокументОснование;
		КонецЕсли;
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(Данные, СведенияПоТранспортнымДокументам, "СведенияПоТранспортнымДокументам");
	
	// Сопроводительный документ.
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			Если ЗначениеЗаполнено(ДокументОснование.НомерВходящегоДокумента) и ЗначениеЗаполнено(ДокументОснование.ДатаВходящегоДокумента) Тогда 
				СопроводительныйДокументНаименование = ?(ЗначениеЗаполнено(ДокументОснование.НаименованиеВходящегоДокумента),
				ДокументОснование.НаименованиеВходящегоДокумента, "Счет-фактура");
			Иначе
				СопроводительныйДокументНаименование = "БСД";
			КонецЕсли;
		Иначе
			СопроводительныйДокументНаименование = "БСД";
		КонецЕсли;
		СопроводительныйДокументНомер = ?(ЗначениеЗаполнено(ДокументОснование.НомерВходящегоДокумента),
			ДокументОснование.НомерВходящегоДокумента, "б/н");
		СопроводительныйДокументДата = ?(ЗначениеЗаполнено(ДокументОснование.ДатаВходящегоДокумента),
			ДокументОснование.ДатаВходящегоДокумента, "");
		Если ЗначениеЗаполнено(СопроводительныйДокументНаименование) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				Данные, "СведенияОбОсмотреГруза.СопроводительныйДокумент.Наименование", СопроводительныйДокументНаименование);
		КонецЕсли;
		Если ЗначениеЗаполнено(СопроводительныйДокументНомер) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				Данные, "СведенияОбОсмотреГруза.СопроводительныйДокумент.Номер", СопроводительныйДокументНомер);
		КонецЕсли;
		Если ЗначениеЗаполнено(СопроводительныйДокументДата) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				Данные, "СведенияОбОсмотреГруза.СопроводительныйДокумент.Дата", СопроводительныйДокументДата);
		КонецЕсли;
	КонецЕсли;
	
	// Сведения о времени приемки.
	ОбщийПуть = "СведенияОВремениПриемки.";
	ТаблицаПриемкиТоваров = ВыборкаШапка.ТаблицаПриемкиТоваров.Выбрать();
	Если ТаблицаПриемкиТоваров.Следующий() Тогда
		Если ЗначениеЗаполнено(ТаблицаПриемкиТоваров.ДатаПрибытияВПунктНазначения) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				Данные, ОбщийПуть + "ДатаПрибытияВПунктНазначения", ТаблицаПриемкиТоваров.ДатаПрибытияВПунктНазначения);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблицаПриемкиТоваров.ДатаВыдачи) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				Данные, ОбщийПуть + "ДатаВыдачиОрганизациейТранспорта", ТаблицаПриемкиТоваров.ДатаВыдачи);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблицаПриемкиТоваров.ДатаВскрытия) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				Данные, ОбщийПуть + "ДатаВскрытияТранспортныхСредств", ТаблицаПриемкиТоваров.ДатаВскрытия);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблицаПриемкиТоваров.ДатаДоставкиНаСклад) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				Данные, ОбщийПуть + "ДатаДоставкиНаСкладПолучателя", ТаблицаПриемкиТоваров.ДатаДоставкиНаСклад);
		КонецЕсли;
	КонецЕсли;
	
	// Обстоятельства приемки.
	ОбщийПуть = "ОбстоятельстваПриемки.";
	Если ЗначениеЗаполнено(ВыборкаШапка.УсловияХраненияТовараДоВскрытия) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, ОбщийПуть + "УсловияХраненияТоваровНаСкладеПолучателя", ВыборкаШапка.УсловияХраненияТовараДоВскрытия);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаШапка.СостояниеТарыИУпаковки) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, ОбщийПуть + "СостояниеТарыУпаковки", ВыборкаШапка.СостояниеТарыИУпаковки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаШапка.СпособОпределенияКоличества) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, ОбщийПуть + "ТипОпределенияКоличества", ВыборкаШапка.СпособОпределенияКоличества);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаШапка.ДополнительнаяИнформация) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, ОбщийПуть + "ДополнительныеСведения", ВыборкаШапка.ДополнительнаяИнформация);
	КонецЕсли;
	//  Транспортный документ.
	Если ЗначениеЗаполнено(ВыборкаШапка.НомерЖелезнодорожнойНакладной) И ЗначениеЗаполнено(ВыборкаШапка.ДатаЖелезнодорожнойНакладной) Тогда
		ТранспортныйДокументНаименование = НСтр("ru = 'Железнодорожная накладная'");
		ТранспортныйДокументНомер = ?(ЗначениеЗаполнено(ВыборкаШапка.НомерЖелезнодорожнойНакладной),
			ВыборкаШапка.ТранспортныйДокументНомер,  НСтр("ru = 'б/н'"));
		ТранспортныйДокументДата = ?(ЗначениеЗаполнено(ВыборкаШапка.ДатаЖелезнодорожнойНакладной),
			ВыборкаШапка.ТранспортныйДокументДата, "");
	Иначе
		ТранспортныйДокументНаименование =  НСтр("ru = 'БСД'");
		ТранспортныйДокументНомер =  НСтр("ru = 'б/н'");
		ТранспортныйДокументДата = "";
	КонецЕсли;	
	Если ЗначениеЗаполнено(ТранспортныйДокументНаименование) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, ОбщийПуть + "ТранспортныйДокумент.Наименование", ТранспортныйДокументНаименование);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТранспортныйДокументНомер) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, ОбщийПуть + "ТранспортныйДокумент.Номер", ТранспортныйДокументНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТранспортныйДокументДата) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, ОбщийПуть + "ТранспортныйДокумент.Дата", ТранспортныйДокументДата);
	КонецЕсли;
	
	// Сведения о лице, принявшем товар.
	ОбщийПуть = "СведенияОЛицеПринявшемТовар.РаботникОрганизацииПокупателя.";
	Если ЗначениеЗаполнено(ВыборкаШапка.КладовщикПринявшийТовар) Тогда
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ВыборкаШапка.КладовщикПринявшийТовар);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, ОбщийПуть + "Фамилия", ФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, ОбщийПуть + "Имя", ФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, ОбщийПуть + "Отчество", ФИО.Отчество);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, ОбщийПуть + "ОснованиеПолномочий", НСтр("ru = 'Должностные обязанности'"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, ОбщийПуть + "Должность", НСтр("ru = 'Кладовщик'"));
	КонецЕсли;
	
	// Краткое описание события.
	ОписаниеСобытия = НСтр("ru = 'При приемке указанных в документе ценностей (результатов работ) установлены расхождения с сопроводительными документами.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "КраткоеОписаниеСобытия", ОписаниеСобытия);
	
	// Заключение комиссии.
	Если ЗначениеЗаполнено(ВыборкаШапка.ЗаключениеКомиссии) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, "ЗаключениеКомиссии", ВыборкаШапка.ЗаключениеКомиссии);
	КонецЕсли;
	
	// Результаты приемки.
	РезультатыПриемки = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "РезультатыПриемки");
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	НоменклатураПартнеровСервер.ШтрихкодыПоТоварам(ВыборкаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	
	
	ВыборкаДляСопоставления = НоменклатураПартнеровСервер.ВыборкаДляСопоставленияНоменклатуры(Основание);
	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	
	Маркировка                 = СтруктураДанных.ШтрихкодыУпаковок.Выгрузить();
	Маркировка                 = ЭлектронноеВзаимодействиеИСМП.ЧастичноеСодержимоеТОРГ2(Маркировка);
	ТаблицаУпаковкиРасхождения = СтруктураДанных.ШтрихкодыУпаковокРасхождения.Выгрузить();
	ТаблицаУпаковкиРасхождения = ЭлектронноеВзаимодействиеИСМП.ЧастичноеСодержимоеТОРГ2(ТаблицаУпаковкиРасхождения, "ТипРасхождения");
	
	ВыборкаТовары.Сбросить();
	Пока ВыборкаТовары.Следующий() Цикл
		
		НоваяСтрока = РезультатыПриемки.Добавить();
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ВыборкаТовары.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.ЕдиницаИзмеренияКод = ВыборкаТовары.ЕдиницаИзмеренияКод;
		НоваяСтрока.ИнформацияОРасхождениях = ВыборкаТовары.КомментарийМенеджера;
		
		НоваяСтрока.Товар = Новый Структура;
		НоваяСтрока.Товар.Вставить("Наименование", ВыборкаТовары.НоменклатураНаименование);
		НоваяСтрока.Товар.Вставить("Характеристика", ВыборкаТовары.ХарактеристикаНаименование);
		НоваяСтрока.Товар.Вставить("Артикул", ВыборкаТовары.Артикул);
		НоваяСтрока.Товар.Вставить("Код", ВыборкаТовары.Код);
		НоваяСтрока.Товар.Вставить("Паспорт", ВыборкаТовары.НомерПаспорта);
		
		Если ЗначениеЗаполнено(ВыборкаТовары.КоличествоПоДокументам) Тогда
			НоваяСтрока.ПоДокументу = Новый Структура;
			НоваяСтрока.ПоДокументу.Вставить("Количество", ВыборкаТовары.КоличествоПоДокументам);
			НоваяСтрока.ПоДокументу.Вставить("Цена", ВыборкаТовары.Цена);
			НоваяСтрока.ПоДокументу.Вставить("СтавкаНДС", ВыборкаТовары.СтавкаНДС);
			НоваяСтрока.ПоДокументу.Вставить("СуммаНДС", ВыборкаТовары.СуммаНДСПоДокументам);
			НоваяСтрока.ПоДокументу.Вставить("СуммаСНДС", ВыборкаТовары.СуммаСНДСПоДокументам);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаТовары.КоличествоПоФакту) Тогда
			НоваяСтрока.ПоФакту = Новый Структура;
			НоваяСтрока.ПоФакту.Вставить("Количество", ВыборкаТовары.КоличествоПоФакту);
			НоваяСтрока.ПоФакту.Вставить("Цена", ВыборкаТовары.ЦенаПоФакту);
			НоваяСтрока.ПоФакту.Вставить("СтавкаНДС", ВыборкаТовары.СтавкаНДС);
			НоваяСтрока.ПоФакту.Вставить("СуммаНДС", ВыборкаТовары.СуммаНДСПоФакту);
			НоваяСтрока.ПоФакту.Вставить("СуммаСНДС", ВыборкаТовары.СуммаСНДСПоФакту);
			
			ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировкеАктОРасхождениях_2019(
				НоваяСтрока.ПоФакту,
				ВыборкаТовары, Маркировка, "КоличествоПоФакту");
			
		КонецЕсли;
		
		НоваяСтрока.Излишки   = Новый Структура;
		НоваяСтрока.Недостача = Новый Структура;
		НоваяСтрока.Брак      = Новый Структура;
		
		КоличествоБрак     = 0;
		СуммаНДСБрак       = 0;
		СуммаСНДСБрак      = 0;
		СуммаНДСНедостача  = 0;
		СуммаСНДСНедостача = 0;
		
		Если ВыборкаТовары.КоличествоПоФакту > ВыборкаТовары.КоличествоПоДокументам Тогда
			НоваяСтрока.Излишки.Вставить("Количество", ВыборкаТовары.КоличествоПоФакту - ВыборкаТовары.КоличествоПоДокументам);
		ИначеЕсли ВыборкаТовары.КоличествоПоФакту < ВыборкаТовары.КоличествоПоДокументам Тогда
			КоличествоРасхождение = ВыборкаТовары.КоличествоПоДокументам - ВыборкаТовары.КоличествоПоФакту;
			КоличествоБрак = ЭлектронноеВзаимодействиеИСМП.ПолучитьКоличествоОформитьРасхожденияКакБрак(ВыборкаТовары, ТаблицаУпаковкиРасхождения);
			СуммаНДСНедостача  = ВыборкаТовары.СуммаНДСПоДокументам - ВыборкаТовары.СуммаНДСПоФакту;
			СуммаСНДСНедостача = ВыборкаТовары.СуммаСНДСПоДокументам - ВыборкаТовары.СуммаСНДСПоФакту;
			
			Если КоличествоБрак > 0 Тогда
				
				КоличествоБрак      = Мин(КоличествоРасхождение, КоличествоБрак);
				Если КоличествоРасхождение = КоличествоБрак Тогда
					СуммаНДСБрак  = СуммаНДСНедостача;
					СуммаСНДСБрак = СуммаСНДСНедостача;
				Иначе
					СуммаНДСБрак  = Окр(СуммаНДСНедостача  * КоличествоБрак / КоличествоРасхождение, 2);
					СуммаСНДСБрак = Окр(СуммаСНДСНедостача * КоличествоБрак / КоличествоРасхождение, 2);
				КонецЕсли;
				
				СуммаНДСНедостача  = СуммаНДСНедостача - СуммаНДСБрак;
				СуммаСНДСНедостача = СуммаСНДСНедостача - СуммаСНДСБрак;
				
				КоличествоРасхождение = КоличествоРасхождение - КоличествоБрак;
				
				НоваяСтрока.Брак.Вставить("Количество", КоличествоБрак);
				НоваяСтрока.Брак.Вставить("СуммаНДС",   СуммаНДСБрак);
				НоваяСтрока.Брак.Вставить("СуммаСНДС",  СуммаСНДСБрак);
				
			КонецЕсли;
			
			Если КоличествоРасхождение > 0 Тогда 
				НоваяСтрока.Недостача.Вставить("Количество", КоличествоРасхождение);
			КонецЕсли;
		КонецЕсли;
		
		// Расхождения по кодам маркировки
		ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПБрак();
		ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировкеАктОРасхождениях_2019(НоваяСтрока.Брак,
			ВыборкаТовары, ТаблицаУпаковкиРасхождения, "КоличествоПоДокументам", Истина, ТипРасхождения);
			
		ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПИзлишек();
		ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировкеАктОРасхождениях_2019(НоваяСтрока.Излишки,
			ВыборкаТовары, ТаблицаУпаковкиРасхождения, "КоличествоПоФакту", Истина, ТипРасхождения);
		
		ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПНедостача();
		ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировкеАктОРасхождениях_2019(НоваяСтрока.Недостача,
			ВыборкаТовары, ТаблицаУпаковкиРасхождения, "КоличествоПоДокументам", Истина, ТипРасхождения);
		
		Если ВыборкаТовары.СуммаНДСПоФакту > ВыборкаТовары.СуммаНДСПоДокументам Тогда
			НоваяСтрока.Излишки.Вставить("СуммаНДС", ВыборкаТовары.СуммаНДСПоФакту - ВыборкаТовары.СуммаНДСПоДокументам);
		ИначеЕсли СуммаНДСНедостача > 0 Тогда
			НоваяСтрока.Недостача.Вставить("СуммаНДС", СуммаНДСНедостача);
		КонецЕсли;
		Если ВыборкаТовары.СуммаСНДСПоФакту > ВыборкаТовары.СуммаСНДСПоДокументам Тогда
			НоваяСтрока.Излишки.Вставить("СуммаСНДС", ВыборкаТовары.СуммаСНДСПоФакту - ВыборкаТовары.СуммаСНДСПоДокументам);
		ИначеЕсли СуммаСНДСНедостача > 0 Тогда
			НоваяСтрока.Недостача.Вставить("СуммаСНДС", СуммаСНДСНедостача);
		КонецЕсли;
		
		// Сопоставление.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", ВыборкаТовары.Номенклатура);
		Если ВыборкаТовары.Характеристика <> Неопределено Тогда
			ПараметрыОтбора.Вставить("Характеристика", ВыборкаТовары.Характеристика);
		Иначе
			ПараметрыОтбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());				
		КонецЕсли;
		ПараметрыОтбора.Вставить("Упаковка", ВыборкаТовары.Упаковка);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			НоваяСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			НоваяСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(ВыборкаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
		КонецЕсли;
		
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(Данные, РезультатыПриемки, "РезультатыПриемки");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьАктОРасхождениях_ФНС_2019.
Процедура НайтиСоздатьАктОРасхождениях_ФНС_2019(ДеревоДанных, ДокументУчета = Неопределено, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Данные = Новый Структура;
	Для каждого СтрокаДерева Из ДеревоДанных.Строки Цикл
		Путь = СтрокаДерева.ПолныйПуть;
		ДанныеСтроки = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, Путь);
		Данные.Вставить(Путь, ДанныеСтроки);
	КонецЦикла;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(ДокументУчета) Тогда
		ДокументОбъект = ДокументУчета.ПолучитьОбъект();
		// Попытка заблокировать документ.
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ДокументОбъект.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		// конец попытки заблокировать документ.
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов'");
        КонецЕсли;		
	Иначе
		ДокументОбъект = Документы.АктОРасхожденияхПослеОтгрузки.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса;
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	// Шапка.
	ДокументОбъект.ОснованиеДляСоставленияАкта = "Входящий электронный документ";	
	ДокументОбъект.Статус = Перечисления.СтатусыАктаОРасхождениях.НеСогласовано;
	
	СведенияОПродавце = РеквизитыУчастникаАктаОРасхождениях(Данные.Продавец);
	СсылкаНаОбъектПоИННКПП("Организации", СведенияОПродавце.ИНН, СведенияОПродавце.КПП, ДокументОбъект.Организация);
	
	СведенияОПокупателе = РеквизитыУчастникаАктаОРасхождениях(Данные.Покупатель);	
	СсылкаНаОбъектПоИННКПП("Контрагенты", СведенияОПокупателе.ИНН, СведенияОПокупателе.КПП, ДокументОбъект.Контрагент);	
	ПартнерКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "Партнер"); 
	Если Не ЗначениеЗаполнено(ДокументОбъект.Партнер) И ЗначениеЗаполнено(ПартнерКонтрагента) Тогда
		ДокументОбъект.Партнер = ПартнерКонтрагента;
	КонецЕсли;	
	
	СведенияОГрузоотправителе = РеквизитыУчастникаАктаОРасхождениях(Данные.Грузоотправитель);
	Грузоотправитель = Справочники.Контрагенты.ПустаяСсылка();
	СсылкаНаОбъектПоИННКПП("Контрагенты", СведенияОГрузоотправителе.ИНН, СведенияОГрузоотправителе.КПП, Грузоотправитель);
	Если ЗначениеЗаполнено(Грузоотправитель) Тогда
		ДокументОбъект.Грузоотправитель = Грузоотправитель.НаименованиеПолное;
	КонецЕсли;
	
	СведенияОСтраховойКомпании = РеквизитыУчастникаАктаОРасхождениях(Данные.СтраховаяКомпания);
	СтраховаяКомпания = Справочники.Контрагенты.ПустаяСсылка();	
	СсылкаНаОбъектПоИННКПП("Контрагенты", СведенияОСтраховойКомпании.ИНН, СведенияОСтраховойКомпании.КПП, СтраховаяКомпания);
	Если ЗначениеЗаполнено(СтраховаяКомпания) Тогда
		ДокументОбъект.СтраховаяКомпания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтраховаяКомпания, "Партнер");
	КонецЕсли;
	
	ДокументОснование = Неопределено;
	ДокументЗаполненПоОснованию = Ложь;
	СопроводительныйДокумент = Данные.СведенияОбОсмотреГруза.СопроводительныйДокумент;
	Если ЗначениеЗаполнено(СопроводительныйДокумент.Номер) Тогда
		ДокументОснование = НайтиРеализациюТоваровУслуг(ДокументОбъект.Организация, СопроводительныйДокумент.Номер, СопроводительныйДокумент.Дата);
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ЗаполнитьНаОсновании(ДокументОснование, ДокументОбъект);
			ДокументЗаполненПоОснованию = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.НомерВходящегоДокумента = Данные.НомерДокумента;
	ДокументОбъект.ДатаВходящегоДокумента = Данные.ДатаДокумента;
	
	ДокументОбъект.МестоПриемкиТовара = Данные.СведенияОбОсмотреГруза.МестоСоставленияДокумента;
	ДокументОбъект.ДатаДоставкиТоваров = Данные.СведенияОбОсмотреГруза.ДатаОсмотра;
	
	ДокументОбъект.УсловияХраненияТовараДоВскрытияНаСкладеПолучателя = Данные.ОбстоятельстваПриемки.УсловияХраненияТоваровНаСкладеПолучателя;
	ДокументОбъект.СостояниеТарыИУпаковки = Данные.ОбстоятельстваПриемки.СостояниеТарыУпаковки;
	ДокументОбъект.СпособОпределенияКоличества = Данные.ОбстоятельстваПриемки.ТипОпределенияКоличества;
	ДокументОбъект.ДополнительнаяИнформация = Данные.ОбстоятельстваПриемки.ДополнительныеСведения;
	
	Приемщик = РеквизитыПриемщикаАктаОРасхождениях(Данные.СведенияОЛицеПринявшемТовар);
	ДокументОбъект.КладовщикПринявшийТовар = Приемщик.Представление;
	
	ДокументОбъект.ЗаключениеКомиссии = Данные.ЗаключениеКомиссии;
	
	// Приемка товаров.
	ДокументОбъект.ПриемкаТоваров.Очистить();
	НоваяСтрока = ДокументОбъект.ПриемкаТоваров.Добавить();	
	НоваяСтрока.ДатаПрибытияВПунктНазначения = Данные.СведенияОВремениПриемки.ДатаПрибытияВПунктНазначения;
	НоваяСтрока.ДатаВыдачиОрганизациейТранспорта = Данные.СведенияОВремениПриемки.ДатаВыдачиОрганизациейТранспорта;
	НоваяСтрока.ДатаВскрытия = Данные.СведенияОВремениПриемки.ДатаВскрытияТранспортныхСредств;
	НоваяСтрока.ДатаДоставкиНаСкладПолучателя = Данные.СведенияОВремениПриемки.ДатаДоставкиНаСкладПолучателя;	
	
	// Штрихкоды упаковок маркированной продукции
	ШтрихкодыУпаковокФакт = ЭлектронноеВзаимодействиеИСМП.ТаблицаШтрихкодыУпаковокНоменклатура();
	ШтрихкодыУпаковокРасхождения = ЭлектронноеВзаимодействиеИСМП.ТаблицаШтрихкодыУпаковокНоменклатура();
	
	// Товары.
	Если Не ДокументЗаполненПоОснованию Тогда
		ДокументОбъект.Товары.Очистить();
		Для Каждого СтрокаПриемки Из Данные.РезультатыПриемки Цикл
			СтрокаТовара = ДокументОбъект.Товары.Добавить();
			Если ЗначениеЗаполнено(СтрокаПриемки.ПоДокументу.Цена) Тогда
				СтрокаТовара.Цена = СтрокаПриемки.ПоДокументу.Цена;
				СтрокаТовара.СтавкаНДС = СтрокаПриемки.ПоДокументу.СтавкаНДС;
				СтрокаТовара.ЗаполненоПоРеализации = Истина;			
			Иначе
				СтрокаТовара.Цена = СтрокаПриемки.ПоФакту.Цена;
				СтрокаТовара.СтавкаНДС = СтрокаПриемки.ПоФакту.СтавкаНДС;
			КонецЕсли;
			
			СтрокаТовара.КоличествоПоДокументу = СтрокаПриемки.ПоДокументу.Количество;
			СтрокаТовара.КоличествоУпаковокПоДокументу = СтрокаПриемки.ПоДокументу.Количество;
			Если ДокументОбъект.ЦенаВключаетНДС Тогда
				СтрокаТовара.СуммаПоДокументу = СтрокаПриемки.ПоДокументу.СуммаСНДС;
			Иначе
				СтрокаТовара.СуммаПоДокументу = СтрокаПриемки.ПоДокументу.СуммаСНДС - СтрокаПриемки.ПоДокументу.СуммаНДС;
			КонецЕсли;
			СтрокаТовара.СуммаНДСПоДокументу = СтрокаПриемки.ПоДокументу.СуммаНДС;
			СтрокаТовара.СуммаСНДСПоДокументу = СтрокаПриемки.ПоДокументу.СуммаСНДС;
			
			СтрокаТовара.Количество = СтрокаПриемки.ПоФакту.Количество;
			СтрокаТовара.КоличествоУпаковок = СтрокаПриемки.ПоФакту.Количество;
			Если ДокументОбъект.ЦенаВключаетНДС Тогда
				СтрокаТовара.Сумма = СтрокаПриемки.ПоФакту.СуммаСНДС;
			Иначе
				СтрокаТовара.Сумма = СтрокаПриемки.ПоФакту.СуммаСНДС - СтрокаПриемки.ПоФакту.СуммаНДС;
			КонецЕсли;
			СтрокаТовара.СуммаНДС = СтрокаПриемки.ПоФакту.СуммаНДС;
			СтрокаТовара.СуммаСНДС = СтрокаПриемки.ПоФакту.СуммаСНДС;
			
			СтрокаТовара.КомментарийКлиента = СтрокаПриемки.ИнформацияОРасхождениях;
			
			Если ЗначениеЗаполнено(СтрокаПриемки.Сопоставление.НоменклатураИБ) Тогда
				СтрокаТовара.Номенклатура = СтрокаПриемки.Сопоставление.НоменклатураИБ;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаПриемки.Сопоставление.ХарактеристикаИБ) Тогда
				СтрокаТовара.Характеристика = СтрокаПриемки.Сопоставление.ХарактеристикаИБ;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаПриемки.Сопоставление.УпаковкаИБ) Тогда
				СтрокаТовара.Упаковка = СтрокаПриемки.Сопоставление.УпаковкаИБ;
			КонецЕсли;
			
			ЭлектронноеВзаимодействиеИСМП.ДобавитьШтрихкодыТаблицыШтрихкодовАктОРасхождениях(
				ШтрихкодыУпаковокФакт, ШтрихкодыУпаковокРасхождения, СтрокаПриемки);
			
		КонецЦикла;
	Иначе
		
		ПараметрыОтбораТовары = Новый Структура;
		ПараметрыОтбораТовары.Вставить("Номенклатура");
		
		Для Каждого СтрокаПриемки Из Данные.РезультатыПриемки Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаПриемки.Сопоставление.НоменклатураИБ);
			Если ЗначениеЗаполнено(СтрокаПриемки.Сопоставление.ХарактеристикаИБ) Тогда
				ПараметрыОтбора.Вставить("Характеристика", СтрокаПриемки.Сопоставление.ХарактеристикаИБ);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаПриемки.Сопоставление.УпаковкаИБ) Тогда
				ЕдиницаХраненияНоменклатуры = ЭлектронноеВзаимодействиеУТВызовСервера.ЕдиницаХраненияНоменклатуры(СтрокаПриемки.Сопоставление.НоменклатураИБ);
				Если СтрокаПриемки.Сопоставление.УпаковкаИБ <> ЕдиницаХраненияНоменклатуры Тогда
					ПараметрыОтбора.Вставить("Упаковка", СтрокаПриемки.Сопоставление.УпаковкаИБ);
				КонецЕсли;
			КонецЕсли;
			Если СтрокаПриемки.ПоДокументу.Количество > 0 Тогда
				ПараметрыОтбора.Вставить("ЗаполненоПоРеализации", Истина);
			Иначе
				ПараметрыОтбора.Вставить("ЗаполненоПоРеализации", Ложь);
			КонецЕсли;
			СтрокиТовара = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
			
			Если СтрокиТовара.Количество() Тогда
				СтрокаТовара = СтрокиТовара[0]; 
				СтрокаТовара.Количество = СтрокаПриемки.ПоФакту.Количество;
				СтрокаТовара.КоличествоУпаковок = СтрокаПриемки.ПоФакту.Количество;
				Если ДокументОбъект.ЦенаВключаетНДС Тогда
					СтрокаТовара.Сумма = СтрокаПриемки.ПоФакту.СуммаСНДС;
				Иначе
					СтрокаТовара.Сумма = СтрокаПриемки.ПоФакту.СуммаСНДС - СтрокаПриемки.ПоФакту.СуммаНДС;
				КонецЕсли;
				СтрокаТовара.СуммаНДС = СтрокаПриемки.ПоФакту.СуммаНДС;
				СтрокаТовара.СуммаСНДС = СтрокаПриемки.ПоФакту.СуммаСНДС;
				
				СтрокаТовара.Реализация = ДокументОснование;	
				СтрокаТовара.Склад = ДокументОснование.Склад;	
				
				СтрокаТовара.КомментарийКлиента = СтрокаПриемки.ИнформацияОРасхождениях;
				
				ЭлектронноеВзаимодействиеИСМП.ДобавитьШтрихкодыТаблицыШтрихкодовАктОРасхождениях(
					ШтрихкодыУпаковокФакт, ШтрихкодыУпаковокРасхождения, СтрокаПриемки);
				
			Иначе //если можно добавлять новые позиции - тогда вот новая ветка
				СтрокаТовара = ДокументОбъект.Товары.Добавить();
				Если ЗначениеЗаполнено(СтрокаПриемки.ПоДокументу.Цена) Тогда
					СтрокаТовара.Цена = СтрокаПриемки.ПоДокументу.Цена;
					СтрокаТовара.СтавкаНДС = СтрокаПриемки.ПоДокументу.СтавкаНДС;
					СтрокаТовара.ЗаполненоПоРеализации = Истина;
				Иначе
					СтрокаТовара.Цена = СтрокаПриемки.ПоФакту.Цена;
					СтрокаТовара.СтавкаНДС = СтрокаПриемки.ПоФакту.СтавкаНДС;
				КонецЕсли;
				
				СтрокаТовара.КоличествоПоДокументу = СтрокаПриемки.ПоДокументу.Количество;
				СтрокаТовара.КоличествоУпаковокПоДокументу = СтрокаПриемки.ПоДокументу.Количество;
				СтрокаТовара.СуммаПоДокументу = СтрокаПриемки.ПоДокументу.СуммаСНДС - СтрокаПриемки.ПоДокументу.СуммаНДС;
				СтрокаТовара.СуммаНДСПоДокументу = СтрокаПриемки.ПоДокументу.СуммаНДС;
				СтрокаТовара.СуммаСНДСПоДокументу = СтрокаПриемки.ПоДокументу.СуммаСНДС;
				
				СтрокаТовара.Количество = СтрокаПриемки.ПоФакту.Количество;
				СтрокаТовара.КоличествоУпаковок = СтрокаПриемки.ПоФакту.Количество;
				СтрокаТовара.Сумма = СтрокаПриемки.ПоФакту.СуммаСНДС - СтрокаПриемки.ПоФакту.СуммаНДС;
				СтрокаТовара.СуммаНДС = СтрокаПриемки.ПоФакту.СуммаНДС;
				СтрокаТовара.СуммаСНДС = СтрокаПриемки.ПоФакту.СуммаСНДС;
				
				СтрокаТовара.КомментарийКлиента = СтрокаПриемки.ИнформацияОРасхождениях;
				
				Если ЗначениеЗаполнено(СтрокаПриемки.Сопоставление.НоменклатураИБ) Тогда
					СтрокаТовара.Номенклатура = СтрокаПриемки.Сопоставление.НоменклатураИБ;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаПриемки.Сопоставление.ХарактеристикаИБ) Тогда
					СтрокаТовара.Характеристика = СтрокаПриемки.Сопоставление.ХарактеристикаИБ;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаПриемки.Сопоставление.УпаковкаИБ) Тогда
					СтрокаТовара.Упаковка = СтрокаПриемки.Сопоставление.УпаковкаИБ;
				КонецЕсли;
				
				ЭлектронноеВзаимодействиеИСМП.ДобавитьШтрихкодыТаблицыШтрихкодовАктОРасхождениях(
					ШтрихкодыУпаковокФакт, ШтрихкодыУпаковокРасхождения, СтрокаПриемки);
				
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеИСМП.СвернутьТаблицуШтрихкодовУпаковокАкт(ШтрихкодыУпаковокФакт);
	ЭлектронноеВзаимодействиеИСМП.СвернутьТаблицуШтрихкодовУпаковокАкт(ШтрихкодыУпаковокРасхождения);
	
	ДокументОбъект.ШтрихкодыУпаковокФактЭДО.Загрузить(ШтрихкодыУпаковокФакт);
	Если ШтрихкодыУпаковокРасхождения.Количество() Тогда
		ДокументОбъект.ШтрихкодыУпаковокРасхождения.Загрузить(ШтрихкодыУпаковокРасхождения);
	ИначеЕсли ШтрихкодыУпаковокФакт.Количество() Тогда
		// В акте может присутствовать маркируемая продукция. Для случая, когда по кодам нет, но есть расхождения по количеству,
		// необходимо заполнять штрихкоды упаковок документа для заполнения документа КорректировкаРеализации на основании акта.
		МассивШтрихкодов = ШтрихкодыУпаковокФакт.ВыгрузитьКолонку("ЗначениеШтрихкода");
		ШтрихкодыУпаковок = ШтрихкодированиеИС.ШтрихкодыУпаковок(МассивШтрихкодов);
		ДокументОбъект.ШтрихкодыУпаковок.ЗагрузитьКолонку(ШтрихкодыУпаковок.ВыгрузитьКолонку("Ссылка"), "ШтрихкодУпаковки");
	КонецЕсли;
	
	Если ДокументОбъект.Товары.Итог("СуммаСНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя;
	ИначеЕсли ДокументОбъект.Товары.Итог("СуммаНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	Попытка
		// запись версии создаваемого документа в подсистеме версионирования
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюДокумента(ДокументОбъект, Ложь, РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		// запись версии конец
						
		ДокументОбъект.Записать(РежимЗаписи);
		ДокументОбъект.Разблокировать();			
		ДокументУчета = ДокументОбъект.Ссылка;
		
		//Запись в Реестр документов
		ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(ДокументУчета, "РеестрДокументов");
		РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, ДокументУчета,  Неопределено, Ложь);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), ДокументУчета,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеРеквизитыОрганизации.
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, ДеревоДанных, Отказ) Экспорт

	СведенияОбОрганизации = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Организация", "Юр", ТекущаяДатаСеанса());
	
	ДанныеРуководителя = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(СсылкаНаОбъект,, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРуководителя, "Должность") 
	   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРуководителя, "ФизическоеЛицо") Тогда
	   
	   	РуководительДолжность = ДанныеРуководителя.Должность;
		ФИОРуководителя = ФизическиеЛицаУТ.ФамилияИмяОтчество(ДанныеРуководителя.ФизическоеЛицо);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Организация.Руководитель.Фамилия", ФИОРуководителя.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Организация.Руководитель.Имя", ФИОРуководителя.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Организация.Руководитель.Отчество", ФИОРуководителя.Отчество);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Организация.Руководитель.Должность", РуководительДолжность);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования", ТекущаяДатаСеанса());
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование", "Реквизиты " + СсылкаНаОбъект.Наименование);

КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоКаталогуТоваровCML.
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных, Отказ) Экспорт

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержитТолькоИзменения", Истина);
	
	СведенияОбОрганизации = Неопределено;
	СведенияОбОрганизации = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(Организация);
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Владелец", "Юр", ТекущаяДатаСеанса());
	
	ДанныеДляЭД = ПолучитьДанныеПоТоварам(ТоварыКаталога, Организация);
	ДанныеДляЭД.Колонки.Добавить("Сопоставление");
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	НоменклатураПартнеровСервер.ШтрихкодыПоТоварам(ДанныеДляЭД, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	
	
	Для Каждого СтрокаТовара Из ДанныеДляЭД Цикл
		
		Сопоставление = Новый Структура;
		Сопоставление.Вставить("Наименование", СтрокаТовара.Наименование);
		Сопоставление.Вставить("Характеристика", СтрокаТовара.ХарактеристикаНаименование);
		Сопоставление.Вставить("ЕдиницаИзмерения", СтрокаТовара.БазоваяЕдиницаНаименование);
		Сопоставление.Вставить("Артикул", СтрокаТовара.Артикул);
		Сопоставление.Вставить("СтавкаНДС", СтрокаТовара.СтавкаНДС);
		Сопоставление.Вставить("НоменклатураИБ", СтрокаТовара.Номенклатура);
		Сопоставление.Вставить("ХарактеристикаИБ", СтрокаТовара.Характеристика);
		Сопоставление.Вставить("УпаковкаИБ", СтрокаТовара.Упаковка);		

		НоменклатураПартнеровСервер.ЗаполнитьШтрихкодыТоваровВСопоставление(Сопоставление, ШтрихкодыНоменклатуры, ШтрихкодыКомбинаций,
				СтрокаТовара.Номенклатура, СтрокаТовара.Характеристика, СтрокаТовара.Упаковка);
		
		СтрокаТовара.Сопоставление = Сопоставление;
		
	КонецЦикла;
	
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ДанныеДляЭД);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДанныеДляЭД, "Товары");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоПрайсЛисту.
Процедура ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Номер,
	|	КоммерческоеПредложениеКлиенту.Организация,
	|	КоммерческоеПредложениеКлиенту.Дата,
	|	КоммерческоеПредложениеКлиенту.Валюта,
	|	КоммерческоеПредложениеКлиенту.Валюта.Код КАК ВалютаКод,
	|	КоммерческоеПредложениеКлиенту.СрокДействия КАК СрокДействия
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	%1 КАК Артикул,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.НаименованиеПолное = """"
	|			ТОГДА Товары.Номенклатура.Наименование
	|		ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Цена,
	|	Товары.СтавкаНДС,
	|	Товары.Количество,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,	
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка,
	|	Товары.Ссылка.Валюта.Код КАК ВалютаЦены
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ВидЦены КАК ТипЦены,
	|	Товары.ВидЦены.Наименование КАК Наименование,
	|	Товары.Ссылка.Валюта.Код КАК Валюта,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК ВключаетНДС
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Активность
	|";
	
	ИмяДопКолонки = "";
	ИмяДополнительнойКолонки(ИмяДопКолонки);
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура." + ИмяДопКолонки, """"""));
					
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаДляСопоставления = НоменклатураПартнеровСервер.ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект);
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаФормирования", 
			ТекущаяДатаСеанса());
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДействительноС", 
			ТекущаяДатаСеанса());
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДействительноДо", 
			РеквизитыШапки.СрокДействия);
			
	Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Цены по комм. предложению %1 от %2'"),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапки.Номер, Ложь, Ложь),
				РеквизитыШапки.Дата);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Описание", 
			Описание);
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, , РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Владелец", "Юр", РеквизитыШапки.Дата);
	
	ТаблицаТоваров = РезультатЗапроса[1].Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	НоменклатураПартнеровСервер.ШтрихкодыПоТоварам(ТаблицаТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);
		
		//Сопоставление
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		Если СтрокаТовары.Характеристика <> Неопределено Тогда
			ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		Иначе
			ПараметрыОтбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());				
		КонецЕсли;
		ПараметрыОтбора.Вставить("Упаковка", СтрокаТовары.Упаковка);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			СтрокаТовары.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			СтрокаТовары.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ТаблицаТипыЦен = РезультатЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТипыЦен, "ТипыЦен");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоСчету.
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
	ДопустимыеВидыДокументов = Новый Массив;
	ДопустимыеВидыДокументов.Добавить("ЗаказКлиента");
	ДопустимыеВидыДокументов.Добавить("РеализацияТоваровУслуг");
	ДопустимыеВидыДокументов.Добавить("АктВыполненныхРабот");
	ДопустимыеВидыДокументов.Добавить("ОтчетКомиссионера");
	ДопустимыеВидыДокументов.Добавить("ОтчетКомиссионераОСписании");
	ДопустимыеВидыДокументов.Добавить("ОтчетКомитенту");
	ДопустимыеВидыДокументов.Добавить("ЗаявкаНаВозвратТоваровОтКлиента");
	ДопустимыеВидыДокументов.Добавить("ДоговорыКонтрагентов");
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект,"ДокументОснование"); 
	ВидДокумента = ДокументОснование.Метаданные().Имя;
	
	Если ДопустимыеВидыДокументов.Найти(ВидДокумента) = Неопределено Тогда
		ВызватьИсключение 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'ЭД ""Счет на оплату"" не может быть сформирована, т.к. не определено получение данных для основания вида %1'"),
				ВидДокумента);
	КонецЕсли;
	
	Если ВидДокумента <> "ДоговорыКонтрагентов" Тогда
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, 
								"ЦенаВключаетНДС, НалогообложениеНДС, Дата, Номер, СуммаДокумента");
	Иначе
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, 
								"НалогообложениеНДС, Дата, Номер");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуКлиенту.Валюта КАК Валюта,
	|	СчетНаОплатуКлиенту.Валюта.Код КАК ВалютаКод,
	|	СчетНаОплатуКлиенту.Дата,
	|	СчетНаОплатуКлиенту.Номер,
	|	СчетНаОплатуКлиенту.СуммаДокумента,
	|	СчетНаОплатуКлиенту.БанковскийСчет,
	|	СчетНаОплатуКлиенту.НазначениеПлатежа,
	|	СчетНаОплатуКлиенту.ЧастичнаяОплата,
	|	ВЫБОР КОГДА СчетНаОплатуКлиенту.ДокументОснование ССЫЛКА Документ.ОтчетКомитенту
	|				И СчетНаОплатуКлиенту.ДокументОснование.СуммаВознаграждения = 0 ТОГДА
	|		0
	|	КОГДА СчетНаОплатуКлиенту.ДокументОснование ССЫЛКА Документ.ОтчетКомитенту ТОГДА // СуммаВознаграждения <> 0
	|		СчетНаОплатуКлиенту.СуммаДокумента * 100 / СчетНаОплатуКлиенту.ДокументОснование.СуммаВознаграждения
	|	КОГДА СчетНаОплатуКлиенту.ДокументОснование.СуммаДокумента = 0 ТОГДА
	|		0
	|	КОГДА (СчетНаОплатуКлиенту.ДокументОснование ССЫЛКА Документ.ЗаказКлиента
	|				ИЛИ СчетНаОплатуКлиенту.ДокументОснование ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента)
	|				И СчетНаОплатуКлиенту.ДокументОснование.ТребуетсяЗалогЗаТару ТОГДА
	|		СчетНаОплатуКлиенту.СуммаДокумента * 100 / (СчетНаОплатуКлиенту.ДокументОснование.СуммаДокумента + СчетНаОплатуКлиенту.ДокументОснование.СуммаВозвратнойТары)
	|	ИНАЧЕ
	|		СчетНаОплатуКлиенту.СуммаДокумента * 100 / СчетНаОплатуКлиенту.ДокументОснование.СуммаДокумента
	|	КОНЕЦ КАК ПроцентОплаты,	
	|	СчетНаОплатуКлиенту.Организация,
	|	СчетНаОплатуКлиенту.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	СчетНаОплатуКлиенту.Контрагент,
	|	СчетНаОплатуКлиенту.ИдентификаторПлатежа,
	|	СчетНаОплатуКлиенту.ДокументОснование
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|ГДЕ
	|	СчетНаОплатуКлиенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СчетЭтапыГрафикаОплаты.ДатаПлатежа) КАК ДатаПлатежа
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту.ЭтапыГрафикаОплаты КАК СчетЭтапыГрафикаОплаты
	|ГДЕ
	|	СчетЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|;
	|
	|";
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		Запрос.УстановитьПараметр("ДокОснование", СсылкаНаОбъект.ДокументОснование);
		
		Если ВидДокумента = "РеализацияТоваровУслуг" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	ВЫБОР
			|		КОГДА Товары.Номенклатура.НаименованиеПолное = """"
			|			ТОГДА Товары.Номенклатура.Наименование
			|		ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияККоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	ВЫБОР
			|		КОГДА &ОтображатьСкидки ТОГДА
			|			Товары.Цена
			|		ИНАЧЕ Товары.Сумма/Товары.КоличествоУпаковок 
			|	КОНЕЦ КАК Цена,
			|	ВЫБОР
			|		КОГДА &ОтображатьСкидки ТОГДА
			|			Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки
			|		ИНАЧЕ 0 
			|	КОНЕЦ КАК СуммаСкидки,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,			
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК Упаковка
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование
			|			И (Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|				ИЛИ Товары.Ссылка.ТребуетсяЗалогЗаТару
			|				ИЛИ НЕ Товары.Ссылка.ВернутьМногооборотнуюТару)";
			
		ИначеЕсли  ВидДокумента = "АктВыполненныхРабот"  Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	ВЫБОР
			|		КОГДА Товары.Номенклатура.НаименованиеПолное = """"
			|			ТОГДА Товары.Номенклатура.Наименование
			|		ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
			|	Товары.Количество КАК Количество,
			|	1 КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	ВЫБОР
			|		КОГДА &ОтображатьСкидки ТОГДА
			|			Товары.Цена
			|		ИНАЧЕ Товары.Сумма/Товары.Количество 
			|	КОНЕЦ КАК Цена,
			|	ВЫБОР
			|		КОГДА &ОтображатьСкидки ТОГДА
			|			Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки
			|		ИНАЧЕ 0 
			|	КОНЕЦ КАК СуммаСкидки,
			|	Товары.Содержание КАК Описание,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)	КАК Упаковка
			|ИЗ
			|	Документ.АктВыполненныхРабот.Услуги КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование";
			
		ИначеЕсли ВидДокумента = "ЗаказКлиента" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	ВЫБОР
			|		КОГДА Товары.Номенклатура.НаименованиеПолное = """"
			|			ТОГДА Товары.Номенклатура.Наименование
			|		ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	ВЫБОР
			|		КОГДА &ОтображатьСкидки ТОГДА
			|			Товары.Цена
			|		ИНАЧЕ Товары.Сумма/Товары.КоличествоУпаковок 
			|	КОНЕЦ КАК Цена,
			|	ВЫБОР
			|		КОГДА &ОтображатьСкидки ТОГДА
			|			Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки
			|		ИНАЧЕ 0 
			|	КОНЕЦ КАК СуммаСкидки,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Содержание КАК Содержание,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,			
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК Упаковка
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование
			|			И (Товары.Отменено = ЛОЖЬ)
			|			И (Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|				ИЛИ Товары.Ссылка.ТребуетсяЗалогЗаТару
			|				ИЛИ НЕ Товары.Ссылка.ВернутьМногооборотнуюТару)";
			
		ИначеЕсли ВидДокумента = "ОтчетКомиссионера" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	ВЫБОР
			|		КОГДА Товары.Номенклатура.НаименованиеПолное = """"
			|			ТОГДА Товары.Номенклатура.Наименование
			|		ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.СуммаПродажи,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаПродажиНДС,
			|	Товары.СуммаСНДС,
			|	Товары.ЦенаПродажи,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,			
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК Упаковка
			|ИЗ
			|	Документ.ОтчетКомиссионера.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование";
			
		ИначеЕсли ВидДокумента = "ОтчетКомиссионераОСписании" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	ВЫБОР
			|		КОГДА Товары.Номенклатура.НаименованиеПолное = """"
			|			ТОГДА Товары.Номенклатура.Наименование
			|		ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,			
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК Упаковка
			|ИЗ
			|	Документ.ОтчетКомиссионераОСписании.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование";
			
		ИначеЕсли ВидДокумента = "ОтчетКомитенту" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	ВЫБОР
			|		КОГДА Товары.Номенклатура.НаименованиеПолное = """"
			|			ТОГДА Товары.Номенклатура.Наименование
			|		ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,			
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК Упаковка
			|ИЗ
			|	Документ.ОтчетКомитенту.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование";
			
		ИначеЕсли ВидДокумента = "ЗаявкаНаВозвратТоваровОтКлиента" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	ВЫБОР
			|		КОГДА Товары.Номенклатура.НаименованиеПолное = """"
			|			ТОГДА Товары.Номенклатура.Наименование
			|		ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	ВЫБОР
			|		КОГДА &ОтображатьСкидки ТОГДА
			|			Товары.Цена
			|		ИНАЧЕ Товары.Сумма/Товары.КоличествоУпаковок 
			|	КОНЕЦ КАК Цена,
			|	ВЫБОР
			|		КОГДА &ОтображатьСкидки ТОГДА
			|			Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки
			|		ИНАЧЕ 0 
			|	КОНЕЦ КАК СуммаСкидки,
			|	ВЫБОР
			|		КОГДА
			|			Товары.Ссылка.ВернутьМногооборотнуюТару
			|			И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|		ТОГДА
			|			ИСТИНА
			|		ИНАЧЕ
			|			ЛОЖЬ
			|	КОНЕЦ КАК ЭтоВозвратнаяТара,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,			
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК Упаковка
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары	КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование
			|			И (Товары.Отменено = ЛОЖЬ)
			|			И (Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|				ИЛИ Товары.Ссылка.ТребуетсяЗалогЗаТару
			|				ИЛИ НЕ Товары.Ссылка.ВернутьМногооборотнуюТару)";
			
		КонецЕсли;
		
		ИмяДопКолонки = "";
		ИмяДополнительнойКолонки(ИмяДопКолонки);
		ТекстЗапросаТовары = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстЗапросаТовары, 
				?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура." + ИмяДопКолонки, """"""));
		
		ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары,
			"&ТекстЗапросаКодЕдиницыИзмерения",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
				"Код",
				"Товары.Упаковка",
				"Товары.Номенклатура"));
				
		ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары,
			"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
				"Наименование",
				"Товары.Упаковка",
				"Товары.Номенклатура"));
			
		ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"Товары.Упаковка",
				"Товары.Номенклатура"));
	КонецЕсли;   
	
	ОтображатьСкидки = (Константы.ОтображениеСкидокВПечатныхФормахДокументовПродажи.Получить()
		<> Перечисления.ВариантыВыводаСкидокВПечатныхФормах.НеВыводитьСкидки);
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаТовары;
	
	Если ВидДокумента <> "ДоговорыКонтрагентов" Тогда
		ВыборкаДляСопоставления = НоменклатураПартнеровСервер.ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект.ДокументОснование);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ОтображатьСкидки", ОтображатьСкидки);	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Дата", 
			РеквизитыШапки.Дата);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Номер", 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапки.Номер));
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НазначениеПлатежа", 
			РеквизитыШапки.НазначениеПлатежа);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ЧастичнаяОплата", 
			РеквизитыШапки.ЧастичнаяОплата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НалогообложениеНДС", 
			Строка(РеквизитыОснования.НалогообложениеНДС));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата, РеквизитыШапки.ВалютаРегламентированногоУчета).КурсЧислитель);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДокументОснования.НомерДокументаОснования", 
			РеквизитыОснования.Номер);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДокументОснования.ДатаДокументаОснования", 
			Строка(РеквизитыОснования.Дата));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДокументОснования.НаименованиеДокументаОснования", 
			Строка(ДокументОснование));
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, , РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец", "Юр", РеквизитыШапки.Дата);
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, , РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр", РеквизитыШапки.Дата);
	
	// Заполняем документ основание
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
	
	ВыборкаСрокПлатежа = РезультатЗапроса[1].Выбрать();
	ВыборкаСрокПлатежа.Следующий();
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"СрокПлатежа", 
			ВыборкаСрокПлатежа.ДатаПлатежа);
	
	ЭтапыГрафикаОплаты = РезультатЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ЭтапыГрафикаОплаты, "ГрафикОплаты");
	
	Если ВидДокумента <> "ДоговорыКонтрагентов" Тогда

		ТаблицаТоваров = РезультатЗапроса[3].Выгрузить();
		ТаблицаТоваров.Колонки.Добавить("Сопоставление");
		
		ШтрихкодыКомбинаций = Неопределено;
		ШтрихкодыНоменклатуры = Неопределено;
		НоменклатураПартнеровСервер.ШтрихкодыПоТоварам(ТаблицаТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);			
		
		СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
		ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
		ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
		Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
			СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);
			
			//Сопоставление
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
			Если СтрокаТовары.Характеристика <> Неопределено Тогда
				ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
			Иначе
				ПараметрыОтбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());				
			КонецЕсли;
			ПараметрыОтбора.Вставить("Упаковка", СтрокаТовары.Упаковка);
			СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
				НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
				СтрокаТовары.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
		    Иначе
				СтрокаТовары.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
			КонецЕсли;
		КонецЦикла;	
		ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
		
		Если Не РеквизитыШапки.ЧастичнаяОплата Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДокумента, 
					"ИтогоПоДокументу.Сумма", 
					ТаблицаТоваров.Итог("Сумма"));
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДокумента, 
					"ИтогоПоДокументу.СуммаНДС", 
					ТаблицаТоваров.Итог("СуммаНДС"));			
			
			СуммаБезСкидки = ТаблицаТоваров.Итог("Сумма");
			СуммаСкидки = 0;
			Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
				СуммаСкидки = ТаблицаТоваров.Итог("СуммаСкидки");
			КонецЕсли;
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДокумента, 
					"ИтогоПоДокументу.Сумма", 
					РеквизитыШапки.СуммаДокумента);
					
			СуммаВсегоНДС = 0;
			Если ЗначениеЗаполнено(ТаблицаТоваров.Итог("СуммаНДС")) Тогда
				СуммаВсегоНДС = Окр(ТаблицаТоваров.Итог("СуммаНДС") /100 * РеквизитыШапки.ПроцентОплаты, 2);
			КонецЕсли;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДокумента, 
					"ИтогоПоДокументу.СуммаНДС", 
					СуммаВсегоНДС);					
				
			СуммаБезСкидки = РеквизитыШапки.СуммаДокумента;
			СуммаСкидки = 0;			
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДокумента, 
				"ИтогоПоДокументу.ЦенаВключаетНДС", 
				РеквизитыОснования.ЦенаВключаетНДС);		
		СуммаБезСкидки = СуммаБезСкидки + СуммаСкидки;
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДокумента, 
				"ИтогоПоДокументу.СуммаСкидки", 
				СуммаСкидки);
				
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДокумента, 
				"ИтогоПоДокументу.СуммаБезСкидки", 
				СуммаБезСкидки);
				
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДокумента, 
				"ИтогоПоДокументу.Сумма", 
				РеквизитыШапки.СуммаДокумента);
				
		Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование.СтавкаНДС) Тогда
			СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.ДокументОснование.СтавкаНДС);
		Иначе
			СуммаНДС = 0;
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДокумента, 
				"ИтогоПоДокументу.СуммаНДС", 
				СуммаНДС);
				
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДокумента, 
				"ИтогоПоДокументу.СуммаБезСкидки", 
				РеквизитыШапки.СуммаДокумента);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДокумента, 
				"ИтогоПоДокументу.ЦенаВключаетНДС", 
				Истина);
		
	КонецЕсли;
	
	// Заполняем банковский счет
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчет) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчет);
		ДобавитьВДеревоДанныеСчета(ДеревоДокумента, БанковскийСчет);
	КонецЕсли;
	
	Если РеквизитыШапки.ЧастичнаяОплата Тогда
		ИтоговаяСтрока = НСтр("ru = 'Всего на сумму %СуммаПрописью%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаПрописью%", ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	Иначе
		ИтоговаяСтрока = НСтр("ru = 'Всего наименований %Количество%, на сумму %Сумма%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%", ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	КонецЕсли;
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогиПрописью", 
			ИтоговаяСтрока);
			
	ЗаполнитьУИП(ДеревоДокумента, РеквизитыШапки.ИдентификаторПлатежа);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоЗаказуТоваров.
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт 
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Дата КАК Дата,
	|	ЗаказПоставщику.Валюта.Код КАК ВалютаКод,
	|	ЗаказПоставщику.Валюта КАК Валюта,
	|	ЗаказПоставщику.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказПоставщику.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗаказПоставщику.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ЗаказПоставщику.Номер КАК Номер,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ЗаказПоставщику.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.НомерПоДаннымПоставщика КАК НомерПоДаннымПоставщика,
	|	ЗаказПоставщику.ДатаПоДаннымПоставщика КАК ДатаПоДаннымПоставщика,
	|	ВЫБОР ЗаказПоставщику.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада)
	|			ТОГДА ЗаказПоставщику.АдресДоставкиДляПоставщика
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
	|			ТОГДА ЗаказПоставщику.АдресДоставкиДляПоставщика
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
	|			ТОГДА ЗаказПоставщику.АдресДоставкиПеревозчика
	|		ИНАЧЕ ЗаказПоставщику.АдресДоставки
	|	КОНЕЦ КАК АдресДоставки,
	|	ВЫБОР ЗаказПоставщику.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада)
	|			ТОГДА """"
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
	|			ТОГДА ЗаказПоставщику.АдресДоставкиПеревозчикаЗначенияПолей
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
	|			ТОГДА ЗаказПоставщику.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ ЗаказПоставщику.АдресДоставкиЗначенияПолей
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	ВЫБОР ЗаказПоставщику.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада)
	|			ТОГДА ""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
	|			ТОГДА ""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
	|			ТОГДА ""Доставка""
	|		ИНАЧЕ ""Самовывоз""
	|	КОНЕЦ КАК СпособДоставки,
	|	ЗаказПоставщику.ДокументОснование КАК ДокументОснование,
	|	ЗаказПоставщику.БанковскийСчет КАК БанковскийСчет,
	|	ЗаказПоставщику.Договор.Дата КАК ДоговорДата,
	|	ЗаказПоставщику.Договор.Номер КАК ДоговорНомер
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.НаименованиеПолное = """"
	|			ТОГДА Товары.Номенклатура.Наименование
	|		ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ""НДС исчисляется налоговым агентом""
	|		ИНАЧЕ Товары.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА 0
	|		ИНАЧЕ Товары.СуммаСНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	Товары.СуммаРучнойСкидки КАК СуммаСкидки,
	|	Товары.ПроцентРучнойСкидки КАК ПроцентСкидки,
	|	Товары.Цена КАК Цена,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,	
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка КАК Упаковка
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВидОплаты,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа КАК СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И ЭтапыГрафикаОплаты.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыГрафикаОплаты.НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаДляСопоставления = НоменклатураПартнеровСервер.ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект);
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки             = МассивРезультатовЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[2].Выгрузить();
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, , РеквизитыШапки.Дата);
	СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, , РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр", РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр", РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Получатель", "Юр", РеквизитыШапки.Дата);		
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта",	РеквизитыШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс", 
			РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата, РеквизитыШапки.ВалютаРегламентированногоУчета).КурсЧислитель);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", РеквизитыШапки.СуммаДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Комментарий", РеквизитыШапки.ДополнительнаяИнформация);
	
	// заполнение полей дерева данных Доставка
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.СпособДоставки",	РеквизитыШапки.СпособДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставки", РеквизитыШапки.АдресДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставкиЗначенияПолей",
		РеквизитыШапки.АдресДоставкиЗначенияПолей);
	
	// Номер и дата договора.
	Если ЗначениеЗаполнено(РеквизитыШапки.ДоговорНомер) И ЗначениеЗаполнено(РеквизитыШапки.ДоговорДата) Тогда
		РеквизитыДоговора = Новый ТаблицаЗначений;
		РеквизитыДоговора.Колонки.Добавить("Идентификатор");
		РеквизитыДоговора.Колонки.Добавить("Наименование");
		РеквизитыДоговора.Колонки.Добавить("Номер");
		РеквизитыДоговора.Колонки.Добавить("Дата");
		
		СтрокаРеквизитыДоговора = РеквизитыДоговора.Добавить();
		СтрокаРеквизитыДоговора.Идентификатор = НСтр("ru = 'Договор'");
		СтрокаРеквизитыДоговора.Наименование = НСтр("ru = 'Договор'");
		СтрокаРеквизитыДоговора.Номер = РеквизитыШапки.ДоговорНомер;
		СтрокаРеквизитыДоговора.Дата = РеквизитыШапки.ДоговорДата;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, РеквизитыДоговора, "ДокументыСделки");
	КонецЕсли;
			
	ТаблицаТоваров = МассивРезультатовЗапроса[1].Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	НомерСтроки = 1;
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	НоменклатураПартнеровСервер.ШтрихкодыПоТоварам(ТаблицаТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);			
	
	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);
		СтрокаТовары.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		//Сопоставление
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		Если СтрокаТовары.Характеристика <> Неопределено Тогда
			ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		Иначе
			ПараметрыОтбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());				
		КонецЕсли;
		ПараметрыОтбора.Вставить("Упаковка", СтрокаТовары.Упаковка);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			СтрокаТовары.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			СтрокаТовары.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", ТаблицаТоваров.Итог("Сумма"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог", ТаблицаТоваров.Итог("СуммаНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.ЦенаВключаетНДС);
	
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Всего наименований %1, на сумму %2'"),
						ТаблицаТоваров.Количество(), 
						ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	
	СуммаПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаЭтаповГрафикаОплаты, "ГрафикОплаты");

КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоОтветуНаЗаказ.
Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаказКлиента.Валюта.Код КАК ВалютаКод,
	|	ЗаказКлиента.Валюта КАК Валюта,
	|	ЗаказКлиента.Дата,
	|	ЗаказКлиента.Номер,
	|	ЗаказКлиента.Организация,
	|	ЗаказКлиента.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЗаказКлиента.Контрагент,
	|	ЗаказКлиента.Грузоотправитель,
	|	ЗаказКлиента.Грузополучатель,
	|	ЗаказКлиента.БанковскийСчетГрузоотправителя,
	|	ЗаказКлиента.БанковскийСчетГрузополучателя,
	|	ЗаказКлиента.СуммаДокумента,
	|	ЗаказКлиента.ЦенаВключаетНДС,
	|	ЗаказКлиента.НомерПоДаннымКлиента,
	|	ЗаказКлиента.ДатаПоДаннымКлиента,
	|	ЗаказКлиента.БанковскийСчет,	
	|	ЗаказКлиента.БанковскийСчетКонтрагента,	
	|	ЗаказКлиента.ДополнительнаяИнформация,		
	|	ВЫБОР ЗаказКлиента.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента) ТОГДА
	|			ЗаказКлиента.АдресДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки) ТОГДА
	|			ЗаказКлиента.АдресДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
	|			ЗаказКлиента.АдресДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу) ТОГДА
	|			ЗаказКлиента.АдресДоставкиПеревозчика
	|	КОНЕЦ	КАК АдресДоставки,
	|	ВЫБОР ЗаказКлиента.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|			ТОГДА ЗаказКлиента.АдресДоставкиЗначенияПолей
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки)
	|			ТОГДА ЗаказКлиента.АдресДоставкиЗначенияПолей
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ТОГДА ЗаказКлиента.АдресДоставкиЗначенияПолей
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу) ТОГДА
	|			ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	ВЫБОР ЗаказКлиента.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента) ТОГДА
	|			""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
	|			""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу) ТОГДА
	|			""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки) ТОГДА
	|			""Доставка""
	|	КОНЕЦ	КАК СпособДоставки,
	|	ЗаказКлиента.ИдентификаторПлатежа,
	|	ЗаказКлиента.ДокументОснование,
	|	ЗаказКлиента.Договор.Номер КАК ДоговорНомер,
	|	ЗаказКлиента.Договор.Дата КАК ДоговорДата
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	%1 КАК Артикул,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.НаименованиеПолное = """"
	|			ТОГДА Товары.Номенклатура.Наименование
	|		ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.Упаковка КАК Упаковка,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Сумма,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ""НДС исчисляется налоговым агентом""
	|		ИНАЧЕ Товары.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Цена,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА 0
	|		ИНАЧЕ Товары.СуммаСНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	Товары.ПроцентРучнойСкидки + Товары.ПроцентАвтоматическойСкидки КАК ПроцентСкидки,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.Содержание КАК Описание,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,	
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВидОплаты,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И ЭтапыГрафикаОплаты.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыГрафикаОплаты.НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
		
	ИмяДопКолонки = "";
	ИмяДополнительнойКолонки(ИмяДопКолонки);
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстЗапроса, 
						?(ЗначениеЗаполнено(ИмяДопКолонки), "Товары.Номенклатура." + ИмяДопКолонки, """"""));
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаДляСопоставления = НоменклатураПартнеровСервер.ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект);
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = МассивРезультатовЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.БанковскийСчет, РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр", РеквизитыШапки.Дата);
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчет) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчет);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Продавец.БанковскийСчет.НомерСчета", 
			БанковскийСчет.НомерСчета);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Продавец.БанковскийСчет.НаимБанк", 
			БанковскийСчет.Банк.Наименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Продавец.БанковскийСчет.БИК", 
			БанковскийСчет.Банк.Код);
			
		ДобавитьВДеревоДанныеСчета(ДеревоДокумента, БанковскийСчет);
	КонецЕсли;
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.БанковскийСчетКонтрагента, РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр", РеквизитыШапки.Дата);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель) Тогда
		СведенияОГрузополучателе  = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель, РеквизитыШапки.БанковскийСчетГрузополучателя, РеквизитыШапки.Дата);
		ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОГрузополучателе, "Получатель", "Юр", РеквизитыШапки.Дата);
	Иначе
		ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Получатель", "Юр", РеквизитыШапки.Дата);		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата, РеквизитыШапки.ВалютаРегламентированногоУчета).КурсЧислитель);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Комментарий", 
			РеквизитыШапки.ДополнительнаяИнформация);
	
	ТаблицаТоваров = МассивРезультатовЗапроса[1].Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	НоменклатураПартнеровСервер.ШтрихкодыПоТоварам(ТаблицаТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);			
	
	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);
		
		//Сопоставление
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		Если СтрокаТовары.Характеристика <> Неопределено Тогда
			ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		Иначе
			ПараметрыОтбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());				
		КонецЕсли;
		ПараметрыОтбора.Вставить("Упаковка", СтрокаТовары.Упаковка);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			СтрокаТовары.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			СтрокаТовары.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
		КонецЕсли;		
	КонецЦикла;	
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаИтог", 
			ТаблицаТоваров.Итог("Сумма"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаНалогаИтог", 
			ТаблицаТоваров.Итог("СуммаНДС"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.ЦенаВключаетНДС", 
			РеквизитыШапки.ЦенаВключаетНДС);
			
	// заполнение полей дерева данных Доставка
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.СпособДоставки",	РеквизитыШапки.СпособДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставки", РеквизитыШапки.АдресДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставкиЗначенияПолей",
		РеквизитыШапки.АдресДоставкиЗначенияПолей);
	
	// Номер и дата договора.
	Если ЗначениеЗаполнено(РеквизитыШапки.ДоговорНомер) И ЗначениеЗаполнено(РеквизитыШапки.ДоговорДата) Тогда
		РеквизитыДоговора = Новый ТаблицаЗначений;
		РеквизитыДоговора.Колонки.Добавить("Идентификатор");
		РеквизитыДоговора.Колонки.Добавить("Наименование");
		РеквизитыДоговора.Колонки.Добавить("Номер");
		РеквизитыДоговора.Колонки.Добавить("Дата");
		
		СтрокаРеквизитыДоговора = РеквизитыДоговора.Добавить();
		СтрокаРеквизитыДоговора.Идентификатор = НСтр("ru = 'Договор'");
		СтрокаРеквизитыДоговора.Наименование = НСтр("ru = 'Договор'");
		СтрокаРеквизитыДоговора.Номер = РеквизитыШапки.ДоговорНомер;
		СтрокаРеквизитыДоговора.Дата = РеквизитыШапки.ДоговорДата;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, РеквизитыДоговора, "ДокументыСделки");
	КонецЕсли;
	
	// Документ основание.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
	
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаЭтаповГрафикаОплаты, "ГрафикОплаты");
	
	ЗаполнитьУИП(ДеревоДокумента, РеквизитыШапки.ИдентификаторПлатежа);

КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара.
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОтчетКомитенту.Дата,
	|	ОтчетКомитенту.Валюта,
	|	ОтчетКомитенту.Валюта.Код КАК ВалютаКод,	
	|	ОтчетКомитенту.СуммаДокумента,
	|	ОтчетКомитенту.ЦенаВключаетНДС,
	|	ОтчетКомитенту.СуммаВознаграждения,
	|	ОтчетКомитенту.НалогообложениеНДС,
	|	ОтчетКомитенту.НачалоПериода,
	|	ОтчетКомитенту.КонецПериода,
	|	ОтчетКомитенту.ФормаОплаты,
	|	ОтчетКомитенту.СпособРасчетаВознаграждения,
	|	ОтчетКомитенту.ПроцентВознаграждения,
	|	ОтчетКомитенту.ДатаПлатежа,
	|	ОтчетКомитенту.ИдентификаторПлатежа,
	|	ОтчетКомитенту.СтавкаНДСВознаграждения,
	|	ОтчетКомитенту.СуммаНДСВознаграждения,
	|	ОтчетКомитенту.Контрагент,
	|	ОтчетКомитенту.Организация,
	|	ОтчетКомитенту.Организация КАК Организация1,
	|	ОтчетКомитенту.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ОтчетКомитенту.Контрагент КАК Контрагент1
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.НаименованиеПолное = """"
	|			ТОГДА Товары.Номенклатура.Наименование
	|		ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,	
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СуммаПродажи КАК СуммаПродажи,
	|	Товары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.ДатаСчетаФактуры КАК ДатаПродажи,
	|	Товары.Покупатель КАК Контрагент,
	|	Товары.ЦенаПродажи КАК ЦенаПродажи,
	|	Товары.Цена
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитентуЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ОтчетКомитентуЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ОтчетКомитентуЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ОтчетКомитенту.ЭтапыГрафикаОплаты КАК ОтчетКомитентуЭтапыГрафикаОплаты
	|ГДЕ
	|	ОтчетКомитентуЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитенту.Услуга.Код КАК ИД,
	|	ОтчетКомитенту.Услуга.Артикул КАК Артикул,
	|	ОтчетКомитенту.Услуга.Наименование КАК Наименование,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения КАК БазоваяЕдиница,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаДляСопоставления = НоменклатураПартнеровСервер.ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект);
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаФормирования", 
			ТекущаяДатаСеанса());
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата, РеквизитыШапки.ВалютаРегламентированногоУчета).КурсЧислитель);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НачалоПериода", 
			РеквизитыШапки.НачалоПериода);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"КонецПериода", 
			РеквизитыШапки.КонецПериода);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ФормаОплаты", 
			Строка(РеквизитыШапки.ФормаОплаты));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"СпособРасчета", 
			Строка(РеквизитыШапки.СпособРасчетаВознаграждения));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаОплаты", 
			РеквизитыШапки.ДатаПлатежа);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
			
	СведенияОКомитенте = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, , РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомитенте, "Комитент", "Юр", РеквизитыШапки.Дата);
	
	СведенияОКомиссионере = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, , РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомиссионере, "Комиссионер", "Юр", РеквизитыШапки.Дата);
	
	ТаблицаТоваров = РезультатЗапроса[1].Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТаблицаТоваров.Колонки.Добавить("СведенияОПрослеживаемости");
	
	// Получение данных для заполнения прослеживаемости
	ЗаполнятьПрослеживаемость = Ложь;
	ТаблицаСДаннымиПрослеживаемости = ПолучитьДанныеПоПрослеживаемостиДляКомиссии(СсылкаНаОбъект, ТипЗнч(СсылкаНаОбъект));
	Если ТаблицаСДаннымиПрослеживаемости.Количество() Тогда
	   	ЗаполнятьПрослеживаемость = Истина;
	КонецЕсли;
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	НоменклатураПартнеровСервер.ШтрихкодыПоТоварам(ТаблицаТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);
		
		//Сопоставление
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		Если СтрокаТовары.Характеристика <> Неопределено Тогда
			ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		Иначе
			ПараметрыОтбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());				
		КонецЕсли;
		ПараметрыОтбора.Вставить("Упаковка", СтрокаТовары.Упаковка);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			СтрокаТовары.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			СтрокаТовары.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
		КонецЕсли;
		
		// Заполнение прослеживаемости
		Если ЗаполнятьПрослеживаемость Тогда
			СтрокаДанныхПрослеживаемости = ТаблицаСДаннымиПрослеживаемости.Найти(СтрокаТовары.НомерСтроки, "НомерСтроки");
			Если ЗначениеЗаполнено(СтрокаДанныхПрослеживаемости) Тогда
				СведенияОПрослеживаемости = Новый ТаблицаЗначений;
				СведенияОПрослеживаемости.Колонки.Добавить("НомерТовара");
				СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияКод");
				СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
				СведенияОПрослеживаемости.Колонки.Добавить("Количество");
				СведенияОПрослеживаемости.Колонки.Добавить("КоличествоУчетное");
				СтрПрослеживаемости = СведенияОПрослеживаемости.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрПрослеживаемости, СтрокаДанныхПрослеживаемости);
				СтрПрослеживаемости.НомерТовара = СокрЛП(Строка(СтрПрослеживаемости.НомерТовара));
				СтрПрослеживаемости.ЕдиницаИзмеренияКод = СокрЛП(СтрПрослеживаемости.ЕдиницаИзмеренияКод);
				СтрПрослеживаемости.ЕдиницаИзмеренияНаименование = СокрЛП(СтрПрослеживаемости.ЕдиницаИзмеренияНаименование);
				СтрПрослеживаемости.КоличествоУчетное = СтрокаДанныхПрослеживаемости.КоличествоУпаковок;
			
				СтрокаТовары.СведенияОПрослеживаемости = СведенияОПрослеживаемости;
				
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТовары.СведенияОПрослеживаемости, "НомерТовара",,,
					НСтр("ru = 'Не заполнен номер ГТД'"));			
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТовары.СведенияОПрослеживаемости, "ЕдиницаИзмеренияКод",,,
					НСтр("ru = 'Не заполнена единица измерения ТН ВЭД'"));			
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТовары.СведенияОПрослеживаемости, "ЕдиницаИзмеренияНаименование",,,
					НСтр("ru = 'Не заполнена единица измерения ТН ВЭД'"));			
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТовары.СведенияОПрослеживаемости, "Количество",,,
					НСтр("ru = 'Не заполнено количество в единицах прослеживаемости'"));				
			КонецЕсли;
		КонецЕсли;
		// Конец заполнения прослеживаемости
		
	КонецЦикла;	
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	СтрокаТаблицаТоваров = ДеревоДокумента.Строки.Найти("Товары", "ПолныйПуть");

	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		Покупатель = ТаблицаТоваров[Число(Товар.Значение) - 1].Контрагент;
		
		Если ЗначениеЗаполнено(Покупатель) Тогда
			СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(Покупатель, , РеквизитыШапки.Дата);
			ЗаполнитьДанныеУчастника(Товар, СведенияОПокупателе, "Товары.НомерСтроки.Покупатель", "Юр", РеквизитыШапки.Дата);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЭтаповГрафикаОплаты = РезультатЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаЭтаповГрафикаОплаты, "ГрафикОплаты");
	
	// Информация по услуге вознаграждения
	
	Услуга = РезультатЗапроса[3].Выбрать();
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.Артикул", 
			Услуга.Артикул);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.Наименование", 
			Услуга.Наименование);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.БазоваяЕдиницаКод", 
			Услуга.БазоваяЕдиницаКод);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.БазоваяЕдиницаНаименование", 
			Услуга.БазоваяЕдиницаНаименование);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.БазоваяЕдиницаНаименованиеПолное", 
			Услуга.БазоваяЕдиницаНаименованиеПолное);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.БазоваяЕдиницаМеждународноеСокращение", 
			Услуга.БазоваяЕдиницаМеждународноеСокращение);
	
	// Итоги документа
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаДокумента", 
			ТаблицаТоваров.Итог("СуммаПродажи"));
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.ЦенаВключаетНДС", 
			РеквизитыШапки.ЦенаВключаетНДС);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СтавкаНДСВознаграждения", 
			?(РеквизитыШапки.СтавкаНДСВознаграждения = Справочники.СтавкиНДС.ПустаяСсылка(), 
													Справочники.СтавкиНДС.БезНДС, РеквизитыШапки.СтавкаНДСВознаграждения));
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаНДСВознаграждения", 
			РеквизитыШапки.СуммаНДСВознаграждения);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаВознаграждения", 
			ТаблицаТоваров.Итог("СуммаВознаграждения"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.Процент", 
			РеквизитыШапки.ПроцентВознаграждения);
	 
	Если РеквизитыШапки.СуммаДокумента < 0 Тогда
		ТекстИтоговаяСтрока = Нстр("ru = 'Всего возвращено наименований'");
	Иначе
		ТекстИтоговаяСтрока = Нстр("ru = 'Всего продано наименований'");
	КонецЕсли;
	
	ИтоговаяСтрока = ТекстИтоговаяСтрока
		+ " "
		+ ТаблицаТоваров.Количество()
		+ Нстр("ru = ', на сумму'")
		+ " "
		+ ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
		
	Если РеквизитыШапки.СуммаВознаграждения <> 0 Тогда
		СуммаВознаграждения = Нстр("ru = 'Сумма комиссионного вознаграждения составила'")
			+ " "
			+ ?(РеквизитыШапки.СуммаВознаграждения < 0, Нстр("ru = 'минус'") + " ", "")
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаВознаграждения, РеквизитыШапки.Валюта);
	КонецЕсли;
	
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью + Символы.ПС + СуммаВознаграждения;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогиПрописью", 
			ИтоговаяСтрока);
			
	ЗаполнитьУИП(ДеревоДокумента, РеквизитыШапки.ИдентификаторПлатежа);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара.
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОтчетКомитентуОСписании.Валюта,
	|	ОтчетКомитентуОСписании.Валюта.Код КАК ВалютаКод,	
	|	ОтчетКомитентуОСписании.Дата,
	|	ОтчетКомитентуОСписании.СуммаДокумента,
	|	ОтчетКомитентуОСписании.НачалоПериода,
	|	ОтчетКомитентуОСписании.КонецПериода,
	|	ОтчетКомитентуОСписании.Организация,
	|	ОтчетКомитентуОСписании.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ОтчетКомитентуОСписании.Контрагент
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|ГДЕ
	|	ОтчетКомитентуОСписании.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.НаименованиеПолное = """"
	|			ТОГДА Товары.Номенклатура.Наименование
	|		ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СуммаСНДС КАК Сумма,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,	
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Цена
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаДляСопоставления = НоменклатураПартнеровСервер.ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект);
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаФормирования", 
			ТекущаяДатаСеанса());
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата, РеквизитыШапки.ВалютаРегламентированногоУчета).КурсЧислитель);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НачалоПериода", 
			РеквизитыШапки.НачалоПериода);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"КонецПериода", 
			РеквизитыШапки.КонецПериода);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
			
	СведенияОКомитенте = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, , РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомитенте, "Комитент", "Юр", РеквизитыШапки.Дата);
	
	СведенияОКомиссионере = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, , РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомиссионере, "Комиссионер", "Юр", РеквизитыШапки.Дата);

	ТаблицаТоваров = РезультатЗапроса[1].Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТаблицаТоваров.Колонки.Добавить("СведенияОПрослеживаемости");
	
	// Получение данных для заполнения прослеживаемости
	ЗаполнятьПрослеживаемость = Ложь;
	ТаблицаСДаннымиПрослеживаемости = ПолучитьДанныеПоПрослеживаемостиДляКомиссии(СсылкаНаОбъект, ТипЗнч(СсылкаНаОбъект));
	Если ТаблицаСДаннымиПрослеживаемости.Количество() Тогда
	   	ЗаполнятьПрослеживаемость = Истина;
	КонецЕсли;
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	НоменклатураПартнеровСервер.ШтрихкодыПоТоварам(ТаблицаТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);
		
		//Сопоставление
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		Если СтрокаТовары.Характеристика <> Неопределено Тогда
			ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		Иначе
			ПараметрыОтбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());				
		КонецЕсли;
		ПараметрыОтбора.Вставить("Упаковка", СтрокаТовары.Упаковка);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			СтрокаТовары.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			СтрокаТовары.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
		КонецЕсли;		
		
		// Заполнение прослеживаемости
		Если ЗаполнятьПрослеживаемость Тогда
			СтрокаДанныхПрослеживаемости = ТаблицаСДаннымиПрослеживаемости.Найти(СтрокаТовары.НомерСтроки, "НомерСтроки");
			Если ЗначениеЗаполнено(СтрокаДанныхПрослеживаемости) Тогда
				СведенияОПрослеживаемости = Новый ТаблицаЗначений;
				СведенияОПрослеживаемости.Колонки.Добавить("НомерТовара");
				СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияКод");
				СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
				СведенияОПрослеживаемости.Колонки.Добавить("Количество");
				СведенияОПрослеживаемости.Колонки.Добавить("КоличествоУчетное");
				СтрПрослеживаемости = СведенияОПрослеживаемости.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрПрослеживаемости, СтрокаДанныхПрослеживаемости);
				СтрПрослеживаемости.НомерТовара = СокрЛП(Строка(СтрПрослеживаемости.НомерТовара));
				СтрПрослеживаемости.ЕдиницаИзмеренияКод = СокрЛП(СтрПрослеживаемости.ЕдиницаИзмеренияКод);
				СтрПрослеживаемости.ЕдиницаИзмеренияНаименование = СокрЛП(СтрПрослеживаемости.ЕдиницаИзмеренияНаименование);
				СтрПрослеживаемости.КоличествоУчетное = СтрокаДанныхПрослеживаемости.КоличествоУпаковок;
			
				СтрокаТовары.СведенияОПрослеживаемости = СведенияОПрослеживаемости;
				
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТовары.СведенияОПрослеживаемости, "НомерТовара",,,
					НСтр("ru = 'Не заполнен номер ГТД'"));			
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТовары.СведенияОПрослеживаемости, "ЕдиницаИзмеренияКод",,,
					НСтр("ru = 'Не заполнена единица измерения ТН ВЭД'"));			
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТовары.СведенияОПрослеживаемости, "ЕдиницаИзмеренияНаименование",,,
					НСтр("ru = 'Не заполнена единица измерения ТН ВЭД'"));			
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТовары.СведенияОПрослеживаемости, "Количество",,,
					НСтр("ru = 'Не заполнено количество в единицах прослеживаемости'"));				
			КонецЕсли;
		КонецЕсли;
		// Конец заполнения прослеживаемости 		
		
	КонецЦикла;	
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ИтоговаяСтрока = НСтр("ru = 'Всего списано наименований'")
		+ " "
		+ ТаблицаТоваров.Количество()
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, НСтр("ru = ', на сумму'") + " ", "")
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта), "");
	СуммаПрописью = РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогиПрописью", 
			ИтоговаяСтрока);
			
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД.
Процедура СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки, ДополнительныеДанные, НайденныйОбъект) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	Если ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		СсылкаНаВладельца 	= ПараметрыОбработки.СсылкаНаВладельца;
		Записывать 			= ПараметрыОбработки.Записывать;
		СпособОбработки 	= ПараметрыОбработки.СпособОбработки;
	КонецЕсли;
	
	Если СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.ПрайсЛист Тогда		
		НайденныйОбъект = НайтиСоздатьРегистрацияЦен(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.ЗаказТовара Тогда		
		НайденныйОбъект = НайтиСоздатьЗаказКлиента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.ОтветНаЗаказ Тогда
		НайденныйОбъект = НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.СчетНаОплату Тогда
		НайденныйОбъект = НайтиСоздатьЗаявкуНаРасходованиеДенежныхСредств(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.ТоварнаяНакладная
		И СпособОбработки = "ВозвратТоваровОтКлиента" Тогда
		НайденныйОбъект = НайтиСоздатьВозвратТоваровОтПокупателя(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.ТоварнаяНакладная
		ИЛИ СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.АктНаПередачуПрав Тогда
		ВидОперацииЭД = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
		Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
			НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		Иначе
			НайденныйОбъект = НайтиСоздатьПриобретениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		КонецЕсли;
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.СчетФактура
		ИЛИ СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.КорректировочныйСчетФактура Тогда
		ВидСчетаФактуры = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидСчетаФактуры");
		Комиссионер = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Комиссионер");
		Если ВидСчетаФактуры = "Авансовый" Тогда
			НайденныйОбъект = НайтиСоздатьСчетФактуруАванс(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		ИначеЕсли ЗначениеЗаполнено(Комиссионер) Тогда
			НайденныйОбъект = НайтиСоздатьСчетФактуруКомитента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		Иначе
			НайденныйОбъект = НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		КонецЕсли;
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара Тогда
		НайденныйОбъект = НайтиСоздатьОтчетКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.ОтчетОСписанииКомиссионногоТовара Тогда
		НайденныйОбъект = НайтиСоздатьОтчетКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.РеквизитыОрганизации Тогда
		
		НайденныйОбъект = СоздатьНовогоКонтрагента(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки.СсылкаНаВладельца)		
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.АктВыполненныхРабот 
		И СпособОбработки = "ПриобретениеТоваровУслуг" Тогда
		НайденныйОбъект = НайтиСоздатьПриобретениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);			
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.АктВыполненныхРабот Тогда
		ВидОперацииЭД = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
		
		Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
			НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		Иначе
			НайденныйОбъект = НайтиСоздатьПоступлениеУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		КонецЕсли;
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СоздатьОбъектВБД.
Процедура СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора, НовыйЭлемент) Экспорт
	
	НовыйЭлемент = Неопределено;
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураКонтрагентов" Тогда
		НовыйЭлемент = СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора);
	ИначеЕсли СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.БанковскиеСчетаКонтрагентов" Тогда
		НовыйЭлемент = СоздатьРасчетныйСчет(СтрокаОбъекта,"БанковскийСчетКонтрагента", ДеревоРазбора);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов.
Процедура ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов(Таблица) Экспорт
	
	// БанковскиеСчетаКонтрагентов
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта 	= "БанковскиеСчетаКонтрагентов";
	НовСтрока.Порядок 		= 1;
	// Номенклатура партнера
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта 	= "НоменклатураКонтрагентов";
	НовСтрока.Порядок 		= 2;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями.
Процедура ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, ДеревоЭД, Отказ) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.УпаковкаКод,
	|	ВложенныйЗапрос.УпаковкаНаименование,
	|	ВложенныйЗапрос.Коэффициент,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Артикул,
	|	ВложенныйЗапрос.СуммаСНДС,
	|	ВложенныйЗапрос.Номенклатура.Наименование КАК Наименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Ид КАК Ид
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|		&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|		КОНЕЦ КАК Коэффициент,
	|		ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|		ТаблицаТовары.Цена КАК Цена,
	|		ТаблицаТовары.КоличествоУпаковок КАК Количество,
	|		ТаблицаТовары.КоличествоУпаковок КАК КоличествоМест,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
	|		ТаблицаТовары.СуммаСНДС КАК СуммаСНДС,
	|		ТаблицаТовары.Упаковка КАК Упаковка,
	|		ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И ТаблицаТовары.Ссылка.Проведен) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Контрагент,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки КАК АдресДоставки,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПередачаНаКомиссию,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель,
	|	ДанныеДокумента.Контрагент,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ИдентификаторПлатежа,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие),
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ИдентификаторПлатежа,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ДанныеДокумента.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	ОбработатьТаблицуТоваров(ТаблицаТоваров);

	РеквизитыШапки = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(
		ТаблицаТоваров, "Наименование",,, НСтр("ru = 'Не указано наименование товара в табличной части'"));
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(
		ТаблицаТоваров, "БазоваяЕдиницаКод",,, НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
		
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ТаблицаТоваров, "Товары");
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Сумма",               РеквизитыШапки.СуммаДокумента);	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "ЦенаВключаетНДС",     РеквизитыШапки.ЦенаВключаетНДС);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Организация",         РеквизитыШапки.Организация);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Контрагент",          РеквизитыШапки.Контрагент);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Грузоотправитель",    ?(ЗначениеЗаполнено(РеквизитыШапки.Грузоотправитель), 
														  										 РеквизитыШапки.Грузоотправитель, РеквизитыШапки.Организация));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Грузополучатель",     ?(ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель),
														  										 РеквизитыШапки.Грузополучатель, РеквизитыШапки.Контрагент));
	                                                      

КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями.
Процедура ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, ДеревоЭД, Отказ) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.УпаковкаКод,
	|	ВложенныйЗапрос.УпаковкаНаименование,
	|	ВложенныйЗапрос.Коэффициент,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Артикул,
	|	ВложенныйЗапрос.СуммаСНДС,
	|	ВложенныйЗапрос.Номенклатура.Наименование КАК Наименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ВложенныйЗапрос.Ид КАК Ид,
	|	ВложенныйЗапрос.Упаковка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|		&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|		&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|		КОНЕЦ КАК Коэффициент,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.КоличествоУпаковок = 0
	|				ТОГДА ТаблицаТовары.Цена
	|			ИНАЧЕ ТаблицаТовары.Сумма / ТаблицаТовары.КоличествоУпаковок
	|		КОНЕЦ КАК Цена,
	|		ТаблицаТовары.КоличествоУпаковок КАК Количество,
	|		ТаблицаТовары.КоличествоУпаковок КАК КоличествоМест,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
	|		ТаблицаТовары.СуммаСНДС КАК СуммаСНДС,
	|		ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|		ТаблицаТовары.Упаковка КАК Упаковка
	|	ИЗ
	|		Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И ТаблицаТовары.Ссылка.Проведен) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Контрагент,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки КАК АдресДоставки,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПередачаНаКомиссию,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель,
	|	ДанныеДокумента.Контрагент,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	РеквизитыШапки = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(
		ТаблицаТоваров, "Наименование",,, НСтр("ru = 'Не указано наименование товара в табличной части'"));
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(
		ТаблицаТоваров, "БазоваяЕдиницаКод",,, НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
		
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ТаблицаТоваров, "Товары");
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Сумма",               РеквизитыШапки.СуммаДокумента);	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "ЦенаВключаетНДС",     РеквизитыШапки.ЦенаВключаетНДС);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Организация",         РеквизитыШапки.Организация);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Контрагент",          РеквизитыШапки.Контрагент);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Грузоотправитель",    ?(ЗначениеЗаполнено(РеквизитыШапки.Грузоотправитель), 
														  										 РеквизитыШапки.Грузоотправитель, РеквизитыШапки.Организация));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Грузополучатель",     ?(ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель),
														  										 РеквизитыШапки.Грузополучатель, РеквизитыШапки.Контрагент));

КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СпособыОтраженияВУчетеТипаЭлектронногоДокумента.
Процедура СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СписокСпособовОбработки) Экспорт 
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	Если ТипДокумента = ТипыДокументов.АктВыполненныхРабот Тогда
		СписокСпособовОбработки.Добавить("ПриобретениеУслугПрочихАктивов", НСтр("ru = 'Приобретение услуг и прочих активов'"), Истина);
		СписокСпособовОбработки.Добавить("ПриобретениеТоваровУслуг", НСтр("ru = 'Приобретение товаров и услуг'"));
	ИначеЕсли ТипДокумента = ТипыДокументов.ТоварнаяНакладная Тогда
		СписокСпособовОбработки.Добавить("ПриобретениеТоваровУслуг", НСтр("ru = 'Приобретение товаров и услуг'"), Истина);
		СписокСпособовОбработки.Добавить("ПриобретениеУслугПрочихАктивов", НСтр("ru = 'Приобретение услуг и прочих активов'"));		
		СписокСпособовОбработки.Добавить("ВозвратТоваровОтКлиента", НСтр("ru = 'Возврат товаров от клиента'"));
		СписокСпособовОбработки.Добавить("КорректировкаПриобретения", НСтр("ru = 'Корректировка приобретения'"));
	ИначеЕсли ТипДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		СписокСпособовОбработки.Добавить("КорректировкаПриобретения", НСтр("ru = 'Корректировка приобретения'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.АктНаПередачуПрав Тогда
		СписокСпособовОбработки.Добавить("ПриобретениеТоваровУслуг", НСтр("ru = 'Акт на передачу прав'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.ПрайсЛист Тогда
		СписокСпособовОбработки.Добавить("РегистрацияЦенНоменклатурыПоставщика", НСтр("ru = 'Регистрация цен номенклатуры поставщика'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтветНаЗаказ Тогда
		СписокСпособовОбработки.Добавить("ЗаказПоставщику", НСтр("ru = 'Заказ поставщику'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.ПередачаТоваровМеждуОрганизациями Тогда	
		СписокСпособовОбработки.Добавить("ПередачаТоваровМеждуОрганизациями", НСтр("ru = 'Передача товаров между организациями'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.ЗаказТовара Тогда
		СписокСпособовОбработки.Добавить("ЗаказКлиента", НСтр("ru = 'Заказ клиента'"),Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.КорректировочныйСчетФактура Тогда
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура полученный'"),Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.СчетФактура Тогда
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура полученный'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.СчетНаОплату Тогда
		СписокСпособовОбработки.Добавить("ЗаявкаНаРасходованиеДенежныхСредств", НСтр("ru = 'Заявка на расходование денежных средств'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара Тогда
		СписокСпособовОбработки.Добавить("ОтчетКомиссионера", НСтр("ru = 'Отчет комиссионера (агента) о продажах'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтчетОСписанииКомиссионногоТовара Тогда
		СписокСпособовОбработки.Добавить("ОтчетКомиссионераОСписании", НСтр("ru = 'Отчет комиссионера о списании'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.АктОРасхождениях Тогда
		СписокСпособовОбработки.Добавить("АктОРасхожденияхПослеОтгрузки", НСтр("ru = 'Акт о расхождениях после реализации'"), Истина);
	ИначеЕсли ТипДокумента = ТипыДокументов.КаталогТоваров Тогда
		СписокСпособовОбработки.Добавить("НоменклатураПоставщиков", НСтр("ru = 'Номенклатура поставщиков'"), Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Заполняет соответствующий тип адреса переданными данными.
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева, содержащая данные участника
//  АдресУчастника - Структура - содержит данные адреса участника обмена. Имена полей структуры должны совпадать с
//    именами полей структуры выбранного типа адреса:
//    Структурированный - "Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
//    Произвольный/Иностранный - "КодСтраны, АдресСтрокой" (вынесены в разные элементы списка для того,
//      чтобы правильно заполнить ЭД).
//  ТипАдреса - Строка - один из 3-х вариантов: Структурированный, Произвольный, Иностранный.
//  ВидУчастника - Строка - вид участника как он представлен в дереве данных.
//  КорневойЭлементДерева - Строка - необходимо использовать в случае, если в таблице надо заполнить
//    сложный тип данных (группа, выбор). Например: "Товары.НомерСтроки.Покупатель", Покупатель -
//    является сложным типом данных, тогда КорневойЭлементДерева = "Товары.НомерСтроки".
//
Процедура ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника)
	
	АдресУчастника.Удалить("ПроизвольныйАдрес");		
	
	Если ТипАдреса = "Произвольный" Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Произвольный",
									АдресУчастника.АдрТекст);
	ИначеЕсли ТипАдреса = "Структурированный" ИЛИ ТипАдреса = "Иностранный" Тогда
		Если АдресУчастника.АдресРФ Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("КодГАР");
		Иначе
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодГАР");
			
			ПолныйПуть = ВидУчастника + ".Адрес.Иностранный.КодСтраны";
			Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
				АдресУчастника.Удалить("КодСтр");
				АдресУчастника.Удалить("АдрТекст");				
			Иначе
				АдресУчастника.Удалить("КодСтраны");
				АдресУчастника.Удалить("АдресТекст");				
			КонецЕсли;			
		КонецЕсли;
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "АдресРФ" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодГАР");
			
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "АдресИнформация" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("КодГАР");
	
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "КодГАР" Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.КодГАР",
									Элемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СуммаПрописью.
Процедура СуммаПрописью(СуммаЧислом, КодВалюты, Результат) Экспорт
	
	Валюта = Неопределено;
	Если ЗначениеЗаполнено(КодВалюты) Тогда 
		ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Валюта, КодВалюты);
		СтрокаСумма = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаЧислом, Валюта);
	Иначе
		ПараметрыПрописи = Новый Структура("ПараметрыПрописиНаРусском", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
		СтрокаСумма = ЧислоПрописью(СуммаЧислом, ПараметрыПрописи);
	КонецЕсли;
	Результат = СтрокаСумма;
	
КонецПроцедуры

// Осуществляет разбор файла с реквизитами контрагента
// в ней можно внести изменения в структуру возвращаемых данных.
//
// Параметры:
//  СсылкаНаФайл - Строка - адрес хранилища файла с реквизитами контрагента;
//  СтруктураВозврата - Структура - перечень параметров;
//  РезультатРазбора - Булево - Истина - разбор файла выполнен; Ложь - разбор файла не выполнялся.
//  ОшибкаРазбора - Строка - текст, описание ошибки.
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора, ОшибкаРазбора = "") Экспорт
	
	// Переопределим структуру возврата
	СтруктураВозврата = Новый Структура();
	
	ОбъектXML = Новый ЧтениеXML;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(СсылкаНаФайл);
	ВремФайл = РаботаСФайламиБЭД.ТекущееИмяВременногоФайла("xml");
	ДвоичныеДанные.Записать(ВремФайл);
	
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	Исключение
		ОбъектXML.Закрыть();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + " (" + НСтр("ru = 'подробности см. в Журнале регистрации'") + ").";
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Разбор файла с реквизитами контрагента'"), ТекстОшибки, ТекстСообщения);
		
		РезультатРазбора = Ложь;
		Возврат;
		
	КонецПопытки;
	
	Попытка
		
		СвойствоЭД = ЭД.Свойства().Получить("Контакты");
		Если НЕ СвойствоЭД = Неопределено И НЕ ЭД.Контакты = Неопределено Тогда
			Для Каждого ТекКонтакт Из ЭД.Контакты.Контакт Цикл
				Если ТекКонтакт.Тип = "Телефон рабочий" Тогда
					СтруктураВозврата.Вставить("ТелефонПартнера", ТекКонтакт.Значение);
					СтруктураВозврата.Вставить("ТелефонКЛ",       ТекКонтакт.Значение);
					СтруктураВозврата.Вставить("ТелефонПартнераФизЛицо", ТекКонтакт.Значение);
				ИначеЕсли ТекКонтакт.Тип = "Почта" Тогда
					СтруктураВозврата.Вставить("АдресЭППартнера", ТекКонтакт.Значение);
					СтруктураВозврата.Вставить("АдресЭПКЛ",       ТекКонтакт.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СвойствоЭД = ЭД.Свойства().Получить("РасчетныеСчета");
		Если СвойствоЭД <> Неопределено Тогда
			
			ЗнДанных = ЭД.Получить(СвойствоЭД);
			Если ЗнДанных <> Неопределено Тогда
				Для Каждого ТекСв Из ЗнДанных.РасчетныйСчет Цикл
					
					СтруктураВозврата.Вставить("НомерСчета",         ТекСв.НомерСчета);
					СтруктураВозврата.Вставить("БИКБанка",           ТекСв.Банк.БИК);
					СтруктураВозврата.Вставить("КоррСчетБанка",      ТекСв.Банк.СчетКорреспондентский);
					СтруктураВозврата.Вставить("ПредставлениеБанка", ТекСв.Банк.Наименование);
					СтруктураВозврата.Вставить("УказатьБанковскийСчетКонтрагента", Истина);
					
					Если НЕ ТекСв.БанкКорреспондент = Неопределено Тогда
						СтруктураВозврата.Вставить("БИКБанкаДляРасчетов",           ТекСв.БанкКорреспондент.БИК);
						СтруктураВозврата.Вставить("КоррСчетБанкаДляРасчетов",      ТекСв.БанкКорреспондент.СчетКорреспондентский);
						СтруктураВозврата.Вставить("ПредставлениеБанкаДляРасчетов", ТекСв.БанкКорреспондент.Наименование);
						СтруктураВозврата.Вставить("ИспользуетсяБанкДляРасчетов",   Истина);
					КонецЕсли;
					Прервать;
				КонецЦикла
			КонецЕсли;
		КонецЕсли;
		
		СтруктураВозврата.Вставить("УказыватьЮридическиеРеквизиты", Истина);
		ДопустимыеТипы = "Страна, Регион, Район, Город, Улица, Дом, Корпус, Квартира";
		
		СвойствоЭД = ЭД.Свойства().Получить("ОфициальноеНаименование");
		Если СвойствоЭД <> Неопределено Тогда
			ЗнДанных = ЭД.Получить(СвойствоЭД);
			Если ЗнДанных <> Неопределено Тогда			
				ЭтоЮрЛицо = Истина
			Иначе
				ЭтоЮрЛицо = Ложь
			КонецЕсли;
	
			Если ЭтоЮрЛицо Тогда
				СтруктураВозврата.Вставить("ВидКомпании", 0);
				СвойствоИНН = ЭД.Свойства().Получить("ИНН");
				Если СвойствоИНН <> Неопределено Тогда
					СтруктураВозврата.Вставить("ИНН", ЭД.Получить(СвойствоИНН));
				КонецЕсли;
				СвойствоКПП = ЭД.Свойства().Получить("КПП");
				Если СвойствоКПП <> Неопределено Тогда
					СтруктураВозврата.Вставить("КПП", ЭД.Получить(СвойствоКПП));
				КонецЕсли;
				СвойствоОКПО = ЭД.Свойства().Получить("ОКПО");
				Если СвойствоОКПО <> Неопределено Тогда
					СтруктураВозврата.Вставить("КодПоОКПО", ЭД.Получить(СвойствоОКПО));
				КонецЕсли;
				СвойствоОФНаим = ЭД.Свойства().Получить("ОфициальноеНаименование");
				Если СвойствоОФНаим <> Неопределено Тогда
					СтруктураВозврата.Вставить("ПолноеНаименование", ЭД.Получить(СвойствоОфНаим));
					СтруктураВозврата.Вставить("ПолноеЮридическоеНаименование", ЭД.Получить(СвойствоОфНаим));
				КонецЕсли;
				
				СвойствоЮрАдрес = ЭД.Свойства().Получить("ЮридическийАдрес");
				Если СвойствоЮрАдрес <> Неопределено Тогда
					ЗнЮрАдрес = ЭД.Получить(СвойствоЮрАдрес);
					Если ЗнЮрАдрес <> Неопределено Тогда
						СтруктураВозврата.Вставить("ЮридическийАдрес", ЗнЮрАдрес.Представление);
						ЮридическийАдресЗначенияПолей = Новый СписокЗначений;
						Для Каждого ТекСв Из ЗнЮрАдрес.АдресноеПоле Цикл
							Если ТекСв.Тип = "Почтовый индекс" Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление =  "Индекс";
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление = "НаселенныйПункт";
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип) > 0 Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление = ТекСв.Тип;
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							КонецЕсли;
						КонецЦикла;
						
						СтруктураВозврата.Вставить("ЮридическийАдресЗначенияПолей", ЮридическийАдресЗначенияПолей);
					КонецЕсли
				КонецЕсли;
				
				СвойствоРуководитель = ЭД.Свойства().Получить("Руководитель");
				Если СвойствоРуководитель <> Неопределено Тогда
					ЗнРуководитель = ЭД.Получить(СвойствоРуководитель);
					Если ЗнРуководитель <> Неопределено Тогда
						СвойствоФизЛицо = ЗнРуководитель.Свойства().Получить("ФизЛицо");
						Если СвойствоФизЛицо <> Неопределено Тогда
							ФизЛицо = ЗнРуководитель.Получить(СвойствоФизЛицо);
							Если ФизЛицо <> Неопределено Тогда
								СтруктураВозврата.Вставить("УказатьДанныеКонтактногоЛица", Истина);
								ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФизЛицо.ПолноеНаименование);
								СтруктураВозврата.Вставить("ФамилияКЛ",  ФИО.Фамилия);
								СтруктураВозврата.Вставить("ИмяКЛ",      ФИО.Имя);
								СтруктураВозврата.Вставить("ОтчествоКЛ", ФИО.Отчество);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтруктураВозврата.Вставить("ВидКомпании", 2);
				
				СвойствоФамилия = ЭД.Свойства().Получить("Фамилия");
				Если СвойствоФамилия <> Неопределено Тогда
					СтруктураВозврата.Вставить("ФамилияПартнера", ЭД.Получить(СвойствоФамилия));
				КонецЕсли;
				
				СвойствоИмя = ЭД.Свойства().Получить("Имя");
				Если СвойствоИмя <> Неопределено Тогда
					СтруктураВозврата.Вставить("ИмяПартнера", ЭД.Получить(СвойствоИмя));
				КонецЕсли;
				
				СвойствоОтчество = ЭД.Свойства().Получить("Отчество");
				Если СвойствоОтчество <> Неопределено Тогда
					СтруктураВозврата.Вставить("ОтчествоПартнера", ЭД.Получить(СвойствоОтчество));
				КонецЕсли;
				
				СвойствоИНН = ЭД.Свойства().Получить("ИНН");
				Если СвойствоИНН <> Неопределено Тогда
					СтруктураВозврата.Вставить("ИНН", ЭД.Получить(СвойствоИНН));
				КонецЕсли;
				
				СвойствоОКПО = ЭД.Свойства().Получить("ОКПО");
				Если СвойствоОКПО <> Неопределено Тогда
					СтруктураВозврата.Вставить("КодПоОКПО", ЭД.Получить(СвойствоОКПО));
				КонецЕсли;
				
				СвойствоОФНаим = ЭД.Свойства().Получить("ПолноеНаименование");
				Если СвойствоОФНаим <> Неопределено Тогда
					СтруктураВозврата.Вставить("ПолноеНаименование", ЭД.Получить(СвойствоОфНаим));
					СтруктураВозврата.Вставить("ПолноеЮридическоеНаименование", ЭД.Получить(СвойствоОфНаим));
				КонецЕсли;
				
				СвойствоЮрАдрес = ЭД.Свойства().Получить("АдресРегистрации");
				Если СвойствоЮрАдрес <> Неопределено Тогда
					
					ЗнЮрАдрес = ЭД.Получить(СвойствоЮрАдрес);
					Если ЗнЮрАдрес <> Неопределено Тогда
						
						СтруктураВозврата.Вставить("ЮридическийАдрес", ЗнЮрАдрес.Представление);
						ЮридическийАдресЗначенияПолей = Новый СписокЗначений;
						Для Каждого ТекСв Из ЗнЮрАдрес.АдресноеПоле Цикл
							Если ТекСв.Тип = "Почтовый индекс" Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление = "Индекс";
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление = "НаселенныйПункт";
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип) > 0 Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление = ТекСв.Тип;
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							КонецЕсли;
						КонецЦикла;
						
						СтруктураВозврата.Вставить("ЮридическийАдресЗначенияПолей", ЮридическийАдресЗначенияПолей);
					КонецЕсли
				КонецЕсли;
			КонецЕсли;
		Иначе
			РезультатРазбора = Ложь;
			Возврат;
		КонецЕсли;
		
		СвойствоЭД = ЭД.Свойства().Получить("Наименование");
		Если СвойствоЭД <> Неопределено Тогда
			СтруктураВозврата.Вставить("Название", ЭД.Получить(СвойствоЭД));
		КонецЕсли;
		
		СвойствоЭД = ЭД.Свойства().Получить("Адрес");
		Если СвойствоЭД <> Неопределено Тогда
			ЗнДанных = ЭД.Получить(СвойствоЭД);
			Если ЗнДанных <> Неопределено Тогда
				
				СтруктураВозврата.Вставить("ФактическийАдрес", ЗнДанных.Представление);
				ФактическийАдресЗначенияПолей = Новый СписокЗначений;
				Для Каждого ТекСв Из ЗнДанных.АдресноеПоле Цикл
					Если ТекСв.Тип = "Почтовый индекс" Тогда
						ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
						ФактАдресЗначения.Представление = "Индекс";
						ФактАдресЗначения.Значение = ТекСв.Значение;
					ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
						ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
						ФактАдресЗначения.Представление = "НаселенныйПункт";
						ФактАдресЗначения.Значение = ТекСв.Значение;
					ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип) > 0 Тогда
						ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
						ФактАдресЗначения.Значение = ТекСв.Значение;
						ФактАдресЗначения.Представление = ТекСв.Тип;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураВозврата.Вставить("ФактическийАдресЗначенияПолей", ФактическийАдресЗначенияПолей);
			КонецЕсли;
		КонецЕсли;
	Исключение
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Разбор файла с реквизитами контрагента'"), ТекстОшибки, ТекстСообщения);
		
		РезультатРазбора = Ложь;
		Возврат;
		
	КонецПопытки;
	
	РезультатРазбора = Истина;	
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьСоответствиеПеречислений.
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("НДС", "СтавкиНДС");
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ЮрФизЛицо");
	СоответствиеПеречислений.Вставить("ВариантыОплатыКлиентом", "ВариантыКонтроляОплатыКлиентом");
	СоответствиеПеречислений.Вставить("ВариантыОплатыПоставщику", "ВариантыКонтроляОплатыПоставщику");
	СоответствиеПеречислений.Вставить("ФормыОплаты", "ФормыОплаты");
	СоответствиеПеречислений.Вставить("СпособРасчета", "СпособыРасчетаКомиссионногоВознаграждения");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьЗначениеПеречисления.
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	Если Метаданные.Перечисления.Найти(ИмяПеречисления) = Неопределено Тогда
		НайденноеЗначение = ПредставлениеПеречисления;
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если Найти(ВРег(ЭлПеречисления.Синоним), ВРег(ПредставлениеПеречисления)) > 0
			ИЛИ Найти(ВРег(ЭлПеречисления.Имя), ВРег(ПредставлениеПеречисления)) > 0 Тогда
			
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//Особенности ERP
	Если ИмяПеречисления = "ВариантыКонтроляОплатыПоставщику" Тогда
		Если ПредставлениеПеречисления = НСтр("ru = 'Предоплата (до поступления)'") Тогда
			НайденноеЗначение = Перечисления.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеСтавокНДС.
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	УчетНДСРФ.СоответствиеСтавокНДССтроковымЗначениям(Соответствие);	
	Соответствие.Вставить("НДС исчисляется налоговым агентом", "НДС исчисляется налоговым агентом");
	
КонецПроцедуры

Функция СтруктураИтоговыеСуммы(ТипЭД)
	
	Структура = Новый Структура;
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();			
	
	// Инициализация итогов по документу.
	Если ТипЭД = ТипыДокументов.АктНаПередачуПрав Тогда
		Структура.Вставить("Количество", 0);
		Структура.Вставить("СуммаНДС", 0);
		Структура.Вставить("СуммаБезНДС", 0);
		Структура.Вставить("СуммаСНДС", 0);
	Иначе
		Структура.Вставить("КоличествоМест", 0);
		Структура.Вставить("МассаНетто", 0);
		Структура.Вставить("МассаБрутто", 0);
		Структура.Вставить("СуммаБезНДС", 0);
		Структура.Вставить("СуммаНДС", 0);
		Структура.Вставить("СуммаСНДС", 0);
		
		Если ТипЭД = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
			Структура.Вставить("МассаНеттоДоКорректировки", 0);
			Структура.Вставить("СуммаБезНДСДоКорректировки", 0);
			Структура.Вставить("СуммаНДСДоКорректировки", 0);
			Структура.Вставить("СуммаСНДСДоКорректировки", 0);
		КонецЕсли;
		
		Структура.Вставить("КоличествоПорядковыхНомеровЗаписей", 0);
		Структура.Вставить("СуммаПрописью", "");
	КонецЕсли;	
		
	Возврат Структура;
	
КонецФункции

Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки, ТипЭД)

	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();			
	
	Если ТипЭД = ТипыДокументов.АктНаПередачуПрав Тогда
		ИтоговыеСуммы.Количество	 = ИтоговыеСуммы.Количество + ДанныеСтроки.Количество;
		ИтоговыеСуммы.СуммаНДС       = ИтоговыеСуммы.СуммаНДС + ДанныеСтроки.СуммаНДС;
		ИтоговыеСуммы.СуммаБезНДС    = ИтоговыеСуммы.СуммаБезНДС + ДанныеСтроки.Сумма;
		ИтоговыеСуммы.СуммаСНДС      = ИтоговыеСуммы.СуммаСНДС + ДанныеСтроки.Сумма + ДанныеСтроки.СуммаНДС;
	Иначе
		Если ЗначениеЗаполнено(ДанныеСтроки.КоличествоМест) Тогда
			КоличествоМест = ДанныеСтроки.КоличествоМест;
			Если КоличествоМест <> Цел(КоличествоМест) Тогда
				КоличествоМест = Цел(КоличествоМест) + 1;
			КонецЕсли;
		Иначе
			КоличествоМест = 0;
		КонецЕсли;
		
		ИтоговыеСуммы.КоличествоМест = ИтоговыеСуммы.КоличествоМест + КоличествоМест;
		ИтоговыеСуммы.СуммаБезНДС    = ИтоговыеСуммы.СуммаБезНДС + ДанныеСтроки.СуммаБезНДС;
		ИтоговыеСуммы.СуммаНДС       = ИтоговыеСуммы.СуммаНДС + ДанныеСтроки.СуммаНДС;
		ИтоговыеСуммы.СуммаСНДС      = ИтоговыеСуммы.СуммаСНДС + ДанныеСтроки.СуммаСНДС;
		ИтоговыеСуммы.МассаБрутто    = ИтоговыеСуммы.МассаБрутто + ДанныеСтроки.МассаБрутто;
		ИтоговыеСуммы.МассаНетто     = ИтоговыеСуммы.МассаНетто + ДанныеСтроки.МассаНетто;
		ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей = ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей + 1;
		
		Если ТипЭД = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
			ИтоговыеСуммы.МассаНеттоДоКорректировки  = ИтоговыеСуммы.МассаНеттоДоКорректировки + ДанныеСтроки.МассаНеттоДоКорректировки;
			ИтоговыеСуммы.СуммаБезНДСДоКорректировки = ИтоговыеСуммы.СуммаБезНДСДоКорректировки + ДанныеСтроки.СуммаБезНДСДоКорректировки;
			ИтоговыеСуммы.СуммаНДСДоКорректировки    = ИтоговыеСуммы.СуммаНДСДоКорректировки + ДанныеСтроки.СуммаНДСДоКорректировки;
			ИтоговыеСуммы.СуммаСНДСДоКорректировки   = ИтоговыеСуммы.СуммаСНДСДоКорректировки 
				+ ДанныеСтроки.СуммаБезНДСДоКорректировки 
				+ ДанныеСтроки.СуммаНДСДоКорректировки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиДокумент(ТипЭД, Контрагент, РеквизитыИБ = Неопределено, РеквизитыИБКонтрагента = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныйДок = Неопределено;
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();			
	Если ТипЭД = ТипыДокументов.ЗаказТовара Тогда
		Запрос = Новый Запрос;	
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДокументПоиска.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ЗаказКлиента КАК ДокументПоиска
		               |ГДЕ
		               |	ДокументПоиска.Контрагент = &Контрагент";
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0 Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе	
    				Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;	
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЭД = ТипыДокументов.ОтветНаЗаказ Тогда
		Запрос = Новый Запрос;	
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДокументПоиска.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ЗаказПоставщику КАК ДокументПоиска
		               |ГДЕ
		               |	ДокументПоиска.Контрагент = &Контрагент";
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0  Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено 
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЭД = ТипыДокументов.ТоварнаяНакладная Тогда	
		Запрос = Новый Запрос;	
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДокументПоиска.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг КАК ДокументПоиска
		               |ГДЕ
		               |	ДокументПоиска.Контрагент = &Контрагент";
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0  Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено 
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат НайденныйДок;
	
КонецФункции

Процедура НайтиТаможенныеДекларации(ТаможеннаяДекларация, НомерТаможеннойДекларации, СтранаПроисхождения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Выборка.Ссылка
	|ИЗ
	|	Справочник.НомераГТД КАК Выборка
	|ГДЕ
	|	Выборка.Код = &НомерТД
	|	И &ОтборПоСтране
	|	И НЕ Выборка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("НомерТД", НомерТаможеннойДекларации);
	Если СтранаПроисхождения <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСтране", "Выборка.СтранаПроисхождения = &СтранаПроисхождения");
		Запрос.УстановитьПараметр("СтранаПроисхождения", СтранаПроисхождения);		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСтране", "Истина");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТаможеннаяДекларация = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьПризнакРНПТвГТД(ТаможеннаяДекларация)
	
	Если Не ТаможеннаяДекларация.РНПТ Тогда
		ГТД = ТаможеннаяДекларация.ПолучитьОбъект();		
		ГТД.РНПТ = Истина;
		ГТД.Записать();		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьСтрокуТЧ(ТЗ, ДанныеЗаполнения, ДеревоРазбора, ЭтоЗаказ = Ложь)
	
	НовСтрока = ТЗ.Добавить();
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		
		Если ИмяРеквизитаВБД = "Описание" Тогда
			ИмяРеквизитаВБД = "Содержание";
		ИначеЕсли ИмяРеквизитаВБД = "СумНДС" Тогда
			ИмяРеквизитаВБД = "СуммаНДС";
		ИначеЕсли ИмяРеквизитаВБД = "СтТовУчНал" Тогда
			ИмяРеквизитаВБД = "Сумма";
		ИначеЕсли ИмяРеквизитаВБД = "НалСтВел" Тогда
			ИмяРеквизитаВБД = "СтавкаНДС";
		КонецЕсли;
		
		Если ИмяРеквизитаВБД = "СуммаСНДС" Тогда
			Если ЭтоЗаказ Тогда
				НовСтрока.Сумма = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ИмяРеквизитаВБД, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяРеквизитаВБД = "Сопоставление" Тогда
			Сопоставление = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			Если ТипЗнч(Сопоставление) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "Номенклатура")
				И Сопоставление.Свойство("НоменклатураИБ") Тогда
				Если ЗначениеЗаполнено(Сопоставление.НоменклатураИБ) Тогда
					НовСтрока.Номенклатура = Сопоставление.НоменклатураИБ;
				КонецЕсли;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "Характеристика")
				И Сопоставление.Свойство("ХарактеристикаИБ") Тогда
				Если ЗначениеЗаполнено(Сопоставление.ХарактеристикаИБ) Тогда
					НовСтрока.Характеристика = Сопоставление.ХарактеристикаИБ;
				КонецЕсли;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "ЕдиницаИзмерения")
				И Сопоставление.Свойство("УпаковкаИБ") Тогда
				Если ЗначениеЗаполнено(Сопоставление.УпаковкаИБ) Тогда
					НовСтрока.ЕдиницаИзмерения = Сопоставление.УпаковкаИБ;
				КонецЕсли;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "Упаковка")
				И Сопоставление.Свойство("УпаковкаИБ") Тогда
				Если ЗначениеЗаполнено(Сопоставление.УпаковкаИБ) Тогда
					НовСтрока.Упаковка = Сопоставление.УпаковкаИБ;
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
		
		// Заполнение характеристики номенклатуры и упаковки.
		Если ИмяРеквизитаВБД = "НоменклатураПартнера" Тогда
			Если КолонкаСуществует(ТЗ, "Характеристика") Тогда
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
					НовСтрока.Характеристика = НайденноеЗначение.Характеристика;	
				КонецЕсли;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "Упаковка") Тогда
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
					НовСтрока.Упаковка = НайденноеЗначение.Упаковка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не КолонкаСуществует(ТЗ, ИмяРеквизитаВБД) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		
		НовСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
		Если ТекСтрока.Реквизит = "Номенклатура" Тогда
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
			НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(СтрокаНоменклатура, "ЕдиницаИзмерения", Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
				НовСтрока.Упаковка = НайденноеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция КолонкаСуществует(Таблица, ИмяКолонки)
	
	Результат = Не (Таблица.Колонки.Найти(ИмяКолонки) = Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПриобретенияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("НомерПоДаннымПоставщика");
	ТЗ.Колонки.Добавить("ДатаПоДаннымПоставщика");
	ТЗ.Колонки.Добавить("НомерПоДаннымКлиента");
	ТЗ.Колонки.Добавить("ДатаПоДаннымКлиента");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
				КонецЕсли;
			Иначе // добавим строку ТЧ
				ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	// реквизиты для связки "заказ - поступление"
	ДанныеЗаполненияШапки.Вставить("НомерПоДаннымКлиента", 		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("ДатаПоДаннымКлиента",  		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("НомерПоДаннымПоставщика", 	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерПоДаннымПоставщика"));
	ДанныеЗаполненияШапки.Вставить("ДатаПоДаннымПоставщика",  	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаПоДаннымПоставщика"));
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из ТЗ Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;

	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактуры(СтрокаДляЗагрузки, ДеревоРазбора, Аванс = Ложь)
	
	ДанныеДляОбъекта = Новый Структура;
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаСоставления", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	НомерСчетаФактуры = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры");
	Если ЗначениеЗаполнено(НомерСчетаФактуры) Тогда
		ДанныеЗаполненияШапки.Вставить("Корректировочный", Истина);
		НомерИсправления = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправления");
		ДанныеЗаполненияШапки.Вставить("НомерИсправления", НомерИсправления);
		ДатаИсправления = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаИсправления");
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ДатаИсправления);
		Если ЗначениеЗаполнено(НомерИсправления) 
			 И ЗначениеЗаполнено(ДатаИсправления) Тогда
			ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
		КонецЕсли;
		ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента", НомерСчетаФактуры);
		ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаИсправленияСчетаФактуры"));
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Дата", ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправления")) Тогда
		ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
		ДанныеЗаполненияШапки.Вставить("НомерИсправления", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправления"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки,  "ДатаИсправления"));
	КонецЕсли;
	
	ВалКод = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВалКод");
	Валюта = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Валюта, ВалКод);
	ДанныеЗаполненияШапки.Вставить("Валюта", Валюта);
	
	// Получим данные по комиссионеру
	Комиссионер = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Комиссионер");
	Если ЗначениеЗаполнено(Комиссионер) Тогда
		// Счет-фактура выставлена комитентом
		ИндексОрганизация = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Организация");
		СтрокаОрганизация = ДеревоРазбора.Строки.Найти(ИндексОрганизация, "ИндексСтроки", Истина);
		Покупатель = Справочники.Контрагенты.ПустаяСсылка();
		СсылкаНаОбъектПоИННКПП("Контрагенты", 
			ПолучитьЗначениеРеквизитаДерева(СтрокаОрганизация, "ИНН", Истина, ДеревоРазбора), 
			ПолучитьЗначениеРеквизитаДерева(СтрокаОрганизация, "КПП", Истина, ДеревоРазбора),
			Покупатель);
		ДанныеЗаполненияШапки.Вставить("Покупатель", Покупатель);
		ДанныеЗаполненияШапки.Вставить("Организация", Комиссионер);
	Иначе
		// Счет-фактура на поступление
		ДанныеЗаполненияШапки.Вставить("Организация", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Организация", Истина, ДеревоРазбора));
		
	КонецЕсли;
	
	// Данные по контрагенту
	ДанныеЗаполненияШапки.Вставить("Контрагент", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Контрагент", Истина, ДеревоРазбора));
	ДанныеЗаполненияШапки.Вставить("Партнер",    ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Партнер", Истина, ДеревоРазбора));

	ИндексКонтрагент = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Контрагент");
	СтрокаКонтрагент = ДеревоРазбора.Строки.Найти(ИндексКонтрагент, "ИндексСтроки", Истина);
	ДанныеЗаполненияШапки.Вставить("ИННКонтрагента", ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагент, "ИНН", Истина, ДеревоРазбора));
	ДанныеЗаполненияШапки.Вставить("КППКонтрагента", ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагент, "КПП", Истина, ДеревоРазбора));
	
	ДанныеЗаполненияШапки.Вставить("Сумма",       ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "СуммаДокумента", Истина, ДеревоРазбора));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС",    ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "СумНДС", Истина, ДеревоРазбора));
	
	// Получим документы-основания
	СтрокаДокументыОснования = СтрокаДляЗагрузки.Строки.Найти("ДокументыОснования");
	Если СтрокаДокументыОснования <> Неопределено Тогда
		МассивДокументовОснований = Новый Массив;
		Для Каждого Строка Из СтрокаДокументыОснования.Строки Цикл
			Если ЗначениеЗаполнено(Строка.СсылкаНаОбъект) Тогда
				МассивДокументовОснований.Добавить(Строка.СсылкаНаОбъект);
			КонецЕсли;
		КонецЦикла;
		ДанныеЗаполненияШапки.Вставить("ДокументыОснования", МассивДокументовОснований);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("ПолученВЭлектронномВиде", Истина);
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	
	Если Аванс Тогда
		Авансы = Документы.СчетФактураПолученныйАванс.ПустаяСсылка().Авансы.Выгрузить();
		Отбор = Новый Структура("Реквизит", "СтрокаТЧ");
		СтрокиТЧ = СтрокаДляЗагрузки.Строки.НайтиСтроки(Отбор);
		Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
			ЗаполнитьСтрокуТЧ(Авансы, СтрокаТЧ.Строки, ДеревоРазбора);
		КонецЦикла;
		ДанныеДляОбъекта.Вставить("Авансы", Авансы);
	КонецЕсли;
	
	Если Не Аванс Тогда
		ЗаполнитьСуммыДляСчетаФактуры(ДанныеДляОбъекта, ДеревоРазбора);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ПриобретениеУслугПрочихАктивов.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("НоменклатураПартнера");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
				КонецЕсли;
			Иначе // добавим строку ТЧ
				ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// спец.значения
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры")) Тогда // указана счет-фактура
		
	Иначе
		ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
		ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	КонецЕсли;
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	// а также НомерСтрокиДокументаПоставщика
	
	Для Каждого ТекСтрока Из ТЗ Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Содержание) Тогда
			ТекСтрока.Содержание = ТекСтрока.НоменклатураПартнера;
		КонецЕсли;
	КонецЦикла;

	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Расходы", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаявкиНаРасходование(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ЧастичнаяОплата = истина;
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		Иначе
			ЧастичнаяОплата = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// спец.значения
		
	СтрокаСрокПлатежа = СтрокаДляЗагрузки.Строки.Найти("ДатаОкончанияДействияСчета", "Реквизит");
	ДанныеЗаполненияШапки.Вставить("СрокПлатежа", СтрокаСрокПлатежа.ЗначениеРеквизита);
	
	СтрокаСуммаДокумента = СтрокаДляЗагрузки.Строки.Найти("СуммаИтог", 		"Реквизит");
	СтрокаСуммаНДС 		 = СтрокаДляЗагрузки.Строки.Найти("СуммаНалогаИтог","Реквизит");
	
	Если ЧастичнаяОплата И ЗначениеЗаполнено(СтрокаСуммаДокумента.ЗначениеРеквизита) Тогда
		ДанныеЗаполненияШапки.Вставить("СуммаДокумента", СтрокаСуммаДокумента.ЗначениеРеквизита + СтрокаСуммаНДС.ЗначениеРеквизита);
	Иначе
		ДанныеЗаполненияШапки.Вставить("СуммаДокумента", СтрокаСуммаДокумента.ЗначениеРеквизита);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерДокументаОснования"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаДокументаОснования"));
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляРегистрацииЦен(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		Иначе // добавим строку ТЧ
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора); 
		КонецЕсли;
	КонецЦикла;
	
	// спец.значения 
	
	// найдем ВидЦеныПоставщика или создадим новый
	ВидЦеныПоставщика = ОпределитьВидЦеныПоставщика(ДанныеЗаполненияШапки.Партнер, СтрокаДляЗагрузки.Строки.Найти("ТипыЦен").ЗначениеРеквизита);
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика, а также обязательный реквизит ВидЦеныПоставщика
	Для Каждого ТекСтрока Из ТЗ Цикл 
		Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПартнера) И ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПартнера.Характеристика) Тогда
				ТекСтрока.Характеристика = ТекСтрока.НоменклатураПартнера.Характеристика;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПартнера.Упаковка) Тогда
				ТекСтрока.Упаковка = ТекСтрока.НоменклатураПартнера.Упаковка;
			КонецЕсли;
		КонецЕсли;
		ТекСтрока.ВидЦеныПоставщика = ВидЦеныПоставщика;
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаКлиента(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ЗаказКлиента.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗЭтапыГрафикаОплаты = Документы.ЗаказКлиента.ПустаяСсылка().ЭтапыГрафикаОплаты.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("СуммаСкидки");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора, Истина); 
		ИначеЕсли СтрокаРеквизита.Реквизит = "ЭтапыГрафикаОплаты" Тогда	
			ЗаполнитьСтрокуТЧ(ТЗЭтапыГрафикаОплаты, СтрокаРеквизита.Строки, ДеревоРазбора, Истина); 
		КонецЕсли;
    КонецЦикла;
		
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("СуммаСкидки"),"СуммаРучнойСкидки");
	
	//Заполним значения по умолчанию в ТЧ
	ТЗ.ЗаполнитьЗначения(Перечисления.ВариантыОбеспечения.НеТребуется, "ВариантОбеспечения");
	ТЗ.ЗаполнитьЗначения(ТекущаяДатаСеанса(), "ДатаОтгрузки");
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыГрафикаОплаты",ТЗЭтапыГрафикаОплаты); 
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ЗаказПоставщику.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗЭтапыГрафикаОплаты = Документы.ЗаказПоставщику.ПустаяСсылка().ЭтапыГрафикаОплаты.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("СуммаСкидки");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора, Истина); 
		ИначеЕсли СтрокаРеквизита.Реквизит = "ЭтапыГрафикаОплаты" Тогда	
			ЗаполнитьСтрокуТЧ(ТЗЭтапыГрафикаОплаты, СтрокаРеквизита.Строки, ДеревоРазбора, Истина); 
		КонецЕсли;
	КонецЦикла;
	
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("СуммаСкидки"),"СуммаРучнойСкидки");
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика
	Для Каждого ТекСтрока Из ТЗ Цикл 
		Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПартнера) И ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПартнера.Характеристика) Тогда
				ТекСтрока.Характеристика = ТекСтрока.НоменклатураПартнера.Характеристика;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПартнера.Упаковка) Тогда
				ТекСтрока.Упаковка = ТекСтрока.НоменклатураПартнера.Упаковка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 			   ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары",			   ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыГрафикаОплаты",ТЗЭтапыГрафикаОплаты); 
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляОтчетаКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ОтчетКомиссионера.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗЭтапыГрафикаОплаты = Документы.ОтчетКомиссионера.ПустаяСсылка().ЭтапыГрафикаОплаты.ВыгрузитьКолонки();  	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			
			НоваяСтрока = ТЗ.Добавить();
			ДанныеПокупателя = Новый Структура("Наименование, ИНН, КПП, ЮрАдрес, ФактАдрес");
			
			Для Каждого ТекСтрока Из СтрокаРеквизита.Строки Цикл
				
				ИмяРеквизитаВБД = ТекСтрока.Реквизит;
				
				Если ИмяРеквизитаВБД = "ПокупательНаименование" Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.Наименование = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "ПокупательИНН" Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.ИНН = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "ПокупательКПП" Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.КПП = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "ПокупательЮрАдрес" Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.ЮрАдрес = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "ПокупательФактАдрес" Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.ФактАдрес = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "Сопоставление" Тогда
					
					Сопоставление = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					Если ТипЗнч(Сопоставление) <> Тип("Структура") Тогда
						Продолжить;
					КонецЕсли;
					Если КолонкаСуществует(ТЗ, "Номенклатура")
						И Сопоставление.Свойство("НоменклатураИБ") Тогда
						Если ЗначениеЗаполнено(Сопоставление.НоменклатураИБ) Тогда
							НоваяСтрока.Номенклатура = Сопоставление.НоменклатураИБ;
						КонецЕсли;
					КонецЕсли;
					Если КолонкаСуществует(ТЗ, "Характеристика")
						И Сопоставление.Свойство("ХарактеристикаИБ") Тогда
						Если ЗначениеЗаполнено(Сопоставление.ХарактеристикаИБ) Тогда
							НоваяСтрока.Характеристика = Сопоставление.ХарактеристикаИБ;
						КонецЕсли;
					КонецЕсли;
					Если КолонкаСуществует(ТЗ, "ЕдиницаИзмерения")
						И Сопоставление.Свойство("УпаковкаИБ") Тогда
						Если ЗначениеЗаполнено(Сопоставление.УпаковкаИБ) Тогда
							НоваяСтрока.ЕдиницаИзмерения = Сопоставление.УпаковкаИБ;
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ИмяРеквизитаВБД = "СведенияОПрослеживаемости" Тогда					
					СведенияОПрослеживаемости = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					
				ИначеЕсли ТЗ.Колонки.Найти(ИмяРеквизитаВБД) <> Неопределено Тогда
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
				КонецЕсли;
				
			КонецЦикла;
			
			// Попробуем найти среди существующих
			Покупатель = Справочники.Контрагенты.ПустаяСсылка();
			СсылкаНаОбъектПоИННКПП("Контрагенты", ДанныеПокупателя.ИНН, ДанныеПокупателя.КПП, Покупатель);
			
			Если НЕ ЗначениеЗаполнено(Покупатель) Тогда
				Покупатель = СоздатьКонтрагентаВБД(ДанныеПокупателя)
			КонецЕсли;
			
			НоваяСтрока.Покупатель = Покупатель;
			
			// Заполняем количество для прослеживаемости
			Если СведенияОПрослеживаемости <> Неопределено Тогда
				Если СведенияОПрослеживаемости.Количество() > 0 Тогда
					КоличествоПрослеживаемости = СведенияОПрослеживаемости[0].Количество;
					Если ЗначениеЗаполнено(КоличествоПрослеживаемости) Тогда
						НоваяСтрока.КоличествоПоРНПТ = КоличествоПрослеживаемости;	
					КонецЕсли;
					
					НомерТаможеннойДекларации = СведенияОПрослеживаемости[0].НомерТовара;
					Если ЗначениеЗаполнено(НомерТаможеннойДекларации) Тогда
						ТаможеннаяДекларация = Неопределено;
						СтранаПроисхождения = Неопределено;
						НайтиТаможенныеДекларации(ТаможеннаяДекларация, НомерТаможеннойДекларации, СтранаПроисхождения); 
						Если НЕ ЗначениеЗаполнено(ТаможеннаяДекларация) Тогда
							НоваяТаможеннаяДекларация = Справочники.НомераГТД.СоздатьЭлемент();
							
							ПараметрыДляЗаполнения = Справочники.НомераГТД.ПараметрыДляЗаполненияЭлемента(НомерТаможеннойДекларации, СтранаПроисхождения);
							ПараметрыДляЗаполнения.ЗаполнитьПорядковыйНомерТовараАвтоматически = Истина;
							НоваяТаможеннаяДекларация.Заполнить(ПараметрыДляЗаполнения);
						
							Реквизиты = Справочники.НомераГТД.РегистрационныйНомерИСтранаВвоза(НомерТаможеннойДекларации);
							ЗаполнитьЗначенияСвойств(НоваяТаможеннаяДекларация, Реквизиты, "РегистрационныйНомер,СтранаВвозаНеРФ,ПорядковыйНомерТовара");
							НоваяТаможеннаяДекларация.Записать();
							ТаможеннаяДекларация = НоваяТаможеннаяДекларация.Ссылка;
						КонецЕсли;
						Если НоваяСтрока.КоличествоПоРНПТ > 0 Тогда
							ЗаполнитьПризнакРНПТвГТД(ТаможеннаяДекларация);
						КонецЕсли;
						НоваяСтрока.НомерГТД = ТаможеннаяДекларация;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "ЭтапыГрафикаОплаты" Тогда	
			ЗаполнитьСтрокуТЧ(ТЗЭтапыГрафикаОплаты, СтрокаРеквизита.Строки, ДеревоРазбора);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));

	Для Каждого ТекСтрока Из ТЗ Цикл 
		// заполним Количество с учетом единиц измерения
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
				ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
			Иначе
				ТекКоэффициент = 1;
			КонецЕсли;
			ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок*ТекКоэффициент;
		КонецЕсли;
		
		ТекущийПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(ТекСтрока.СтавкаНДС);
		ТекСтрока.СуммаПродажиНДС = Окр(ТекСтрока.СуммаПродажи * ТекущийПроцентНДС / (100 + ТекущийПроцентНДС), 2, РежимОкругления.Окр15как20);
		
	КонецЦикла;
	
	Если ТЗ.Итог("СуммаПродажиНДС") > 0 Тогда
		ДанныеЗаполненияШапки.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	Иначе
		ДанныеЗаполненияШапки.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	КонецЕсли;
	
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("Сумма"), "СуммаСНДС");
	ТЗ.Колонки.Удалить("Сумма");
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыГрафикаОплаты",ТЗЭтапыГрафикаОплаты); 
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Функция ПодготовитьСтруктуруДляОтчетаКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ОтчетКомиссионераОСписании.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
   	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			
			НоваяСтрока = ТЗ.Добавить();
			Для Каждого ТекСтрока Из СтрокаРеквизита.Строки Цикл
				
				ИмяРеквизитаВБД = ТекСтрока.Реквизит;
				
				Если ТЗ.Колонки.Найти(ИмяРеквизитаВБД) <> Неопределено Тогда
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
				КонецЕсли;
				
				// Читаем данные для прослеживаемости
				Если ИмяРеквизитаВБД = "СведенияОПрослеживаемости" Тогда					
					СведенияОПрослеживаемости = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			    КонецЕсли;
				
			КонецЦикла;			
			
			// Заполняем количество для прослеживаемости
			Если СведенияОПрослеживаемости <> Неопределено Тогда
				Если СведенияОПрослеживаемости.Количество() > 0 Тогда
					КоличествоПрослеживаемости = СведенияОПрослеживаемости[0].Количество;
					Если ЗначениеЗаполнено(КоличествоПрослеживаемости) Тогда
						НоваяСтрока.КоличествоПоРНПТ = КоличествоПрослеживаемости;	
					КонецЕсли;
					
					НомерТаможеннойДекларации = СведенияОПрослеживаемости[0].НомерТовара;
					Если ЗначениеЗаполнено(НомерТаможеннойДекларации) Тогда
						ТаможеннаяДекларация = Неопределено;
						СтранаПроисхождения = Неопределено;
						НайтиТаможенныеДекларации(ТаможеннаяДекларация, НомерТаможеннойДекларации, СтранаПроисхождения); 
						Если НЕ ЗначениеЗаполнено(ТаможеннаяДекларация) Тогда
							НоваяТаможеннаяДекларация = Справочники.НомераГТД.СоздатьЭлемент();
							
							ПараметрыДляЗаполнения = Справочники.НомераГТД.ПараметрыДляЗаполненияЭлемента(НомерТаможеннойДекларации, СтранаПроисхождения);
							ПараметрыДляЗаполнения.ЗаполнитьПорядковыйНомерТовараАвтоматически = Истина;
							НоваяТаможеннаяДекларация.Заполнить(ПараметрыДляЗаполнения);
						
							Реквизиты = Справочники.НомераГТД.РегистрационныйНомерИСтранаВвоза(НомерТаможеннойДекларации);
							ЗаполнитьЗначенияСвойств(НоваяТаможеннаяДекларация, Реквизиты, "РегистрационныйНомер,СтранаВвозаНеРФ,ПорядковыйНомерТовара");
							НоваяТаможеннаяДекларация.Записать();
							ТаможеннаяДекларация = НоваяТаможеннаяДекларация.Ссылка;
						КонецЕсли;
						Если НоваяСтрока.КоличествоПоРНПТ > 0 Тогда
							ЗаполнитьПризнакРНПТвГТД(ТаможеннаяДекларация);
						КонецЕсли;
						НоваяСтрока.НомерГТД = ТаможеннаяДекларация;
					КонецЕсли;				
					
				КонецЕсли;
			КонецЕсли;			
			
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));

	Для Каждого ТекСтрока Из ТЗ Цикл 
		// заполним Количество с учетом единиц измерения
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
				ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
			Иначе
				ТекКоэффициент = 1;
			КонецЕсли;
			ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок*ТекКоэффициент;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Функция ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура();
	ДанныеЗаполнения = Новый Структура();
	Товары = Документы.КорректировкаПриобретения.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.НоваяТаблицаШтрихкодыУпаковок();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполнения.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					Если СтрокаРеквизита.Реквизит = "Основание" Тогда
						ИмяРеквизита = "ДокументОснование";
					Иначе
						ИмяРеквизита = СтрокаРеквизита.Реквизит;
					КонецЕсли;
					ДанныеЗаполнения.Вставить(ИмяРеквизита, Реквизит);
				КонецЕсли;
				
			Иначе // добавим строку ТЧ
				ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизита.Строки, ДеревоРазбора); 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполнения.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	// Дополним ДанныеЗаполнения реквизитами основания
	ДокументОснование = Неопределено;
	Если ДанныеЗаполнения.Свойство("ДокументОснование") И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
		
		ДокументОснование = ДанныеЗаполнения.ДокументОснование; 
		
		ТекстЗапроса = "";
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда 
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДанныеДокумента.Соглашение			 КАК Соглашение,
			|	ДанныеДокумента.Договор				 КАК Договор,
			|	ДанныеДокумента.Склад				 КАК Склад,
			|	ДанныеДокумента.Валюта				 КАК Валюта,
			|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ДанныеДокумента.НалогообложениеНДС	 КАК НалогообложениеНДС,
			|	ДанныеДокумента.Подразделение		 КАК Подразделение,
			|	ДанныеДокумента.Сделка				 КАК Сделка,
			|	ДанныеДокумента.ЦенаВключаетНДС		 КАК ЦенаВключаетНДС,
			|	ДанныеДокумента.ПоступлениеПоЗаказам КАК ПоступлениеПоЗаказам
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &ДокументОснование";
			
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда 
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка				 КАК ДокументОснование,
			|	ДанныеДокумента.Партнер				 КАК Партнер,
			|	ДанныеДокумента.Контрагент			 КАК Контрагент,
			|	ДанныеДокумента.Соглашение			 КАК Соглашение,
			|	ДанныеДокумента.Организация			 КАК Организация,
			|	ДанныеДокумента.Договор				 КАК Договор,
			|	ДанныеДокумента.Валюта				 КАК Валюта,
			|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ДанныеДокумента.НалогообложениеНДС	 КАК НалогообложениеНДС,
			|	ДанныеДокумента.Подразделение		 КАК Подразделение,
			|	ДанныеДокумента.ЦенаВключаетНДС		 КАК ЦенаВключаетНДС,
			|	Ложь								 КАК ПоступлениеПоЗаказам
			|
			|ИЗ
			|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &ДокументОснование";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
			Запрос.Текст = ТекстЗапроса;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
				ДанныеЗаполнения.Вставить(Колонка.Имя);
			КонецЦикла;
			
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Товары.Итог("СуммаНДС") > 0 Тогда
			ДанныеЗаполнения.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
		Иначе	
			ДанныеЗаполнения.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
		КонецЕсли;
		ДанныеЗаполнения.Вставить("ЦенаВключаетНДС", Ложь);
		
	КонецЕсли;
	
	// Вид операции ЭД определяет хоз. операцию документа
	ВидОперацииЭД = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
	Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ИсправлениеОшибок);
	Иначе
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон);
	КонецЕсли;
	
	ЭтоКорректировкаПриобретенияУслуг = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов"));
	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// Заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
		
		Если ЭтоКорректировкаПриобретенияУслуг Тогда
			ТекСтрока.Содержание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.НоменклатураПартнера, "Наименование");
			ТекСтрока.НоменклатураПартнера = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполнения);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	ДанныеДляОбъекта.Вставить("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Функция ПараметрыМассыПрописью(Масса, КоэффициентПересчетаВТонны)
	
	МассаТонны = Масса * КоэффициентПересчетаВТонны;
	Если МассаТонны > 1 Тогда
		Коэффициент = 1;
		СтрокаФормат = "т, т, т, ж, кг, кг, кг, м, " + ?(Окр(МассаТонны) = МассаТонны, "0", "3");
	ИначеЕсли МассаТонны * 1000 > 1 Тогда
		Коэффициент = 1000;
		СтрокаФормат = "кг, кг, кг, м, г, г, г, м, " + ?(Окр(МассаТонны * Коэффициент) = МассаТонны * Коэффициент, "0", "3");
	Иначе
		Коэффициент = 1000000;
		СтрокаФормат = "г, г, г, м, г, г, г, м, 0";
	КонецЕсли;
	
	Возврат Новый Структура("Формат, Коэффициент", СтрокаФормат, Коэффициент * КоэффициентПересчетаВТонны);
	
КонецФункции

Функция НайтиПеречисление(Наименование, ПредставлениеПеречисления)
	
	НайденноеЗначение = Неопределено;
	Если Наименование = "НДС" Тогда
		ИмяПеречисления = "СтавкиНДС";
		Если НЕ ТипЗнч(ПредставлениеПеречисления)=Тип("СправочникСсылка.СтавкиНДС") Тогда // определяем по числу		
			Соответствие = Новый Соответствие;
			ЗаполнитьСоответствиеСтавокНДС(Соответствие);
			Значение = Неопределено;
			Если ЗначениеЗаполнено(ПредставлениеПеречисления) Тогда
				Значение = Соответствие.Получить(ПредставлениеПеречисления);
			КонецЕсли;
			
			Возврат Значение;
		Иначе
			Возврат ПредставлениеПеречисления
		КонецЕсли;
	ИначеЕсли Наименование = "ТипНоменклатуры" Тогда
		ИмяПеречисления = "ТипыНоменклатуры";
	ИначеЕсли Наименование = "ТипыНалогообложенияНДС" Тогда
		ИмяПеречисления = "ТипыНалогообложенияНДС";	
	ИначеЕсли Наименование = "СпособыРасчетаКомиссионногоВознаграждения" Тогда
		ИмяПеречисления = "СпособыРасчетаКомиссионногоВознаграждения";	
	ИначеЕсли Наименование = "ВариантыКонтроляОплатыКлиентом" Тогда
		ИмяПеречисления = "ВариантыКонтроляОплатыКлиентом";	
	ИначеЕсли Наименование = "ВариантыКонтроляОплатыПоставщику" Тогда
		ИмяПеречисления = "ВариантыКонтроляОплатыПоставщику";			
	ИначеЕсли Наименование = "ФормыОплаты" Тогда
		ИмяПеречисления = "ФормыОплаты";	
	ИначеЕсли Наименование = "СпособРасчета" Тогда
		ИмяПеречисления = "СпособыРасчетаКомиссионногоВознаграждения";	
		Если ПредставлениеПеречисления = "От суммы" Тогда
			ПредставлениеПеречисления = НСтр("ru = 'Процент от суммы продажи'");
		ИначеЕсли ПредставлениеПеречисления = "От разницы" Тогда
			ПредставлениеПеречисления = НСтр("ru = 'Процент от разности суммы продажи и суммы комитента'");
		КонецЕсли;	
	Иначе
		Возврат НайденноеЗначение;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если Врег(ЭлПеречисления.Синоним) = Врег(ПредставлениеПеречисления) тогда
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденноеЗначение;
	
КонецФункции

Функция ПолучитьДанныеПривязкиСтрокЗаказов(Товары)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.ЗаказПоставщику КАК ЗаказПоставщику
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗаказы.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ТаблицаЗаказы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказы.Характеристика КАК Характеристика,
	|	ТаблицаЗаказы.КодСтроки КАК КодСтроки,
	|	ТаблицаЗаказы.Склад КАК Склад,
	|	ТаблицаЗаказы.КОформлению КАК КОформлениюОстаток
	|ПОМЕСТИТЬ ЗаказыПоставщикам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КодСтроки КАК КодСтроки,
	|		ЗаказыОстатки.Склад КАК Склад,
	|		ЗаказыОстатки.КОформлениюОстаток КАК КОформлению
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				,
	|				(Номенклатура, ЗаказПоставщику) В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура КАК Номенклатура,
	|						Товары.ЗаказПоставщику КАК ЗаказПоставщику
	|					ИЗ
	|						Товары КАК Товары)) КАК ЗаказыОстатки
	|	ГДЕ
	|		ЗаказыОстатки.КОформлениюОстаток > 0) КАК ТаблицаЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Количество,
	|	Товары.ЗаказПоставщику,
	|	ЗаказыПоставщикам.КодСтроки,
	|	ЗаказыПоставщикам.Склад,
	|	ЗаказыПоставщикам.Характеристика
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|		ПО Товары.Номенклатура = ЗаказыПоставщикам.Номенклатура
	|			И Товары.ЗаказПоставщику = ЗаказыПоставщикам.ЗаказПоставщику
	|			И Товары.Количество <= ЗаказыПоставщикам.КОформлениюОстаток";
	Запрос.УстановитьПараметр("Товары", Товары);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

Функция НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки)
	
	СсылкаНаОбъект = Неопределено;
	
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина); // строка с объектом
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект БД
			СсылкаНаОбъект = НайденнаяСтрока.СсылкаНаОбъект;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	МетаданныеОбъекта = ТекущийОбъект.Метаданные();
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Строка.Ключ) 
			 И МетаданныеОбъекта.Реквизиты.Найти(Строка.Ключ) <> Неопределено
			 И ЗначениеЗаполнено(Строка.Значение)
			 И ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
			ТекущийОбъект[Строка.Ключ] = Строка.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаМассива, ОбъектМетаданных)
		
	Для Каждого ТекСтрока Из СтрокаМассива.Строки Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.Метаданные().СтандартныеРеквизиты, ТекСтрока.Реквизит) Тогда
			ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
		ИначеЕсли ОбъектМетаданных.Метаданные().Реквизиты.Найти(ТекСтрока.Реквизит) <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.СсылкаНаОбъект) Тогда
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.СсылкаНаОбъект;
			Иначе
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьВидЦеныПоставщика(Партнер, ТипыЦен)
	
	ПараметрыЦены = ТипыЦен[0];
	ИспользоватьНесколькоВалют = Константы.ИспользоватьНесколькоВалют.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыЦенПоставщиков.Ссылка
	               |ИЗ
	               |	Справочник.ВидыЦенПоставщиков КАК ВидыЦенПоставщиков
	               |ГДЕ
	               |	ВидыЦенПоставщиков.Владелец = &Владелец
	               |	И ВидыЦенПоставщиков.ЦенаВключаетНДС = &ЦенаВключаетНДС";
				   
	Запрос.УстановитьПараметр("Владелец", 		 Партнер);	
	Запрос.УстановитьПараметр("Валюта", 		 ПараметрыЦены.Валюта);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", ПараметрыЦены.ВключаетНДС);
	
	Если ИспользоватьНесколькоВалют Тогда
		Запрос.Текст = Запрос.Текст + " И ВидыЦенПоставщиков.Валюта.Код = &Валюта";
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ТипЦенДляТЧ = Результат.Ссылка;
	Иначе
		ТипЦенДляТЧ = Справочники.ВидыЦенПоставщиков.СоздатьЭлемент();
		ТипЦенДляТЧ.Наименование =    "Основной";
		ТипЦенДляТЧ.Владелец = 		  Партнер;
		ТипЦенДляТЧ.ЦенаВключаетНДС = ПараметрыЦены.ВключаетНДС;
		Если ИспользоватьНесколькоВалют Тогда
			ТипЦенДляТЧ.Валюта =  	  Справочники.Валюты.НайтиПоКоду(ПараметрыЦены.Валюта);
		КонецЕсли;
		
		Попытка
			ТипЦенДляТЧ.Записать();
		Исключение
			Текст = НСтр("ru = 'Создание элемента справочника ""Виды цен поставщиков"".'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ТипЦенДляТЧ.Ссылка
	
КонецФункции

Процедура ЗаполнитьСоглашениеПоСтатистике(Объект)
	
	ОписаниеРеквизитов = Новый Структура;
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Партнер, Валюта, ЦенаВключаетНДС";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Соглашение", Параметры);
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(Объект, Неопределено, ОписаниеРеквизитов);
	
КонецПроцедуры

Функция ПолучитьДатуВремяИзСтроки(ДатаВремя)
	
	Результат = Неопределено;
	ДатаВремя = СтрЗаменить(ДатаВремя, "-", "");
	ДатаВремя = СтрЗаменить(ДатаВремя, ":", "");
	Если СтрДлина(ДатаВремя) - СтрНайти(ДатаВремя, " ") = 5 Тогда // время в формате Ч:ММ:СС
		ДатаВремя = СтрЗаменить(ДатаВремя, " ", "0");
	ИначеЕсли СтрНайти(ДатаВремя, "T") > 0 Тогда //время в формате ГГГГММДДTЧЧММСС
		ДатаВремя = СтрЗаменить(ДатаВремя, "T", "");
	Иначе // время в формате ЧЧ:ММ:СС
		ДатаВремя = СтрЗаменить(ДатаВремя, " ", "");
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	Результат = ОписаниеТипа.ПривестиЗначение(ДатаВремя);  // дата и время в виде "ГГГГММДДЧЧММСС"
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = ОписаниеТипа.ПривестиЗначение(Лев(ДатаВремя, 8));  // только дата "ГГГГММДД"
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ГруппаДоступаПартнера()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Партнеры.Ссылка,
	|	Партнеры.ГруппаДоступа
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	НЕ Партнеры.ПометкаУдаления
	|	И НЕ Партнеры.ГруппаДоступа = ЗНАЧЕНИЕ(Справочник.ГруппыДоступаПартнеров.ПустаяСсылка)");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ГруппыДоступаПартнеров.ПустаяСсылка();
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ГруппаДоступа;
	
КонецФункции

Функция ОпределитьПризнакТовара(Товар, ДокументОтгрузки)
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ДокументОтгрузки.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
			Возврат "4"; // Имущественные права;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Товар) Тогда
		Если Товар.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
			Возврат "1"; // Имущество
		ИначеЕсли Товар.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			Возврат "2"; // Работа			
		ИначеЕсли Товар.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			Возврат "3"; // Услуга
		Иначе
			Возврат "5"; // Иное
		КонецЕсли;
	Иначе
		Возврат "5"; // Иное
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПрослеживаемостьДляРеализацииАктивов(Приемник, Источник, ДанныеПрослеживаемости, ВыводитьКодыТНВЭД)

	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("СчетФактура", Источник.Ссылка);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "НомерСтрокиИсходногоСФ") Тогда
		ПараметрыПоиска.Вставить("НомерСтрокиСФ", ?(ЗначениеЗаполнено(Источник.НомерСтрокиИсходногоСФ), Источник.НомерСтрокиИсходногоСФ, Источник.НомерСтроки));
	Иначе
		ПараметрыПоиска.Вставить("НомерСтрокиСФ", Источник.НомерСтроки);
	КонецЕсли;
	
	ТаблицаДанныхПрослеживаемости = ДанныеПрослеживаемости.Выгрузить();
	СтрокиДанных = ТаблицаДанныхПрослеживаемости.НайтиСтроки(ПараметрыПоиска);
	
	СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
	СведенияОТаможеннойДекларации.Колонки.Добавить("СтранаПроисхожденияКод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(3)));
	СведенияОТаможеннойДекларации.Колонки.Добавить("ТаможеннаяДекларацияНомер", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
	
	СведенияОПрослеживаемости = Новый ТаблицаЗначений;
	СведенияОПрослеживаемости.Колонки.Добавить("НомерТовара");
	СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияКод");
	СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	СведенияОПрослеживаемости.Колонки.Добавить("Количество");
	
	КодВидаТовара = "";
	
	Для Каждого СтрокаДанных Из СтрокиДанных Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.КодТНВЭД) Тогда
			КодВидаТовара = СтрокаДанных.КодТНВЭД;
		КонецЕсли;	
			
		СтрокаТД = СведенияОТаможеннойДекларации.Добавить();
		СтрокаТД.ТаможеннаяДекларацияНомер = СокрЛП(Строка(СтрокаДанных.НомерГТД));
		Если ЗначениеЗаполнено(СтрокаДанных.СтранаПроисхожденияКод) Тогда
			СтрокаТД.СтранаПроисхожденияКод = СтрокаДанных.СтранаПроисхожденияКод;
		КонецЕсли;
		
		СтрПрослеживаемости = СведенияОПрослеживаемости.Добавить();
			
		СтрПрослеживаемости.НомерТовара = СокрЛП(Строка(СтрокаДанных.РНПТ));
		СтрПрослеживаемости.ЕдиницаИзмеренияКод = СокрЛП(СтрокаДанных.ЕдиницаИзмеренияКод);
		СтрПрослеживаемости.ЕдиницаИзмеренияНаименование =  СокрЛП(СтрокаДанных.ЕдиницаИзмеренияНаименование);
		СтрПрослеживаемости.Количество = СтрокаДанных.КоличествоПоРНПТ;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КодВидаТовара) И ВыводитьКодыТНВЭД Тогда
		Приемник.КодВидаТовара = КодВидаТовара;
	КонецЕсли;	

	Если Не ЗначениеЗаполнено(Приемник.СведенияОТаможеннойДекларации) Тогда	
		Приемник.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Приемник.СведенияОТаможеннойДекларации, "СтранаПроисхожденияКод",,,
			НСтр("ru = 'Не заполнен код страны происхождения'"));
	КонецЕсли;
		
	Приемник.СведенияОПрослеживаемости = СведенияОПрослеживаемости;
	
КонецПроцедуры

Функция ИнициализацияТаблицыРеквизитовОбъектов()
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаРеквизитов.Колонки;
	Колонки.Добавить("Порядок",                    Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ИмяОбъекта",                 Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяТабличнойЧасти",          Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("РеквизитыОбъекта",           Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("СтруктураРеквизитовОбъекта", Новый ОписаниеТипов("Структура"));
	
	ТаблицаРеквизитов.Индексы.Добавить("ИмяОбъекта");
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Процедура ДобавитьДопополнительныеДанныеВДерево(ДеревоДанных, Идентификатор, Значение, ПутьВДереве)
	
	ТекстоваяИнформация = Новый ТаблицаЗначений;
	ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
	ТекстоваяИнформация.Колонки.Добавить("Значение");
	
	НоваяСтрока = ТекстоваяИнформация.Добавить();
	НоваяСтрока.Идентификатор = Идентификатор;
	НоваяСтрока.Значение      = Значение;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТекстоваяИнформация, ПутьВДереве);

КонецПроцедуры

// Получает ключевые реквизиты объекта по текстовому представлению.
//
// Параметры:
//  ИмяОбъекта - Строка - текстовое представление объекта, ключевые реквизиты которого необходимо получить.
//  СтруктураКлючевыхРеквизитов - Структура - перечень параметров объекта.
//
Процедура ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта, СтруктураКлючевыхРеквизитов)
	
	Если ИмяОбъекта = "Документ.КоммерческоеПредложениеКлиенту" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Клиент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.РеализацияТоваровУслуг" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);

	ИначеЕсли ИмяОбъекта = "Документ.РеализацияУслугПрочихАктивов" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Содержание, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Доходы", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПриобретениеТоваровУслуг" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ВозвратТоваровОтКлиента" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗаказКлиента" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		//ЭтапыГрафикаОплаты
		СтрокаРеквизитовОбъекта = ("ВариантОплаты, ДатаПлатежа, ПроцентПлатежа, СуммаПлатежа");
		СтруктураКлючевыхРеквизитов.Вставить("ЭтапыГрафикаОплаты", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗаказПоставщику" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, НоменклатураПартнера, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		//ЭтапыГрафикаОплаты
		СтрокаРеквизитовОбъекта = ("ВариантОплаты, ДатаПлатежа, ПроцентПлатежа, СуммаПлатежа");
		СтруктураКлючевыхРеквизитов.Вставить("ЭтапыГрафикаОплаты", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураВыданный" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ДокументОснование");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураВыданныйАванс" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ДокументОснование");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// Авансы
		СтрокаРеквизитовОбъекта = ("Номенклатура, Сумма, СтавкаНДС, СуммаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Авансы", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураКомиссионеру" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Комиссионер, ДокументОснование");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// Покупатели
		СтрокаРеквизитовОбъекта = ("Покупатель, НомерСчетаФактуры");
		СтруктураКлючевыхРеквизитов.Вставить("Покупатели", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПроизвольныйЭД" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, Партнер, Сообщение");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СчетНаОплатуКлиенту" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, БанковскийСчет");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		//ЭтапыГрафикаОплаты
		СтрокаРеквизитовОбъекта = ("ДатаПлатежа, ПроцентПлатежа, СуммаПлатежа");
		СтруктураКлючевыхРеквизитов.Вставить("ЭтапыГрафикаОплаты", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ОтчетКомитенту" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, НоменклатураПартнера, Цена, Сумма, СуммаНДС, СтавкаНДС, СуммаПродажи, СуммаВознаграждения");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		//ЭтапыГрафикаОплаты
		СтрокаРеквизитовОбъекта = ("ДатаПлатежа, ПроцентПлатежа, СуммаПлатежа");
		СтруктураКлючевыхРеквизитов.Вставить("ЭтапыГрафикаОплаты", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ОтчетКомитентуОСписании" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, НоменклатураПартнера, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.АктВыполненныхРабот" Тогда 
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПередачаТоваровМеждуОрганизациями" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, ОрганизацияПолучатель, 
			|ЦенаВключаетНДС, РасчетыЧерезОтдельногоКонтрагента");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ВозвратТоваровМеждуОрганизациями" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, ОрганизацияПолучатель, 
			|ЦенаВключаетНДС, РасчетыЧерезОтдельногоКонтрагента");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗаявкаНаРасходованиеДенежныхСредств" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Партнер, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("РасшифровкаПлатежа", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.КорректировкаРеализации" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СписаниеБезналичныхДенежныхСредств" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, БанковскийСчет, ТипПлатежногоДокумента, ХозяйственнаяОперация,
			|СуммаДокумента, Контрагент, БанковскийСчетКонтрагента, БанковскийСчетПолучатель, ПодотчетноеЛицо,
			|НазначениеПлатежа, Валюта, ВидПлатежа, ОчередностьПлатежа, ПеречислениеВБюджет, ВидПеречисленияВБюджет,
			|СтатусСоставителя, КодБК, КодОКАТО, ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПоступлениеБезналичныхДенежныхСредств" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, БанковскийСчет, ТипПлатежногоДокумента, ХозяйственнаяОперация,
			|СуммаДокумента, Контрагент, БанковскийСчетКонтрагента, БанковскийСчетОтправитель, ПодотчетноеЛицо,
			|НазначениеПлатежа, Валюта");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	
	ИначеЕсли ИмяОбъекта = "Документ.АктОРасхожденияхПослеПриемки" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.АктОРасхожденияхПослеОтгрузки" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ВозвратТоваровПоставщику" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);

	ИначеЕсли ИмяОбъекта = "Документ.ВыкупТоваровХранителем" Тогда
		// Реквизиты объекта
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// Табличная часть
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Объект[СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти].Выгрузить(,
		СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
		
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция РеквизитыРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ "+ СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
	+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + "." + СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти
	+ " КАК ТекущийОбъектИмяТабличнойЧасти
	|ГДЕ
	|	ТекущийОбъектИмяТабличнойЧасти.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция РеквизитыРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Новый ТаблицаЗначений;
	
	СтруктураРеквизитовРегистрации = СтрокаТаблицыРеквизитовРегистрации.СтруктураРеквизитовОбъекта;
	Для Каждого РеквизитРегистрации Из СтруктураРеквизитовРегистрации Цикл
		ТаблицаРеквизитовРегистрации.Колонки.Добавить(РеквизитРегистрации.Ключ);
	КонецЦикла;
	
	СтрокаТаблицы = ТаблицаРеквизитовРегистрации.Добавить();
	Для Каждого РеквизитРегистрации Из СтруктураРеквизитовРегистрации Цикл
		
		СтрокаТаблицы[РеквизитРегистрации.Ключ] = Объект[РеквизитРегистрации.Ключ];
	КонецЦикла;
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция РеквизитыРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ " + СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
	+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + " КАК ТекущийОбъект
	|ГДЕ
	|	ТекущийОбъект.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

// Проверяет переданные таблицы реквизитов на совпадения.
//
// Параметры:
//  Таблица1 - ТаблицаЗначений - первая таблица проверки, реквизиты, которые надо проверить на совпадение.
//  Таблица2 - ТаблицаЗначений - вторая таблица проверки.
//  РеквизитыОбъекта - Строка - реквизиты, перечисленные через запятую.
//  ДопПараметры - Структура - структура дополнительных параметров, по которым надо проводить сравнение.
//
Функция ТаблицыРеквизитовОбъектовОдинаковые(Таблица1, Таблица2, РеквизитыОбъекта, ДопПараметры = Неопределено)
	
	ДобавитьИтераторТаблице(Таблица1, +1);
	ДобавитьИтераторТаблице(Таблица2, -1);
	
	ТаблицаРезультат = Таблица1.Скопировать();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица2, ТаблицаРезультат);
	
	ТаблицаРезультат.Свернуть(РеквизитыОбъекта, "ИтераторТаблицыРеквизитовОбъекта");
	
	КоличествоОдинаковыхСтрок = ТаблицаРезультат.НайтиСтроки(Новый Структура("ИтераторТаблицыРеквизитовОбъекта", 0)).Количество();
	
	КоличествоСтрокТаблицы = ТаблицаРезультат.Количество();
	ПризнакСовпадения = КоличествоОдинаковыхСтрок = КоличествоСтрокТаблицы;
	
	Если НЕ ПризнакСовпадения И ЗначениеЗаполнено(ДопПараметры) Тогда
		Если ДопПараметры.Свойство("ИмяТабличнойЧасти") Тогда
			ИмяТабличнойЧасти = ДопПараметры.ИмяТабличнойЧасти;
		КонецЕсли;
		Если ДопПараметры.Свойство("СтрокаДереваСравнения") Тогда
			СтрокаДереваСравнения = ДопПараметры.СтрокаДереваСравнения;
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Шапка" Тогда
			
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = НСтр("ru = 'Реквизиты шапки'");
			Для Каждого ТекСтрокаТаб1 Из Таблица1 Цикл
				Для Каждого ТекКолонка Из Таблица1.Колонки Цикл
					ИмяКолонки = ТекКолонка.Имя;
					Если ИмяКолонки = "ИтераторТаблицыРеквизитовОбъекта" Тогда
						Продолжить;
					КонецЕсли;
					НайденнаяСтрокаТаб2 = Таблица2.Найти( - ТекСтрокаТаб1.ИтераторТаблицыРеквизитовОбъекта,
						"ИтераторТаблицыРеквизитовОбъекта");
					Если НЕ ЗначениеЗаполнено(НайденнаяСтрокаТаб2) 
						ИЛИ	НайденнаяСтрокаТаб2[ИмяКолонки] = ТекСтрокаТаб1[ИмяКолонки] Тогда
						Продолжить;
					КонецЕсли;
					НовСтрокаДереваРеквизита = НовСтрокаДереваМесто.Строки.Добавить();
					НовСтрокаДереваРеквизита.Реквизит  = ИмяКолонки;
					НовСтрокаДереваЗнч            = НовСтрокаДереваРеквизита.Строки.Добавить();
					НовСтрокаДереваЗнч.ЗначениеБД = ТекСтрокаТаб1[ИмяКолонки];
					НовСтрокаДереваЗнч.ЗначениеЭД = НайденнаяСтрокаТаб2[ИмяКолонки];
					
				КонецЦикла;
			КонецЦикла;
		Иначе
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = СтрШаблон(НСтр("ru = 'Табличная часть <%1>'"), ИмяТабличнойЧасти);
			НовСтрокаДереваРеквизита = НовСтрокаДереваМесто.Строки.Добавить();
			НовСтрокаДереваРеквизита.Реквизит = "<Изменена>";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПризнакСовпадения;
	
КонецФункции

Процедура ДобавитьИтераторТаблице(Таблица, ЗначениеИтератора)
	
	Таблица.Колонки.Добавить("ИтераторТаблицыРеквизитовОбъекта");
	Таблица.ЗаполнитьЗначения(ЗначениеИтератора, "ИтераторТаблицыРеквизитовОбъекта");
	
КонецПроцедуры

// Возращает данные по прослеживаемым товарам из ТЧ Виды запасов
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документ, для которого необходимо получить данные;
//  ТипДокумента - Тип - Тип документа.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с данными
//
Функция ПолучитьДанныеПоПрослеживаемостиДляКомиссии(ДокументСсылка, ТипДокумента) Экспорт
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыЗапасов.НомерСтроки                  КАК НомерСтроки,
	|	ВидыЗапасов.Ссылка                       КАК Ссылка,
	|	Аналитика.Номенклатура                   КАК Номенклатура,
	|	Аналитика.Характеристика                 КАК Характеристика,
	|	ВидыЗапасов.Количество			         КАК КоличествоУпаковок,
	|	ВидыЗапасов.КоличествоПоРНПТ             КАК Количество,
	|	ВидыЗапасов.НомерГТД                     КАК НомерГТД,
	|	ЕСТЬNULL(ВидыЗапасов.НомерГТД.Код, НЕОПРЕДЕЛЕНО) КАК НомерТовара,	
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры   КАК АналитикаУчетаНоменклатуры,
	|	ЕСТЬNULL(СпрНоменклатура.ЕдиницаИзмеренияТНВЭД.Код, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(СпрНоменклатура.ЕдиницаИзмеренияТНВЭД.Наименование, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмеренияНаименование
	|ИЗ
	|	&ТипДокумента КАК ВидыЗапасов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО СпрНоменклатура.Ссылка = Аналитика.Номенклатура
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|	И ЕСТЬNULL(Аналитика.Номенклатура.ПрослеживаемыйТовар, ЛОЖЬ)
	|	И ЕСТЬNULL(Аналитика.Номенклатура.ВестиУчетПоГТД, ЛОЖЬ)
	|	И ВидыЗапасов.КоличествоПоРНПТ <> 0";
	
	Если ТипДокумента = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТипДокумента", "Документ.ОтчетКомитенту.ВидыЗапасов");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТипДокумента", "Документ.ОтчетКомитентуОСписании.ВидыЗапасов");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция РаспоряжениеДляПолученияВариантаПриемкиТоваров(ДокументОбъект)
	
	ВариантПриемкиТоваровДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Договор, "ВариантПриемкиТоваров");
	ВариантПриемкиТоваровСоглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Соглашение, "ВариантПриемкиТоваров");

	СкладыТаблицы = ДокументОбъект.Товары.Выгрузить(,"Склад").ВыгрузитьКолонку("Склад");
	ОрдернаяСхемаПриПриемке = СкладыСервер.ЕстьОрдерныйНаПоступлениеСклад(СкладыТаблицы, ДокументОбъект.Дата, ДокументОбъект.Склад);
	
	Если Справочники.ДоговорыКонтрагентов.ДоговорИспользуетсяПриПриемке(ВариантПриемкиТоваровДоговор)
		И ОрдернаяСхемаПриПриемке Тогда
		Возврат ДокументОбъект.Договор;
	ИначеЕсли Справочники.СоглашенияСПоставщиками.СоглашениеИспользуетсяПриПриемке(ВариантПриемкиТоваровСоглашение)
		И ОрдернаяСхемаПриПриемке Тогда
		Возврат ДокументОбъект.Соглашение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область НастройкиФормированияДокумента

Функция ЗапросКонструктораДополнительныхПолейШапкиУПД()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Номер КАК Номер,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК Дата,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Организация КАК Организация,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Контрагент КАК Контрагент,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.СчетФактураОснование КАК СчетФактураОснование,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.СтрокаПлатежноРасчетныеДокументы КАК СтрокаПлатежноРасчетныеДокументы,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Исправление КАК Исправление,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправления,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Корректировочный КАК Корректировочный,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Валюта КАК Валюта,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ВыставленВЭлектронномВиде КАК ВыставленВЭлектронномВиде,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ДатаВыставления КАК ДатаВыставления,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.КодВидаОперации КАК КодВидаОперации,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.КППКонтрагента КАК КППКонтрагента,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.КодВидаОперацииНаУменьшение КАК КодВидаОперацииНаУменьшение,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Подразделение КАК Подразделение,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Ответственный КАК Ответственный,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.СводныйКорректировочный КАК СводныйКорректировочный,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ИННКонтрагента КАК ИННКонтрагента,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта,
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	СчетФактураВыданныйАванс.Ссылка,
		|	СчетФактураВыданныйАванс.Номер,
		|	СчетФактураВыданныйАванс.Дата,
		|	СчетФактураВыданныйАванс.Организация,
		|	СчетФактураВыданныйАванс.Контрагент,
		|	СчетФактураВыданныйАванс.СчетФактураОснование,
		|	СчетФактураВыданныйАванс.СтрокаПлатежноРасчетныеДокументы,
		|	СчетФактураВыданныйАванс.Исправление,
		|	СчетФактураВыданныйАванс.НомерИсправления,
		|	СчетФактураВыданныйАванс.Корректировочный,
		|	NULL,
		|	СчетФактураВыданныйАванс.ВыставленВЭлектронномВиде,
		|	СчетФактураВыданныйАванс.ДатаВыставления,
		|	СчетФактураВыданныйАванс.КодВидаОперации,
		|	NULL,
		|	СчетФактураВыданныйАванс.КППКонтрагента,
		|	NULL,
		|	СчетФактураВыданныйАванс.Подразделение,
		|	СчетФактураВыданныйАванс.Ответственный,
		|	СчетФактураВыданныйАванс.СводныйКорректировочный,
		|	СчетФактураВыданныйАванс.ИННКонтрагента,
		|	СчетФактураВыданныйАванс.ИдентификаторГосКонтракта,
		|	СчетФактураВыданныйАванс.ДокументОснование
		|ИЗ
		|	Документ.СчетФактураВыданныйАванс КАК СчетФактураВыданныйАванс
		|ГДЕ
		|	СчетФактураВыданныйАванс.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиСчетаФактуры()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданный.Ссылка КАК Ссылка,
		|	СчетФактураВыданный.Номер КАК Номер,
		|	СчетФактураВыданный.Дата КАК Дата,
		|	СчетФактураВыданный.Организация КАК Организация,
		|	СчетФактураВыданный.Контрагент КАК Контрагент,
		|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
		|	СчетФактураВыданный.СчетФактураОснование КАК СчетФактураОснование,
		|	СчетФактураВыданный.СтрокаПлатежноРасчетныеДокументы КАК СтрокаПлатежноРасчетныеДокументы,
		|	СчетФактураВыданный.Исправление КАК Исправление,
		|	СчетФактураВыданный.НомерИсправления КАК НомерИсправления,
		|	СчетФактураВыданный.Корректировочный КАК Корректировочный,
		|	СчетФактураВыданный.Валюта КАК Валюта,
		|	СчетФактураВыданный.ВыставленВЭлектронномВиде КАК ВыставленВЭлектронномВиде,
		|	СчетФактураВыданный.ДатаВыставления КАК ДатаВыставления,
		|	СчетФактураВыданный.КодВидаОперации КАК КодВидаОперации,
		|	СчетФактураВыданный.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	СчетФактураВыданный.КППКонтрагента КАК КППКонтрагента,
		|	СчетФактураВыданный.КодВидаОперацииНаУменьшение КАК КодВидаОперацииНаУменьшение,
		|	СчетФактураВыданный.Подразделение КАК Подразделение,
		|	СчетФактураВыданный.Ответственный КАК Ответственный,
		|	СчетФактураВыданный.СводныйКорректировочный КАК СводныйКорректировочный,
		|	СчетФактураВыданный.ИННКонтрагента КАК ИННКонтрагента,
		|	СчетФактураВыданный.ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	СчетФактураВыданныйАванс.Ссылка,
		|	СчетФактураВыданныйАванс.Номер,
		|	СчетФактураВыданныйАванс.Дата,
		|	СчетФактураВыданныйАванс.Организация,
		|	СчетФактураВыданныйАванс.Контрагент,
		|	СчетФактураВыданныйАванс.ДокументОснование,
		|	СчетФактураВыданныйАванс.СчетФактураОснование,
		|	СчетФактураВыданныйАванс.СтрокаПлатежноРасчетныеДокументы,
		|	СчетФактураВыданныйАванс.Исправление,
		|	СчетФактураВыданныйАванс.НомерИсправления,
		|	СчетФактураВыданныйАванс.Корректировочный,
		|	NULL,
		|	СчетФактураВыданныйАванс.ВыставленВЭлектронномВиде,
		|	СчетФактураВыданныйАванс.ДатаВыставления,
		|	СчетФактураВыданныйАванс.КодВидаОперации,
		|	NULL,
		|	СчетФактураВыданныйАванс.КППКонтрагента,
		|	NULL,
		|	СчетФактураВыданныйАванс.Подразделение,
		|	СчетФактураВыданныйАванс.Ответственный,
		|	СчетФактураВыданныйАванс.СводныйКорректировочный,
		|	СчетФактураВыданныйАванс.ИННКонтрагента,
		|	СчетФактураВыданныйАванс.ИдентификаторГосКонтракта
		|ИЗ
		|	Документ.СчетФактураВыданныйАванс КАК СчетФактураВыданныйАванс
		|ГДЕ
		|	СчетФактураВыданныйАванс.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиРеализации()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Номер КАК Номер,
		|	РеализацияТоваровУслуг.Дата КАК Дата,
		|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
		|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
		|	РеализацияТоваровУслуг.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	РеализацияТоваровУслуг.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
		|	РеализацияТоваровУслуг.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
		|	РеализацияТоваровУслуг.Валюта КАК Валюта,
		|	РеализацияТоваровУслуг.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	РеализацияТоваровУслуг.Грузоотправитель КАК Грузоотправитель,
		|	РеализацияТоваровУслуг.Грузополучатель КАК Грузополучатель,
		|	РеализацияТоваровУслуг.УдалитьДатаПлатежа КАК УдалитьДатаПлатежа,
		|	РеализацияТоваровУслуг.Дата КАК ДатаРаспоряжения,
		|	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
		|	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
		|	РеализацияТоваровУслуг.ДоверенностьЛицо КАК ДоверенностьЛицо,
		|	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
		|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
		|	РеализацияТоваровУслуг.Организация КАК Организация,
		|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|	РеализацияТоваровУслуг.Менеджер КАК Менеджер,
		|	РеализацияТоваровУслуг.НалогообложениеНДС КАК НалогообложениеНДС,
		|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|	РеализацияТоваровУслуг.Партнер КАК Партнер,
		|	РеализацияТоваровУслуг.Подразделение КАК Подразделение,
		|	РеализацияТоваровУслуг.Сделка КАК Сделка,
		|	РеализацияТоваровУслуг.СкидкиРассчитаны КАК СкидкиРассчитаны,
		|	РеализацияТоваровУслуг.Склад КАК Склад,
		|	РеализацияТоваровУслуг.Согласован КАК Согласован,
		|	РеализацияТоваровУслуг.Соглашение КАК Соглашение,
		|	РеализацияТоваровУслуг.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	РеализацияТоваровУслуг.ФормаОплаты КАК ФормаОплаты,
		|	РеализацияТоваровУслуг.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	РеализацияТоваровУслуг.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	РеализацияТоваровУслуг.Касса КАК Касса,
		|	РеализацияТоваровУслуг.Отпустил КАК Отпустил,
		|	РеализацияТоваровУслуг.ОтпустилДолжность КАК ОтпустилДолжность,
		|	РеализацияТоваровУслуг.РеализацияПоЗаказам КАК РеализацияПоЗаказам,
		|	РеализацияТоваровУслуг.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	РеализацияТоваровУслуг.КартаЛояльности КАК КартаЛояльности,
		|	РеализацияТоваровУслуг.Договор КАК Договор,
		|	РеализацияТоваровУслуг.Основание КАК Основание,
		|	РеализацияТоваровУслуг.Статус КАК Статус,
		|	РеализацияТоваровУслуг.Автор КАК Автор,
		|	РеализацияТоваровУслуг.УдалитьСуммаПредоплаты КАК УдалитьСуммаПредоплаты,
		|	РеализацияТоваровУслуг.УдалитьСуммаПредоплатыЗаТару КАК УдалитьСуммаПредоплатыЗаТару,
		|	РеализацияТоваровУслуг.СпособДоставки КАК СпособДоставки,
		|	РеализацияТоваровУслуг.ЗонаДоставки КАК ЗонаДоставки,
		|	РеализацияТоваровУслуг.ПеревозчикПартнер КАК ПеревозчикПартнер,
		|	РеализацияТоваровУслуг.ВремяДоставкиС КАК ВремяДоставкиС,
		|	РеализацияТоваровУслуг.ВремяДоставкиПо КАК ВремяДоставкиПо,
		|	РеализацияТоваровУслуг.АдресДоставкиПеревозчика КАК АдресДоставкиПеревозчика,
		|	РеализацияТоваровУслуг.КонтактноеЛицо КАК КонтактноеЛицо,
		|	РеализацияТоваровУслуг.Руководитель КАК Руководитель,
		|	РеализацияТоваровУслуг.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
		|	РеализацияТоваровУслуг.ПорядокРасчетов КАК ПорядокРасчетов,
		|	РеализацияТоваровУслуг.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	РеализацияТоваровУслуг.ДатаВозвратаМногооборотнойТары КАК ДатаВозвратаМногооборотнойТары,
		|	РеализацияТоваровУслуг.СостояниеЗаполненияМногооборотнойТары КАК СостояниеЗаполненияМногооборотнойТары,
		|	РеализацияТоваровУслуг.ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную,
		|	РеализацияТоваровУслуг.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
		|	РеализацияТоваровУслуг.ОснованиеДата КАК ОснованиеДата,
		|	РеализацияТоваровУслуг.ОснованиеНомер КАК ОснованиеНомер,
		|	РеализацияТоваровУслуг.ДопоставкаПоРеализации КАК ДопоставкаПоРеализации,
		|	РеализацияТоваровУслуг.ДатаПереходаПраваСобственности КАК ДатаПереходаПраваСобственности,
		|	РеализацияТоваровУслуг.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
		|	РеализацияТоваровУслуг.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	РеализацияТоваровУслуг.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
		|	РеализацияТоваровУслуг.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	РеализацияТоваровУслуг.КурсЧислитель КАК КурсЧислитель,
		|	РеализацияТоваровУслуг.КурсЗнаменатель КАК КурсЗнаменатель,
		|	РеализацияТоваровУслуг.ОплатаВВалюте КАК ОплатаВВалюте,
		|	РеализацияТоваровУслуг.ЕстьМаркируемаяПродукцияГИСМ КАК ЕстьМаркируемаяПродукцияГИСМ,
		|	РеализацияТоваровУслуг.УдалитьЕстьАлкогольнаяПродукцияДляРеализацииРозницаЕГАИС КАК УдалитьЕстьАлкогольнаяПродукцияДляРеализацииРозницаЕГАИС,
		|	РеализацияТоваровУслуг.СуммаВзаиморасчетовПоТаре КАК СуммаВзаиморасчетовПоТаре
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КорректировкаРеализации.Ссылка,
		|	КорректировкаРеализации.Номер,
		|	КорректировкаРеализации.Дата,
		|	КорректировкаРеализации.АдресДоставки,
		|	КорректировкаРеализации.БанковскийСчетОрганизации,
		|	КорректировкаРеализации.БанковскийСчетКонтрагента,
		|	КорректировкаРеализации.БанковскийСчетГрузоотправителя,
		|	КорректировкаРеализации.БанковскийСчетГрузополучателя,
		|	КорректировкаРеализации.Валюта,
		|	КорректировкаРеализации.ВалютаВзаиморасчетов,
		|	КорректировкаРеализации.Грузополучатель,
		|	КорректировкаРеализации.Грузоотправитель,
		|	КорректировкаРеализации.ДатаПлатежа,
		|	NULL,
		|	КорректировкаРеализации.ДоверенностьВыдана,
		|	КорректировкаРеализации.ДоверенностьДата,
		|	КорректировкаРеализации.ДоверенностьЛицо,
		|	КорректировкаРеализации.ДоверенностьНомер,
		|	NULL,
		|	КорректировкаРеализации.Организация,
		|	КорректировкаРеализации.Контрагент,
		|	КорректировкаРеализации.Менеджер,
		|	КорректировкаРеализации.НалогообложениеНДС,
		|	КорректировкаРеализации.СуммаДокумента,	
		|	КорректировкаРеализации.Партнер,
		|	КорректировкаРеализации.Подразделение,
		|	КорректировкаРеализации.Сделка,
		|	NULL,
		|	КорректировкаРеализации.Склад,
		|	КорректировкаРеализации.Согласован,
		|	КорректировкаРеализации.Соглашение,
		|	КорректировкаРеализации.СуммаВзаиморасчетов,
		|	КорректировкаРеализации.ФормаОплаты,
		|	NULL,
		|	КорректировкаРеализации.ЦенаВключаетНДС,
		|	NULL,
		|	КорректировкаРеализации.Отпустил,
		|	КорректировкаРеализации.ОтпустилДолжность,
		|	КорректировкаРеализации.ПродажаПоЗаказам,
		|	NULL,
		|	NULL,		
		|	КорректировкаРеализации.Договор,
		|	КорректировкаРеализации.Основание,
		|	NULL,
		|	NULL,		
		|	NULL,
		|	NULL,
		|	NULL,		
		|	NULL,
		|	NULL,		
		|	NULL,		
		|	NULL,		
		|	NULL,		
		|	NULL,		
		|	КорректировкаРеализации.Руководитель,
		|	КорректировкаРеализации.ГлавныйБухгалтер,
		|	КорректировкаРеализации.ПорядокРасчетов,
		|	NULL,
		|	NULL,		
		|	NULL,		
		|	NULL,		
		|	NULL,		
		|	КорректировкаРеализации.ОснованиеДата,
		|	КорректировкаРеализации.ОснованиеНомер,
		|	NULL,		
		|	NULL,		
		|	КорректировкаРеализации.ВариантОформленияПродажи,
		|	NULL,		
		|	NULL,		
		|	КорректировкаРеализации.НаправлениеДеятельности,
		|	КорректировкаРеализации.КурсЧислитель,
		|	КорректировкаРеализации.КурсЗнаменатель,
		|	NULL,		
		|	NULL,		
		|	NULL,		
		|	NULL		
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиАкта()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АктВыполненныхРабот.Ссылка КАК Ссылка,
		|	АктВыполненныхРабот.Номер КАК Номер,
		|	АктВыполненныхРабот.Дата КАК Дата,
		|	АктВыполненныхРабот.АктПоЗаказам КАК АктПоЗаказам,
		|	АктВыполненныхРабот.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	АктВыполненныхРабот.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
		|	АктВыполненныхРабот.Валюта КАК Валюта,
		|	АктВыполненныхРабот.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	АктВыполненныхРабот.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	АктВыполненныхРабот.ДополнительнаяИнформацияШапки КАК ДополнительнаяИнформацияШапки,
		|	АктВыполненныхРабот.ЗаказКлиента КАК ЗаказКлиента,
		|	АктВыполненныхРабот.Касса КАК Касса,
		|	АктВыполненныхРабот.Комментарий КАК Комментарий,
		|	АктВыполненныхРабот.Контрагент КАК Контрагент,
		|	АктВыполненныхРабот.Менеджер КАК Менеджер,
		|	АктВыполненныхРабот.НалогообложениеНДС КАК НалогообложениеНДС,
		|	АктВыполненныхРабот.Организация КАК Организация,
		|	АктВыполненныхРабот.Партнер КАК Партнер,
		|	АктВыполненныхРабот.Подразделение КАК Подразделение,
		|	АктВыполненныхРабот.Сделка КАК Сделка,
		|	АктВыполненныхРабот.СкидкиРассчитаны КАК СкидкиРассчитаны,
		|	АктВыполненныхРабот.Согласован КАК Согласован,
		|	АктВыполненныхРабот.Соглашение КАК Соглашение,
		|	АктВыполненныхРабот.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	АктВыполненныхРабот.СуммаДокумента КАК СуммаДокумента,
		|	АктВыполненныхРабот.ФормаОплаты КАК ФормаОплаты,
		|	АктВыполненныхРабот.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	АктВыполненныхРабот.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	АктВыполненныхРабот.КартаЛояльности КАК КартаЛояльности,
		|	АктВыполненныхРабот.Договор КАК Договор,
		|	АктВыполненныхРабот.Автор КАК Автор,
		|	АктВыполненныхРабот.КонтактноеЛицо КАК КонтактноеЛицо,
		|	АктВыполненныхРабот.Руководитель КАК Руководитель,
		|	АктВыполненныхРабот.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
		|	АктВыполненныхРабот.ПорядокРасчетов КАК ПорядокРасчетов,
		|	АктВыполненныхРабот.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	АктВыполненныхРабот.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	АктВыполненныхРабот.КурсЧислитель КАК КурсЧислитель,
		|	АктВыполненныхРабот.КурсЗнаменатель КАК КурсЗнаменатель,
		|	АктВыполненныхРабот.ОплатаВВалюте КАК ОплатаВВалюте,
		|	АктВыполненныхРабот.Основание КАК Основание,
		|	АктВыполненныхРабот.ОснованиеДата КАК ОснованиеДата,
		|	АктВыполненныхРабот.ОснованиеНомер КАК ОснованиеНомер
		|ИЗ
		|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
		|ГДЕ
		|	АктВыполненныхРабот.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КорректировкаРеализации.Ссылка,
		|	КорректировкаРеализации.Номер,
		|	КорректировкаРеализации.Дата,
		|	КорректировкаРеализации.ПродажаПоЗаказам,
		|	КорректировкаРеализации.БанковскийСчетОрганизации,
		|	КорректировкаРеализации.БанковскийСчетКонтрагента,
		|	КорректировкаРеализации.Валюта,
		|	КорректировкаРеализации.ВалютаВзаиморасчетов,
		|	NULL,
		|	NULL,		
		|	NULL,		
		|	NULL,		
		|	КорректировкаРеализации.Комментарий,
		|	КорректировкаРеализации.Контрагент,
		|	КорректировкаРеализации.Менеджер,
		|	КорректировкаРеализации.НалогообложениеНДС,
		|	КорректировкаРеализации.Организация,
		|	КорректировкаРеализации.Партнер,
		|	КорректировкаРеализации.Подразделение,
		|	КорректировкаРеализации.Сделка,
		|	NULL,
		|	КорректировкаРеализации.Согласован,
		|	КорректировкаРеализации.Соглашение,
		|	КорректировкаРеализации.СуммаВзаиморасчетов,
		|	КорректировкаРеализации.СуммаДокумента,	
		|	КорректировкаРеализации.ФормаОплаты,
		|	КорректировкаРеализации.ЦенаВключаетНДС,
		|	NULL,
		|	NULL,
		|	КорректировкаРеализации.Договор,
		|	NULL,
		|	NULL,
		|	КорректировкаРеализации.Руководитель,
		|	КорректировкаРеализации.ГлавныйБухгалтер,
		|	КорректировкаРеализации.ПорядокРасчетов,
		|	NULL,
		|	КорректировкаРеализации.НаправлениеДеятельности,
		|	КорректировкаРеализации.КурсЧислитель,
		|	КорректировкаРеализации.КурсЗнаменатель,
		|	NULL,
		|	КорректировкаРеализации.Основание,
		|	КорректировкаРеализации.ОснованиеДата,
		|	КорректировкаРеализации.ОснованиеНомер	
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиКорректировкиРеализации()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КорректировкаРеализации.Ссылка КАК Ссылка,
		|	КорректировкаРеализации.Номер КАК Номер,
		|	КорректировкаРеализации.Дата КАК Дата,
		|	КорректировкаРеализации.ДокументОснование КАК ДокументОснование,
		|	КорректировкаРеализации.Партнер КАК Партнер,
		|	КорректировкаРеализации.Контрагент КАК Контрагент,
		|	КорректировкаРеализации.Соглашение КАК Соглашение,
		|	КорректировкаРеализации.Организация КАК Организация,
		|	КорректировкаРеализации.Договор КАК Договор,
		|	КорректировкаРеализации.Склад КАК Склад,
		|	КорректировкаРеализации.Подразделение КАК Подразделение,
		|	КорректировкаРеализации.Сделка КАК Сделка,
		|	КорректировкаРеализации.Валюта КАК Валюта,
		|	КорректировкаРеализации.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	КорректировкаРеализации.Менеджер КАК Менеджер,
		|	КорректировкаРеализации.СуммаДокумента КАК СуммаДокумента,
		|	КорректировкаРеализации.ДатаПлатежа КАК ДатаПлатежа,
		|	КорректировкаРеализации.ФормаОплаты КАК ФормаОплаты,
		|	КорректировкаРеализации.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	КорректировкаРеализации.НалогообложениеНДС КАК НалогообложениеНДС,
		|	КорректировкаРеализации.ПродажаПоЗаказам КАК ПродажаПоЗаказам,
		|	КорректировкаРеализации.ПодразделениеДоходы КАК ПодразделениеДоходы,
		|	КорректировкаРеализации.СтатьяДоходов КАК СтатьяДоходов,
		|	КорректировкаРеализации.АналитикаДоходов КАК АналитикаДоходов,
		|	КорректировкаРеализации.ПодразделениеРасходы КАК ПодразделениеРасходы,
		|	КорректировкаРеализации.СтатьяРасходов КАК СтатьяРасходов,
		|	КорректировкаРеализации.АналитикаРасходов КАК АналитикаРасходов,
		|	КорректировкаРеализации.Согласован КАК Согласован,
		|	КорректировкаРеализации.Отпустил КАК Отпустил,
		|	КорректировкаРеализации.ОтпустилДолжность КАК ОтпустилДолжность,
		|	КорректировкаРеализации.Основание КАК Основание,
		|	КорректировкаРеализации.Грузополучатель КАК Грузополучатель,
		|	КорректировкаРеализации.Грузоотправитель КАК Грузоотправитель,
		|	КорректировкаРеализации.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
		|	КорректировкаРеализации.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	КорректировкаРеализации.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
		|	КорректировкаРеализации.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
		|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки,
		|	КорректировкаРеализации.ДоверенностьНомер КАК ДоверенностьНомер,
		|	КорректировкаРеализации.ДоверенностьДата КАК ДоверенностьДата,
		|	КорректировкаРеализации.ДоверенностьВыдана КАК ДоверенностьВыдана,
		|	КорректировкаРеализации.ДоверенностьЛицо КАК ДоверенностьЛицо,
		|	КорректировкаРеализации.Комментарий КАК Комментарий,
		|	КорректировкаРеализации.Руководитель КАК Руководитель,
		|	КорректировкаРеализации.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
		|	КорректировкаРеализации.ПорядокРасчетов КАК ПорядокРасчетов,
		|	КорректировкаРеализации.ВидКорректировки КАК ВидКорректировки,
		|	КорректировкаРеализации.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	КорректировкаРеализации.ОснованиеДата КАК ОснованиеДата,
		|	КорректировкаРеализации.ОснованиеНомер КАК ОснованиеНомер,
		|	КорректировкаРеализации.АктОРасхожденияхПослеОтгрузкиОснование КАК АктОРасхожденияхПослеОтгрузкиОснование,
		|	КорректировкаРеализации.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
		|	КорректировкаРеализации.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	КорректировкаРеализации.КурсЧислитель КАК КурсЧислитель,
		|	КорректировкаРеализации.КурсЗнаменатель КАК КурсЗнаменатель
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьСуммыДляСчетаФактуры(ДанныеДляОбъекта, ДеревоДанных)
	
	Суммы = Документы.СчетФактураПолученный.ПустаяСсылка().ДокументыОснования.ВыгрузитьКолонки();
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Суммы.Добавить();
		НоваяСтрока.ДокументОснование = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ДокументОснование");
		
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(ДанныеДляОбъекта.Шапка.Организация, ТекущаяДатаСеанса(), Истина), СтавкаНДС);
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,  "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
	КонецЦикла;
	
	// Свернем суммы по реквизитам табличной части ДокументыОснования.
	Суммы.Свернуть("ДокументОснование,ХозяйственнаяОперация,ИсходныйДокумент,СтавкаНДС", "Сумма,СуммаНДС");
	ДанныеДляОбъекта.Вставить("Суммы", Суммы);
	
КонецПроцедуры

Процедура ЗаполнитьСуммыДляКорректировочногоСчетаФактуры(ДанныеДляОбъекта, ДеревоДанных)
	
	Суммы = Документы.СчетФактураПолученный.ПустаяСсылка().ДокументыОснования.ВыгрузитьКолонки();
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Суммы.Добавить();
		НоваяСтрока.ДокументОснование = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ДокументОснование");
		
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СтавкаНДС = ?(СтавкаНДС = "НДС исчисляется налоговым агентом", УчетНДСУП.СтавкаНДСПоУмолчанию(ДанныеДляОбъекта.Шапка.Организация, ТекущаяДатаСеанса(), Истина), СтавкаНДС);
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,  "СведенияОТоварах.НомерСтроки.СуммаНалога");
		НоваяСтрока.СуммаУвеличение = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомУвеличение");
		НоваяСтрока.СуммаУменьшение = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомУменьшение");
		НоваяСтрока.СуммаНДСУвеличение = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалогаУвеличение");
		НоваяСтрока.СуммаНДСУменьшение = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалогаУменьшение");
		
	КонецЦикла;
	
	// Свернем суммы по реквизитам табличной части ДокументыОснования.
	Суммы.Свернуть("ДокументОснование,ХозяйственнаяОперация,ИсходныйДокумент,СтавкаНДС", "Сумма,СуммаНДС,СуммаУвеличение,СуммаУменьшение,СуммаНДСУвеличение,СуммаНДСУменьшение");
	ДанныеДляОбъекта.Вставить("Суммы", Суммы);
	
КонецПроцедуры

#Область АктОРасхождениях

Функция РеквизитыУчастникаАктаОРасхождениях(Знач Участник)
	
	Реквизиты = Новый Структура("ИНН,КПП,Наименование");
	
	Если Участник.ТипУчастника.Свойство("ЮЛ") Тогда
		
		Реквизиты.ИНН = Участник.ТипУчастника.ЮЛ.ИНН;
		Реквизиты.КПП = Участник.ТипУчастника.ЮЛ.КПП;
		Реквизиты.Наименование = Участник.ТипУчастника.ЮЛ.НаименованиеОрганизации;
		
	ИначеЕсли Участник.ТипУчастника.Свойство("ИЛ") Тогда
		
		Реквизиты.Наименование = Участник.ТипУчастника.ИЛ.НаименованиеОрганизации;
		
	ИначеЕсли Участник.ТипУчастника.Свойство("ИП") Тогда
		
		Реквизиты.ИНН = Участник.ТипУчастника.ИП.ИНН;
		
	ИначеЕсли Участник.ТипУчастника.Свойство("ФЛ") Тогда
		
		Реквизиты.ИНН = Участник.ТипУчастника.ФЛ.ИНН;
		ЧастиФИО = Новый Массив;
		Если ЗначениеЗаполнено(Участник.ТипУчастника.ФЛ.Фамилия) Тогда
			ЧастиФИО.Добавить(Участник.ТипУчастника.ФЛ.Фамилия);
		КонецЕсли;
		Если ЗначениеЗаполнено(Участник.ТипУчастника.ФЛ.Имя) Тогда
			ЧастиФИО.Добавить(Участник.ТипУчастника.ФЛ.Имя);
		КонецЕсли;
		Если ЗначениеЗаполнено(Участник.ТипУчастника.ФЛ.Отчество) Тогда
			ЧастиФИО.Добавить(Участник.ТипУчастника.ФЛ.Отчество);
		КонецЕсли;
		Реквизиты.Наименование = СтрСоединить(ЧастиФИО);
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Функция РеквизитыПриемщикаАктаОРасхождениях(Знач Приемщик)
	
	Реквизиты = Новый Структура("ФИО,Представление,Должность");
	Реквизиты.ФИО = Новый Структура("Фамилия,Имя,Отчество");
	
	Если Приемщик.Свойство("РаботникОрганизацииПокупателя") Тогда
		
		Работник = Приемщик.РаботникОрганизацииПокупателя;
		Реквизиты.ФИО.Фамилия = Работник.Фамилия;
		Реквизиты.ФИО.Имя = Работник.Имя;
		Реквизиты.ФИО.Отчество = Работник.Отчество;
		Реквизиты.Представление = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Реквизиты.ФИО);
		Реквизиты.Должность = Работник.Должность;
		
	ИначеЕсли Приемщик.Свойство("ИноеЛицо") Тогда
		
		Если Приемщик.ИноеЛицо.Свойство("ПредставительОрганизации") Тогда
			
			Представитель = Приемщик.ИноеЛицо.ПредставительОрганизации;
			Реквизиты.ФИО.Фамилия = Представитель.Фамилия;
			Реквизиты.ФИО.Имя = Представитель.Имя;
			Реквизиты.ФИО.Отчество = Представитель.Отчество;
			Реквизиты.Представление = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Реквизиты.ФИО);
			Реквизиты.Должность = Представитель.Должность;
			
		ИначеЕсли Приемщик.ИноеЛицо.Свойство("ФизическоеЛицо") Тогда
			
			ФизическоеЛицо = Приемщик.ИноеЛицо.ФизическоеЛицо;
			Реквизиты.ФИО.Фамилия = ФизическоеЛицо.Фамилия;
			Реквизиты.ФИО.Имя = ФизическоеЛицо.Имя;
			Реквизиты.ФИО.Отчество = ФизическоеЛицо.Отчество;
			Реквизиты.Представление = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Реквизиты.ФИО);
			Реквизиты.Должность = ФизическоеЛицо.ОснованиеПолномочий;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Функция НайтиРеализациюТоваровУслуг(Знач Организация, Знач НомерДокумента, Знач ДатаДокумента)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеПервичныхДокументов.Документ КАК СФ,
	|	ДанныеПервичныхДокументов.Документ.ДокументОснование КАК Документ
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|ГДЕ
	|	ДанныеПервичныхДокументов.Организация = &Организация
	|	И ДанныеПервичныхДокументов.Номер В (&НомерДокумента)
	|	И НАЧАЛОПЕРИОДА(ДанныеПервичныхДокументов.Дата, ДЕНЬ) = &ДатаДокумента
	|	И ТИПЗНАЧЕНИЯ(ДанныеПервичныхДокументов.Документ) = ТИП(Документ.СчетФактураВыданный) 
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеПервичныхДокументов.Документ КАК СФ,
	|	ТЧСФ.ДокументОснование КАК Документ
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК ТЧСФ
	|		ПО ТЧСФ.Ссылка = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	ДанныеПервичныхДокументов.Организация = &Организация
	|	И ДанныеПервичныхДокументов.Номер В (&НомерДокумента)
	|	И НАЧАЛОПЕРИОДА(ДанныеПервичныхДокументов.Дата, ДЕНЬ) = &ДатаДокумента
	|	И ТИПЗНАЧЕНИЯ(ДанныеПервичныхДокументов.Документ) = ТИП(Документ.СчетФактураПолученный)
	|
    |ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Неопределено КАК СФ,
	|	ДанныеПервичныхДокументов.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|ГДЕ
	|	ДанныеПервичныхДокументов.Организация = &Организация
	|	И ДанныеПервичныхДокументов.Номер В (&НомерДокумента)
	|	И НАЧАЛОПЕРИОДА(ДанныеПервичныхДокументов.Дата, ДЕНЬ) = &ДатаДокумента
	|	И ТИПЗНАЧЕНИЯ(ДанныеПервичныхДокументов.Документ) В (ТИП(Документ.РеализацияТоваровУслуг),ТИП(Документ.ВозвратТоваровПоставщику))";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(ДатаДокумента));
	
	НомерДокументаБезПрефикса = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Истина, Истина);
	МассивНомеров = Новый Массив;
	МассивНомеров.Добавить(НомерДокумента);
	МассивНомеров.Добавить(НомерДокументаБезПрефикса);
	Запрос.УстановитьПараметр("НомерДокумента", МассивНомеров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Документ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьНаОсновании(Основание, ДокументОбъект)
	
	Запрос = Новый Запрос;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ДокументОбъект.ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ВозвратПоставщику;
		Запрос.Текст = ТекстЗапросаПоОснованиюВозврату();
	Иначе
		ДокументОбъект.ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.РеализацияТоваровУслуг;
		Запрос.Текст = ТекстЗапросаПоОснованиюРеализации();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Основание", Основание);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыОснования = РезультатЗапроса[0].Выбрать();
	РеквизитыОснования.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		РеквизитыОснования.РеализацияТоваровУслуг,
		РеквизитыОснования.СтатусДокумента,
		РеквизитыОснования.ЕстьОшибкиПроведен,
		РеквизитыОснования.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов,
		РеквизитыОснования.СоглашениеДоступноВнешнимПользователям);
	
	// Заполнение шапки
	ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыОснования);
	
	ДокументОбъект.Товары.Загрузить(РезультатЗапроса[1].Выгрузить());
	ДокументОбъект.Серии.Загрузить(РезультатЗапроса[2].Выгрузить());
	
КонецПроцедуры

Функция ТекстЗапросаПоОснованиюРеализации()

	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НЕ РеализацияТоваровУслуг.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
	|			ИЛИ РеализацияТоваровУслуг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваровУслуг,
	|	РеализацияТоваровУслуг.Статус КАК СтатусДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Менеджер,
	|	РеализацияТоваровУслуг.НалогообложениеНДС,
	|	РеализацияТоваровУслуг.Партнер,
	|	РеализацияТоваровУслуг.Валюта,
	|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.Грузоотправитель) КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.ХозяйственнаяОперация,
	|	РеализацияТоваровУслуг.ЦенаВключаетНДС,
	|	РеализацияТоваровУслуг.Договор,
	|	РеализацияТоваровУслуг.КонтактноеЛицо,
	|	РеализацияТоваровУслуг.Соглашение,
	|	РеализацияТоваровУслуг.Подразделение,
	|	РеализацияТоваровУслуг.Соглашение.ДоступноВнешнимПользователям КАК СоглашениеДоступноВнешнимПользователям
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Характеристика,
	|	РеализацияТоваровУслугТовары.Серия,
	|	РеализацияТоваровУслугТовары.Назначение,
	|	РеализацияТоваровУслугТовары.Упаковка,
	|	РеализацияТоваровУслугТовары.КоличествоУпаковок,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.ВидЦены,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.КоличествоУпаковок = 0
	|			ТОГДА РеализацияТоваровУслугТовары.Цена
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Сумма / РеализацияТоваровУслугТовары.КоличествоУпаковок КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК Цена,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.Склад,
	|	РеализацияТоваровУслугТовары.СуммаНДС,
	|	РеализацияТоваровУслугТовары.СуммаСНДС,
	|	РеализацияТоваровУслугТовары.СтатусУказанияСерий,
	|	РеализацияТоваровУслугТовары.Ссылка КАК Реализация,
	|	РеализацияТоваровУслугТовары.ЗаказКлиента КАК ЗаказКлиента,
	|	РеализацияТоваровУслугТовары.КодСтроки КАК КодСтроки,
	|	ИСТИНА КАК ЗаполненоПоРеализации,
	|	РеализацияТоваровУслугТовары.КоличествоУпаковок КАК КоличествоУпаковокПоДокументу,
	|	РеализацияТоваровУслугТовары.Количество КАК КоличествоПоДокументу,
	|	РеализацияТоваровУслугТовары.Сумма КАК СуммаПоДокументу,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДСПоДокументу,
	|	РеализацияТоваровУслугТовары.СуммаСНДС КАК СуммаСНДСПоДокументу
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслугСерии.Серия          КАК Серия,
	|	РеализацияТоваровУслугСерии.Количество     КАК Количество,
	|	РеализацияТоваровУслугСерии.Количество     КАК КоличествоПоДокументу,
	|	РеализацияТоваровУслугСерии.Номенклатура   КАК Номенклатура,
	|	РеализацияТоваровУслугСерии.Характеристика КАК Характеристика,
	|	РеализацияТоваровУслугСерии.Назначение     КАК Назначение,
	|	РеализацияТоваровУслугСерии.Склад          КАК Склад,
	|	РеализацияТоваровУслугСерии.Ссылка         КАК Реализация,
	|	ИСТИНА                                     КАК ЗаполненоПоРеализации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Серии КАК РеализацияТоваровУслугСерии
	|ГДЕ
	|	РеализацияТоваровУслугСерии.Ссылка = &Основание
	|";

КонецФункции 

Функция ТекстЗапросаПоОснованиюВозврату()

	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НЕ ВозвратТоваровПоставщику.Проведен КАК ЕстьОшибкиПроведен,
	|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
	|	ВозвратТоваровПоставщику.Ссылка КАК РеализацияТоваровУслуг,
	|	НЕОПРЕДЕЛЕНО КАК СтатусДокумента,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.Контрагент,
	|	ВозвратТоваровПоставщику.Менеджер,
	|	ВозвратТоваровПоставщику.НалогообложениеНДС,
	|	ВозвратТоваровПоставщику.Партнер,
	|	ВозвратТоваровПоставщику.Валюта,
	|	ПРЕДСТАВЛЕНИЕ(ВозвратТоваровПоставщику.Грузоотправитель) КАК Грузоотправитель,
	|	ВозвратТоваровПоставщику.ХозяйственнаяОперация,
	|	ВозвратТоваровПоставщику.ЦенаВключаетНДС,
	|	ВозвратТоваровПоставщику.Договор,
	|	ВозвратТоваровПоставщику.КонтактноеЛицо,
	|	ВозвратТоваровПоставщику.Соглашение,
	|	ВозвратТоваровПоставщику.Подразделение,
	|	ЛОЖЬ КАК СоглашениеДоступноВнешнимПользователям
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Характеристика,
	|	ВозвратТоваровПоставщикуТовары.Серия,
	|	ВозвратТоваровПоставщикуТовары.Назначение,
	|	ВозвратТоваровПоставщикуТовары.Упаковка,
	|	ВозвратТоваровПоставщикуТовары.КоличествоУпаковок,
	|	ВозвратТоваровПоставщикуТовары.Количество,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ВозвратТоваровПоставщикуТовары.Сумма,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС,
	|	ВозвратТоваровПоставщикуТовары.Ссылка.Склад,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС,
	|	ВозвратТоваровПоставщикуТовары.СуммаСНДС,
	|	ВозвратТоваровПоставщикуТовары.СтатусУказанияСерий,
	|	ВозвратТоваровПоставщикуТовары.Ссылка КАК Реализация,
	|	ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка) КАК ЗаказКлиента,
	|	ИСТИНА КАК ЗаполненоПоРеализации,
	|	ВозвратТоваровПоставщикуТовары.КоличествоУпаковок КАК КоличествоУпаковокПоДокументу,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК КоличествоПоДокументу,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК СуммаПоДокументу,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДСПоДокументу,
	|	ВозвратТоваровПоставщикуТовары.СуммаСНДС КАК СуммаСНДСПоДокументу,
	|	ВозвратТоваровПоставщикуТовары.ДокументПоступления
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровПоставщикуСерии.Серия КАК Серия,
	|	ВозвратТоваровПоставщикуСерии.Количество КАК Количество,
	|	ВозвратТоваровПоставщикуСерии.Количество КАК КоличествоПоДокументу,
	|	ВозвратТоваровПоставщикуСерии.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровПоставщикуСерии.Характеристика КАК Характеристика,
	|	ВозвратТоваровПоставщикуСерии.Назначение КАК Назначение,
	|	ВозвратТоваровПоставщикуСерии.Ссылка.Склад КАК Склад,
	|	ВозвратТоваровПоставщикуСерии.Ссылка КАК Реализация,
	|	ИСТИНА КАК ЗаполненоПоРеализации
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Серии КАК ВозвратТоваровПоставщикуСерии
	|ГДЕ
	|	ВозвратТоваровПоставщикуСерии.Ссылка = &Основание";

КонецФункции

#КонецОбласти

Процедура ЗаполнитьДанныеПервичногоДокументаУКД_2020(СтруктураДанных, СтруктураЭД, ДеревоДанных, Настройки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	НеОблагаетсяНДС = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапки, "НалогообложениеНДС") Тогда
		НДСИсчисляетсяНалоговымАгентом = (ДанныеШапки.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя);
		НеОблагаетсяНДС = (ДанныеШапки.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
			или ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураКомиссионеру") Тогда
		ДокументИсправления = ДанныеШапки.Ссылка.ДокументОснование;
		СчетФактура = ДанныеШапки.Ссылка;	
	Иначе
		ДокументИсправления = ДанныеШапки.Ссылка;
		СчетФактура = Неопределено;
	КонецЕсли;
	
	ОпцииПечати = Новый Структура;
	ОпцииПечати.Вставить("НомерСформированВСчетеФактуре", СтруктураДанных.Свойство("НомерСформированВСчетеФактуре"));
	
	Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента",  ДанныеШапки.Номер);		
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, 
			"НомерДокумента",  НомерСчетаФактурыНаПечать(ДанныеШапки.Номер, ДанныеШапки.ИндексПодразделения));
	КонецЕсли;	
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДанныеШапки.Дата);	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", НСтр("ru = 'Предлагаю изменить стоимость'"));
	
	Если ДанныеШапки.Исправление Тогда
		Если ЗначениеЗаполнено(ДанныеШапки.НомерИсправления) И ЗначениеЗаполнено(ДанныеШапки.ДатаИсправления) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Число(ДанныеШапки.НомерИсправления));	
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", ДанныеШапки.ДатаИсправления);
		КонецЕсли;	
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидДокумента", "Корректировка");
	
	Если ТипЗнч(ДокументИсправления) <> Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда 
		ДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсправления, "ДокументОснование");
	Иначе
		ДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсправления, "ДокументРеализации");
	КонецЕсли;
	ДокументыОснования = Новый Массив;
	Если СчетФактура <> Неопределено Тогда
		ТаблицаИсходныхДокументов = СчетФактура.Товары.Выгрузить();
		ТаблицаИсходныхДокументов.Свернуть("ПредыдущийСчетФактура");
	Иначе
		ТаблицаИсходныхДокументов = Неопределено;
	КонецЕсли;
	
	Если СтруктураЭД.Функция = "КСЧФ"
		Или СтруктураЭД.Функция = "КСЧФДИС" Тогда

		Если ТаблицаИсходныхДокументов <> Неопределено Тогда
			Для Каждого СтрокаТЧ Из ТаблицаИсходныхДокументов Цикл
				Если ЗначениеЗаполнено(СтрокаТЧ.ПредыдущийСчетФактура) Тогда
					ДокументыОснования.Добавить(СтрокаТЧ.ПредыдущийСчетФактура);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из СчетФактура.ДокументыОснования Цикл
			ОснованиеСчетаФактуры = СтрокаТЧ.ДокументОснование;
			Если ЗначениеЗаполнено(ОснованиеСчетаФактуры) Тогда
				ДокументыОснования.Добавить(ОснованиеСчетаФактуры);
			КонецЕсли;
		КонецЦикла;	
		
	Иначе
		Если ЗначениеЗаполнено(ДокументРеализации) Тогда
			ДокументыОснования.Добавить(ДокументРеализации);
		КонецЕсли;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);

	Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВнестиСведенияОВыбытииМаркированныхТоваровВДеревоУПДУКД(ДеревоДанных, ДокументРеализации.ВариантВыбытияМаркируемойПродукции);
	КонецЕсли;
	
	
	ИсходныеДокументы = Новый ТаблицаЗначений;
	ИсходныеДокументы.Колонки.Добавить("НомерИсходногоДокумента");
	ИсходныеДокументы.Колонки.Добавить("ДатаИсходногоДокумента");
	ИсходныеДокументы.Колонки.Добавить("ИсправленияИсходногоДокумента"); 
	
	Если СчетФактура <> Неопределено И Не НеОблагаетсяНДС Тогда
		Для Каждого СтрокаТЧ Из ТаблицаИсходныхДокументов Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ПредыдущийСчетФактура) Тогда
				Продолжить;
			КонецЕсли;
			
			ИсходныйДокумент = СтрокаТЧ.ПредыдущийСчетФактура;
			НомерИсходногоДокумента = ИсходныйДокумент.ПредставлениеНомера;
			ДатаИсходногоДокумента = ?(ИсходныйДокумент.Исправление, ИсходныйДокумент.СчетФактураОснование.Дата, ИсходныйДокумент.Дата);
			НомерИсправленияИсходногоДокумента = ИсходныйДокумент.НомерИсправления;
			ДатаИсправленияИсходногоДокумента = ?(ИсходныйДокумент.Исправление, ИсходныйДокумент.Дата, Дата(1,1,1));
			
			ИсходныйДокументСтрока = ИсходныеДокументы.Добавить();
			ИсходныйДокументСтрока.НомерИсходногоДокумента = НомерИсходногоДокумента;
			ИсходныйДокументСтрока.ДатаИсходногоДокумента = ДатаИсходногоДокумента;

			ИсправленияИсходногоДокумента = Новый ТаблицаЗначений;
			ИсправленияИсходногоДокумента.Колонки.Добавить("НомерИсправленияИсходногоДокумента");
			ИсправленияИсходногоДокумента.Колонки.Добавить("ДатаИсправленияИсходногоДокумента");
			
			Если ЗначениеЗаполнено(НомерИсправленияИсходногоДокумента) Тогда
				ИсправлениеИсходногоДокумента = ИсправленияИсходногоДокумента.Добавить();
				ИсправлениеИсходногоДокумента.НомерИсправленияИсходногоДокумента = НомерИсправленияИсходногоДокумента;
				ИсправлениеИсходногоДокумента.ДатаИсправленияИсходногоДокумента = ДатаИсправленияИсходногоДокумента; 				
			КонецЕсли;
		
			Если ИсправленияИсходногоДокумента.Количество() > 0 Тогда
				ИсходныйДокументСтрока.ИсправленияИсходногоДокумента = ИсправленияИсходногоДокумента;
			КонецЕсли;
		
		КонецЦикла;
	Иначе
		Основание = ДокументИсправления.ДокументОснование;
		
		ИсходныйДокументСтрока = ИсходныеДокументы.Добавить();
		ИсходныйДокументСтрока.НомерИсходногоДокумента = НомерСчетаФактурыНаПечать(Основание.Номер, ДанныеШапки.ИндексПодразделения);
		ИсходныйДокументСтрока.ДатаИсходногоДокумента = Основание.Дата;
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ИсходныеДокументы, "ИсходныеДокументы");
		
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", "643", ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", "Российский рубль");
	
	Если СчетФактура <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ДанныеШапки.ТолькоУслуги);
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", Ложь);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНаправленияНаСогласование", ДанныеШапки.Дата);
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Организация, ДанныеШапки.БанковскийСчетОрганизации, ДанныеШапки.Дата);
	Если ЗначениеЗаполнено(ДанныеШапки.КПППоставщика) Тогда
		СведенияОПоставщике.КПП = ДанныеШапки.КПППоставщика;
	КонецЕсли;
	
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр", ДанныеШапки.Дата);
	// Заполняем структурное подразделение
	ЗаполнитьСтруктурноеПодразделение(ДеревоДанных, "СведенияОПродавце", ДанныеШапки.Ссылка.Подразделение);
	
	СоставительДокументаНаименование = СведенияОПоставщике.ПолноеНаименование
		+ ?(ЗначениеЗаполнено(СведенияОПоставщике.КПП),
			СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПоставщике.ИНН, СведенияОПоставщике.КПП),
			СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПоставщике.ИНН)); 	

		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СоставительДокументаНаименование", СоставительДокументаНаименование);
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Контрагент, ДанныеШапки.БанковскийСчетКонтрагента, ДанныеШапки.Дата);
	Если ЗначениеЗаполнено(ДанныеШапки.КПППокупателя) Тогда	
		СведенияОПокупателе.КПП = ДанныеШапки.КПППокупателя;
	КонецЕсли;
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе", "Юр", ДанныеШапки.Дата);
	
	ОснованиеКорректировки = Новый ТаблицаЗначений;
	ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
	ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
	ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
	ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
	
	Если ЗначениеЗаполнено(ДанныеШапки.Основание)
		И ЗначениеЗаполнено(ДанныеШапки.ОснованиеДата) Тогда
		НоваяСтрока = ОснованиеКорректировки.Добавить();
		Если СтрНайти(ДанныеШапки.Основание, "№") Тогда
			СтрокаНаименование = Лев(ДанныеШапки.Основание, СтрНайти(ДанныеШапки.Основание, "№") - 2);
			Если ПустаяСтрока(СтрокаНаименование) Тогда
				СтрокаНаименование = "Договор";
			КонецЕсли;
		Иначе
			СтрокаНаименование = ДанныеШапки.Основание;
		КонецЕсли;
		НоваяСтрока.ДокументНаименование = СтрокаНаименование;
		НоваяСтрока.ДокументНомер = ДанныеШапки.ОснованиеНомер;
		НоваяСтрока.ДокументДата = ДанныеШапки.ОснованиеДата;
		
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокументДата",,,
			НСтр("ru = 'Необходимо указать дату договора.'"));
		
		Если ЗначениеЗаполнено(СтрокаНаименование) Тогда
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
		КонецЕсли;
	КонецЕсли;
	
	ПередаточныйДокумент = Новый ТаблицаЗначений;
	ПередаточныйДокумент.Колонки.Добавить("ДокументНаименование");
	ПередаточныйДокумент.Колонки.Добавить("ДокументНомер");
	ПередаточныйДокумент.Колонки.Добавить("ДокументДата");
	
	РезультатПоИсходнымДанным = СтруктураДанных.РезультатПоИсходнымДанным.Выбрать();
	Пока РезультатПоИсходнымДанным.Следующий() Цикл
		Если ЗначениеЗаполнено(РезультатПоИсходнымДанным.НомерСчетаФактуры)
			И ЗначениеЗаполнено(РезультатПоИсходнымДанным.ДатаСчетаФактуры) Тогда
			
			ОписаниеОснования = СтрШаблон(НСтр("ru = 'Универсальный передаточный документ № %1 от %2'"),
				РезультатПоИсходнымДанным.НомерСчетаФактуры, Формат(РезультатПоИсходнымДанным.ДатаСчетаФактуры, "ДЛФ=D"));
				
			Если ЗначениеЗаполнено(РезультатПоИсходнымДанным.НомерИсправленияСчетаФактуры)
				И ЗначениеЗаполнено(РезультатПоИсходнымДанным.ДатаИсправленияСчетаФактуры) Тогда
				
				ОписаниеОснования = ОписаниеОснования + ", " + СтрШаблон(НСтр("ru = 'с учетом исправления № %1 от %2'"),
					РезультатПоИсходнымДанным.НомерИсправленияСчетаФактуры,
					Формат(РезультатПоИсходнымДанным.ДатаИсправленияСчетаФактуры, "ДЛФ=D"));
					
			КонецЕсли;
			
			НоваяСтрока = ПередаточныйДокумент.Добавить();
			НоваяСтрока.ДокументНаименование = ОписаниеОснования;
			НоваяСтрока.ДокументНомер = РезультатПоИсходнымДанным.НомерСчетаФактуры;
			НоваяСтрока.ДокументДата = РезультатПоИсходнымДанным.ДатаСчетаФактуры;
			
		КонецЕсли;
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПередаточныйДокумент, "ПередаточныйДокумент");
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6)));
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУвеличение");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУменьшение");
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУвеличение");
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУменьшение");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("ХарактеристикаОписаниеТовара", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1000)));
	ТаблицаТоваров.Колонки.Добавить("СортТовара", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(10)));
	ТаблицаТоваров.Колонки.Добавить("АртикулТовара", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	ТаблицаТоваров.Колонки.Добавить("КодТовара", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеЕдиницыИзмеренияДоКорректировки", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеЕдиницыИзмеренияПослеКорректировки", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("КодВидаТовара", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(10)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТаблицаТоваров.Колонки.Добавить("СведенияОПрослеживаемости");
	ТаблицаТоваров.Колонки.Добавить("СведенияОТаможеннойДекларации");
	
	// Маркировка
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировкеДо");
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировкеПосле");

	СтруктураЗаполненияСтроки = Новый Структура;
	Для Каждого КолонкиТаблицы Из ТаблицаТоваров.Колонки Цикл
		СтруктураЗаполненияСтроки.Вставить(КолонкиТаблицы.Имя); 
	КонецЦикла;

	ВыборкаПоДокументам = СтруктураДанных.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоДокументам.Следующий();
	СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	
	ИспользоватьНаборы = Ложь;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
		ИспользоватьНаборы = Истина;
	КонецЕсли;
	
	НомерСтроки = 1;
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	НоменклатураПартнеровСервер.ШтрихкодыПоТоварам(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

	Если ЗначениеЗаполнено(СведенияОПокупателе) Тогда
		ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(СведенияОПокупателе.СтранаРегистрации, ДанныеШапки.Дата);
	Иначе
		ВыводитьКодыТНВЭД = Ложь;
	КонецЕсли;
	
	ВыборкаДляСопоставления = НоменклатураПартнеровСервер.ВыборкаДляСопоставленияНоменклатуры(ДокументИсправления);
	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	
	// Маркировка
	ТаблицаКодовМаркировкиДо = Неопределено;
	СтруктураДанных.Свойство("МаркировкаДо", ТаблицаКодовМаркировкиДо);
	ТаблицаКодовМаркировкиПосле = Неопределено;
	СтруктураДанных.Свойство("Маркировка", ТаблицаКодовМаркировкиПосле);

	Если ТаблицаКодовМаркировкиДо <> Неопределено И ТаблицаКодовМаркировкиДо.Количество() > 0 Тогда
		ЭлектронноеВзаимодействиеИСМП.ЗаполнитьРасхожденияКодовМаркировкиУКД(ТаблицаКодовМаркировкиДо, ТаблицаКодовМаркировкиПосле);
	КонецЕсли;

	Пока СтрокаТовары.Следующий() Цикл
		
		НовСтрока = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураЗаполненияСтроки);
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТовары);
		НовСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		НовСтрока.ТоварНаименование  = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НоменклатураНаименование,
			СтрокаТовары.ХарактеристикаНаименование
			) + ?(СтрокаТовары.ЭтоВозвратнаяТара, НСтр("ru = '(возвратная тара)'"), "");
			
		НовСтрока.ТоварИдентификатор 						= Строка(СтрокаТовары.Номенклатура.УникальныйИдентификатор());
		Если ЗначениеЗаполнено(СтрокаТовары.СтавкаНДС) Тогда
			НовСтрока.НалоговаяСтавкаДоКорректировки 		= СтрокаТовары.СтавкаНДС;
			НовСтрока.НалоговаяСтавка						= СтрокаТовары.СтавкаНДС;
		Иначе
			НовСтрока.НалоговаяСтавкаДоКорректировки 		= Справочники.СтавкиНДС.БезНДС;
			НовСтрока.НалоговаяСтавка						= Справочники.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
			НовСтрока.СтоимостьТоваровСНалогом  = 0;
			НовСтрока.СуммаНалога  = 0;
			НовСтрока.СтоимостьТоваровСНалогомДоКорректировки  = 0;
			НовСтрока.СуммаНалогаДоКорректировки  = 0;
			Продолжить;	
		КонецЕсли;
		
		НовСтрока.ЕдиницаИзмеренияКодДоКорректировки		= СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
		НовСтрока.ЕдиницаИзмеренияКод               		= СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
		НовСтрока.КоличествоДоКорректировки					= СтрокаТовары.КоличествоДо;
		НовСтрока.Количество                				= СтрокаТовары.Количество;
		НовСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки 	= Окр(СтрокаТовары.ЦенаДо, 2);
		НовСтрока.ЦенаЗаЕдиницуИзмерения                	= Окр(СтрокаТовары.Цена, 2);
		НовСтрока.СтоимостьТоваровБезНалогаДоКорректировки 	= Окр(СтрокаТовары.СуммаБезНДСДо, 2);
		НовСтрока.СтоимостьТоваровБезНалога                	= Окр(СтрокаТовары.СуммаБезНДС, 2);
		НовСтрока.СтоимостьТоваровБезНалогаУвеличение      	= Окр(СтрокаТовары.РазницаБезНДСУвеличение, 2);
		НовСтрока.СтоимостьТоваровБезНалогаУменьшение      	= Окр(СтрокаТовары.РазницаБезНДСУменьшение, 2);
		НовСтрока.СуммаНалогаДоКорректировки 				= Окр(СтрокаТовары.СуммаНДСДо, 2);
		НовСтрока.СуммаНалога                				= Окр(СтрокаТовары.СуммаНДС, 2);
		НовСтрока.СуммаНалогаУвеличение      				= Окр(СтрокаТовары.РазницаНДСУвеличение, 2);
		НовСтрока.СуммаНалогаУменьшение      				= Окр(СтрокаТовары.РазницаНДСУменьшение, 2);
		НовСтрока.СтоимостьТоваровСНалогомДоКорректировки 	= Окр(СтрокаТовары.СуммаСНДСДо, 2);
		НовСтрока.СтоимостьТоваровСНалогом                	= Окр(СтрокаТовары.СуммаСНДС, 2);
		НовСтрока.СтоимостьТоваровСНалогомУвеличение      	= Окр(СтрокаТовары.РазницаСНДСУвеличение, 2);
		НовСтрока.СтоимостьТоваровСНалогомУменьшение      	= Окр(СтрокаТовары.РазницаСНДСУменьшение, 2);
	
		Если НДСИсчисляетсяНалоговымАгентом Тогда
			НовСтрока.НалоговаяСтавка                         = "НДС исчисляется налоговым агентом";
			НовСтрока.НалоговаяСтавкаДоКорректировки          = "НДС исчисляется налоговым агентом";
			НовСтрока.СуммаНалога                             = 0;
			НовСтрока.СуммаНалогаДоКорректировки              = 0;
			НовСтрока.СуммаНалогаУвеличение                   = 0;
			НовСтрока.СуммаНалогаУменьшение                   = 0;
			НовСтрока.СтоимостьТоваровСНалогом                = 0;
			НовСтрока.СтоимостьТоваровСНалогомДоКорректировки = 0;
			НовСтрока.СтоимостьТоваровСНалогомУвеличение      = 0;
			НовСтрока.СтоимостьТоваровСНалогомУменьшение      = 0;
		КонецЕсли;
		
		НовСтрока.ХарактеристикаОписаниеТовара = ?(СтрокаТовары.ХарактеристикаНаименование = Null, "", СтрокаТовары.ХарактеристикаНаименование);
		НовСтрока.КодТовара = СтрокаТовары.НоменклатураКод;
		НовСтрока.СортТовара = "";
		НовСтрока.НаименованиеЕдиницыИзмеренияДоКорректировки = СтрокаТовары.ЕдиницаИзмеренияНаименование;
		НовСтрока.НаименованиеЕдиницыИзмеренияПослеКорректировки = СтрокаТовары.ЕдиницаИзмеренияНаименование;
		Если ЗначениеЗаполнено(СтрокаТовары.КодТНВЭД) И ВыводитьКодыТНВЭД Тогда			 
			НовСтрока.КодВидаТовара = СтрокаТовары.КодТНВЭД.Код;
		Иначе
			НовСтрока.КодВидаТовара =  "-         ";			
		КонецЕсли;	
		
		УпаковкаИзДокумента = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "Упаковка") И ЗначениеЗаполнено(СтрокаТовары.Упаковка) Тогда
			УпаковкаИзДокумента = СтрокаТовары.Упаковка;
		Иначе
			УпаковкаИзДокумента = ЭлектронноеВзаимодействиеУТВызовСервера.ЕдиницаХраненияНоменклатуры(СтрокаТовары.Номенклатура)
		КонецЕсли;
		
		// Сопоставление.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		Если СтрокаТовары.Характеристика <> Неопределено Тогда
			ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		Иначе
			ПараметрыОтбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());				
		КонецЕсли;
		ПараметрыОтбора.Вставить("Упаковка", УпаковкаИзДокумента);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			НовСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			НовСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры, УпаковкаИзДокумента);
		КонецЕсли;
			
		//Заполнение Таможенной декларации
		Если ЗначениеЗаполнено(СтрокаТовары.НомерГТД) Тогда
			СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
			СведенияОТаможеннойДекларации.Колонки.Добавить("СтранаПроисхожденияКод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(3)));
			СведенияОТаможеннойДекларации.Колонки.Добавить("ТаможеннаяДекларацияНомер", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
			СтрокаТД = СведенияОТаможеннойДекларации.Добавить();
			СтрокаТД.ТаможеннаяДекларацияНомер = СокрЛП(Строка(СтрокаТовары.НомерГТД));
			Если ЗначениеЗаполнено(СтрокаТовары.СтранаПроисхожденияКод) Тогда
				СтрокаТД.СтранаПроисхожденияКод = СтрокаТовары.СтранаПроисхожденияКод;
			КонецЕсли;
			НовСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НовСтрока.СведенияОТаможеннойДекларации, "СтранаПроисхожденияКод",,,
				НСтр("ru = 'Не заполнен код страны происхождения'"));			
		КонецЕсли;
		//Конец заполнения Таможенной декларации
		
		// Заполнение прослеживаемости
		Если ЗначениеЗаполнено(СтрокаТовары.КоличествоПоРНПТ) Тогда
			СведенияОПрослеживаемости = Новый ТаблицаЗначений;
			СведенияОПрослеживаемости.Колонки.Добавить("НомерТовара");
			СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияКод");
			СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
			СведенияОПрослеживаемости.Колонки.Добавить("КоличествоТовараДоИзменения");
			СведенияОПрослеживаемости.Колонки.Добавить("КоличествоТовараПослеИзменения");
			СведенияОПрослеживаемости.Колонки.Добавить("КоличествоТовараУвеличение");
			СведенияОПрослеживаемости.Колонки.Добавить("КоличествоТовараУменьшение");
			СтрПрослеживаемости = СведенияОПрослеживаемости.Добавить();
				
			СтрПрослеживаемости.НомерТовара = СокрЛП(Строка(СтрокаТовары.НомерГТД));
			СтрПрослеживаемости.ЕдиницаИзмеренияКод = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияТНВЭДКод);
			СтрПрослеживаемости.ЕдиницаИзмеренияНаименование =  СокрЛП(СтрокаТовары.ЕдиницаИзмеренияТНВЭДНаименование);
			СтрПрослеживаемости.КоличествоТовараПослеИзменения = СтрокаТовары.КоличествоПоРНПТ;
			СтрПрослеживаемости.КоличествоТовараДоИзменения = СтрокаТовары.КоличествоПоРНПТДо; 
			Если СтрПрослеживаемости.КоличествоТовараПослеИзменения >= СтрПрослеживаемости.КоличествоТовараДоИзменения Тогда
				СтрПрослеживаемости.КоличествоТовараУвеличение = СтрПрослеживаемости.КоличествоТовараПослеИзменения - СтрПрослеживаемости.КоличествоТовараДоИзменения
			Иначе
				СтрПрослеживаемости.КоличествоТовараУвеличение = 0
			КонецЕсли;
			Если СтрПрослеживаемости.КоличествоТовараПослеИзменения < СтрПрослеживаемости.КоличествоТовараДоИзменения Тогда
				СтрПрослеживаемости.КоличествоТовараУменьшение = -(СтрПрослеживаемости.КоличествоТовараПослеИзменения - СтрПрослеживаемости.КоличествоТовараДоИзменения)
			Иначе
				СтрПрослеживаемости.КоличествоТовараУменьшение = 0
			КонецЕсли;			
			
			НовСтрока.СведенияОПрослеживаемости = СведенияОПрослеживаемости;
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НовСтрока.СведенияОПрослеживаемости, "НомерТовара",,,
				НСтр("ru = 'Не заполнен номер ГТД'"));			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НовСтрока.СведенияОПрослеживаемости, "ЕдиницаИзмеренияКод",,,
				НСтр("ru = 'Не заполнена единица измерения ТН ВЭД'"));			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НовСтрока.СведенияОПрослеживаемости, "ЕдиницаИзмеренияНаименование",,,
				НСтр("ru = 'Не заполнена единица измерения ТН ВЭД'"));			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НовСтрока.СведенияОПрослеживаемости, "Количество",,,
				НСтр("ru = 'Не заполнено количество в единицах прослеживаемости'"));				
		КонецЕсли;		
		// Конец заполнения прослеживаемости
		
		// Маркировка
		ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировкеУКД2020(НовСтрока, СтрокаТовары, ТаблицаКодовМаркировкиДо, ТаблицаКодовМаркировкиПосле);
		
		// Не передавать в УКД строку без расхождений
		Если НовСтрока.КоличествоДоКорректировки <> НовСтрока.Количество
			Или НовСтрока.СтоимостьТоваровБезНалогаДоКорректировки <> НовСтрока.СтоимостьТоваровБезНалога
			Или НовСтрока.СуммаНалогаДоКорректировки <> НовСтрока.СуммаНалога
			Или НовСтрока.СтоимостьТоваровСНалогомДоКорректировки <> НовСтрока.СтоимостьТоваровСНалогом
			Или ЗначениеЗаполнено(НовСтрока.СведенияОМаркировкеДо) Или ЗначениеЗаполнено(НовСтрока.СведенияОМаркировкеПосле) Тогда
			НоваяСтрокаТоваров = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, НовСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Количество",,, НСтр("ru = 'Не указано количество товара в табличной части'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКодДоКорректировки",,, НСтр("ru = 'Не заполнено наименование единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКод",,, НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение", ТаблицаТоваров.Итог("СуммаНалогаУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУменьшение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУменьшение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение", ТаблицаТоваров.Итог("СуммаНалогаУменьшение"));
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПервичногоДокументаУКД(СтруктураДанных, Настройки, СтруктураЭД, ДеревоДанных)
	
	УстановитьПривилегированныйРежим(Истина);

	ВсеВидыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ВидДокумента = Настройки.ТипДокумента;
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	НДСИсчисляетсяНалоговымАгентом = Ложь;
	НеОблагаетсяНДС = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапки, "НалогообложениеНДС") Тогда
		НДСИсчисляетсяНалоговымАгентом = (ДанныеШапки.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя);
		НеОблагаетсяНДС = (ДанныеШапки.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
			или ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.СчетФактураКомиссионеру") Тогда
		ДокументИсправления = ДанныеШапки.Ссылка.ДокументОснование;
		СчетФактура = ДанныеШапки.Ссылка;	
	Иначе
		ДокументИсправления = ДанныеШапки.Ссылка;
		СчетФактура = Неопределено;
	КонецЕсли;
	
	ОпцииПечати = Новый Структура;
	ОпцииПечати.Вставить("НомерСформированВСчетеФактуре", СтруктураДанных.Свойство("НомерСформированВСчетеФактуре"));
	
	Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента",  ДанныеШапки.Номер);		
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, 
			"НомерДокумента",  НомерСчетаФактурыНаПечать(ДанныеШапки.Номер, ДанныеШапки.ИндексПодразделения));
	КонецЕсли;	
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДанныеШапки.Дата);	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", НСтр("ru = 'Предлагаю изменить стоимость'"));
	
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", Число(ДанныеШапки.НомерИсправления));	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", ДанныеШапки.ДатаИсправления);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидДокумента", "Корректировка");
	
	ДокументыОснования = Новый Массив;
	Если СтруктураЭД.Функция = "КСЧФ"
		Или СтруктураЭД.Функция = "КСЧФДИС" Тогда
		
		ТаблицаИсходныхДокументов = СчетФактура.Товары.Выгрузить();
		ТаблицаИсходныхДокументов.Свернуть("ПредыдущийСчетФактура");
		Для Каждого СтрокаТЧ Из ТаблицаИсходныхДокументов Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ПредыдущийСчетФактура) Тогда
				ДокументыОснования.Добавить(СтрокаТЧ.ПредыдущийСчетФактура);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из СчетФактура.ДокументыОснования Цикл
			ОснованиеСчетаФактуры = СтрокаТЧ.ДокументОснование;
			Если ЗначениеЗаполнено(ОснованиеСчетаФактуры) Тогда
				ДокументыОснования.Добавить(ОснованиеСчетаФактуры);
			КонецЕсли;
		КонецЦикла;	
		
	Иначе
		Если ТипЗнч(ДокументИсправления) <> Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда 
			ДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсправления, "ДокументОснование");
		Иначе
			ДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсправления, "ДокументРеализации");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументРеализации) Тогда
			ДокументыОснования.Добавить(ДокументРеализации);
		КонецЕсли;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);

	Если СчетФактура <> Неопределено И Не НеОблагаетсяНДС Тогда
		Для Каждого СтрокаТЧ Из СчетФактура.Товары Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ПредыдущийСчетФактура) Тогда
				Продолжить;
			КонецЕсли;
			
			ИсходныйДокумент = СтрокаТЧ.ПредыдущийСчетФактура.ПолучитьОбъект();
			НомерИсходногоДокумента = ИсходныйДокумент.ПредставлениеНомера;
			ДатаИсходногоДокумента = ?(ИсходныйДокумент.Исправление, ИсходныйДокумент.СчетФактураОснование.Дата, ИсходныйДокумент.Дата);
			НомерИсправленияИсходногоДокумента = ИсходныйДокумент.НомерИсправления;
			ДатаИсправленияИсходногоДокумента = ?(ИсходныйДокумент.Исправление, ИсходныйДокумент.Дата, Дата(1,1,1));
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента", НомерИсходногоДокумента);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента", ДатаИсходногоДокумента);
			
			ПредставлениеИсходногоДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Универсальный передаточный документ № %1 от %2'"),
						НомерИсходногоДокумента,
						ДатаИсходногоДокумента);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ПредставлениеИсходногоДокумента", ПредставлениеИсходногоДокумента);
			
			Если ЗначениеЗаполнено(НомерИсправленияИсходногоДокумента) Тогда
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента",
					Число(НомерИсправленияИсходногоДокумента));
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента",
					ДатаИсправленияИсходногоДокумента);
			КонецЕсли;
			
			Прервать;
		КонецЦикла;
	Иначе
		Основание = ДокументИсправления.ДокументОснование;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента", Основание.Номер);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента", Основание.Дата);
		
		Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
			НомерСчетаФактурыБезПрефикса = Основание.Номер;
		Иначе
			НомерСчетаФактурыБезПрефикса = НомерСчетаФактурыНаПечать(Основание.Номер, ДанныеШапки.ИндексПодразделения, Истина);
		КонецЕсли;
		
		ПредставлениеИсходногоДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Универсальный передаточный документ № %1 от %2'"),
				НомерСчетаФактурыБезПрефикса,
				Формат(Основание.Дата, "ДЛФ=D; ДП=--"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ПредставлениеИсходногоДокумента", ПредставлениеИсходногоДокумента);
	КонецЕсли;
		
	ОснованиеКорректировки = Новый ТаблицаЗначений;
	ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
	ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
	ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
	ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
	
	Если ЗначениеЗаполнено(ДанныеШапки.Основание)
		И ЗначениеЗаполнено(ДанныеШапки.ОснованиеДата) Тогда
		НоваяСтрока = ОснованиеКорректировки.Добавить();
		Если СтрНайти(ДанныеШапки.Основание, "№") Тогда
			СтрокаНаименование = Лев(ДанныеШапки.Основание, СтрНайти(ДанныеШапки.Основание, "№") - 2);
			Если ПустаяСтрока(СтрокаНаименование) Тогда
				СтрокаНаименование = "Договор";
			КонецЕсли;
		Иначе
			СтрокаНаименование = ДанныеШапки.Основание;
		КонецЕсли;
		НоваяСтрока.ДокументНаименование = СтрокаНаименование;
		НоваяСтрока.ДокументНомер = ДанныеШапки.ОснованиеНомер;
		НоваяСтрока.ДокументДата = ДанныеШапки.ОснованиеДата;
		
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока, "ДокументДата",,,
			НСтр("ru = 'Необходимо указать дату договора.'"));
		
		Если ЗначениеЗаполнено(СтрокаНаименование) Тогда
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
		КонецЕсли;
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", "643", ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", "Российский рубль");
	
	Если СчетФактура <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ДанныеШапки.ТолькоУслуги);
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", Ложь);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНаправленияНаСогласование", ДанныеШапки.Дата);
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Организация, , ДанныеШапки.Дата);
	Если ЗначениеЗаполнено(ДанныеШапки.КПППоставщика) Тогда
		СведенияОПоставщике.КПП = ДанныеШапки.КПППоставщика;
	КонецЕсли;	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр", ДанныеШапки.Дата);
	// Заполняем структурное подразделение
	ЗаполнитьСтруктурноеПодразделение(ДеревоДанных, "СведенияОПродавце", ДанныеШапки.Ссылка.Подразделение);
	
	СоставительДокументаНаименование = СведенияОПоставщике.ПолноеНаименование
		+ ?(ЗначениеЗаполнено(СведенияОПоставщике.КПП),
			СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПоставщике.ИНН, СведенияОПоставщике.КПП),
			СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПоставщике.ИНН));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СоставительДокументаНаименование);
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Контрагент, , ДанныеШапки.Дата);
	Если ЗначениеЗаполнено(ДанныеШапки.КПППокупателя) Тогда
		СведенияОПокупателе.КПП = ДанныеШапки.КПППокупателя;
	КонецЕсли;
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе", "Юр", ДанныеШапки.Дата);
		
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	// ГосИС УКД
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировкеДо");
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировкеПосле");
	
	ВыборкаПоДокументам = СтруктураДанных.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоДокументам.Следующий();
	СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	
	ИспользоватьНаборы = Ложь;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
		ИспользоватьНаборы = Истина;
	КонецЕсли;

	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	НоменклатураПартнеровСервер.ШтрихкодыПоТоварам(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

	ВыборкаДляСопоставления = НоменклатураПартнеровСервер.ВыборкаДляСопоставленияНоменклатуры(ДокументИсправления);
	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	
	// ГосИС УКД только cis, cis_до, sscc, sscc_до
	ТаблицаКодовМаркировкиДо = Неопределено;
	СтруктураДанных.Свойство("МаркировкаДо", ТаблицаКодовМаркировкиДо);
	ТаблицаКодовМаркировкиПосле = Неопределено;
	СтруктураДанных.Свойство("Маркировка", ТаблицаКодовМаркировкиПосле);
	
	Пока СтрокаТовары.Следующий() Цикл
		
		НовСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТовары);
		
		НовСтрока.ТоварНаименование  = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НоменклатураНаименование,
			СтрокаТовары.ХарактеристикаНаименование
			) + ?(СтрокаТовары.ЭтоВозвратнаяТара, НСтр("ru = ' (возвратная тара)'"), "");
			
		НовСтрока.ТоварИдентификатор 						= Строка(СтрокаТовары.Номенклатура.УникальныйИдентификатор());
		Если ЗначениеЗаполнено(СтрокаТовары.СтавкаНДС) Тогда
			НовСтрока.НалоговаяСтавкаДоКорректировки 		= СтрокаТовары.СтавкаНДС;
			НовСтрока.НалоговаяСтавка						= СтрокаТовары.СтавкаНДС;
		Иначе
			НовСтрока.НалоговаяСтавкаДоКорректировки 		= Справочники.СтавкиНДС.БезНДС;
			НовСтрока.НалоговаяСтавка						= Справочники.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
			НовСтрока.СтоимостьТоваровСНалогом  = 0;
			НовСтрока.СуммаНалога  = 0;
			НовСтрока.СтоимостьТоваровСНалогомДоКорректировки  = 0;
			НовСтрока.СуммаНалогаДоКорректировки  = 0;
			Продолжить;	
		КонецЕсли;
		
		НовСтрока.ЕдиницаИзмеренияКодДоКорректировки		= СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
		НовСтрока.ЕдиницаИзмеренияКод               		= СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
		НовСтрока.КоличествоДоКорректировки					= СтрокаТовары.КоличествоДо;
		НовСтрока.Количество                				= СтрокаТовары.Количество;
		НовСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки 	= Окр(СтрокаТовары.ЦенаДо, 2);
		НовСтрока.ЦенаЗаЕдиницуИзмерения                	= Окр(СтрокаТовары.Цена, 2);
		НовСтрока.СтоимостьТоваровБезНалогаДоКорректировки 	= Окр(СтрокаТовары.СуммаБезНДСДо, 2);
		НовСтрока.СтоимостьТоваровБезНалога                	= Окр(СтрокаТовары.СуммаБезНДС, 2);
		НовСтрока.СтоимостьТоваровБезНалогаУвеличение      	= Окр(СтрокаТовары.РазницаБезНДСУвеличение, 2);
		НовСтрока.СтоимостьТоваровБезНалогаУменьшение      	= Окр(СтрокаТовары.РазницаБезНДСУменьшение, 2);
		НовСтрока.СуммаНалогаДоКорректировки 				= Окр(СтрокаТовары.СуммаНДСДо, 2);
		НовСтрока.СуммаНалога                				= Окр(СтрокаТовары.СуммаНДС, 2);
		НовСтрока.СуммаНалогаУвеличение      				= Окр(СтрокаТовары.РазницаНДСУвеличение, 2);
		НовСтрока.СуммаНалогаУменьшение      				= Окр(СтрокаТовары.РазницаНДСУменьшение, 2);
		НовСтрока.СтоимостьТоваровСНалогомДоКорректировки 	= Окр(СтрокаТовары.СуммаСНДСДо, 2);
		НовСтрока.СтоимостьТоваровСНалогом                	= Окр(СтрокаТовары.СуммаСНДС, 2);
		НовСтрока.СтоимостьТоваровСНалогомУвеличение      	= Окр(СтрокаТовары.РазницаСНДСУвеличение, 2);
		НовСтрока.СтоимостьТоваровСНалогомУменьшение      	= Окр(СтрокаТовары.РазницаСНДСУменьшение, 2);
	
		Если НДСИсчисляетсяНалоговымАгентом Тогда
			НовСтрока.НалоговаяСтавка                         = "НДС исчисляется налоговым агентом";
			НовСтрока.НалоговаяСтавкаДоКорректировки          = "НДС исчисляется налоговым агентом";
			НовСтрока.СуммаНалога                             = 0;
			НовСтрока.СуммаНалогаДоКорректировки              = 0;
			НовСтрока.СуммаНалогаУвеличение                   = 0;
			НовСтрока.СуммаНалогаУменьшение                   = 0;
			НовСтрока.СтоимостьТоваровСНалогом                = 0;
			НовСтрока.СтоимостьТоваровСНалогомДоКорректировки = 0;
			НовСтрока.СтоимостьТоваровСНалогомУвеличение      = 0;
			НовСтрока.СтоимостьТоваровСНалогомУменьшение      = 0;
		КонецЕсли;

		УпаковкаИзДокумента = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "Упаковка") И ЗначениеЗаполнено(СтрокаТовары.Упаковка) Тогда
			УпаковкаИзДокумента = СтрокаТовары.Упаковка;
		Иначе
			УпаковкаИзДокумента = ЭлектронноеВзаимодействиеУТВызовСервера.ЕдиницаХраненияНоменклатуры(СтрокаТовары.Номенклатура)
		КонецЕсли;
		
		// Сопоставление.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		Если СтрокаТовары.Характеристика <> Неопределено Тогда
			ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		Иначе
			ПараметрыОтбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());				
		КонецЕсли;
		ПараметрыОтбора.Вставить("Упаковка", УпаковкаИзДокумента);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			НовСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			НовСтрока.Сопоставление = ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры, УпаковкаИзДокумента);
		КонецЕсли;
		
		// ГосИС УКД
		ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировкеУКД(НовСтрока, СтрокаТовары, ТаблицаКодовМаркировкиДо, ТаблицаКодовМаркировкиПосле);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Количество",,, НСтр("ru = 'Не указано количество товара в табличной части'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКодДоКорректировки",,, НСтр("ru = 'Не заполнено наименование единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКод",,, НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение", ТаблицаТоваров.Итог("СуммаНалогаУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУменьшение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУменьшение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение", ТаблицаТоваров.Итог("СуммаНалогаУменьшение"));
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСчетаФактурыУКД(СтруктураДанных, СтруктураЭД, ДеревоДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.Следующий();
	
	СчетФактура = ДанныеШапки.Ссылка;	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаКорректировочногоСчетаФактуры",	СчетФактура);	
	Если ДанныеШапки.ПредставлениеДокумента <> "счет-фактура комиссионера" Тогда
		Если ЗначениеЗаполнено(ДанныеШапки.ИдентификаторГосКонтракта) Тогда
			ЭтоГОЗ = Истина;
			Если СтруктураДанных.Свойство("ДанныеЭлектронногоАктирования") Тогда
				ЭтоГОЗ = Ложь;
				ДанныеЭлектронногоАктированияЕИС = СтруктураДанных.ДанныеЭлектронногоАктирования;
				Если ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта.Количество() Тогда
					ДанныеКонтракта = ДанныеЭлектронногоАктированияЕИС.ДанныеГосконтракта[0];
					Если ЗначениеЗаполнено(ДанныеКонтракта) Тогда
						ЭтоГОЗ = ДанныеКонтракта.Ссылка.ЭтоКонтрактГОЗ;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ЭтоГОЗ Тогда 
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ДанныеШапки.ИдентификаторГосКонтракта);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС_2019(Основание, Настройки, СтруктураЭД, ДеревоДанных, Отказ) 
	
	
	ВсеВидыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ТипДокумента = Настройки.ТипДокумента;

	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Основание);
	ПараметрыПечати = Новый Структура();
	
	Если ТипДокумента = ВсеВидыДокументов.АктВыполненныхРабот Тогда
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			СтруктураДанных = КорректировкаРеализацииЛокализация.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
		Иначе
			СтруктураДанных = АктВыполненныхРаботЛокализация.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ИмяОбъекта = Основание.Метаданные().Имя;
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ИмяОбъекта);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[ИмяОбъекта];
		КонецЕсли;
		СтруктураДанных = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
	КонецЕсли;
	
	ЗаполнитьДанныеПервичногоДокументаУПД_2019(СтруктураДанных, СтруктураЭД, ДеревоДанных, Настройки, Отказ)

КонецПроцедуры

Процедура НайтиСоздатьКорректировкуПоступленияУКД(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляКорректировкиПоступленияУКД(ДеревоДанных);
	ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	
КонецПроцедуры

Процедура НайтиСоздатьКорректировочныйСчетФактуруУКД(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактурыУКД(ДеревоДанных);
	ДанныеДляЗагрузки.Шапка.Вставить("Корректировочный", Истина);

	Если ДанныеДляЗагрузки.Шапка.Свойство("ДокументыОснования") Тогда
		Для Каждого ДокументОснование Из ДанныеДляЗагрузки.Шапка.ДокументыОснования Цикл
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПриобретения") или
			  ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				Корректировка = ДокументОснование.Ссылка;
				ДокументОснование = Корректировка.ДокументОснование;
			Иначе
				ДокументОснование = ДокументОснование.Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТаблицаСчетаФактуры = УчетНДСУП.СчетаФактурыПолученныеПоДокументамОснованиям(ДокументОснование, Ложь);
	Если ТаблицаСчетаФактуры.Количество() = 0 Тогда
		СчетФактураОснование = Неопределено;
	Иначе
		СчетФактураОснование = ТаблицаСчетаФактуры[0].Ссылка;
	КонецЕсли;
	ДанныеДляЗагрузки.Шапка.Вставить("СчетФактураОснование", СчетФактураОснование);
	
	ЗаполнитьДокументСчетФактура(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	
КонецПроцедуры

Процедура НайтиСоздатьПриобретениеТоваровУслугУПД(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СпособОбработки) = Тип("Строка") Тогда
		СпособОбработкиСтрокой = СпособОбработки;
	Иначе
		СпособОбработкиСтрокой = СпособОбработки.ПервичныйДокумент;
	КонецЕсли;
	
	Если СпособОбработкиСтрокой = "ПриобретениеУслугПрочихАктивов" Тогда
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияУслугУПД(ДеревоДанных);		
		ЗаполнитьДокументПоступленияУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	Иначе
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПриобретенияТоваровУслугУПД(ДеревоДанных);
		Если СпособОбработкиСтрокой = "ВозвратТоваровОтКлиента" Тогда
			ЗаполнитьДокументВозвратаТоваровОтПокупателя(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);		
		Иначе
			ЗаполнитьДокументПриобретенияТоваровУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСоздатьСчетФактуруУПД(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактурыУПД(ДеревоДанных);
	ЗаполнитьДокументСчетФактура(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	
КонецПроцедуры

Функция НайтиПоступлениеТоваровУслуг(Знач Организация, Знач НомерДокумента, Знач ДатаДокумента)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеПервичныхДокументов.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|ГДЕ
	|	ДанныеПервичныхДокументов.Организация = &Организация
	|	И ДанныеПервичныхДокументов.Номер = &НомерДокумента
	|	И НАЧАЛОПЕРИОДА(ДанныеПервичныхДокументов.Дата, ДЕНЬ) = &ДатаДокумента
	|	И ТИПЗНАЧЕНИЯ(ДанныеПервичныхДокументов.Документ) = ТИП(Документ.ПриобретениеТоваровУслуг)";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НомерДокумента", НомерДокумента);
	Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(ДатаДокумента));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Документ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеПоТоварам(ТоварыКаталога, Организация)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА ВТ_Товары.Номенклатура.НаименованиеПолное = """"
	|			ТОГДА ВТ_Товары.Номенклатура.Наименование
	|		ИНАЧЕ ВТ_Товары.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """") КАК БазоваяЕдиницаКод,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Наименование, """") КАК БазоваяЕдиницаНаименование,
	|	ЕСТЬNULL(ЕдиницыИзмерения.НаименованиеПолное, """") КАК БазоваяЕдиницаНаименованиеПолное,
	|	ЕСТЬNULL(ЕдиницыИзмерения.МеждународноеСокращение, """") КАК БазоваяЕдиницаМеждународноеСокращение,
	|	1 КАК ЕдиницаХраненияОстатковКоэффициент,
	|	ВТ_Товары.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ЕСТЬNULL(ВТ_Товары.Характеристика.Наименование, """") КАК ХарактеристикаНаименование,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.Номенклатура.Марка.Наименование КАК ТорговаяМарка,
	|	ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
	|		ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))) КАК СтавкаНДС
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО ВТ_Товары.Номенклатура.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Период,
	|			Страна = &СтранаРегистрации ИЛИ Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтавкиНДСНоменклатуры
	|		ПО ВТ_Товары.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Период, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
	|		ПО (ИСТИНА)
	|
	|";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТоварыКаталога);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СтранаРегистрации", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(Организация));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Возврат МассивРезультатов[1].Выгрузить();
	
КонецФункции

Функция СоздатьНовогоКонтрагента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца)
	
	КонтрагентСсылка = Неопределено;
	Партнер   = Неопределено;
	БанковскийСчет = Неопределено;
	
	ИНН = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ИНН", Истина, ДеревоРазбора);
	КПП = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "КПП", Истина, ДеревоРазбора);
	ЮрФизЛицо = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ЮрФизЛицо", Истина, ДеревоРазбора);	
	ЮрАдресСтруктурой = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "АдресРегистрации", Истина, ДеревоРазбора);
	
	ОфициальноеНаименование = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ОфициальноеНаименование", Истина, ДеревоРазбора);
	
	Если ПустаяСтрока(ОфициальноеНаименование) Тогда
		ОфициальноеНаименование = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ПолноеНаименование", Истина, ДеревоРазбора);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если СсылкаНаВладельца = Неопределено Тогда
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	Иначе
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Контрагенты");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаВладельца);
			Блокировка.Заблокировать();
			
			Контрагент = СсылкаНаВладельца.ПолучитьОбъект();
		Исключение
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось изменить контрагента ""%1"".
			|Возможно, контрагент редактируется другим пользователем'"),
			Контрагент.Наименование);			
			ВызватьИсключение ТекстИсключенияЗаписи;
		КонецПопытки;	
			
	КонецЕсли;
		
	Контрагент.Наименование = ОфициальноеНаименование;
	Контрагент.НаименованиеПолное = ОфициальноеНаименование;
	Контрагент.ИНН = ИНН;
	Контрагент.КПП = КПП;	
	Контрагент.ЮридическоеФизическоеЛицо = ?(ЮрФизЛицо = Неопределено, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, ЮрФизЛицо.ЗначениеРеквизита);
	
	// Контактная информация
	Если ЮрАдресСтруктурой <> Неопределено Тогда
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Контрагент, ЮрАдресСтруктурой.ЗначениеРеквизита,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Контрагент, ЮрАдресСтруктурой.ЗначениеРеквизита,
			Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			
	КонецЕсли;
	
	КонтрагентСсылка = Контрагент.Ссылка;
	
	Отбор = Новый Структура("Реквизит", "СтрокаТЧРасчетныйСчет");
	МассивСчетов = СтрокаДляЗагрузки.Строки.НайтиСтроки(Отбор);
	
	Для Каждого ЭлементМассива Из МассивСчетов Цикл
		
		НомерСчета = ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "НомерСчета", Истина, ДеревоРазбора);
		Если Не ЗначениеЗаполнено(НомерСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		БанковскийСчет = Неопределено;
		БанковскийСчет = НайтиСсылкуНаОбъектПоРеквизиту("БанковскиеСчета", "НомерСчета",
			НомерСчета, КонтрагентСсылка);
		
		Если БанковскийСчет = Неопределено Тогда
			БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
			БанковскийСчет.Владелец = КонтрагентСсылка;
			БанковскийСчет.НомерСчета = НомерСчета;
		Иначе
			БанковскийСчет = БанковскийСчет.ПолучитьОбъект();
			БанковскийСчет.Владелец = КонтрагентСсылка;
		КонецЕсли;
		НаименованиеСчета = ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "Комментарий", Истина, ДеревоРазбора);
		Если ЗначениеЗаполнено(НаименованиеСчета) Тогда
			БанковскийСчет.Наименование = НаименованиеСчета;
		Иначе
			БанковскийСчет.Наименование = НомерСчета;
		КонецЕсли;
		
		БанкБИК = ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "БанкБИК", Истина, ДеревоРазбора);
		Если ЗначениеЗаполнено(БанкБИК) Тогда
			
			Банк = Справочники.КлассификаторБанков.НайтиПоКоду(БанкБИК);
			
			Если Не ЗначениеЗаполнено(Банк) Тогда
				Банк = Справочники.КлассификаторБанков.СоздатьЭлемент();
				Банк.Наименование =  ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "БанкНаименование", Истина, ДеревоРазбора);
				Банк.Код = БанкБИК;
			Иначе
				Банк = Банк.ПолучитьОбъект();
			КонецЕсли;
			
			Банк.КоррСчет = ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "БанкСчетКорр", Истина, ДеревоРазбора);
			Банк.Записать();
			
			БанковскийСчет.Банк = Банк.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		// Заполним реквизиты партнера
		
		Если Контрагент.ЭтоНовый() Тогда
			Партнер = Справочники.Партнеры.СоздатьЭлемент();
			СсылкаНовогоПартнера = Справочники.Партнеры.ПолучитьСсылку();
			Партнер.УстановитьСсылкуНового(СсылкаНовогоПартнера);
			Контрагент.Партнер = СсылкаНовогоПартнера;
		Иначе
			Партнер = Контрагент.Партнер.ПолучитьОбъект();
			Попытка 
				Партнер.Заблокировать();
			Исключение
				ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить партнера ""%1"".
				|Возможно, партнер редактируется другим пользователем'"),
				Партнер.Наименование);			
				ВызватьИсключение ТекстИсключенияЗаписи;
			КонецПопытки;			
		КонецЕсли;
		
		Партнер.Наименование = Контрагент.Наименование;
		
	КонецЕсли;
	
	Попытка
		Контрагент.Записать();
		Контрагент.Разблокировать();
		Если Партнер <> Неопределено Тогда
			Партнер.Записать();
			Партнер.Разблокировать();			
		КонецЕсли;
		Если БанковскийСчет <> Неопределено Тогда		
			БанковскийСчет.Записать();
		    БанковскийСчет.Разблокировать();
		КонецЕсли;		
		КонтрагентСсылка = Контрагент.Ссылка;		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = НСтр("ru = 'Не удалось загрузить контрагента'");
		ЗаписьЖурналаРегистрации(
				ТекстОшибки,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат КонтрагентСсылка;	
	
КонецФункции

Процедура ВнестиСведенияОВыбытииМаркированныхТоваровВДеревоУПДУКД(ДеревоДанных, ВариантВыбытияМаркируемойПродукции)

	СведенияОВыбытииМаркированныхТоваров = "";
	Если ВариантВыбытияМаркируемойПродукции = Перечисления.ВариантыВыбытияМаркируемойПродукции.ИспользованиеПокупателемДляСобственныхНужд Тогда
		СведенияОВыбытииМаркированныхТоваров = "1";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОВыбытииМаркированныхТоваров) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, 
			"СведенияОВыбытииМаркированныхТоваров", 	СведенияОВыбытииМаркированныхТоваров);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя прикладного справочника по имени справочника библиотеки электронных документов.
//
// Параметры:
//  ИмяСправочника - строка - название справочника из библиотеки БЭД.
//
// Возвращаемое значение:
//  Строка - строковое имя прикладного справочника.
//
Функция ИмяПрикладногоСправочника(ИмяСправочника) Экспорт
	
	СоответствиеСправочников = Новый Соответствие;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеСправочников(СоответствиеСправочников);
	
	ИмяПрикладногоСправочника = СоответствиеСправочников.Получить(ИмяСправочника);
	
	Возврат ИмяПрикладногоСправочника;
	
КонецФункции

// Заполняет структуру, содержащую информацию об адресе участника ЭДО.
//
// Параметры:
//  СтруктураАдреса - структура - информация об адресе;
//   * Поля структуры для адреса РФ.
//    ** АдресРФ - Булево - признак, что адрес РФ;
//    ** Индекс - Строка - почтовый индекс организации;
//    ** Регион - Строка - код региона организации;
//    ** Район - Строка;
//    ** Город - Строка;
//    ** НаселенныйПункт - Строка - населенный пункт расположения организации;
//    ** Улица - Строка;
//    ** Дом - Строка;
//    ** Корпус - Строка;
//    ** Квартира - Строка;
//    ** Поля структуры для иностранного адреса или адреса РФ строкой.
//   * КодСтраны - Строка - код страны;
//    ** АдресТекст - Строка - представление адреса;
//  СтруктураПараметров - Структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента - Строка - имя метаданных справочника;
//  ВидАдреса - Строка - "Факт" или "Юр";
//  ТекстОшибки - Строка - описание ошибки.
//
Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента = "Контрагент", ВидАдреса = "Юр", ТекстОшибки = "") Экспорт
	
	//++ НЕ ГОСИС
	Адрес = ПолучитьАдресИзКонтактнойИнформации(СтруктураПараметров[ВидКонтрагента], ВидАдреса, СтруктураПараметров.ДатаКИ);
	
	Параметр1 = СтруктураПараметров[ВидКонтрагента];
	Параметр2 = ?(ВидАдреса="Юр", НСтр("ru = 'юридический'"), НСтр("ru = 'фактический'"));
	
	Если НЕ ЗначениеЗаполнено(Адрес.Представление) Тогда
		
		Ошибка = НСтр("ru = 'Для %1 необходимо указать %2 адрес.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + Нстр("ru='" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Параметр1, Параметр2) + "'"); 
		Возврат
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Адрес.ЗначенияПолей) Тогда
		Ошибка =  НСтр("ru = 'Для %1 необходимо заполнить %2 адрес по классификатору.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + Нстр("ru='" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Параметр1, Параметр2) + "'"); 
		Возврат
		
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура("КодСтраны, Индекс, Регион, КодРегиона, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира");
	ЗаполнитьЗначенияСвойств(СтруктураРезультата, РаботаСАдресами.СведенияОбАдресе(Адрес.ЗначенияПолей));
	
	АдресРФ = Ложь;
	
	Если ЗначениеЗаполнено(СтруктураРезультата.КодСтраны) Тогда
		СтруктураАдреса.Вставить("ПроизвольныйАдрес", Ложь);		
	Иначе
		СтруктураАдреса.Вставить("ПроизвольныйАдрес", Истина);		
	КонецЕсли;	
	СтруктураАдреса.Вставить("АдресРФ",     	АдресРФ);
	СтруктураАдреса.Вставить("Индекс",      	СтруктураРезультата.Индекс);
	СтруктураАдреса.Вставить("КодРегион",   	СтруктураРезультата.КодРегиона);
	СтруктураАдреса.Вставить("КодРегиона",  	СтруктураРезультата.КодРегиона);
	СтруктураАдреса.Вставить("Район",       	СтруктураРезультата.Район);
	СтруктураАдреса.Вставить("Город",       	СтруктураРезультата.Город);
	СтруктураАдреса.Вставить("НаселПункт",  	СтруктураРезультата.НаселенныйПункт);
	СтруктураАдреса.Вставить("НаселенныйПункт", СтруктураРезультата.НаселенныйПункт);
	СтруктураАдреса.Вставить("Улица",       	СтруктураРезультата.Улица);
	СтруктураАдреса.Вставить("Дом",         	СтруктураРезультата.Дом);
	СтруктураАдреса.Вставить("Корпус",      	СтруктураРезультата.Корпус);
	СтруктураАдреса.Вставить("Кварт",       	СтруктураРезультата.Квартира);
	СтруктураАдреса.Вставить("Квартира",    	СтруктураРезультата.Квартира);
	Если НЕ АдресРФ Тогда
		СтруктураАдреса.Вставить("КодСтр",   	СтруктураРезультата.КодСтраны);
		СтруктураАдреса.Вставить("КодСтраны",	СтруктураРезультата.КодСтраны);
		СтруктураАдреса.Вставить("АдрТекст", 	Адрес.Представление);
		СтруктураАдреса.Вставить("АдресТекст", 	Адрес.Представление);
	КонецЕсли;
	СтруктураАдреса.Вставить("КодГАР", 		"");
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определяет имя дополнительной колонки, которая выводится в печатных формах электронных документов Счет на оплату,
// Заказ клиента, Заказ поставщику, Отчет о списании комиссионного товара, Отчет о продажах комиссионного товара.
// В качестве дополнительной колонки могут выступать "Код", "Артикул".
//
// Параметры:
//  Результат - Строка - доступные значения: "Код", "Артикул".
//
Процедура ИмяДополнительнойКолонки(Результат) Экспорт
	
	//++ НЕ ГОСИС
	Результат = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для обработки ошибок заполнения обязательных полей.
//
// Параметры:
//  ТаблицаТоваров   - ТаблицаЗначений - сведения о товарах для формирования электронного документа.
//  СсылкаНаДокумент - ДокументСсылка - Ссылка на основание электронного документа.
//
Процедура ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров, СсылкаНаДокумент = Неопределено) Экспорт

	// Обработка ошибки через механизм сообщений пользователю.
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Артикул", "Номенклатура", "Объект.Артикул");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Наименование", "Номенклатура", "Объект.Наименование");
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда		
		Если ТаблицаТоваров.Колонки.Найти("Количество") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Количество", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Цена", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("Сумма") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Сумма", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"СуммаСкидки", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"СуммаСкидки", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("ЕдиницаИзмеренияКодПоОКЕИ") <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ЕдиницаИзмеренияКодПоОКЕИ", "ЕдиницаИзмерения", "Объект.Код");
		
		// Если единица пустая, надо ссылаться на незаполненность самой единицы, а не ее полей.
		СтрокиСПустойЕдиницей = ТаблицаТоваров.НайтиСтроки(Новый Структура("ЕдиницаИзмерения", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка()));
		Если СтрокиСПустойЕдиницей.Количество() Тогда
			Если СсылкаНаДокумент <> Неопределено Тогда
				// Для документов берем единицу прямо из документа.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
					"ЕдиницаИзмеренияКодПоОКЕИ", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			Иначе
				// Иначе ссылаемся на незаполненность единицы в самой номенклатуре.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
					"ЕдиницаИзмеренияКодПоОКЕИ", "Номенклатура", "Объект.ЕдиницаИзмерения");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаКод", "Упаковка", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаМеждународноеСокращение", "Упаковка", "Объект.МеждународноеСокращение");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаНаименование", "Упаковка", "Объект.Наименование");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаНаименованиеПолное", "Упаковка", "Объект.НаименованиеПолное");
	
	// Если единица пустая, надо ссылаться на незаполненность самой единицы, а не ее полей.
	СтрокиСПустойЕдиницей = ТаблицаТоваров.НайтиСтроки(Новый Структура("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка()));
	Если СтрокиСПустойЕдиницей.Количество() Тогда
		Если СсылкаНаДокумент <> Неопределено Тогда
			// Для документов берем единицу прямо из документа.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаКод", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаМеждународноеСокращение", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименование", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименованиеПолное", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
		Иначе
			// Это каталог товаров - для него единица берется из номенклатуры.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаКод", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаМеждународноеСокращение", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименование", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименованиеПолное", "Номенклатура", "Объект.ЕдиницаИзмерения");
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("ВалютаЦены") <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ВалютаЦены", "Валюта", "Объект.Код");
		
		// Если валюта пустая, надо ссылаться на незаполненность самой валюты, а не ее полей.
		СтрокиСПустойВалютой = ТаблицаТоваров.НайтиСтроки(Новый Структура("Валюта", Справочники.Валюты.ПустаяСсылка()));
		Если СтрокиСПустойВалютой.Количество() И СсылкаНаДокумент <> Неопределено Тогда
			Если СсылкаНаДокумент <> Неопределено Тогда
				// Для документов берем валюту прямо из документа.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойВалютой,
					"ВалютаЦены", СсылкаНаДокумент, "Объект.Валюта");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если НЕ Константы.ИспользоватьОбменЭД.Получить() Тогда
		Если НЕ Константы.ИспользоватьЭлектронныеПодписи.Получить() Тогда
			МенеджерЗначенияИспользоватьЭП = Константы.ИспользоватьЭлектронныеПодписи.СоздатьМенеджерЗначения();
			МенеджерЗначенияИспользоватьЭП.Значение = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначенияИспользоватьЭП);			
		КонецЕсли;
		МенеджерЗначенияИспользоватьЭД = Константы.ИспользоватьОбменЭД.СоздатьМенеджерЗначения();
		МенеджерЗначенияИспользоватьЭД.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначенияИспользоватьЭД);
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбменСКонтрагентамиУТ.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.3.45";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e066b75c-d71d-48d9-9948-4141f6d17783");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбменСКонтрагентамиУТ.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает константу ""Использовать обмен электронными документами"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьОбменЭД.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьЭлектронныеПодписи.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьОбменЭД.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьЭлектронныеПодписи.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Константы.ИспользоватьОбменЭД.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Константы.ИспользоватьЭлектронныеПодписи.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");	
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "НастройкиЭДОСлужебный.ВключитьУтверждениеВходящихДокументов";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

КонецПроцедуры

#КонецОбласти

Функция ВыводитьКодыТНВЭД(СтранаРегистрации, ДатаПроверки)
	
	Выводить = Ложь;
	
	Выводить = УчетНДСРФ.СтранаЯвляетсяЧленомТаможенногоСоюза(СтранаРегистрации, ДатаПроверки)
		И ДатаПроверки >= УчетНДСУП.НастройкиУчета().ДатаРазделенияЭкспорта;
	
	Возврат Выводить;
	
КонецФункции

#КонецОбласти

#Область Диагностика

// см. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииДокументовСПоддержкойДиагностикиОшибок
Процедура ПриОпределенииДокументовСПоддержкойДиагностикиОшибок(СписокДокументов) Экспорт
	
	СписокДокументов.Добавить(Метаданные.Документы.АктВыполненныхРабот);
	СписокДокументов.Добавить(Метаданные.Документы.ВозвратТоваровМеждуОрганизациями);
	СписокДокументов.Добавить(Метаданные.Документы.ВозвратТоваровОтКлиента);
	СписокДокументов.Добавить(Метаданные.Документы.ЗаказКлиента);
	СписокДокументов.Добавить(Метаданные.Документы.ЗаказПоставщику);
	СписокДокументов.Добавить(Метаданные.Документы.ЗапросКоммерческогоПредложенияОтКлиента);
	СписокДокументов.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств);
	СписокДокументов.Добавить(Метаданные.Документы.КоммерческоеПредложениеКлиенту);
	СписокДокументов.Добавить(Метаданные.Документы.КорректировкаПриобретения);
	СписокДокументов.Добавить(Метаданные.Документы.КорректировкаРеализации);
	СписокДокументов.Добавить(Метаданные.Документы.ОтчетКомиссионера);
	СписокДокументов.Добавить(Метаданные.Документы.ОтчетКомиссионераОСписании);
	СписокДокументов.Добавить(Метаданные.Документы.ОтчетКомитенту);
	СписокДокументов.Добавить(Метаданные.Документы.ОтчетКомитентуОСписании);
	СписокДокументов.Добавить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями);
	СписокДокументов.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг);
	СписокДокументов.Добавить(Метаданные.Документы.ПриобретениеУслугПрочихАктивов);
	СписокДокументов.Добавить(Метаданные.Документы.РеализацияТоваровУслуг);
	СписокДокументов.Добавить(Метаданные.Документы.РеализацияУслугПрочихАктивов);
	СписокДокументов.Добавить(Метаданные.Документы.РегистрацияЦенНоменклатурыПоставщика);
	СписокДокументов.Добавить(Метаданные.Документы.СчетНаОплатуКлиенту);
	СписокДокументов.Добавить(Метаданные.Документы.СчетФактураВыданный);
	СписокДокументов.Добавить(Метаданные.Документы.СчетФактураВыданныйАванс);
	СписокДокументов.Добавить(Метаданные.Документы.СчетФактураКомиссионеру);
	СписокДокументов.Добавить(Метаданные.Документы.СчетФактураКомитента);
	СписокДокументов.Добавить(Метаданные.Документы.СчетФактураПолученный);
	СписокДокументов.Добавить(Метаданные.Документы.СчетФактураПолученныйАванс);
	СписокДокументов.Добавить(Метаданные.Документы.СчетФактураПолученныйНалоговыйАгент);
	
КонецПроцедуры

Процедура ПриПроверкеИспользованияУведомлений(Используется) Экспорт
	
	Используется = Истина

КонецПроцедуры

#КонецОбласти

#Область ПрямойОбмен

Процедура ИспользоватьПрямойОбмен(Использовать) Экспорт
	
	Использовать = Истина;
	
КонецПроцедуры

#КонецОбласти
