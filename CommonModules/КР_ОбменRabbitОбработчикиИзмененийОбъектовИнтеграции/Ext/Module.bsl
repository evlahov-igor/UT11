 
#Область ПрограммныйИнтерфейс

#Область ПодпискиНаСобытия

#Область ПередЗаписью

Процедура КР_ОбменRabbitКонстантыПередЗаписью(Источник, Отказ) Экспорт
	
	// Стандартные проверки на возможность продолжать
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительное свойство, по которому можно отказать от выгрузки объекта при программной записи
	// Например, при записи синронизируемого объекта, который пришел при интеграции
	// В случае, если необходимо более сложный алгоритм определения адресатов выгрузки,
	// заполнить в дополнительных свойсвах объекта базу-источника 
	// и анализировать заполненное значение в алгоритме регистрации
	Если Источник.ДополнительныеСвойства.Свойство("КР_ПропуститьВыгрузкуОбъектаВRabbitMQ") Тогда
		Возврат;		
	КонецЕсли;
	
	// Сверяем с Истина, чтобы не контролировать установленное значение
	// для низкой версии платформы можно переделать на константу
	Если ПолучитьФункциональнуюОпцию("КР_ИспользуетсяИнтеграцияRabbitMQ") <> Истина Тогда
		Возврат;	
	КонецЕсли;	
	
	ИмяИсточника = Источник.Метаданные().ПолноеИмя();	
	ПараметрыВыгрузкиОбъекта = КР_ОбменRabbitПодготовкаДанных.ПолучитьНастройкиВыгрузкиОбъекта(ИмяИсточника);	
	Если ПараметрыВыгрузкиОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	

	Для Каждого ПараметрВыгрузки Из ПараметрыВыгрузкиОбъекта Цикл
		ПравилоРегистрации = ПараметрВыгрузки.ПравилоРегистрации;
		Если Не ЗначениеЗаполнено(ПравилоРегистрации) Тогда
			Продолжить;
		КонецЕсли;
		ТекстЗадачиРегистрации = ПравилоРегистрации + "(Источник, Отказ, ПараметрВыгрузки);";
		
		Попытка
			Выполнить ТекстЗадачиРегистрации;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила регистрации %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоРегистрации,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Регистрация",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;		
		
	КонецЦикла;	
		
	Источник.ДополнительныеСвойства.Вставить("КР_ПараметрыВыгрузкиОбъекта", ПараметрыВыгрузкиОбъекта);

КонецПроцедуры

Процедура КР_ОбменRabbitСправочникиПередЗаписью(Источник, Отказ) Экспорт
	
	// Стандартные проверки на возможность продолжать
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительное свойство, по которому можно отказать от выгрузки объекта при программной записи
	// Например, при записи синронизируемого объекта, который пришел при интеграции
	// В случае, если необходимо более сложный алгоритм определения адресатов выгрузки,
	// заполнить в дополнительных свойсвах объекта базу-источника 
	// и анализировать заполненное значение в алгоритме регистрации
	Если Источник.ДополнительныеСвойства.Свойство("КР_ПропуститьВыгрузкуОбъектаВRabbitMQ") Тогда
		Возврат;		
	КонецЕсли;
	
	// Сверяем с Истина, чтобы не контролировать установленное значение
	// для низкой версии платформы можно переделать на константу
	Если ПолучитьФункциональнуюОпцию("КР_ИспользуетсяИнтеграцияRabbitMQ") <> Истина Тогда
		Возврат;	
	КонецЕсли;	
	
	ИмяИсточника = Источник.Метаданные().ПолноеИмя();	
	ПараметрыВыгрузкиОбъекта = КР_ОбменRabbitПодготовкаДанных.ПолучитьНастройкиВыгрузкиОбъекта(ИмяИсточника);	
	Если ПараметрыВыгрузкиОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	

	Для Каждого ПараметрВыгрузки Из ПараметрыВыгрузкиОбъекта Цикл
		ПравилоРегистрации = ПараметрВыгрузки.ПравилоРегистрации;
		Если Не ЗначениеЗаполнено(ПравилоРегистрации) Тогда
			Продолжить;
		КонецЕсли;
		ТекстЗадачиРегистрации = ПравилоРегистрации + "(Источник, Отказ, ПараметрВыгрузки);";
		
		Попытка
			Выполнить ТекстЗадачиРегистрации;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила регистрации %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоРегистрации,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Регистрация",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;		
		
	КонецЦикла;	
		
	Источник.ДополнительныеСвойства.Вставить("КР_ПараметрыВыгрузкиОбъекта", ПараметрыВыгрузкиОбъекта);

КонецПроцедуры

Процедура КР_ОбменRabbitДокументыПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
    // Стандартные проверки на возможность продолжать
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительное свойство, по которому можно отказать от выгрузки объекта при программной записи
	// Например, при записи синронизируемого объекта, который пришел при интеграции
	// В случае, если необходимо более сложный алгоритм определения адресатов выгрузки,
	// заполнить в дополнительных свойсвах объекта базу-источника 
	// и анализировать заполненное значение в алгоритме регистрации
	Если Источник.ДополнительныеСвойства.Свойство("КР_ПропуститьВыгрузкуОбъектаВRabbitMQ") Тогда
		Возврат;		
	КонецЕсли;
	
	// Сверяем с Истина, чтобы не контролировать установленное значение
	// для низкой версии платформы можно переделать на константу
	Если ПолучитьФункциональнуюОпцию("КР_ИспользуетсяИнтеграцияRabbitMQ") <> Истина Тогда
		Возврат;	
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ИмяИсточника = Источник.Метаданные().ПолноеИмя();	
	ПараметрыВыгрузкиОбъекта = КР_ОбменRabbitПодготовкаДанных.ПолучитьНастройкиВыгрузкиОбъекта(ИмяИсточника);	
	Если ПараметрыВыгрузкиОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПараметрВыгрузки Из ПараметрыВыгрузкиОбъекта Цикл
		ПравилоРегистрации = ПараметрВыгрузки.ПравилоРегистрации;
		Если Не ЗначениеЗаполнено(ПравилоРегистрации) Тогда
			Продолжить;
		КонецЕсли;
		// РежимЗаписи, РежимПроведения - не передаем, так как необходимо выполнить совместимость с операцией удаления
		// тем более они должны быть в дополнительных свойствах объекта
		ТекстЗадачиРегистрации = ПравилоРегистрации + "(Источник, Отказ, ПараметрВыгрузки);";
		
		Попытка
			Выполнить ТекстЗадачиРегистрации;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила регистрации %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоРегистрации,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Регистрация",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
	КонецЦикла;	
		
	Источник.ДополнительныеСвойства.Вставить("КР_ПараметрыВыгрузкиОбъекта", ПараметрыВыгрузкиОбъекта);
	
КонецПроцедуры
            
Процедура КР_ОбменRabbitПланыВидовХарактеристикПередЗаписью(Источник, Отказ) Экспорт
	
	// Стандартные проверки на возможность продолжать
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительное свойство, по которому можно отказать от выгрузки объекта при программной записи
	// Например, при записи синронизируемого объекта, который пришел при интеграции
	// В случае, если необходимо более сложный алгоритм определения адресатов выгрузки,
	// заполнить в дополнительных свойсвах объекта базу-источника 
	// и анализировать заполненное значение в алгоритме регистрации
	Если Источник.ДополнительныеСвойства.Свойство("КР_ПропуститьВыгрузкуОбъектаВRabbitMQ") Тогда
		Возврат;		
	КонецЕсли;
	
	// Сверяем с Истина, чтобы не контролировать установленное значение
	// для низкой версии платформы можно переделать на константу
	Если ПолучитьФункциональнуюОпцию("КР_ИспользуетсяИнтеграцияRabbitMQ") <> Истина Тогда
		Возврат;	
	КонецЕсли;	
	
	ИмяИсточника = Источник.Метаданные().ПолноеИмя();	
	ПараметрыВыгрузкиОбъекта = КР_ОбменRabbitПодготовкаДанных.ПолучитьНастройкиВыгрузкиОбъекта(ИмяИсточника);	
	Если ПараметрыВыгрузкиОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	

	Для Каждого ПараметрВыгрузки Из ПараметрыВыгрузкиОбъекта Цикл
		ПравилоРегистрации = ПараметрВыгрузки.ПравилоРегистрации;
		Если Не ЗначениеЗаполнено(ПравилоРегистрации) Тогда
			Продолжить;
		КонецЕсли;
		ТекстЗадачиРегистрации = ПравилоРегистрации + "(Источник, Отказ, ПараметрВыгрузки);";
		
		Попытка
			Выполнить ТекстЗадачиРегистрации;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила регистрации %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоРегистрации,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Регистрация",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;		
		
	КонецЦикла;	
		
	Источник.ДополнительныеСвойства.Вставить("КР_ПараметрыВыгрузкиОбъекта", ПараметрыВыгрузкиОбъекта);

КонецПроцедуры

Процедура КР_ОбменRabbitРегистрыСведенийПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
    // Стандартные проверки на возможность продолжать
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительное свойство, по которому можно отказать от выгрузки объекта при программной записи
	// Например, при записи синронизируемого объекта, который пришел при интеграции
	// В случае, если необходимо более сложный алгоритм определения адресатов выгрузки,
	// заполнить в дополнительных свойсвах объекта базу-источника 
	// и анализировать заполненное значение в алгоритме регистрации
	Если Источник.ДополнительныеСвойства.Свойство("КР_ПропуститьВыгрузкуОбъектаВRabbitMQ") Тогда
		Возврат;		
	КонецЕсли;
	
	// Сверяем с Истина, чтобы не контролировать установленное значение
	// для низкой версии платформы можно переделать на константу
	Если ПолучитьФункциональнуюОпцию("КР_ИспользуетсяИнтеграцияRabbitMQ") <> Истина Тогда
		Возврат;	
	КонецЕсли;
	
	ИмяИсточника = Источник.Метаданные().ПолноеИмя();	
	ПараметрыВыгрузкиОбъекта = КР_ОбменRabbitПодготовкаДанных.ПолучитьНастройкиВыгрузкиОбъекта(ИмяИсточника);	
	Если ПараметрыВыгрузкиОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПараметрВыгрузки Из ПараметрыВыгрузкиОбъекта Цикл
		ПравилоРегистрации = ПараметрВыгрузки.ПравилоРегистрации;
		Если Не ЗначениеЗаполнено(ПравилоРегистрации) Тогда
			Продолжить;
		КонецЕсли;
		// 13.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-650
		// Унификация метода с методом для ссылочного типа
		// ТекстЗадачиРегистрации = ПравилоРегистрации + "(Источник, Отказ, Замещение, ПараметрВыгрузки);";   
		ПараметрВыгрузки.ДополнительныеПараметры.Вставить("Замещение", Замещение);
		ТекстЗадачиРегистрации = ПравилоРегистрации + "(Источник, Отказ, ПараметрВыгрузки);";
		
        Попытка
			Выполнить ТекстЗадачиРегистрации;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила регистрации %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоРегистрации,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Регистрация",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
	КонецЦикла;	
		
	Источник.ДополнительныеСвойства.Вставить("КР_ПараметрыВыгрузкиОбъекта", ПараметрыВыгрузкиОбъекта);
	
КонецПроцедуры

Процедура КР_ОбменRabbitРегистрыНакопленияПередЗаписью(Источник, Отказ) Экспорт
	
	// Стандартные проверки на возможность продолжать
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительное свойство, по которому можно отказать от выгрузки объекта при программной записи
	// Например, при записи синронизируемого объекта, который пришел при интеграции
	// В случае, если необходимо более сложный алгоритм определения адресатов выгрузки,
	// заполнить в дополнительных свойсвах объекта базу-источника 
	// и анализировать заполненное значение в алгоритме регистрации
	Если Источник.ДополнительныеСвойства.Свойство("КР_ПропуститьВыгрузкуОбъектаВRabbitMQ") Тогда
		Возврат;		
	КонецЕсли;
	
	// Сверяем с Истина, чтобы не контролировать установленное значение
	// для низкой версии платформы можно переделать на константу
	Если ПолучитьФункциональнуюОпцию("КР_ИспользуетсяИнтеграцияRabbitMQ") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ИмяИсточника = Источник.Метаданные().ПолноеИмя();
	ПараметрыВыгрузкиОбъекта = КР_ОбменRabbitПодготовкаДанных.ПолучитьНастройкиВыгрузкиОбъекта(ИмяИсточника);
	Если ПараметрыВыгрузкиОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПараметрВыгрузки Из ПараметрыВыгрузкиОбъекта Цикл
		ПравилоРегистрации = ПараметрВыгрузки.ПравилоРегистрации;
		Если Не ЗначениеЗаполнено(ПравилоРегистрации) Тогда
			Продолжить;
		КонецЕсли;
		ТекстЗадачиРегистрации = ПравилоРегистрации + "(Источник, Отказ, ПараметрВыгрузки);";
		
        Попытка
			Выполнить ТекстЗадачиРегистрации;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила регистрации %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоРегистрации,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Регистрация",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;
	
	Источник.ДополнительныеСвойства.Вставить("КР_ПараметрыВыгрузкиОбъекта", ПараметрыВыгрузкиОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область ПриЗаписи

Процедура КР_ОбменRabbitКонстантыПриЗаписи(Источник, Отказ) Экспорт
	
	// Стандартные проверки на возможность продолжать
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительное свойство, по которому можно отказать от выгрузки объекта при программной записи
	// Например, при записи синронизируемого объекта, который пришел при интеграции
	// В случае, если необходимо более сложный алгоритм определения адресатов выгрузки,
	// заполнить в дополнительных свойсвах объекта базу-источника 
	// и анализировать заполненное значение в алгоритме регистрации
	Если Источник.ДополнительныеСвойства.Свойство("КР_ПропуститьВыгрузкуОбъектаВRabbitMQ") Тогда
		Возврат;		
	КонецЕсли;
	
	// Сверяем с Истина, чтобы не контролировать установленное значение
	// для низкой версии платформы можно переделать на константу
	Если ПолучитьФункциональнуюОпцию("КР_ИспользуетсяИнтеграцияRabbitMQ") <> Истина Тогда
		Возврат;	
	КонецЕсли;
	
	// Дополнительная проверка на то, что мы сюда попали не просто так, и информация о регистрации уже собрана
	Если Не Источник.ДополнительныеСвойства.Свойство("КР_ПараметрыВыгрузкиОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыгрузкиОбъекта = Источник.ДополнительныеСвойства.КР_ПараметрыВыгрузкиОбъекта;
	
	Для Каждого ПараметрВыгрузки Из ПараметрыВыгрузкиОбъекта Цикл
		ПравилоВыгрузки = ПараметрВыгрузки.ПравилоВыгрузки;
		Если Не ЗначениеЗаполнено(ПравилоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		//ДобавитьЗаписьВЛогОВыгружаемомОбъекте(Источник, ПараметрВыгрузки);		
		
		ТекстЗадачиВыгрузки = ПравилоВыгрузки + "(Источник, Отказ, ПараметрВыгрузки);";
		
		Попытка
			Выполнить ТекстЗадачиВыгрузки;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила выгрузки %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоВыгрузки,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Выгрузка",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
	КонецЦикла;
	
    КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьИсходящиеСообщенияОбмена(Источник, Отказ, ПараметрыВыгрузкиОбъекта);	
	
КонецПроцедуры

Процедура КР_ОбменRabbitСправочникиПриЗаписи(Источник, Отказ) Экспорт
	
	// Стандартные проверки на возможность продолжать
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительное свойство, по которому можно отказать от выгрузки объекта при программной записи
	// Например, при записи синронизируемого объекта, который пришел при интеграции
	// В случае, если необходимо более сложный алгоритм определения адресатов выгрузки,
	// заполнить в дополнительных свойсвах объекта базу-источника 
	// и анализировать заполненное значение в алгоритме регистрации
	Если Источник.ДополнительныеСвойства.Свойство("КР_ПропуститьВыгрузкуОбъектаВRabbitMQ") Тогда
		Возврат;		
	КонецЕсли;
	
	// Сверяем с Истина, чтобы не контролировать установленное значение
	// для низкой версии платформы можно переделать на константу
	Если ПолучитьФункциональнуюОпцию("КР_ИспользуетсяИнтеграцияRabbitMQ") <> Истина Тогда
		Возврат;	
	КонецЕсли;
	
	// Дополнительная проверка на то, что мы сюда попали не просто так, и информация о регистрации уже собрана
	Если Не Источник.ДополнительныеСвойства.Свойство("КР_ПараметрыВыгрузкиОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыгрузкиОбъекта = Источник.ДополнительныеСвойства.КР_ПараметрыВыгрузкиОбъекта;
	
	Для Каждого ПараметрВыгрузки Из ПараметрыВыгрузкиОбъекта Цикл
		ПравилоВыгрузки = ПараметрВыгрузки.ПравилоВыгрузки;
		Если Не ЗначениеЗаполнено(ПравилоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьЗаписьВЛогОВыгружаемомОбъекте(Источник, ПараметрВыгрузки);		
		
		ТекстЗадачиВыгрузки = ПравилоВыгрузки + "(Источник, Отказ, ПараметрВыгрузки);";
		
		Попытка
			Выполнить ТекстЗадачиВыгрузки;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила выгрузки %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоВыгрузки,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Выгрузка",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
	КонецЦикла;
	
    КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьИсходящиеСообщенияОбмена(Источник, Отказ, ПараметрыВыгрузкиОбъекта);	
	
КонецПроцедуры

Процедура КР_ОбменRabbitДокументыПриЗаписи(Источник, Отказ) Экспорт
	
	// Стандартные проверки на возможность продолжать
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительное свойство, по которому можно отказать от выгрузки объекта при программной записи
	// Например, при записи синронизируемого объекта, который пришел при интеграции
	// В случае, если необходимо более сложный алгоритм определения адресатов выгрузки,
	// заполнить в дополнительных свойсвах объекта базу-источника 
	// и анализировать заполненное значение в алгоритме регистрации
	Если Источник.ДополнительныеСвойства.Свойство("КР_ПропуститьВыгрузкуОбъектаВRabbitMQ") Тогда
		Возврат;		
	КонецЕсли;
	
	// Сверяем с Истина, чтобы не контролировать установленное значение
	// для низкой версии платформы можно переделать на константу
	Если ПолучитьФункциональнуюОпцию("КР_ИспользуетсяИнтеграцияRabbitMQ") <> Истина Тогда
		Возврат;	
	КонецЕсли;
	
	// Дополнительная проверка на то, что мы сюда попали не просто так, и информация о регистрации уже собрана
	Если Не Источник.ДополнительныеСвойства.Свойство("КР_ПараметрыВыгрузкиОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	// Если документ проводится, то формирование сообщение обмена будет происходить в обработчике проведения
	Если Источник.ДополнительныеСвойства.Свойство("РежимЗаписи") 
		И Источник.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Возврат;		
	КонецЕсли;
	
	ПараметрыВыгрузкиОбъекта = Источник.ДополнительныеСвойства.КР_ПараметрыВыгрузкиОбъекта;
	
	Для Каждого ПараметрВыгрузки Из ПараметрыВыгрузкиОбъекта Цикл
		ПравилоВыгрузки = ПараметрВыгрузки.ПравилоВыгрузки;
		Если Не ЗначениеЗаполнено(ПравилоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьЗаписьВЛогОВыгружаемомОбъекте(Источник, ПараметрВыгрузки);
		
		ТекстЗадачиВыгрузки = ПравилоВыгрузки + "(Источник, Отказ, ПараметрВыгрузки);";
		Попытка
			Выполнить ТекстЗадачиВыгрузки;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила выгрузки %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоВыгрузки,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Выгрузка",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;
	
    КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьИсходящиеСообщенияОбмена(Источник, Отказ, ПараметрыВыгрузкиОбъекта);	
	
КонецПроцедуры

Процедура КР_ОбменRabbitПланыВидовХарактеристикПриЗаписи(Источник, Отказ) Экспорт
	
	// Стандартные проверки на возможность продолжать
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительное свойство, по которому можно отказать от выгрузки объекта при программной записи
	// Например, при записи синронизируемого объекта, который пришел при интеграции
	// В случае, если необходимо более сложный алгоритм определения адресатов выгрузки,
	// заполнить в дополнительных свойсвах объекта базу-источника 
	// и анализировать заполненное значение в алгоритме регистрации
	Если Источник.ДополнительныеСвойства.Свойство("КР_ПропуститьВыгрузкуОбъектаВRabbitMQ") Тогда
		Возврат;		
	КонецЕсли;
	
	// Сверяем с Истина, чтобы не контролировать установленное значение
	// для низкой версии платформы можно переделать на константу
	Если ПолучитьФункциональнуюОпцию("КР_ИспользуетсяИнтеграцияRabbitMQ") <> Истина Тогда
		Возврат;	
	КонецЕсли;
	
	// Дополнительная проверка на то, что мы сюда попали не просто так, и информация о регистрации уже собрана
	Если Не Источник.ДополнительныеСвойства.Свойство("КР_ПараметрыВыгрузкиОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыгрузкиОбъекта = Источник.ДополнительныеСвойства.КР_ПараметрыВыгрузкиОбъекта;
	
	Для Каждого ПараметрВыгрузки Из ПараметрыВыгрузкиОбъекта Цикл
		ПравилоВыгрузки = ПараметрВыгрузки.ПравилоВыгрузки;
		Если Не ЗначениеЗаполнено(ПравилоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьЗаписьВЛогОВыгружаемомОбъекте(Источник, ПараметрВыгрузки);		
		
		ТекстЗадачиВыгрузки = ПравилоВыгрузки + "(Источник, Отказ, ПараметрВыгрузки);";
		
		Попытка
			Выполнить ТекстЗадачиВыгрузки;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила выгрузки %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоВыгрузки,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Выгрузка",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
	КонецЦикла;
	
    КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьИсходящиеСообщенияОбмена(Источник, Отказ, ПараметрыВыгрузкиОбъекта);	
	
КонецПроцедуры

Процедура КР_ОбменRabbitРегистрыСведенийПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
    // Стандартные проверки на возможность продолжать
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительное свойство, по которому можно отказать от выгрузки объекта при программной записи
	// Например, при записи синронизируемого объекта, который пришел при интеграции
	// В случае, если необходимо более сложный алгоритм определения адресатов выгрузки,
	// заполнить в дополнительных свойсвах объекта базу-источника 
	// и анализировать заполненное значение в алгоритме регистрации
	Если Источник.ДополнительныеСвойства.Свойство("КР_ПропуститьВыгрузкуОбъектаВRabbitMQ") Тогда
		Возврат;		
	КонецЕсли;
	
	// Сверяем с Истина, чтобы не контролировать установленное значение
	// для низкой версии платформы можно переделать на константу
	Если ПолучитьФункциональнуюОпцию("КР_ИспользуетсяИнтеграцияRabbitMQ") <> Истина Тогда
		Возврат;	
	КонецЕсли;
	
	// Дополнительная проверка на то, что мы сюда попали не просто так, и информация о регистрации уже собрана
	Если Не Источник.ДополнительныеСвойства.Свойство("КР_ПараметрыВыгрузкиОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыгрузкиОбъекта = Источник.ДополнительныеСвойства.КР_ПараметрыВыгрузкиОбъекта;
	
	Для Каждого ПараметрВыгрузки Из ПараметрыВыгрузкиОбъекта Цикл
		ПравилоВыгрузки = ПараметрВыгрузки.ПравилоВыгрузки;
		Если Не ЗначениеЗаполнено(ПравилоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;           
		
		//СтруктураОтбора = Новый Структура;
		//Для Каждого ЭлементОтбора Из Источник.Отбор Цикл
		//	СтруктураОтбора.Вставить(ЭлементОтбора.Имя, ЭлементОтбора.Значение);	
		//КонецЦикла;
		//ИмяРегистра = Источник.Метаданные().Имя;
		//КлючЗаписи = Новый("РегистрСведенийКлючЗаписи." + ИмяРегистра, СтруктураОтбора);		
		//ТекстСообщения = НСтр("ru='Выгружается %1'");		
		//ТекстСообщения = СтрШаблон(ТекстСообщения, ПолучитьНавигационнуюСсылку(КлючЗаписи));		
		//Для Каждого СообщениеОбмена Из ПараметрВыгрузки.МассивСообщений Цикл
		//	КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);	
		//КонецЦикла;
		
		// 13.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-650
		// Унификация метода с методом для ссылочного типа
		// ТекстЗадачиВыгрузки = ПравилоВыгрузки + "(Источник, Отказ, Замещение, ПараметрВыгрузки);";
		ПараметрВыгрузки.ДополнительныеПараметры.Вставить("Замещение", Замещение);
		ТекстЗадачиВыгрузки = ПравилоВыгрузки + "(Источник, Отказ, ПараметрВыгрузки);";
		Попытка
			Выполнить ТекстЗадачиВыгрузки;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила выгрузки %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоВыгрузки,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Выгрузка",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;

	КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьИсходящиеСообщенияОбмена(Источник, Отказ, ПараметрыВыгрузкиОбъекта);
	
КонецПроцедуры

Процедура КР_ОбменRabbitРегистрыНакопленияПриЗаписи(Источник, Отказ) Экспорт
	
    // Стандартные проверки на возможность продолжать
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительное свойство, по которому можно отказать от выгрузки объекта при программной записи
	// Например, при записи синронизируемого объекта, который пришел при интеграции
	// В случае, если необходимо более сложный алгоритм определения адресатов выгрузки,
	// заполнить в дополнительных свойсвах объекта базу-источника 
	// и анализировать заполненное значение в алгоритме регистрации
	Если Источник.ДополнительныеСвойства.Свойство("КР_ПропуститьВыгрузкуОбъектаВRabbitMQ") Тогда
		Возврат;
	КонецЕсли;
	
	// Сверяем с Истина, чтобы не контролировать установленное значение
	// для низкой версии платформы можно переделать на константу
	Если ПолучитьФункциональнуюОпцию("КР_ИспользуетсяИнтеграцияRabbitMQ") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительная проверка на то, что мы сюда попали не просто так, и информация о регистрации уже собрана
	Если Не Источник.ДополнительныеСвойства.Свойство("КР_ПараметрыВыгрузкиОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыгрузкиОбъекта = Источник.ДополнительныеСвойства.КР_ПараметрыВыгрузкиОбъекта;
	
	Для Каждого ПараметрВыгрузки Из ПараметрыВыгрузкиОбъекта Цикл
		ПравилоВыгрузки = ПараметрВыгрузки.ПравилоВыгрузки;
		Если Не ЗначениеЗаполнено(ПравилоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		ТекстЗадачиВыгрузки = ПравилоВыгрузки + "(Источник, Отказ, ПараметрВыгрузки);";
		Попытка
			Выполнить ТекстЗадачиВыгрузки;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила выгрузки %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоВыгрузки,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Выгрузка",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;
	
	КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьИсходящиеСообщенияОбмена(Источник, Отказ, ПараметрыВыгрузкиОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаПроведения

Процедура КР_ОбменRabbitДокументыОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт

    // Стандартные проверки на возможность продолжать
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительное свойство, по которому можно отказать от выгрузки объекта при программной записи
	// Например, при записи синронизируемого объекта, который пришел при интеграции
	// В случае, если необходимо более сложный алгоритм определения адресатов выгрузки,
	// заполнить в дополнительных свойсвах объекта базу-источника 
	// и анализировать заполненное значение в алгоритме регистрации
	Если Источник.ДополнительныеСвойства.Свойство("КР_ПропуститьВыгрузкуОбъектаВRabbitMQ") Тогда
		Возврат;		
	КонецЕсли;
	
	// Сверяем с Истина, чтобы не контролировать установленное значение
	// для низкой версии платформы можно переделать на константу
	Если ПолучитьФункциональнуюОпцию("КР_ИспользуетсяИнтеграцияRabbitMQ") <> Истина Тогда
		Возврат;	
	КонецЕсли;
	
	// Дополнительная проверка на то, что мы сюда попали не просто так, и информация о регистрации уже собрана
	Если Не Источник.ДополнительныеСвойства.Свойство("КР_ПараметрыВыгрузкиОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыгрузкиОбъекта = Источник.ДополнительныеСвойства.КР_ПараметрыВыгрузкиОбъекта;
	
	Для Каждого ПараметрВыгрузки Из ПараметрыВыгрузкиОбъекта Цикл
		ПравилоВыгрузки = ПараметрВыгрузки.ПравилоВыгрузки;
		Если Не ЗначениеЗаполнено(ПравилоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьЗаписьВЛогОВыгружаемомОбъекте(Источник, ПараметрВыгрузки);
		
		ТекстЗадачиВыгрузки = ПравилоВыгрузки + "(Источник, Отказ, ПараметрВыгрузки);";
		Попытка
			Выполнить ТекстЗадачиВыгрузки;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила выгрузки %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоВыгрузки,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Выгрузка",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;
	
    КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьИсходящиеСообщенияОбмена(Источник, Отказ, ПараметрыВыгрузкиОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область ПередУдалением

Процедура КР_ОбменRabbitСправочникиПередУдалением(Источник, Отказ) Экспорт
	
    // Стандартные проверки на возможность продолжать
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительное свойство, по которому можно отказать от выгрузки объекта при программной записи
	// Например, при записи синронизируемого объекта, который пришел при интеграции
	// В случае, если необходимо более сложный алгоритм определения адресатов выгрузки,
	// заполнить в дополнительных свойсвах объекта базу-источника 
	// и анализировать заполненное значение в алгоритме регистрации
	Если Источник.ДополнительныеСвойства.Свойство("КР_ПропуститьВыгрузкуОбъектаВRabbitMQ") Тогда
		Возврат;		
	КонецЕсли;
	
	// Сверяем с Истина, чтобы не контролировать установленное значение
	// для низкой версии платформы можно переделать на константу
	Если ПолучитьФункциональнуюОпцию("КР_ИспользуетсяИнтеграцияRabbitMQ") <> Истина Тогда
		Возврат;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяИсточника = Источник.Метаданные().ПолноеИмя();
    ПараметрыВыгрузкиОбъекта = КР_ОбменRabbitПодготовкаДанных.ПолучитьНастройкиВыгрузкиОбъекта(ИмяИсточника);	
	Если ПараметрыВыгрузкиОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПараметрВыгрузки Из ПараметрыВыгрузкиОбъекта Цикл
		ПравилоРегистрации = ПараметрВыгрузки.ПравилоРегистрации;
		ПравилоВыгрузки = ПараметрВыгрузки.ПравилоВыгрузки;
		Если Не ЗначениеЗаполнено(ПравилоРегистрации)
			Или Не ЗначениеЗаполнено(ПравилоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Удаляется %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПолучитьНавигационнуюСсылку(Источник.Ссылка));		
		Для Каждого СообщениеОбмена Из ПараметрВыгрузки.МассивСообщений Цикл
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);	
		КонецЦикла;
		
		ТекстЗадачиРегистрации = ПравилоРегистрации + "(Источник, Отказ, ПараметрВыгрузки);";
		Попытка
			Выполнить ТекстЗадачиРегистрации;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила регистрации %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоРегистрации,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Регистрация",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	
		Для Каждого СообщениеОбмена Из ПараметрВыгрузки.МассивСообщений Цикл
			СообщениеОбмена.ЭтоУдаление = Истина;
		КонецЦикла;
		
		ТекстЗадачиВыгрузки = ПравилоВыгрузки + "(Источник, Отказ, ПараметрВыгрузки);";
		Попытка
			Выполнить ТекстЗадачиВыгрузки;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила выгрузки %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоВыгрузки,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Выгрузка",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
	КонецЦикла;
	
	КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьИсходящиеСообщенияОбмена(Источник, Отказ, ПараметрыВыгрузкиОбъекта);
		
КонецПроцедуры

Процедура КР_ОбменRabbitДокументыПередУдалением(Источник, Отказ) Экспорт
	
    // Стандартные проверки на возможность продолжать
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительное свойство, по которому можно отказать от выгрузки объекта при программной записи
	// Например, при записи синронизируемого объекта, который пришел при интеграции
	// В случае, если необходимо более сложный алгоритм определения адресатов выгрузки,
	// заполнить в дополнительных свойсвах объекта базу-источника 
	// и анализировать заполненное значение в алгоритме регистрации
	Если Источник.ДополнительныеСвойства.Свойство("КР_ПропуститьВыгрузкуОбъектаВRabbitMQ") Тогда
		Возврат;		
	КонецЕсли;
	
	// Сверяем с Истина, чтобы не контролировать установленное значение
	// для низкой версии платформы можно переделать на константу
	Если ПолучитьФункциональнуюОпцию("КР_ИспользуетсяИнтеграцияRabbitMQ") <> Истина Тогда
		Возврат;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда 
		Возврат;
	КонецЕсли;

	ИмяИсточника = Источник.Метаданные().ПолноеИмя();
	ПараметрыВыгрузкиОбъекта = КР_ОбменRabbitПодготовкаДанных.ПолучитьНастройкиВыгрузкиОбъекта(ИмяИсточника);
	
	Для Каждого ПараметрВыгрузки Из ПараметрыВыгрузкиОбъекта Цикл
		ПравилоРегистрации = ПараметрВыгрузки.ПравилоРегистрации;
		ПравилоВыгрузки = ПараметрВыгрузки.ПравилоВыгрузки;
		Если Не ЗначениеЗаполнено(ПравилоРегистрации)
			Или Не ЗначениеЗаполнено(ПравилоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Удаляется %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПолучитьНавигационнуюСсылку(Источник.Ссылка));		
		Для Каждого СообщениеОбмена Из ПараметрВыгрузки.МассивСообщений Цикл
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);	
		КонецЦикла;
		
		ТекстЗадачиРегистрации = ПравилоРегистрации + "(Источник, Отказ, ПараметрВыгрузки);";
		Попытка
			Выполнить ТекстЗадачиРегистрации;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила регистрации %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоРегистрации,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Регистрация",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	
		Для Каждого СообщениеОбмена Из ПараметрВыгрузки.МассивСообщений Цикл
			СообщениеОбмена.ЭтоУдаление = Истина;
		КонецЦикла;
		
		ТекстЗадачиВыгрузки = ПравилоВыгрузки + "(Источник, Отказ, ПараметрВыгрузки);";
		Попытка
			Выполнить ТекстЗадачиВыгрузки;
		Исключение
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В алгоритме правила выгрузки %1 произошла невосстановимая ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
				ПравилоВыгрузки,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("RabbitMQ.Выгрузка",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
	КонецЦикла;
	
	КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьИсходящиеСообщенияОбмена(Источник, Отказ, ПараметрыВыгрузкиОбъекта);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьЗаписьВЛогОВыгружаемомОбъекте(Источник, ПараметрВыгрузки)
	
	СсылкаНаОбъект = Источник.Ссылка;
	
	// Фиксация ссылки выгружаемого объекта
	ТекстСообщения = НСтр("ru = 'Выгружается %1'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПолучитьНавигационнуюСсылку(СсылкаНаОбъект));
	Для Каждого СообщениеОбмена Из ПараметрВыгрузки.МассивСообщений Цикл
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения);
		Если СообщениеОбмена.СсылкиНаОбъекты.Найти(СсылкаНаОбъект) = Неопределено Тогда
			СообщениеОбмена.СсылкиНаОбъекты.Добавить(СсылкаНаОбъект);	
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
