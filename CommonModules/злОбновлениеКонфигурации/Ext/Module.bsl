#Область ПрограммныйИнтерфейс

Функция КаталогОбновлений() Экспорт
	
	КаталогОбновлений = "";
	ИмяСобытия = "злОбновлениеКонфигурации.КаталогОбновления";
	
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Если ЭтоФайловаяБаза Тогда
		КаталогИБ = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы()).File;
		КаталогОбновлений = СтрШаблон("%1%2%3", КаталогИБ, ПолучитьРазделительПути(), "updates");
	
		Если Не ПустаяСтрока(КаталогОбновлений) Тогда
			ФайлИнфо = Новый Файл(КаталогОбновлений);
			Если Не ФайлИнфо.Существует() Тогда
				Попытка
					СоздатьКаталог(КаталогОбновлений);
				Исключение
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда 
						ТекстОшибки = ОписаниеОшибки();
					КонецЕсли;
					ТекстСообщения = НСтр("ru = 'Ошибка создания каталога ""%1"": %2'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, КаталогОбновлений, ТекстОшибки);
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка , , , ТекстСообщения);
					КаталогОбновлений = "";
				КонецПопытки;
			ИначеЕсли Не ФайлИнфо.ЭтоКаталог() Тогда 
				ТекстСообщения = НСтр("ru = 'Уже существует файл с именем каталога обновлений: %1'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, КаталогОбновлений);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка , , , ТекстСообщения);
				КаталогОбновлений = "";
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Возврат КаталогОбновлений;
	
КонецФункции

Функция ВыполняетсяПроцессОбновления() Экспорт
	
	Результат = Ложь;

	УстановитьПривилегированныйРежим(Истина);
	
	ЗначениеХранилища = Константы.СтатусОбновленияКонфигурации.Получить();
	Если ТипЗнч(ЗначениеХранилища) = Тип("ХранилищеЗначения") Тогда
		Если ЗначениеХранилища.Получить() <> Неопределено Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура ОбработкаЛогаОбновления(КаталогСкрипта, БСПРезультатОбновления) Экспорт

	ИмяСобытия = "злОбновлениеКонфигурации";

	Отказ = Ложь;

	Если ЗначениеЗаполнено(КаталогСкрипта) Тогда
		ТекстСообщения = НСтр("ru = 'Обработка каталога скрипта %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КаталогСкрипта);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация , , , ТекстСообщения);

		мсвЛогФайлы = НайтиФайлы(КаталогСкрипта, "log*.txt", Ложь);
		Если мсвЛогФайлы.Количество() > 0 Тогда
			Для Каждого ЛогФайл Из мсвЛогФайлы Цикл
				Попытка
					Текст = Новый ЧтениеТекста(ЛогФайл.ПолноеИмя);
				Исключение
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда 
						ТекстОшибки = ОписаниеОшибки();
					КонецЕсли;
					ТекстСообщения = НСтр("ru = 'Ошибка чтения файла %1: %2'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, ЛогФайл.ПолноеИмя, ТекстОшибки);
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка , , , ТекстСообщения);
					Прервать;
				КонецПопытки;
				ИмяФайлаОбновления = Неопределено;
				РезультатОбновления = Неопределено;
				КомментарийОбновления = "";

				ПоискРезультата = Ложь;
				ПоискКомментария = Ложь;

				Строка = Текст.ПрочитатьСтроку();
				// << 26.06.2024 Петухов А.В., Фактор, #4316
				ТекстБэкЛога = СтрШаблон("Содержимое файла %1", ЛогФайл.ПолноеИмя);
				// >> 26.06.2024 Петухов А.В., Фактор, #4316
				Пока Строка <> Неопределено Цикл
					ПараметрОбновления = " /UpdateCfg ";
					Если СтрНайти(Строка, "Запускается: ")>0 И СтрНайти(Строка, ПараметрОбновления)>0 Тогда
						НачалоПараметра = СтрНайти(Строка, ПараметрОбновления)+СтрДлина(ПараметрОбновления);
						Если Сред(Строка, НачалоПараметра, 1) = """" Тогда
							ОкончаниеПараметра = СтрНайти(Строка, """", , НачалоПараметра+1);
							Если ОкончаниеПараметра > 0 И ОкончаниеПараметра-НачалоПараметра-1 > 1 Тогда
								ИмяФайлаОбновления = Сред(Строка, НачалоПараметра+1, ОкончаниеПараметра-НачалоПараметра-1);
								ПоискРезультата = Истина;
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли ПоискРезультата Тогда
						ПараметрРезультата = "Код возврата:";
						Если СтрНайти(Строка, ПараметрРезультата)>0 Тогда
							НачалоПараметра = СтрНайти(Строка, ПараметрРезультата)+СтрДлина(ПараметрРезультата);
							Если НачалоПараметра > 0 Тогда
								РезультатОбновления = СокрЛП(Сред(Строка, НачалоПараметра));
								ПоискРезультата = Ложь;
								ПоискКомментария = Истина;
							КонецЕсли;
						Иначе
							ПоискРезультата = Ложь;	// Результат ищем только в следующей строке
						КонецЕсли;
					ИначеЕсли ПоискКомментария Тогда
						Если Сред(Строка,3,1)="." И Сред(Строка,6,1)="." И Сред(Строка,11,1)=" " Тогда
							ПоискКомментария = Ложь;	// Строка лога начинается с даты. Скорее всего, комментарий закончился.
						Иначе
							Если СокрЛП(Строка) <> "" Тогда
								Если КомментарийОбновления = "" Тогда
									КомментарийОбновления = СокрЛП(Строка);
								Иначе
									КомментарийОбновления = СтрШаблон("%1%2%3",КомментарийОбновления,Символы.ПС,СокрЛП(Строка));
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					// << 26.06.2024 Петухов А.В., Фактор, #4316
					ТекстБэкЛога = СтрШаблон("%1%2%3", ТекстБэкЛога, Символы.ПС, Строка);
					// >> 26.06.2024 Петухов А.В., Фактор, #4316
					Строка = Текст.ПрочитатьСтроку();
				КонецЦикла;

				Разделитель = ПолучитьРазделительПути();
				// << 26.06.2024 Петухов А.В., Фактор, #4316
				Если ИмяФайлаОбновления <> Неопределено Тогда
					ПозицияПоследнегоРазделителя = СтрНайти(ИмяФайлаОбновления,Разделитель,НаправлениеПоиска.СКонца);
					ПозицияТочки = СтрНайти(ИмяФайлаОбновления,".",НаправлениеПоиска.СКонца);
					Если ПозицияПоследнегоРазделителя > 0 Тогда
						ПозицияИмени = ПозицияПоследнегоРазделителя + СтрДлина(Разделитель);
						Если ПозицияТочки = 0 Или ПозицияТочки < ПозицияИмени Тогда
							ИмяФайлаОбновленияБезПути = Сред(ИмяФайлаОбновления, ПозицияИмени);
						Иначе
							ИмяФайлаОбновленияБезПути = Сред(ИмяФайлаОбновления, ПозицияИмени, ПозицияТочки - ПозицияИмени);
						КонецЕсли;
						Версия = ИмяФайлаОбновленияБезПути;
						Если СокрЛП(РезультатОбновления) = "0" Тогда
							НовыйСтатус = Перечисления.злСтатусыОбновленияКонфигурации.ПроцедураОбновленияЗавершенаУспешно;
						Иначе
							НовыйСтатус = Перечисления.злСтатусыОбновленияКонфигурации.ПроцедураОбновленияЗавершенаСОшибкой;
						КонецЕсли;
						ТекущееСостояние = СостояниеОбновления();
						Если ТекущееСостояние <> Неопределено Тогда
							Если ТекущееСостояние.Версия = Версия И	ТекущееСостояние.Статус = Перечисления.злСтатусыОбновленияКонфигурации.ВыполняетсяОбновление Тогда
								ИзменитьСостояниеОбновления(Версия, НовыйСтатус, ТекстБэкЛога, ИмяФайлаОбновления);
							Иначе
								Отказ = Истина;
							КонецЕсли;
						Иначе
							Отказ = Истина;
						КонецЕсли;
					Иначе
						Отказ = Истина;
						ТекстСообщения = НСтр("ru = 'Ошибка определения имени файла обновления в файле лога'");
						ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка , , , ТекстСообщения);
					КонецЕсли;
				Иначе
					Отказ = Истина;
				КонецЕсли;
				// >> 26.06.2024 Петухов А.В., Фактор, #4316

				Если Не Отказ Тогда
					ТекстСообщения = НСтр("ru = 'Разбор файла %1
					|Имя файла обновления: %2
					|Результат: %3
					|Комментарий: %4'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, ЛогФайл.ПолноеИмя, ИмяФайлаОбновления, РезультатОбновления, КомментарийОбновления);
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация , , , ТекстСообщения);

					мсвЭлементыИмени = СтрРазделить(ИмяФайлаОбновления,Разделитель,Ложь);
					Если мсвЭлементыИмени.Количество()>0 Тогда

						// удаление CFU

						КаталогОбновлений = КаталогОбновлений();
						мсвФайлы = НайтиФайлы(КаталогОбновлений, мсвЭлементыИмени[мсвЭлементыИмени.Количество()-1], Ложь);
						Если мсвФайлы.Количество()>0 Тогда
							Для Каждого УдаляемыйФайл Из мсвФайлы Цикл
								Попытка
									УдалитьФайлы(КаталогОбновлений, УдаляемыйФайл.Имя);
									ТекстСообщения = НСтр("ru = 'Удаление файла %1'");
									ТекстСообщения = СтрШаблон(ТекстСообщения, УдаляемыйФайл.ПолноеИмя);
									ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация , , , ТекстСообщения);
								Исключение
									ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
									Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
										ТекстОшибки = ОписаниеОшибки();
									КонецЕсли;
									ТекстСообщения = НСтр("ru = 'Ошибка удаления файла %1: %2'");
									ТекстСообщения = СтрШаблон(ТекстСообщения, УдаляемыйФайл.ПолноеИмя, ТекстОшибки);
									ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка , , , ТекстСообщения);
								КонецПопытки;
							КонецЦикла;
						КонецЕсли;

					КонецЕсли;
				КонецЕсли;
				Текст.Закрыть();
			КонецЦикла;

		Иначе
			Отказ = Истина;
		КонецЕсли;

		// удаление логов
		Попытка
			УдалитьФайлы(КаталогСкрипта);
			ТекстСообщения = НСтр("ru = 'Удаление каталога %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КаталогСкрипта);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация , , , ТекстСообщения);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстОшибки = ОписаниеОшибки();
			КонецЕсли;
			ТекстСообщения = НСтр("ru = 'Ошибка удаления каталога %1: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КаталогСкрипта, ТекстОшибки);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка , , , ТекстСообщения);
		КонецПопытки;

	Иначе
		Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда
		// Ошибка разбора логов. Ориентируемся на признак из БСП
		ТекущееСостояние = СостояниеОбновления();
		Если ТекущееСостояние <> Неопределено Тогда
			Если ТекущееСостояние.Статус = Перечисления.злСтатусыОбновленияКонфигурации.ВыполняетсяОбновление Тогда
				Если БСПРезультатОбновления <> Неопределено Тогда
					НовыйСтатус = Перечисления.злСтатусыОбновленияКонфигурации.ПроцедураОбновленияЗавершенаУспешно;
				Иначе
					НовыйСтатус = Перечисления.злСтатусыОбновленияКонфигурации.ПроцедураОбновленияЗавершенаСОшибкой;
				КонецЕсли;
				ИзменитьСостояниеОбновления(ТекущееСостояние.Версия, НовыйСтатус, "Обновление завершено. Файл логов разобрать не удалось.");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

// << 24.07.2024 Петухов А.В., Фактор, #4316
Функция ЗаписьФайлаОбновления(Версия, СодержимоеФайлаBase64, КлючСообщения, Отказ, ТекстОшибки) Экспорт
	
	Результат = Неопределено;
	
	КаталогОбновлений = КаталогОбновлений();
	
	Если КаталогОбновлений = "" Тогда
		ТекстОшибки = НСтр("ru = 'Не задан каталог обновлений'");
		Отказ = Истина;
	Иначе
		ИмяФайла = СтрШаблон("%1.cfu", СокрЛП(Версия));
		ДвоичныеДанныеФайла = Base64Значение(СодержимоеФайлаBase64);
		
		Если ДвоичныеДанныеФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка чтения данных в формате Base64'");
			Отказ = Истина;
		Иначе
			ПолноеИмяФайла = СтрШаблон("%1%2%3", КаталогОбновлений, ПолучитьРазделительПути(), ИмяФайла);
			Попытка
				ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
			Исключение
				ТекстСообщения = НСтр("ru = 'Ошибка записи файла %1'");
				ТекстОшибки = СтрШаблон(ТекстСообщения, ПолноеИмяФайла);
				Отказ = Истина;
			    Возврат Результат;
			КонецПопытки;
			
			МенеджерЗаписи = РегистрыСведений.злСостояниеОбновленияКонфигурации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = ТекущаяДатаСеанса();
			МенеджерЗаписи.Версия = Версия;
			МенеджерЗаписи.Статус = Перечисления.злСтатусыОбновленияКонфигурации.ПолученФайлОбновления;
			МенеджерЗаписи.Комментарий = СтрШаблон("Разбор сообщения %1", КлючСообщения);
			МенеджерЗаписи.ИмяФайла = ПолноеИмяФайла;
			МенеджерЗаписи.КлючСообщения = КлючСообщения;
			МенеджерЗаписи.Записать();
			
			Результат = ПолноеИмяФайла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СостояниеОбновления() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Результат = Неопределено;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	злСостояниеОбновленияКонфигурацииСрезПоследних.Версия КАК Версия,
	|	злСостояниеОбновленияКонфигурацииСрезПоследних.Статус КАК Статус,
	|	злСостояниеОбновленияКонфигурацииСрезПоследних.ИмяФайла КАК ИмяФайла,
	|	злСостояниеОбновленияКонфигурацииСрезПоследних.Пользователь КАК Пользователь,
	|	злСостояниеОбновленияКонфигурацииСрезПоследних.КлючСообщения КАК КлючСообщения
	|ПОМЕСТИТЬ втСрез
	|ИЗ
	|	РегистрСведений.злСостояниеОбновленияКонфигурации.СрезПоследних КАК злСостояниеОбновленияКонфигурацииСрезПоследних
	|ГДЕ
	|	злСостояниеОбновленияКонфигурацииСрезПоследних.Статус В(&АктивныеСтатусы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Версия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСрез.Версия КАК Версия,
	|	втСрез.Статус КАК Статус,
	|	втСрез.ИмяФайла КАК ИмяФайла,
	|	втСрез.Пользователь КАК Пользователь,
	|	втСрез.КлючСообщения КАК КлючСообщения
	|ИЗ
	|	втСрез КАК втСрез
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ злСостояниеОбновленияКонфигурации.Период) КАК КоличествоОшибок
	|ИЗ
	|	втСрез КАК втСрез
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.злСостояниеОбновленияКонфигурации КАК злСостояниеОбновленияКонфигурации
	|		ПО втСрез.Версия = злСостояниеОбновленияКонфигурации.Версия
	|			И втСрез.КлючСообщения = злСостояниеОбновленияКонфигурации.КлючСообщения
	|			И (злСостояниеОбновленияКонфигурации.Статус = ЗНАЧЕНИЕ(Перечисление.злСтатусыОбновленияКонфигурации.ПроцедураОбновленияЗавершенаСОшибкой))";

	мсвАктивныеСтатусы = Новый Массив;
	мсвАктивныеСтатусы.Добавить(Перечисления.злСтатусыОбновленияКонфигурации.ПолученФайлОбновления);
	мсвАктивныеСтатусы.Добавить(Перечисления.злСтатусыОбновленияКонфигурации.ВыполняетсяОбновление);
	мсвАктивныеСтатусы.Добавить(Перечисления.злСтатусыОбновленияКонфигурации.ПроцедураОбновленияЗавершенаСОшибкой);

	Запрос.УстановитьПараметр("АктивныеСтатусы", мсвАктивныеСтатусы);

	РезультатЗапроса = Запрос.ВыполнитьПакет();

	Если Не РезультатЗапроса[1].Пустой() Тогда
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
		Результат = Новый Структура("Версия,Статус,ИмяФайла,КлючСообщения,Пользователь");
		ЗаполнитьЗначенияСвойств(Результат, Выборка);

		ВыборкаОшибки = РезультатЗапроса[2].Выбрать();
		КоличествоОшибок = 0;
		Если ВыборкаОшибки.Следующий() Тогда
			КоличествоОшибок = ВыборкаОшибки.КоличествоОшибок;
		КонецЕсли;
		Результат.Вставить("КоличествоОшибок", КоличествоОшибок);

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ИмяУстановщика(Версия = Неопределено, КлючСообщения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Результат = "";

	Запрос = Новый Запрос;
	Если Версия = Неопределено И КлючСообщения = Неопределено Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(Пользователи.ИдентификаторПользователяИБ, НЕОПРЕДЕЛЕНО) КАК ИдентификаторПользователяИБ
			|ИЗ
			|	РегистрСведений.злСостояниеОбновленияКонфигурации КАК злСостояниеОбновленияКонфигурации
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО злСостояниеОбновленияКонфигурации.Пользователь = Пользователи.Ссылка
			|ГДЕ
			|	злСостояниеОбновленияКонфигурации.Статус = ЗНАЧЕНИЕ(Перечисление.злСтатусыОбновленияКонфигурации.ВыполняетсяОбновление)
			|
			|УПОРЯДОЧИТЬ ПО
			|	злСостояниеОбновленияКонфигурации.Период УБЫВ";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(Пользователи.ИдентификаторПользователяИБ, НЕОПРЕДЕЛЕНО) КАК ИдентификаторПользователяИБ
			|ИЗ
			|	РегистрСведений.злСостояниеОбновленияКонфигурации КАК злСостояниеОбновленияКонфигурации
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО злСостояниеОбновленияКонфигурации.Пользователь = Пользователи.Ссылка
			|ГДЕ
			|	злСостояниеОбновленияКонфигурации.Версия = &Версия
			|	И злСостояниеОбновленияКонфигурации.КлючСообщения = &КлючСообщения
			|	И злСостояниеОбновленияКонфигурации.Статус = ЗНАЧЕНИЕ(Перечисление.злСтатусыОбновленияКонфигурации.ВыполняетсяОбновление)
			|
			|УПОРЯДОЧИТЬ ПО
			|	злСостояниеОбновленияКонфигурации.Период УБЫВ";
		
		Запрос.УстановитьПараметр("Версия", Версия);
		Запрос.УстановитьПараметр("КлючСообщения", КлючСообщения);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		Если Выборка.ИдентификаторПользователяИБ <> Неопределено Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
			Если ПользовательИБ <> Неопределено Тогда
				Результат = ПользовательИБ.Имя;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ИзменитьСостояниеОбновления(Версия, Статус, Комментарий, ИмяФайла = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ИмяСобытия = "злОбновлениеКонфигурации";
	ДатаИзмененияСтатуса = ТекущаяДатаСеанса();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	злСостояниеОбновленияКонфигурацииСрезПоследних.КлючСообщения КАК КлючСообщения
		|ИЗ
		|	РегистрСведений.злСостояниеОбновленияКонфигурации.СрезПоследних(, Версия = &Версия) КАК злСостояниеОбновленияКонфигурацииСрезПоследних
		|";
	
	Запрос.УстановитьПараметр("Версия", Версия);
	
	РезультатЗапроса = Запрос.Выполнить();
	КлючСообщения = "00000000-0000-0000-0000-000000000000";
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		КлючСообщения = Выборка.КлючСообщения;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.злСостояниеОбновленияКонфигурации.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ДатаИзмененияСтатуса;
	МенеджерЗаписи.Версия = Версия;
	МенеджерЗаписи.Статус = Статус;
	МенеджерЗаписи.Комментарий = Комментарий;
	МенеджерЗаписи.ИмяФайла = ИмяФайла;
	МенеджерЗаписи.КлючСообщения = КлючСообщения;
	МенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
	МенеджерЗаписи.Записать();

	ОтправлятьЛог = Ложь;
	ОбновлениеЗавершеноУспешно = Ложь;
	
	Если Статус = Перечисления.злСтатусыОбновленияКонфигурации.ПроцедураОбновленияЗавершенаУспешно Тогда
		ОтправлятьЛог = Истина;
		ОбновлениеЗавершеноУспешно = Истина;
	ИначеЕсли Статус = Перечисления.злСтатусыОбновленияКонфигурации.ПроцедураОбновленияЗавершенаСОшибкой Тогда
		ОтправлятьЛог = Истина;
		ОбновлениеЗавершеноУспешно = Ложь;
	КонецЕсли;
	
	Если ОтправлятьЛог Тогда
		
		ТекстЛога = "";
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	злСостояниеОбновленияКонфигурации.Период КАК Период,
			|	злСостояниеОбновленияКонфигурации.Статус КАК Статус,
			|	злСостояниеОбновленияКонфигурации.ИмяФайла КАК ИмяФайла,
			|	злСостояниеОбновленияКонфигурации.КлючСообщения КАК КлючСообщения,
			|	злСостояниеОбновленияКонфигурации.Комментарий КАК Комментарий
			|ИЗ
			|	РегистрСведений.злСостояниеОбновленияКонфигурации КАК злСостояниеОбновленияКонфигурации
			|ГДЕ
			|	злСостояниеОбновленияКонфигурации.Версия = &Версия
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";
		
		Запрос.УстановитьПараметр("Версия", Версия);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока  Выборка.Следующий() Цикл
			Если ТекстЛога = "" Тогда
				ТекстЛога = СтрШаблон("%1 %2 %3", Формат(Выборка.Период,"ДФ='dd.MM.yyyy HH:mm:ss'"), Выборка.Статус, Выборка.КлючСообщения);
			Иначе
				ТекстЛога = СтрШаблон("%4%5%1 %2 %3", Формат(Выборка.Период,"ДФ='dd.MM.yyyy HH:mm:ss'"), Выборка.Статус, Выборка.КлючСообщения, ТекстЛога, Символы.ПС);
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ИмяФайла) Тогда
				ТекстЛога = СтрШаблон("%1%2Файл: %3", ТекстЛога, Символы.ПС, Выборка.ИмяФайла);
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.Комментарий) Тогда
				ТекстЛога = СтрШаблон("%1%2Комментарий: %3", ТекстЛога, Символы.ПС, Выборка.Комментарий);
			КонецЕсли;
			ТекстЛога = СтрШаблон("%1%2", ТекстЛога, Символы.ПС);
		КонецЦикла;
		
		Если Не ЗарегистрироватьОтветДляЦентральнойБазы(ОбновлениеЗавершеноУспешно, ТекстЛога, Версия, ДатаИзмененияСтатуса) Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка регистрации ответа для ЦБ'");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка , , , ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспаковатьФайлОбновленияИзСообщения(КлючСообщения, Отказ, ТекстСообщения) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытия = "злОбновлениеКонфигурации";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КР_ВходящиеСообщения.ТелоСообщения КАК ТелоСообщения,
		|	КР_ВходящиеСообщения.ТелоСообщенияСжатое КАК ТелоСообщенияСжатое,
		|	1 КАК Порядок,
		|	КР_ВходящиеСообщения.ТипДанных КАК ТипДанных
		|ПОМЕСТИТЬ втСообщения
		|ИЗ
		|	РегистрСведений.КР_ВходящиеСообщения КАК КР_ВходящиеСообщения
		|ГДЕ
		|	КР_ВходящиеСообщения.КлючСообщения = &КлючСообщения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КР_АрхивСообщений.ТелоСообщения,
		|	КР_АрхивСообщений.ТелоСообщенияСжатое,
		|	2,
		|	КР_АрхивСообщений.ТипДанных
		|ИЗ
		|	РегистрСведений.КР_АрхивСообщений КАК КР_АрхивСообщений
		|ГДЕ
		|	КР_АрхивСообщений.КлючСообщения = &КлючСообщения
		|	И КР_АрхивСообщений.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.КР_ТипыСообщенийОбмена.ВходящееСообщение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	втСообщения.ТелоСообщения КАК ТелоСообщения,
		|	втСообщения.ТелоСообщенияСжатое КАК ТелоСообщенияСжатое,
		|	втСообщения.ТипДанных КАК ТипДанных
		|ИЗ
		|	втСообщения КАК втСообщения
		|
		|УПОРЯДОЧИТЬ ПО
		|	втСообщения.Порядок";
	
	Запрос.УстановитьПараметр("КлючСообщения", КлючСообщения);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Ошибка поиска входящего сообщения RabbitMQ по ключу: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КлючСообщения);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Выборка.ТипДанных <> "ConfigurationUpdateData" Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Входящеее сообщение RabbitMQ %1 не содержит требуемый тип данных ""ConfigurationUpdateData""'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КлючСообщения);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		Иначе
			Если Выборка.ТелоСообщенияСжатое = Неопределено Тогда
				ЧтениеJSON = Новый ЧтениеJSON;      
				ЧтениеJSON.УстановитьСтроку(Выборка.ТелоСообщения);
			Иначе
				ЧтениеJSON = Новый ЧтениеJSON;      
				ЧтениеJSON.УстановитьСтроку(Выборка.ТелоСообщенияСжатое.Получить());
			КонецЕсли;
			Попытка
				Данные = ПрочитатьJSON(ЧтениеJSON);
			Исключение
				Отказ = Истина;
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда 
					ТекстОшибки = ОписаниеОшибки();
				КонецЕсли;
				ТекстСообщения = НСтр("ru = 'Ошибка чтения данных JSON из входящего сообщения RabbitMQ %1: %2'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, КлючСообщения, ТекстОшибки);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
				Возврат;
			КонецПопытки;
				
			Попытка
				ИмяФайла = злОбновлениеКонфигурации.ЗаписьФайлаОбновления(Данные.version, Данные.cfu, КлючСообщения, Отказ, ТекстОшибки);
			Исключение
				Отказ = Истина;
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда 
					ТекстОшибки = ОписаниеОшибки();
				КонецЕсли;
				ТекстСообщения = НСтр("ru = 'Ошибка записи файла обновления из входящего сообщения RabbitMQ %1: %2'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, КлючСообщения, ТекстОшибки);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
				Возврат;
			КонецПопытки;

			Если Отказ Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка записи файла обновления на версию %1: %2'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Данные.version, ТекстОшибки);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			Иначе
				ТекстСообщения = НСтр("ru = 'Записан файла обновления на версию %1: %2'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Данные.version, ИмяФайла);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
	
// >> 24.07.2024 Петухов А.В., Фактор, #4316

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// << 26.06.2024 Петухов А.В., Фактор, #4316
Функция ЗарегистрироватьОтветДляЦентральнойБазы(ОбновлениеЗавершеноУспешно, ТекстЛога, Версия, ДатаИзмененияСтатуса)
	
	сткОтвет = Новый Структура();
	сткОтвет.Вставить("date", ДатаИзмененияСтатуса);
	сткОтвет.Вставить("version", Версия);
	сткОтвет.Вставить("success", ОбновлениеЗавершеноУспешно);
	сткОтвет.Вставить("log", ТекстЛога);
	
	НомерМагазина = 0;
	мсвСклады = КР_ДополнительныеНастройкиПовтИсп.МассивЗначений("СкладыТекущейБазыДанных", Ложь);
	Если мсвСклады.Количество() > 0 Тогда
		НомерМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(мсвСклады[0], "КР_НомерМагазина");
	КонецЕсли;
	сткОтвет.Вставить("shopnumber", НомерМагазина);
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON;
	ТелоСообщения = КР_ОбщегоНазначениеСервер.ДанныеВJSON(сткОтвет, ПараметрыЗаписиJSON);
	
	// Регистрация исходящего сообщения
	ИсходящееСообщение = КР_ОбменRabbitОбработкаСообщенийОбмена.ПолучитьСтруктуруСообщения();
	ИсходящееСообщение.ТипДанных = "ConfigurationUpdateLog";
	ИсходящееСообщение.Маршрутизация = КР_УТ11_ЦБ_Магазин_ВыгрузкаДанныхСервер.НомерМагазинаЦентральнойБазы();
	ИсходящееСообщение.ТелоСообщения = ТелоСообщения;

	Отказ = Ложь;
	КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьИсходящееСообщениеОбмена(
		КР_УТ11_ЦБ_Магазин_ВыгрузкаДанныхСервер.ТочкаОбмена(), ИсходящееСообщение, Отказ); 
	
	Возврат Не Отказ;
	
КонецФункции
// >> 26.06.2024 Петухов А.В., Фактор, #4316

#КонецОбласти
