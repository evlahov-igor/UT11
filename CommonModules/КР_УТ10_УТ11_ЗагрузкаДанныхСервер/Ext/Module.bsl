////////////////////////////////////////////////////
//// Объект ОбщийМодуль.КР_УТ10_УТ11_ЗагрузкаДанныхСервер
//// Предназначен для загрузки данных из УТ10 посредством шины Rabbit
//// Создан: 22.08.2022 Марченко С.Н., КРОК, JIRA№A2105505-401

#Область ПрограммныйИнтерфейс

Функция ДобавитьНастройкиЗагрузкиОбъектов(ПараметрыЗагрузки) Экспорт
	
	#Область Справочники
	
	// << 31.08.2022 Марченко С.Н., КРОК, JIRA№A2105505-434
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "StorehouseObject");
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "DepartmentObject");
	// >> 31.08.2022 Марченко С.Н., КРОК, JIRA№A2105505-434
	
	// << 17.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-531
// << 27.11.2023 Петухов А.В., Фактор, #3365
	//СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "IndividualObject");
	//СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "VehicleObject");
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "IndividualObject", "trade11");
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "VehicleObject", "trade11");
// >> 27.11.2023 Петухов А.В., Фактор, #3365
	// >> 17.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-531
	
	// << 25.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-725     
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "UserObject");
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "CashierKKMObject");
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "PriceTypeObject");
	// >> 25.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-725    
	
	// << 01.04.2023 Марченко С.Н., КРОК, JIRA№A2105505-1506
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "ContainerObject");
	// >> 01.04.2023 Марченко С.Н., КРОК, JIRA№A2105505-1506

// << 03.11.2023 Петухов А.В., Фактор, #3226
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "AttachedFile");
// >> 03.11.2023 Петухов А.В., Фактор, #3226

	// << 05.03.2024 Петухов А.В., Фактор, #3876
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "ClassifierTNVEDObject");
	// >> 05.03.2024 Петухов А.В., Фактор, #3876
	
	// --> Евлахов Игорь Николаевич (Начало) 07.10.2024
	// Задача #4537
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "TypeSurfaceObject");
	// <-- Евлахов Игорь Николаевич (Конец) 07.10.2024
	
	#КонецОбласти	 
	
	#Область Документы
	
	// << 19.09.2022 Марченко С.Н., КРОК, JIRA№A2105505-487
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "GoodsOutcomeOrderObject");
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "GoodsIncomeOrderObject");
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "GoodsRelocationObject");
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "GoodsRelocationOrderObject");
	// >> 19.09.2022 Марченко С.Н., КРОК, JIRA№A2105505-487

	// << 07.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-673
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "BoxObject");  
	// >> 07.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-673
	
	// << 17.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-531
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "WaybillObject");
	// >> 17.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-531    
	
	// << 25.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-725     
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "RetailSalesReportObject");
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "PriceSettingObject");
	// >> 25.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-725
	
	// << 11.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-723
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "InventorySurplusReсognitionObject");
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "InventoryCountSheetObject");
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "InventoryShortageWriteOffObject");
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "GoodsRegradingObject");
	// >> 11.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-723
	
	// << 02.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-912
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "CardBoxMovementObject");
	// >> 02.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-912

	// << 13.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-918
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "PurchaseServicesAndOtherAssetsObject");
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "ImportCustomsDeclarationObject");  
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "DeclarationImportationGoodsObject");  
	// >> 13.12.2022 Марченко С.Н., КРОК, JIRA№A2105505-918
	
	// << 10.05.2023 Марченко С.Н., КРОК, JIRA№A2105505-1488
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "CashReceiptVoucherObject");  
	// >> 10.05.2023 Марченко С.Н., КРОК, JIRA№A2105505-1488 
	
	#КонецОбласти
	
	#Область РегистрыСведений
	
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "WBBarcodeInfoRegObject");
	
	// << 10.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-683
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "GoodsRelocationAcceptCompletionInfoRegObject");
	// >> 10.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-683
	
	// << 17.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-531
// << 27.11.2023 Петухов А.В., Фактор, #3365
	//СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "IdentityPapersInfoRegObject");
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "IdentityPapersInfoRegObject", "trade11");
// >> 27.11.2023 Петухов А.В., Фактор, #3365
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "CashPaymentVoucherObject");
	// >> 17.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-531
	
	#КонецОбласти  
	
	#Область ПакетыДанных 
	
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "GoodsInStockBriefObject");
	
	// << 28.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-918
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "PurchaseGoodsAndServicesObject");
	// >> 28.11.2022 Марченко С.Н., КРОК, JIRA№A2105505-918
	
	// << 19.09.2022 Марченко С.Н., КРОК, JIRA№A2105505-487
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "ContainerAcceptanceObject");
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "GoodsRelocationOrderCompletionObject");
	// >> 19.09.2022 Марченко С.Н., КРОК, JIRA№A2105505-487
	
	// << 06.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1337
	СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, "SetObject");
	// >> 06.03.2023 Марченко С.Н., КРОК, JIRA№A2105505-1337
	
	#КонецОбласти
	
	Возврат ПараметрыЗагрузки; 
	
КонецФункции

Функция СвойствоОбъектБылЗагружен() Экспорт 
	Возврат "КР_ЗагруженОбменом_УТ10_УТ11";
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфес

#Область ПравилаЗагрузкиОбъектов

#Область Справочники

Процедура ПЗО_StorehouseObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_Склады(XDTOОбъект, Объект, СообщениеОбмена)		
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;        
	
	// A2105505-1294     
	
	Если Объект.ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Объект.Ссылка;
	
	// Заполним дополнительные сведения           
	//
	НаборСвойств = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	
	// КР_ДатаОткрытия  
	УстановитьДополнительноеСведение(ОбъектСсылка, НаборСвойств.КР_ДатаОткрытия, XDTOОбъект.OpeningDate);
			
	// КР_ДатаЗакрытия
	УстановитьДополнительноеСведение(ОбъектСсылка, НаборСвойств.КР_ДатаЗакрытия, XDTOОбъект.ClosingDate);
	
	// КР_ПлощадьОбщая
	УстановитьДополнительноеСведение(ОбъектСсылка, НаборСвойств.КР_ПлощадьОбщая, XDTOОбъект.TotalArea);
	
	// КР_ПлощадьТорговая
	УстановитьДополнительноеСведение(ОбъектСсылка, НаборСвойств.КР_ПлощадьТорговая, XDTOОбъект.TradeArea);
	
	// Заполним историю изменения форматов магазина 
	//
	Если Объект.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин 
		И ЗначениеЗаполнено(XDTOОбъект.StoreCategory) Тогда 	
		
		StoreCategory = Справочники.ФорматыМагазинов.НайтиПоНаименованию(XDTOОбъект.StoreCategory);
		Если ЗначениеЗаполнено(StoreCategory) Тогда 

			ИсторияИзмененияФорматовМагазинов = РегистрыСведений.ИсторияИзмененияФорматовМагазинов;
			
			ТоварнаяГруппа = Справочники.ВидыНоменклатуры.ПустаяСсылка();
			
			// A2105505-775 удалена использования измерения КР_ТоварнаяГруппа
			Отбор = Новый Структура("Склад", ОбъектСсылка);
			СрезПоследних = ИсторияИзмененияФорматовМагазинов.ПолучитьПоследнее( , Отбор);
			
			Если СрезПоследних.ФорматМагазина <> StoreCategory Тогда 
				
				Запись = ИсторияИзмененияФорматовМагазинов.СоздатьМенеджерЗаписи();
				Запись.Период = ТекущаяДатаСеанса();
				Запись.Склад = ОбъектСсылка;
				
				Запись.ФорматМагазина = StoreCategory;            
				// По умолчанию совпадает с ФДР. Устанавливать не будем
				// КонтролироватьАссортимент = Ложь;
				// РозничныеЦеныИзФорматаМагазина = Ложь;    
				
				Запись.Автор = Пользователи.ТекущийПользователь();
				Запись.ДатаЗаписи = Запись.Период;
				
				Запись.Записать();
				
			КонецЕсли;
			
		Иначе
			
			СсылкаМетаданные = StoreCategory.Метаданные();
			
			ТекстСообщения = НСтр("ru = 'Не найден формат магазина по наименованию ""%1""'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, XDTOОбъект.StoreCategory);    
			
		  	ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_ОшибкаПоискаСсылки(СсылкаМетаданные); 	
								  
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
			
		КонецЕсли;
				
	КонецЕсли;
	//	
КонецПроцедуры

Процедура ПЗО_DepartmentObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_СтруктураПредприятия(XDTOОбъект, Объект, СообщениеОбмена)		
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПЗО_IndividualObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
 	Объект = Неопределено;
	Если Не ПКО_ФизическиеЛица(XDTOОбъект, Объект, СообщениеОбмена)		
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПЗО_VehicleObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
 	Объект = Неопределено;
	Если Не ПКО_ТранспортныеСредства(XDTOОбъект, Объект, СообщениеОбмена)		
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПЗО_UserObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
 	Объект = Неопределено;
	Если Не ПКО_Пользователи(XDTOОбъект, Объект, СообщениеОбмена)		
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПЗО_CashierKKMObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
 	Объект = Неопределено;
	Если Не ПКО_КассыККМ(XDTOОбъект, Объект, СообщениеОбмена)		
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПЗО_PriceTypeObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
 	Объект = Неопределено;
	Если Не ПКО_ВидыЦен(XDTOОбъект, Объект, СообщениеОбмена)		
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПЗО_ContainerObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
 	Объект = Неопределено;
	Если Не ПКО_КР_Контейнеры(XDTOОбъект, Объект, СообщениеОбмена)		
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;

КонецПроцедуры

// << 03.11.2023 Петухов А.В., Фактор, #3226
Процедура ПЗО_AttachedFile(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
 	Объект = Неопределено;
	Если Не ПКО_ПрисоединенныеФайлы(XDTOОбъект, Объект, СообщениеОбмена)		
		// << 07.12.2023 Петухов А.В., Фактор, #3450
		// Объект записывается в ПКО
		//Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(
		//	Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен())
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен())
		// >> 07.12.2023 Петухов А.В., Фактор, #3450
			Тогда 
		Возврат;
	// << 16.09.2024 Петухов А.В., Фактор, #4471
	Иначе
		// Обновление номенклатуры выполняем после записи файла, иначе ошибка при выгрузке в базу магазинов
		НоменклатураСсылка = Неопределено;
		Если Объект.ДополнительныеСвойства.Свойство("НоменклатураТребуетОбновления",НоменклатураСсылка) Тогда
			НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			НоменклатураОбъект.ФайлКартинки = Объект.Ссылка;
			Попытка
				НоменклатураОбъект.Записать();
			Исключение
				ТекстОшибки = НСтр("ru = 'КР_УТ10_УТ11_ЗагрузкаДанныхСервер: Не обновлено основное изображение для номенклатуры. Ошибка записи.'");
				ТекстСообщения = СтрШаблон(ТекстОшибки);
				ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.Номенклатура);
				КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);
			КонецПопытки;
		КонецЕсли;
	// >> 16.09.2024 Петухов А.В., Фактор, #4471
	КонецЕсли;

КонецПроцедуры
// >> 03.11.2023 Петухов А.В., Фактор, #3226

// << 05.03.2024 Петухов А.В., Фактор, #3876
Процедура ПЗО_ClassifierTNVEDObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
 	Объект = Неопределено;
	Если Не ПКО_КлассификаторТНВЭД(XDTOОбъект, Объект, СообщениеОбмена)		
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;

КонецПроцедуры
// >> 05.03.2024 Петухов А.В., Фактор, #3876

// --> Евлахов Игорь Николаевич (Начало) 07.10.2024
// Задача #4537
Процедура ПЗО_TypeSurfaceObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_ТипыПоверхностейРасположенияТоваров(XDTOОбъект, Объект, СообщениеОбмена)		
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Документы

Процедура ПЗО_GoodsOutcomeOrderObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	Склад = Неопределено;
	Если Не ПКО_XDTOВСсылку(XDTOОбъект.StorehousePick, Склад, СообщениеОбмена) Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Склад.КР_ВидСклада = Перечисления.КР_ВидыСкладов.Магазин
		И Склад.КР_АдресныйСкладБезордернойОтгрузки Тогда 

		// Конвертируем в объект
	 	Объект = Неопределено;
		Если Не ПКО_GoodsOutcomeOrderObjectВОтборТоваров(XDTOОбъект, Объект, Склад, СообщениеОбмена)
			Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
				Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
			Возврат;
		КонецЕсли;
		
	Иначе
		
		// Конвертируем в объект
	 	Объект = Неопределено;
		Если Не ПКО_GoodsOutcomeOrderObjectВРасходныйОрдерНаТовары(XDTOОбъект, Объект, Склад, СообщениеОбмена)
			Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
				Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_GoodsIncomeOrderObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	СкладПолучатель = Неопределено;
	Если Не ПКО_XDTOВСсылку(XDTOОбъект.StorehousePut, СкладПолучатель, СообщениеОбмена) Тогда 
		Возврат;                                             
	КонецЕсли;	
	
	// Если КР_ИспользоватьРазмещениеКакПриходныйОрдер = Ложь 
	//	тогда используется типовой учет. NB! Не протестирован консультантом  
	Если Не СкладПолучатель.КР_ИспользоватьРазмещениеКакПриходныйОрдер Тогда 
		
		// Конвертируем в объект
		Объект = Неопределено;
		Если Не ПКО_GoodsIncomeOrderObjectВПриходныйОрдерНаТовары(XDTOОбъект, 
				СкладПолучатель, Объект, СообщениеОбмена)
			Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
				Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
			Возврат;
		КонецЕсли;

	Иначе 

		ОтборРазмещениеТоваровОбъект = Неопределено;
		Если Не ПКО_GoodsIncomeOrderObjectВРазмещениеТоваров(XDTOОбъект, 
				ОтборРазмещениеТоваровОбъект, СообщениеОбмена)
			Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
				ОтборРазмещениеТоваровОбъект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_GoodsRelocationObject(СообщениеОбмена) Экспорт	
	

	GoodsRelocationObjectВДокументы(СообщениеОбмена);
	
	// A2105505-1893 
	
	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	

	Если XDTOОбъект.DeletionMark 
		И СообщениеОбмена.ЕстьОшибка Тогда 
		
		СообщениеОбмена.ЕстьОшибка = Ложь;  
		СообщениеОбмена.УточненноеСостояние = Неопределено;
		
	КонецЕсли;	
	//
		
КонецПроцедуры

Процедура ПЗО_GoodsRelocationOrderObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// A2105505-1441                          
	СкладПолучатель = Неопределено;
	Маркетплейс = Неопределено;
	Если ПКО_XDTOВСсылку(XDTOОбъект.StorehousePut, СкладПолучатель, СообщениеОбмена)
		 И СкладСвязанСМаркетплейсом(СкладПолучатель, Маркетплейс) Тогда 

		// Конвертируем в объект
		Объект = Неопределено;
		Если Не ПКО_GoodsRelocationOrderObjectВЗаказКлиента(XDTOОбъект, Объект, Маркетплейс, СообщениеОбмена)
			Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
				Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
			Возврат;
		КонецЕсли;
		 
	Иначе //
		
		// Конвертируем в объект
		Объект = Неопределено;
		Если Не ПКО_GoodsRelocationOrderObjectВЗаказНаПеремещение(XDTOОбъект, Объект, СообщениеОбмена)
			Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
				Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли; //
	
КонецПроцедуры

Процедура ПЗО_BoxObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
 	Объект = Неопределено;
	Если Не ПКО_УпаковочныйЛист(XDTOОбъект, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПЗО_WaybillObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	//A2105505-2377
	Если Не XDTOОбъект.DeletionMark ИЛИ XDTOОбъект.Posted Тогда

		// Конвертируем в объект
		Объект = Неопределено;
		Если Не ПКО_ТранспортнаяНакладная(XDTOОбъект, Объект, СообщениеОбмена)
			Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
			Возврат;
		КонецЕсли;
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПЗО_RetailSalesReportObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_ОтчетОРозничныхПродажах(XDTOОбъект, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;

// << 28.09.2023 Петухов А.В., Фактор, #3093
	Если Истина
		И НЕ СообщениеОбмена.ЕстьОшибка
		И ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(Объект.Склад)
		И НЕ Объект.ПометкаУдаления
		И XDTOОбъект.Свойства().Получить("CountCustomer") <> Неопределено
	Тогда
		ТекстОшибки = "";
		Попытка
			РегистрыСведений.КР_ПосещаемостьМагазина.ЗаписатьПосещаемостьМагазина(Объект.Склад, XDTOОбъект.CountCustomer, Объект.Дата); 
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда 
				ТекстОшибки = ОписаниеОшибки();
			КонецЕсли;
			ТекстОшибки = СтрШаблон("Ошибка записи в регистр: %1", ТекстОшибки);
		КонецПопытки;
		ОбъектМетаданных = Метаданные.РегистрыСведений.КР_ПосещаемостьМагазина;		
		Если ТекстОшибки <> "" Тогда
			ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(ОбъектМетаданных);		
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстОшибки, ТипЗаписиВЛог_Ошибка);
		Иначе
			ТипЗаписиВЛог_Информация = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация(ОбъектМетаданных);		
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена,
				"Выполнена запись в регистр посещаемости магазина", ТипЗаписиВЛог_Информация);
		КонецЕсли;
	КонецЕсли;
// >> 28.09.2023 Петухов А.В., Фактор, #3093
	
КонецПроцедуры

Процедура ПЗО_PriceSettingObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_УстановкаЦенНоменклатуры(XDTOОбъект, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПЗО_InventorySurplusReсognitionObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	ОбъектОприходование = Неопределено;
	Если Не ПКО_ОприходованиеИзлишковТоваров(XDTOОбъект, ОбъектОприходование, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			ОбъектОприходование, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	// Создаем Ордер на отражение излишков товаров 
	//	при выполнении соответствующих условий  
	Если Не СкладыСервер.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач(
			ОбъектОприходование.Склад, ОбъектОприходование.Дата) Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектОрдер = Неопределено;
	Если Не СформироватьОрдерНаОтражениеИзлишковТоваровПоДаннымОприходования(
			ОбъектОрдер, ОбъектОприходование, XDTOОбъект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			ОбъектОрдер, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПЗО_InventoryCountSheetObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	Объект = Неопределено;
	// --> Евлахов Игорь Николаевич (Начало) 13.03.2024
	// Задача #3907
	// Начало было
	//Если Не ПКО_ПересчетТоваров(XDTOОбъект, Объект, СообщениеОбмена)
	//	Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
	//		Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
	//	Возврат;
	//КонецЕсли;
	// Конец было
	Если ПКО_ПересчетТоваров(XDTOОбъект, Объект, СообщениеОбмена) Тогда			
		Если Объект.Проведен Тогда			
			ИсходныйСтатусОбъекта = Объект.Статус;
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "Статус, Проведен");
			
			ПрошлыйСтатус = ЗначенияРеквизитов.Статус;
			ПрошлыйДокументПроведен = ЗначенияРеквизитов.Проведен;
			
			Если (Не ЗначениеЗаполнено(ПрошлыйСтатус) 
					ИЛИ ПрошлыйСтатус = Перечисления.СтатусыПересчетовТоваров.Подготовлено
					ИЛИ Не ПрошлыйДокументПроведен)
				И (Объект.Статус = Перечисления.СтатусыПересчетовТоваров.ВнесениеРезультатов
					ИЛИ Объект.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено
					И СкладыСервер.ИспользоватьСтатусыПересчетовТоваров(Объект.Склад)) Тогда
					
				// Требуется документ провести по статусам, для выполнения всех контролей, 
				// в системе для разных статусов документа выполняются разные контроли
				Объект.Статус = Перечисления.СтатусыПересчетовТоваров.ВРаботе; 
				
				Если Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
								Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
					Возврат;			
				КонецЕсли;
				
				Объект.Статус = ИсходныйСтатусОбъекта;
			КонецЕсли;        
		КонецЕсли;
		
		Если Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
			Возврат;			
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	// <-- Евлахов Игорь Николаевич (Конец) 13.03.2024
	
КонецПроцедуры

Процедура ПЗО_InventoryShortageWriteOffObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	Объект = Неопределено;             
	// Для различных DocOperationType формируются различные документы
	
	Если XDTOОбъект.DocOperationType = "ФорменнаяОдежда"	
		Или XDTOОбъект.DocOperationType = "Спецодежда" Тогда 
		
		Если Не ПКО_ВнутреннееПотреблениеТоваров(XDTOОбъект, Объект, СообщениеОбмена) Тогда 
			Возврат;
		КонецЕсли;  

	Иначе	                                                                    
		
		Если Не ПКО_СписаниеНедостачТоваров(XDTOОбъект, Объект, СообщениеОбмена) Тогда 
			Возврат;
		КонецЕсли;  
		
	КонецЕсли;
	
	Если Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
		Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	// Создаем Ордер на отражение излишков Излишков 
	//	при выполнении соответствующих условий  
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров")
		Или Не СкладыСервер.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач(
			Объект.Склад, Объект.Дата) Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектОрдер = Неопределено;
	Если Не СформироватьОрдерНаОтражениеНедостачТоваровПоДаннымСписания(
			ОбъектОрдер, Объект, XDTOОбъект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			ОбъектОрдер, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_GoodsRegradingObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	Объект = Неопределено;             
	Если Не ПКО_ПересортицаТоваров(XDTOОбъект, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_CardBoxMovementObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;
	
	// A2105505-2061
	DocTypeОтгрузкаСоСклада = "Отгрузка со склада"; 
	DocTypeЗаказМагазина	= "Заказ магазина (перемещение товаров)"; //A2105505-2344	
	Если XDTOОбъект.DocType = DocTypeОтгрузкаСоСклада Тогда 
		
		ТекстСообщения = НСтр("ru = 'Данные не загружены так как DocType = ""%1""'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, XDTOОбъект.DocType);
		
		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация();
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);

		Возврат;
	//A2105505-2344	
	ИначеЕсли XDTOОбъект.DocType = DocTypeЗаказМагазина И ТипДвиженияОтгрузка(XDTOОбъект) Тогда 
		
		ТекстСообщения = НСтр("ru = 'Данные не загружены так как DocType = ""%1"" и Тип движения = Отгрузка'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, XDTOОбъект.DocType);
		
		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация();
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);

		Возврат;
	//A2105505-2344		
	КонецЕсли;	
	//
	
	// Конвертируем в объект
	Объект = Неопределено;             
	Если Не ПКО_КР_ДвижениеКоробов(XDTOОбъект, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_PurchaseServicesAndOtherAssetsObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	Объект = Неопределено;             
	Если Не ПКО_ПриобретениеУслугПрочихАктивов(XDTOОбъект, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
	Если XDTOОбъект.InvoiceNum = ""
		Или XDTOОбъект.InvoiceDate = '00010101' Тогда 

		ОбъектМетаданные = Объект.Метаданные();
		
		ТекстСообщения = НСтр("ru = 'Не заполнены значения полей InvoiceNum, InvoiceDate. 
			|Создание Счет-фактуры не может быть выполнено'");
		//A2105505-1937 Фомичев А.Е. 12.07.23
		//ТекстСообщения = СтрШаблон(ТекстСообщения, ОбъектМетаданные, XDTOОбъект.DocNum, XDTOОбъект.DocDate, XDTOОбъект.Ref);
		
		ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(ОбъектМетаданные);
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);

		Возврат;
		
	КонецЕсли;
	
	// Ввод счет-фактуры
	СчетФактураОбъект = Неопределено;             
	Если Не СформироватьСчетФактуруПолученныйНаОснованииПриобретения(Объект, 
			СчетФактураОбъект, XDTOОбъект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			СчетФактураОбъект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_ImportCustomsDeclarationObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	Объект = Неопределено;             
	Если Не ПКО_ТаможеннаяДекларацияИмпорт(XDTOОбъект, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_DeclarationImportationGoodsObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	Объект = Неопределено;             
	Если Не ПКО_ЗаявлениеОВвозеТоваров(XDTOОбъект, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_CashReceiptVoucherObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	Объект = Неопределено;             
	Если Не ПКО_ПриходныйКассовыйОрдер(XDTOОбъект, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_CashPaymentVoucherObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	Объект = Неопределено;             
	Если Не ПКО_РасходныйКассовыйОрдер(XDTOОбъект, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрыСведений

Процедура ПЗО_WBBarcodeInfoRegObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_ШтрихкодыWB(XDTOОбъект, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.НаборЗаписейРегистраЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПЗО_GoodsRelocationAcceptCompletionInfoRegObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	МассивОбъектов = Неопределено; // A2105505-1769
	Если Не ПКО_ПриемкаПеремещенийТоваров(XDTOОбъект, МассивОбъектов, СообщениеОбмена) Тогда 
		Возврат;
	КонецЕсли;

	// A2105505-1915 Добавлено условие и код после блока уловия  
	// Смысл доработки - получить созданный акт (при записи в РС создается акт)
	//	и сверить его с тем что передали в пакете
	// Если количества не совпадают то отменить проведение акта 
	//	и зарегистрировать ошибку проведения
    // A2105505-2224 Уточнение
	// Так как акты теперь формируются отложенно 
	//	то сверяем полученные значения с результатом типового заполнения тч товары актов
	МассивНакладных = Новый Массив;
	Для Каждого Объект Из МассивОбъектов Цикл 
		
		Запись = Объект[0];
		// << 04.07.2023 Петухов А.В., Фактор, #4287
		Если СообщениеОбмена.СсылкиНаОбъекты.Найти(Запись.Накладная) = Неопределено Тогда
			СообщениеОбмена.СсылкиНаОбъекты.Добавить(Запись.Накладная);
		КонецЕсли;
		// >> 04.07.2023 Петухов А.В., Фактор, #4287
		Если Запись.НеФормироватьАктОрасхождениях
			Или Не ЗначениеЗаполнено(Запись.ДатаПотоварнойПриемки) Тогда 
			Продолжить;
		КонецЕсли;	
		
		МассивНакладных.Добавить(Запись.Накладная);
				
	КонецЦикла;                       

	// << 16.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2613  
	Если ЗначениеЗаполнено(МассивНакладных) Тогда   
	// >> 16.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2613

		// Формируем таблицу товаров акта о расхожденияю
		// см. АктОРасхожденияхПослеПеремещения.ЗаполнитьНаОсновании 
		Запрос = Новый Запрос(Документы.АктОРасхожденияхПослеПеремещения.ТекстЗапросаПоОснованиюПеремещения());
		Запрос.УстановитьПараметр("Основания", МассивНакладных);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		АктОРасхожденияхТовары = РезультатЗапроса[1].Выгрузить();
		АктОРасхожденияхТовары.Свернуть( , "КоличествоПоДокументу,Количество");   
		АктОРасхожденияхИтоги = АктОРасхожденияхТовары[0];
		// << 22.03.2024 Фомичев А.Е., КРОК, JIRA№A2105505-2632  
		Запрос.Текст = КР_ТекстЗапросаДанныеПоПриемке();
		РезультатЗапроса = Запрос.Выполнить();
		ДокументыПриемкихТовары = РезультатЗапроса.Выгрузить();
		ДокументыПриемкихТовары.Свернуть( , "КоличествоПоДокументу,Количество");   
		ДокументыПриемкиИтоги = ДокументыПриемкихТовары[0];  
		// >> 22.03.2024 Фомичев А.Е., КРОК, JIRA№A2105505-2632

		КоличествоПлан = ?(XDTOОбъект.EstimatedQuantity <> Неопределено, XDTOОбъект.EstimatedQuantity, 0);
		КоличествоФакт = ?(XDTOОбъект.ActualQuantity <> Неопределено, XDTOОбъект.ActualQuantity, 0);  
		
		ЕстьРасхождения = АктОРасхожденияхИтоги.КоличествоПоДокументу <> КоличествоПлан
		// << 22.03.2024 Фомичев А.Е., КРОК, JIRA№A2105505-2632  
		//Или АктОРасхожденияхИтоги.Количество <> КоличествоФакт; 
			Или ДокументыПриемкиИтоги.Количество <> КоличествоФакт; 

		ШаблонСообщения = НСтр("ru = 'По документам:" + Символы.ПС
				+ "Количество План = %1" + Символы.ПС
				+ "Количество Факт = %2" + Символы.ПС
				+ "XDTO:" + Символы.ПС
				+ "КоличествоПлан = %3" + Символы.ПС
				+ "КоличествоФакт = %4'");
		// >> 22.03.2024 Фомичев А.Е., КРОК, JIRA№A2105505-2632
			
		Если ЕстьРасхождения Тогда 		
			
			ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка();
			ТекстСообщения = НСтр("ru = 'Количественные показатели расхождений переданных в пакете XDTO "
				+ "не совпадают с расчитанными для заполнения актов'");     
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
			// << 22.03.2024 Фомичев А.Е., КРОК, JIRA№A2105505-2632  
          	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, АктОРасхожденияхИтоги.КоличествоПоДокументу, ДокументыПриемкиИтоги.Количество, КоличествоПлан, КоличествоФакт);  
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
			// >> 22.03.2024 Фомичев А.Е., КРОК, JIRA№A2105505-2632
			Возврат;  
		// << 22.03.2024 Фомичев А.Е., КРОК, JIRA№A2105505-2632  
		Иначе	
			ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация();
			ТекстСообщения = НСтр("ru = 'Результат сверки данных из БД с переданными в пакете XDTO") + Символы.ПС;     
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
          	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, АктОРасхожденияхИтоги.КоличествоПоДокументу, ДокументыПриемкиИтоги.Количество, КоличествоПлан, КоличествоФакт);  
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог); 
		// >> 22.03.2024 Фомичев А.Е., КРОК, JIRA№A2105505-2632			
		КонецЕсли;
		//
		
	// << 16.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2613  
	КонецЕсли;	
	// >> 16.01.2024 Марченко С.Н., КРОК, JIRA№A2105505-2613
		
	// A2105505-1769 
	Для Каждого Объект Из МассивОбъектов Цикл 
		
		КР_ОбменRabbitОбщиеМеханизмыКонвертации.НаборЗаписейРегистраЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен());
		
	КонецЦикла;
   	//

КонецПроцедуры

Процедура ПЗО_IdentityPapersInfoRegObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_ДокументыФизическихЛиц(XDTOОбъект, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.НаборЗаписейРегистраЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область ПакетыДанных

Процедура ПЗО_GoodsInStockBriefObject(СообщениеОбмена) Экспорт	

	// Задача: 
	//	- получить данные из пакета
	//	- сверить остатки по складам
	//	- если есть расхождения - записать отчет с детализакией по расхождениям
	
	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
		
	// Помещаем данные по остаткам во временную таблицу
	// Если данных нет, то сразу выходим
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	НеНайденныеСкладыПоRef = Новый Массив;
	Если Не ПоместитьПакетGoodsInStockBriefRowsВоВременнуюТаблицу(
		МенеджерВременныхТаблиц, XDTOОбъект.GoodsInStockBriefRows, НеНайденныеСкладыПоRef, СообщениеОбмена) Тогда 
		Возврат;
	КонецЕсли;	
			
	// Находим разницу с остатками на складах
	// На выходе в менеджере имеем таблицу "РасхожденияПоСкладамСАналитикой"
	СформироватьРасхожденияОстатковПоСкладамСУчетомАналитики(
		МенеджерВременныхТаблиц, XDTOОбъект.StockDate);     
		
	// Получаем расхождения 
	РезультатЗапроса = Неопределено;
	Если Не ПолучитьРасхожденияСГруппировкойПоСкладам(МенеджерВременныхТаблиц, РезультатЗапроса) Тогда 
		Возврат;
	КонецЕсли;
	
	// Отправляем ответ (сохраняем в очереди сообщений на отправку)  
	// Выполним обход по складам
	ВыборкаПоСкладам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСкладам.Следующий() Цикл 
		
		СформироватьСообщениеПоРасхождению(
			XDTOОбъект.StockDate, 
			ВыборкаПоСкладам.Склад, 
			ВыборкаПоСкладам.ЕстьОстатки, 
			ВыборкаПоСкладам.Выбрать(), 
			СообщениеОбмена
		);	
				
	КонецЦикла;	
	
	// Если не нашли склад то отправляем обратно сообщение тем же самым объектом 
	//	но с Name "Объект не найден в УТ11" и пустой детализацией остатков
	// Временное решение. 
	Для Каждого Ref Из НеНайденныеСкладыПоRef Цикл 
		
		СформироватьСообщениеПоНеНайденномуСкладуПоRef(XDTOОбъект.StockDate, Ref, СообщениеОбмена);	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПЗО_ContainerAcceptanceObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объекты (ПриходныйОрдерНаТовары или ОтборРазмещениеТоваров)
	МассивОбъектов = Неопределено;
	Если Не ПКО_ПакетДанныхУпаковочныйЛист(XDTOОбъект, МассивОбъектов, СообщениеОбмена) Тогда 
		Возврат;
	КонецЕсли;		   
	
	ПоступленияПоРаспоряжениям = Новый Соответствие;
	
	// Открытый вопрос: если один из документов не записался, что делать?
	// На данный момент решения нет
	Для Каждого Объект Из МассивОбъектов Цикл 
		
		Если Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 			
			Возврат;
		КонецЕсли;

		// Сформируем Поступление товаров на склад при необходимости
		ПоступлениеТоваров = Неопределено;
		Если СформироватьПоступленияТоваровПоОприходованию(
			Объект, ПоступлениеТоваров, XDTOОбъект, ПоступленияПоРаспоряжениям, СообщениеОбмена) Тогда 
			
			КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
				ПоступлениеТоваров, СообщениеОбмена, СвойствоОбъектБылЗагружен());
			
		КонецЕсли;	
					
	КонецЦикла;	
		
КонецПроцедуры

Процедура ПЗО_GoodsRelocationOrderCompletionObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// A2105505-1896
	Склад = Неопределено;
	Если Не ПКО_XDTOВСсылку(XDTOОбъект.Storehouse, Склад, СообщениеОбмена) Тогда 
		Возврат;
	КонецЕсли;	
		
	// Не проведенный документ не обрабатываем
	// Возникает вопрос что делать если документ на "той" стороне "отменили"
	Если Не XDTOОбъект.Posted Тогда 
		// << 13.06.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1782
		ТипЗаписиВЛог_Инфо = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация(
			Метаданные.Документы.ЗаказНаПеремещение);
		ТекстСообщения = НСтр("ru = 'Передан пакет по непроведенному документу'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Инфо);
		// >> 13.06.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1782
		Возврат;
	КонецЕсли;
	
	// Конвертируем в объект
	Объект = Неопределено;             
	Если Не ПКО_GoodsRelocationOrderCompletionObjectВЗаказа(XDTOОбъект, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_PurchaseGoodsAndServicesObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
	
	// Конвертируем в объект
	Объект = Неопределено;             
	Если Не ПКО_ПакетДанныхПриобретениеТоваровУслугСДетализациейПоЗаказам(XDTOОбъект, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
			Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_SetObject(СообщениеОбмена) Экспорт	

	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
		
	// Получаем таблицу значений для товаров  
	// За основу возьмем ТЧ заказа на перемещение
	ТабличнаяЧастьМетаданные = Метаданные.Документы.ЗаказКлиента.ТабличныеЧасти.Товары;
	ТаблицаТовары = ПолучитьТаблицуЗначенийПоМетаданным(ТабличнаяЧастьМетаданные);  
	
	// GoodsDetailedRowsObject 
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТабличнаяЧастьМетаданные", ТабличнаяЧастьМетаданные);	
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, ТаблицаТовары, СообщениеОбмена, ДополнительныеПараметры);
	
	Если Не ЗначениеЗаполнено(ТаблицаТовары) Тогда 
		Возврат;
	КонецЕсли;	  
	
	МассивНоменклатуры = ТаблицаТовары.ВыгрузитьКолонку("Номенклатура"); 
	МассивНоменклатуры = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНоменклатуры);
	Если МассивНоменклатуры.Количество() > 1 Тогда  
		ТекстСообщения = НСтр(
			"ru='В списке ""Goods"" указана различная номенклатура'");
		ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка();		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);   
		Возврат;
	КонецЕсли;		
		
	Для Каждого СтрокаДанные Из ТаблицаТовары Цикл 
			
		ПКО_ПакетДанныхSetObjectВСоставСета(XDTOОбъект, СтрокаДанные, СообщениеОбмена); 

	КонецЦикла;                            
		
	ПКО_ПакетДанныхSetObjectВСоставКонтейнера(XDTOОбъект, МассивНоменклатуры[0], СообщениеОбмена); 
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиЗагрузкиОбъектов       

// << 27.11.2023 Петухов А.В., Фактор, #3365
//Функция НастройкаЗагрузки(ПараметрыЗагрузки, ТипДанных)
Функция НастройкаЗагрузки(ПараметрыЗагрузки, ТипДанных, ОчередьОбмена = "")
// >> 27.11.2023 Петухов А.В., Фактор, #3365
	
	ШаблонПравилаЗагрузки = "КР_УТ10_УТ11_ЗагрузкаДанныхСервер.ПЗО_%1";
	
	СтрокаЗагрузки = ПараметрыЗагрузки.Добавить();
	СтрокаЗагрузки.ТипДанных = ТипДанных;
	СтрокаЗагрузки.Отправитель = ""; // любой
// << 27.11.2023 Петухов А.В., Фактор, #3365
	//СтрокаЗагрузки.ОчередьОбмена = ""; // любой
	СтрокаЗагрузки.ОчередьОбмена = ОчередьОбмена;
// >> 27.11.2023 Петухов А.В., Фактор, #3365
	СтрокаЗагрузки.ПравилоЗагрузки = СтрШаблон(ШаблонПравилаЗагрузки, ТипДанных);
	СтрокаЗагрузки.ДополнительныеПараметры = Новый Структура;
	
	Возврат СтрокаЗагрузки;
	
КонецФункции

#КонецОбласти

#Область ОбщиеМетодыXDTO

Функция ПолучитьОбъектXDTO(ИмяОбъекта)
	
	URIПространстваИмен = "http://www.zollaintegration.croc.ut11_ut10.org";
	ТипОбъектаXDTO = ФабрикаXDTO.Тип(URIПространстваИмен, ИмяОбъекта);	
	ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъектаXDTO);	
	Возврат ОбъектXDTO;
	
КонецФункции

#КонецОбласти

#Область ПравилаКонвертации

Функция ПараметрыПоискаСсылки(КритичнаяОшибкаПоиска = Истина, МолчаливыйПоиск = Ложь)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТипСообщения_Ошибка", КритичнаяОшибкаПоиска);
	ДополнительныеПараметры.Вставить("МолчаливыйПоиск", МолчаливыйПоиск);
	ДополнительныеПараметры.Вставить("ОчищатьСсылкуЕслиБитая", Истина);
	ДополнительныеПараметры.Вставить("ИмяТипаXDTO", Неопределено);

	Возврат ДополнительныеПараметры;
	
КонецФункции	

Функция ПКО_XDTOВСсылку(
	XDTOЗначение, Ссылка, СообщениеОбмена, НастройкиПоиска = Неопределено) Экспорт  
	
	// Очищаем ссылку для случаев обновления основного объекта
	Ссылка = Неопределено;
	
	// Если значение не заполнено, то метод не выполнил своего прямого назначения 
	Если XDTOЗначение = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Если НастройкиПоиска = Неопределено Тогда 
		НастройкиПоиска = ПараметрыПоискаСсылки();
	КонецЕсли;	

	ОчищатьСсылкуЕслиБитая = НастройкиПоиска.ОчищатьСсылкуЕслиБитая;
	ИмяТипаXDTO = НастройкиПоиска.ИмяТипаXDTO;
	
	// Опрелеляем тип объекта XDTO, имя типа, если не задано
	Если ИмяТипаXDTO = Неопределено Тогда 
		ТипОбъектаXDTO = XDTOЗначение.Тип();
		ИмяТипаXDTO = ТипОбъектаXDTO.Имя;
	КонецЕсли;
	
	// Определяем тип с которым будем работать   
	СсылкаТип = ПолучитьТипЗначенияПоТипуXDTO(ИмяТипаXDTO); 
	Если СсылкаТип = Неопределено Тогда 
		ТекстОшибки = НСтр("ru = 'КР_УТ10_УТ11_ЗагрузкаДанныхСервер.ПКО_XDTOВСсылку:
		|Не определено правило конвертации из XDTO типа ""%1"" в тип ""Ссылка""'");  
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяТипаXDTO);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	
	
	Ссылка = XMLЗначение(СсылкаТип, XDTOЗначение.Ref);

	Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда 
		Возврат Истина;
	КонецЕсли;    
	
	// Если не нашли по уникальному идентификатору в базе данных
	//	тогда ищем по РС КР_ИдентификаторыСинхронизируемыхОбъектов
	Если КР_ОбменRabbitОбщиеМеханизмыКонвертации.
			ЕстьЗаписьСИдентификаторомВСинхронизируемыхОбъектах(XDTOЗначение.Ref, Ссылка, СообщениеОбмена) Тогда 
		Возврат Истина;
	КонецЕсли;    
		
	// Если не нашли по уникальному идентификатору и отправителю в РС   
	// 	поищем по алгоритму поиска, если задан
	АлгоритмПоиска = ПолучитьАлгоритмПоискаЗначенияПоТипуXDTO(ИмяТипаXDTO); 
	
	Если АлгоритмПоиска <> Неопределено Тогда   
		
		// Алгоритм поиска в простом варианте содержит поля поиска
		// В сложном - имя функции, которой производится поиск элемента 
		// Функция должна реализовать интерфейс общего метода "НайтиСсылкиПоПолямПоиска" 
		//	т.е. на возвращаемое значение должно быть булево = истина если найдены значения,
		//	заполнить параметр "МассивСсылок" и Поля поиска (по сути расшифровку значений полей) согласно шаблону. 
		// Пример: Функция АлгоритмПоискаПоПолямСсылкаКонрагенты
		Если СтрНачинаетсяС(АлгоритмПоиска, "АлгоритмПоискаПоПолямСсылка") Тогда 

 			ПоляПоиска = Неопределено;
			МассивСсылок = Неопределено;
            ИмяМетода = АлгоритмПоиска;  
								
		Иначе	

			// Ищем по полям поиска   
			ПоляПоиска = АлгоритмПоиска;
			МассивСсылок = Неопределено;
            ИмяМетода = "НайтиСсылкиПоПолямПоиска";  
			
		КонецЕсли;

		// << 17.06.2024 Петухов А.В., Фактор, #4176
		Если НастройкиПоиска.Свойство("ДополнительныеПоляПоиска") Тогда
			Если ЗначениеЗаполнено(ПоляПоиска) Тогда
				ПоляПоиска = СтрШаблон("%1,%2",ПоляПоиска,НастройкиПоиска.ДополнительныеПоляПоиска);
			Иначе
				ПоляПоиска = НастройкиПоиска.ДополнительныеПоляПоиска;
			КонецЕсли;
		КонецЕсли;
		// >> 17.06.2024 Петухов А.В., Фактор, #4176
		
		ФрагментКода = "%1(СсылкаТип, XDTOЗначение, ПоляПоиска, МассивСсылок, СообщениеОбмена)"; 
		ФрагментКода = СтрШаблон(ФрагментКода, ИмяМетода);
		Если Вычислить(ФрагментКода)  
			И МассивСсылок.Количество() = 1 Тогда  
			Ссылка = МассивСсылок[0];
			КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаписатьИдентификаторСинхронизируемыхОбъектов(
				XDTOЗначение.Ref, Ссылка, СообщениеОбмена);
					
			Возврат Истина;
		КонецЕсли;	
		
		// Вставим поля поиска и количество найденых по полям поиска для последующей генерации ошибки
		НастройкиПоиска.Вставить("ПоляПоиска", ПоляПоиска);
		НастройкиПоиска.Вставить("КоличествоСсылок", МассивСсылок.Количество()); 
		
	КонецЕсли;
	
	Если Не НастройкиПоиска.МолчаливыйПоиск Тогда 
		СформироватьЗаписьВЛог_XDTOВСсылку(СсылкаТип, XDTOЗначение, НастройкиПоиска, СообщениеОбмена);
	КонецЕсли;
	
	Если ОчищатьСсылкуЕслиБитая Тогда   
		Ссылка = Неопределено;    
	КонецЕсли;
	
	Возврат Ложь;		
			
КонецФункции

#Область Справочники

Функция НоменклатураХарактеристикаПакетноПараметрыПоиска(
	ПостфиксИменКолонок = "", ЗапретПустогоЦвета = Истина, ЗапретПустогоРазмера = Истина)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПостфиксИменКолонок", ПостфиксИменКолонок);
	Параметры.Вставить("ЗапретПустогоЦвета", ЗапретПустогоЦвета);   
	Параметры.Вставить("ЗапретПустогоРазмера", ЗапретПустогоРазмера);   
	
	Возврат Параметры;
	
КонецФункции	

Функция ПКО_XDTOВСсылкуНоменклатураХарактеристикаПакетно(
	XDTOЗначение, Результат, СообщениеОбмена, ПараметрыПоиска = Неопределено) 
	Перем ПостфиксИменКолонок, ЗапретПустогоЦвета, ЗапретПустогоРазмера;
	
	Если ПараметрыПоиска = Неопределено Тогда 
		ПараметрыПоиска = НоменклатураХарактеристикаПакетноПараметрыПоиска();
	КонецЕсли;
	ПараметрыПоиска.Свойство("ПостфиксИменКолонок", ПостфиксИменКолонок);
	ПараметрыПоиска.Свойство("ЗапретПустогоЦвета", ЗапретПустогоЦвета);
	ПараметрыПоиска.Свойство("ЗапретПустогоРазмера", ЗапретПустогоРазмера);
	
	Данные = Новый ТаблицаЗначений; 
	ИмяКолонкиModel = "Model" + ПостфиксИменКолонок;
	ИмяКолонкиColor = "Color" + ПостфиксИменКолонок;
	ИмяКолонкиSize = "Size" + ПостфиксИменКолонок;
	
	Данные.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число")); // A2105505-1867
	Данные.Колонки.Добавить("КлючевыеПоляЗаполнены", Новый ОписаниеТипов("Булево"));
	Данные.Колонки.Добавить(ИмяКолонкиModel, ОбщегоНазначения.ОписаниеТипаСтрока(20));
	Данные.Колонки.Добавить(ИмяКолонкиColor, ОбщегоНазначения.ОписаниеТипаСтрока(15));
	Данные.Колонки.Добавить(ИмяКолонкиSize, ОбщегоНазначения.ОписаниеТипаСтрока(15));  
	
	КоличествоОшибокЗаполненияКлючевыхПолей = 0;
	КоличествоОшибокЗаполненияSize = 0;
	
	КлючевыеПоля = Новый Массив;
	КлючевыеПоля.Добавить("Model"); 
	Если ЗапретПустогоЦвета Тогда 
		КлючевыеПоля.Добавить("Color"); 
	КонецЕсли;	
	
	ИндексСтроки = 0; // A2105505-1867
	Для Каждого СтрокаСпискаXDTO Из XDTOЗначение Цикл   
		
		НоваяСтрока = Данные.Добавить();  
		// A2105505-1867
		НоваяСтрока.ИндексСтроки = ИндексСтроки;   
		ИндексСтроки = ИндексСтроки + 1;
		//
		КлючевыеПоляЗаполнены = Истина;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСпискаXDTO);  
		НоваяСтрока.КлючевыеПоляЗаполнены = Истина;   
		
		// Если не заполнены ключевые поля то информацию по ним не загружаем 
		Для Каждого КлючевоеПоле Из КлючевыеПоля Цикл 
			Если Не ЗначениеЗаполнено(СтрокаСпискаXDTO[КлючевоеПоле]) Тогда   
				КоличествоОшибокЗаполненияКлючевыхПолей = КоличествоОшибокЗаполненияКлючевыхПолей + 1;
				НоваяСтрока.КлючевыеПоляЗаполнены = Ложь;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		// Если запрет пустых размеров и Size не заполнено, то тоже игнорируем строку
		Если ЗапретПустогоРазмера 
			И Не ЗначениеЗаполнено(СтрокаСпискаXDTO[ИмяКолонкиSize]) Тогда 
			КоличествоОшибокЗаполненияSize = КоличествоОшибокЗаполненияSize + 1;
		КонецЕсли;	
				
	КонецЦикла;	

	НоменклатураМетаданные = Метаданные.Справочники.Номенклатура;
	ХарактеристикаМетаданные = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	
	// Сообщаем об ошибках заполнения полей номенклатуры
	Если КоличествоОшибокЗаполненияКлючевыхПолей Тогда 

		ТекстСообщения = НСтр(
			"ru='Не заполнены обязательные поля поиска номенклатуры %1. Количество ошибок %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, 
			СтрСоединить(КлючевыеПоля, ", "), КоличествоОшибокЗаполненияКлючевыхПолей);

		ОбъектМетаданных = НоменклатураМетаданные;		
		ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(ОбъектМетаданных);		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);
		
	КонецЕсли;	     
	
	// Сообщаем об ошибках заполнения полей характеристики
	Если КоличествоОшибокЗаполненияSize Тогда 

		ТекстСообщения = НСтр("ru='Не заполнено обязательное поле поиска характеристики Size. " +
			"Количество ошибок %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КоличествоОшибокЗаполненияSize);

		ОбъектМетаданных = ХарактеристикаМетаданные;		
		ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(ОбъектМетаданных);		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);
		
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапросаНоменклатураХарактеристика();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_ПостфиксИменКолонок", ПостфиксИменКолонок);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Данные", Данные);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	РезультатЗапросаИндексПоследнего = РезультатЗапроса.ВГраница();
	
	ИндексЗапросаОшибки = РезультатЗапросаИндексПоследнего;
	ИндексЗапросаСсылки = РезультатЗапросаИндексПоследнего - 1;
		
	ВыборкаОшибки = РезультатЗапроса[ИндексЗапросаОшибки].Выбрать();
	Пока ВыборкаОшибки.Следующий() Цикл 

		Если Не ВыборкаОшибки.НоменклатураНайдена Тогда 
			
			Если ЗапретПустогоРазмера Тогда 
				ТекстШаблон = НСтр("ru='Не найдена номенклатура и характеристика по параметрам: " +
					"Model: ""%1"", Color: ""%2"", Size: ""%3""'");
				ТекстСообщения = СтрШаблон(ТекстШаблон, ВыборкаОшибки.Model, ВыборкаОшибки.Color, ВыборкаОшибки.Size);  
			Иначе
				ТекстШаблон = НСтр("ru='Не найдена номенклатура по параметрам: " +
					"Model: ""%1"", Color: ""%2""'");
				ТекстСообщения = СтрШаблон(ТекстШаблон, ВыборкаОшибки.Model, ВыборкаОшибки.Color);  
			КонецЕсли;
			
			ОбъектМетаданных = НоменклатураМетаданные;
			
		ИначеЕсли ЗапретПустогоРазмера Тогда
			
			ТекстШаблон = НСтр("ru='Не найдена характеристика номенклатуры ""%1"" (Model: ""%2"", Color: ""%3"") " +
				"по параметрам: Size: ""%4""'");
			ТекстСообщения = СтрШаблон(ТекстШаблон, ВыборкаОшибки.Номенклатура, 
				ВыборкаОшибки.Model, ВыборкаОшибки.Color, ВыборкаОшибки.Size);

			ОбъектМетаданных = ХарактеристикаМетаданные;
			
		Иначе
			Продолжить;
		КонецЕсли;	
		
		ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_ОшибкаПоискаСсылки(ОбъектМетаданных);		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);
				
	КонецЦикла;     
	
	// A2105505-1867
	// Переопределение логики - по одной исходной строке могут быть найдены несколько наборов данных
	Результат = Новый Соответствие; 
	ВыборкаСсылки = РезультатЗапроса[ИндексЗапросаСсылки].Выбрать();
	Пока ВыборкаСсылки.Следующий() Цикл   
		
		МассивСсылок = Результат[ВыборкаСсылки.ИндексСтроки];
		Если МассивСсылок = Неопределено Тогда   
			МассивСсылок = Новый Массив;
			Результат[ВыборкаСсылки.ИндексСтроки] = МассивСсылок;
		КонецЕсли;	
		
		СтрокаСсылки = Новый Структура;
		СтрокаСсылки.Вставить("Номенклатура", ВыборкаСсылки.Номенклатура);
		СтрокаСсылки.Вставить("Характеристика", ВыборкаСсылки.Характеристика); 
		МассивСсылок.Добавить(СтрокаСсылки);
		
	КонецЦикла;	
	
	Возврат ВыборкаСсылки.Количество() > 0;
	
КонецФункции

Функция ПКО_XDTOВСсылкуНоменклатураХарактеристика(XDTOЗначение, Номенклатура, Характеристика, СообщениеОбмена) Экспорт 

	СписокСтрокXDTO = Новый Массив;
	СписокСтрокXDTO.Добавить(XDTOЗначение);
	
	МассивСсылок = Неопределено;
	Если Не ПКО_XDTOВСсылкуНоменклатураХарактеристикаПакетно(СписокСтрокXDTO, МассивСсылок, СообщениеОбмена) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	МассивСсылок0 = МассивСсылок[0];
	Номенклатура = МассивСсылок0.Номенклатура;
	Характеристика = МассивСсылок0.Характеристика;     
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_СсылкаБизнесРегионы(XDTOОбъект)
	
	// Имеет другую логику поведения в отличие от ПКО_XDTOВСсылку
	//	так как осужествляется не просто поиск но и создание элемента
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		СправочникиИнициализироватьОбъект("БизнесРегионы", XDTOОбъект);
	
	Объект.Родитель = ПКО_СсылкаБизнесРегионыРодитель(XDTOОбъект.FederalDistrict);   
	Объект.КР_ЧисленностьНаселения = XDTOОбъект.PopulationSize;
	
	Объект.Записать();
	
	Возврат Объект.Ссылка;
			
КонецФункции

Функция ПКО_СсылкаБизнесРегионыРодитель(XDTOОбъект)
	
	// Имеет другую логику поведения в отличие от ПКО_XDTOВСсылку
	//	так как осуществляется не просто поиск но и создание элемента
	Если XDTOОбъект = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		СправочникиИнициализироватьОбъект("БизнесРегионы", XDTOОбъект);
	
	Объект.Записать();
	
	Возврат Объект.Ссылка;
			
КонецФункции

Функция ПКО_Склады(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		СправочникиИнициализироватьОбъект("Склады", XDTOОбъект);
			
	ЭтоГруппа = XDTOОбъект.Group;
		
	НеКритичнаяОшибкаПоиска = ПараметрыПоискаСсылки(Ложь);
	ПКО_XDTOВСсылку(XDTOОбъект.Parent, Объект.Родитель, СообщениеОбмена, НеКритичнаяОшибкаПоиска);

	Если ЭтоГруппа Тогда    
		Возврат Истина;
	КонецЕсли;	
		
	ЭтоОптовыйСклад = Не ЗначениеЗаполнено(XDTOОбъект.StoreCode);

	ПКО_XDTOВСсылку(XDTOОбъект.Department, Объект.Подразделение, СообщениеОбмена, НеКритичнаяОшибкаПоиска);
	Если Не ЭтоОптовыйСклад Тогда 		
		
		Объект.БизнесРегион = ПКО_СсылкаБизнесРегионы(XDTOОбъект.City);		

		// A2105505-1294
		Объект.КР_ТипПротивокражныхВорот = XDTOОбъект.AntiTheftGateType; 
		Объект.КР_РазрешитьУвеличиватьЗамороженнуюМатрицу = XDTOОбъект.IncreaseProductMatrix; 
		Объект.КР_СпецРаспределение = XDTOОбъект.SpecialDistribution; 
		Объект.КР_СтритРитейл = XDTOОбъект.Street; 		
		//
		
	Иначе    
		
		// A2105505-1294 
		// Чистим если опт
		Объект.КР_ТипПротивокражныхВорот = Неопределено; 
		Объект.КР_РазрешитьУвеличиватьЗамороженнуюМатрицу = Неопределено; 
		Объект.КР_СпецРаспределение = Неопределено; 
		Объект.КР_СтритРитейл = Неопределено; 		
		//
		
	КонецЕсли;	
	
	// Заполняем контактную информацию  
	
	// АдресСклада
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресСклада;
	УдалитьКонтактнуюИнформациюПоВиду(Объект, ВидКонтактнойИнформации);
	Если XDTOОбъект.Address <> Неопределено Тогда 
    	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
			Объект, XDTOОбъект.Address, ВидКонтактнойИнформации, , Истина);
	КонецЕсли;		
	//  
	
	// A2105505-1294        
	
	// КР_ЭлектроннаяПочтаСклада
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.КР_ЭлектроннаяПочтаСклада;
	УдалитьКонтактнуюИнформациюПоВиду(Объект, ВидКонтактнойИнформации);

	// EmailRowsObject   
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидыКонтактнойИнформации", ВидКонтактнойИнформации);
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Email, Объект, СообщениеОбмена, ДополнительныеПараметры);
	//

	// << 30.08.2024 Петухов А.В., Фактор, #4589
	Если ЗначениеЗаполнено(XDTOОбъект.Brand) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Марки.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Марки КАК Марки
			|ГДЕ
			|	Марки.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", XDTOОбъект.Brand);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ТекстОшибки = НСтр("ru = 'КР_УТ10_УТ11_ЗагрузкаДанныхСервер: Не найдена марка по наименованию ""%1""'");
			ТекстСообщения = СтрШаблон(ТекстОшибки, XDTOОбъект.Brand);
			ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.Марки);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Объект.злМарка = Выборка.Ссылка;
		КонецЕсли;
	Иначе
		Объект.злМарка = Справочники.Марки.ПустаяСсылка();
	КонецЕсли;
	// >> 30.08.2024 Петухов А.В., Фактор, #4589
	
	Объект.Код = XDTOОбъект.Code; 
	Объект.КР_НомерМагазина = XDTOОбъект.StoreCode; 
	Объект.КР_Закрыт = XDTOОбъект.Closed; 
	Объект.КР_УчаствуетВПервоначальномРаспределении = XDTOОбъект.InitialDistribution; 
	
	СкладПродолжитьЗаполнение(Объект, ЭтоОптовыйСклад);
		
	Возврат Истина;
			
КонецФункции

Функция ПКО_СтруктураПредприятия(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		СправочникиИнициализироватьОбъект("СтруктураПредприятия", XDTOОбъект);
	
	Объект.Код = XDTOОбъект.Id; 
	
	НеКритичнаяОшибкаПоиска = ПараметрыПоискаСсылки(Ложь);
	ПКО_XDTOВСсылку(XDTOОбъект.Parent, Объект.Родитель, СообщениеОбмена, НеКритичнаяОшибкаПоиска);

	Возврат Истина;
			
КонецФункции

Функция ПКО_ФизическиеЛица(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		СправочникиИнициализироватьОбъект("ФизическиеЛица", XDTOОбъект);
	
	ЭтоГруппа = XDTOОбъект.Group;
			
	ПКО_XDTOВСсылку(XDTOОбъект.Parent, Объект.Родитель, СообщениеОбмена);

	Если Не ЭтоГруппа Тогда    
		
		Объект.КР_ЭтоВодитель = XDTOОбъект.Driver;
			
	КонецЕсли;
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_ТранспортныеСредства(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		СправочникиИнициализироватьОбъект("ТранспортныеСредства", XDTOОбъект);
	// << 26.03.2024 Петухов А.В., Фактор, #3763
	// Если объект не найден по GUID - выполнить поиск по Коду.
	Если Объект.ЭтоНовый() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТранспортныеСредства.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
			|ГДЕ
			|	ТранспортныеСредства.Код = &Код";
		Запрос.УстановитьПараметр("Код", XDTOОбъект.LicPlate);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.ПометкаУдаления = XDTOОбъект.DeletionMark;  
		КонецЕсли;
	КонецЕсли;
	// >> 26.03.2024 Петухов А.В., Фактор, #3763
		
	Объект.Наименование = СтрШаблон("%1 %2", XDTOОбъект.LicPlate, XDTOОбъект.Manufacturer);	
	Объект.Код = XDTOОбъект.LicPlate;    
	Объект.Марка = XDTOОбъект.Manufacturer;    
	Объект.ГрузоподъемностьВТоннах = XDTOОбъект.CapacityTons;    
	Объект.ВместимостьВКубическихМетрах = XDTOОбъект.CapacitySqMtrs;    
	Объект.Прицеп = XDTOОбъект.TrailerManufacturer;    
	Объект.ГосударственныйНомерПрицепа = XDTOОбъект.TrailerLicPlate;    
    Объект.ЛицензионнаяКарточкаВид = "Стандартная"; 
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_Пользователи(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		СправочникиИнициализироватьОбъект("Пользователи", XDTOОбъект);
	
	// Попытка загрузить подразделение из Department
	Если Не ПКО_XDTOВСсылку(XDTOОбъект.Department, Объект.Подразделение, СообщениеОбмена) Тогда 
		
		// В случае неудачи пытаемся загрузить из Storehouse  
		Склад = Неопределено;
		Если ПКО_XDTOВСсылку(XDTOОбъект.Storehouse, Склад, СообщениеОбмена) Тогда 
			Объект.Подразделение = Склад.Подразделение; 
		КонецЕсли;	
		
	КонецЕсли;                
	
	// A2105505-1318 добавлено условие
	Если Объект.ЭтоНовый() Тогда 
		Объект.Служебный = Истина; // основной функционал
	КонецЕсли;
	
	Объект.Подготовлен = Истина;
	
	// A2105505-2347
	Объект.КР_ВыгружатьВКассовоеПО = XDTOОбъект.UploadToCashRegisterSoftware;
	Объект.КР_КодПродавца = XDTOОбъект.SalesmanCode;
	//
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект, Ссылка, СообщениеОбмена)
	
	МолчаливыйПоиск = ПараметрыПоискаСсылки(Ложь, Истина);
	
	Если Не ПКО_XDTOВСсылку(XDTOОбъект, Ссылка, СообщениеОбмена, МолчаливыйПоиск)
		И XDTOОбъект <> Неопределено Тогда 
		
		XDTOОбъектПользователь = ПолучитьОбъектXDTO("UserObject");
        ЗаполнитьЗначенияСвойств(XDTOОбъектПользователь, XDTOОбъект, "Ref,Name");
		XDTOОбъектПользователь.DeletionMark = Ложь;

		ПользовательОбъект = Неопределено;
		Если Не ПКО_Пользователи(XDTOОбъектПользователь, ПользовательОбъект, СообщениеОбмена)		
			Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(
				ПользовательОбъект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		Ссылка = ПользовательОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_КассыККМ(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		СправочникиИнициализироватьОбъект("КассыККМ", XDTOОбъект);

	ПоискБезОшибки = ПараметрыПоискаСсылки(Ложь);
	
	ПКО_XDTOВСсылку(XDTOОбъект.Organization, Объект.Владелец, СообщениеОбмена);                
	ПКО_XDTOВСсылку(XDTOОбъект.Storehouse, Объект.Склад, СообщениеОбмена, ПоискБезОшибки);                
	
	Объект.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ;
	Объект.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
	Объект.РегистрационныйНомер = XDTOОбъект.RegistrationNumber;
	Объект.СерийныйНомер = XDTOОбъект.ManufacturerNumber;
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_ВидыЦен(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		СправочникиИнициализироватьОбъект("ВидыЦен", XDTOОбъект);

	Объект.Идентификатор = ОбщегоНазначенияУТКлиентСервер.ПолучитьИдентификатор(Объект.Наименование);
	
	ПКО_XDTOВСсылку(XDTOОбъект.Currency, Объект.ВалютаЦены, СообщениеОбмена);                

	Объект.ВариантОкругления = Перечисления.ВариантыОкругления.ВсегдаВПользуКлиента;
	Объект.ВспомогательнаяЦена = Ложь;
	Объект.ЗапретитьРедактированиеЦеныЗаПределамиОтбора = Ложь;
	Объект.ИспользоватьПриВыпускеПродукции = Ложь;
	Объект.ИспользоватьПриОптовойПродаже = Истина;
	Объект.ИспользоватьПриПередачеМеждуОрганизациями = Ложь;
	Объект.ИспользоватьПриПередачеПродукцииДавальцу = Ложь;
	Объект.ИспользоватьПриПродаже = Истина;
	Объект.ИспользоватьПриРозничнойПродаже = Истина;
	Объект.ОграничиватьОтборНоменклатуры = Ложь;
	Объект.Округлять = Ложь;
	Объект.ОкруглятьВБольшуюСторону = Ложь;
	Объект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную;
	Объект.Статус = Перечисления.СтатусыДействияВидовЦен.Действует;
	Объект.Назначение = Перечисления.НазначенияВидовЦен.Общий;
	Объект.ТочностьОкругления = 0.01;
	Объект.УстанавливатьЦенуПриВводеНаОсновании = Ложь;
	
	Объект.ЦенаВключаетНДС = XDTOОбъект.PriceIncludesVAT;
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_КР_Контейнеры(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		СправочникиИнициализироватьОбъект("КР_Контейнеры", XDTOОбъект);
	
	Возврат Истина;
			
КонецФункции

// << 03.11.2023 Петухов А.В., Фактор, #3226
Функция ПКО_ПрисоединенныеФайлы(XDTOОбъект, Объект, СообщениеОбмена)
	
	Владелец = Неопределено;
	
// << 07.12.2023 Петухов А.В., Фактор, #3450
	//сткДанныеВладельца = Новый Структура;
	//сткДанныеВладельца.Вставить("Ref", XDTOОбъект.OwnerRef);
	//сткДанныеВладельца.Вставить("Code", XDTOОбъект.OwnerCode);
	//сткДанныеВладельца.Вставить("Name", XDTOОбъект.OwnerName);
	//сткДанныеВладельца.Вставить("DocDate", XDTOОбъект.OwnerDocDate);
	//сткДанныеВладельца.Вставить("DocNum", XDTOОбъект.OwnerDocNum);
	//НастройкиПоиска = ПараметрыПоискаСсылки();
	//НастройкиПоиска.ИмяТипаXDTO = XDTOОбъект.OwnerType;
	//ПКО_XDTOВСсылку(сткДанныеВладельца, Владелец, СообщениеОбмена, НастройкиПоиска);
	ЧтениеJSON = КР_ФункцииРаботыJSON.ПолучитьОбъектПотоковогоЧтения(XDTOОбъект.OwnerParams);
	// << 18.03.2024 Петухов А.В., Фактор, #3913
	//сткДанныеВладельца = ПрочитатьJSON(ЧтениеJSON, Ложь, "DocDate", ФорматДатыJSON.ISO);
	сткДанныеВладельца = ПрочитатьJSON(ЧтениеJSON, Ложь);
	// << 28.03.2024 Петухов А.В., Фактор, #3971
	Если сткДанныеВладельца.Свойство("DocDate") Тогда
	// >> 28.03.2024 Петухов А.В., Фактор, #3971
		Если ЗначениеЗаполнено(сткДанныеВладельца.DocDate) Тогда
			Если ТипЗнч(сткДанныеВладельца.DocDate) = Тип("Строка") Тогда
				сткДанныеВладельца.DocDate = ПрочитатьДатуJSON(сткДанныеВладельца.DocDate, ФорматДатыJSON.ISO);
			КонецЕсли;
		Иначе
			сткДанныеВладельца.DocDate = Дата(1,1,1);
		КонецЕсли;
		// >> 18.03.2024 Петухов А.В., Фактор, #3913
	// << 28.03.2024 Петухов А.В., Фактор, #3971
	КонецЕсли;
	Если Не сткДанныеВладельца.Свойство("Name") Тогда
		сткДанныеВладельца.Вставить("Name", "");
	КонецЕсли;
	Если Не сткДанныеВладельца.Свойство("DocDate") Тогда
		сткДанныеВладельца.Вставить("DocDate", Дата(1,1,1));
	КонецЕсли;
	Если Не сткДанныеВладельца.Свойство("DocNum") Тогда
		сткДанныеВладельца.Вставить("DocNum", "");
	КонецЕсли;
	// >> 28.03.2024 Петухов А.В., Фактор, #3971
	НоменклатураТребуетОбновления = Неопределено;
	Если XDTOОбъект.OwnerType = "Goods" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.ФайлКартинки
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул
		|";
		Запрос = Новый Запрос(ТекстЗапроса);
		Артикул = "";
		Если СокрЛП(сткДанныеВладельца.Color) = "" Тогда
			Артикул = СокрЛП(сткДанныеВладельца.Model);
		Иначе
			Артикул = СтрШаблон("%1 %2", СокрЛП(сткДанныеВладельца.Model), СокрЛП(сткДанныеВладельца.Color));
		КонецЕсли;
		Запрос.УстановитьПараметр("Артикул", Артикул);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			ТекстОшибки = НСтр("ru = 'КР_УТ10_УТ11_ЗагрузкаДанныхСервер: Не найдена номенклатура по артикулу ""%1""'");
			ТекстСообщения = СтрШаблон(ТекстОшибки, сткДанныеВладельца.Model);
			ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.Номенклатура);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);

			ОбъектМетаданные = Метаданные.Справочники.НоменклатураПрисоединенныеФайлы;
			ТекстСообщения = НСтр("ru = 'Не найдена номенклатура по артикулу ""%1""'");  
			ТекстСообщения = СтрШаблон(ТекстСообщения, Артикул);
			ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_ОшибкаПоискаСсылки(ОбъектМетаданные);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка); 
			Возврат Ложь;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Владелец = Выборка.Ссылка;
			Если Выборка.ФайлКартинки.Пустая() Тогда
				НоменклатураТребуетОбновления = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	Иначе
		НастройкиПоиска = ПараметрыПоискаСсылки();
		НастройкиПоиска.ИмяТипаXDTO = XDTOОбъект.OwnerType;
		ПКО_XDTOВСсылку(сткДанныеВладельца, Владелец, СообщениеОбмена, НастройкиПоиска);
	КонецЕсли;
// >> 07.12.2023 Петухов А.В., Фактор, #3450
	
	Если Владелец <> Неопределено Тогда
		соотСправочникиПФ = РаботаСФайламиСлужебный.ИменаСправочниковХраненияФайлов(Владелец);
		Если соотСправочникиПФ.Количество() > 0 Тогда
			
			ИмяСправочника = Неопределено;
			
			Для Каждого ЭлементПФ Из соотСправочникиПФ Цикл
				Если ЭлементПФ.Значение = Истина Тогда
					ИмяСправочника = ЭлементПФ.Ключ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ИмяСправочника = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Не определен справочник присоединенных файлов'");  
				// << 16.09.2024 Петухов А.В., Фактор, #4471
				//ВызватьИсключение ТекстОшибки;
				ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка();		
				КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстОшибки, ТипЗаписиВЛог_Ошибка);
				// >> 16.09.2024 Петухов А.В., Фактор, #4471
			КонецЕсли;

			АдресВХранилище = ПоместитьВоВременноеХранилище(XDTOОбъект.FileContent);

			СправочникТип = СтрШаблон("СправочникСсылка.%1", ИмяСправочника);
			СправочникТип = Тип(СправочникТип);
			Ссылка = XMLЗначение(СправочникТип, XDTOОбъект.Ref);
			ЭтоНовый = Не ОбщегоНазначения.СсылкаСуществует(Ссылка);  
				
			ИмяФайлаДляРазбора = XDTOОбъект.FileName;
			РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайлаДляРазбора);
			сткЧастиИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайлаДляРазбора);
			ИмяБезРасширения   = сткЧастиИмениФайла.ИмяБезРасширения;
			Если ЭтоНовый Тогда    
				//сткДанныеФайла = Новый Структура;
				//сткДанныеФайла.Вставить("Описание", XDTOОбъект.Name);
				//ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла(сткДанныеФайла);
				ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
				ПараметрыФайла.ВладелецФайлов = Владелец;
				ПараметрыФайла.ИмяБезРасширения = ИмяБезРасширения;
				ПараметрыФайла.РасширениеБезТочки = РасширениеБезТочки;
				ПараметрыФайла.Вставить(КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен(), Истина);
// << 07.12.2023 Петухов А.В., Фактор, #3450
				//ФайлКартинки = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВХранилище, "",  XDTOОбъект.Name, Ссылка);
				Ссылка = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВХранилище, "",  XDTOОбъект.Name, Ссылка);
// >> 07.12.2023 Петухов А.В., Фактор, #3450
			Иначе
				ИнформацияОФайле = Новый Структура;
				ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресВХранилище);
				ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
				ИнформацияОФайле.Вставить("ИмяБезРасширения", ИмяБезРасширения);
				ИнформацияОФайле.Вставить("Расширение", РасширениеБезТочки);
				ИнформацияОФайле.Вставить(КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен(), Истина);
				РаботаСФайлами.ОбновитьФайл(Ссылка, ИнформацияОФайле);
				
			КонецЕсли;	
			
// << 07.12.2023 Петухов А.В., Фактор, #3450
			Объект = Ссылка.ПолучитьОбъект();
			// << 28.03.2024 Петухов А.В., Фактор, #3970
			//Объект.Наименование = XDTOОбъект.Name;
			Если СокрЛП(XDTOОбъект.Name) <> "" Тогда
				Объект.Наименование = XDTOОбъект.Name;
			ИначеЕсли СокрЛП(XDTOОбъект.FileName) <> "" Тогда
				Объект.Наименование = XDTOОбъект.FileName;
			Иначе
				Объект.Наименование = СообщениеОбмена.КлючСообщения;
			КонецЕсли;
			// >> 28.03.2024 Петухов А.В., Фактор, #3970
			Объект.ПометкаУдаления = XDTOОбъект.DeletionMark;
			Объект.Автор = Пользователи.ТекущийПользователь();

			Если НоменклатураТребуетОбновления <> Неопределено Тогда
				// << 16.09.2024 Петухов А.В., Фактор, #4471 Должно выполняться после записи картинки
				//НоменклатураОбъект = НоменклатураТребуетОбновления.ПолучитьОбъект();
				//НоменклатураОбъект.ФайлКартинки = Ссылка;
				//Попытка
				//	НоменклатураОбъект.Записать();
				//Исключение
				//	ТекстОшибки = НСтр("ru = 'КР_УТ10_УТ11_ЗагрузкаДанныхСервер: Не обновлено основное изображение для номенклатуры. Ошибка записи.'");
				//	ТекстСообщения = СтрШаблон(ТекстОшибки);
				//	ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.Номенклатура);
				//	КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);
				//КонецПопытки;
				Объект.ДополнительныеСвойства.Вставить("НоменклатураТребуетОбновления", НоменклатураТребуетОбновления);
				// >> 16.09.2024 Петухов А.В., Фактор, #4471
			КонецЕсли;
// >> 07.12.2023 Петухов А.В., Фактор, #3450

			Возврат Истина;
			
		Иначе
			ТекстОшибки = НСтр("ru = 'Не определен справочник присоединенных файлов'");  
			// << 16.09.2024 Петухов А.В., Фактор, #4471
			//ВызватьИсключение ТекстОшибки;
			ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка();		
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстОшибки, ТипЗаписиВЛог_Ошибка);
			// >> 16.09.2024 Петухов А.В., Фактор, #4471
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не определен владелец'");  
		// << 16.09.2024 Петухов А.В., Фактор, #4471
		//ВызватьИсключение ТекстОшибки;
		ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка();		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстОшибки, ТипЗаписиВЛог_Ошибка);
		// >> 16.09.2024 Петухов А.В., Фактор, #4471
	КонецЕсли;
		
	Возврат Ложь;
			
КонецФункции
// >> 03.11.2023 Петухов А.В., Фактор, #3226

// << 05.03.2024 Петухов А.В., Фактор, #3876
Функция ПКО_КлассификаторТНВЭД(XDTOОбъект, Объект, СообщениеОбмена)
	
	//Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
	//	СправочникиИнициализироватьОбъект("КлассификаторТНВЭД", XDTOОбъект);

	Ссылка = XMLЗначение(Тип("СправочникСсылка.КлассификаторТНВЭД"), XDTOОбъект.Ref);
	ЭтоНовый = Не ОбщегоНазначения.СсылкаСуществует(Ссылка);  
		
	Если ЭтоНовый Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КлассификаторТНВЭД.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
			|ГДЕ
			|	КлассификаторТНВЭД.Код = &Код";
		
		Запрос.УстановитьПараметр("Код", XDTOОбъект.Code);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Объект = Справочники.КлассификаторТНВЭД.СоздатьЭлемент();   
			Объект.УстановитьСсылкуНового(Ссылка);  
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Объект = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
	Иначе
		Объект = Ссылка.ПолучитьОбъект();
	КонецЕсли;	

	Объект.Код = XDTOОбъект.Code; 
	Объект.КР_Маркируется = XDTOОбъект.Marking; 
	Объект.злМаркировкаОстатков = XDTOОбъект.MarkingForStorehouse; 
	Объект.злМаркировкаДляМаркетплейсов = XDTOОбъект.MarkingForMarketplace; 
	Объект.злМаркировкаДляРозницы = XDTOОбъект.MarkingForRetail; 
		
	Возврат Истина;
			
КонецФункции
// >> 05.03.2024 Петухов А.В., Фактор, #3876

// --> Евлахов Игорь Николаевич (Начало) 07.10.2024
// Задача #4537
Функция ПКО_ТипыПоверхностейРасположенияТоваров(XDTOОбъект, Объект, СообщениеОбмена)
	
	Имя = "злТипыПоверхностейРасположенияТоваров";
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникиИнициализироватьОбъект(Имя, XDTOОбъект);
	
	Объект.Код = XDTOОбъект.Code;
	
	Возврат Истина;
			
КонецФункции

#КонецОбласти

#Область Документы

Функция ПКО_GoodsOutcomeOrderObjectВРасходныйОрдерНаТовары(XDTOОбъект, Объект, Склад, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("РасходныйОрдерНаТовары", XDTOОбъект);
		
	Объект.Склад = Склад;	
	Если Не ИспользуетсяОрдернаяСхемаПриОтгрузке(Объект.Склад, Объект.Дата) Тогда 

		ОбъектМетаданные = Объект.Метаданные();
		
		ТекстСообщения = НСтр("ru = 'Расходный ордер %1 №%2 от %3 (""%4"") не может быть загружен "
			+ "так как для склада не используется ордерная схема'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ОбъектМетаданные, XDTOОбъект.DocNum, XDTOОбъект.DocDate, XDTOОбъект.Ref);
		
		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация(ОбъектМетаданные, Объект.Ссылка);
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		
		Возврат Ложь;
	КонецЕсли;	
	
	// Поищем склад в регистре КР_СоответствиеСкладовИМаркетплейсов
	// Если нашли, то Получатель равен Маркетплейсу найденой записи
	//	иначе Получатель равен складу
	СкладПолучатель = Неопределено;
	ПКО_XDTOВСсылку(XDTOОбъект.StorehousePut, СкладПолучатель, СообщениеОбмена);   
	
	Маркетплейс = Неопределено;
	Если ЗначениеЗаполнено(СкладПолучатель) 
		И СкладСвязанСМаркетплейсом(СкладПолучатель, Маркетплейс) Тогда 
		Объект.Получатель = Маркетплейс.Партнер;
	Иначе
		Объект.Получатель = СкладПолучатель;
	КонецЕсли;	
	
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Ответственный, СообщениеОбмена);		
	
	Если ТипЗнч(Объект.Получатель) = Тип("СправочникСписок.Партнеры") Тогда 
		Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
		РаспоряжениеXDTOТип = "ClientOrderRef";
	Иначе 
		Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению;
		РаспоряжениеXDTOТип = "GoodsRelocationOrderRef";
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РаспоряжениеXDTOТип", РаспоряжениеXDTOТип);
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.ТоварыПоРаспоряжениям, СообщениеОбмена, ДополнительныеПараметры);

	Комментарий = НСтр("ru = 'Загружен на основании документа Реализация товаров №%1 от %2'");
	Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);
	
	// Дозаполним документ 
	РасходныйОрдерНаТоварыПродолжитьЗаполнение(Объект);
		
	Возврат Истина;
				
КонецФункции

Функция ПКО_GoodsOutcomeOrderObjectВОтборТоваров(XDTOОбъект, Объект, Склад, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ОтборРазмещениеТоваров", XDTOОбъект);
		
	Объект.Склад = Склад;	
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Ответственный, СообщениеОбмена);		
	
	ПКО_XDTOВСсылку(XDTOОбъект.Directive, Объект.Распоряжение, СообщениеОбмена);		
	ПКО_XDTOВСсылку(XDTOОбъект.Box, Объект.КР_Короб, СообщениеОбмена);
	
	// GoodsDetailedRowsObject
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.ТоварыОтбор, СообщениеОбмена);
	
	Комментарий = НСтр("ru = 'Загружен на основании документа Реализация товаров №%1 от %2'");
	Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);
	
	// Дозаполним документ   
	GoodsOutcomeOrderObjectВОтборТоваровПродолжитьЗаполнение(Объект);  
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_GoodsIncomeOrderObjectВПриходныйОрдерНаТовары(XDTOОбъект, СкладПолучатель, Объект, СообщениеОбмена)

	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ПриходныйОрдерНаТовары", XDTOОбъект);
	Если Не СкладСвязанСМаркетплейсом(СкладПолучатель) Тогда 
		
		Объект.Склад = СкладПолучатель;
		ЭтоПеремещениеТоваров = Истина;
		
		ПКО_XDTOВСсылку(XDTOОбъект.StorehousePick, Объект.Отправитель, СообщениеОбмена);
		
		ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Ответственный, СообщениеОбмена);		
		
		// A2105505-1651
		ВыборкаДетальныеЗаписи = ПолучитьПеремещенияПоУникальномуИдентицикатору(
			XDTOОбъект.RelocationDoc.Ref, Объект.Отправитель); 
			
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			Объект.Распоряжение = ВыборкаДетальныеЗаписи.Ссылка;
		// A2105505-1708 
		Иначе
			ОбъектМетаданные = Метаданные.Документы.ПеремещениеТоваров;
			
			ТекстСообщения = НСтр("ru = 'Не найден документ Перемещение товаров №%1 от %2 по Ref системы источника ""%3"""
				+ " и складу-отправителю ""%4""'");  
				
			ТекстСообщения = СтрШаблон(ТекстСообщения, 
				XDTOОбъект.RelocationDoc.DocNum, XDTOОбъект.RelocationDoc.DocDate, XDTOОбъект.RelocationDoc.Ref, 
				Объект.Отправитель);
			
			ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_ОшибкаПоискаСсылки(ОбъектМетаданные);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка); 
			Возврат Ложь;
		//
		КонецЕсли;	  
		//

	Иначе
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
			ОбъектМетаданные = Объект.Метаданные();
			
			ТекстСообщения = НСтр("ru = 'Не найден документ %1 №%2 от %3 по уникальному идентификатору ""%4""'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ОбъектМетаданные, XDTOОбъект.DocNum, XDTOОбъект.DocDate, XDTOОбъект.Ref);
			
			ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(ОбъектМетаданные);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);

			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
	Комментарий = НСтр("ru = 'Загружен на основании документа Реализация товаров №%1 от %2'");
	Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);
	
	// GoodsDetailedRowsObject
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.Товары, СообщениеОбмена);
	
	// Дозаполним документ 
	Если ЭтоПеремещениеТоваров Тогда 
		ПриходныйОрдерНаТоварыПродолжитьЗаполнение(Объект);
	КонецЕсли;
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_GoodsIncomeOrderObjectВРазмещениеТоваров(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ОтборРазмещениеТоваров", XDTOОбъект);
		
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Ответственный, СообщениеОбмена);		
	
	// A2105505-1651
	СкладОтправитель = Неопределено;
	Если ПКО_XDTOВСсылку(XDTOОбъект.StorehousePick, СкладОтправитель, СообщениеОбмена) Тогда 		
		
		ВыборкаДетальныеЗаписи = ПолучитьПеремещенияПоУникальномуИдентицикатору(
			XDTOОбъект.RelocationDoc.Ref, СкладОтправитель); 
			
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			Объект.Распоряжение = ВыборкаДетальныеЗаписи.Ссылка; 
			
		// A2105505-1708 
		Иначе
			ОбъектМетаданные = Метаданные.Документы.ПеремещениеТоваров;
			
			ТекстСообщения = НСтр("ru = 'Не найден документ Перемещение товаров №%1 от %2 по Ref системы источника ""%3"""
				+ " и складу-отправителю ""%4""'");  
				
			ТекстСообщения = СтрШаблон(ТекстСообщения, 
				XDTOОбъект.RelocationDoc.DocNum, XDTOОбъект.RelocationDoc.DocDate, XDTOОбъект.RelocationDoc.Ref, 
				СкладОтправитель);
			
			ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_ОшибкаПоискаСсылки(ОбъектМетаданные);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка); 
			Возврат Ложь;
		//
		КонецЕсли;	  
		
	КонецЕсли;	
	//
	
	ПКО_XDTOВСсылку(XDTOОбъект.StorehousePut, Объект.Склад, СообщениеОбмена);
	
	// Короб грузим по GUID пакета
	ПКО_XDTOВСсылку(XDTOОбъект.Box, Объект.КР_Короб, СообщениеОбмена);
	
	// GoodsDetailedRowsObject
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.ТоварыРазмещение, СообщениеОбмена);
	
	Комментарий = НСтр("ru = 'Загружен на основании документа Реализация товаров №%1 от %2'");
	Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);
	
	// Дозаполним документ   
	GoodsIncomeOrderObjectВРазмещениеТоваровПродолжитьЗаполнение(Объект);  
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_GoodsRelocationObjectВРазмещенияТоваров(XDTOОбъект, ПеремещениеОбъект, МассивОбъектов, СообщениеОбмена)
	
	ПеремещениеТоваров = ПеремещениеОбъект.Ссылка;
	МассивОбъектов = Новый Массив;
	
	Запрос = Новый Запрос(ТекстЗапросаСвязьКоробаСРазмещениемПоПеремещению());
	Запрос.УстановитьПараметр("ПеремещениеТоваров", ПеремещениеТоваров);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ИндексПоследнегоРезультата = РезультатЗапроса.ВГраница();
	
	// Пометка всех не помеченных размещений созданных на основании перемещения
	ВыборкаДетальныеЗаписи = РезультатЗапроса[ИндексПоследнегоРезультата - 1].Выбрать();  
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
	ГруппировкаПоКоробам = РезультатЗапроса[ИндексПоследнегоРезультата].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	Пока ГруппировкаПоКоробам.Следующий() Цикл 

		ОтборРазмещениеТоваров = ГруппировкаПоКоробам.ОтборРазмещениеТоваров;
		Если ЗначениеЗаполнено(ОтборРазмещениеТоваров) Тогда  
			Объект = ОтборРазмещениеТоваров.ПолучитьОбъект();
			КР_ОбщегоНазначениеСервер.ДокументОбъектОчистить(Объект);  
		Иначе
			Объект = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();   		
		КонецЕсли;
		
		Объект.Заполнить(ПеремещениеТоваров);
				
		Объект.КР_Короб = ГруппировкаПоКоробам.Короб;
		Объект.Ответственный = ПеремещениеОбъект.Ответственный;		
		
		// #4794.. Фомин Д.Ю. 03.10.2024.
		Если XDTOОбъект.StorehousePick.Name = "Разбора (магазины)" Тогда
			Объект.КР_ИспользоватьКороб = Ложь;
		КонецЕсли;	
		// ..#4794
		
		Ячейка = Справочники.СкладскиеЯчейки.КР_СкладскаяЯчейкаОтгрузкиПоУмолчанию(
			Объект.Склад, Объект.Помещение);		
		
		ВыборкаДетальныеЗаписи = ГруппировкаПоКоробам.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 

			СтрокаДанных = Объект.ТоварыРазмещение.Добавить(); 
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ВыборкаДетальныеЗаписи);
			
			СтрокаДанных.КоличествоРазмещено = СтрокаДанных.Количество;
			СтрокаДанных.КоличествоУпаковокРазмещено = СтрокаДанных.КоличествоУпаковок;			
			
			СтрокаДанных.Ячейка	= Ячейка;

		КонецЦикла;
		
		Комментарий = НСтр("ru = 'Загружен на основании документа Реализация товаров №%1 от %2'");
		Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);

		Объект.Дата = XDTOОбъект.DocDate;
		Объект.Номер = XDTOОбъект.DocNum;
		Объект.Проведен = XDTOОбъект.Posted; 
		Объект.ПометкаУдаления = XDTOОбъект.DeletionMark; 
		
		МассивОбъектов.Добавить(Объект);
		
	КонецЦикла;	
		
	Возврат Истина;
			
КонецФункции

Функция ПКО_GoodsRelocationObjectВоВнутреннееПеремещениеТоваров(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ОтборРазмещениеТоваров", XDTOОбъект);
	
	ПКО_XDTOВСсылку(XDTOОбъект.StorehousePut, Объект.Склад, СообщениеОбмена);
	
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Ответственный, СообщениеОбмена);		
		
	// GoodsDetailedRowsObject
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.ТоварыОтбор, СообщениеОбмена);  
	
	// GoodsDetailedRowsObject
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.ТоварыРазмещение, СообщениеОбмена);
	
	Комментарий = НСтр("ru = 'Загружен на основании документа Заявка магазина №%1 от %2'");
	Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);
	
	// Дозаполним документ   
	GoodsRelocationObjectВоВнутреннееПеремещениеТоваров(Объект, XDTOОбъект.ToTradingHall);  
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_ПеремещениеТоваров(XDTOОбъект, МассивОбъектов, СообщениеОбмена)
	
	МассивОбъектов = Новый Массив;
	
	// Получаем таблицу значений для товаров   
	ТабличнаяЧастьМетаданные = Метаданные.Документы.ПеремещениеТоваров.ТабличныеЧасти.Товары;
	ТаблицаТовары = ПолучитьТаблицуЗначенийПоМетаданным(ТабличнаяЧастьМетаданные);  
	ТаблицаТовары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	
	// GoodsDetailedRowsObject 
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТабличнаяЧастьМетаданные", ТабличнаяЧастьМетаданные);	
	ДополнительныеПараметры.Вставить("ЕстьСклад", Истина);	
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, ТаблицаТовары, СообщениеОбмена, ДополнительныеПараметры);
	
	// A2105505-1651
	ОтборСтрок = Новый Структура("Склад", Справочники.Склады.ПустаяСсылка());
	СтрокиПустогоСклада = ТаблицаТовары.НайтиСтроки(ОтборСтрок);
	Если СтрокиПустогоСклада.Количество() > 0 Тогда 
		СкладШапкиДокумента = Неопределено;
		ПКО_XDTOВСсылку(XDTOОбъект.StorehousePick, СкладШапкиДокумента, СообщениеОбмена);
		Для Каждого СтрокаТоваров Из СтрокиПустогоСклада Цикл
			СтрокаТоваров.Склад = СкладШапкиДокумента;	
		КонецЦикла;
	КонецЕсли;
	//
	
	// Получить склады  
	МассивСкладов = ТаблицаТовары.ВыгрузитьКолонку("Склад");
	МассивСкладов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСкладов);
	
	ВыборкаПеремещенияТоваров = ПолучитьПеремещенияПоУникальномуИдентицикатору(XDTOОбъект.Ref);  
	ПеремещенияПоСкладам = Новый Соответствие;
	Пока ВыборкаПеремещенияТоваров.Следующий() Цикл 
		ПеремещенияПоСкладам[ВыборкаПеремещенияТоваров.СкладОтправитель] = ВыборкаПеремещенияТоваров.Ссылка;	
	КонецЦикла;	
	
	ОтборСтрок = Новый Структура("Склад");
	Для Каждого СкладОтправитель Из МассивСкладов Цикл 
		
		ОтборСтрок.Склад =  СкладОтправитель;
		
	    Ссылка = ПеремещенияПоСкладам[СкладОтправитель];
		Если Ссылка <> Неопределено Тогда 
			
			Объект = Ссылка.ПолучитьОбъект();
			// << 18.04.2024 Петухов А.В., Фактор, #3990
			Если Год(Объект.Дата)<>Год(XDTOОбъект.DocDate) Тогда
		        Объект.Дата = XDTOОбъект.DocDate;
				Объект.УстановитьНовыйНомер();
			КонецЕсли;
			// >> 18.04.2024 Петухов А.В., Фактор, #3990
			
		Иначе
			
			Объект = Документы.ПеремещениеТоваров.СоздатьДокумент();
			Объект.КР_ИдентификаторСистемыИсточника = XDTOОбъект.Ref;
			
		КонецЕсли;	
		
		Объект.Проведен = XDTOОбъект.Posted;
		Объект.ПометкаУдаления = XDTOОбъект.DeletionMark;
        Объект.Дата = XDTOОбъект.DocDate;
        Объект.КР_НомерВходящегоДокумента = XDTOОбъект.DocNum;
		
		Объект.СкладОтправитель = СкладОтправитель;		
		
		ПКО_XDTOВСсылку(XDTOОбъект.Organization, Объект.Организация, СообщениеОбмена);
		ПКО_XDTOВСсылку(XDTOОбъект.StorehousePut, Объект.СкладПолучатель, СообщениеОбмена);
		ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Ответственный, СообщениеОбмена);		
		ПКО_XDTOВСсылку(XDTOОбъект.Department, Объект.Подразделение, СообщениеОбмена);
		
		Комментарий = НСтр("ru = 'Загружен на основании документа Заявка магазина №%1 от %2'");
// << 13.10.2023 Петухов А.В., Фактор, #3243
		//Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);   
		Если СокрЛП(XDTOОбъект.Comment)<>"" Тогда
			ТекстКомментария = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);
			Объект.Комментарий = СтрШаблон("%1//%2", СокрЛП(XDTOОбъект.Comment), ТекстКомментария);
		Иначе
			Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);
		КонецЕсли;
// >> 13.10.2023 Петухов А.В., Фактор, #3243
		
		Товары = ТаблицаТовары.Скопировать(ОтборСтрок); 
		Объект.Товары.Загрузить(Товары);
	
		// A2105505-1778
		// Перезаполним код строки на основании остатков РН
		ЗаполнитьКодСтрокиТоваровНаОснованииОстатков(Объект, СообщениеОбмена);
		//
		
		// Дозаполним документ 
		ПеремещениеТоваровПродолжитьЗаполнение(Объект);  
		
		// Удаляем отработанные данные
		ПеремещенияПоСкладам.Удалить(СкладОтправитель);
		
		МассивОбъектов.Добавить(Объект);
		
	КонецЦикла; 
	
	// Помечаем на удаление остальные перемещения
	Для Каждого КлючЗначение Из ПеремещенияПоСкладам Цикл 
		ПеремещениеТоваров = КлючЗначение.Значение;
		Если ПеремещениеТоваров.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;	
		ПеремещениеОбъект = ПеремещениеТоваров.ПолучитьОбъект();
		КомментарийКВерсии = НСтр("ru='Принудительная пометка на удаление по данным пакета ID: %1'");
		КомментарийКВерсии = СтрШаблон(КомментарийКВерсии, СообщениеОбмена.КлючСообщения);
		ПеремещениеОбъект.ДополнительныеСвойства.Вставить("ВерсионированиеОбъектовКомментарийКВерсии", КомментарийКВерсии);

		ПеремещениеОбъект.Проведен = Ложь;
		ПеремещениеОбъект.ПометкаУдаления = Истина;
		
		МассивОбъектов.Добавить(ПеремещениеОбъект);
		
	КонецЦикла; 

	Возврат Истина;
	
КонецФункции

Функция ПКО_ПередачаТоваровХранителю(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ПередачаТоваровХранителю", XDTOОбъект);
	
	ПКО_XDTOВСсылку(XDTOОбъект.Organization, Объект.Организация, СообщениеОбмена);
	
	// A2105505-1444
	// Склад будет определен ниже по складам табличной части товары
	//ПКО_XDTOВСсылку(XDTOОбъект.StorehousePick, Объект.Склад, СообщениеОбмена);  
	
	СкладПолучатель = Неопределено;
	Маркетплейс = Неопределено;		
	Если Не ПКО_XDTOВСсылку(XDTOОбъект.StorehousePut, СкладПолучатель, СообщениеОбмена)
		Или Не СкладСвязанСМаркетплейсом(СкладПолучатель, Маркетплейс) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	Объект.Контрагент = Маркетплейс;
	
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Автор, СообщениеОбмена);		
	ПКО_XDTOВСсылку(XDTOОбъект.Department, Объект.Подразделение, СообщениеОбмена);
	
	// GoodsDetailedRowsObject   
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РаспоряжениеXDTOТип", "ClientOrderRef");	
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.Товары, СообщениеОбмена, ДополнительныеПараметры);
	
	// A2105505-1778
	// Перезаполним код строки на основании остатков РН
	ЗаполнитьКодСтрокиТоваровНаОснованииОстатков(Объект, СообщениеОбмена);
	//
	
	Комментарий = НСтр("ru = 'Загружен на основании документа Отгрузка со склада №%1 от %2'");
	Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);
	
	// Дозаполним документ 
	ПередачаТоваровХранителюПродолжитьЗаполнение(Объект);
	
	МассивСтрокСПустымиЗаказами = Объект.Товары.НайтиСтроки(Новый Структура("ЗаказКлиента", Неопределено));
	Если ЗначениеЗаполнено(МассивСтрокСПустымиЗаказами) Тогда                
		
		ОбъектМетаданные = Объект.Метаданные();
		ТекстСообщения = НСтр("ru = 'В %1 строке(ах) документа ""Передача товаров хранителю "
			+ "не заполнено поле ""Заказ клиента""'"); 
		ТекстСообщения = СтрШаблон(ТекстСообщения, МассивСтрокСПустымиЗаказами.Количество());
		
		ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(ОбъектМетаданные, Объект.Ссылка);
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка); 
				
	КонецЕсли;
	
	// A2105505-1444
	// Определяем склад/группу в шапке  
	Если Не ЗаполнитьСкладПоТабличнойЧасти(Объект.Склад, Объект.Товары, "Склад") Тогда 
		
		ОбъектМетаданные = Объект.Метаданные();
		ТекстСообщения = НСтр("ru = 'По табличной части ""Товары"" не удалось определить группу складов'"); 
		
		ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(ОбъектМетаданные, Объект.Ссылка);
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка); 

	КонецЕсли;		
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_GoodsRelocationOrderObjectВЗаказКлиента(XDTOОбъект, Объект, Контрагент, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ЗаказКлиента", XDTOОбъект);
		
	ПКО_XDTOВСсылку(XDTOОбъект.Organization, Объект.Организация, СообщениеОбмена);
	ПКО_XDTOВСсылку(XDTOОбъект.StorehousePick, Объект.Склад, СообщениеОбмена);
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Менеджер, СообщениеОбмена);	
	ПКО_XDTOВСсылку(XDTOОбъект.Department, Объект.Подразделение, СообщениеОбмена);

	Объект.Контрагент = Контрагент;
	
	// A2105505-2279
	ПКО_XDTOВСсылку(XDTOОбъект.ClientAgreement, Объект.Договор, СообщениеОбмена);
	//
	
	// GoodsDetailedRowsObject
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.Товары, СообщениеОбмена);
	
	Комментарий = НСтр("ru = 'Загружен на основании документа Заявка магазина №%1 от %2'");
	Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);
	
	// Дозаполним документ 
	ЗаказКлиентаПродолжитьЗаполнение(Объект);
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_GoodsRelocationOrderObjectВЗаказНаПеремещение(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ЗаказНаПеремещение", XDTOОбъект);
	
	ПКО_XDTOВСсылку(XDTOОбъект.Organization, Объект.Организация, СообщениеОбмена);
	
	ПКО_XDTOВСсылку(XDTOОбъект.StorehousePick, Объект.СкладОтправитель, СообщениеОбмена);
	ПКО_XDTOВСсылку(XDTOОбъект.StorehousePut, Объект.СкладПолучатель, СообщениеОбмена);
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Ответственный, СообщениеОбмена);		
	ПКО_XDTOВСсылку(XDTOОбъект.Department, Объект.Подразделение, СообщениеОбмена);
	
	// A2105505-1853          
	Если XDTOОбъект.ShippingСontainer <> Неопределено
		И Найти(XDTOОбъект.ShippingСontainer.ContainerID, "virt") Тогда 
		ПараметрыПоискаКонтейнера = ПараметрыПоискаСсылки( , Истина);  
	Иначе	
		ПараметрыПоискаКонтейнера = ПараметрыПоискаСсылки();  
	КонецЕсли;	
	//

	ПКО_XDTOВСсылку(XDTOОбъект.ShippingСontainer, Объект.КР_Контейнер, СообщениеОбмена, ПараметрыПоискаКонтейнера);
	
	Объект.КР_РаспределениеСетами = XDTOОбъект.DistributionBySets;
	
	// GoodsDetailedRowsObject
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.Товары, СообщениеОбмена);
	
	Комментарий = НСтр("ru = 'Загружен на основании документа Заявка магазина №%1 от %2'");
// << 13.10.2023 Петухов А.В., Фактор, #3243
	//Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);
	Если СокрЛП(XDTOОбъект.Comment)<>"" Тогда
		ТекстКомментария = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);
		Объект.Комментарий = СтрШаблон("%1//%2", СокрЛП(XDTOОбъект.Comment), ТекстКомментария);
	Иначе
		Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);
	КонецЕсли;
// >> 13.10.2023 Петухов А.В., Фактор, #3243
	
	// Дозаполним документ 
	ЗаказНаПеремещениеПродолжитьЗаполнение(Объект);
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_УпаковочныйЛист(XDTOОбъект, Объект, СообщениеОбмена)

	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("УпаковочныйЛист", XDTOОбъект);	
		
	Если ЗначениеЗаполнено(XDTOОбъект.TypeFilling) Тогда // тип строка. Мутабильного быть не должно	
		Объект.КР_ТипНаполнения = XMLЗначение(Тип("ПеречислениеСсылка.КР_ТипНаполненияКоробов"), XDTOОбъект.TypeFilling);
	Иначе
		Объект.КР_ТипНаполнения = Неопределено;
	КонецЕсли;
	
	Контрагент = Неопределено;
	Если ПКО_XDTOВСсылку(XDTOОбъект.Client, Контрагент, СообщениеОбмена) Тогда 
		Объект.КР_Партнер = Контрагент.Партнер;
	КонецЕсли;	
	
	ПКО_XDTOВСсылку(XDTOОбъект.ShippingStorehouse, Объект.СкладУпаковки, СообщениеОбмена);    
	
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Упаковал, СообщениеОбмена);		
	
	Если XDTOОбъект.TypeOfBoxOutgoing Тогда  
		
		Объект.Вид = Перечисления.ВидыУпаковочныхЛистов.Исходящий;
		
		// A2105505-2395 
		// Рефакторинг логики по изменениям в ФДР                                       
		
		// Последовательная логика, если не нашли заказ на перемещение, то ижем заказ клиента
		// Если ничего не нашли - ошибка
		// Ошибка по факту будет формироваться только по поиску заказа клиента
		
		// По умолчанию молчаливый поиск
		ПоискСПодменойТипа = ПараметрыПоискаСсылки(Ложь, Истина);  		
		
		// Ищем без сообщений об ошибке заказ на перемещение     	
		ПоискСПодменойТипа.ИмяТипаXDTO = "GoodsRelocationOrderRef";
		Если Не ПКО_XDTOВСсылку(
			XDTOОбъект.GoodsRelocationOrder, Объект.КР_ДокументОснование, СообщениеОбмена, ПоискСПодменойТипа) Тогда 

			// Иначе ищем с сообщением об ошибке заказ клиента
			ПоискСПодменойТипа.ИмяТипаXDTO = "ClientOrderRef";			
			ПоискСПодменойТипа.МолчаливыйПоиск = Ложь;
			
			ПКО_XDTOВСсылку(XDTOОбъект.GoodsRelocationOrder, Объект.КР_ДокументОснование, СообщениеОбмена, ПоискСПодменойТипа);
			
		КонецЕсли;	
	    //
		
		Комментарий = НСтр("ru = 'Загружен на основании документа Реализация товаров №%1 от %2'");
		Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);
	Иначе	
		
		Объект.Вид = Перечисления.ВидыУпаковочныхЛистов.Входящий;
		ПКО_XDTOВСсылку(XDTOОбъект.ReceiptDocument, Объект.КР_ДокументОснование, СообщениеОбмена);
		Объект.Комментарий = ""; 
	КонецЕсли;
	
	// A2105505-1647
	Если XDTOОбъект.ReceiptDocument <> Неопределено Тогда 
		Основание = НСтр("ru = 'Приобретение товаров и услуг №%1 от %2'");
		Объект.Основание = СтрШаблон(Основание, XDTOОбъект.ReceiptDocument.DocNum, XDTOОбъект.ReceiptDocument.DocDate);
	Иначе
		Объект.Основание = "";
	КонецЕсли;	
	//
	
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.Товары, СообщениеОбмена);
	
	// A2105505-2203
	Объект.КР_Штрихкод = XDTOОбъект.Barcode; 
	//
	
	Возврат Истина;
				
КонецФункции

Функция ПКО_ТранспортнаяНакладная(XDTOОбъект, Объект, СообщениеОбмена)

	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ТранспортнаяНакладная", XDTOОбъект);
	
	ПКО_XDTOВСсылку(XDTOОбъект.Organization, Объект.Организация, СообщениеОбмена);   
	ПКО_XDTOВСсылку(XDTOОбъект.StorehousePick, Объект.КР_Отправитель, СообщениеОбмена);   
	ПКО_XDTOВСсылку(XDTOОбъект.StorehousePut, Объект.КР_Получатель, СообщениеОбмена);   
	
	ПКО_XDTOВСсылку(XDTOОбъект.Driver, Объект.КР_Водитель, СообщениеОбмена);
	ПКО_XDTOВСсылку(XDTOОбъект.Vehicle, Объект.КР_ТранспортноеСредство, СообщениеОбмена);
	ПКО_XDTOВСсылку(XDTOОбъект.Expeditor, Объект.КР_Экспедитор, СообщениеОбмена);    
	ПКО_XDTOВСсылку(XDTOОбъект.Transporter, Объект.Перевозчик, СообщениеОбмена);

	Объект.МассаБрутто = XDTOОбъект.ShipmentWeight;
	Объект.МассаНетто = XDTOОбъект.ShipmentWeight;

	// A2105505-2264  
	Объект.КР_ОбъемГруза = XDTOОбъект.ShipmentVolume; 
	
	// A2105505-1328
	Объект.КР_КоличествоКоробов = XDTOОбъект.BoxQuantity; 
	Объект.КР_ОценочнаяCтоимость = XDTOОбъект.EstimatedCargoPrice; 	
	//  
	
	// A2105505-1410
	Объект.КР_ДатаДоставкиФакт = XDTOОбъект.DeliveryDate;
	//                                                      
	
	// A2105505-1524
	Объект.КР_ЧерезЦС = XDTOОбъект.UseTransitStorehouse;
	//
		
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.OtherShipmentsList, Объект.КР_ПрочиеМашиноместа, СообщениеОбмена);
			
	// Документ-основание это перемещение товаров или передача товаров хранителю с таким же гуидом что и текущий пакет
	//	в зависимости от того, связан ли склад маркетплейсом
	Объект.ДокументыОснования.Очистить();

	// A2105505-1651
	//ДокументОснование = Неопределено;
	//ПараметрыПоискаДокумента = ПараметрыПоискаСсылки(); 
	//Если Не СкладСвязанСМаркетплейсом(Объект.КР_Получатель) Тогда 
	//	ПараметрыПоискаДокумента.ИмяТипаXDTO = "GoodsRelocationRef"; // Перемещение товаров
	//Иначе
	//	ПараметрыПоискаДокумента.ИмяТипаXDTO = "GoodsToMarketplaceTransferObjectRef"; // Передача хранителю
	//КонецЕсли;
	//
	//Если ПКО_XDTOВСсылку(XDTOОбъект, ДокументОснование, СообщениеОбмена, ПараметрыПоискаДокумента) Тогда    
	//	НоваяСтрока = Объект.ДокументыОснования.Добавить();
	//	НоваяСтрока.ДокументОснование = ДокументОснование;     				
	//КонецЕсли;	 
	
	ВыборкаПеремещенияТоваров = ПолучитьПеремещенияПоУникальномуИдентицикатору(XDTOОбъект.Ref);  
	Пока ВыборкаПеремещенияТоваров.Следующий() Цикл 
		
		Если ВыборкаПеремещенияТоваров.ПометкаУдаления Тогда 
			Прервать;
		КонецЕсли;
		
		НоваяСтрока = Объект.ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = ВыборкаПеремещенияТоваров.Ссылка;     				
		
	КонецЦикла;	
	//	
		
	// Дозаполним документ 
	ТранспортнаяНакладнаяПродолжитьЗаполнение(Объект, СообщениеОбмена);
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_ОтчетОРозничныхПродажах(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ОтчетОРозничныхПродажах", XDTOОбъект);
	
	ПКО_XDTOВСсылку(XDTOОбъект.CashierKKM, Объект.КассаККМ, СообщениеОбмена); 
	ПКО_XDTOВСсылку(XDTOОбъект.Organization, Объект.Организация, СообщениеОбмена); 
	
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.Responsible, Объект.Ответственный, СообщениеОбмена);		
	ПКО_XDTOВСсылку(XDTOОбъект.Department, Объект.Подразделение, СообщениеОбмена); 
	ПКО_XDTOВСсылку(XDTOОбъект.Storehouse, Объект.Склад, СообщениеОбмена); 

	Объект.ЦенаВключаетНДС = XDTOОбъект.PriceIncludesVAT;
	
	ШаблонКомментария = НСтр("ru = '%1. Документ сформирован автоматически на основании данных из УТ10 Торговля'");
	Объект.Комментарий = СтрШаблон(ШаблонКомментария, XDTOОбъект.Comment);
	
	// A2105505-2054
	Объект.КР_Закрыт = XDTOОбъект.Closed;
	//
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("DocDate", XDTOОбъект.DocDate);
	// RetailSalesReportGoodsRowsObject
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.Товары, СообщениеОбмена, ДополнительныеПараметры);   
	// RetailSalesReportPaymentsRowsObject
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Payments, Объект.ОплатаПлатежнымиКартами, СообщениеОбмена, ДополнительныеПараметры);
	
	// Дозаполним документ 
	ОтчетОРозничныхПродажахПродолжитьЗаполнение(Объект); 
	
	Если XDTOОбъект.AmountSales <> Объект.СуммаДокумента Тогда 

		СсылкаТип = ТипЗнч(Объект.Ссылка);
		СсылкаМетаданные = Метаданные.НайтиПоТипу(СсылкаТип);
		
		ТекстСообщения = НСтр("ru = 'Рассчитанная сумма документа не совпадает с переданной в XDTO-пакете'");
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
	  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(СсылкаМетаданные); 
		Иначе
	  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(
				СсылкаМетаданные, Объект.Ссылка); 
		КонецЕсли;	
							  
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		
	КонецЕсли;	
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_УстановкаЦенНоменклатуры(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("УстановкаЦенНоменклатуры", XDTOОбъект);
		
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.Responsible, Объект.Ответственный, СообщениеОбмена);		
	
	ШаблонКомментария = НСтр("ru = '%1. Документ сформирован автоматически на основании данных из УТ10 Торговля'");
	Объект.Комментарий = СтрШаблон(ШаблонКомментария, XDTOОбъект.Comment);
	
	// --> Евлахов Игорь Николаевич (Начало) 17.10.2023
	// Задача #3270
	Объект.КР_НеПечататьСтарыеЦены = XDTOОбъект.NotPrintPrices;
	// <-- Евлахов Игорь Николаевич (Конец) 17.10.2023
	
	// PriceSettingGoodsRowsObject
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект, СообщениеОбмена);

	УстановкаЦенНоменклатурыПродолжитьЗаполнение(Объект);
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_ОприходованиеИзлишковТоваров(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ОприходованиеИзлишковТоваров", XDTOОбъект);
		
	Если ПКО_XDTOВСсылку(XDTOОбъект.Storehouse, Объект.Склад, СообщениеОбмена)
		И ГенерироватьОшибкуЕслиСкладСвязанСМаркетплейсом(XDTOОбъект, Объект, СообщениеОбмена) Тогда  		
		Возврат Ложь;	
	КонецЕсли;

	ПКО_XDTOВСсылку(XDTOОбъект.Organization, Объект.Организация, СообщениеОбмена); 
	ПКО_XDTOВСсылку(XDTOОбъект.InventoryCountSheet, Объект.ПересчетТоваров, СообщениеОбмена); 
	ПКО_XDTOВСсылку(XDTOОбъект.Department, Объект.Подразделение, СообщениеОбмена); 
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Автор, СообщениеОбмена);		
			
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.Товары, СообщениеОбмена);
	
	Комментарий = НСтр("ru = 'Загружен на основании документа Инвентаризация товаров №%1 от %2. %3'");
	Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate, XDTOОбъект.Comment);
	
	ОприходованиеИзлишковТоваровПродолжитьЗаполнение(Объект, СообщениеОбмена);
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_ПересчетТоваров(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ПересчетТоваров", XDTOОбъект);
	
	Если ПКО_XDTOВСсылку(XDTOОбъект.Storehouse, Объект.Склад, СообщениеОбмена)
		И ГенерироватьОшибкуЕслиСкладСвязанСМаркетплейсом(XDTOОбъект, Объект, СообщениеОбмена) Тогда  		
		Возврат Ложь;	
	КонецЕсли;
	
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Ответственный, СообщениеОбмена);		
				
	// A2105505-723 
	// 10.01.2023 Федотов А.М., КРОК
	Если Не ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.Товары, СообщениеОбмена) Тогда
		Объект.ДополнительныеСвойства.Вставить("КР_ЗаписатьБезПроведения");		
	КонецЕсли;
	//
	
	Комментарий = НСтр("ru = 'Загружен на основании документа Заявка магазина Инвентаризация товаров №%1 от %2. %3'");
	Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate, XDTOОбъект.Comment);
	
	ПересчетТоваровПродолжитьЗаполнение(Объект);
	
	// A2105505-723
	Объект.КР_НеФормироватьДвижения = 
		СкладыСервер.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач(Объект.Склад, Объект.Дата);
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_ВнутреннееПотреблениеТоваров(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ВнутреннееПотреблениеТоваров", XDTOОбъект);
	
	ПКО_XDTOВСсылку(XDTOОбъект.Organization, Объект.Организация, СообщениеОбмена); 
	ПКО_XDTOВСсылку(XDTOОбъект.Storehouse, Объект.Склад, СообщениеОбмена);
	
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Ответственный, СообщениеОбмена);		
					
	// << 06.05.2024 Петухов А.В., Фактор, #3938
	//ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.Товары, СообщениеОбмена);
	ДопПараметры = Новый Структура;
	Если XDTOОбъект.DocOperationType = "ФорменнаяОдежда" Тогда
		ДопПараметры.Вставить("ЗаполнятьЗаказНаВнутреннееПотребление", Истина);
	КонецЕсли;
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.Товары, СообщениеОбмена, ДопПараметры);
	// >> 06.05.2024 Петухов А.В., Фактор, #3938

	Комментарий = НСтр("ru = 'Загружен на основании документа Списание товаров №%1 от %2. %3'");
	Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate, XDTOОбъект.Comment);
	
	ВнутреннееПотреблениеТоваровПродолжитьЗаполнение(Объект, СообщениеОбмена);	
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_СписаниеНедостачТоваров(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("СписаниеНедостачТоваров", XDTOОбъект);
	
	Если ПКО_XDTOВСсылку(XDTOОбъект.Storehouse, Объект.Склад, СообщениеОбмена)
		И ГенерироватьОшибкуЕслиСкладСвязанСМаркетплейсом(XDTOОбъект, Объект, СообщениеОбмена) Тогда  		
		Возврат Ложь;	
	КонецЕсли;
	
	ПКО_XDTOВСсылку(XDTOОбъект.Organization, Объект.Организация, СообщениеОбмена); 
	ПКО_XDTOВСсылку(XDTOОбъект.InventoryCountSheet, Объект.ПересчетТоваров, СообщениеОбмена); 
	ПКО_XDTOВСсылку(XDTOОбъект.Department, Объект.Подразделение, СообщениеОбмена); 
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Автор, СообщениеОбмена);		

	DocOperationType = XDTOОбъект.DocOperationType;	
	
	Если DocOperationType = "Прочие" Тогда 
		Объект.СтатьяРасходов = КР_ДополнительныеНастройкиПовтИсп.Значение("СтатьяРасходовСписаниеПрочее");
	ИначеЕсли DocOperationType = "Брак" Тогда 
		Объект.СтатьяРасходов = КР_ДополнительныеНастройкиПовтИсп.Значение("СтатьяРасходовСписаниеБрак");
	ИначеЕсли DocOperationType = "ПоРезультатамИнвентаризации" Тогда 
		Объект.СтатьяРасходов = КР_ДополнительныеНастройкиПовтИсп.Значение("СтатьяРасходовДляСписанияНедостачТоваров");
	Иначе
		СсылкаМетаданные = Объект.Метаданные();
		
		ТекстСообщения = НСтр("ru = 'Значение ""%1"" свойства ""DocOperationType"" не соответствует ожидаемому'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, DocOperationType);
		
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(СсылкаМетаданные); 
							  
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
	КонецЕсли;	
	
	Объект.ИдентификаторДокумента = XDTOОбъект.Ref;
	
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.Товары, СообщениеОбмена);

	Комментарий = НСтр("ru = 'Загружен на основании документа Списание товаров №%1 от %2. %3'");
	Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate, XDTOОбъект.Comment);
	
	СписаниеНедостачТоваровПродолжитьЗаполнение(Объект);	
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_ПересортицаТоваров(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ПересортицаТоваров", XDTOОбъект);
	
	Если ПКО_XDTOВСсылку(XDTOОбъект.Storehouse, Объект.Склад, СообщениеОбмена)
		И ГенерироватьОшибкуЕслиСкладСвязанСМаркетплейсом(XDTOОбъект, Объект, СообщениеОбмена) Тогда  		
		Возврат Ложь;	
	КонецЕсли;
	
	ПКО_XDTOВСсылку(XDTOОбъект.Organization, Объект.Организация, СообщениеОбмена); 
	ПКО_XDTOВСсылку(XDTOОбъект.InventoryCountSheet, Объект.ПересчетТоваров, СообщениеОбмена); 
	ПКО_XDTOВСсылку(XDTOОбъект.Department, Объект.Подразделение, СообщениеОбмена); 
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Автор, СообщениеОбмена);		

	Объект.ИдентификаторДокумента = XDTOОбъект.Ref;
	
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.Товары, СообщениеОбмена);
	
	Комментарий = НСтр("ru = 'Загружен на основании документа Корректировки серий и характеристик №%1 от %2. %3'");
	Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate, XDTOОбъект.Comment);
	
	ПересортицаТоваровПродолжитьЗаполнение(Объект, СообщениеОбмена);	
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_КР_ДвижениеКоробов(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("КР_ДвижениеКоробов", XDTOОбъект);  
		
	// Новое требование №6 (по результатам тестирования с заказчиком) 
	Объект.Номер = Неопределено;	
	
	ПКО_XDTOВСсылку(XDTOОбъект.Storehouse, Объект.Склад, СообщениеОбмена);
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Ответственный, СообщениеОбмена);		
	
	// CardBoxMovementListObject
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.CardBoxMovementList, Объект.Короба, СообщениеОбмена);
	
	Комментарий = НСтр("ru = 'Загружен на основании документа %1 №%2 от %3'");
	Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocType, XDTOОбъект.DocNum, XDTOОбъект.DocDate);
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_ПриобретениеУслугПрочихАктивов(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ПриобретениеУслугПрочихАктивов", XDTOОбъект);
		
	СсылкаМетаданные = Объект.Метаданные();
	Если ПустаяСтрока(XDTOОбъект.TypeOperation)	Тогда 

		ТекстСообщения = НСтр("ru = 'Не заполнено свойство TypeOperation XDTOОбъекта PurchaseServicesAndOtherAssetsObject'");
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(СсылкаМетаданные); 
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);

		Возврат Ложь;
	КонецЕсли;
	
	Идентификатор = КР_ОбщегоНазначениеСервер.GUIDИзСтроки(XDTOОбъект.TypeOperation);				
	Если Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЕстьЗаписьСИдентификаторомВСинхронизируемыхОбъектах(
		Идентификатор, Объект.Подразделение, СообщениеОбмена) Тогда  
		
		ТекстСообщения = НСтр("ru = 'Не найдена ссылка в синхронизируемых объектах по GUID %1 (представление: %2)'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Идентификатор, XDTOОбъект.TypeOperation);
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(СсылкаМетаданные); 
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);

		Возврат Ложь;
	КонецЕсли;
	
	ПКО_XDTOВСсылку(XDTOОбъект.CounterpartyAgreement, Объект.Договор, СообщениеОбмена);	   
	ПКО_XDTOВСсылку(XDTOОбъект.Currency, Объект.Валюта, СообщениеОбмена); 
	Объект.ЦенаВключаетНДС = XDTOОбъект.PriceIncludesVAT;
	Объект.Комментарий = XDTOОбъект.Comment;
	
	ПриобретениеУслугПрочихАктивовРаспределитьПоКомплектам(XDTOОбъект, Объект, СообщениеОбмена); 
			
	ПриобретениеУслугПрочихАктивовПродолжитьЗаполнение(Объект, СообщениеОбмена);	
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_ТаможеннаяДекларацияИмпорт(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ТаможеннаяДекларацияИмпорт", XDTOОбъект);

	ПКО_XDTOВСсылку(XDTOОбъект.Organization, Объект.Организация, СообщениеОбмена);	   
	Если ПКО_XDTOВСсылку(XDTOОбъект.Broker, Объект.Контрагент, СообщениеОбмена) Тогда 
		Объект.ВариантОформления = Перечисления.ХозяйственныеОперации.ОформлениеГТДБрокером;
	Иначе  
		ПКО_XDTOВСсылку(XDTOОбъект.Customs, Объект.Контрагент, СообщениеОбмена);
		Объект.ВариантОформления = Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно;
	КонецЕсли;	
	
	Если XDTOОбъект.CustomsCleared Тогда 
		Объект.Статус = Перечисления.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни;
	Иначе     
		Объект.Статус = Перечисления.СтатусыТаможенныхДеклараций.ТаможенноеОформление;
	КонецЕсли;	
	
	// Странно, но новые требования. Оставляю на всякий случай
	// УДАЛИТЬ ПРИ УДАЛЕНИИ СООТВЕТСТВУЮЩИЙ СВОЙСТВ ПАКЕТА
	//ПКО_XDTOВСсылку(XDTOОбъект.Currency, Объект.Валюта, СообщениеОбмена); 
	//ПКО_XDTOВСсылку(XDTOОбъект.CurrencySettlements, Объект.ВалютаВзаиморасчетов, СообщениеОбмена); 
	//Объект.КурсЧислитель = XDTOОбъект.CourseNumerator;
	//Объект.КурсЗнаменатель = XDTOОбъект.CourseDenominator;  
	ВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();    
	Объект.Валюта = ВалютаРегУчета; 
	Объект.ВалютаВзаиморасчетов = ВалютаРегУчета; 
	Объект.КурсЧислитель = 1;
	Объект.КурсЗнаменатель = 1;  
	//
	
	Объект.ТаможенныйСбор = XDTOОбъект.CustomsDuty;
	Объект.ТаможенныйШтраф = XDTOОбъект.CustomsFine;
	Объект.ДатаПлатежа = XDTOОбъект.DocDate;   
	Объект.НомерДекларации = XDTOОбъект.DeclarationNumber;   
	
	Объект.Комментарий = XDTOОбъект.Comment;	

	СтранаПроисхождения = Неопределено;
	ПКО_XDTOВСсылку(XDTOОбъект.CountryProduction, СтранаПроисхождения, СообщениеОбмена);
	
	// Здесь ДополнительныеПараметры являются обязатеными для заполнения обоих ТЧ.
	// Через них передается информация из объекта, а так же "переносится" информация из Товаров в разделы
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("DocDate", XDTOОбъект.DocDate);
	ДополнительныеПараметры.Вставить("CountryProduction", СтранаПроисхождения);
	ДополнительныеПараметры.Вставить("DeclarationNumber", XDTOОбъект.DeclarationNumber);
		
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект.Товары, СообщениеОбмена, ДополнительныеПараметры);
	
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Sections, Объект.Разделы, СообщениеОбмена, ДополнительныеПараметры);
	
	ТаможеннаяДекларацияИмпортПродолжитьЗаполнение(Объект, СообщениеОбмена);	
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_GoodsRelocationOrderCompletionObjectВЗаказНаПеремещение(XDTOОбъект, Объект, СообщениеОбмена)
	
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_ЗаявлениеОВвозеТоваров(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ТаможеннаяДекларацияИмпорт", XDTOОбъект);

	ПКО_XDTOВСсылку(XDTOОбъект.Organization, Объект.Организация, СообщениеОбмена);	   
	ПКО_XDTOВСсылку(XDTOОбъект.Counterparty, Объект.Контрагент, СообщениеОбмена);
	ПКО_XDTOВСсылку(XDTOОбъект.CounterpartyAgreement, Объект.Договор, СообщениеОбмена);
	ПКО_XDTOВСсылку(XDTOОбъект.Currency, Объект.Договор, СообщениеОбмена);
	
	Объект.Комментарий = XDTOОбъект.Comment;	
	
	// DeclarationImportationGoodsRowsObject
	ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.Goods, Объект, СообщениеОбмена);
		
	ЗаявлениеОВвозеТоваровПродолжитьЗаполнение(Объект, СообщениеОбмена);	
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_ПриходныйКассовыйОрдер(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ПриходныйКассовыйОрдер", XDTOОбъект);
		
	// ?? Жду ответа от констультанта на чьей стороне будет логика 
	Объект.ХозяйственнаяОперация = XMLЗначение(Тип("ПеречислениеСсылка.ХозяйственныеОперации"), XDTOОбъект.TypeOperation);	
		
	ПКО_XDTOВСсылку(XDTOОбъект.Cashier, Объект.Касса, СообщениеОбмена);
	ПКО_XDTOВСсылку(XDTOОбъект.CashierKKM, Объект.КассаККМ, СообщениеОбмена);
	ПКО_XDTOВСсылку(XDTOОбъект.CashFlowItem, Объект.СтатьяДвиженияДенежныхСредств, СообщениеОбмена);
	ПКО_XDTOВСсылку(XDTOОбъект.Department, Объект.Подразделение, СообщениеОбмена);
	ПКО_XDTOВСсылку(XDTOОбъект.Individual, Объект.ПодотчетноеЛицо, СообщениеОбмена);
	ПКО_XDTOВСсылку(XDTOОбъект.User, Объект.Автор, СообщениеОбмена);
	
	Объект.СуммаДокумента = XDTOОбъект.Amount;	
	Объект.ПринятоОт = XDTOОбъект.Accepted;	
	Объект.Основание = XDTOОбъект.Basis;	
	Объект.Приложение = XDTOОбъект.Application;	
	Объект.Комментарий = XDTOОбъект.Comment;	
				
	Возврат Истина;
			
КонецФункции

Функция ПКО_РасходныйКассовыйОрдер(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("РасходныйКассовыйОрдер", XDTOОбъект);
		
	// ?? Жду ответа от констультанта на чьей стороне будет логика 
	Объект.ХозяйственнаяОперация = XMLЗначение(Тип("ПеречислениеСсылка.ХозяйственныеОперации"), XDTOОбъект.TypeOperation);	
		
	ПКО_XDTOВСсылку(XDTOОбъект.BankAccount, Объект.БанковскийСчет, СообщениеОбмена);
	ПКО_XDTOВСсылку(XDTOОбъект.Cashier, Объект.Касса, СообщениеОбмена);
	ПКО_XDTOВСсылку(XDTOОбъект.CashierKKM, Объект.КассаККМ, СообщениеОбмена);
	ПКО_XDTOВСсылку(XDTOОбъект.CashFlowItem, Объект.СтатьяДвиженияДенежныхСредств, СообщениеОбмена);
	ПКО_XDTOВСсылку(XDTOОбъект.Department, Объект.Подразделение, СообщениеОбмена);
	ПКО_XDTOВСсылку(XDTOОбъект.User, Объект.Автор, СообщениеОбмена);
	
	Объект.СуммаДокумента = XDTOОбъект.Amount;	
	Объект.Выдать = XDTOОбъект.Issue;	
	Объект.Основание = XDTOОбъект.Basis;	
	Объект.Приложение = XDTOОбъект.Application;	
	Объект.Комментарий = XDTOОбъект.Comment;	
				
	Возврат Истина;
			
КонецФункции

#КонецОбласти

#Область Регистры

Функция ПКО_ШтрихкодыWB(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = РегистрыСведений.КР_ШтрихкодыWb.СоздатьНаборЗаписей();
	
	// Установми отборы 
	XDTOОтбор = XDTOОбъект.WBBarcodeInfoRegSelection;  
	
	ЗаявкаМагазина = Неопределено;
	ПКО_XDTOВСсылку(XDTOОтбор.ClientOrder, ЗаявкаМагазина, СообщениеОбмена);
		
	Объект.Отбор.ЗаявкаМагазина.Установить(ЗаявкаМагазина);
	Объект.Отбор.ШтрихкодWb.Установить(XDTOОтбор.WBBarcode);
	
	// Детальные записи читаем заново
	//	понимая, что "в норме" ClientOrder и WBBarcode должны совпадать  
	СписокXDTO = XDTOОбъект.WBBarcodeInfoRegRecordSet.WBBarcodeInfoRegRecord;
	Для Каждого СтрокаСпискаXDTO Из СписокXDTO Цикл 
		
		Запись = Объект.Добавить();
		Запись.Активность = Истина; 
		Запись.ЗаявкаМагазина = ЗаявкаМагазина;
		Запись.ШтрихкодWb = СтрокаСпискаXDTO.WBBarcode;  
		ПКО_XDTOВСсылку(СтрокаСпискаXDTO.Box, Запись.УпаковочныйЛист, СообщениеОбмена);
		
	КонецЦикла;	
			
	Возврат Истина;
			
КонецФункции

Функция ПКО_ПриемкаПеремещенийТоваров(XDTOОбъект, МассивОбъектов, СообщениеОбмена)
	
	МассивОбъектов = Новый Массив;
	
	// Установми отборы 
	XDTOОтбор = XDTOОбъект.GoodsRelocationAcceptCompletionInfoRegSelection;  
	
	// A2105505-1769
	ВыборкаДетальныеЗаписи = ПолучитьПеремещенияПоУникальномуИдентицикатору(
		XDTOОтбор.GoodsRelocation.Ref); 

	// A2105505-1915
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда 
		
		ТекстСообщения = НСтр("ru = 'Не найдено ни одного перемещения товаров по Ref=%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, XDTOОтбор.GoodsRelocation.Ref);
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 					  
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		
		Возврат Ложь;
	КонецЕсли;	
	//
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
		
		Накладная = ВыборкаДетальныеЗаписи.Ссылка;	
		
		Если Не Накладная.Проведен Тогда 
						
			СсылкаМетаданные = Накладная.Метаданные();
			ТекстСообщения = НСтр("ru = 'Документ %1 не проведен, "
				+ "добавление записи о завершении приемки по непроверенному документу невозможно'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Накладная);
			
	  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(СсылкаМетаданные); 
								  
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
			
			Продолжить;
		КонецЕсли;	
		//
	
		Объект = РегистрыСведений.КР_ПриемкаПеремещенийТоваров.СоздатьНаборЗаписей();
		Объект.Отбор.Накладная.Установить(Накладная);
		
		// Детальные записи читаем заново
		//	понимая, что "в норме" GoodsRelocation должнен совпадать  
		СписокXDTO = XDTOОбъект.GoodsRelocationAcceptCompletionInfoRegRecordSet
			.GoodsRelocationAcceptCompletionInfoRegRecord;
		Для Каждого СтрокаСпискаXDTO Из СписокXDTO Цикл 
			
			Запись = Объект.Добавить();
			Запись.Активность = Истина; 
			Запись.Накладная = Накладная;
			Запись.ДатаПотоварнойПриемки = СтрокаСпискаXDTO.AcceptCompletionDate; 
			
			// A2105505-1769
			Запись.НеФормироватьАктОрасхождениях = Не СтрокаСпискаXDTO.Mismatch;
			//
			
		КонецЦикла;	
		
		МассивОбъектов.Добавить(Объект);
		
	КонецЦикла; // A2105505-1769
	
	Возврат Истина;
			
КонецФункции

Функция ПКО_ДокументыФизическихЛиц(XDTOОбъект, Объект, СообщениеОбмена)
	
	Объект = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
	
	// Установми отборы 
	XDTOОтбор = XDTOОбъект.IdentityPapersInfoRegSelection;  
	
	// A2105505-2087
	// Поля Period и DocType стали не обязательными
	// 	соответственно изменена логика     
	Если ЗначениеЗаполнено(XDTOОтбор.Period) Тогда 
		Объект.Отбор.Период.Установить(XDTOОтбор.Period);
	КонецЕсли;
	
	Физлицо = Неопределено;
	ПКО_XDTOВСсылку(XDTOОтбор.Individual, Физлицо, СообщениеОбмена);
	Объект.Отбор.Физлицо.Установить(Физлицо);  
	
	ВидДокумента = Неопределено;
	Если ЗначениеЗаполнено(XDTOОтбор.DocType) Тогда 
		// Требование в ФДР поиск по наименованию
		ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию( 
			XDTOОтбор.DocType, Истина);
		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда 
				
			СсылкаМетаданные = ВидДокумента.Метаданные();
			СсылкаТип = ТипЗнч(ВидДокумента);
			
			ТекстСообщения = НСтр("ru = 'Не найден элемент справочника %1 ""%2"" по наименованию'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, СсылкаТип, XDTOОтбор.DocType);
			
	  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(СсылкаМетаданные); 
								  
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
			
			Возврат Ложь;
			
		КонецЕсли;	
		
		Объект.Отбор.ВидДокумента.Установить(ВидДокумента);

	КонецЕсли;
	
	// Детальные записи читаем заново
	//	понимая, что "в норме" Физлицо, ВидДокумента должны совпадать  
	СписокXDTO = XDTOОбъект.IdentityPapersInfoInfoRegRecordSet.IdentityPapersInfoInfoRegRecord;
	Для Каждого СтрокаСпискаXDTO Из СписокXDTO Цикл 
		
		Запись = Объект.Добавить();
		Запись.Активность = Истина;        
		Запись.Период = СтрокаСпискаXDTO.Period;
		Запись.Физлицо = Физлицо;      
		
		// Требование в ФДР поиск по наименованию
		// << 04.04.2024 Петухов А.В., Фактор, #3965
		//ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию( 
		//	XDTOОтбор.DocType, Истина);
		ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию( 
			СтрокаСпискаXDTO.DocType, Истина);
		// >> 04.04.2024 Петухов А.В., Фактор, #3965
		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда 
				
			СсылкаМетаданные = ВидДокумента.Метаданные();
			СсылкаТип = ТипЗнч(ВидДокумента);
			
			ТекстСообщения = НСтр("ru = 'Не найден элемент справочника %1 ""%2"" по наименованию'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, СсылкаТип, XDTOОтбор.DocType);
			
	  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(СсылкаМетаданные); 
								  
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
			
		Иначе 

			Запись.ВидДокумента = ВидДокумента; 
			
		КонецЕсли;	
		
		//		
		Запись.Серия = СтрокаСпискаXDTO.DocSeries;  
		Запись.Номер = СтрокаСпискаXDTO.DocNumber;  
		Запись.ДатаВыдачи = СтрокаСпискаXDTO.IssueDate;  
		Запись.СрокДействия = СтрокаСпискаXDTO.ExpDate;  
		Запись.КемВыдан = СтрокаСпискаXDTO.IssueDept;  
		Запись.КодПодразделения = СтрокаСпискаXDTO.IssueDeptID;  
		
	КонецЦикла;	
			
	Возврат Истина;
			
КонецФункции

#КонецОбласти

#Область ТабличныеЧасти

Функция ПКО_XDTOВТабличнуюЧасть(
	XDTOЗначение, ТабличнаяЧастьИлиОбъект, СообщениеОбмена, Знач ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если XDTOЗначение = Неопределено Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	ИмяТипаXDTO = XDTOЗначение.Тип().Имя;  
	Если ИмяТипаXDTO = "GoodsDetailedRowsObject" Тогда 
		Возврат ПКО_XDTOGoodsDetailedRowsObjectВТабличнуюЧасть(
			XDTOЗначение, ТабличнаяЧастьИлиОбъект, СообщениеОбмена, ДополнительныеПараметры);		
	ИначеЕсли ИмяТипаXDTO = "OtherShipmentsListObject" Тогда 
		Возврат ПКО_XDTOOtherShipmentsListObjectВТабличнуюЧасть(
			XDTOЗначение, ТабличнаяЧастьИлиОбъект, СообщениеОбмена, ДополнительныеПараметры);		
	ИначеЕсли ИмяТипаXDTO = "RetailSalesReportGoodsRowsObject" Тогда 
		Возврат ПКО_XDTORetailSalesReportGoodsRowsObjectВТабличнуюЧасть(
			XDTOЗначение, ТабличнаяЧастьИлиОбъект, СообщениеОбмена, ДополнительныеПараметры);		
	ИначеЕсли ИмяТипаXDTO = "RetailSalesReportPaymentsRowsObject" Тогда 
		Возврат ПКО_XDTORetailSalesReportPaymentsRowsObjectВТабличнуюЧасть(
			XDTOЗначение, ТабличнаяЧастьИлиОбъект, СообщениеОбмена, ДополнительныеПараметры);		
	ИначеЕсли ИмяТипаXDTO = "PriceSettingGoodsRowsObject" Тогда 
		Возврат ПКО_XDTOPriceSettingGoodsRowsObjectВТабличныеЧасти(
			XDTOЗначение, ТабличнаяЧастьИлиОбъект, СообщениеОбмена, ДополнительныеПараметры);		
	ИначеЕсли ИмяТипаXDTO = "GoodsRegradingRowsObject" Тогда 
		Возврат ПКО_XDTOGoodsRegradingRowsObjectВТабличнуюЧасть(
			XDTOЗначение, ТабличнаяЧастьИлиОбъект, СообщениеОбмена, ДополнительныеПараметры);		
	ИначеЕсли ИмяТипаXDTO = "CardBoxMovementListObject" Тогда 
		Возврат ПКО_XDTOCardBoxMovementListObjectВТабличнуюЧасть(
			XDTOЗначение, ТабличнаяЧастьИлиОбъект, СообщениеОбмена, ДополнительныеПараметры);		
	ИначеЕсли ИмяТипаXDTO = "CardBoxesListObject" Тогда 
		Возврат ПКО_XDTOCardBoxesListObjectВТабличнуюЧасть(
			XDTOЗначение, ТабличнаяЧастьИлиОбъект, СообщениеОбмена, ДополнительныеПараметры);		
	ИначеЕсли ИмяТипаXDTO = "ImportCustomsDeclarationSectionsRowsObject" Тогда 
		Возврат ПКО_XDTOImportCustomsDeclarationSectionsRowsObjectВТабличнуюЧасть(
			XDTOЗначение, ТабличнаяЧастьИлиОбъект, СообщениеОбмена, ДополнительныеПараметры);		
	ИначеЕсли ИмяТипаXDTO = "ImportCustomsDeclarationGoodsRowsObject" Тогда 
		Возврат ПКО_XDTOImportCustomsDeclarationGoodsRowsObjectВТабличнуюЧасть(
			XDTOЗначение, ТабличнаяЧастьИлиОбъект, СообщениеОбмена, ДополнительныеПараметры);		
	ИначеЕсли ИмяТипаXDTO = "EmailRowsObject" Тогда 
		Возврат ПКО_XDTOEmailRowsObjectВТабличнуюЧасть(
			XDTOЗначение, ТабличнаяЧастьИлиОбъект, СообщениеОбмена, ДополнительныеПараметры);		
	ИначеЕсли ИмяТипаXDTO = "DeclarationImportationGoodsRowsObject" Тогда 
		Возврат ПКО_XDTODeclarationImportationGoodsRowsObjectВТабличнуюЧасть(
			XDTOЗначение, ТабличнаяЧастьИлиОбъект, СообщениеОбмена, ДополнительныеПараметры);		
	Иначе	
		ТекстОшибки = НСтр("ru = 'КР_УТ10_УТ11_ЗагрузкаДанныхСервер.ПКО_XDTOВТабличнуюЧасть:
		|Не определено правило конвертации из XDTO типа ""%1"" в тип ""ТабличнаяЧасть""'");  
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяТипаXDTO);
		ВызватьИсключение ТекстОшибки;	
	КонецЕсли;		

	Возврат Ложь;
	
КонецФункции

Функция ПКО_XDTOGoodsDetailedRowsObjectВТабличнуюЧасть(
	XDTOЗначение, ТабличнаяЧасть, СообщениеОбмена, Знач ДополнительныеПараметры = Неопределено) 
	
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	РаспоряжениеXDTOТип = Неопределено;
	ДополнительныеПараметры.Свойство("РаспоряжениеXDTOТип", РаспоряжениеXDTOТип);    
	
	ТабличнаяЧастьМетаданные = Неопределено;
	ЕстьСклад = Неопределено;
	ДополнительныеПараметры.Свойство("ТабличнаяЧастьМетаданные", ТабличнаяЧастьМетаданные);
	ЕстьСклад = ДополнительныеПараметры.Свойство("ЕстьСклад", ЕстьСклад)
		И ЕстьСклад;
	
	Если ТабличнаяЧастьМетаданные = Неопределено Тогда 
		ТабличнаяЧастьМетаданные = Метаданные.НайтиПоТипу(Тип(ТабличнаяЧасть)); 
	КонецЕсли;
	
	ТабличнаяЧастьМетаданныеРеквизиты = ТабличнаяЧастьМетаданные.Реквизиты;      
	
	ТабличнаяЧасть.Очистить();

	// Имя реквизита распоряжение/Заказ на перемещение
	Если ТабличнаяЧастьМетаданныеРеквизиты.Найти("Распоряжение") <> Неопределено Тогда 
		ИмяРеквизитаРаспоряжение = "Распоряжение"; 
	ИначеЕсли ТабличнаяЧастьМетаданныеРеквизиты.Найти("ЗаказНаПеремещение") <> Неопределено Тогда
		ИмяРеквизитаРаспоряжение = "ЗаказНаПеремещение";  
	ИначеЕсли ТабличнаяЧастьМетаданныеРеквизиты.Найти("ЗаказКлиента") <> Неопределено Тогда
		ИмяРеквизитаРаспоряжение = "ЗаказКлиента";  
	Иначе     
		ИмяРеквизитаРаспоряжение = Неопределено;  
	КонецЕсли;	
	
	ЕстьКодСтроки = ТабличнаяЧастьМетаданныеРеквизиты.Найти("КодСтроки") <> Неопределено;
	ЕстьИдентификаторСтроки = ТабличнаяЧастьМетаданныеРеквизиты.Найти("ИдентификаторСтроки") <> Неопределено;
	ЕстьКороб = ТабличнаяЧастьМетаданныеРеквизиты.Найти("КР_Короб") <> Неопределено;
	ЕстьКоличествоУпаковок = ТабличнаяЧастьМетаданныеРеквизиты.Найти("КоличествоУпаковок") <> Неопределено;
	ЕстьЦена = ТабличнаяЧастьМетаданныеРеквизиты.Найти("Цена") <> Неопределено;
	ЕстьКоличествоФакт = ТабличнаяЧастьМетаданныеРеквизиты.Найти("КоличествоФакт") <> Неопределено;
	
	НоменклатураХарактеристикаСсылки = Неопределено;
	Если Не ПКО_XDTOВСсылкуНоменклатураХарактеристикаПакетно(
		XDTOЗначение.GoodsDetailedSingleRow, НоменклатураХарактеристикаСсылки, СообщениеОбмена) Тогда  
		Возврат Ложь;
	КонецЕсли;	
		
	ПараметрыПоискаРаспоряжение = ПараметрыПоискаСсылки();	
	ПараметрыПоискаРаспоряжение.ИмяТипаXDTO = РаспоряжениеXDTOТип;

	УспешноеЗаполнение = Истина;
	
	НомерСтроки = 0;
	Для Каждого СтрокаСпискаXDTO Из XDTOЗначение.GoodsDetailedSingleRow Цикл    
		
		НомерСтроки = НомерСтроки + 1;
		
		// A2105505-1867 Переопределена логика метода получения ссылок
		// Упрощаем логику, берем только первый элемент 
		Ссылки = НоменклатураХарактеристикаСсылки[НомерСтроки - 1][0];  
					
		НоваяСтрока = ТабличнаяЧасть.Добавить();   
		
		НоваяСтрока.Номенклатура = Ссылки.Номенклатура; 
		НоваяСтрока.Характеристика = Ссылки.Характеристика;
		
		НоваяСтрока.Количество = СтрокаСпискаXDTO.Quantity;
		
		Если ИмяРеквизитаРаспоряжение <> Неопределено Тогда 
			ПКО_XDTOВСсылку(СтрокаСпискаXDTO.GoodsRelocationOrder, 
				НоваяСтрока[ИмяРеквизитаРаспоряжение], СообщениеОбмена, ПараметрыПоискаРаспоряжение);    
		КонецЕсли;               

		Если ЕстьКороб Тогда 
			ПКО_XDTOВСсылку(СтрокаСпискаXDTO.Box, НоваяСтрока.КР_Короб, СообщениеОбмена);
		КонецЕсли;

		Если ЕстьСклад Тогда 
			ПКО_XDTOВСсылку(СтрокаСпискаXDTO.Storehouse, НоваяСтрока.Склад, СообщениеОбмена);
		КонецЕсли;
		
		Если ЕстьКоличествоУпаковок Тогда 
			НоваяСтрока.КоличествоУпаковок = СтрокаСпискаXDTO.Quantity;  
		КонецЕсли;	
		
		Если ЕстьКоличествоФакт Тогда
			Если СтрокаСпискаXDTO.ActualQuantity < 0 Тогда				
				ТекстСообщения = НСтр("ru = 'В свойстве ActualQuantity строки %1 сообщения обмена получено отрицательное значение'");				
				ТекстСообщения = СтрШаблон(ТекстСообщения, НоваяСтрока.НомерСтроки);
				ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 
				КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);				
				УспешноеЗаполнение = Ложь;
			КонецЕсли;
			
			НоваяСтрока.КоличествоФакт = СтрокаСпискаXDTO.ActualQuantity;  
			НоваяСтрока.КоличествоУпаковокФакт = СтрокаСпискаXDTO.ActualQuantity;  
		КонецЕсли;	
		
		Если ЕстьЦена Тогда 
			НоваяСтрока.Цена = СтрокаСпискаXDTO.Price;  
		КонецЕсли;	

		Если ЕстьКодСтроки Тогда 
			НоваяСтрока.КодСтроки = НомерСтроки; 
		КонецЕсли;

		Если ЕстьИдентификаторСтроки Тогда 
			НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор; 
		КонецЕсли;

		// << 06.05.2024 Петухов А.В., Фактор, #3938
		Если ДополнительныеПараметры.Свойство("ЗаполнятьЗаказНаВнутреннееПотребление") Тогда
			НастройкиПоиска = ПараметрыПоискаСсылки();
			НастройкиПоиска.ИмяТипаXDTO = "InventoryWriteOffRequestObject";
			ПКО_XDTOВСсылку(СтрокаСпискаXDTO.GoodsRelocationOrder, НоваяСтрока.ЗаказНаВнутреннееПотребление, СообщениеОбмена, НастройкиПоиска);
		КонецЕсли;
		// >> 06.05.2024 Петухов А.В., Фактор, #3938
		
	КонецЦикла;

	Возврат УспешноеЗаполнение;
	
КонецФункции

Функция ПКО_XDTOOtherShipmentsListObjectВТабличнуюЧасть(
	XDTOЗначение, ТабличнаяЧасть, СообщениеОбмена, Знач ДополнительныеПараметры = Неопределено) 
	
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ТабличнаяЧасть.Очистить();
	
	Для Каждого СтрокаСпискаXDTO Из XDTOЗначение.OtherShipmentPositionListRow Цикл    
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();  
		НоваяСтрока.ОписаниеМеста = СтрокаСпискаXDTO.ShipmentPositionDescription;  
		НоваяСтрока.КоличествоМест = СтрокаСпискаXDTO.Quantity;  
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Функция ПКО_XDTORetailSalesReportGoodsRowsObjectВТабличнуюЧасть(
	XDTOЗначение, ТабличнаяЧасть, СообщениеОбмена, Знач ДополнительныеПараметры = Неопределено) 
	
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;

	ТабличнаяЧасть.Очистить();
	
	// Конвертируем всю номенклатуру и характеристики пакетно
	НоменклатураХарактеристикаСсылки = Неопределено;
	Если Не ПКО_XDTOВСсылкуНоменклатураХарактеристикаПакетно(
		XDTOЗначение.Row, НоменклатураХарактеристикаСсылки, СообщениеОбмена) Тогда  
		Возврат Ложь;
	КонецЕсли;	
		
	РозничныйПокупатель = Справочники.Партнеры.РозничныйПокупатель;	 	
	
	ИндексДанныхНоменклатураХарактеристика = 0;
	Для Каждого СтрокаСпискаXDTO Из XDTOЗначение.Row Цикл    
		
		ДанныеИнтернетМагазина = СтрокаСпискаXDTO.NumberOnlineStoreOrder <> Неопределено;
		
		// A2105505-1867 Переопределена логика метода получения ссылок
		// Упрощаем логику, берем только первый элемент 
		Ссылки = НоменклатураХарактеристикаСсылки[ИндексДанныхНоменклатураХарактеристика][0];
		
		НоваяСтрока = ТабличнаяЧасть.Добавить(); 
		НоваяСтрока.Номенклатура = Ссылки.Номенклатура; 
		НоваяСтрока.Характеристика = Ссылки.Характеристика;
		
		НоваяСтрока.Количество = СтрокаСпискаXDTO.QuantitySales;
		НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;  
		
		НоваяСтрока.Цена = СтрокаСпискаXDTO.Price;
		НоваяСтрока.Сумма = СтрокаСпискаXDTO.AmountSales;
		
		УстановитьСтавкуНДСПоНоменклатуреНаДату(
			НоваяСтрока.Номенклатура, ДополнительныеПараметры.DocDate, НоваяСтрока.СтавкаНДС, СообщениеОбмена);
		
		НоваяСтрока.СуммаНДС = СтрокаСпискаXDTO.AmountVat;
		НоваяСтрока.СуммаРучнойСкидки = СтрокаСпискаXDTO.AmountDiscount;
		
	    // Типовое
		Если НоваяСтрока.Количество * НоваяСтрока.Цена <> 0 Тогда
			НоваяСтрока.ПроцентРучнойСкидки = 
				Окр(100 * НоваяСтрока.СуммаРучнойСкидки / (НоваяСтрока.Количество * НоваяСтрока.Цена), 2);
		КонецЕсли;
		
		НоваяСтрока.Партнер = РозничныйПокупатель; 
		
		ПКО_XDTOВСсылку(СтрокаСпискаXDTO.Salesman, НоваяСтрока.Продавец, СообщениеОбмена);

		НоваяСтрока.КР_НомерЧека = СтрокаСпискаXDTO.CheckNum;
		НоваяСтрока.КР_ДатаЧека = СтрокаСпискаXDTO.CheckDate;
		НоваяСтрока.КР_НомерЗаказаИнтернетМагазина = СтрокаСпискаXDTO.NumberOnlineStoreOrder;
		
		// A2105505-2201
		НоваяСтрока.КР_КартаЛояльности = СтрокаСпискаXDTO.DiscountCard;
		//
		
		ИндексДанныхНоменклатураХарактеристика = ИндексДанныхНоменклатураХарактеристика + 1;
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Функция ПКО_XDTORetailSalesReportPaymentsRowsObjectВТабличнуюЧасть(
	XDTOЗначение, ТабличнаяЧасть, СообщениеОбмена, Знач ДополнительныеПараметры = Неопределено) 
	
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;

	ТабличнаяЧасть.Очистить();

	// << 06.03.2024 Петухов А.В., Фактор, #3820
	соотТерминалы = Новый Соответствие;
	// >> 06.03.2024 Петухов А.В., Фактор, #3820
	
	Для Каждого СтрокаСпискаXDTO Из XDTOЗначение.Row Цикл    
		
		Если СтрокаСпискаXDTO.PaymentType = "Наличные" Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТабличнаяЧасть.Добавить(); 
		
		// << 06.03.2024 Петухов А.В., Фактор, #3820
		//УстановитьЭквайринговыйТерминалПоСтроковомуПредставлению(
		//	СтрокаСпискаXDTO.PaymentType, НоваяСтрока.ЭквайринговыйТерминал, СообщениеОбмена);  
		УстановитьЭквайринговыйТерминалПоСтроковомуПредставлению(
			СтрокаСпискаXDTO.PaymentType, НоваяСтрока.ЭквайринговыйТерминал, СообщениеОбмена, соотТерминалы);
		//злВидОплатыУТ10Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		// >> 06.03.2024 Петухов А.В., Фактор, #3820
					
		НоваяСтрока.НомерПлатежнойКарты = "0000 0000 0000 0000 00";
		НоваяСтрока.Сумма = СтрокаСпискаXDTO.Amount;
		НоваяСтрока.КР_НомерЧека = СтрокаСпискаXDTO.CheckNum;
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Функция ПКО_XDTOPriceSettingGoodsRowsObjectВТабличныеЧасти(
	XDTOЗначение, Объект, СообщениеОбмена, Знач ДополнительныеПараметры = Неопределено) 
	
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;

	Товары2_5 = Объект.Товары2_5;
	Товары2_5.Очистить();
	ВидыЦен = Объект.ВидыЦен;
	ВидыЦен.Очистить();
	
	// Если не заполнена валюта то будем заполнять ее валютой рег учета
	ВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();    
	
	// Конвертируем всю номенклатуру и характеристики пакетно
	НоменклатураХарактеристикаСсылки = Неопределено;                                              
	ПараметрыПоискаНоменклатуры = НоменклатураХарактеристикаПакетноПараметрыПоиска( , Ложь, Ложь);
	Если Не ПКО_XDTOВСсылкуНоменклатураХарактеристикаПакетно(
		XDTOЗначение.Row, НоменклатураХарактеристикаСсылки, СообщениеОбмена, ПараметрыПоискаНоменклатуры) Тогда 
		Возврат Ложь;
	КонецЕсли;	
		
	// В процессе заполнения нужно еще заполнять ТЧ ВидыЦен	    
	УжеДобавленныеВидыЦен = Новый Соответствие;  
	ИндексДанныхНоменклатураХарактеристика = 0;
	Для Каждого СтрокаСпискаXDTO Из XDTOЗначение.Row Цикл    

		// A2105505-1867 Переопределена логика метода получения ссылок
		// Теперь возвращается массив
		МассивСсылок = НоменклатураХарактеристикаСсылки[ИндексДанныхНоменклатураХарактеристика];
		ИндексДанныхНоменклатураХарактеристика = ИндексДанныхНоменклатураХарактеристика + 1;
		
		Для Каждого Ссылки Из МассивСсылок Цикл // A2105505-1867 
			
			НоваяСтрока = Товары2_5.Добавить(); 
			НоваяСтрока.Номенклатура = Ссылки.Номенклатура;  
			// Если характеристика не нашлась, а она не найдется если Size = "" 
			//	то все равно заполняем характеристику ЦО.
			НоваяСтрока.ХарактеристикаЦО = Ссылки.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования;
			
			ПКО_XDTOВСсылку(СтрокаСпискаXDTO.PriceType, НоваяСтрока.ВидЦены, СообщениеОбмена);  
			
			НоваяСтрока.Цена = СтрокаСпискаXDTO.Price;
			
			ПКО_XDTOВСсылку(СтрокаСпискаXDTO.Currency, НоваяСтрока.Валюта, СообщениеОбмена);
			
			Если УжеДобавленныеВидыЦен[НоваяСтрока.ВидЦены] = Неопределено Тогда 
				УжеДобавленныеВидыЦен[НоваяСтрока.ВидЦены] = Истина;
				ВидыЦенНоваяСтрока = ВидыЦен.Добавить();   
				ВидыЦенНоваяСтрока.ВидЦены = НоваяСтрока.ВидЦены;
			КонецЕсли;
			
			// Новое требование. Если размер не был запонен то использовать все размеры 
			// Реализуем отдельными запросами. Если будет тормозить, надо переписать на пакетный вариант
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
				И Не ЗначениеЗаполнено(СтрокаСпискаXDTO.Size)
				Тогда 

				Характеристики = ПолучитьХарактеристикиНоменклатуры(НоваяСтрока.Номенклатура);   
				Если ЗначениеЗаполнено(Характеристики) Тогда        
					
	 				// Заполняем характеристику в текущей строке и дублируем для последующих характеристик  
					ИндексХарактеристики = 0;
					НоваяСтрока.ХарактеристикаЦО = Характеристики[ИндексХарактеристики].ХарактеристикаНоменклатурыДляЦенообразования;
					Для ИндексХарактеристики = 1 По Характеристики.ВГраница() Цикл 
						
						ДополнительнаяСтрока = Товары2_5.Добавить(); 
						ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, НоваяСтрока);
						ДополнительнаяСтрока.ХарактеристикаЦО = Характеристики[ИндексХарактеристики].ХарактеристикаНоменклатурыДляЦенообразования;
						
					КонецЦикла;

				КонецЕсли;

			КонецЕсли;	
			//
			
		КонецЦикла; // A2105505-1867
		
	КонецЦикла;   
		
	Возврат Истина;
	
КонецФункции

Функция ПКО_XDTOGoodsRegradingRowsObjectВТабличнуюЧасть(
	XDTOЗначение, ТабличнаяЧасть, СообщениеОбмена, Знач ДополнительныеПараметры = Неопределено) 
	
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ТабличнаяЧасть.Очистить();
		
	// Конвертируем всю номенклатуру и характеристики пакетно  
	
	// Номенклатура/Характеристика Списание
	НоменклатураХарактеристикаСсылки = Неопределено;
	Если Не ПКО_XDTOВСсылкуНоменклатураХарактеристикаПакетно(
		XDTOЗначение.GoodsRegradingRow, НоменклатураХарактеристикаСсылки, СообщениеОбмена) Тогда 
		Возврат Ложь;
	КонецЕсли;	
		
	// Номенклатура/Характеристика Оприходование                                       
	ПараметрыПоиска = НоменклатураХарактеристикаПакетноПараметрыПоиска("Recieved");
	НоменклатураХарактеристикаСсылкиОприходование = Неопределено;
	Если Не ПКО_XDTOВСсылкуНоменклатураХарактеристикаПакетно(
		XDTOЗначение.GoodsRegradingRow, НоменклатураХарактеристикаСсылкиОприходование, СообщениеОбмена, ПараметрыПоиска) Тогда 
		Возврат Ложь;
	КонецЕсли;	
		
	ИндексДанныхНоменклатураХарактеристика = 0;
	Для Каждого СтрокаСпискаXDTO Из XDTOЗначение.GoodsRegradingRow Цикл    

		НоваяСтрока = ТабличнаяЧасть.Добавить();
		
		// A2105505-1867 Переопределена логика метода получения ссылок
		// Упрощаем логику, берем только первый элемент 
		Ссылки = НоменклатураХарактеристикаСсылки[ИндексДанныхНоменклатураХарактеристика][0];
		НоваяСтрока.Номенклатура = Ссылки.Номенклатура; 
		НоваяСтрока.Характеристика = Ссылки.Характеристика;
		
		// A2105505-1867 Переопределена логика метода получения ссылок
		// Упрощаем логику, берем только первый элемент 
		Ссылки = НоменклатураХарактеристикаСсылкиОприходование[ИндексДанныхНоменклатураХарактеристика][0];
		НоваяСтрока.НоменклатураОприходование = Ссылки.Номенклатура; 
		НоваяСтрока.ХарактеристикаОприходование = Ссылки.Характеристика;  
		
		НоваяСтрока.Количество = СтрокаСпискаXDTO.Quantity;
				
		ИндексДанныхНоменклатураХарактеристика = ИндексДанныхНоменклатураХарактеристика + 1;
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Функция ПКО_XDTOCardBoxMovementListObjectВТабличнуюЧасть(
	XDTOЗначение, ТабличнаяЧасть, СообщениеОбмена, Знач ДополнительныеПараметры = Неопределено) 
	
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ТабличнаяЧасть.Очистить();
		
	Для Каждого СтрокаСпискаXDTO Из XDTOЗначение.CardBoxMovementRow Цикл    

		НоваяСтрока = ТабличнаяЧасть.Добавить();
						                       
		ПКО_XDTOВСсылку(СтрокаСпискаXDTO.Cardbox, НоваяСтрока.Короб, СообщениеОбмена);  
		
		// A2105505-1653
		ПКО_XDTOВСсылку(СтрокаСпискаXDTO.Storehouse, НоваяСтрока.Склад, СообщениеОбмена); 
		//
		
		НоваяСтрока.ЭтоПоступление = СтрокаСпискаXDTO.IncomeMovement;
		НоваяСтрока.Количество = СтрокаСпискаXDTO.Quantity;
				
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Функция ПКО_XDTOCardBoxesListObjectВТабличнуюЧасть(
	XDTOЗначение, ТабличнаяЧасть, СообщениеОбмена, Знач ДополнительныеПараметры = Неопределено) 
	
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ТабличнаяЧасть.Очистить();
		
	Для Каждого СтрокаСпискаXDTO Из XDTOЗначение.CardBoxesListsRow Цикл    

		Короб = Неопределено;
		Если Не ПКО_XDTOВСсылку(СтрокаСпискаXDTO.Cardbox, Короб, СообщениеОбмена) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Короб = Короб;				                       
				
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Функция ПКО_XDTOImportCustomsDeclarationGoodsRowsObjectВТабличнуюЧасть(
	XDTOЗначение, ТабличнаяЧасть, СообщениеОбмена, ДополнительныеПараметры)
	
	ТабличнаяЧасть.Очистить();
	
	// Конвертируем всю номенклатуру и характеристики пакетно  
	ПараметрыПоиска = НоменклатураХарактеристикаПакетноПараметрыПоиска( , Ложь);
	НоменклатураХарактеристикаСсылки = Неопределено;
	Если Не ПКО_XDTOВСсылкуНоменклатураХарактеристикаПакетно(
		XDTOЗначение.Row, НоменклатураХарактеристикаСсылки, СообщениеОбмена, ПараметрыПоиска) Тогда 
		Возврат Ложь;
	КонецЕсли;

	ДанныеРазделов = Новый Соответствие;
		
	Для Каждого СтрокаСпискаXDTO Из XDTOЗначение.Row Цикл    

		НоваяСтрока = ТабличнаяЧасть.Добавить();    

		// A2105505-1867 Переопределена логика метода получения ссылок
		// Упрощаем логику, берем только первый элемент 
		Ссылки = НоменклатураХарактеристикаСсылки[НоваяСтрока.НомерСтроки - 1][0];		
		НоваяСтрока.Номенклатура = Ссылки.Номенклатура; 
		НоваяСтрока.Характеристика = Ссылки.Характеристика;
		
		НоваяСтрока.НомерРаздела = СтрокаСпискаXDTO.SectionsNumber;      
		НоваяСтрока.КоличествоУпаковок = СтрокаСпискаXDTO.Quantity;
		НоваяСтрока.Количество = СтрокаСпискаXDTO.Quantity;		
		НоваяСтрока.ТаможеннаяСтоимость = СтрокаСпискаXDTO.Cost;
		НоваяСтрока.СуммаПошлины = СтрокаСпискаXDTO.SumTax;
		НоваяСтрока.СтавкаПошлины = СтрокаСпискаXDTO.DutyRate;
		НоваяСтрока.СуммаНДС = СтрокаСпискаXDTO.SumVat;     
		
		НоваяСтрока.СтранаПроисхождения = ДополнительныеПараметры.CountryProduction;
		НоваяСтрока.НомерДляСФ = ДополнительныеПараметры.DeclarationNumber;
		НоваяСтрока.НомерГТД = ДополнительныеПараметры.DeclarationNumber;
		
		Если ПКО_XDTOВСсылку(СтрокаСпискаXDTO.PurchaseGoodsAndServices, 
				НоваяСтрока.ДокументПоступления, СообщениеОбмена) Тогда
			ДанныеПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				НоваяСтрока.ДокументПоступления, "Склад,ХозяйственнаяОперация");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоступления); 
		КонецЕсли;
		
		УстановитьСтавкуНДСПоНоменклатуреНаДату(
			НоваяСтрока.Номенклатура, 
			ДополнительныеПараметры.DocDate,
			НоваяСтрока.СтавкаНДС,
			СообщениеОбмена);
		
		Если ДанныеРазделов.Получить(НоваяСтрока.НомерРаздела) = Неопределено Тогда 
			ДанныеСтроки = Новый Структура("Склад, СтавкаНДС, СтавкаПошлины");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, НоваяСтрока); 
			ДанныеРазделов.Вставить(НоваяСтрока.НомерРаздела, ДанныеСтроки);
		КонецЕсли;
						
		НоваяСтрока.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		
	КонецЦикла;
	
	ДополнительныеПараметры.Вставить("ДанныеРазделов", ДанныеРазделов);

	Возврат Истина;
	
КонецФункции

Функция ПКО_XDTOImportCustomsDeclarationSectionsRowsObjectВТабличнуюЧасть(
	XDTOЗначение, ТабличнаяЧасть, СообщениеОбмена, ДополнительныеПараметры)
	
	ТабличнаяЧасть.Очистить();
		
	Для Каждого СтрокаСпискаXDTO Из XDTOЗначение.Row Цикл    

		НоваяСтрока = ТабличнаяЧасть.Добавить();
						                       
		НоваяСтрока.НомерРаздела = СтрокаСпискаXDTO.SectionsNumber;
		НоваяСтрока.ТаможеннаяСтоимость = СтрокаСпискаXDTO.Cost;
		НоваяСтрока.СуммаПошлины = СтрокаСпискаXDTO.TaxAmount;
		НоваяСтрока.СуммаНДС = СтрокаСпискаXDTO.SumVat;     
		
		НоваяСтрока.СтранаПроисхождения = ДополнительныеПараметры.CountryProduction;		
			
		ДанныеСтроки = ДополнительныеПараметры.ДанныеРазделов.Получить(НоваяСтрока.НомерРаздела);
		Если ТипЗнч(ДанныеСтроки) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);	
		КонецЕсли;
					
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Функция ПКО_XDTOEmailRowsObjectВТабличнуюЧасть(
	XDTOЗначение, Объект, СообщениеОбмена, ДополнительныеПараметры)
			
	Для Каждого СтрокаСпискаXDTO Из XDTOЗначение.EmailSingleRow Цикл    

    	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
			Объект, СтрокаСпискаXDTO.Representation, ДополнительныеПараметры.ВидыКонтактнойИнформации, , Ложь);
					
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Функция ПКО_XDTODeclarationImportationGoodsRowsObjectВТабличнуюЧасть(
	XDTOЗначение, Объект, СообщениеОбмена, ДополнительныеПараметры)
	
	Объект.Товары.Очистить();
	
	// Подготовим данные для обработки
	ДанныеTNVED = Новый Соответствие;
	МассивPurchaseGoodsAndServices = Новый Массив;
	
	Для Каждого СтрокаСпискаXDTO Из XDTOЗначение.Row Цикл    
		МассивPurchaseGoodsAndServices.Добавить(СтрокаСпискаXDTO.PurchaseGoodsAndServices);
		
		КлючПоиска = СтрокаСпискаXDTO.Model + СтрокаСпискаXDTO.Color;
		Если ЗначениеЗаполнено(СтрокаСпискаXDTO.Size) Тогда 
			КлючПоиска = КлючПоиска + СтрокаСпискаXDTO.Size;
		КонецЕсли;	    
		
		Если ДанныеTNVED[КлючПоиска] = Неопределено Тогда 
			ДанныеTNVED[КлючПоиска] = СтрокаСпискаXDTO.TNVED;
		КонецЕсли;
		
	КонецЦикла;	
	
	// Типовой блок кода документа
	ВалютаРегламентированногоУчета = 
		ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	ВалютаДолларыСША = Справочники.Валюты.НайтиПоКоду("840");
	//                            
	
	ВесНеттоТоваров = РегистрыСведений.КР_ВесНеттоТовара;
	
	ДокументПоступления = Неопределено;
	Для Каждого PurchaseGoodsAndServices Из МассивPurchaseGoodsAndServices Цикл    
		
		Если Не ПКО_XDTOВСсылку(PurchaseGoodsAndServices, ДокументПоступления, СообщениеОбмена) Тогда
			Продолжить;	
		КонецЕсли;
		
		// Типовой блок кода добавления строк в документе (см. ФДР)
		ТаблицаТовары = Документы.ЗаявлениеОВвозеТоваров.ТаблицаОстатковТоваровКОформлениюЗаявленийОВвозеТоваров(
			ДокументПоступления);
		
		Для Каждого СтрокаТаблицыТовары Из ТаблицаТовары Цикл
			Если СтрокаТаблицыТовары.НалоговаяБазаНДС <> 0 Тогда
				СтрокаТаблицыТовары.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
					СтрокаТаблицыТовары.НалоговаяБазаНДС,
					УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтрокаТаблицыТовары.СтавкаНДС),
					Ложь);
			КонецЕсли;
			
			Если Не Объект.ИспользоватьАкцизы Тогда
				СтрокаТаблицыТовары.НалоговаяБазаАкцизы = 0;
			КонецЕсли;
				
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТовары);
			
			// РасчитатьСуммыВТабличнойЧастиНаСервере(НоваяСтрока, ДанныеОбъекта); 
			//	ниже код метола
		 	// Рассчитаем по фактурной стоимости налоговую базу в рублях на дату принятия на учет.
			Если Объект.Валюта <> ВалютаРегламентированногоУчета Тогда
				СтруктураКурса = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(
					Объект.Валюта, НоваяСтрока.ДатаПринятияНаУчет, ВалютаРегламентированногоУчета);
				НоваяСтрока.НалоговаяБазаНДС = НоваяСтрока.ФактурнаяСтоимость 
					* (СтруктураКурса.КурсЧислитель/СтруктураКурса.КурсЗнаменатель);
			Иначе
				НоваяСтрока.НалоговаяБазаНДС = НоваяСтрока.ФактурнаяСтоимость;
			КонецЕсли; 
			
			// Рассчитаем по налоговой базе и ставке сумму НДС
			НоваяСтрока.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
				НоваяСтрока.НалоговаяБазаНДС,
				УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС),
				Ложь);

			// Рассчитаем по налоговой базе в рублях статистическую стоимость в долларах на дату принятия на учет.
			Если ВалютаДолларыСША <> Справочники.Валюты.ПустаяСсылка() Тогда
				СтруктураКурса = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(
					ВалютаДолларыСША, НоваяСтрока.ДатаПринятияНаУчет, ВалютаРегламентированногоУчета);
				НоваяСтрока.СтатСтоимостьДолларыСША = НоваяСтрока.НалоговаяБазаНДС 
					* (СтруктураКурса.КурсЗнаменатель/СтруктураКурса.КурсЧислитель);
			КонецЕсли;
			// 
			
			//
			
			НоваяСтрока.КоличествоПоТНВЭД = НоваяСтрока.Количество;
			
			АналитикаУчетаНоменклатуры = НоваяСтрока.АналитикаУчетаНоменклатуры;
			Номенклатура = АналитикаУчетаНоменклатуры.Номенклатура;
			Характеристика = АналитикаУчетаНоменклатуры.Характеристика;
			
			КлючПоиска = Номенклатура.КР_Модель + Номенклатура.КР_Цвет.Код;
			Если ЗначениеЗаполнено(Характеристика) Тогда 
				КлючПоиска = КлючПоиска + Характеристика.КР_Размер.Код;
			КонецЕсли;	    
			
			НоваяСтрока.КодТНВЭД = ДанныеTNVED[КлючПоиска];
			
			// Заполняем вес нетто
			Отбор = Новый Структура("Номенклатура, ДокументПоступления", Номенклатура, ДокументПоступления);
			ВесНеттоТоваров.ПолучитьПоследнее(Объект.Дата, Отбор);
			
			НоваяСтрока.ВесНеттоКг = ВесНеттоТоваров.ВесНетто * НоваяСтрока.Количество; 
			// 
			
		КонецЦикла;
						
	КонецЦикла;

	Возврат Истина;

КонецФункции

#КонецОбласти

#Область ПакетыДанных

Функция ПКО_ПакетДанныхУпаковочныйЛист(XDTOОбъект, МассивОбъектов, СообщениеОбмена)

	МассивОбъектов = Новый Массив;     
	
	Склад = Неопределено;
	
	ОбъектМетаданных = Метаданные.Документы.УпаковочныйЛист;

	ТаблицаЗначений = Новый ТаблицаЗначений;                     
	ТаблицаЗначений.Колонки.Добавить("Короб", Новый ОписаниеТипов("ДокументСсылка.УпаковочныйЛист"));  
	// CardBoxesList
	Если Не ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.CardBoxesList, ТаблицаЗначений, СообщениеОбмена) Тогда 
		Возврат Ложь;
	КонецЕсли;	
		
	УпаковочныеЛисты = ТаблицаЗначений.ВыгрузитьКолонку("Короб");   
	
	// Свернем во избежание ситуации когда один и тот же документ поподет в список по гуиду и номеру   
	// Такое может быть при невалидных данных от отправляющей стороны 
	// NB: Место для рефакторинга логики, возможно следует проверять на такие ситуации
	УпаковочныеЛисты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(УпаковочныеЛисты);  
	Если Не ЗначениеЗаполнено(УпаковочныеЛисты) Тогда 
		ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(ОбъектМетаданных);
		ТекстСообщения = НСтр("ru = 'Ошибка заполнения списка упаковочных листов'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);
		Возврат Ложь;
	КонецЕсли;
	
	// Получим необходимые реквизиты упаковочных листов
	РеквизитыУпаковочныеЛисты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(УпаковочныеЛисты, "СкладУпаковки, КР_ДокументОснование, Проведен"); 	
	
	// Упаковочный лист должен быть проведен, КР_ДокументОснование заполнен
	ШаблонСообщенияНеПроведен = НСтр("ru = 'Документ %1 не проведен'");
	ШаблонСообщенияНеЗаполнен = НСтр("ru = 'Не заполнен реквизит ""Документ основание"" документа %1'");   

	ДокументыПоступления = Новый Соответствие;
	ЕстьОшибки = Ложь;
	Для Каждого КлючЗначение Из РеквизитыУпаковочныеЛисты Цикл 
		
		Ссылка = КлючЗначение.Ключ;
		УпаковочныйЛистРеквизиты = КлючЗначение.Значение; 
		ДокументПоступления = УпаковочныйЛистРеквизиты.КР_ДокументОснование;
		
		ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(ОбъектМетаданных, Ссылка);
		Если Не УпаковочныйЛистРеквизиты.Проведен Тогда 
			
			ТекстСообщения = СтрШаблон(ШаблонСообщенияНеПроведен, Ссылка);
			ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(ОбъектМетаданных, Ссылка);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);
			ЕстьОшибки = Истина;      
			
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДокументПоступления) Тогда 
			
			ТекстСообщения = СтрШаблон(ШаблонСообщенияНеЗаполнен, Ссылка);
			ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(ОбъектМетаданных, Ссылка);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);
			ЕстьОшибки = Истина;    
			
			Продолжить;
		КонецЕсли;
		
		Если Склад = Неопределено Тогда 
			Склад = ДокументПоступления.Склад;
		КонецЕсли;	
		
		// 
		УпаковочныеЛисты = ДокументыПоступления[ДокументПоступления];
		Если УпаковочныеЛисты = Неопределено Тогда 
			
			УпаковочныеЛисты = Новый Массив;
			ДокументыПоступления[ДокументПоступления] = УпаковочныеЛисты;
			
		КонецЕсли;
		УпаковочныеЛисты.Добавить(Ссылка);
		
	КонецЦикла;   
	
	Если ЕстьОшибки Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	СформироватьДокументыОприходованияПоПоступлениям(
		XDTOОбъект, Склад.КР_ИспользоватьРазмещениеКакПриходныйОрдер, МассивОбъектов, ДокументыПоступления, СообщениеОбмена);
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_GoodsRelocationOrderCompletionObjectВЗаказа(XDTOОбъект, Объект, СообщениеОбмена)
		
	Склад = Неопределено;
	Если Не ПКО_XDTOВСсылку(XDTOОбъект.Storehouse, Склад, СообщениеОбмена) Тогда 
		Возврат Ложь;
	КонецЕсли;	    
	
	// Получим данные по упаковочным листам
	ТаблицаЗначений = Новый ТаблицаЗначений;                     
	ТаблицаЗначений.Колонки.Добавить("Короб", Новый ОписаниеТипов("ДокументСсылка.УпаковочныйЛист"));  
	// CardBoxesList
	Если Не ПКО_XDTOВТабличнуюЧасть(XDTOОбъект.CardBoxesList, ТаблицаЗначений, СообщениеОбмена) Тогда 
		Возврат Ложь;
	КонецЕсли;	
		
	УпаковочныеЛисты = ТаблицаЗначений.ВыгрузитьКолонку("Короб");   
	
	// Свернем во избежание ситуации когда один и тот же документ поподет в список по гуиду и номеру   
	// Такое может быть при невалидных данных от отправляющей стороны 
	// NB: Место для рефакторинга логики, возможно следует проверять на такие ситуации
	УпаковочныеЛисты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(УпаковочныеЛисты);  
	Если Не ЗначениеЗаполнено(УпаковочныеЛисты) Тогда 
		ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(
			Метаданные.Документы.УпаковочныйЛист);
		ТекстСообщения = НСтр("ru = 'Ошибка заполнения списка упаковочных листов'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);
		Возврат Ложь;
	КонецЕсли;    
	
	СтатусЗаказаКУстановке = Неопределено;
	
	// Определим тип заказа с которым будем работать
	НастройкиПоиска = ПараметрыПоискаСсылки();
	Если СкладСвязанСМаркетплейсом(Склад) Тогда 
		ЭтоЗаказНаПеремещение = Ложь;
		НастройкиПоиска.ИмяТипаXDTO = "ClientOrderRef";                   
		СтатусЗаказаКУстановке = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
		СтатусЗаказаЗакрыт = Перечисления.СтатусыЗаказовКлиентов.Закрыт;  
	Иначе
		ЭтоЗаказНаПеремещение = Истина;
		СтатусЗаказаЗакрыт = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	КонецЕсли;		
	
	Заказ = Неопределено;
	Если Не ПКО_XDTOВСсылку(XDTOОбъект.GoodsRelocationOrder, Заказ, СообщениеОбмена, НастройкиПоиска) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Объект = Заказ.ПолучитьОбъект();  
	
	Если Объект.Статус = СтатусЗаказаЗакрыт Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатусЗаказаКУстановке) Тогда 
		Объект.Статус = СтатусЗаказаКУстановке;
	КонецЕсли;	
	
	ОтборМаркированныйТовар = Неопределено; 
	ОтборАксессуары = Ложь;
	
	Если XDTOОбъект.PickedGoodsType = Неопределено Тогда 
		ОтборАксессуары = Неопределено;
		Объект.КР_СобранМаркируемыйТовар = Истина;
		Объект.КР_СобранНеМаркируемыйТовар = Истина;
		Если ЭтоЗаказНаПеремещение Тогда  
			Объект.КР_СобраныАксессуары = Истина;   
		КонецЕсли;	
	ИначеЕсли XDTOОбъект.PickedGoodsType = "Marked" Тогда 
		Объект.КР_СобранМаркируемыйТовар = Истина;
		ОтборМаркированныйТовар = Истина; 
	ИначеЕсли XDTOОбъект.PickedGoodsType = "UnMarked" Тогда	
		Объект.КР_СобранНеМаркируемыйТовар = Истина;
		ОтборМаркированныйТовар = Ложь; 
	ИначеЕсли XDTOОбъект.PickedGoodsType = "Accessories" Тогда   
		
		Если ЭтоЗаказНаПеремещение Тогда  
			Объект.КР_СобраныАксессуары = Истина;   
			ОтборАксессуары = Истина;
		Иначе
			Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка();
			ТекстСообщения = НСтр("ru = 'Получен пакет ""GoodsRelocationOrderCompletionObject"" по складу маркетплейса, "
				+ "где свойство PickedGoodsType = ""Accessories"", данное сочетание реквизитов считается ошибочным "
				+ "обратитесь к разработчику'");
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, Ошибка); 
			Возврат Ложь;
		КонецЕсли;	
	Иначе
		Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка();
		ТекстСообщения = НСтр("ru = 'Передано не доступное значение свойства PickedGoodsType = ""%1"". "
			+ "Возможные варианты ""Marked/UnMarked/Accessories"" либо не заполнено'");    
		ТекстСообщения = СтрШаблон(ТекстСообщения, XDTOОбъект.PickedGoodsType);	
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, Ошибка);
		Возврат Ложь;
	КонецЕсли;		                        
	
	Если ЭтоЗаказНаПеремещение Тогда  
		
		// #4778.. Фомин Д.Ю. 26.09.2024.
		Если XDTOОбъект.Posted = Истина Тогда
			Объект.Статус = СтатусЗаказаЗакрыт;	
		КонецЕсли;	
		// ..#4778
		
	Иначе	
		ОтборАксессуары = Неопределено;
	КонецЕсли;	
	
	Товары = Объект.Товары;  
	
	// Получим товары упаковочных листов 
	// Получим товары заказа с аналогичным отбором
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаТоварыУпаковочныхЛистовСДетализациейПоКоробу(
		ОтборМаркированныйТовар, ОтборАксессуары));
	ТекстыЗапросов.Добавить(ТекстЗапросаСтрокиСУчетомОтбораМаркировкаАксессуары(ОтборМаркированныйТовар, ОтборАксессуары));
	
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов()));
	Запрос.УстановитьПараметр("УпаковочныеЛисты", УпаковочныеЛисты);
	Запрос.УстановитьПараметр("Аксессуары", 
		КР_ДополнительныеНастройкиПовтИсп.Значение("ГруппаВидовНоменклатурыАксессуаров"));   
	Запрос.УстановитьПараметр("ТабличнаяЧасть", Товары);	
	РезультатЗапроса = Запрос.ВыполнитьПакет();    
	
	ИндексПоследнегоРезультата = РезультатЗапроса.ВГраница();
	
	// Для качала отменим все строки и очистим короб (упрощаем алгоритм)
	ВыборкаСтроки = РезультатЗапроса[ИндексПоследнегоРезультата].Выбрать();  
	Пока ВыборкаСтроки.Следующий() Цикл
		СтрокаДанных = Товары[ВыборкаСтроки.ИндексСтроки]; 
		СтрокаДанных.Отменено = Истина;
		СтрокаДанных.КР_Короб = Неопределено;
	КонецЦикла;	
	
	// Распределим с восстановлением/добавлением строк с запонением коробов 
	// Данные сгруппированы по номенклатуре/характеристике. В деталях короб и количество
	ОтборСтрок = Новый Структура("Номенклатура,Характеристика");
	ВыборкаГруппировка = РезультатЗапроса[ИндексПоследнегоРезультата - 2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);  
	Пока ВыборкаГруппировка.Следующий() Цикл    
		
		ЗаполнитьЗначенияСвойств(ОтборСтрок, ВыборкаГруппировка);
		НайденныеСтроки = Товары.НайтиСтроки(ОтборСтрок); 
		
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда 
			Продолжить;
		КонецЕсли;	
		
		ИтераторИндексаСтроки = 0;
		
		// Детализация по коробам
		ВыборкаДетальныеЗаписи = ВыборкаГруппировка.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			
			КРаспределению = ВыборкаДетальныеЗаписи.Количество;
			
			Пока КРаспределению > 0 
				И ИтераторИндексаСтроки <= НайденныеСтроки.ВГраница() Цикл 
				
				СтрокаДанных = НайденныеСтроки[ИтераторИндексаСтроки];
				ИтераторИндексаСтроки = ИтераторИндексаСтроки + 1;
				
				Распределить = Мин(КРаспределению, СтрокаДанных.Количество); 
				КРаспределению = КРаспределению - Распределить;
				
				// Восстанавливаем строку, устанавливаем короб
				СтрокаДанных.Отменено = Ложь;
				СтрокаДанных.КР_Короб = ВыборкаДетальныеЗаписи.УпаковочныйЛист;   
				
				Разница = (Распределить - СтрокаДанных.Количество);
				Если Разница < 0 Тогда 
					
					СтрокаДанных.Упаковка = Неопределено;
					
					// Делим строки.   
					ИндексТекущейСтроки = Товары.Индекс(СтрокаДанных);
					НоваяСтрока = Товары.Вставить(ИндексТекущейСтроки + 1);    
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
					//НоваяСтрока.КодСтроки = Неопределено;
					НоваяСтрока.Отменено = Истина;
					НоваяСтрока.КР_Короб = Неопределено;  
					
					// Правим количество
					СтрокаДанных.Количество = Распределить;
					СтрокаДанных.КоличествоУпаковок = СтрокаДанных.Количество;

					НоваяСтрока.Количество = -Разница; 
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
					
					// Вставляем новую строку для обработки ниже текущей (ранее итератор уже смещен на +1)
					НайденныеСтроки.Вставить(ИтераторИндексаСтроки, НоваяСтрока);
					
				КонецЕсли;					
				
			КонецЦикла;
			
		КонецЦикла;	
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Функция ПКО_ПакетДанныхПриобретениеТоваровУслугСДетализациейПоЗаказам(XDTOОбъект, Объект, СообщениеОбмена)
	
	Склад = КР_ДополнительныеНастройкиПовтИсп.Значение("СкладПоступления");

	// Получаем договор контрагента.
	// На основании него будем создавать заказы и приобретение товаров
	ДоговорКонтрагента = Неопределено;          
		
	// Если не нашли договор то ничего не делаем
	// << 17.06.2024 Петухов А.В., Фактор, #4176
	//Если Не ПКО_XDTOВСсылку(XDTOОбъект.CounterpartyAgreement, ДоговорКонтрагента, СообщениеОбмена) Тогда 
	сткНастройкиПоиска = ПараметрыПоискаСсылки();
	сткНастройкиПоиска.Вставить("ДополнительныеПоляПоиска", "ПометкаУдаления=#Ложь");
	Если Не ПКО_XDTOВСсылку(XDTOОбъект.CounterpartyAgreement, ДоговорКонтрагента, СообщениеОбмена, сткНастройкиПоиска) Тогда
	// >> 17.06.2024 Петухов А.В., Фактор, #4176
		Возврат Ложь;
	КонецЕсли;	   
		
	// Информация о заказах находится в табличной части документа Goods в поле Lot (номер заказа)
	// Если Lot не заполнен то товар не привязан к заказу
	// Скомпануем информацию по товарам по значению Lot
	// При этом сохраним индекс исходной строки пакета так как он нам понадобится  
	//	для получения ссылок по номенклатуре/характеристике при обработке результата пакетного поиска   
	ГруппировкаПоЛотам = Новый Соответствие; 
	Итератор = 0; 
	МассивЗаказов = Новый Массив;
	Для Каждого СтрокаСпискаXDTO Из XDTOОбъект.Goods.Row Цикл  
		
		НомерЗаказа = СтрокаСпискаXDTO.Lot;
		СтрокаДанных = ГруппировкаПоЛотам[НомерЗаказа];
		Если СтрокаДанных = Неопределено Тогда 
			
			СтрокаДанных = Новый Соответствие;
			ГруппировкаПоЛотам[НомерЗаказа] = СтрокаДанных;  
			
		КонецЕсли;	                                              
		
		СтрокаДанных[Итератор] = СтрокаСпискаXDTO;      
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	// Получим существующие / создадим новые заказы 
	// Если есть ошибки то выходим 
	Если Не ПолучитьЗаказыПоНомерамПоставщика(XDTOОбъект, ДоговорКонтрагента, ГруппировкаПоЛотам, СообщениеОбмена) Тогда 
		Возврат Ложь;
	КонецЕсли;	
		
	// Создаем / получаем Приобретение товаров по GUID
	Объект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументыИнициализироватьОбъект(
		"ПриобретениеТоваровУслуг", XDTOОбъект);
	Объект.Товары.Очистить();
	
	// A2105505-1584
	КР_ОбщегоНазначениеСервер.ДокументОбъектОчистить(Объект);
	
	// Настоятельное требование отключить проверки на уход в минус по регистру ЗаказыПоставщикам 
	// Консультант предупрежден о возможных последствиях 
	// Согласование ФА получено.	
	Объект.Движения.ЗаказыПоставщикам.ОбменДанными.Загрузка = Истина;
    //
	
	// Заполняем на основании договора
	ОснованиеПриобретения = Новый Структура;
	ОснованиеПриобретения.Вставить("ДокументОснование", ДоговорКонтрагента);
	ОснованиеПриобретения.Вставить("СкладПоступления", Склад);   
	Объект.Заполнить(ОснованиеПриобретения);
	
	// Конвертируем всю номенклатуру и характеристики пакетно
	НоменклатураХарактеристикаСсылки = Неопределено;
	Если Не ПКО_XDTOВСсылкуНоменклатураХарактеристикаПакетно(
		XDTOОбъект.Goods.Row, НоменклатураХарактеристикаСсылки, СообщениеОбмена) Тогда  
		Возврат Ложь;
	КонецЕсли;	

	// Определим заказ для строк без заказа	
	ЗаказДляСтрокБезЗаказа = Неопределено;	
	Для Каждого ГруппировкаПоЛоту Из ГруппировкаПоЛотам Цикл 
		Если ГруппировкаПоЛоту.Ключ <> "" Тогда 
			ЗаказДляСтрокБезЗаказа = ПолучитьУстановитьСсылкуСУчетомНового(ГруппировкаПоЛоту.Ключ);
			Прервать;	
		КонецЕсли;	
	КонецЦикла;
	
	Объект.ПоступлениеПоЗаказам = ЗначениеЗаполнено(ЗаказДляСтрокБезЗаказа);
	Объект.ЦенаВключаетНДС = XDTOОбъект.PriceIncludesVAT;    
	ПКО_XDTOВСсылку(XDTOОбъект.Currency, Объект.Валюта, СообщениеОбмена);
	Объект.Комментарий = XDTOОбъект.Comment;
	
	// Заполняем товарную часть документов
	Для Каждого ГруппировкаПоЛоту Из ГруппировкаПоЛотам Цикл 
		
		ЗаказОбъект = ГруппировкаПоЛоту.Ключ;
		ДанныеСпискаXDTO = ГруппировкаПоЛоту.Значение;
		
		ПоступлениеПоЗаказу = ЗаказОбъект <> "";
			
		Если ПоступлениеПоЗаказу Тогда    
			ЗаказСсылка = ПолучитьУстановитьСсылкуСУчетомНового(ЗаказОбъект);	
		Иначе
			ЗаказСсылка = ЗаказДляСтрокБезЗаказа;
		КонецЕсли;
		
		КэшированныеЗначения = Неопределено;
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		ПараметрыЗаполненияСтавкиНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);
		Для Каждого КлючЗначение Из ДанныеСпискаXDTO Цикл 
			
			ИндексСтрокиИсходныхДанных = КлючЗначение.Ключ;
			СтрокаСпискаXDTO = КлючЗначение.Значение; 
			
			// Заполняем номенклатуру и характеристику
			// A2105505-1867 Переопределена логика метода получения ссылок
			// Упрощаем логику, берем только первый элемент 
			Ссылки = НоменклатураХарактеристикаСсылки[ИндексСтрокиИсходныхДанных][0];
			
			ДанныеСтроки = Новый Структура;
			ДанныеСтроки.Вставить("Номенклатура", Ссылки.Номенклатура); 
			ДанныеСтроки.Вставить("Характеристика", Ссылки.Характеристика);
		
			ДанныеСтроки.Вставить("Количество", СтрокаСпискаXDTO.Quantity);
			ДанныеСтроки.Вставить("КоличествоУпаковок", СтрокаСпискаXDTO.Quantity);
			ДанныеСтроки.Вставить("Цена", СтрокаСпискаXDTO.Price);
			ДанныеСтроки.Вставить("Сумма", СтрокаСпискаXDTO.Sum);  			
			
			ДанныеСтроки.Вставить("ДатаПоступления", XDTOОбъект.DocDate);     
			ДанныеСтроки.Вставить("Склад", Склад);
			ДанныеСтроки.Вставить("ИдентификаторСтроки", СтрокаСпискаXDTO.Key);  
			
			ДанныеСтроки.Вставить("КР_ВесБрутто", СтрокаСпискаXDTO.GrossWeight);
			ДанныеСтроки.Вставить("КР_ВесНетто", СтрокаСпискаXDTO.NetWeight);
			
			//
			ДанныеСтроки.Вставить("СтавкаНДС");
			ДанныеСтроки.Вставить("СуммаНДС");
			ДанныеСтроки.Вставить("СуммаСНДС");
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполненияСтавкиНДС);
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, КэшированныеЗначения);
            //
			
			// Заполняем товары приобретения
			СтрокаПриобретения = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриобретения, ДанныеСтроки);   
			
			// В строке приобретения проставляем связь с заказом
			СтрокаПриобретения.ЗаказПоставщику = ЗаказСсылка; 
			
			Если ПоступлениеПоЗаказу Тогда   
				
				// Заполняем строку заказа
				ЗаказОбъект.МаксимальныйКодСтроки = ЗаказОбъект.МаксимальныйКодСтроки + 1;
				СтрокаЗаказа = ЗаказОбъект.Товары.Добавить();
			    СтрокаЗаказа.КодСтроки = ЗаказОбъект.МаксимальныйКодСтроки;
				ЗаполнитьЗначенияСвойств(СтрокаЗаказа, ДанныеСтроки);
				
				// В строке приобретения проставляем связь по коду строки
				СтрокаПриобретения.КодСтроки = СтрокаЗаказа.КодСтроки; 
				
			КонецЕсли;	
			
		КонецЦикла;	

		Если ПоступлениеПоЗаказу Тогда   
			ЗаказОбъект.Проведен = XDTOОбъект.Posted;
			ЗаказОбъект.ПометкаУдаления = XDTOОбъект.DeletionMark;
			
			// A2105505-1584
			// Настоятельное требование отключить проверки на уход в минус по регистру ЗаказыПоставщикам 
			// Консультант предупрежден о возможных последствиях 
			// Согласование ФА получено.	
			ЗаказОбъект.Движения.ЗаказыПоставщикам.ОбменДанными.Загрузка = Истина;
			//
			
			КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(ЗаказОбъект, СообщениеОбмена, СвойствоОбъектБылЗагружен());
		КонецЕсли;
				
	КонецЦикла;		
	
	// Пометим на удаление заказы которые ранее были указаны в приобретении, а теперь нет
	// При этом мы не будем учитывать что такой заказ мог быть размещен в нескольких приобретениях
	//	либо участвовал в других документах (см. ФДР)
	ПометитьНаУдалениеНеАктуальныеЗаказыПоПриобретению(Объект);
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_ПакетДанныхSetObjectВСоставСета(XDTOОбъект, СтрокаДанные, СообщениеОбмена)  

	Номенклатура = СтрокаДанные.Номенклатура;
	Характеристика = СтрокаДанные.Характеристика;
	Количество = СтрокаДанные.Количество;
	
	// Читаем данные из БД
	Запись = РегистрыСведений.КР_СоставСета.СоздатьМенеджерЗаписи();
	Запись.Номенклатура = Номенклатура;
	Запись.Характеристика = Характеристика;
	Запись.Прочитать();
	
	Ref = XDTOОбъект.Ref;
	Если ЗначениеЗаполнено(Запись.GUID) 
		И Запись.GUID <> Ref Тогда 
		
		ОбъектМетаданные = Метаданные.РегистрыСведений.КР_СоставСета;
		
		ТекстСообщения = НСтр("ru = 'Не совпадает GUID записи %1 с Ref XDTO-объекта %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Запись.GUID, Ref);
		
		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(ОбъектМетаданные); 
		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);

		Возврат Ложь;		
	КонецЕсли;	
	
	Если XDTOОбъект.DeletionMark Тогда 
		Запись.Удалить();
	Иначе
		Запись.GUID = Ref;
		Запись.Активность = Истина;
		Запись.Номенклатура = Номенклатура;
		Запись.Характеристика = Характеристика;
		Запись.Количество = Количество;
		
		// A2105505-1337
		ЭтоНоваяЗапись = Запись.Выбран();
		Комментарии = Новый Массив;
		Если Не ЭтоНоваяЗапись Тогда 
			Комментарии.Добавить(Запись.Комментарий);
		КонецЕсли;      
		
		ТекстКомментария = НСтр("ru = '%1 %2. Ключ сообщения: """"%3""""'");  
		ТекстКомментария = СтрШаблон(ТекстКомментария, 
			Формат(ЭтоНоваяЗапись, "БЛ='Запись изменена'; БИ='Новая запись'"), 
			ТекущаяДатаСеанса(), 
			СообщениеОбмена.КлючСообщения
		);
			
		Комментарии.Добавить(ТекстКомментария);
		Запись.Комментарий = СтрСоединить(Комментарии, Символы.ПС);
		//
		
		Запись.Записать();  
		
	КонецЕсли;	

	Возврат Истина;	
	
КонецФункции

Функция ПКО_ПакетДанныхSetObjectВСоставКонтейнера(XDTOОбъект, Номенклатура, СообщениеОбмена)  
	
	Контейнер = Неопределено;
	Если Не ПКО_XDTOВСсылку(XDTOОбъект.Container, Контейнер, СообщениеОбмена) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	// Читаем данные из БД
	Запись = РегистрыСведений.КР_СоставКонтейнера.СоздатьМенеджерЗаписи();
	Запись.Контейнер = Контейнер;
	Запись.Номенклатура = Номенклатура;
	Запись.Прочитать();
	
	Ref = XDTOОбъект.Ref;
	Если ЗначениеЗаполнено(Запись.GUID) 
		И Запись.GUID <> Ref Тогда 
		
		ОбъектМетаданные = Метаданные.РегистрыСведений.КР_СоставКонтейнера;
		
		ТекстСообщения = НСтр("ru = 'Не совпадает GUID записи %1 с Ref XDTO-объекта %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Запись.GUID, Ref);
		
		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(ОбъектМетаданные); 
		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);

		Возврат Ложь;		
	КонецЕсли;	

	Если XDTOОбъект.DeletionMark Тогда 
		Запись.Удалить();
	Иначе
		Запись.GUID = Ref;
		Запись.Активность = Истина;
		Запись.Контейнер = Контейнер;
		Запись.Номенклатура = Номенклатура;
		Запись.КоличествоСетов = XDTOОбъект.SetQuantity;      
		
		// A2105505-1337
		ЭтоНоваяЗапись = Запись.Выбран();
		Комментарии = Новый Массив;
		Если Не ЭтоНоваяЗапись Тогда 
			Комментарии.Добавить(Запись.Комментарий);
		КонецЕсли;      
		
		ТекстКомментария = НСтр("ru = '%1 %2. Ключ сообщения: """"%3""""'");  
		ТекстКомментария = СтрШаблон(ТекстКомментария, 
			Формат(ЭтоНоваяЗапись, "БЛ='Запись изменена'; БИ='Новая запись'"), 
			ТекущаяДатаСеанса(), 
			СообщениеОбмена.КлючСообщения
		);
			
		Комментарии.Добавить(ТекстКомментария);
		Запись.Комментарий = СтрСоединить(Комментарии, Символы.ПС);
		//
		
		Запись.Записать();      
		
	КонецЕсли;	

	Возврат Истина;	
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрочиеМетоды

Процедура GoodsRelocationObjectВДокументы(СообщениеОбмена)
	
	// Получаем пакет
	XDTOОбъект = СообщениеОбмена.Данные;	
			
	// Проверим на критические ошибки
	Если XDTOОбъект.InsideShop
		И XDTOОбъект.ToTradingHall = Неопределено Тогда 

		ТекстСообщения = НСтр("ru = 'В пакете интеграции ""GoodsRelocationObject"" с данными по перемещению "
			+ "между зонами магазина не заполнено направление перемещения'");
		
		ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка();
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);
			
	КонецЕсли;
		
	СоздаватьРасходныйОрдер = Ложь;
	СоздаватьПриходныйОрдер = Ложь;  
	МассивПеремещений = Новый Массив;
	
	Если XDTOОбъект.InsideShop Тогда  

		ОтборРазмещениеТоваровОбъект = Неопределено;
		Если Не ПКО_GoodsRelocationObjectВоВнутреннееПеремещениеТоваров(XDTOОбъект, 
				ОтборРазмещениеТоваровОбъект, СообщениеОбмена)
			Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
				ОтборРазмещениеТоваровОбъект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
							
			Возврат;
		КонецЕсли;
	
	Иначе

		// Определяем склад получателя
		СкладПолучатель = Неопределено;
		Если Не ПКО_XDTOВСсылку(XDTOОбъект.StorehousePut, СкладПолучатель, СообщениеОбмена) Тогда 	
			Возврат;
		КонецЕсли;	
		
		Если Не СкладСвязанСМаркетплейсом(СкладПолучатель) Тогда 

			Если ПКО_ПеремещениеТоваров(XDTOОбъект, МассивПеремещений, СообщениеОбмена) Тогда 
				
				ЕстьОшибкиЗаписи = Ложь;
				
				Для Каждого ПеремещениеОбъект Из МассивПеремещений Цикл 
					Если Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
						ПеремещениеОбъект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 				
						ЕстьОшибкиЗаписи = Истина;
					КонецЕсли;	
				КонецЦикла;
				
				Если ЕстьОшибкиЗаписи Тогда 
					Возврат;
				КонецЕсли;	

			КонецЕсли;
			
			СоздаватьРасходныйОрдер = XDTOОбъект.CreateStorehouseOrders;
			СоздаватьПриходныйОрдер = XDTOОбъект.CreateStorehouseOrders;  
			
		Иначе
			
			ПередачаТоваровХранителюОбъект = Неопределено;
			Если Не ПКО_ПередачаТоваровХранителю(XDTOОбъект, ПередачаТоваровХранителюОбъект, СообщениеОбмена)
				Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
					ПередачаТоваровХранителюОбъект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
				
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Для каждого перемещения
	Для Каждого ПеремещениеОбъект Из МассивПеремещений Цикл 

		// CreateStorehouseOrders = истина 
		РасходныйОрдерОбъект = Неопределено;   
		Если СоздаватьРасходныйОрдер 
			И РасходныйОрдерНаТоварыСоздатьНаОсновании(XDTOОбъект, 
				ПеремещениеОбъект, РасходныйОрдерОбъект, СообщениеОбмена) Тогда 
			Если Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
				РасходныйОрдерОбъект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 					
				Возврат;    
			КонецЕсли;	
		КонецЕсли;         
		
		ПриходныйОрдерОбъект = Неопределено;
		Если СоздаватьПриходныйОрдер
			И Не СкладПолучатель.КР_ИспользоватьРазмещениеКакПриходныйОрдер
			И (Не ПриходныйОрдерНаТоварыСоздатьНаОсновании(XDTOОбъект, 
				ПеремещениеОбъект, ПриходныйОрдерОбъект, СообщениеОбмена)
				Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
					ПриходныйОрдерОбъект, СообщениеОбмена, СвойствоОбъектБылЗагружен())) Тогда 
					
			Возврат;
		КонецЕсли; 
		
		МассивРазмещений = Неопределено;
		Если СоздаватьПриходныйОрдер
			И СкладПолучатель.КР_ИспользоватьРазмещениеКакПриходныйОрдер
			И ПКО_GoodsRelocationObjectВРазмещенияТоваров(XDTOОбъект, ПеремещениеОбъект, МассивРазмещений, СообщениеОбмена) 
			Тогда 

			ЕстьОшибкиЗаписи = Ложь;
			Для Каждого ОтборРазмещениеТоваровОбъект Из МассивРазмещений Цикл 
				Если Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(
					ОтборРазмещениеТоваровОбъект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда  
					ЕстьОшибкиЗаписи = Истина;
				КонецЕсли;
			КонецЦикла;	
			
			Если ЕстьОшибкиЗаписи Тогда 
				Возврат;
			КонецЕсли;	
			
		Иначе		
			Возврат;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТипЗначенияПоТипуXDTO(ИмяТипаXDTO)
	
	СоответствиеТипов = Новый Соответствие;  
	
	// Справочники
	СоответствиеТипов["OrganizationRef"] = Тип("СправочникСсылка.Организации");
	СоответствиеТипов["ClientRef"] = Тип("СправочникСсылка.Контрагенты");
	СоответствиеТипов["ClientAgreementRef"] = Тип("СправочникСсылка.ДоговорыКонтрагентов");
	СоответствиеТипов["StorehouseRef"] = Тип("СправочникСсылка.Склады");
	СоответствиеТипов["DepartmentRef"] = Тип("СправочникСсылка.СтруктураПредприятия");
	СоответствиеТипов["UserRef"] = Тип("СправочникСсылка.Пользователи");
	СоответствиеТипов["IndividualRef"] = Тип("СправочникСсылка.ФизическиеЛица");
	СоответствиеТипов["VehicleRef"] = Тип("СправочникСсылка.ТранспортныеСредства");
	СоответствиеТипов["CashierRef"] = Тип("СправочникСсылка.Кассы");
	СоответствиеТипов["CashierKKMRef"] = Тип("СправочникСсылка.КассыККМ");
	СоответствиеТипов["CurrencyRef"] = Тип("СправочникСсылка.Валюты");
	СоответствиеТипов["PriceTypeRef"] = Тип("СправочникСсылка.ВидыЦен");
	СоответствиеТипов["ContainerRef"] = Тип("СправочникСсылка.КР_Контейнеры");
	СоответствиеТипов["CountryRef"] = Тип("СправочникСсылка.СтраныМира");
	СоответствиеТипов["CashFlowItemRef"] = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
		
	// Документы
	СоответствиеТипов["ClientOrderRef"] = Тип("ДокументСсылка.ЗаказКлиента");
	СоответствиеТипов["GoodsRelocationOrderRef"] = Тип("ДокументСсылка.ЗаказНаПеремещение");
	СоответствиеТипов["GoodsRelocationRef"] = Тип("ДокументСсылка.ПеремещениеТоваров");
	СоответствиеТипов["GoodsOutcomeOrderRef"] = Тип("ДокументСсылка.РасходныйОрдерНаТовары");
	СоответствиеТипов["ReceiptGoodsServicesRef"] = Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
	СоответствиеТипов["BoxRef"] = Тип("ДокументСсылка.УпаковочныйЛист");
	СоответствиеТипов["ShipmentOrderRef"] = Тип("ДокументСсылка.ЗаданиеНаПеревозку");
	СоответствиеТипов["InventoryCountSheetRef"] = Тип("ДокументСсылка.ПересчетТоваров");
	СоответствиеТипов["PurchaseGoodsAndServicesRef"] = Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
	СоответствиеТипов["GoodsToMarketplaceTransferObjectRef"] = Тип("ДокументСсылка.ПередачаТоваровХранителю");
// << 03.11.2023 Петухов А.В., Фактор, #3226
	СоответствиеТипов["InventoryWriteOffRequestObject"] = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление");
	СоответствиеТипов["InventoryCountSheetObject"] = Тип("ДокументСсылка.ПересчетТоваров");
	СоответствиеТипов["CashReceiptVoucherObject"] = Тип("ДокументСсылка.ПриходныйКассовыйОрдер");
	СоответствиеТипов["CashPaymentVoucherObject"] = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
// >> 03.11.2023 Петухов А.В., Фактор, #3226

	Возврат СоответствиеТипов[ИмяТипаXDTO];
	
КонецФункции   

Функция ПолучитьАлгоритмПоискаЗначенияПоТипуXDTO(ИмяТипаXDTO)

	СоответствиеПолейПоиска = Новый Соответствие;  
	
	// Справочники
	СоответствиеПолейПоиска["OrganizationRef"] = "ИНН=INN,КПП=KPP";
	СоответствиеПолейПоиска["ClientRef"] = "АлгоритмПоискаПоПолямСсылкаКонрагенты";
	СоответствиеПолейПоиска["ClientAgreementRef"] = "АлгоритмПоискаПоПолямСсылкаДоговорыКонтрагентов";
	СоответствиеПолейПоиска["CurrencyRef"] = "АлгоритмПоискаПоПолямСсылкаВалюты";
	СоответствиеПолейПоиска["ContainerRef"] = "Наименование=ContainerID";
	СоответствиеПолейПоиска["CountryRef"] = "КодАльфа2=Alpha2";
	// << 20.09.2023 Петухов А.В., Фактор, #3128
	СоответствиеПолейПоиска["PriceTypeRef"] = "Наименование=Name";
	// >> 20.09.2023 Петухов А.В., Фактор, #3128
	// << 26.03.2024 Петухов А.В., Фактор, #3763
	СоответствиеПолейПоиска["VehicleRef"] = "Код=Name";
	// >> 26.03.2024 Петухов А.В., Фактор, #3763
		
	// Документы
	СоответствиеПолейПоиска["BoxRef"] = "Код=Number";

	Возврат СоответствиеПолейПоиска[ИмяТипаXDTO];
	
КонецФункции  

Функция АлгоритмПоискаПоПолямСсылкаКонрагенты(СсылкаТип, XDTOЗначение, ПоляПоиска, МассивСсылок, СообщениеОбмена)
	
	МассивСсылок = Новый Массив;
	
	// Поэтапно ищем по набору полей поиска.
	// Если нашли - возвращаем Истина. Массив ссылок и поля поиска по которым нашли
	// Если ничего не нашли - продолжаем поиск по следующему составу реквизитов
	
	// Если резидент то ищем по ИНН и КПП
	Если XDTOЗначение.Resident Тогда 
		
		ПоляПоиска = "ИНН=INN,КПП=KPP";
		Если НайтиСсылкиПоПолямПоиска(СсылкаТип, XDTOЗначение, ПоляПоиска, МассивСсылок, СообщениеОбмена) Тогда  
			Возврат Истина;  
		КонецЕсли;	    
		
		Возврат Ложь;
		
	КонецЕсли;	

	МассивПредставленийУловийПоиска = Новый Массив;

	ПоляПоиска = "РегистрационныйНомер=RegistrationNumber";
	Если НайтиСсылкиПоПолямПоиска(СсылкаТип, XDTOЗначение, ПоляПоиска, МассивСсылок, СообщениеОбмена) Тогда  
		Возврат Истина;  
	КонецЕсли;	    
	МассивПредставленийУловийПоиска.Добавить(ПоляПоиска);
	
	ПоляПоиска = "КР_КодПоставщикаZolla=Code";
	Если НайтиСсылкиПоПолямПоиска(СсылкаТип, XDTOЗначение, ПоляПоиска, МассивСсылок, СообщениеОбмена) Тогда  
		Возврат Истина;  
	КонецЕсли;	    
	МассивПредставленийУловийПоиска.Добавить(ПоляПоиска);

	ПоляПоиска = СтрСоединить(МассивПредставленийУловийПоиска, "; ");
	Возврат Ложь;
	
КонецФункции	

Функция АлгоритмПоискаПоПолямСсылкаДоговорыКонтрагентов(СсылкаТип, XDTOЗначение, ПоляПоиска, МассивСсылок, СообщениеОбмена)

	МассивСсылок = Новый Массив;  
	
	// Внешний алгоритм предполагает возврат ПоляПоиска с заполненными данными
	//	т.е. по любому нужно "поискать" договор
	// В итоге в случае если контрагент не будет найден, то получим а сообщения об ошибке:
	//	контрагент не найден и договор не найден
	
	ЗначенияПолейПоиска = Новый Структура("Client,Number", Неопределено, XDTOЗначение.Number);
	ПКО_XDTOВСсылку(XDTOЗначение.Client, ЗначенияПолейПоиска.Client, СообщениеОбмена);	

	// << 17.06.2024 Петухов А.В., Фактор, #4176
	//ПоляПоиска = "Контрагент=Client,Номер=Number"; 
	Если ЗначениеЗаполнено(ПоляПоиска) Тогда
		ПоляПоиска = СтрШаблон("%1,%2",ПоляПоиска,"Контрагент=Client,Номер=Number");
	Иначе
		ПоляПоиска = "Контрагент=Client,Номер=Number";
	КонецЕсли;
	// >> 17.06.2024 Петухов А.В., Фактор, #4176
	Если НайтиСсылкиПоПолямПоиска(СсылкаТип, ЗначенияПолейПоиска, ПоляПоиска, МассивСсылок, СообщениеОбмена) Тогда  
		Возврат Истина;  
	КонецЕсли;	    

	Возврат Ложь;
	
КонецФункции	

Функция АлгоритмПоискаПоПолямСсылкаВалюты(СсылкаТип, XDTOЗначение, ПоляПоиска, МассивСсылок, СообщениеОбмена)

	МассивСсылок = Новый Массив;
	МассивПредставленийУловийПоиска = Новый Массив;
	
	// Ищем по коду
	ПоляПоиска = "Код=Code";
	Если НайтиСсылкиПоПолямПоиска(СсылкаТип, XDTOЗначение, ПоляПоиска, МассивСсылок, СообщениеОбмена) Тогда  
		Возврат Истина;  
	КонецЕсли;	 
	
	// Если не нашли и код = 810 то поищем по коду 643  
	Если XDTOЗначение.Code <> "810" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	МассивПредставленийУловийПоиска.Добавить(ПоляПоиска); 
	
	ПоляПоиска = "Код=Code"; // ПоляПоиска были изменены в НайтиСсылкиПоПолямПоиска 
	НаборЗначенийПолей = Новый Структура("Code", "643");
	Если НайтиСсылкиПоПолямПоиска(СсылкаТип, НаборЗначенийПолей, ПоляПоиска, МассивСсылок, СообщениеОбмена) Тогда  
		Возврат Истина;  
	КонецЕсли;	    
	МассивПредставленийУловийПоиска.Добавить(ПоляПоиска);

	ПоляПоиска = СтрСоединить(МассивПредставленийУловийПоиска, "; ");
	Возврат Ложь;
	
КонецФункции	

Процедура СформироватьЗаписьВЛог_XDTOВСсылку(СсылкаТип, XDTOЗначение, ДополнительныеПараметры, СообщениеОбмена)
	Перем ПоляПоиска;
	
	СсылкаМетаданные = Метаданные.НайтиПоТипу(СсылкаТип);
	ЭтоСправочник = ОбщегоНазначения.ЭтоСправочник(СсылкаМетаданные);
	ЭтоДокумент = Не ЭтоСправочник И ОбщегоНазначения.ЭтоДокумент(СсылкаМетаданные);
	
	Если ЭтоСправочник Тогда 
		ТипОбъектаСтрокой =  НСтр("ru = 'элемент справочника'");  
	ИначеЕсли ЭтоДокумент Тогда 
		ТипОбъектаСтрокой =  НСтр("ru = 'документ'");  
	Иначе     
		ТипОбъектаСтрокой =  НСтр("ru = 'объект'");  
	КонецЕсли;	
	
	// Префикс собщения
	Если Не ДополнительныеПараметры.Свойство("ПоляПоиска", ПоляПоиска) Тогда 
		ТекстСообщения = НСтр("ru = 'Не найден %1 %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ТипОбъектаСтрокой, СсылкаТип);
	ИначеЕсли ДополнительныеПараметры.КоличествоСсылок = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не найден %1 %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ТипОбъектаСтрокой, СсылкаТип);    
	Иначе
		ТекстСообщения = НСтр("ru = 'Найдено %1 ссылки(ок). %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ДополнительныеПараметры.КоличествоСсылок, СсылкаТип);    
	КонецЕсли;	
	
	// Дополняем читабельным уточнением
	Если ТипЗнч(XDTOЗначение) = Тип("Структура")
		И XDTOЗначение.Свойство("Name")
		Или XDTOЗначение.Свойства().Получить("Name") <> Неопределено Тогда 
		ТекстСообщения = СтрШаблон("%1 ""%2""", ТекстСообщения, XDTOЗначение.Name);
	КонецЕсли;
	Если ТипЗнч(XDTOЗначение) = Тип("Структура")
		И XDTOЗначение.Свойство("DocNum")
		Или XDTOЗначение.Свойства().Получить("DocNum") <> Неопределено Тогда 
		ТекстСообщения = СтрШаблон("%1 №%2 от %3", ТекстСообщения, XDTOЗначение.DocNum, XDTOЗначение.DocDate);
	КонецЕсли;	
	
	// Дополняем идентификатором 
	Если ТипЗнч(XDTOЗначение) = Тип("Структура")
		И XDTOЗначение.Свойство("Ref")
		Или XDTOЗначение.Свойства().Получить("Ref") <> Неопределено Тогда 
		ТекстСообщения = СтрШаблон("%1. Уникальный идентификатор ""%2""", ТекстСообщения, XDTOЗначение.Ref);  
	КонецЕсли;
	
	// Дополняем полями поиска
	Если ЗначениеЗаполнено(ПоляПоиска) Тогда 
		ТекстСообщения = СтрШаблон("%1. Поля поиска ""%2""", ТекстСообщения, ПоляПоиска); 
	КонецЕсли;
	
	Если ДополнительныеПараметры.ТипСообщения_Ошибка Тогда 
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_ОшибкаПоискаСсылки(
			СсылкаМетаданные, XDTOЗначение); 
	Иначе 
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибкаПоискаСсылки(
			СсылкаМетаданные, XDTOЗначение);   
	КонецЕсли; 	
						  
	КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
	
КонецПроцедуры	

Процедура СкладПродолжитьЗаполнение(Объект, ЭтоОптовыйСклад)

	// Новым считаем объект как собственно новый объект
	//	так и изменение его типа опт/розница
	ЭтоНовый = Объект.ЭтоНовый()
		Или ЭтоОптовыйСклад <> (Объект.Ссылка.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад);
	
	Если Не ЭтоНовый Тогда
		Возврат;
	КонецЕсли;	

	Если ЭтоОптовыйСклад Тогда 
		
		Объект.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;  
		Объект.РозничныйВидЦены = Неопределено;
		Объект.НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.НеИспользовать;	
		
	Иначе 	
		
		Объект.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;  
		Объект.РозничныйВидЦены = КР_ДополнительныеНастройкиПовтИсп.Значение("ВидЦеныРозничный");			
		Объект.НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ОпределяетсяНастройкамиПомещения;
		
		// Для оптового склада данные реквизиты заполняются пользователем
		Объект.КР_ВидСклада = Перечисления.КР_ВидыСкладов.Магазин;
		
		// A2105505-2043
		//// A2105505-1294    
		//Объект.КР_УчетОстатковКоробов = Истина;
		//Объект.КР_КонтролироватьОстаткиКоробов = Истина;     
		////
		//
		
	КонецЕсли;	
	
	Объект.КР_ИспользоватьРазмещениеКакПриходныйОрдер = Не ЭтоОптовыйСклад;
	Объект.ИспользоватьОрдернуюСхемуПриПоступлении = Не ЭтоОптовыйСклад;
	Объект.КонтролироватьСвободныеОстатки = Не ЭтоОптовыйСклад;
	
	Объект.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости;
	Объект.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку = Ложь;		
	Объект.ИспользоватьСтатусыРасходныхОрдеров = Ложь; 
	Объект.ИспользоватьСтатусыПриходныхОрдеров = Ложь;		 
	Объект.УчитыватьСебестоимостьПоСериям = Ложь; 
    Объект.ИспользоватьАдресноеХранение = Ложь;
	Объект.ИспользоватьАдресноеХранениеСправочно = Ложь;
	Объект.ИспользоватьОрдернуюСхемуПриОтгрузке = Ложь;
	Объект.ИспользоватьСерииНоменклатуры = Ложь;
	Объект.КонтролироватьОперативныеОстатки = Ложь;
	
	// A2105505-1262
	Объект.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = Не ЭтоОптовыйСклад;
	Объект.ИспользоватьСкладскиеПомещения = Не ЭтоОптовыйСклад;
	Объект.ИспользоватьСтатусыПересчетовТоваров = Не ЭтоОптовыйСклад;
	Объект.КР_АдресныйСкладБезордернойОтгрузки = Не ЭтоОптовыйСклад;
	Объект.КР_СкладСПомещениямиБезордернойОтгрузки = Не ЭтоОптовыйСклад;		
	// 
	
КонецПроцедуры	

Процедура РасходныйОрдерНаТоварыПродолжитьЗаполнение(Объект)

	Объект.ВсегоМест = 1;
	Объект.РежимПросмотраПоТоварам = 1;
	Объект.ОтгрузкаПоЗаданиюНаПеревозку = Ложь;    
	
	Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
	
	// Взято из модуля объекта                                     
	// ИнициализироватьДокумент
	Объект.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Объект.Приоритет);
	
	Если СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение, Объект.ДатаОтгрузки) Тогда    
			
		Объект.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(
			Объект.Склад, Объект.Помещение, Объект.ЗонаОтгрузки);
	КонецЕсли;
	
	// ОбработкаЗаполнения
	ПараметрыУказанияСерий = Документы.РасходныйОрдерНаТовары.ПараметрыУказанияСерий(Объект);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ТоварыПоРаспоряжениям); 
	
	Документы.РасходныйОрдерНаТовары.ЗаполнитьОтгружаемыеТоварыПоТоварамПоРаспоряжениям(Объект);
	
	Документы.РасходныйОрдерНаТовары.ЗаполнитьДействиеВСтроках(Объект);
	
	НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект, ПараметрыУказанияСерий.ОтгружаемыеТовары, Ложь); 
	
	Если Не СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение, Объект.ДатаОтгрузки)
		И ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Документы.РасходныйОрдерНаТовары.РазбитьПоУпаковкамСправочно(Объект);
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ОтгружаемыеТовары); 
	
КонецПроцедуры	

Процедура GoodsOutcomeOrderObjectВОтборТоваровПродолжитьЗаполнение(Объект)

	Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор;
	
	Объект.Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеСкладМагазина(
		Объект.Склад, Объект.Дата);   
	Объект.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.КР_СкладскаяЯчейкаОтгрузкиПоУмолчанию(
		Объект.Склад, Объект.Помещение);

	Объект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
	Объект.ДатаНачалаВыполнения	= Объект.Дата;
	Объект.ДатаОкончанияВыполнения	= Объект.Дата;	 
	Объект.КР_ИспользоватьКороб = Истина;
	Объект.КР_ПотоварнаяПриемкаБезВскрытияКороба = Истина;
	
    Объект.ТоварыРазмещение.Очистить();
	
// << 01.11.2023 Петухов А.В., Фактор, #3190
	//Ячейка = Справочники.СкладскиеЯчейки.КР_СкладскаяЯчейкаОтгрузкиПоУмолчанию(
	//	Объект.Склад, Объект.Помещение);		
	Ячейка = Справочники.СкладскиеЯчейки.КР_ПолучитьЯчейкуТорговогоЗала(
		Объект.Склад, Ложь);		
// >> 01.11.2023 Петухов А.В., Фактор, #3190
		
	Для Каждого СтрокаДанных Из Объект.ТоварыОтбор Цикл 
					
		СтрокаДанных.КоличествоОтобрано = СтрокаДанных.Количество;
		СтрокаДанных.КоличествоУпаковокОтобрано = СтрокаДанных.КоличествоУпаковок;
		
		СтрокаДанных.Ячейка	= Ячейка;
		
	КонецЦикла;
	
	// Взято из модуля объекта                                     
	// ИнициализироватьДокумент
	
	// ОбработкаЗаполнения
	
КонецПроцедуры	

Процедура ПриходныйОрдерНаТоварыПродолжитьЗаполнение(Объект)
	
	Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
	Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению;
	Объект.ВсегоМест = 1;
	Объект.РаспоряжениеНаНесколькоСкладов = Ложь;
	
	// Взято из модуля объекта                                     
	// ИнициализироватьДокумент
	Если СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение, Объект.Дата) Тогда
		Объект.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(
			Объект.Склад, Объект.Помещение, Объект.ЗонаПриемки);
	КонецЕсли;
	
	// ОбработкаЗаполнения
	
КонецПроцедуры	

Процедура GoodsIncomeOrderObjectВРазмещениеТоваровПродолжитьЗаполнение(Объект)
	
	Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение;
	
	Объект.Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеСкладМагазина(
		Объект.Склад, Объект.Дата);   
	Объект.ЗонаПриемки = Справочники.СкладскиеЯчейки.КР_СкладскаяЯчейкаПриемкиПоУмолчанию(
		Объект.Склад, Объект.Помещение);

	Объект.ДатаНачалаВыполнения	= Объект.Дата;
	Объект.ДатаОкончанияВыполнения	= Объект.Дата;	 
	Объект.КР_ИспользоватьКороб = Истина;    
	
	// A2105505-2150 
	ВидСклада = Объект.Склад.КР_ВидСклада;
	Если ВидСклада = Перечисления.КР_ВидыСкладов.СкладКонсервации Тогда 
		Объект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.КР_ПринятКороб;
		Объект.КР_ПотоварнаяПриемкаБезВскрытияКороба = Истина;
	Иначе // В задаче это ветка для центрального склада но предполагается что для всех 
		Объект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.КР_ТоварРазмещен;
		Объект.КР_ПотоварнаяПриемкаБезВскрытияКороба = Ложь;   
	КонецЕсли;	
	//
	
    Объект.ТоварыОтбор.Очистить();
	
	Ячейка = Справочники.СкладскиеЯчейки.КР_СкладскаяЯчейкаОтгрузкиПоУмолчанию(
		Объект.Склад, Объект.Помещение);		
	Для Каждого СтрокаДанных Из Объект.ТоварыРазмещение Цикл 
					
		СтрокаДанных.КоличествоРазмещено = СтрокаДанных.Количество;
		СтрокаДанных.КоличествоУпаковокРазмещено = СтрокаДанных.КоличествоУпаковок;
		
		СтрокаДанных.Ячейка	= Ячейка;
		
	КонецЦикла;
	
	// Взято из модуля объекта                                     
	// ИнициализироватьДокумент
	
	// ОбработкаЗаполнения
	
КонецПроцедуры	

Процедура GoodsRelocationObjectВоВнутреннееПеремещениеТоваров(Объект, ToTradingHall)
	
	Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение;
	Объект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
	Объект.ДатаНачалаВыполнения	= Объект.Дата;
	Объект.ДатаОкончанияВыполнения	= Объект.Дата;	
	
	// ТоварыОтбор
	Если ToTradingHall Тогда 
		Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеСкладМагазина(Объект.Склад);  
	    Ячейка = Справочники.СкладскиеЯчейки.КР_СкладскаяЯчейкаОтгрузкиПоУмолчанию(Объект.Склад, Помещение);
	Иначе
		Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеТорговыйЗал(Объект.Склад);  
	    Ячейка = Справочники.СкладскиеЯчейки.КР_СкладскаяЯчейкаХраненияПоУмолчанию(Объект.Склад, Помещение);
	КонецЕсли;
	Для Каждого СтрокаДанных Из Объект.ТоварыОтбор Цикл 
					
		СтрокаДанных.КоличествоОтобрано = СтрокаДанных.Количество;
		СтрокаДанных.КоличествоУпаковокОтобрано = СтрокаДанных.КоличествоУпаковок;
		
		СтрокаДанных.Ячейка	= Ячейка;
		
	КонецЦикла;
	//
	
	// ТоварыРазмещение
	Если ToTradingHall Тогда 
		Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеТорговыйЗал(Объект.Склад);  
	    Ячейка = Справочники.СкладскиеЯчейки.КР_СкладскаяЯчейкаХраненияПоУмолчанию(Объект.Склад, Помещение);		
	Иначе
		Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеСкладМагазина(Объект.Склад);  
	    Ячейка = Справочники.СкладскиеЯчейки.КР_СкладскаяЯчейкаОтгрузкиПоУмолчанию(Объект.Склад, Помещение);		
	КонецЕсли;
	Для Каждого СтрокаДанных Из Объект.ТоварыРазмещение Цикл 
					
		СтрокаДанных.КоличествоРазмещено = СтрокаДанных.Количество;
		СтрокаДанных.КоличествоУпаковокРазмещено = СтрокаДанных.КоличествоУпаковок;
		
		СтрокаДанных.Ячейка	= Ячейка;
		
	КонецЦикла;
	//
	
	// Взято из модуля объекта                                     
	// ИнициализироватьДокумент
	
	// ОбработкаЗаполнения
	
КонецПроцедуры	

Процедура ПеремещениеТоваровПродолжитьЗаполнение(Объект)
	
	Объект.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
	Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	Объект.ВидыЗапасовУказаныВручную = Ложь;
	Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	Объект.ОсобыеУсловияПеревозки = Ложь;                                                          
	// A2105505-1954 (ВариантПриемкиТоваров был РазделенаПоЗаказамИНакладным)
	Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным; 
	Объект.Исправление = Ложь;
	
	// A2105505-1457
    Объект.ПеремещениеПоЗаказам = Ложь;  
	МассивЗаказов = Новый Массив;
	Для Каждого СтрокаДанных Из Объект.Товары Цикл   
		Если Не ЗначениеЗаполнено(СтрокаДанных.ЗаказНаПеремещение) Тогда 
			Продолжить;
		КонецЕсли;	
	    Объект.ПеремещениеПоЗаказам = Истина;  
		МассивЗаказов.Добавить(СтрокаДанных.ЗаказНаПеремещение); 
	КонецЦикла;	      
	МассивЗаказов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЗаказов);
	Если МассивЗаказов.Количество() = 1 Тогда 
		Объект.ЗаказНаПеремещение = МассивЗаказов[0];
	КонецЕсли;	
	//
	
	// A2105505-1445
	Объект.КР_ПомещениеОтправителя = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеСкладМагазина(
		Объект.СкладОтправитель, Объект.Дата);
	Объект.КР_ЗонаОтгрузки = Справочники.СкладскиеЯчейки.КР_СкладскаяЯчейкаОтгрузкиПоУмолчанию(
		Объект.СкладОтправитель, Объект.КР_ПомещениеОтправителя);
	//
	
	// Взято из модуля объекта                                     
	// ИнициализироватьДокумент
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПеремещениеТоваров);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	// ОбработкаЗаполнения
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Объект.Организация;
	Объект.БанковскийСчетОрганизации = 
		ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
КонецПроцедуры	

Процедура ПередачаТоваровХранителюПродолжитьЗаполнение(Объект)
	
	ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	Объект.Партнер = Объект.Контрагент.Партнер;
	Объект.ВидыЗапасовУказаныВручную = Ложь;
	Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	Объект.ОсобыеУсловияПеревозки = Ложь;
	Объект.ВернутьМногооборотнуюТару = Ложь;
	Объект.ДатаВозвратаМногооборотнойТары = Объект.Дата;
	Объект.Исправление = Ложь;       
	
	ИндексПервого = 0;
	ОтборСтрок = Новый Структура("Номенклатура,Характеристика");
	МассивЗаказов = Новый Массив;       
	КэшированныеЗначения = Неопределено;
	СтруктураДействийПересчитатьСумму = Новый Структура("ПересчитатьСумму");
	
	Для Каждого СтрокаДанных Из Объект.Товары Цикл 
		
		ЗаказКлиента = СтрокаДанных.ЗаказКлиента;
		Если Не ЗначениеЗаполнено(ЗаказКлиента) Тогда  
			Продолжить;
		КонецЕсли;	
		МассивЗаказов.Добавить(ЗаказКлиента);   
		
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаДанных);
		ТоварыЗаказа = ЗаказКлиента.Товары.НайтиСтроки(ОтборСтрок);
		Если ЗначениеЗаполнено(ТоварыЗаказа) Тогда   
			
			СтрокаДанных.Цена = ТоварыЗаказа[ИндексПервого].Цена;
			ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(
				СтрокаДанных, СтруктураДействийПересчитатьСумму, КэшированныеЗначения);
			
		КонецЕсли;
		
		СтрокаДанных.Склад = ЗаказКлиента.Склад;
		
	КонецЦикла;	
		
	Если МассивЗаказов.Количество() <> 0 Тогда 
		Объект.ЗаказКлиента = МассивЗаказов[ИндексПервого];
	Иначе
		Объект.ЗаказКлиента = Документы.ЗаказКлиента.ПустаяСсылка();
	КонецЕсли;	                       
	
	ЗаказКлиента = Объект.ЗаказКлиента; 
	Объект.ПередачаПоЗаказам = ЗначениеЗаполнено(ЗаказКлиента);
	
	Объект.Договор = ЗаказКлиента.Договор;
	Объект.Соглашение = ЗаказКлиента.Соглашение;
	Объект.Менеджер	= ЗаказКлиента.Менеджер; 
	Объект.Валюта = Объект.Соглашение.Валюта;   
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда 
		Объект.Валюта = ВалютаРегл;
	КонецЕсли;	
	// << 11.04.2024 Петухов А.В., Фактор, #3969
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДоговорыКонтрагентов.Ссылка КАК Договор
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Контрагент = &Контрагент
			|	И ДоговорыКонтрагентов.Организация = &Организация
			|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = &ХозяйственнаяОперация
			|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
			|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Объект.Договор = Выборка.Договор;
		КонецЕсли;	
	КонецЕсли;	
	// >> 11.04.2024 Петухов А.В., Фактор, #3969
	
	// Взято из модуля объекта                                     
	// ИнициализироватьДокумент
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Объект.Организация;
	СтруктураПараметров.БанковскийСчет = Объект.БанковскийСчетОрганизации;
	
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(
		Объект.Контрагент, Неопределено, Объект.БанковскийСчетКонтрагента);
		
	Объект.КоэффициентПересчетаРегл = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		Объект.Валюта, ВалютаРегл, ТекущаяДатаСеанса());
		
	// ОбработкаЗаполнения
	
КонецПроцедуры	

Процедура ЗаказКлиентаПродолжитьЗаполнение(Объект)
	
	Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
	Объект.Партнер = Объект.Контрагент.Партнер;
	
	Объект.ВернутьМногооборотнуюТару = Ложь;
	Объект.ТребуетсяЗалогЗаТару = Ложь; 
	Объект.ОсобыеУсловияПеревозки = Ложь;
	Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;		
	
	// A2105505-2285
	Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	//
	
	// Адаптировано из формы документа

	// A2105505-1575 Типовой алгоритм подбирает не то соглашение (возвращает с видом операции Реализация) 
	ДокументОбъектУстановитьТиповоеСоглашение(Объект);
	
	// A2105505-1629
	Объект.Валюта = Объект.Соглашение.Валюта;
	//     
	
	// A2105505-1891
	Объект.ДатаОтгрузки = Объект.Дата;
	//
	
	// A2105505-2279
	// Удалено заполнение договора
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет, Объект.БанковскийСчетКонтрагента);
	//  

	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", 
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект, Истина));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьСодержание", 
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
		
	// A2105505-2085
	МаксимальныйКодСтроки = 0;
	//
	
	ВариантОтгрузить = Перечисления.ВариантыОбеспечения.Отгрузить; 
	ДатаОтгрузки = Объект.Дата;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл 
		
		СтрокаТовары.ВариантОбеспечения = ВариантОтгрузить;
		СтрокаТовары.ДатаОтгрузки = ДатаОтгрузки;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовары, СтруктураДействий, Неопределено);

		// A2105505-2085
		МаксимальныйКодСтроки = Макс(МаксимальныйКодСтроки, СтрокаТовары.КодСтроки);
		//
		
	КонецЦикла;
	
	// A2105505-2085
	Объект.МаксимальныйКодСтроки = МаксимальныйКодСтроки;
	//
	
	// Взято из модуля объекта                                     
	// ИнициализироватьДокумент
	
	// ОбработкаЗаполнения
	Объект.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Объект.Приоритет);
	
	// --> Евлахов Игорь Николаевич (Начало) 13.03.2024
	// Задача #3906
	ПараметрыДоговора = Новый Структура();
	ПараметрыДоговора.Вставить("Валюта", 				Объект.Валюта);
	ПараметрыДоговора.Вставить("Организация", 			Объект.Организация);
	ПараметрыДоговора.Вставить("Контрагент", 			Объект.Контрагент);
	ПараметрыДоговора.Вставить("Партнер", 				Объект.Партнер);
	ПараметрыДоговора.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
		
	Объект.Договор = ПолучитьДоговорКонтрагента(ПараметрыДоговора);
	// <-- Евлахов Игорь Николаевич (Конец) 13.03.2024
	
КонецПроцедуры	

Процедура ЗаказНаПеремещениеПродолжитьЗаполнение(Объект)
	
	Объект.Статус = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
	Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	Объект.ОсобыеУсловияПеревозки = Ложь;    
	Объект.ИспользоватьДлительностьПеремещения = Ложь;
	Объект.ОбосабливатьПоНазначениюЗаказа = Ложь;
	
	// A2105505-2465
	Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
	//
	
	// A2105505-2085
	МаксимальныйКодСтроки = 0;
	//
	
	// Заполняем вариант обеспечения
	ВариантОтгрузить = Перечисления.ВариантыОбеспечения.Отгрузить; 
	НачалоОтгрузки = Объект.Дата;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл 
		
		СтрокаТовары.ВариантОбеспечения = ВариантОтгрузить;
		СтрокаТовары.НачалоОтгрузки = НачалоОтгрузки;
		
		// A2105505-2085
		МаксимальныйКодСтроки = Макс(МаксимальныйКодСтроки, СтрокаТовары.КодСтроки);
		//
		
	КонецЦикла;   
	
	// A2105505-2085
	Объект.МаксимальныйКодСтроки = МаксимальныйКодСтроки;
	//
	
	// Взято из модуля объекта                                     
	// ИнициализироватьДокумент
	Объект.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Объект.Приоритет);
	
	// ОбработкаЗаполнения
	
	
КонецПроцедуры	

Процедура ТранспортнаяНакладнаяПродолжитьЗаполнение(Объект, СообщениеОбмена)

	Объект.КР_ЭкспедиторПартнер = Объект.КР_Экспедитор.Партнер;   
	
	Организация = Объект.Организация;
	Объект.Грузополучатель = Организация;
	Объект.Грузоотправитель = Организация;
	Объект.ЗаказчикПеревозки = Организация;

	Объект.КР_ИдентификаторСтроки = Неопределено;  
		
	// << 28.02.2023, Маскаев П.Ю., КРОК, JIRA№ A2105505-1299
	СкладыОтгрузкиЦентральногоСклада =
		КР_ДополнительныеНастройкиПовтИсп.МассивЗначений("СкладыОтгрузкиЦентральногоСклада");
	СкладОтгрузкиЦентральногоСкладаДляЛогистики =
		КР_ДополнительныеНастройкиПовтИсп.Значение("СкладОтгрузкиЦентральногоСкладаДляЛогистики");
		
	// Изменение логики входящих данных
	Если Объект.КР_ЧерезЦС
		И (СкладыОтгрузкиЦентральногоСклада.Найти(Объект.КР_Отправитель) <> Неопределено
			Или СкладыОтгрузкиЦентральногоСклада.Найти(Объект.КР_Получатель) <> Неопределено) Тогда 
		Объект.КР_ЧерезЦС = Ложь;	
	КонецЕсли;	
	//
	
	Если СкладыОтгрузкиЦентральногоСклада.Найти(Объект.КР_Отправитель) <> Неопределено Тогда
		ПараметрОтправитель = СкладОтгрузкиЦентральногоСкладаДляЛогистики;
	Иначе
		ПараметрОтправитель = Объект.КР_Отправитель;
	КонецЕсли;
	
	Если Объект.КР_ЧерезЦС
		Или СкладыОтгрузкиЦентральногоСклада.Найти(Объект.КР_Получатель) <> Неопределено Тогда
		ПараметрПолучатель = СкладОтгрузкиЦентральногоСкладаДляЛогистики;
	Иначе
		ПараметрПолучатель = Объект.КР_Получатель;
	КонецЕсли;    
	
	// A2105505-1524
	Объект.КР_ОтправительЛогистика = ПараметрОтправитель;
	Объект.КР_ПолучательЛогистика = ПараметрПолучатель; 
	//	
	
	// Ищем данные по остаткам РН КР_ЗаданияНаПеревозку
	// Выбираем первые попавшиеся данные
	Запрос = Новый Запрос;    
	
	// A2105505-1586
	// Период в запросе учитывать нельзя так как остатки на МоментВремени() не работают,
	//	если дата сдвигается в перед.
	// Нужно прибавить движения документа по регистру сделанные текущим документом 
	//Запрос.УстановитьПараметр("Период"      , Объект.МоментВремени());  
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	//
	Запрос.УстановитьПараметр("ДатаОтгрузки", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("Отправитель" , ПараметрОтправитель);
	Запрос.УстановитьПараметр("Получатель"  , ПараметрПолучатель);
	Запрос.УстановитьПараметр("КР_ЭкспедиторПартнер", Объект.КР_ЭкспедиторПартнер);		// #3813.. Фомин Д.Ю. 14.03.2024.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиРегистра.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
	|	ОстаткиРегистра.ИдентификаторСтроки КАК КР_ИдентификаторСтроки,
	|	ОстаткиРегистра.КВыполнениюОстаток КАК Количество
	|ПОМЕСТИТЬ СинтетическиеОстатки
	|ИЗ
	|	РегистрНакопления.КР_ЗаданияНаПеревозку.Остатки(
	|			,
	|			ДатаОтгрузки = &ДатаОтгрузки
	|				И Отправитель = &Отправитель
	|				И Получатель = &Получатель) КАК ОстаткиРегистра
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.ЗаданиеНаПеревозку,
	|	Т.ИдентификаторСтроки,
	|	1
	|ИЗ
	|	РегистрНакопления.КР_ЗаданияНаПеревозку КАК Т
	|ГДЕ
	|	Т.Регистратор = &Ссылка И Т.ДатаОтгрузки = &ДатаОтгрузки
	|				И Т.Отправитель = &Отправитель
	|				И Т.Получатель = &Получатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СинтетическиеОстатки.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
	|	СинтетическиеОстатки.КР_ИдентификаторСтроки КАК КР_ИдентификаторСтроки,
	|	СУММА(СинтетическиеОстатки.Количество) КАК Количество
	|ИЗ
	|	СинтетическиеОстатки КАК СинтетическиеОстатки
	|ГДЕ
	|	СинтетическиеОстатки.ЗаданиеНаПеревозку.КР_ЭкспедиторПартнер = &КР_ЭкспедиторПартнер	// #3813.. Фомин Д.Ю. 14.03.2024.	
	|
	|СГРУППИРОВАТЬ ПО
	|	СинтетическиеОстатки.ЗаданиеНаПеревозку,
	|	СинтетическиеОстатки.КР_ИдентификаторСтроки
	|
	|ИМЕЮЩИЕ
	|	СУММА(СинтетическиеОстатки.Количество) > 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Объект, Выборка);
	Иначе
		Объект.ДополнительныеСвойства.Вставить("КР_ЗаписатьБезПроведения");  
		
		ОбъектМетаданные = Объект.Метаданные();
		
		ТекстСообщения = НСтр("ru = 'Не удалось установить привязку документа %1 к строке ТЧ ""Маршруты"" документа ""%2""'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Объект, НСтр("ru = 'Задание на перевозку'"));
		
		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибка(ОбъектМетаданные); 
		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
	КонецЕсли;
	// >> 28.02.2023, Маскаев П.Ю., КРОК, JIRA№ A2105505-1299
		
	// Взято из модуля объекта             
	// ИнициализироватьДокумент
	
	// ОбработкаЗаполнения
	
КонецПроцедуры	

Процедура ОтчетОРозничныхПродажахПродолжитьЗаполнение(Объект)

	Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	Объект.ВидЦены = Объект.Склад.РозничныйВидЦены; 
	Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС; 
	Объект.ПоРезультатамИнвентаризации = Ложь; 
	Объект.ВидыЗапасовУказаныВручную = Ложь; 
	Объект.ЕстьМаркируемаяПродукцияГИСМ = Ложь; 

	// Для проверки условия по сумме документа
	// На момент заполнения сумма по документу не актуальна
	//	так как заполняется в модуле объекта перед записью
	// Заполним ее предварительно типовым механизмом 
	Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(
		Объект.Товары, Объект.ЦенаВключаетНДС);
		
	// Заполним помещение	
	Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеТорговыйЗал( 
		Объект.Склад, Объект.Дата);   
	Если ЗначениеЗаполнено(Помещение) Тогда 
		Для Каждого СтрокаДанных Из Объект.Товары Цикл 
			СтрокаДанных.Помещение = Помещение;
		КонецЦикла;
	КонецЕсли;
	//
		
	// Дозаполняем ОплатаПлатежнымиКартами.КР_ДатаЧека и ОплатаПлатежнымиКартами.КР_НомерЗаказаИнтернетМагазина  
	КэшНайденныхСтрок = Новый Соответствие;
	Для Каждого СтрокаДанных Из Объект.ОплатаПлатежнымиКартами Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.КР_НомерЧека) Тогда 
			Продолжить;
		КонецЕсли;   
		
		НайденнаяСтрока = КэшНайденныхСтрок[СтрокаДанных.КР_НомерЧека];   
		Если НайденнаяСтрока = Неопределено Тогда 
			НайденнаяСтрока = Объект.Товары.Найти(СтрокаДанных.КР_НомерЧека, "КР_НомерЧека");  
			Если НайденнаяСтрока = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			КэшНайденныхСтрок[СтрокаДанных.КР_НомерЧека] = НайденнаяСтрока;
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(СтрокаДанных, НайденнаяСтрока, "КР_ДатаЧека, КР_НомерЗаказаИнтернетМагазина"); 
		
	КонецЦикла;	
		
	// Взято из модуля объекта                                     
	// ИнициализироватьДокумент
	
	// ОбработкаЗаполнения
	
КонецПроцедуры	

Процедура УстановкаЦенНоменклатурыПродолжитьЗаполнение(Объект)

	Объект.Согласован = Истина;
	Объект.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован; 
	
	// Взято из модуля объекта                                     
	// ИнициализироватьДокумент
	
	// ОбработкаЗаполнения
	
КонецПроцедуры	

Процедура ОприходованиеИзлишковТоваровПродолжитьЗаполнение(Объект, СообщениеОбмена)
	
	Объект.Ответственный = Объект.Автор;
	Объект.СтатьяДоходов = КР_ДополнительныеНастройкиПовтИсп.Значение("СтатьяДоходовДляОприходованияИзлишковТоваров"); 
	Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	Объект.Исправление = Ложь;	
	
	Для Каждого СтрокаДанных Из Объект.Товары Цикл 
		СтрокаДанных.Сумма = СтрокаДанных.Цена * СтрокаДанных.Количество;
	КонецЦикла;	
	
	Если Объект.Товары.Найти(0, "Сумма") <> Неопределено Тогда
		Объект.ДополнительныеСвойства.Вставить("КР_ЗаписатьБезПроведения");
	КонецЕсли;
		
	Если Не ЗаполнитьНомераГТД(Объект.Товары, Объект.Организация, Объект.Дата) Тогда 
	
		Объект.ДополнительныеСвойства.Вставить("КР_ЗаписатьБезПроведения");  
		
		ТекстСообщения = НСтр("ru = 'При заполнении документа не удалось подобрать ГТД'");
		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка();
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		
	КонецЕсли;
	
	// Взято из модуля объекта                                     
	// ИнициализироватьДокумент
	
	// ОбработкаЗаполнения
	
КонецПроцедуры	

Процедура ПересчетТоваровПродолжитьЗаполнение(Объект)
	
	Объект.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено;  
	Объект.ПечататьКоличествоПоУчету = Ложь;
	Объект.УчетныеДанныеЗаполнены = Истина;
	Объект.ИспользоватьОтдельнуюЯчейкуИзлишков = Ложь;
	Объект.ИспользоватьОтдельнуюЯчейкуПорчи = Ложь;
	Объект.БлокироватьЯчейки = Ложь;

	// A2105505-1567
	Объект.Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеСкладМагазина(
		Объект.Склад, Объект.Дата);
		
	Ячейка = Справочники.СкладскиеЯчейки.КР_СкладскаяЯчейкаОтгрузкиПоУмолчанию(
		Объект.Склад, Объект.Помещение);
	
	Для Каждого СтрокаДанных Из Объект.Товары Цикл 
		
		СтрокаДанных.Ячейка = Ячейка;
		
	КонецЦикла;		
	//
	
	// Взято из модуля объекта                                     
	// ИнициализироватьДокумент
	
	// ОбработкаЗаполнения
	
КонецПроцедуры	

Процедура ВнутреннееПотреблениеТоваровПродолжитьЗаполнение(Объект, СообщениеОбмена)
	
	// A2105505-1609
	Объект.ПотреблениеПоЗаказам = Ложь;
	//
	
	КатегорияЭксплуатации = КР_ДополнительныеНастройкиПовтИсп.Значение("КатегорияЭксплуатацииФорменнойОдежды");
	СтатьяРасходов = КатегорияЭксплуатации.СтатьяРасходов;
   	ФизическоеЛицо = КР_ДополнительныеНастройкиПовтИсп.Значение("ФизлицоДляОтраженияВыдачиСпецодежды");  
	
	Объект.ВидыЗапасовУказаныВручную = Ложь;
	Объект.ЕстьКиЗГИСМ = Ложь;
	Объект.ЕстьМаркируемаяПродукцияГИСМ = Ложь;  
	Объект.Статус = Перечисления.СтатусыВнутреннихПотреблений.Принято;
	Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию;
	Объект.Исправление = Ложь;   
	
	// A2105505-1573   
	Объект.Подразделение = Объект.Склад.Подразделение;
	
// << 01.11.2023 Петухов А.В., Фактор, #3190
	//Объект.КР_Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеСкладМагазина(
	//	Объект.Склад, Объект.Дата);
	Объект.КР_Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеТорговыйЗал(
		Объект.Склад, Объект.Дата);
// >> 01.11.2023 Петухов А.В., Фактор, #3190
	Объект.КР_Ячейка = Справочники.СкладскиеЯчейки.КР_СкладскаяЯчейкаОтгрузкиПоУмолчанию(
		Объект.Склад, Объект.КР_Помещение);   
		
	РеквизитыСтатьи = ДоходыИРасходыВызовСервераПовтИсп.ЗначенияРеквизитовСтатьи(СтатьяРасходов);
	//
	
	Для Каждого СтрокаДанных Из Объект.Товары Цикл 
		
		СтрокаДанных.КатегорияЭксплуатации = КатегорияЭксплуатации;
		СтрокаДанных.СтатьяРасходов = СтатьяРасходов;
		// A2105505-1573   
		СтрокаДанных.АналитикаРасходов = ДоходыИРасходыКлиентСервер.ПолучитьАналитикуПоУмолчанию(РеквизитыСтатьи, Объект);
		//
		СтрокаДанных.ФизическоеЛицо = ФизическоеЛицо;  

	КонецЦикла;	
	
	// Взято из модуля объекта                                     
	// ИнициализироватьДокумент
	ПараметрыЗаполнения = Документы.СписаниеНедостачТоваров.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(Объект.ПотреблениеДляДеятельности, ПараметрыЗаполнения);
	
	// ОбработкаЗаполнения   
	
	// Выбор статей и аналитик.
	ПараметрыВыбораСтатейИАналитик = Документы.ВнутреннееПотреблениеТоваров.ПараметрыВыбораСтатейИАналитик(
		Объект.ХозяйственнаяОперация);
	ДоходыИРасходыСервер.ОбработкаЗаполнения(Объект, ПараметрыВыбораСтатейИАналитик);
	
КонецПроцедуры	

Процедура ПересортицаТоваровПродолжитьЗаполнение(Объект, СообщениеОбмена)

	Объект.СтатьяРасходов = КР_ДополнительныеНастройкиПовтИсп.Значение("СтатьяРасходовДляСписанияНедостачТоваров");
	Объект.СтатьяДоходов = КР_ДополнительныеНастройкиПовтИсп.Значение("СтатьяДоходовДляОприходованияИзлишковТоваров");
	Объект.ПриходоватьТоварыПоСебестоимостиСписания = Истина;
	Объект.ВидыЗапасовУказаныВручную = Ложь;
	Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();

	Объект.Ответственный = Объект.Автор;
	
	ПараметрыЗаполнения = Документы.СписаниеНедостачТоваров.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(Объект.ВидДеятельностиНДС, ПараметрыЗаполнения);
		
	Объект.Исправление = Ложь;
	
	Если Не ЗаполнитьНомераГТД(Объект.Товары, Объект.Организация, Объект.Дата) Тогда
	
		Объект.ДополнительныеСвойства.Вставить("КР_ЗаписатьБезПроведения");  
		
		ТекстСообщения = НСтр("ru = 'При заполнении документа не удалось подобрать ГТД'");
		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка();
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
	КонецЕсли;	
	
	// A2105505-1566
	Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеСкладМагазина(
		Объект.Склад, Объект.Дата);
		
// << 01.11.2023 Петухов А.В., Фактор, #3190
	//ЯчейкаОприходование = Справочники.СкладскиеЯчейки.КР_СкладскаяЯчейкаОтгрузкиПоУмолчанию(
	//	Объект.Склад, Помещение);
	ЯчейкаОприходование = Справочники.СкладскиеЯчейки.КР_ПолучитьЯчейкуТорговогоЗала(
		Объект.Склад, Ложь);
// >> 01.11.2023 Петухов А.В., Фактор, #3190
		
	Для Каждого СтрокаДанных Из Объект.Товары Цикл 
		
		СтрокаДанных.КР_ЯчейкаОприходование = ЯчейкаОприходование; 
		СтрокаДанных.КР_ЯчейкаСписание = ЯчейкаОприходование;
		
	КонецЦикла;			
	//
	
	// Взято из модуля объекта                                     
	// ИнициализироватьДокумент
	
	// ОбработкаЗаполнения
	
КонецПроцедуры	

Процедура СписаниеНедостачТоваровПродолжитьЗаполнение(Объект)
	
	Объект.ВидыЗапасовУказаныВручную = Ложь;
	
	ПараметрыЗаполнения = Документы.СписаниеНедостачТоваров.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(Объект.ВидДеятельностиНДС, ПараметрыЗаполнения);
		
	Объект.Исправление = Ложь;

	// Из формы документа
	Объект.ИсточникИнформацииОЦенахДляПечати = Справочники.Склады.ИсточникИнформацииОЦенахДляПечати(Объект.Склад);
	ИсточникИнформацииОЦенахДляПечати = Объект.ИсточникИнформацииОЦенахДляПечати;
	Если ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен Тогда
		Объект.ВидЦены = Справочники.Склады.УчетныйВидЦены(Объект.Склад);
	ИначеЕсли ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости Тогда
		Объект.ВидЦены = Неопределено;
	КонецЕсли;
	
	// Взято из модуля объекта                                     
	// ИнициализироватьДокумент
	
	// ОбработкаЗаполнения
	
КонецПроцедуры	

Процедура ПриобретениеУслугПрочихАктивовПродолжитьЗаполнение(Объект, СообщениеОбмена)
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор,
		"Организация,Партнер,Контрагент,Менеджер,ВалютаВзаиморасчетов,БанковскийСчет,ХозяйственнаяОперация," +
		"БанковскийСчетКонтрагента,ПорядокРасчетов,ОплатаВВалюте");  
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыДоговора);   
	Объект.БанковскийСчетОрганизации = РеквизитыДоговора.БанковскийСчет;
	
	Объект.Автор = Пользователи.ТекущийПользователь();
	Объект.Согласован = Истина;    
	
	// Так описано в ФДР
	Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Объект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Объект.КурсЧислитель = 1;  
	Объект.КурсЗнаменатель = 1;    
		
КонецПроцедуры	

Процедура ТаможеннаяДекларацияИмпортПродолжитьЗаполнение(Объект, СообщениеОбмена)
	
	Объект.Партнер = Объект.Контрагент.Партнер;
	Объект.СтатьяРасходовСбор = КР_ДополнительныеНастройкиПовтИсп.Значение("СтатьяРасходовСборГТД");
	Объект.СтатьяРасходовШтраф = КР_ДополнительныеНастройкиПовтИсп.Значение("СтатьяРасходовШтрафГТД");
	Объект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;

	// Требование ФДР проверка по коду
	Объект.ОплатаВВалюте = Не СтрНайти("810|643|", Объект.ВалютаВзаиморасчетов.Код + "|");    

	Объект.ИспользоватьРазделы = Истина;    
	Объект.РучнаяКорректировкаЖурналаСФ = Ложь;    
	Объект.ОплатаЧерезЕдиныйЛицевойСчет = Ложь;    
	Объект.Автор = Пользователи.ТекущийПользователь();    
	
	ПерваяСтрокаТовары = Объект.Товары[0];
	Объект.Поставщик = ПерваяСтрокаТовары.ДокументПоступления.Партнер;
	Объект.КонтрагентПоставщика = ПерваяСтрокаТовары.ДокументПоступления.Контрагент;    
	
	// A2105505-1534
	Объект.АналитикаРасходовСбор = КР_ОбщегоНазначениеСервер.ПолучитьСсылкуСУчетомСсылкиНового(Объект);
		
КонецПроцедуры	

Процедура ЗаявлениеОВвозеТоваровПродолжитьЗаполнение(Объект, СообщениеОбмена)
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();    
			
КонецПроцедуры	

Функция РасходныйОрдерНаТоварыСоздатьНаОсновании(XDTOОбъект, 
		ПеремещениеОбъект, РасходныйОрдерОбъект, СообщениеОбмена)  
	
	Если Не ИспользуетсяОрдернаяСхемаПриОтгрузке(ПеремещениеОбъект.СкладОтправитель, ПеремещениеОбъект.Дата) Тогда 
		Возврат Ложь;
	КонецЕсли;	
			
	РасходныйОрдерОбъект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("РасходныйОрдерНаТовары", XDTOОбъект); 
		
	РасходныйОрдерОбъект.Заполнить(ПеремещениеОбъект); 
	РасходныйОрдерОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
	
	Возврат Истина;
	
КонецФункции		

Функция ПриходныйОрдерНаТоварыСоздатьНаОсновании(XDTOОбъект, 
		ПеремещениеОбъект, ПриходныйОрдерОбъект, СообщениеОбмена)  
			
	ПриходныйОрдерОбъект = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ПриходныйОрдерНаТовары", XDTOОбъект);  
			
	Если Не ИспользуетсяОрдернаяСхемаПриПоступлении(ПеремещениеОбъект.СкладПолучатель, ПеремещениеОбъект.Дата) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	// Взято из Обработка.УправлениеПоступлением.Форма
	Основание = Новый Структура;
	Основание.Вставить("Распоряжение", ПеремещениеОбъект.Ссылка);
	Основание.Вставить("Отправитель", ПеремещениеОбъект.СкладОтправитель);
	Основание.Вставить("Склад", ПеремещениеОбъект.СкладПолучатель);
	Основание.Вставить("ДатаПоступления", ПеремещениеОбъект.ДатаПоступления);
	Основание.Вставить("ХозяйственнаяОперация", ПеремещениеОбъект.ХозяйственнаяОперация);
	
	ПриходныйОрдерОбъект.Заполнить(Основание);

	// A2105505-2064
	ПриходныйОрдерОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
	//
	
	Возврат Истина;
	
КонецФункции		

Функция ИспользуетсяОрдернаяСхемаПриПоступлении(Склад, Дата)
	
	Если Не ЗначениеЗаполнено(Склад) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, 
		"ИспользоватьОрдернуюСхемуПриПоступлении, ДатаНачалаОрдернойСхемыПриПоступлении");    
	
	Возврат Реквизиты.ИспользоватьОрдернуюСхемуПриПоступлении 
		И Реквизиты.ДатаНачалаОрдернойСхемыПриПоступлении <= Дата;
	
КонецФункции

Функция ИспользуетсяОрдернаяСхемаПриОтгрузке(Склад, Дата)
	
	Если Не ЗначениеЗаполнено(Склад) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, 
		"ИспользоватьОрдернуюСхемуПриОтгрузке, ДатаНачалаОрдернойСхемыПриОтгрузке");    
	
	Возврат Реквизиты.ИспользоватьОрдернуюСхемуПриОтгрузке
		И Реквизиты.ДатаНачалаОрдернойСхемыПриОтгрузке <= Дата;
	
КонецФункции

Функция НайтиСсылкиПоПолямПоиска(ТипЗначения, НаборЗначенийПолей, ПоляПоиска, МассивСсылок, СообщениеОбмена)
	
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	#Таблица# КАК Т
	|ГДЕ
	|	#УсловиеПоиска#";
	
	ШаблонУсловия = "#УсловиеПоиска#
	|	И Т.%1 = &%2";
	// << 17.06.2024 Петухов А.В., Фактор, #4176
	ШаблонУсловияПоЗначению = "#УсловиеПоиска#
	|	И Т.%1 = %2";
	// >> 17.06.2024 Петухов А.В., Фактор, #4176
	МассивОписанияПолейПоиска = СтрРазделить(ПоляПоиска, ",");
	Для Каждого ОписаниеПоляПоиска Из МассивОписанияПолейПоиска Цикл 
		
		ЗначенияОписанияПоляПоиска = СтрРазделить(ОписаниеПоляПоиска, "=");
		ПолеПоиска = ЗначенияОписанияПоляПоиска[0];
		ПолеИсходныхДанных = ЗначенияОписанияПоляПоиска[1];
		// << 17.06.2024 Петухов А.В., Фактор, #4176
		//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УсловиеПоиска#", 
		//	СтрШаблон(ШаблонУсловия, ПолеПоиска, ПолеИсходныхДанных));  
		//				
		//Запрос.УстановитьПараметр(ПолеИсходныхДанных, НаборЗначенийПолей[ПолеИсходныхДанных]);
		//
		//// Подставим значения полей поиска для последующей генерации ошибки   
		//ПоляПоиска = СтрЗаменить(ПоляПоиска, ПолеИсходныхДанных, НаборЗначенийПолей[ПолеИсходныхДанных]); 
		Если Лев(ПолеИсходныхДанных,1) = "#" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УсловиеПоиска#", 
				СтрШаблон(ШаблонУсловияПоЗначению, ПолеПоиска, Сред(ПолеИсходныхДанных,2)));  
			ПоляПоиска = СтрЗаменить(ПоляПоиска, ПолеИсходныхДанных, Сред(ПолеИсходныхДанных,2)); 
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УсловиеПоиска#", 
				СтрШаблон(ШаблонУсловия, ПолеПоиска, ПолеИсходныхДанных));  
			Запрос.УстановитьПараметр(ПолеИсходныхДанных, НаборЗначенийПолей[ПолеИсходныхДанных]);
			ПоляПоиска = СтрЗаменить(ПоляПоиска, ПолеИсходныхДанных, НаборЗначенийПолей[ПолеИсходныхДанных]); 
		КонецЕсли;
		// >> 17.06.2024 Петухов А.В., Фактор, #4176
		
	КонецЦикла;	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УсловиеПоиска#", "ИСТИНА");

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Таблица#", Метаданные.НайтиПоТипу(ТипЗначения).ПолноеИмя());
	
	Запрос.Текст = ТекстЗапроса;   
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл   
    	МассивСсылок.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат ЗначениеЗаполнено(МассивСсылок);
	
КонецФункции

Функция НайтиКоробаПоНомеру(Номер, МассивСсылок)
	
	МассивСсылок = Новый Массив;
	
	Запрос = Новый Запрос(ТекстЗапросаНайтиКоробПоНомеру());
	Запрос.УстановитьПараметр("Номер", Номер);   
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл   
    	МассивСсылок.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат ЗначениеЗаполнено(МассивСсылок);
	
КонецФункции

Функция СформироватьДокументыОприходованияПоПоступлениям(
	XDTOОбъект, РазмещениеВместоОрдера, МассивОбъектов, ДокументыПоступления, СообщениеОбмена)
	
	// Получим приходные ордеры по ref   
	Запрос = Новый Запрос(ТекстЗапросаОприходованияПоУпаковочнымЛистамУидСистемыИсточника(РазмещениеВместоОрдера));  
	Запрос.УстановитьПараметр("Ref", XDTOОбъект.Ref); 
	РезультатЗапроса = Запрос.Выполнить();                                     
	
	// Найденные по ref оприходования должны соответствовать документам поступления из упаковочных листов
	// Лишние нужно будет удалить
	ОприходованияНаУдаление = Новый Массив;
	ОприходованияПоДокументуПоступления = Новый Соответствие;

	// Так как общая схема рабора данных, и в Приходный ордер мы грузим данные по массиву упаковочных листов
	//	а размещение создаем на каждый упаковочный лист, то сохраняем все документы
	// Не нужные будут помечены на удаление позже
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		Если ДокументыПоступления[ВыборкаДетальныеЗаписи.Распоряжение] = Неопределено // нет связки
			Тогда   
			Если Не ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда 
				ОприходованияНаУдаление.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЕсли;	
		Иначе
			Оприходования = ОприходованияПоДокументуПоступления[ВыборкаДетальныеЗаписи.Распоряжение]; 
			
			Если Оприходования = Неопределено Тогда 
				Оприходования = Новый Соответствие;   
				ОприходованияПоДокументуПоступления[ВыборкаДетальныеЗаписи.Распоряжение] = Оприходования;
			КонецЕсли;
			Ключ = ?(РазмещениеВместоОрдера, ВыборкаДетальныеЗаписи.Ссылка.КР_Короб, ВыборкаДетальныеЗаписи.Ссылка); 
			Оприходования[Ключ] = ВыборкаДетальныеЗаписи.Ссылка;		
			
		КонецЕсли;

	КонецЦикла;
	
	// Удалим "ложно" связанные документы по ref
	Для Каждого Оприходование Из ОприходованияНаУдаление Цикл 
		ДокументОбъект = Оприходование.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
	// Собственно формирование документов оприходования
	Для Каждого КлючЗначение Из ДокументыПоступления Цикл 
		
		ДокументПоступления = КлючЗначение.Ключ;
		УпаковочныеЛисты = КлючЗначение.Значение;  
		
		Оприходования = ОприходованияПоДокументуПоступления[ДокументПоступления];   
		
		// Для унификации создадим соответствие, если его нет
		Если Оприходования = Неопределено Тогда 
			Оприходования = Новый Соответствие;
		КонецЕсли;	
				
		Если РазмещениеВместоОрдера Тогда 
			ЗаполнитьДокументыРазмещенияТоваровПоУпаковочнымЛистам(XDTOОбъект, 
				МассивОбъектов, Оприходования, ДокументПоступления, УпаковочныеЛисты, СообщениеОбмена); 
		Иначе	
			ЗаполнитьДокументПриходныйОрдерНаТоварыПоУпаковочнымЛистам(XDTOОбъект, 
				МассивОбъектов, Оприходования, ДокументПоступления, УпаковочныеЛисты, СообщениеОбмена); 
		КонецЕсли;		

		// Удаляем лишние документы. Они у нас находятся в .Значение
		Для Каждого КлючЗначение Из Оприходования Цикл  
			ДокументОбъект = КлючЗначение.Значение.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;	
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьДокументПриходныйОрдерНаТоварыПоУпаковочнымЛистам(XDTOОбъект, 
	МассивОбъектов, Оприходования, ДокументПоступления, УпаковочныеЛисты, СообщениеОбмена)
	
	// Выбираем первый документ. Остальные будут помечены на удаление
	// Для текущего случая Ключ = Значение, но для унификации берем из .Значение
	ПриходныйОрдер = Неопределено;
	Для Каждого КлючЗначение Из Оприходования Цикл  
		ПриходныйОрдер = КлючЗначение.Значение;	// Унификация
		Оприходования.Удалить(ПриходныйОрдер); 	// Ключ = Значение. Опосредованная точка "контроля"
		Прервать;
	КонецЦикла;	
			
	Если ПриходныйОрдер = Неопределено Тогда 
		Объект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();   
		Объект.Распоряжение = ДокументПоступления;
		Объект.КР_ИдентификаторСистемыИсточника = XDTOОбъект.Ref;
	Иначе
		Объект = ПриходныйОрдер.ПолучитьОбъект();
	КонецЕсли;	
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Распоряжение, "Партнер, Склад, ХозяйственнаяОперация");
	
	Объект.Дата = XDTOОбъект.DocDate;
	Объект.ПометкаУдаления = XDTOОбъект.DeletionMark;  
	Объект.Проведен = XDTOОбъект.Posted;  
	
	Объект.Склад = Реквизиты.Склад;  
	
	Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;	
	Объект.Отправитель = Реквизиты.Партнер;
	
	ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Ответственный, СообщениеОбмена);  
	Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаОтПоставщика;   
	Объект.ХозяйственнаяОперация = Реквизиты.ХозяйственнаяОперация; 

	Объект.ВсегоМест = УпаковочныеЛисты.Количество();
	Объект.РаспоряжениеНаНесколькоСкладов = Ложь;
	Комментарий = НСтр("ru = 'Загружен на основании документа Поступление товаров №%1 от %2'");
	Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);
	
	// Сформируем данные табличной части 
	Запрос = Новый Запрос(ТекстЗапросаТоварыПриходногоОрдераПоУпаковочнымЛистам());
	Запрос.УстановитьПараметр("УпаковочныеЛисты", УпаковочныеЛисты);
	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());

	МассивОбъектов.Добавить(Объект);
	
	Возврат Истина;
	
КонецФункции	

Функция ЗаполнитьДокументыРазмещенияТоваровПоУпаковочнымЛистам(XDTOОбъект, 
	МассивОбъектов, Оприходования, ДокументПоступления, УпаковочныеЛисты, СообщениеОбмена)
	
	Для Каждого УпаковочныйЛист Из УпаковочныеЛисты Цикл 

		Размещение = Оприходования[УпаковочныйЛист];
				
		Если Размещение = Неопределено Тогда 
			Объект = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();   
			Объект.Распоряжение = ДокументПоступления;
			Объект.КР_ИдентификаторСистемыИсточника = XDTOОбъект.Ref;  
			Объект.КР_Короб = УпаковочныйЛист;
		Иначе
			Объект = Размещение.ПолучитьОбъект(); 
			Оприходования.Удалить(УпаковочныйЛист);
		КонецЕсли;	
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Распоряжение, "Партнер, Склад, ХозяйственнаяОперация");
		
		Объект.Дата = XDTOОбъект.DocDate;
		Объект.ПометкаУдаления = XDTOОбъект.DeletionMark;  
		Объект.Проведен = XDTOОбъект.Posted;  
		
		Объект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение;
		Объект.Склад = Реквизиты.Склад;  
		
		Объект.Распоряжение = ДокументПоступления;
		Объект.ЗонаПриемки = Неопределено;
		Объект.Помещение = Неопределено;
		Объект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.КР_ПринятКороб;
		Объект.ДатаНачалаВыполнения = XDTOОбъект.DocDate;
		Объект.ДатаОкончанияВыполнения = XDTOОбъект.DocDate;
		Объект.КР_ИспользоватьКороб = Истина;   
		Объект.КР_ПотоварнаяПриемкаБезВскрытияКороба = Истина;
				
		ПКО_XDTOВСсылкуПользователиЕслиНеНайден(XDTOОбъект.ResponsiblePerson, Объект.Ответственный, СообщениеОбмена);  

		Комментарий = НСтр("ru = 'Загружен на основании документа Поступление товаров №%1 от %2'");
		Объект.Комментарий = СтрШаблон(Комментарий, XDTOОбъект.DocNum, XDTOОбъект.DocDate);
		
		// Сформируем данные табличной части 
		Запрос = Новый Запрос(ТекстЗапросаТоварыУпаковочныхЛистов());
		Запрос.УстановитьПараметр("УпаковочныеЛисты", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УпаковочныйЛист));
		РезультатЗапроса = Запрос.Выполнить();
		
		Объект.ТоварыРазмещение.Загрузить(РезультатЗапроса.Выгрузить());
		Для Каждого СтрокаДанных Из Объект.ТоварыРазмещение Цикл 

			СтрокаДанных.КоличествоРазмещено = СтрокаДанных.Количество;
			СтрокаДанных.КоличествоУпаковокРазмещено = СтрокаДанных.КоличествоУпаковок;			

		КонецЦикла;
		
		МассивОбъектов.Добавить(Объект);
			
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	

Функция СформироватьПоступленияТоваровПоОприходованию(
		Ордер, ПоступлениеТоваров, XDTOОбъект, ПоступленияПоРаспоряжениям, СообщениеОбмена)   
	
	ОрдерСсылка = Ордер.Ссылка;
	
	ЭтоРазмещение = (ТипЗнч(Ордер) = Тип("ДокументОбъект.ОтборРазмещениеТоваров"));    
	Распоряжение = Ордер.Распоряжение;
	ИдентификаторСистемыИсточника = XDTOОбъект.Ref;
	
	ЗакупкаТоварыВПути = ЭтоЗакупкаТоварыВПути(Распоряжение.ХозяйственнаяОперация);
		
	// Сформируем индексированный список для быстрого поиска документов  
	// Сразу помечаем их на удаление  
	// При этом так как Распоряжение может повторяться то кэшируем данные межуд вызовами
	ПоступленияПоОприходованиям = ПоступленияПоРаспоряжениям[Распоряжение]; 
	Если ПоступленияПоОприходованиям = Неопределено Тогда 
		ПоступленияПоОприходованиям = Новый Соответствие;
		ПоступленияПоРаспоряжениям[Распоряжение] = ПоступленияПоОприходованиям;  
		
		// Если закупка по товарам в пути тогда создаем документ, иначе помечаем на удаление существующий
		// Все поступления создаются только интеграцией. Т.е. лишние не удалим.
		// Ищем документ(ы)             
		Запрос = Новый Запрос(ТекстЗапросаПоступленияНаСкладПоРеспоряжению());
		Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
		Запрос.УстановитьПараметр("ИдентификаторСистемыИсточника", ИдентификаторСистемыИсточника);
		
		РезультатЗапроса = Запрос.Выполнить();    
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл   
			Поступление = ВыборкаДетальныеЗаписи.Ссылка; 
			ПоступленияПоОприходованиям[ВыборкаДетальныеЗаписи.Ордер] = Поступление; 
			Если ВыборкаДетальныеЗаписи.СсылкаПометкаУдаления Тогда 
				Продолжить;
			КонецЕсли;	
			ДокументОбъект = Поступление.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);    
		КонецЦикла; 
		
	КонецЕсли;
	
	// Если не наш случай - то все что нужно мы уже сделали. Выходим
	Если Не ЗакупкаТоварыВПути Тогда 		
    	Возврат Ложь;
	КонецЕсли;
	
	Ссылка = ПоступленияПоОприходованиям[ОрдерСсылка];
	Если Не ЗначениеЗаполнено(Ссылка) Тогда 
		ПоступлениеТоваров = Документы.ПоступлениеТоваровНаСклад.СоздатьДокумент();  
		ПоступлениеТоваров.КР_ПоступлениеПоОрдеру = ОрдерСсылка;
		ПоступлениеТоваров.КР_ИдентификаторСистемыИсточника = ИдентификаторСистемыИсточника;		
	Иначе
		ПоступлениеТоваров = Ссылка.ПолучитьОбъект();		
	КонецЕсли;	
		
	// Создание на основании
	Основание = Новый Структура;
	Основание.Вставить("ДокументОснование", Распоряжение);
	Основание.Вставить("СкладПоступления", Ордер.Склад);
	Основание.Вставить("ХозяйственнаяОперацияПриемки", Распоряжение.ХозяйственнаяОперация);  // ???
	Основание.Вставить("ЗаполнятьПоНакладной", Истина);
	
	ПоступлениеТоваров.Заполнить(Основание);
	ПоступлениеТоваров.Распоряжение = Распоряжение;
	ПоступлениеТоваров.Склад = Ордер.Склад;
	ПоступлениеТоваров.Валюта = Распоряжение.Валюта;
	
	// Подумать над вариантов получения ч/з запрос.   
	Если ЭтоРазмещение Тогда 
		Товары = Ордер.ТоварыРазмещение.Выгрузить();
	Иначе	
		Товары = Ордер.Товары.Выгрузить(Новый Структура("ЭтоУпаковочныйЛист", Ложь));
	КонецЕсли;	
	// NB! После загрузки товаров возможно понадобится дозаполнение ТЧ 
	ПоступлениеТоваров.Товары.Загрузить(Товары);   
	
	ПоступлениеТоваров.Дата = XDTOОбъект.DocDate;
	ПоступлениеТоваров.ПометкаУдаления = XDTOОбъект.DeletionMark;      
	ПоступлениеТоваров.Проведен = XDTOОбъект.Posted;      

	Возврат Истина;  
	
КонецФункции

Функция СформироватьОрдерНаОтражениеИзлишковТоваровПоДаннымОприходования(
	ОрдерНаОтражение, ОприходованиеИзлишков, XDTOОбъект, СообщениеОбмена)   
		
	ОрдерНаОтражение = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ОрдерНаОтражениеИзлишковТоваров", XDTOОбъект);
	
	// Синхронизируем стандартные реквизиты так как они могут не соответствовать данным пакета
	ОрдерНаОтражение.Дата = ОприходованиеИзлишков.Дата;    
	ОрдерНаОтражение.ПометкаУдаления = ОприходованиеИзлишков.ПометкаУдаления;
	ОрдерНаОтражение.Проведен = ОприходованиеИзлишков.Проведен;  
	
	ОрдерНаОтражение.КР_ДокументФинансовогоУчета = ОприходованиеИзлишков.Ссылка;
	ОрдерНаОтражение.Склад = ОприходованиеИзлишков.Склад;
	ОрдерНаОтражение.Ответственный = ОприходованиеИзлишков.Ответственный;
	ОрдерНаОтражение.Комментарий = ОприходованиеИзлишков.Комментарий;

	// A2105505-1571
// << 01.11.2023 Петухов А.В., Фактор, #3190
	//ОрдерНаОтражение.Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеСкладМагазина(
	//	ОрдерНаОтражение.Склад, ОрдерНаОтражение.Дата);
	ОрдерНаОтражение.Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеТорговыйЗал(
		ОрдерНаОтражение.Склад, ОрдерНаОтражение.Дата);
// >> 01.11.2023 Петухов А.В., Фактор, #3190
	//
		
	// A2105505-1609
	Ячейка = Справочники.СкладскиеЯчейки.КР_СкладскаяЯчейкаОтгрузкиПоУмолчанию(
		ОрдерНаОтражение.Склад, ОрдерНаОтражение.Помещение);
	//
	
	ОрдерНаОтражение.Товары.Очистить();
	Для Каждого СтрокаДанных Из ОприходованиеИзлишков.Товары Цикл 
		
		НоваяСтрока = ОрдерНаОтражение.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
		
		НоваяСтрока.Ячейка = Ячейка; // A2105505-1609
		
	КонецЦикла;

	Возврат Истина;  
	
КонецФункции

Функция СформироватьОрдерНаОтражениеНедостачТоваровПоДаннымСписания(
	ОрдерНаОтражение, СписаниеНедостач, XDTOОбъект, СообщениеОбмена)   
		
	ОрдерНаОтражение = КР_ОбменRabbitОбщиеМеханизмыКонвертации.
		ДокументыИнициализироватьОбъект("ОрдерНаОтражениеНедостачТоваров", XDTOОбъект);
	
	// Синхронизируем стандартные реквизиты так как они могут не соответствовать данным пакета
	ОрдерНаОтражение.Дата = СписаниеНедостач.Дата;    
	ОрдерНаОтражение.ПометкаУдаления = СписаниеНедостач.ПометкаУдаления;
	ОрдерНаОтражение.Проведен = СписаниеНедостач.Проведен;  
	
	ОрдерНаОтражение.КР_ДокументФинансовогоУчета = СписаниеНедостач.Ссылка;
	ОрдерНаОтражение.Склад = СписаниеНедостач.Склад;
	ОрдерНаОтражение.Ответственный = СписаниеНедостач.Ответственный;
	ОрдерНаОтражение.Комментарий = СписаниеНедостач.Комментарий;
	
	// A2105505-1571
// << 01.11.2023 Петухов А.В., Фактор, #3190
	//ОрдерНаОтражение.Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеСкладМагазина(
	//	ОрдерНаОтражение.Склад, ОрдерНаОтражение.Дата);
	ОрдерНаОтражение.Помещение = Справочники.СкладскиеПомещения.КР_СкладскоеПомещениеТорговыйЗал(
		ОрдерНаОтражение.Склад, ОрдерНаОтражение.Дата);
// >> 01.11.2023 Петухов А.В., Фактор, #3190
	//
	
	// A2105505-1609
	Ячейка = Справочники.СкладскиеЯчейки.КР_СкладскаяЯчейкаОтгрузкиПоУмолчанию(
		ОрдерНаОтражение.Склад, ОрдерНаОтражение.Помещение);
	//
	
	ОрдерНаОтражение.Товары.Очистить();
	Для Каждого СтрокаДанных Из СписаниеНедостач.Товары Цикл 
		
		НоваяСтрока = ОрдерНаОтражение.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
		
		НоваяСтрока.Ячейка = Ячейка; // A2105505-1609
		
	КонецЦикла;

	Возврат Истина;  
	
КонецФункции

Функция СформироватьСчетФактуруПолученныйНаОснованииПриобретения(
	Приобретение, СчетФактура, XDTOОбъект, СообщениеОбмена)   
	
	// Ищем счет-фактуру 
	// Без проверки на дубли, без проверки на пометку и другие крайние ситуации
	//	так как не описано поведение в ФДР
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК Т
	|ГДЕ
	|	Т.ДокументОснование = &Приобретение");   
	Запрос.УстановитьПараметр("Приобретение", Приобретение.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		СчетФактура = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	Иначе
		СчетФактура = Документы.СчетФактураПолученный.СоздатьДокумент();
	КонецЕсли;	

	Основание = Новый Структура;
	Основание.Вставить("ДокументОснование", Приобретение.Ссылка);
	СчетФактура.Заполнить(Основание);
	
	СчетФактура.Дата = XDTOОбъект.InvoiceDate;    
	СчетФактура.Номер = XDTOОбъект.InvoiceNum;    
	СчетФактура.ПометкаУдаления = Приобретение.ПометкаУдаления;
	СчетФактура.Проведен = Приобретение.Проведен;   
	
	СчетФактура.ДатаСоставления = XDTOОбъект.InvoiceDate;    
	
	Возврат Истина;  
	
КонецФункции

Функция ЭтоЗакупкаТоварыВПути(ХозяйственнаяОперация)

	МассивХозОперацийИмпорт = Новый Массив;
	МассивХозОперацийИмпорт.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
	МассивХозОперацийИмпорт.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
	
	Возврат МассивХозОперацийИмпорт.Найти(ХозяйственнаяОперация) <> Неопределено;
		
КонецФункции		

Функция ЗаполнитьНомераГТД(Таблица, Организация, ДатаЗаполнения)
	
	ЕстьОшибкиЗаполненияНомераГТД = Ложь;     
	
	ТребуетсяЗаполнениеГТД = ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД");	
	Если Не ТребуетсяЗаполнениеГТД Тогда 
		Возврат ЕстьОшибкиЗаполненияНомераГТД;	
	КонецЕсли;  
	
	Запрос = Новый Запрос(ТекстЗапросаПолучитьНомераГТДДляЗаполненияВТаблице());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Таблица", Таблица);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
		
		Если ВыборкаДетальныеЗаписи.ЕстьНомерГТД Тогда 
			Таблица[ВыборкаДетальныеЗаписи.ИндексСтроки].НомерГТД = ВыборкаДетальныеЗаписи.НомерГТД;	
		Иначе
			ЕстьОшибкиЗаполненияНомераГТД = Истина;		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Не ЕстьОшибкиЗаполненияНомераГТД;
	
КонецФункции
	
Функция СкладСвязанСМаркетплейсом(Склад, Маркетплейс = Неопределено)
		
	// Поищем склад в регистре КР_СоответствиеСкладовИМаркетплейсов
	// Если нашли, заполним Маркетплейс из найденой записи
	Запрос = Новый Запрос(ТекстЗапросаПолучитьМаркетплейсПоСкладу());
	Запрос.УстановитьПараметр("Склад", Склад);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Маркетплейс = ВыборкаДетальныеЗаписи.Маркетплейс;
	КонецЕсли;

	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция ГенерироватьОшибкуЕслиСкладСвязанСМаркетплейсом(XDTOОбъект, Объект, СообщениеОбмена)  
	
	Если СкладСвязанСМаркетплейсом(Объект.Склад) Тогда  
		
		// Генерируем ошибку 
		СсылкаМетаданные = Объект.Метаданные();
		
		ТекстСообщения = НСтр("ru = 'Получен пакет %1 с данными документа %2 %3 по складу маркетплейса %4'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,
			СообщениеОбмена.ТипДанных, XDTOОбъект.DocDate, XDTOОбъект.DocNum, Объект.Склад);
		
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(СсылкаМетаданные); 
							  
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		
		Возврат Истина;	
	КонецЕсли;        
	
	Возврат Ложь;

КонецФункции	
		
Функция УстановитьСтавкуНДСПоИдентификаторуПеречисления(Идентификатор, ЗначениеНаДату, Ссылка, СообщениеОбмена)

	Если Не ЗначениеЗаполнено(Идентификатор) Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	ПеречислениеСтавкаНДС = XMLЗначение(Тип("ПеречислениеСсылка.СтавкиНДС"), Идентификатор);
	Запрос = Новый Запрос(ТекстЗапросаПолучитьСтавкуНДСПоПеречислению());
	Запрос.УстановитьПараметр("ПеречислениеСтавкаНДС", ПеречислениеСтавкаНДС);
	Запрос.УстановитьПараметр("ЗначениеНаДату", ЗначениеНаДату);
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

	КоличествоСсылок = МассивСсылок.Количество();
	Если КоличествоСсылок = 1 Тогда 
		Ссылка = МассивСсылок[0];
		Возврат Истина;          
	КонецЕсли;
	
	ПоляПоиска = "ИдентификаторСтавки=%1,ЗначениеНаДату=%2";
	ПоляПоиска = СтрШаблон(ПоляПоиска, Идентификатор, ЗначениеНаДату);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПоляПоиска", ПоляПоиска);
	ДополнительныеПараметры.Вставить("КоличествоСсылок", МассивСсылок.Количество()); 
	СсылкаТип = Тип("СправочникСсылка.СтавкиНДС");
		
	СсылкаМетаданные = Метаданные.НайтиПоТипу(СсылкаТип);
	
	Если КоличествоСсылок = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не найдено ни одной ссылки %2 по полям поиска ""%3""'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, СсылкаТип, ПоляПоиска);    
	Иначе	
		ТекстСообщения = НСтр("ru = 'Найдено %1 ссылки(ок) %2 по полям поиска ""%3""'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КоличествоСсылок, СсылкаТип, ПоляПоиска);    
	КонецЕсли;
	
  	ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_ОшибкаПоискаСсылки(СсылкаМетаданные); 	
						  
	КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
	
	Возврат Ложь;
	
КонецФункции

Функция УстановитьСтавкуНДСПоНоменклатуреНаДату(Номенклатура, ЗначениеНаДату, Ссылка, СообщениеОбмена)
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНДСНоменклатурыСрезПоследних.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(
	|		&Период, Номенклатура = &Номенклатура) КАК СтавкиНДСНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Период", ЗначениеНаДату);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Ссылка = ВыборкаДетальныеЗаписи.СтавкаНДС;	
	Иначе
		ТекстСообщения = НСтр("ru = 'Для номенклатуры ""%1"" не указано значение ставки НДС "
			+ "в регистре ""СтавкиНДСНоменклатуры"" на дату %2'");	
		ТекстСообщения = СтрШаблон(ТекстСообщения, Номенклатура, ЗначениеНаДату);		
		
		СсылкаТип = Тип("СправочникСсылка.Номенклатура");		
		СсылкаМетаданные = Метаданные.НайтиПоТипу(СсылкаТип);
		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(СсылкаМетаданные, Номенклатура);						  
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);	
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// << 06.03.2024 Петухов А.В., Фактор, #3820
//Функция УстановитьЭквайринговыйТерминалПоСтроковомуПредставлению(Представление, Ссылка, СообщениеОбмена)
//	
//	Если Представление = "Платежная карта" Тогда 
//		Ссылка = КР_ДополнительныеНастройкиПовтИсп.Значение("ЭквайрингОплата");	
//	ИначеЕсли Представление = "Система быстрых платежей" Тогда 
//		Ссылка = КР_ДополнительныеНастройкиПовтИсп.Значение("СбпОплата");	
//	ИначеЕсли Представление = "Сервис ""Подели""" Тогда 
//		Ссылка = КР_ДополнительныеНастройкиПовтИсп.Значение("СервисПодели");	
//	Иначе
//		ТекстСообщения = НСтр("ru = 'Не известный идентификатор типа оплаты ""%1""'");
//		ТекстСообщения = СтрШаблон(ТекстСообщения, Представление);
//	  	ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 	
//		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог); 
//		Возврат Ложь;
//	КонецЕсли;
//		
//	Возврат Истина;
//	
//КонецФункции
Функция УстановитьЭквайринговыйТерминалПоСтроковомуПредставлению(Представление, Ссылка, СообщениеОбмена, соотТерминалы)

	Если СокрЛП(Представление) = ""  Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено значение типа оплаты'");
	  	ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 	
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог); 
		Возврат Ложь;
	ИначеЕсли соотТерминалы[Представление] <> Неопределено Тогда
		Ссылка = соотТерминалы[Представление];
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
			|ГДЕ
			|	ЭквайринговыеТерминалы.злВидОплатыУТ10 = &злВидОплатыУТ10
			|	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("злВидОплатыУТ10", Представление);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ТекстСообщения = НСтр("ru = 'Неизвестный идентификатор типа оплаты ""%1""'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Представление);
		  	ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 	
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог); 
			Возврат Ложь;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Ссылка = Выборка.Ссылка;
			соотТерминалы.Вставить(Представление, Выборка.Ссылка);
		КонецЕсли;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции
// >> 06.03.2024 Петухов А.В., Фактор, #3820

Функция ПолучитьЗаказыПоНомерамПоставщика(XDTOОбъект, ДоговорКонтрагента, ГруппировкаПоЛотам, СообщениеОбмена)

	МассивЗаказов = Новый Массив;
	Для Каждого КлючЗначение Из ГруппировкаПоЛотам Цикл 
		НомерЗаказа = КлючЗначение.Ключ;
		Если ЗначениеЗаполнено(НомерЗаказа) Тогда 
			МассивЗаказов.Добавить(НомерЗаказа);
		КонецЕсли;	
	КонецЦикла;	  
	
	// Выходим если нет ни одного заказа
	Если Не ЗначениеЗаполнено(МассивЗаказов) Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	// A2105505-1574
	// Изменен алгоритм "поиска" с "по номеру заказа поставщика" на "по GIUD" сгенерированный из номера 		
	Для Итератор = 0 По МассивЗаказов.ВГраница() Цикл 
		
		НомерЗаказа = МассивЗаказов[Итератор];
		
		GUID = КР_ОбщегоНазначениеСервер.GUIDИзСтроки(НомерЗаказа);
		ЗаказСсылка = XMLЗначение(Тип("ДокументСсылка.ЗаказПоставщику"), GUID);
		
		ЗаказОбъект = ЗаказСсылка.ПолучитьОбъект();  
		Если ЗаказОбъект = Неопределено Тогда 
			
			ЗаказОбъект = Документы.ЗаказПоставщику.СоздатьДокумент(); 
			ЗаказОбъект.УстановитьСсылкуНового(ЗаказСсылка);

		Иначе   

			ЗаказОбъект.ПометкаУдаления = Ложь;  
        	КР_ОбщегоНазначениеСервер.ДокументОбъектОчистить(ЗаказОбъект);

		КонецЕсли;
		
		ЗаказОбъект.Заполнить(ДоговорКонтрагента);  
		ЗаказОбъект.НомерПоДаннымПоставщика = НомерЗаказа;     

		// Дозаполняем заказ 
		ЗаказОбъект.ХозяйственнаяОперация = ДоговорКонтрагента.ХозяйственнаяОперация;  
		ЗаказОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден;  
		ЗаказОбъект.Склад = КР_ДополнительныеНастройкиПовтИсп.Значение("СкладПоступления");
		ЗаказОбъект.СпособДоставки = Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки;  
		ЗаказОбъект.АдресДоставкиДляПоставщика =  
			ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(ЗаказОбъект.Склад);  
		ЗаказОбъект.АдресДоставки = ЗаказОбъект.АдресДоставкиДляПоставщика;	
		ЗаказОбъект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;  
		ЗаказОбъект.РегистрироватьЦеныПоставщика = Ложь;
		ЗаказОбъект.Согласован = Истина;
		ЗаказОбъект.ПоступлениеОднойДатой = Истина;
		ЗаказОбъект.Дата = XDTOОбъект.DocDate;
		ЗаказОбъект.ДатаПервогоПоступления = XDTOОбъект.DocDate;
		ЗаказОбъект.ДатаСогласования = XDTOОбъект.DocDate;
		ЗаказОбъект.ДатаПоДаннымПоставщика = XDTOОбъект.DocDate;
		ЗаказОбъект.ДатаПоступления = XDTOОбъект.DocDate;
		ЗаказОбъект.ДатаОтгрузки = XDTOОбъект.DocDate;
		ЗаказОбъект.ЦенаВключаетНДС = XDTOОбъект.PriceIncludesVAT;  
		ЗаказОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		ПКО_XDTOВСсылку(XDTOОбъект.Currency, ЗаказОбъект.Валюта, СообщениеОбмена);
		
		// Устанавливаем в группировку вместо номера ЗаказОбъект
		ГруппировкаПоЛотам[ЗаказОбъект] = ГруппировкаПоЛотам[НомерЗаказа];
		// Удаляем теперь уже люшнюю информацию по номеру заказа
		ГруппировкаПоЛотам.Удалить(НомерЗаказа);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ПометитьНаУдалениеНеАктуальныеЗаказыПоПриобретению(Объект)

	// Для нового документа ничего не делаем
	Если Объект.ЭтоНовый() Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаЗаказыПриобретенияНаУдаление());
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("АктуальныеЗаказы", Объект.Товары.ВыгрузитьКолонку("ЗаказПоставщику"));  
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 

		ДокументОбъект = ВыборкаДетальныеЗаписи.ЗаказПоставщику.ПолучитьОбъект();   

		// A2105505-1584
		// Настоятельное требование отключить проверки на уход в минус по регистру ЗаказыПоставщикам 
		// Консультант предупрежден о возможных последствиях 
		// Согласование ФА получено.	
		ДокументОбъект.Движения.ЗаказыПоставщикам.ОбменДанными.Загрузка = Истина;
		//
		
		ДокументОбъект.УстановитьПометкуУдаления(Истина);

	КонецЦикла;	
	
КонецПроцедуры

Функция ПриобретениеУслугПрочихАктивовРаспределитьПоКомплектам(XDTOОбъект, Объект, СообщениеОбмена)
	
	// Распределение
	МассивОснований = Новый Массив;               
	ДокументОснование = Неопределено;
	XDTOСписок = XDTOОбъект.BasisDocuments.Row;
	Для Каждого ЭлементСпискаXDTO Из XDTOСписок Цикл  
		Если Не ПКО_XDTOВСсылку(ЭлементСпискаXDTO.PurchaseGoodsAndServices, 
			ДокументОснование, СообщениеОбмена) Тогда 
			Продолжить;
		КонецЕсли;
		МассивОснований.Добавить(ДокументОснование);
	КонецЦикла;

	Если Не ЗначениеЗаполнено(МассивОснований) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	СсылкаМетаданные = Объект.Метаданные();
	DistributionMethod = XDTOОбъект.DistributionMethod;
	
	Если DistributionMethod = "ПоСумме" Тогда 
		ИмяПоляКоэффициента = "СуммаКоэфф";
	ИначеЕсли DistributionMethod = "ПоКоличеству" Тогда
		ИмяПоляКоэффициента = "КоличествоКоэфф";
	ИначеЕсли DistributionMethod = "ПоВесу" Тогда
		ИмяПоляКоэффициента = "ВесКоэфф";  
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Значение ""%1"" свойства ""DistributionMethod"" не соответствует ожидаемому" +
			" ПоСумме/ПоКоличеству/ПоВесу'"); 
		ТекстСообщения = СтрШаблон(ТекстСообщения, DistributionMethod);
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(СсылкаМетаданные); 
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		
		Возврат Ложь;
	КонецЕсли;	
	
	ПредставлениеGUID = XDTOОбъект.TypeOperation + DistributionMethod;
	Идентификатор = КР_ОбщегоНазначениеСервер.GUIDИзСтроки(XDTOОбъект.TypeOperation + DistributionMethod);	
	СтатьяРасходовБазовая = Неопределено;
	Если Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЕстьЗаписьСИдентификаторомВСинхронизируемыхОбъектах(
		Идентификатор, СтатьяРасходовБазовая, СообщениеОбмена) Тогда  
		
		ТекстСообщения = НСтр("ru = 'Не найдена ссылка в синхронизируемых объектах по GUID %1 (представление: %2)'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Идентификатор, ПредставлениеGUID);
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(СсылкаМетаданные); 
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);

		Возврат Ложь;
	КонецЕсли;
	
	Расходы = Объект.Расходы;
    Расходы.Очистить();
	
	СтавкаНДС = Неопределено;
	УстановитьСтавкуНДСПоИдентификаторуПеречисления(
		XDTOОбъект.VatRate, XDTOОбъект.DocDate, СтавкаНДС, СообщениеОбмена);
	
	Запрос = Новый Запрос(ТекстЗапросаКоэффициентыРаспределенияПоКомплектам());
	Запрос.УстановитьПараметр("Ссылки", МассивОснований);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	КэшированныеЗначения = Неопределено;
	// Из документа
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОстатокКРаспределению = XDTOОбъект.Sum;
	ОстатокНДСКРаспределению = XDTOОбъект.SumVat;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		СтрокаРасхода = Расходы.Добавить();  
		Если СтрокаРасхода.НомерСтроки = ВыборкаДетальныеЗаписи.ВсегоКоллекций Тогда 
			СуммаРаспределения = ОстатокКРаспределению; 
		Иначе	
			СуммаРаспределения = XDTOОбъект.Sum * ВыборкаДетальныеЗаписи[ИмяПоляКоэффициента]; 
		КонецЕсли;
		
		СтрокаРасхода.КР_Коллекция = ВыборкаДетальныеЗаписи.КоллекцияНоменклатуры;
		СтрокаРасхода.Содержание = XDTOОбъект.TypeOperation;
		СтрокаРасхода.Количество = 1;
		СтрокаРасхода.Цена = СуммаРаспределения;
		СтрокаРасхода.Сумма = СуммаРаспределения; 
		СтрокаРасхода.СтавкаНДС = СтавкаНДС;  
		
		ОстатокКРаспределению = ОстатокКРаспределению - СтрокаРасхода.Сумма;
		
		СтрокаРасхода.КР_СтатьяРасходовБазовая = СтатьяРасходовБазовая; 
		СтрокаРасхода.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.КР_ПолучитьСтатьюРасходовКоллекции(
			СтатьяРасходовБазовая, СтрокаРасхода.КР_Коллекция);
		СтрокаРасхода.АналитикаРасходов = ВыборкаДетальныеЗаписи.ДокументОснование;	
		СтрокаРасхода.Подразделение = Объект.Подразделение;	
		
		// Из документа
		ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(СтрокаРасхода, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
    Возврат Истина;
	
КонецФункции

Функция ПолучитьУстановитьСсылкуСУчетомНового(Объект) 
	
	Тип = ТипЗнч(Объект.Ссылка);
	
	Если Объект.ЭтоНовый() Тогда 
		Ссылка = Объект.ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(Ссылка) Тогда 
			Ссылка = XMLЗначение(Тип, Строка(Новый УникальныйИдентификатор()));
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;         
	Иначе
		Ссылка = Объект.Ссылка;
	КонецЕсли;   
	
	Возврат Ссылка;
	
КонецФункции 

Функция ПолучитьХарактеристикиНоменклатуры(Номенклатура)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ 
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ИЗ Справочник.Номенклатура Н 
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|	ПО ВЫБОР
	|		КОГДА Н.ИспользованиеХарактеристик = 
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ТОГДА Н.ВидНоменклатуры
	|		КОГДА Н.ИспользованиеХарактеристик = 
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА Н.ВладелецХарактеристик
	|		КОГДА Н.ИспользованиеХарактеристик = 
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА Н.Ссылка
	|		ИНАЧЕ NULL
	|	КОНЕЦ = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ 
	|	Н.Ссылка = &Номенклатура"
	);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);   
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

Процедура УстановитьДополнительноеСведение(Ссылка, Свойство, Значение);
		
	Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();                  
	Запись.Объект = Ссылка;
	Запись.Свойство = Свойство;
    Запись.Значение = Значение;
	Запись.Записать();

КонецПроцедуры

Процедура УдалитьКонтактнуюИнформациюПоВиду(Объект, Вид)

	ОтборСтрок = Новый Структура("Вид", Вид);
	НайденныеСтроки = Объект.КонтактнаяИнформация.НайтиСтроки(ОтборСтрок);   
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
		Объект.КонтактнаяИнформация.Удалить(НайденнаяСтрока);	
	КонецЦикла;
	
	ОтборСтрок = Новый Структура("ВидДляСписка", Вид);
	НайденныеСтроки = Объект.КонтактнаяИнформация.НайтиСтроки(ОтборСтрок);   
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
		Объект.КонтактнаяИнформация.Удалить(НайденнаяСтрока);	
	КонецЦикла;
	
КонецПроцедуры

Функция УчетныйВидЦеныДоговора(Объект)
	
	СтруктураПараметров = ЦеныПредприятияЗаполнениеСервер.НовыйПараметрыПроверкиВидаЦенДоговора();
	СтруктураПараметров.ПолеВидаЦен = "ВидЦенУчетный";
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		ВидЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, СтруктураПараметров.ПолеВидаЦен);
		Если ЗначениеЗаполнено(ВидЦены) Тогда
			СтруктураПараметров.ВидЦены = ВидЦены;
			СтруктураПараметров.ЦенаВключаетНДС = ВидЦены.ЦенаВключаетНДС;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ЗаполнитьСкладПоТабличнойЧасти(Склад, ТабличнаяЧасть, ИмяРеквизитаСклад = "Склад")
	
	Склад = Неопределено;
	МассивСкладов = ТабличнаяЧасть.ВыгрузитьКолонку(ИмяРеквизитаСклад); 
	МассивСкладов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСкладов);
	
	Если Не ЗначениеЗаполнено(МассивСкладов) Тогда 
		Возврат Ложь;
	ИначеЕсли МассивСкладов.Количество() = 1 Тогда 
		
		Склад = МассивСкладов[0]; 
		
	//Иначе ищем общую группу для складов
	Иначе           
	
	    РодителиСкладов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСкладов, "Родитель");
		МассивСкладов.Очистить();
		Для Каждого КлючЗначение Из РодителиСкладов Цикл 
			МассивСкладов.Добавить(КлючЗначение.Значение);	
		КонецЦикла;	
		
		МассивСкладов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСкладов);
		Если МассивСкладов.Количество() > 1
			Или Не ЗначениеЗаполнено(МассивСкладов[0]) Тогда 
			Возврат Ложь;					
		Иначе
			Склад = МассивСкладов[0];				
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ДокументОбъектУстановитьТиповоеСоглашение(Объект)

	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");

	Если Не ИспользоватьСоглашенияСКлиентами Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК Т
	|ГДЕ
	|	НЕ Т.ПометкаУдаления
	|	И Т.Типовое
	|	И Т.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И Т.ДатаНачалаДействия <= &Период
	|	И (Т.ДатаОкончанияДействия >= &Период
	|			ИЛИ Т.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1))");   
	
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Период", Объект.Дата);

	РезультатЗапроса = Запрос.Выполнить(); 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Объект.Соглашение = ВыборкаДетальныеЗаписи.Ссылка;
		Возврат Истина;
	КонецЕсли;	                                          
			
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьТаблицуЗначенийПоМетаданным(ТабличнаяЧастьМетаданные)
		
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Каждого Колонка Из ТабличнаяЧастьМетаданные.Реквизиты Цикл 
		
		ТаблицаЗначений.Колонки.Добавить(Колонка.Имя, Колонка.Тип);
		
	КонецЦикла;	 
	
	Возврат ТаблицаЗначений;
		
КонецФункции

Функция ПолучитьПеремещенияПоУникальномуИдентицикатору(GUID, СкладОтправитель = Неопределено)
		
	ТекстЗапроса = 
	// << 26.03.2024 Петухов А.В., Фактор, #3916
	//"ВЫБРАТЬ
	//|	Т.Ссылка КАК Ссылка,
	//|	Т.СкладОтправитель КАК СкладОтправитель,
	//|	Т.ПометкаУдаления КАК ПометкаУдаления
	//|ИЗ
	//|	Документ.ПеремещениеТоваров КАК Т
	//|ГДЕ
	//|	Т.КР_ИдентификаторСистемыИсточника = &GUID
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Т.Проведен УБЫВ";	
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.СкладОтправитель КАК СкладОтправитель,
	|	Т.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Т
	|ГДЕ
	|	Т.КР_ИдентификаторСистемыИсточника = &GUID
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Проведен УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка КАК Ссылка,
	|	ПеремещениеТоваров.СкладОтправитель КАК СкладОтправитель,
	|	ПеремещениеТоваров.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &Ссылка";	
	// >> 26.03.2024 Петухов А.В., Фактор, #3916
	
	Если СкладОтправитель <> Неопределено Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&GUID", "&GUID
			|	И Т.СкладОтправитель = &СкладОтправитель");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);	
	Запрос.УстановитьПараметр("GUID", GUID);
	Запрос.УстановитьПараметр("СкладОтправитель", СкладОтправитель);
	
	// << 26.03.2024 Петухов А.В., Фактор, #3916
	//Возврат Запрос.Выполнить().Выбрать();
	Запрос.УстановитьПараметр("Ссылка", XMLЗначение(Тип("ДокументСсылка.ПеремещениеТоваров"), GUID));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если Не РезультатЗапроса[0].Пустой() Тогда
		Возврат РезультатЗапроса[0].Выбрать();
	Иначе
		Возврат РезультатЗапроса[1].Выбрать();
	КонецЕсли;
	// >> 26.03.2024 Петухов А.В., Фактор, #3916
		
КонецФункции

Функция ЗаполнитьКодСтрокиТоваровНаОснованииОстатков(Объект, СообщениеОбмена)
	
	Товары = Объект.Товары;
	Период = Новый МоментВремени(Объект.Дата, Объект.Ссылка);

	// Получаем остатки по кодам строк на дату 
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.КодСтроки КАК КодСтроки,
	|	Т.ЗаказаноОстаток КАК Количество
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(
	|			&Период,
	|			(ЗаказНаПеремещение, Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.ЗаказНаПеремещение,
	|					Т.Номенклатура,
	|					Т.Характеристика
	|				ИЗ
	|					Товары КАК Т
	|				ГДЕ
	|					Т.ЗаказНаПеремещение <> &ЗаказПустаяСсылка)) КАК Т
	|ГДЕ
	|	Т.ЗаказаноОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.ЗаказНаПеремещение,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.КодСтроки,
	|	ВЫБОР
	|		КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * Т.Заказано
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПеремещение КАК Т
	|ГДЕ
	|	Т.Регистратор = &Ссылка
	|	И Т.ЗаказНаПеремещение <> &ЗаказПустаяСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	|	Остатки.Номенклатура КАК Номенклатура,
	|	Остатки.Характеристика КАК Характеристика,
	|	Остатки.КодСтроки КАК КодСтроки,
	|	СУММА(Остатки.Количество) КАК Количество
	|ИЗ
	|	Остатки КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.ЗаказНаПеремещение,
	|	Остатки.Номенклатура,
	|	Остатки.Характеристика,
	|	Остатки.КодСтроки";
	
	ОбъектМетаданные = Объект.Метаданные();
	
    ОбъектТипЗначения = ТипЗнч(Объект);
	Если ОбъектТипЗначения = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда 	
		ИмяРеквизитаЗаказ = "ЗаказНаПеремещение";
	ИначеЕсли ОбъектТипЗначения = Тип("ДокументОбъект.ПередачаТоваровХранителю") Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаказыНаПеремещение", "ЗаказыКлиентов");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаказНаПеремещение", "ЗаказКлиента");
		ИмяРеквизитаЗаказ = "ЗаказКлиента";
	Иначе
		ТекстСообщения = 
			НСтр("ru = 'ЗаполнитьКодСтрокиНаОснованииОстатков: Заполнение кодоов строк по типу документа %1 не реализовано'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ОбъектМетаданные);	
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("Период", Период);     
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);     
	Запрос.УстановитьПараметр("ЗаказПустаяСсылка", Документы[ИмяРеквизитаЗаказ].ПустаяСсылка());
	
	Остатки = Запрос.Выполнить().Выгрузить();        
	
	КлючевыеПоля = ИмяРеквизитаЗаказ + ",Номенклатура,Характеристика";
	Остатки.Индексы.Добавить(КлючевыеПоля);
	
	Отбор = Новый Структура(КлючевыеПоля);
	
	// Используем прямой порядок перебора через итератор
	// 	для того чтоб вставлять новые строки при разбиении после 
	//	текущей давай возможность алгоритму их отработать по общей схеме
	Итератор = 0;
	Пока Итератор < Товары.Количество() Цикл   
		
		СтрокаДанных = Товары[Итератор];  
		Итератор = Итератор + 1;
		
		// Очищаем ранее заполненый код строки	
		СтрокаДанных.КодСтроки = 0;    
		
		// Нормализуем данные
		СтрокаДанных.КоличествоУпаковок = СтрокаДанных.Количество;
		СтрокаДанных.Упаковка = Неопределено;
				
		// На всякий случай проверяем заполнение заказа
		Если Не ЗначениеЗаполнено(СтрокаДанных[ИмяРеквизитаЗаказ]) Тогда 
			Продолжить;
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаДанных);
		
		НайденныеСтроки = Остатки.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаОстатка Из НайденныеСтроки Цикл 
			
			Остаток = СтрокаОстатка.Количество;
			Если Остаток = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Распределить = Мин(Остаток, СтрокаДанных.Количество);
			Разница = СтрокаДанных.Количество - Распределить;	
			
			// Уменьшаем остаток
			СтрокаОстатка.Количество = Остаток - Распределить;
			
			// Если количество в строке заказа больше чем на остатке 
			//	тогда делим строку
			Если Разница > 0 Тогда 
				
				// Втавляем строку сразу после текущей
				НоваяСтрока = Товары.Вставить(Итератор + 1); 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
				НоваяСтрока.Количество = Разница; // КоличествоУпаковок и Упаковка заполним на следующей итерации главного цикла
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
								
				СтрокаДанных.Количество = Распределить;
				СтрокаДанных.КоличествоУпаковок = СтрокаДанных.Количество;
				
			КонецЕсли;	
			
			СтрокаДанных.КодСтроки = СтрокаОстатка.КодСтроки;
			
			Прервать; // передаем уравление на основной алгоритм для обработки новой строки
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Отбор = Новый Структура("КодСтроки", 0);
	СтрокиСПустымКодом = Товары.Выгрузить(Отбор, КлючевыеПоля + ", Количество");   
	СтрокиСПустымКодом.Свернуть(КлючевыеПоля, "Количество");
	ЕстьНеЗаполненныеКодыСтрок = ЗначениеЗаполнено(СтрокиСПустымКодом);
	
	ШаблонСообщения = 
// << 13.02.2024 Петухов А.В., Фактор, #3705
		//НСтр("ru = 'Не удалось определить код строки, превышено количество по заказу %1 по %2 %3, не хватает %4 шт'");       
		НСтр("ru = 'Не удалось определить код строки, превышено количество по заказу %1 по %2 %3 %4 %5, не хватает %6 шт'");       
// >> 13.02.2024 Петухов А.В., Фактор, #3705

	ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация(
		ОбъектМетаданные);
	Для Каждого СтрокаДанных Из СтрокиСПустымКодом Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаДанных[ИмяРеквизитаЗаказ]) Тогда 
			Продолжить;
		КонецЕсли;
		
// << 13.02.2024 Петухов А.В., Фактор, #3705
		//ТекстСообщения = СтрШаблон(ШаблонСообщения,
		//	СтрокаДанных[ИмяРеквизитаЗаказ], СтрокаДанных.Номенклатура, СтрокаДанных.Характеристика, СтрокаДанных.Количество);
		
		Артикул = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДанных.Номенклатура, "Артикул");
		Штрихкод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДанных.Характеристика, "КР_Штрихкод");
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения,
			СтрокаДанных[ИмяРеквизитаЗаказ], Артикул, Штрихкод, СтрокаДанных.Номенклатура, СтрокаДанных.Характеристика, СтрокаДанных.Количество);
// >> 13.02.2024 Петухов А.В., Фактор, #3705
	
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		
	КонецЦикла;
	
	Возврат Не ЕстьНеЗаполненныеКодыСтрок;
	
КонецФункции

//A2105505-2344
Функция ТипДвиженияОтгрузка(XDTOОбъект)
	//Определим тип движения для документа Движение коробов
	//по значению IncomeMovement в списке CardBoxMovementRow
	//
	СписокСтрокXDTO = XDTOОбъект.CardBoxMovementList.CardBoxMovementRow;

	Для Каждого СтрокаСписка Из СписокСтрокXDTO Цикл
		Если СтрокаСписка.IncomeMovement = Ложь Тогда 
			Возврат Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции
//A2105505-2344

// --> Евлахов Игорь Николаевич (Начало) 13.03.2024
// Задача #3906
Функция ПолучитьДоговорКонтрагента(Параметры)
	
	ДоговорСКонтрагентом = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
	               |	И ДоговорыКонтрагентов.Организация = &Организация
	               |	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	               |	И ДоговорыКонтрагентов.Партнер = &Партнер
	               |	И ДоговорыКонтрагентов.ХозяйственнаяОперация = &ХозяйственнаяОперация
	               |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	               |	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)";
	
	#КонецОбласти
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Параметры.Валюта);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("Контрагент", Параметры.Контрагент);
	Запрос.УстановитьПараметр("Партнер", Параметры.Партнер);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Параметры.ХозяйственнаяОперация);
	
	Результат 	= Запрос.Выполнить();
	Выборка 	= Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДоговорСКонтрагентом = Выборка.Ссылка;
	КонецЦикла;
	
	Возврат(ДоговорСКонтрагентом);
	
КонецФункции
//A2105505-2344
#КонецОбласти

#Область СервисныеМетодыОстаткиНаДату

Процедура СформироватьСообщениеПоРасхождению(
	ДатаОстатков, Склад, ЕстьОстатки, ВыборкаДетальныеЗаписи, СообщениеОбмена)
	
	МетаданныеНоменклатура = Метаданные.Справочники.Номенклатура;
	МетаданныеХарактеристикиНоменклатуры = Метаданные.Справочники.ХарактеристикиНоменклатуры;
		
	XDTOОбъект = ПолучитьОбъектXDTO("GoodsInStockDetailedObject");
	XDTOОбъект.StockDate = XMLСтрока(ДатаОстатков);
	КР_УТ10_УТ11_ВыгрузкаДанныхСервер.ПКО_СсылкаВXDTO(Склад, XDTOОбъект.Storehouse, СообщениеОбмена);   
    XDTOОбъект.GoodsInStockDetailedRows = ПолучитьОбъектXDTO("GoodsInStockDetailedRowsObject");
	
	КэшОтработанныхСообщений = Новый Соответствие;
	Если ЕстьОстатки Тогда
		
		ШаблонПредставленияНоменклатуры = НСтр("ru = '%1 (%2)'");
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл                                   
			
			// Проверим на заполнение ключевых полей 
			Если КэшОтработанныхСообщений[ВыборкаДетальныеЗаписи.Номенклатура] = Неопределено 
				И ПустаяСтрока(ВыборкаДетальныеЗаписи.МодельКод)
				Или ПустаяСтрока(ВыборкаДетальныеЗаписи.ЦветКод) Тогда 

				ТекстСообщения = НСтр("ru = 'Не заполнены ключевые поля ""Модель, Цвет"" номенклатуры ""%1""'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ВыборкаДетальныеЗаписи.НоменклатураНаименование);
				
				ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(
					МетаданныеНоменклатура, ВыборкаДетальныеЗаписи.Номенклатура);
				КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);
					
				КэшОтработанныхСообщений[ВыборкаДетальныеЗаписи.Номенклатура] = Истина;
				
			КонецЕсли;	
			
			Если КэшОтработанныхСообщений[ВыборкаДетальныеЗаписи.Характеристика] = Неопределено 
				И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Характеристика)
				И ПустаяСтрока(ВыборкаДетальныеЗаписи.РазмерКод) Тогда 

				ТекстСообщения = НСтр("ru = 'Не заполнено ключевое поле ""Размер"" характеристики ""%1""'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ВыборкаДетальныеЗаписи.ХарактеристикаНаименование);
				
				ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(
					МетаданныеХарактеристикиНоменклатуры, ВыборкаДетальныеЗаписи.Характеристика);
				КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);
					
				КэшОтработанныхСообщений[ВыборкаДетальныеЗаписи.Характеристика] = Истина;
				
			КонецЕсли;	
			
			ПредставлениеНоменклатуры = СтрШаблон(ШаблонПредставленияНоменклатуры,
				ВыборкаДетальныеЗаписи.НоменклатураНаименование, ВыборкаДетальныеЗаписи.ХарактеристикаНаименование); 
				
			СтрокаСпискаXDTO = ПолучитьОбъектXDTO("GoodsInStockDetailedSingleRowObject");  
			
			СтрокаСпискаXDTO.Name = ПредставлениеНоменклатуры;
			СтрокаСпискаXDTO.Model = ВыборкаДетальныеЗаписи.МодельКод;
			СтрокаСпискаXDTO.Color = ВыборкаДетальныеЗаписи.ЦветКод;
			СтрокаСпискаXDTO.Size = ВыборкаДетальныеЗаписи.РазмерКод;
			СтрокаСпискаXDTO.Quantity = XMLСтрока(ВыборкаДетальныеЗаписи.ВНаличии);
			XDTOОбъект.GoodsInStockDetailedRows.GoodsInStockDetailedSingleRow.Добавить(СтрокаСпискаXDTO);	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если СообщениеОбмена.ЕстьОшибка Тогда 
		Возврат;
	КонецЕсли;
	
	ИсходящееСообщение = КР_ОбменRabbitОбработкаСообщенийОбмена.ПолучитьСтруктуруСообщения();
	ИсходящееСообщение.ТипДанных = "GoodsInStockDetailedObject";
	ИсходящееСообщение.Маршрутизация = "GoodsInStockDetailedObject";
	ИсходящееСообщение.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
	
	КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьИсходящееСообщениеОбмена(
		КР_УТ10_УТ11_ВыгрузкаДанныхСервер.ТочкаОбмена(), ИсходящееСообщение, Ложь);
	
КонецПроцедуры

Процедура СформироватьСообщениеПоНеНайденномуСкладуПоRef(
	ДатаОстатков, Ref, СообщениеОбмена)
	
	XDTOОбъект = ПолучитьОбъектXDTO("GoodsInStockDetailedObject");
	XDTOОбъект.StockDate = XMLСтрока(ДатаОстатков);     
	
	// ПсевдоСсылка
	XDTOЗначение = ПолучитьОбъектXDTO("StorehouseRef");
	XDTOЗначение.Ref = Ref;	
	XDTOЗначение.Name = "Объект не найден в УТ11";	
	XDTOОбъект.Storehouse = XDTOЗначение;
	
    XDTOОбъект.GoodsInStockDetailedRows = ПолучитьОбъектXDTO("GoodsInStockDetailedRowsObject");
		
	ИсходящееСообщение = КР_ОбменRabbitОбработкаСообщенийОбмена.ПолучитьСтруктуруСообщения();
	ИсходящееСообщение.ТипДанных = "GoodsInStockDetailedObject";
	ИсходящееСообщение.Маршрутизация = "GoodsInStockDetailedObject";
	ИсходящееСообщение.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
	
	КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьИсходящееСообщениеОбмена(
		КР_УТ10_УТ11_ВыгрузкаДанныхСервер.ТочкаОбмена(), ИсходящееСообщение, Ложь);
	
КонецПроцедуры

Функция ПолучитьРасхожденияСГруппировкойПоСкладам(МенеджерВременныхТаблиц, РезультатЗапроса)
		
	// Выбираем расхождения 
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Склад КАК Склад,
	|	Т.ЕстьОстатки КАК ЕстьОстатки,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	Т.Характеристика.Наименование КАК ХарактеристикаНаименование,
	|	Т.Номенклатура.КР_Модель КАК МодельКод,
	|	ЕСТЬNULL(Т.Номенклатура.КР_Цвет.Код, &ПустаяСтрока) КАК ЦветКод,
	|	ЕСТЬNULL(Т.Характеристика.КР_Размер.Код, &ПустаяСтрока) КАК РазмерКод,
	|	СУММА(Т.ВНаличии) КАК ВНаличии
	|ИЗ
	|	РасхожденияПоСкладамСАналитикой КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Склад,
	|	Т.ЕстьОстатки,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Номенклатура.Наименование,
	|	Т.Характеристика.Наименование,
	|	Т.Номенклатура.КР_Модель,
	|	ЕСТЬNULL(Т.Номенклатура.КР_Цвет.Код, &ПустаяСтрока),
	|	ЕСТЬNULL(Т.Характеристика.КР_Размер.Код, &ПустаяСтрока)
	|ИТОГИ
	|	МАКСИМУМ(ЕстьОстатки)
	|ПО
	|	Склад"
	;                                                          
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;    
	Запрос.Текст = ТекстЗапроса;        
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	РезультатЗапроса = Запрос.Выполнить();  
	
	Возврат Не РезультатЗапроса.Пустой();  
		
КонецФункции

Процедура СформироватьРасхожденияОстатковПоСкладамСУчетомАналитики(
	МенеджерВременныхТаблиц, StockDate)
	
	ТекстыЗапросов = Новый Массив;
	
	// Выбираем все остатки по складам в разрезе аналитик
	ТекстыЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Т.Склад КАК Склад,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.ВНаличииОстаток КАК ВНаличии
	|ПОМЕСТИТЬ ТоварыНаСкладах
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			&StockDate,
	|			Склад В
	|				(ВЫБРАТЬ
	|					Т.Storehouse
	|				ИЗ
	|					GoodsInStockBriefRows КАК Т)) КАК Т"
	);                                                          
	
	// Групируем остатки без учета аналитики
	ТекстыЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Т.Склад КАК Склад,
	|	СУММА(Т.ВНаличии) КАК ВНаличии
	|ПОМЕСТИТЬ ОстаткиПоСкладам
	|ИЗ
	|	ТоварыНаСкладах КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Склад"
	);                                                          
	
	// Сравниваем с тем что мы получили без учета аналитики
	ТекстыЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Т.Storehouse КАК Склад
	|ПОМЕСТИТЬ РасхожденияПоСкладам
	|ИЗ
	|	GoodsInStockBriefRows КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоСкладам КАК О
	|		ПО Т.Storehouse = О.Склад
	|ГДЕ
	|	Т.Quantity <> ЕСТЬNULL(О.ВНаличии, 0)"
	);                                                          
	
	// Уничтожаем лишние таблицы
	ТекстыЗапросов.Добавить("УНИЧТОЖИТЬ GoodsInStockBriefRows");                                                          
	ТекстыЗапросов.Добавить("УНИЧТОЖИТЬ ОстаткиПоСкладам");                                                          
	
	// Выбираем остатки с аналитикой по складам
	ТекстыЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Р.Склад КАК Склад,
	|	НЕ Т.Склад ЕСТЬ NULL КАК ЕстьОстатки,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.ВНаличии КАК ВНаличии
	|ПОМЕСТИТЬ РасхожденияПоСкладамСАналитикой
	|ИЗ
	|	РасхожденияПоСкладам КАК Р
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыНаСкладах КАК Т
	|		ПО Р.Склад = Т.Склад"
	);                                                          
	
	// Уничтожаем лишние таблицы
	ТекстыЗапросов.Добавить("УНИЧТОЖИТЬ РасхожденияПоСкладам");                                                          
	ТекстыЗапросов.Добавить("УНИЧТОЖИТЬ ТоварыНаСкладах");                                                          
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;    
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());  
	Запрос.УстановитьПараметр("StockDate", StockDate);
	Запрос.Выполнить();
		
КонецПроцедуры
	
Функция ПоместитьПакетGoodsInStockBriefRowsВоВременнуюТаблицу( 
	МенеджерВременныхТаблиц, GoodsInStockBriefRows, НеНайденныеСкладыПоRef, СообщениеОбмена)
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("Storehouse", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Данные.Колонки.Добавить("Quantity", Новый ОписаниеТипов("Число"));

	НеКритичнаяОшибкаПоиска = ПараметрыПоискаСсылки(Ложь);
	
	Для Каждого СтрокаСпискаXDTO Из GoodsInStockBriefRows.GoodsInStockBriefSingleRow Цикл    
		
		Склад = Неопределено;
		Если Не ПКО_XDTOВСсылку(СтрокаСпискаXDTO.Storehouse, Склад, СообщениеОбмена, НеКритичнаяОшибкаПоиска) Тогда 
			НеНайденныеСкладыПоRef.Добавить(СтрокаСпискаXDTO.Storehouse.Ref);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Данные.Добавить();
		НоваяСтрока.Storehouse = Склад;
		НоваяСтрока.Quantity = СтрокаСпискаXDTO.Quantity;
		
	КонецЦикла;

	Если Не ЗначениеЗаполнено(Данные) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Данные", Данные);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Storehouse КАК Storehouse,
	|	Т.Quantity КАК Quantity
	|ПОМЕСТИТЬ GoodsInStockBriefRows
	|ИЗ
	|	&Данные КАК Т";
	
	Запрос.Выполнить();
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ТекстыЗапросов   

Функция ТекстЗапросаНайтиКоробПоНомеру()
	
	Возврат
	"ВЫБРАТЬ
	|	УпаковочныйЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.Код = &Номер";
	
КонецФункции

Функция ТекстЗапросаНоменклатураХарактеристика()
	
	Возврат
	"ВЫБРАТЬ
	|	Т.ИндексСтроки КАК ИндексСтроки,
	|	Т.КлючевыеПоляЗаполнены КАК КлючевыеПоляЗаполнены,
	|	Т.Model_ПостфиксИменКолонок КАК Model,
	|	Т.Color_ПостфиксИменКолонок КАК Color,
	|	Т.Size_ПостфиксИменКолонок КАК Size
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	&Данные КАК Т
	|;
	|                               
	// A2105505-2196
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ИндексСтроки КАК ИндексСтроки,
	|	Т.КлючевыеПоляЗаполнены КАК КлючевыеПоляЗаполнены,
	|	ЕСТЬNULL(Н.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	НЕ Н.Ссылка ЕСТЬ NULL КАК НоменклатураНайдена,
	|	ВЫБОР
	|		КОГДА Н.ИспользованиеХарактеристик = 
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ТОГДА Н.ВидНоменклатуры
	|		КОГДА Н.ИспользованиеХарактеристик = 
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА Н.ВладелецХарактеристик
	|		КОГДА Н.ИспользованиеХарактеристик = 
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА Н.Ссылка
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВладелецХарактеристик,
	|	Т.Model КАК Model,
	|	Т.Color КАК Color,
	|	Т.Size КАК Size
	|ПОМЕСТИТЬ РезультатыПоискаНоменклатуры
	|ИЗ
	|	ИсходныеДанные КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Н
	|		ПО (Т.КлючевыеПоляЗаполнены)
	|			И Т.Model = Н.КР_Модель
	|			И Т.Color = Н.КР_Цвет.Код  
	|ГДЕ 
	|	НЕ Т.Color ПОДОБНО """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.ИндексСтроки КАК ИндексСтроки,
	|	Т.КлючевыеПоляЗаполнены КАК КлючевыеПоляЗаполнены,
	|	ЕСТЬNULL(Н.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	НЕ Н.Ссылка ЕСТЬ NULL КАК НоменклатураНайдена,
	|	ВЫБОР
	|		КОГДА Н.ИспользованиеХарактеристик = 
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ТОГДА Н.ВидНоменклатуры
	|		КОГДА Н.ИспользованиеХарактеристик = 
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА Н.ВладелецХарактеристик
	|		КОГДА Н.ИспользованиеХарактеристик = 
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА Н.Ссылка
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВладелецХарактеристик,
	|	Т.Model КАК Model,
	|	Т.Color КАК Color,
	|	Т.Size КАК Size
	|ИЗ
	|	ИсходныеДанные КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Н
	|		ПО (Т.КлючевыеПоляЗаполнены)
	|			И Т.Model = Н.КР_Модель
	|ГДЕ 
	|	Т.Color ПОДОБНО """"
	|
	|;   
	//
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ИндексСтроки КАК ИндексСтроки,
	|	Т.КлючевыеПоляЗаполнены КАК КлючевыеПоляЗаполнены,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.НоменклатураНайдена КАК НоменклатураНайдена,
	|	ЕСТЬNULL(ХН.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	НЕ ХН.Ссылка ЕСТЬ NULL КАК ХарактеристикаНайдена,
	|	Т.Model КАК Model,
	|	Т.Color КАК Color,
	|	Т.Size КАК Size
	|ПОМЕСТИТЬ РезультатыПоиска
	|ИЗ
	|	РезультатыПоискаНоменклатуры КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХН
	|		ПО (Т.КлючевыеПоляЗаполнены)
	|			И Т.ВладелецХарактеристик = ХН.Владелец
	|			И НЕ Т.Size ПОДОБНО """"
	|			И Т.Size = ХН.КР_Размер.Код 
	// --> Евлахов Игорь Николаевич (Начало) 14.03.2024
	// Задача #3911
	|			И НЕ ХН.ПометкаУдаления
	// <-- Евлахов Игорь Николаевич (Конец) 14.03.2024
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РезультатыПоискаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыПоиска.ИндексСтроки КАК ИндексСтроки,
	|	РезультатыПоиска.Номенклатура КАК Номенклатура,
	|	РезультатыПоиска.Характеристика КАК Характеристика
	|ИЗ
	|	РезультатыПоиска КАК РезультатыПоиска
	|
	|УПОРЯДОЧИТЬ ПО
	|	РезультатыПоиска.ИндексСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезультатыПоиска.Номенклатура КАК Номенклатура,
	|	РезультатыПоиска.НоменклатураНайдена КАК НоменклатураНайдена,
	|	РезультатыПоиска.Model КАК Model,
	|	РезультатыПоиска.Color КАК Color,
	|	РезультатыПоиска.Size КАК Size
	|ИЗ
	|	РезультатыПоиска КАК РезультатыПоиска
	|ГДЕ
	|	НЕ РезультатыПоиска.ХарактеристикаНайдена
	|	И РезультатыПоиска.КлючевыеПоляЗаполнены";
	
КонецФункции

Функция ТекстЗапросаПолучитьМаркетплейсПоСкладу()

	Возврат
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Маркетплейс КАК Маркетплейс
	|ИЗ
	|	РегистрСведений.КР_СоответствиеСкладовИМаркетплейсов КАК Т
	|ГДЕ
	|	Т.Склад = &Склад";    
	
КонецФункции

Функция ТекстЗапросаОприходованияПоУпаковочнымЛистамУидСистемыИсточника(РазмещениеВместоОрдера)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.ПометкаУдаления КАК ПометкаУдаления,
	|	Т.Распоряжение КАК Распоряжение
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК Т
	|ГДЕ
	|	Т.КР_ИдентификаторСистемыИсточника = &Ref";  
	
	Если РазмещениеВместоОрдера Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПриходныйОрдерНаТовары", "ОтборРазмещениеТоваров");
	КонецЕсли;
	
	Возврат	ТекстЗапроса;
	
КонецФункции   

Функция ТекстЗапросаТоварыУпаковочныхЛистов()
	
	Возврат
	"ВЫБРАТЬ
	|	Т.Ссылка КАК УпаковочныйЛист,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	СУММА(Т.Количество) КАК Количество,
	|	СУММА(Т.Количество) КАК КоличествоУпаковок
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка В(&УпаковочныеЛисты)
	|	И НЕ Т.ЭтоУпаковочныйЛист
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка,
	|	Т.Номенклатура,
	|	Т.Характеристика";
	
КонецФункции

Функция ТекстЗапросаТоварыУпаковочныхЛистовСДетализациейПоКоробу(
	ОтборМаркированныйТовар = Неопределено, ОтборАксессуары = Неопределено)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК УпаковочныйЛист,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	СУММА(Т.Количество) КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка В(&УпаковочныеЛисты)
	|	И НЕ Т.ЭтоУпаковочныйЛист   
	|	И ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка,
	|	Т.Номенклатура,
	|	Т.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерГруппы,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ГруппировкаТоваров
	|ИЗ
	|	Товары КАК Т   
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Номенклатура,
	|	Т.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Г.НомерГруппы КАК НомерГруппы,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.УпаковочныйЛист КАК УпаковочныйЛист,
	|	Т.Количество КАК Количество
	|ИЗ
	|	Товары КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппировкаТоваров КАК Г
	|		ПО Т.Номенклатура = Г.Номенклатура
	|			И Т.Характеристика = Г.Характеристика
	|ИТОГИ
	|	МАКСИМУМ(Номенклатура),
	|	МАКСИМУМ(Характеристика)
	|ПО
	|	НомерГруппы";
		
	Если ОтборМаркированныйТовар <> Неопределено Тогда    
		Если ОтборМаркированныйТовар Тогда
			// --> Евлахов Игорь Николаевич (Начало) 12.07.2024
			// Задача #4395
			// Начало было
			//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ИСТИНА",
			//	"И Т.Характеристика.КР_КодТНВЭД.КР_Маркируется
			//	|	И ИСТИНА"
			//); 
			// Конец было
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ИСТИНА",
				"И Т.Характеристика.КР_КодТНВЭД.злМаркировкаДляМаркетплейсов
				|	И ИСТИНА"
			);
			// Задача #4395
			// <-- Евлахов Игорь Николаевич (Конец) 12.07.2024
		Иначе
			// --> Евлахов Игорь Николаевич (Начало) 12.07.2024
			// Задача #4395
			// Начало было
			//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ИСТИНА",
			//	"И НЕ Т.Характеристика.КР_КодТНВЭД.КР_Маркируется
			//	|	И ИСТИНА"
			//); 
			// Конец было
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ИСТИНА",
				"И НЕ Т.Характеристика.КР_КодТНВЭД.злМаркировкаДляМаркетплейсов
				|	И ИСТИНА"
			);
			// <-- Евлахов Игорь Николаевич (Конец) 12.07.2024
		КонецЕсли;	
	КонецЕсли;	
	Если ОтборАксессуары <> Неопределено Тогда   
		Если ОтборАксессуары Тогда 
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ИСТИНА",
				"И Т.Номенклатура.ВидНоменклатуры В ИЕРАРХИИ (&Аксессуары)
				|	И ИСТИНА"
			); 
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ИСТИНА",
				"И НЕ Т.Номенклатура.ВидНоменклатуры В ИЕРАРХИИ (&Аксессуары)
				|	И ИСТИНА"
			); 
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСтрокиСУчетомОтбораМаркировкаАксессуары(
	ОтборМаркированныйТовар = Неопределено, ОтборАксессуары = Неопределено)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.НомерСтроки - 1 КАК ИндексСтроки,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ИндексСтроки КАК ИндексСтроки
	|ИЗ
	|	ТабличнаяЧасть КАК Т
	|ГДЕ
	|	ИСТИНА
	|	И ИСТИНА";
		
	Если ОтборМаркированныйТовар <> Неопределено Тогда    
		Если ОтборМаркированныйТовар Тогда
			// --> Евлахов Игорь Николаевич (Начало) 12.07.2024
			// Задача #4395
			// Начало было
			//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ИСТИНА",
			//	"И Т.Характеристика.КР_КодТНВЭД.КР_Маркируется
			//	|	И ИСТИНА"
			//);
			// Конец было
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ИСТИНА",
				"И Т.Характеристика.КР_КодТНВЭД.злМаркировкаДляМаркетплейсов
				|	И ИСТИНА"
			);
			// <-- Евлахов Игорь Николаевич (Конец) 12.07.2024
		Иначе
			// --> Евлахов Игорь Николаевич (Начало) 12.07.2024
			// Задача #4395
			// Начало было
			//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ИСТИНА",
			//	"И НЕ Т.Характеристика.КР_КодТНВЭД.КР_Маркируется
			//	|	И ИСТИНА"
			//);
			// Конец было
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ИСТИНА",
				"И НЕ Т.Характеристика.КР_КодТНВЭД.злМаркировкаДляМаркетплейсов
				|	И ИСТИНА"
			);
			// <-- Евлахов Игорь Николаевич (Конец) 12.07.2024
		КонецЕсли;	
	КонецЕсли;	
	Если ОтборАксессуары <> Неопределено Тогда   
		Если ОтборАксессуары Тогда 
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ИСТИНА",
				"И Т.Номенклатура.ВидНоменклатуры В ИЕРАРХИИ (&Аксессуары)
				|	И ИСТИНА"
			); 
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ИСТИНА",
				"И НЕ Т.Номенклатура.ВидНоменклатуры В ИЕРАРХИИ (&Аксессуары)
				|	И ИСТИНА"
			); 
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыПриходногоОрдераПоУпаковочнымЛистам()
	
	Возврат
	"ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Количество КАК Количество,
	|	Т.Количество КАК КоличествоУпаковок,
	|	Т.Ссылка КАК УпаковочныйЛист
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка В(&УпаковочныеЛисты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК ЭтоУпаковочныйЛист,
	|	Т.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка) КАК УпаковочныйЛистРодитель,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	1 КАК Количество,
	|	1 КАК КоличествоУпаковок
	|ИЗ
	|	Товары КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка),
	|	Т.УпаковочныйЛист,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Количество,
	|	Т.КоличествоУпаковок
	|ИЗ
	|	Товары КАК Т";
	
КонецФункции

Функция ТекстЗапросаПоступленияНаСкладПоРеспоряжению()
	
	Возврат
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.Ссылка.ПометкаУдаления КАК СсылкаПометкаУдаления,
	|	Т.КР_ПоступлениеПоОрдеру КАК Ордер
	|ИЗ
	|	Документ.ПоступлениеТоваровНаСклад КАК Т
	|ГДЕ
	|	Т.Распоряжение = &Распоряжение
	|	И Т.КР_ИдентификаторСистемыИсточника = &ИдентификаторСистемыИсточника";
	
КонецФункции

Функция ТекстЗапросаПолучитьНомераГТДДляЗаполненияВТаблице()

	Возврат 
	"ВЫБРАТЬ
	|	Т.НомерСтроки - 1 КАК ИндексСтроки,
	|	Т.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ИндексСтроки КАК ИндексСтроки,
	|	Т.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ НоменклатураСГТД
	|ИЗ
	|	СписокНоменклатуры КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТНоменклатура
	|		ПО Т.Номенклатура = ТНоменклатура.Ссылка
	|			И (ТНоменклатура.ВестиУчетПоГТД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ДатаПоступления КАК ДатаПоступления,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.НомерГТД КАК НомерГТД
	|ПОМЕСТИТЬ БлижайшиеДатыПоступленияТоваровОрганизаций
	|ИЗ
	|	РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК Т
	|ГДЕ
	|	Т.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) 
	// A2105505-2278
	//|	И Т.ВидЗапасов.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.СобственныйТоварВПути)  
	//	
	|	И Т.ВидЗапасов.Организация = &Организация
	|	И Т.Номенклатура В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Т.Номенклатура
	|			ИЗ
	|				НоменклатураСГТД КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Т.ДатаПоступления) КАК ДатаПоступления,
	|	Т.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ МаксимальныеДатыПоступленияТоваровОрганизаций
	|ИЗ
	|	БлижайшиеДатыПоступленияТоваровОрганизаций КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(Т.НомерГТД) КАК НомерГТД
	|ПОМЕСТИТЬ СписокГТД
	|ИЗ
	|	БлижайшиеДатыПоступленияТоваровОрганизаций КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеДатыПоступленияТоваровОрганизаций КАК М
	|		ПО Т.ДатаПоступления = М.ДатаПоступления
	|			И Т.Номенклатура = М.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСГТД.ИндексСтроки КАК ИндексСтроки,
	|	НЕ СписокГТД.НомерГТД ЕСТЬ NULL КАК ЕстьНомерГТД,
	|	СписокГТД.НомерГТД КАК НомерГТД
	|ИЗ
	|	НоменклатураСГТД КАК НоменклатураСГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокГТД КАК СписокГТД
	|		ПО НоменклатураСГТД.Номенклатура = СписокГТД.Номенклатура";
	
КонецФункции

Функция ТекстЗапросаПолучитьЗаказыПоНомерамПоставщика()

	Возврат
	"ВЫБРАТЬ
	|	ЗаказПоставщику.НомерПоДаннымПоставщика КАК НомерПоДаннымПоставщика,
	|	ЗаказПоставщику.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.НомерПоДаннымПоставщика В(&МассивНомеровЗаказов)";
	
КонецФункции

Функция ТекстЗапросаПолучитьСтавкуНДСПоПеречислению()

	Возврат
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК Т
	|ГДЕ
	|	НЕ Т.ПометкаУдаления
	|	И Т.ПеречислениеСтавкаНДС = &ПеречислениеСтавкаНДС
	|	И Т.НачалоПериода <= &ЗначениеНаДату
	|	И (Т.КонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ Т.КонецПериода >= &ЗначениеНаДату)";
	
КонецФункции

Функция ТекстЗапросаЗаказыПриобретенияНаУдаление()

	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ЗаказПоставщику КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|	И НЕ Т.ЗаказПоставщику В (&АктуальныеЗаказы)";
	
КонецФункции

Функция ТекстЗапросаКоэффициентыРаспределенияПоКомплектам()
	
	Возврат
	"ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.Ссылка КАК ДокументОснование,
	|	ЕСТЬNULL(ПриобретениеТоваровУслугТовары.Номенклатура.КоллекцияНоменклатуры,
	|		ЗНАЧЕНИЕ(Справочник.КоллекцииНоменклатуры.ПустаяСсылка)) КАК КоллекцияНоменклатуры, 
	|	СУММА(ПриобретениеТоваровУслугТовары.Количество) КАК Количество,
	|	СУММА(ПриобретениеТоваровУслугТовары.Сумма) КАК Сумма,
	|	СУММА(ПриобретениеТоваровУслугТовары.КР_ВесБрутто) КАК Вес
	|ПОМЕСТИТЬ Детализация
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.Ссылка В(&Ссылки)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриобретениеТоваровУслугТовары.Ссылка,
	|	ПриобретениеТоваровУслугТовары.Номенклатура.КоллекцияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Детализация.КоллекцияНоменклатуры) КАК ВсегоКоллекций,
	|	СУММА(Детализация.Количество) КАК Количество,
	|	СУММА(Детализация.Сумма) КАК Сумма,
	|	СУММА(Детализация.Вес) КАК Вес
	|ПОМЕСТИТЬ Итог
	|ИЗ
	|	Детализация КАК Детализация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Детализация.ДокументОснование КАК ДокументОснование,
	|	Детализация.КоллекцияНоменклатуры КАК КоллекцияНоменклатуры,
	|	Детализация.Количество / Итог.Количество КАК КоличествоКоэфф,
	|	Детализация.Сумма / Итог.Сумма КАК СуммаКоэфф,
	|	ВЫБОР
	|		КОГДА Итог.Вес > 0
	|			ТОГДА Детализация.Вес / Итог.Вес
	|		ИНАЧЕ 1 / Итог.ВсегоКоллекций
	|	КОНЕЦ КАК ВесКоэфф,
	|	Итог.ВсегоКоллекций КАК ВсегоКоллекций
	|ИЗ
	|	Детализация КАК Детализация,
	|	Итог КАК Итог";
	
КонецФункции

Функция ТекстЗапросаСвязьКоробаСРазмещениемПоПеремещению()

	Возврат
	"ВЫБРАТЬ
	|	Т.КР_Короб КАК Короб,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	СУММА(Т.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСКоробами
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка = &ПеремещениеТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.КР_Короб,
	|	Т.Номенклатура,
	|	Т.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.КР_Короб КАК Короб,
	|	Т.Ссылка КАК ОтборРазмещениеТоваров,
	|	Т.ПометкаУдаления КАК ОтборРазмещениеТоваровПометкаУдаления
	|ПОМЕСТИТЬ СозданныеРазмещения
	|ИЗ
	|	Документ.ОтборРазмещениеТоваров КАК Т
	|ГДЕ
	|	Т.Распоряжение = &ПеремещениеТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ОтборРазмещениеТоваров КАК Ссылка
	|ИЗ
	|	СозданныеРазмещения КАК Т
	|ГДЕ
	|	НЕ Т.ОтборРазмещениеТоваровПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Короб КАК Короб,
	|	ЕСТЬNULL(Р.ОтборРазмещениеТоваров, 
	|		ЗНАЧЕНИЕ(Документ.ОтборРазмещениеТоваров.ПустаяСсылка)) КАК ОтборРазмещениеТоваров,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Количество КАК Количество,
	|	Т.Количество КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыСКоробами КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ СозданныеРазмещения КАК Р
	|		ПО Т.Короб = Р.Короб
	|ИТОГИ
	|	МАКСИМУМ(ОтборРазмещениеТоваров)
	|ПО
	|	Короб";
	
КонецФункции

Функция КР_ТекстЗапросаДанныеПоПриемке()
	
	Возврат
	"ВЫБРАТЬ
	|	ОтборРазмещениеТоваров.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДокументыРазмещения
	|ИЗ
	|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
	|ГДЕ
	|	ОтборРазмещениеТоваров.Распоряжение В(&Основания)
	|	И ОтборРазмещениеТоваров.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборРазмещениеТоваровТоварыРазмещение.Номенклатура КАК Номенклатура,
	|	ОтборРазмещениеТоваровТоварыРазмещение.Характеристика КАК Характеристика,
	|	ОтборРазмещениеТоваровТоварыРазмещение.КоличествоРазмещено КАК КоличествоПоДокументу,
	|	ОтборРазмещениеТоваровТоварыРазмещение.КоличествоУпаковокРазмещено КАК Количество
	|ИЗ
	|	ВТ_ДокументыРазмещения КАК ВТ_ДокументыРазмещения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК ОтборРазмещениеТоваровТоварыРазмещение
	|		ПО ВТ_ДокументыРазмещения.Ссылка = ОтборРазмещениеТоваровТоварыРазмещение.Ссылка";
	
КонецФункции 

#КонецОбласти
