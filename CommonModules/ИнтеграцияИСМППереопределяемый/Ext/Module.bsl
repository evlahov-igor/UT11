#Область ПрограммныйИнтерфейс

//Определяет использование актов о расхождении после приемки для документа
//
//Параметры:
//  Документ     - ДокументСсылка - документ, для которого необходимо определить возможность использования актов о расхождении.
//  Используется - Булево - в данный параметр необходимо установить признак использования актов, по умолчанию установлен в Ложь.
//
Процедура ОпределитьИспользованиеАктовОРасхожденииПослеПриемки(Документ, Используется) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияИСМПУТ.ОпределитьИспользованиеАктовОРасхожденииПослеПриемки(Документ, Используется);
	//-- НЕ ГОСИС
	
КонецПроцедуры

//Заполняет в переданную таблицу данные из ТЧ документа.
//
//Параметры:
//   Документ - ДокументСсылка - Документ из ТЧ которого будет происходить заполнение.
//   ТаблицаПродукции - ТаблицаЗначений - Таблица для заполнения данными из документа.
//   ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив из ПеречислениеСсылка.ВидыПродукцииИС - 
//     вид(ы) маркируемой продукции, которым(и) необходимо заполнить таблицу.
//
Процедура СформироватьТаблицуМаркируемойПродукцииДокумента(Документ, ТаблицаПродукции, ВидМаркируемойПродукции) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияИСМПУТ.СформироватьТаблицуМаркируемойПродукцииДокумента(Документ, ТаблицаПродукции, ВидМаркируемойПродукции);
	//-- НЕ ГОСИС
	
КонецПроцедуры

//Заполняет таблицу маркированный товаров по выбранным документам.
//
//Параметры:
//   Запрос - Запрос - запрос, в котором требуется сформировать временную таблицу.
//   ИсточникОснований - Строка - Имя временной таблицы с колонкой "ДокументОснование".
//   СтандартнаяОбработка - Булево - Необходимость обработки события "по-умолчанию" (установить Ложь при переопределении).
//
Процедура СформироватьТаблицуМаркированныхТоваровОснований(Запрос, ИсточникОснований, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСМПУТ.СформироватьТаблицуМаркированныхТоваровОснований(Запрос, ИсточникОснований);
	//-- НЕ ГОСИС
	
КонецПроцедуры

//Дополнительные действия прикладной конфигурации при изменении статуса документа ИСМП.
//
//Параметры:
//   ДокументСсылка   - ДокументСсылка     - ссылка на документ с изменением статуса.
//   ПредыдущийСтатус - ПеречислениеСсылка - предыдущий статус обработки.
//   НовыйСтатус      - ПеречислениеСсылка - новый статус обработки.
//   ПараметрыОбновленияСтатуса - Структура, Неопределено - (См. ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса).
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса = Неопределено) Экспорт

	Возврат;

КонецПроцедуры

#Область Серии

//Предназачена для реализации механизма генерации серий номенклатуры по переданным данным
//  (См. ИнтеграцияИСМП.СгенерироватьСерии)
//
Процедура СгенерироватьСерии(ДанныеДляГенерации, ВидМаркируемойПродукции) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияИСМПУТ.СгенерироватьСерии(ДанныеДляГенерации, ВидМаркируемойПродукции);
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

// Определяет заполнение Товарного знака по номенклатуре.
// 
// Параметры:
// 	Номенклатура - Массив из ОпределяемыйТип.Номенклатура - Исходные данные для заполнения.
// 	ТоварныеЗнакиПоНоменклатуре - Соответствие:
// 	 * Ключ     - ОпределяемыйТип.Номенклатура - Значение номенклатуры из исходных данных.
// 	 * Значение - Строка, произвольный         - Товарный знак по номенклатуре (значение будет конвертировано в строку).
Процедура ТоварныеЗнакиПоНоменклатуре(Номенклатура, ТоварныеЗнакиПоНоменклатуре) Экспорт
	
	//++ НЕ ГОСИС
	ТоварныеЗнакиПоНоменклатуре = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Номенклатура, "Производитель");
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

//Получение ссылки ТН ВЭД по коду.
//
//Параметры:
//  КодТНВЭД - Строка - Код по классификатору товарной номенклатуры внешнеэкономической деятельности.
//  ТНВЭД - Произвольный - искомый элемент.
//
Процедура КлассификаторТНВЭД(КодТНВЭД, ТНВЭД) Экспорт
	
	//++ НЕ ГОСИС
	ТНВЭД = Справочники.КлассификаторТНВЭД.ПустаяСсылка();
	Если ЗначениеЗаполнено(КодТНВЭД) Тогда
		ТНВЭД = Справочники.КлассификаторТНВЭД.НайтиПоКоду(КодТНВЭД);
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Предназначена для поиска по коду элемента в Классификаторе ТН ВЭД.
// Если элемент не найден, то, при использовании классификатора, создать элемент справочника в соответствии с классификатором ТН ВЭД ЕАЭС.
// 
// Параметры:
//  КодТНВЭД - Строка - Строка с кодом классификатора ТН ВЭД.
//  ДанныеЭлемента - Структура - Переопределяемый параметр, содержащий структуру со свойствами:
//   * ЭлементСправочника - Произвольный - Ссылка на элемент классификатора.
//   * НаименованиеПолное - Строка - наименование найденного элемента классификатора.
Процедура ПриОпределенииСопоставленногоКлассификатораТНВЭД(КодТНВЭД, ДанныеЭлемента) Экспорт
	
	//++ НЕ ГОСИС
	
	ЭлементСправочника = Справочники.КлассификаторТНВЭД.НайтиСоздатьЭлементКлассификатораТНВЭД(КодТНВЭД);
	Если ЭлементСправочника <> Неопределено Тогда
		ДанныеЭлемента.ЭлементСправочника = ЭлементСправочника;
		ДанныеЭлемента.НаименованиеПолное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементСправочника, "НаименованиеПолное");
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
КонецПроцедуры

#Область КаталогGS46

// Заполняет свойства номенклатуры, используемые для передачи в каталог GS46. Могут быть заполнены колонки:
//   * Торговая марка,
//   * Страна производства,
//   * Вид обуви,
//   * Материал верха,
//   * Материал подкладки,
//   * Материал низа,
//   * Цвет,
//   * Размер.
// 
// Параметры:
//   Товары - ДанныеФормыКоллекция - таблица для заполнения.
//
Процедура ЗаполнитьСвойстваНоменклатурыДляКаталогаGS46(Товары) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.КодТНВЭД       КАК КодТНВЭД,
	|	Товары.GTIN           КАК GTIN
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN                                           КАК GTIN,
	|	Товары.Номенклатура                                   КАК Номенклатура,
	|	Товары.Характеристика                                 КАК Характеристика,
	|	Товары.КодТНВЭД                                       КАК КодТНВЭД,
	|	ПРЕДСТАВЛЕНИЕ(СправочникНоменклатура.ВидНоменклатуры) КАК ВидОбуви,
	|	ПРЕДСТАВЛЕНИЕ(ХарактеристикиНоменклатуры.Ссылка)      КАК Размер,
	|	ПРЕДСТАВЛЕНИЕ(СправочникНоменклатура.Ссылка)          КАК Наименование,
	|	СправочникНоменклатура.Марка                          КАК ТорговаяМарка
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО Товары.Характеристика = ХарактеристикиНоменклатуры.Ссылка";
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого СтрокаТовар Из Товары Цикл
		СтрокаТовар.Наименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовар.Наименование,
			СтрокаТовар.Размер);
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

Процедура ЗагрузитьПолученныеGTINКаталогаGS46(Товары) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.GTIN КАК GTIN
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN                                           КАК Штрихкод,
	|	Товары.Номенклатура                                   КАК Номенклатура,
	|	Товары.Характеристика                                 КАК Характеристика
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.GTIN = Штрихкоды.Штрихкод
	|ГДЕ
	|	Штрихкоды.Штрихкод ЕСТЬ NULL";
	
	Набор = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
	СтрокаНабора = Набор.Добавить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
		Набор.Отбор.Штрихкод.Установить(Выборка.Штрихкод, Истина);
		Набор.Записать();
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПанельАдминистрированияИСМП

// Предназначения для управления признаком возможности включения / отключения ведения учета МРЦ табачной продукции.
// При заполнении причины - соответствующая доступность изменяется, на форме отображатеся указанная причина.
// Например, можно запретить отключение функции, если ведется учет МРЦ в составе серий или характеристик.
// 
//Параметры:
//  ВозможноВключение              - Булево - Признак возможности включения.
//  ПричинаНевозможностиВключения  - Строка - Причина, по которой невозможно включить учет МРЦ.
//  ВозможноОтключение             - Булево - Признак возможности отключения.
//  ПричинаНевозможностиОтключения - Строка - Причина, по которой невозможно выключить учет МРЦ.
Процедура ПриОпределенииВозможностиВключенияОтключенияВеденияУчетаМРЦ(ВозможноВключение, ПричинаНевозможностиВключения, ВозможноОтключение, ПричинаНевозможностиОтключения) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияИСМПУТ.ПриОпределенииВозможностиВключенияОтключенияВеденияУчетаМРЦ(
		ВозможноВключение,
		ПричинаНевозможностиВключения,
		ВозможноОтключение,
		ПричинаНевозможностиОтключения);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Требуется определить массив ссылок организаций, исключаемых из отображаемого списка в общей форме "ФормаВыбораСпискаОрганизацийИСМП".
// 
// Параметры:
//  СписокОрганизаций - Массив из ОпределяемыйТип.Организация - переопределяемый параметр, массив организаций, исключаемых из списка отбора.
Процедура ПриОпределенииСпискаОрганизацийНедоступныхДляВыбора(СписокОрганизаций) Экспорт
	
	//++ НЕ ГОСИС
	
	ИнтеграцияИСМПУТ.ПриОпределенииСпискаОрганизацийНедоступныхДляВыбора(СписокОрганизаций);
	
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область МаркировкаОстатков

// Определяет ссылку на документ-основание маркировки товаров, как документ, являющийся основанием для маркировки остатков.
// 
// Параметры:
// 	СсылкаНаДокумент   - ОпределяемыйТип.ОснованиеМаркировкаТоваровИСМП - Ссылка на проверямый документ.
// 	ЯвляетсяОснованием - Булево                                         - Выходной параметр.
Процедура ЯвляетсяОснованиемДляМаркировкиОстатков(СсылкаНаДокумент, ЯвляетсяОснованием) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияИСМПУТ.ЯвляетсяОснованиемДляМаркировкиОстатков(СсылкаНаДокумент, ЯвляетсяОснованием);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийДокументов

//Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
//Параметры:
//   ДокументОбъект - ДокументОбъект - заполняемый документ,
//   ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//   ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//   СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт

	//++ НЕ ГОСИС
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ДанныеЗаполнения.Свойство("Организация", ДокументОбъект.Организация);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказНаЭмиссиюКодовМаркировкиСУЗ") Тогда
		ИнтеграцияИСМПУТ.ОбработкаЗаполненияДокументаЗаказНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.МаркировкаТоваровИСМП") Тогда
		ИнтеграцияИСМПУТ.ОбработкаЗаполненияДокументаМаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеКодовМаркировкиИСМП") Тогда
		ИнтеграцияИСМПУТ.ОбработкаЗаполненияДокументаСписаниеКодовМаркировкиИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВыводИзОборотаИСМП") Тогда
		ИнтеграцияИСМПУТ.ОбработкаЗаполненияДокументаВыводИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПеремаркировкаТоваровИСМП") Тогда
		ИнтеграцияИСМПУТ.ОбработкаЗаполненияДокументаПеремаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратВОборотИСМП") Тогда
		ИнтеграцияИСМПУТ.ОбработкаЗаполненияДокументаВозвратВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтгрузкаТоваровИСМП") Тогда
		ИнтеграцияИСМПУТ.ОбработкаЗаполненияДокументаОтгрузкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказНаЭмиссиюКодовМаркировкиСУЗ")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.МаркировкаТоваровИСМП")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеКодовМаркировкиИСМП")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВыводИзОборотаИСМП")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПеремаркировкаТоваровИСМП")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратВОборотИСМП")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтгрузкаТоваровИСМП") Тогда
				ДокументОбъект.Организация = Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДокументов

//Вызывается при выполнении заполнения набора из какого-либо значения.
//
//Параметры:
//   РегистрСведенийНаборЗаписей - РегистрСведенийНаборЗаписей - заполняемый регистр сведений,
//   ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//   СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияРегистраСведений(РегистрСведенийНаборЗаписей, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ДанныеЗаполнения.Вставить("Организация", Справочники.Организации.ПолучитьОрганизациюПоУмолчанию());
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;

КонецПроцедуры

#КонецОбласти

#Область ТипыРасхожденийКодовМаркировки

// Реализовать получение значение Брак определяемого типа ТипРасхожденияИСМП.
// Параметры:
//  ТипРасхождения - ОпределяемыйТип.ТипРасхожденияИСМП - для определения типа расхождения
Процедура ПриОпределенииТипаРасхожденияИСМПБрак(ТипРасхождения) Экспорт
	
	//++ НЕ ГОСИС
	ТипРасхождения = ИнтеграцияИСМПУТ.ТипРасхожденияИСМПБрак();
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Реализовать получение значение Излишек определяемого типа ТипРасхожденияИСМП.
// Параметры:
//  ТипРасхождения - ОпределяемыйТип.ТипРасхожденияИСМП - для определения типа расхождения
Процедура ПриОпределенииТипаРасхожденияИСМПИзлишек(ТипРасхождения) Экспорт
	
	//++ НЕ ГОСИС
	ТипРасхождения = ИнтеграцияИСМПУТ.ТипРасхожденияИСМПИзлишек();
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Реализовать получение значение Недостача определяемого типа ТипРасхожденияИСМП.
// Параметры:
//  ТипРасхождения - ОпределяемыйТип.ТипРасхожденияИСМП - для определения типа расхождения
//  
Процедура ПриОпределенииТипаРасхожденияИСМПНедостача(ТипРасхождения) Экспорт
	
	//++ НЕ ГОСИС
	ТипРасхождения = ИнтеграцияИСМПУТ.ТипРасхожденияИСМПНедостача();
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныйПрограммныйИнтерфейс

#Область Отладка

Процедура ПриОпределенииПутиКФайлуЛогирования(ПутьКФайлу) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив - массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  МассивНепроверяемыхРеквизитов - Массив - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
Процедура ПриОпределенииОбработкиПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	//++ НЕ ГОСИС
	Если    ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказНаЭмиссиюКодовМаркировкиСУЗ")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.МаркировкаТоваровИСМП")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВыводИзОборотаИСМП")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеКодовМаркировкиИСМП")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтгрузкаТоваровИСМП") Тогда
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	КонецЕсли;
	
	Если    ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказНаЭмиссиюКодовМаркировкиСУЗ")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтгрузкаТоваровИСМП") Тогда
		
		НоменклатураСервер.ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область GTIN

// Дополняет массив текстов запроса получения GTIN для объединения.
// Ожидается, что в результате запроса будут получены значения GTIN(EAN).
// Во входящем параметре запроса текс запроса уже имеется, необходимо добавлять тексты запроса для объединеия:
// без псевдонимов и с количеством выбираемых полей - 1.
// В запросе установлены параметры: &Номенклатура, &Характеристика - данные из текущей коллекции.
//
// Параметры:
//  ТекущиеДанные         - ДанныеФормыЭлементКоллекции - Текущая строка формы.
//  Объект                - ДанныеФормыСтруктура        - Текущая строка формы.
//  Запрос                - Запрос                      - Запрос, в который можно установить параметры.
//  МассивТекстовЗапросов - Массив из Строка            - Тексты запроса для объединеиня.
Процедура ДополнитьПараметрыЗапросаПриНачалеВыбораGTIN(ТекущиеДанные, Объект, Запрос, МассивТекстовЗапросов) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияИСУТ.ДополнитьПараметрыЗапросаПриНачалеВыбораGTIN(
		ТекущиеДанные, Объект, Запрос, МассивТекстовЗапросов);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектроннаяПодпись

// Предназначена для получения сертификата на компьютере по строке отпечатка.
// (См. ЭлектроннаяПодписьСлужебный.ПолучитьСертификатПоОтпечатку)
//
// Параметры:
//   Сертификат             - СертификатКриптографии - найденный сертификат электронной подписи и шифрования.
//   Отпечаток              - Строка - Base64 кодированный отпечаток сертификата.
//   ТолькоВЛичномХранилище - Булево - если Истина, тогда искать в личном хранилище, иначе везде.
//   СтандартнаяОбработка   - Булево - признак обработки стандартной библиотекой (установить Ложь при переопределении)
//
Процедура ПриОпределенииСертификатаПоОтпечатку(Сертификат, Отпечаток, ТолькоВЛичномХранилище, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Процедура заполняет признак использования производства на стороне.
//
// Параметры:
//  Используется - Булево - Признак использования производства на стороне.
Процедура ИспользуетсяПереработкаНаСтороне(Используется) Экспорт

	//++ НЕ ГОСИС


	//-- НЕ ГОСИС
	Возврат;

КонецПроцедуры

// Процедура заполняет признак использования гос.контрактов по 275ФЗ.
//
// Параметры:
//  Используется - Булево - Признак использования гос.контрактов по 275ФЗ. Значение по умолчанию Ложь.
Процедура ИспользуетсяПоддержкаПлатежейВСоответствииС275ФЗ(Используется) Экспорт

	//++ НЕ ГОСИС


	//-- НЕ ГОСИС
	Возврат;

КонецПроцедуры

// Процедура заполняет признак использования производственного объекта.
//
// Параметры:
//  Используется - Булево - Признак использования производственного объекта.
Процедура ПриОпределенииИспользованияПроизводственногоОбъекта(Используется) Экспорт

	//++ НЕ ГОСИС

	Используется = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");

	//-- НЕ ГОСИС
	Возврат;

КонецПроцедуры

// Процедура заполняет признак использования передачи товаров между организациями.
// Вызывается из документа ОтгрузкаТоваровИСМП для определения доступных типов элемента формы Контрагент.
//
// Параметры:
//  Используется - Булево - Признак использования передачи товаров между организациями, значение по умолчанию Ложь.
Процедура ПриОпределенииИспользованияПередачиТоваровМеждуОрганизациями(Используется) Экспорт
	
	//++ НЕ ГОСИС
	
	Используется = ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями");
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

Процедура ПриОпределенииСкладаДокументаОснования(Склад, ДокументОснование) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияИСМПУТ.ОпределитьСкладДокументаОснования(Склад, ДокументОснование);
	//-- НЕ ГОСИС
	
КонецПроцедуры

Процедура ЗаполнитьКодыТНВЭДПоНоменклатуреВТабличнойЧасти(ТабличнаяЧасть) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура
	|ПОМЕСТИТЬ вт_Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Товары.НомерСтроки КАК НомерСтроки,
	|	вт_Товары.Номенклатура,
	|	вт_Товары.Номенклатура.КодТНВЭД.Код КАК КодТНВЭД
	|ИЗ
	|	вт_Товары КАК вт_Товары
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Товары", ТабличнаяЧасть.Выгрузить(, "НомерСтроки, Номенклатура"));
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТабличнаяЧасть[Выборка.НомерСтроки - 1].КодТНВЭД = Выборка.КодТНВЭД;
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти