
#Область СлужебныйПрограммныйИнтерфейс

// Формирует представление отбора по маркируемой продукции по текущей строке дерева
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма для отображения настроек
//  ДанныеВыбора - Структура - Данные текущей строки номенклатуры
Процедура ОтобразитьФильтрПоМаркируемойПродукции(Форма, ДанныеВыбора = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	Если Элементы.Найти("ГруппаУстановитьОтборПоТекущейСтроке") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.СохраненВыборПоМаркируемойПродукции Тогда
		
		Элементы.ГруппаУстановитьОтборПоТекущейСтроке.Видимость = Ложь;
		
	Иначе
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Текущие данные:'"));
		МассивСтрок.Добавить(" ");
		
		ТребуетсяЗапятая = Ложь;
		Если ДанныеВыбора.Свойство("Номенклатура") И ЗначениеЗаполнено(ДанныеВыбора.Номенклатура) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(ДанныеВыбора.Номенклатура), Ложь),,
				Форма.ЦветТекстаПоля,, "ОткрытьНоменклатуру"));
			ТребуетсяЗапятая = Истина;
		ИначеЕсли ДанныеВыбора.Свойство("ПредставлениеНоменклатуры") И ЗначениеЗаполнено(ДанныеВыбора.ПредставлениеНоменклатуры) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ДанныеВыбора.ПредставлениеНоменклатуры,,
				Форма.ЦветТекстаПоля,, "ОткрытьНоменклатуру"));
			ТребуетсяЗапятая = Истина;
		Иначе
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				"Номенклатура не выбрана",,
				Форма.ЦветТекстаПоля));
			Форма.ПредставлениеУстановитьОтбор = Новый ФорматированнаяСтрока(МассивСтрок);
			Элементы.ГруппаУстановитьОтборПоТекущейСтроке.Видимость = Истина;
			Возврат;
			
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("Характеристика") И ЗначениеЗаполнено(ДанныеВыбора.Характеристика) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(ДанныеВыбора.Характеристика), Ложь),,
				Форма.ЦветТекстаПоля,, "ОткрытьХарактеристику"));
			ТребуетсяЗапятая = Истина;
		КонецЕсли;
		
		МассивСтрок.Добавить(". (");
		
		МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'Установить отбор'"),
					Новый Шрифт(,,,,Истина),
					Форма.ЦветГиперссылки,,
					"СохранитьДанныеВыбораПоМаркируемойПродукции"));
		
		МассивСтрок.Добавить(")");
		
		Форма.ПредставлениеУстановитьОтбор = Новый ФорматированнаяСтрока(МассивСтрок);
		
		Элементы.ГруппаУстановитьОтборПоТекущейСтроке.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает итоги по проверке содержимого упаковки для дерева маркируемой продукции.
// 
// Параметры:
//  ДеревоМаркированнойПродукции - ДеревоЗначений - Дерево маркированной продукции.
//  Фильтр - Строка - значение фильтра, установленного для дерева маркированной продукции на форме результатов сверки.
//  ЭтоПродукцияМОТП - Булево - признак использования групповых упаковок для проверяемых кодов маркировки.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции, Фильтр = Неопределено, ЭтоПродукцияМОТП = Ложь) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		Если Фильтр = "ЭДОРасхождения" и СтрокаДерева.НеСоответствуетОтборуЭДО Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоПродукцияМОТП Тогда
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиМОТП(СтрокаДерева, Фильтр);
		Иначе
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Фильтр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


// Пересчитывает итоги по проверке содержимого упаковки для строки дерева маркируемой продукции (групповые упаковки не используются).
// 
// Параметры:
//  СтрокаДерева - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
//  Фильтр       - Строка - установленный фильтр на форме.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Фильтр = Неопределено) Экспорт
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = 0;
	СтрокаДерева.КоличествоПодчиненныхУпаковок      = 0;
	СтрокаДерева.КоличествоПодчиненныхВсего         = 0;
	
	СтрокаДерева.КоличествоПодчиненныхВНаличии      = 0;
	СтрокаДерева.КоличествоПодчиненныхОтсутствует   = 0;
	СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = 0;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если Фильтр = "Все" и ПодчиненнаяСтрока.НеСоответствуетОтборуВсе Тогда
			Продолжить;
		ИначеЕсли Фильтр = "ФактическиеРасхождения" 
			И (ПодчиненнаяСтрока.НеСоответствуетОтбору Или ПодчиненнаяСтрока.НеСоответствуетОтборуВсе) Тогда
			Продолжить;
		ИначеЕсли Фильтр = "ЭДОРасхождения" и ПодчиненнаяСтрока.НеСоответствуетОтборуЭДО
			И СтрокаДерева.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.НедопустимыйКодМаркировки
			Или ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхОтсутствует + 1;
								
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхНеЧислилось + 1;
			
		КонецЕсли;
		
		ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ПодчиненнаяСтрока, Фильтр);
		
		Если ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + 1;
			
		Иначе
			
			СтрокаДерева.КоличествоПодчиненныхУпаковок = СтрокаДерева.КоличествоПодчиненныхУпаковок + 1;
			
		КонецЕсли;
		
		СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + ПодчиненнаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок;
		СтрокаДерева.КоличествоПодчиненныхУпаковок      = СтрокаДерева.КоличествоПодчиненныхУпаковок      + ПодчиненнаяСтрока.КоличествоПодчиненныхУпаковок;
		
		СтрокаДерева.КоличествоПодчиненныхВНаличии      = СтрокаДерева.КоличествоПодчиненныхВНаличии      + ПодчиненнаяСтрока.КоличествоПодчиненныхВНаличии;
		СтрокаДерева.КоличествоПодчиненныхОтсутствует   = СтрокаДерева.КоличествоПодчиненныхОтсутствует   + ПодчиненнаяСтрока.КоличествоПодчиненныхОтсутствует;
		СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = СтрокаДерева.КоличествоПодчиненныхНеЧислилось   + ПодчиненнаяСтрока.КоличествоПодчиненныхНеЧислилось;
		
	КонецЦикла;
	
	СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхУпаковок + СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
	
	СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева, Фильтр);
	УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	
КонецПроцедуры

// Формирует представление содержимого упаковки по текущей строке (ИСМП).
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
//  Фильтр        - Строка - установленный фильтр на форме.
//
Процедура СформироватьПредставлениеСодержимогоУпаковки(ТекущаяСтрока, Фильтр) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ПредставлениеСодержимоеУпаковки) 
			  И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатуры(
				ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика,, ТекущаяСтрока.Серия);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхВсего = 0 Тогда
		
		Если ТекущаяСтрока.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<нет>'");
		ИначеЕсли ТекущаяСтрока.СодержимоеНедоступно Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<состав недоступен>'");
		Иначе
			Если Фильтр = "ЭДОРасхождения" Тогда
				ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<состояние короба неизвестно>'");
			Иначе
				ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<пустая упаковка>'");
			КонецЕсли;	
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = "";
		
		Если ТекущаяСтрока.КоличествоПодчиненныхУпаковок > 0 Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрШаблон(НСтр("ru = 'коробов - %1'"), ТекущаяСтрока.КоличествоПодчиненныхУпаковок);
		КонецЕсли;
			
		Если ТекущаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок > 0 Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = ТекущаяСтрока.ПредставлениеСодержимоеУпаковки
				+ ?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеСодержимоеУпаковки), "", ", ")
				+ СтрШаблон(НСтр("ru = 'товаров - %1'"), ТекущаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает итоги по проверке содержимого упаковки для строки дерева маркируемой продукции (групповые упаковки используются).
// 
// Параметры:
//  СтрокаДерева - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
//  Фильтр       - Строка - установленный фильтр на форме.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиМОТП(СтрокаДерева, Фильтр = Неопределено) Экспорт
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Если Не СтрокаДерева.НеПересчитыватьКоличествоПотребительскихУпаковок Тогда
		СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = 0;
	КонецЕсли;
	
	СтрокаДерева.КоличествоПодчиненныхУпаковок      = 0;
	СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок = 0;
	СтрокаДерева.КоличествоПодчиненныхВсего         = 0;
	
	СтрокаДерева.КоличествоПодчиненныхВНаличии      = 0;
	СтрокаДерева.КоличествоПодчиненныхОтсутствует   = 0;
	СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = 0;
	
	Если СтрокаДерева.НеПересчитыватьКоличествоПотребительскихУпаковок Тогда
		
		СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок = 0;
		СтрокаДерева.КоличествоПодчиненныхУпаковок = 0;
		
		Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
			
		ИначеЕсли СтрокаДерева.НедопустимыйКодМаркировки
			Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
			
		КонецЕсли;
		
	Иначе
	
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			
			Если Фильтр = "Все" и ПодчиненнаяСтрока.НеСоответствуетОтборуВсе Тогда
				Продолжить;
			ИначеЕсли Фильтр = "ФактическиеРасхождения" 
				И (ПодчиненнаяСтрока.НеСоответствуетОтбору Или ПодчиненнаяСтрока.НеСоответствуетОтборуВсе) Тогда
				Продолжить;
			ИначеЕсли Фильтр = "ЭДОРасхождения" И ПодчиненнаяСтрока.НеСоответствуетОтборуЭДО Тогда
				Продолжить;
			КонецЕсли;
			Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.НедопустимыйКодМаркировки
				Или ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхОтсутствует + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхНеЧислилось + 1;
				
			КонецЕсли;
			
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиМОТП(ПодчиненнаяСтрока, Фильтр);
				
			Если ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + 1;
				
			ИначеЕсли ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(ПодчиненнаяСтрока) Тогда
				
				СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок = СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхУпаковок = СтрокаДерева.КоличествоПодчиненныхУпаковок + 1;
				
			КонецЕсли;
			
			СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + ПодчиненнаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок;
			СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок       = СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок       + ПодчиненнаяСтрока.КоличествоПодчиненныхГрупповыхУпаковок;
			СтрокаДерева.КоличествоПодчиненныхУпаковок      = СтрокаДерева.КоличествоПодчиненныхУпаковок      + ПодчиненнаяСтрока.КоличествоПодчиненныхУпаковок;
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии      = СтрокаДерева.КоличествоПодчиненныхВНаличии      + ПодчиненнаяСтрока.КоличествоПодчиненныхВНаличии;
			СтрокаДерева.КоличествоПодчиненныхОтсутствует   = СтрокаДерева.КоличествоПодчиненныхОтсутствует   + ПодчиненнаяСтрока.КоличествоПодчиненныхОтсутствует;
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = СтрокаДерева.КоличествоПодчиненныхНеЧислилось   + ПодчиненнаяСтрока.КоличествоПодчиненныхНеЧислилось;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхУпаковок
		+ СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок + СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
	
	
	СформироватьПредставлениеСодержимогоУпаковкиМОТП(СтрокаДерева, Фильтр);
	УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	
КонецПроцедуры

// Формирует представление содержимого упаковки по текущей строке, для которой доступно использование групповых упаковок (МОТП).
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
//  Фильтр        - Строка - установленный фильтр на форме.
//
Процедура СформироватьПредставлениеСодержимогоУпаковкиМОТП(ТекущаяСтрока, Фильтр) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ПредставлениеСодержимоеУпаковки) 
			  И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатуры(
				ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика,, ТекущаяСтрока.Серия);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхВсего = 0 Тогда
		
		Если ТекущаяСтрока.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
			Или ТекущаяСтрока.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<нет>'");
		ИначеЕсли ТекущаяСтрока.СодержимоеНедоступно Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<состав недоступен>'");
		ИначеЕсли ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(ТекущаяСтрока) Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<пустой блок>'");
		Иначе
			Если Фильтр = "ЭДОРасхождения" Тогда
				ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<состояние короба неизвестно>'");
			Иначе
				ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<пустая упаковка>'");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ПредставлениеСодержимоеУпаковки = Новый Массив;
		
		Если ТекущаяСтрока.КоличествоПодчиненныхУпаковок > 0 Тогда
			ПредставлениеСодержимоеУпаковки.Добавить(
				СтрШаблон(НСтр("ru = 'упаковок - %1'"), ТекущаяСтрока.КоличествоПодчиненныхУпаковок));
		КонецЕсли;
		
		Если ТекущаяСтрока.КоличествоПодчиненныхГрупповыхУпаковок > 0 Тогда
			ПредставлениеСодержимоеУпаковки.Добавить(
				СтрШаблон(НСтр("ru = 'блоков - %1'"), ТекущаяСтрока.КоличествоПодчиненныхГрупповыхУпаковок));
		КонецЕсли;
			
		Если ТекущаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок > 0 Тогда
			ПредставлениеСодержимоеУпаковки.Добавить(
				СтрШаблон(НСтр("ru = 'пачек - %1'"), ТекущаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ПредставлениеСодержимоеУпаковки.Добавить(
				ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатуры(
					ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика,, ТекущаяСтрока.Серия));
		КонецЕсли;
		
		ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрСоединить(ПредставлениеСодержимоеУпаковки, ", ");
		
	КонецЕсли;

КонецПроцедуры

// Заполняет значение ИндексКартинкиСтатусПроверки для переданной строки дерева.
//
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементДерева - строка дерева.
Процедура УстановитьИндексКартинкиСтатусаПроверки(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока.НедопустимыйКодМаркировки Тогда
		
		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 1;

	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки()
		Или ТекущаяСтрока.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		
		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 5;
	
	ИначеЕсли ТекущаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
		
		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 0;
		
	ИначеЕсли ТекущаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда

		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 1;
		
	ИначеЕсли ТекущаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
		
		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 2;
		
	ИначеЕсли ТекущаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
		
		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 4;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОпределениеХозяйственнойОперации

// Определяет соответствие типа документа "Акт о расхождениях после реализации", 
// результат возвращает через второй параметр.
//
// Параметры:
//  Контекст - ДокументСсылка - Контекст для определения типа документа.
//
// Возвращаемое значение:
//  Булево - Истина, если условие выполнено.
Функция ЭтоАктОРасхождениях(Контекст) Экспорт
	
	Результат = Ложь;
	
	СверкаКодовМаркировкиИСМПКлиентСерверПереопределяемый.ЭтоАктОРасхождениях(Контекст, Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти