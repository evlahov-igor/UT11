
////////////////////////////////////////////////////
//// Общий модуль "КР_БП_УТ11_ЗагрузкаДанныхСервер"
//// Создан: 17.11.2022, Маскаев П.Ю., КРОК, JIRA№ A2105505-820
//// Разработка по ФДР С51.785 Интеграция БП - УТ 11 Контрагенты, Договоры

#Область ПрограммныйИнтерфейс

Функция ДобавитьНастройкиЗагрузкиОбъектов(ПараметрыЗагрузки) Экспорт
	
	// Договоры контрагентов
	НастройкаЗагрузки(ПараметрыЗагрузки, "ContractObject");
	
	// Контрагенты
	НастройкаЗагрузки(ПараметрыЗагрузки, "CounterpartyObject");

//Петухов А.В.  25.09.2023  #3167   {
	НастройкаЗагрузки(ПараметрыЗагрузки, "ImageOfGoods");
//}	

// << 27.11.2023 Петухов А.В., Фактор, #3365
	НастройкаЗагрузки(ПараметрыЗагрузки, "IndividualObject", "trade11_tmp");
	НастройкаЗагрузки(ПараметрыЗагрузки, "VehicleObject", "trade11_tmp");
	НастройкаЗагрузки(ПараметрыЗагрузки, "IdentityPapersInfoRegObject", "trade11_tmp");
// >> 27.11.2023 Петухов А.В., Фактор, #3365

	Возврат ПараметрыЗагрузки; 
	
КонецФункции

Функция СвойствоОбъектБылЗагружен() Экспорт 
	Возврат "КР_ПропуститьВыгрузкуОбъектаВRabbitMQ";
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфес

#Область ПравилаЗагрузкиОбъектов

Процедура ПЗО_ContractObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_СправочникОбъект_ДоговорыКонтрагентов(ПакетДанных, Объект, СообщениеОбмена)		
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_CounterpartyObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	// Конвертация производится в транзакции для обеспечения целостности данных
	НачатьТранзакцию();
	Попытка
		Объект = Неопределено;
		Если ПКО_СправочникОбъект_Контрагенты(ПакетДанных, Объект, СообщениеОбмена)
			И КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'В процессе загрузки данных контрагента произошла исключительная ошибка:
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения,
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.Контрагенты));
	КонецПопытки;
	
КонецПроцедуры

//Петухов А.В.  25.09.2023  #3167   {
Процедура ПЗО_ImageOfGoods(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;

	Отказ = Ложь;
	Лог = "";
	КартинкаЗагружена = ПКО_Справочник_НоменклатураПрисоединенныеФайлы(ПакетДанных, СообщениеОбмена, Отказ, Лог);

// << 05.12.2023 Петухов А.В., Фактор, #3441
	Если ПакетДанных.Свойства().Получить("NeedReport") <> Неопределено И ПакетДанных.NeedReport = Истина Тогда
// >> 05.12.2023 Петухов А.В., Фактор, #3441
		СформироватьСообщениеПоЗагрузкеКартинки(
			СообщениеОбмена.КлючСообщения, 
			СокрЛП(ПакетДанных.FileName), 
			Отказ, 
			Лог
		);	
// << 05.12.2023 Петухов А.В., Фактор, #3441
	КонецЕсли;
// >> 05.12.2023 Петухов А.В., Фактор, #3441
		
КонецПроцедуры
//}	

// << 27.11.2023 Петухов А.В., Фактор, #3365
Процедура ПЗО_IndividualObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	// Конвертация производится в транзакции для обеспечения целостности данных
	НачатьТранзакцию();
	Попытка
		Объект = Неопределено;
		Если ПКО_СправочникОбъект_ФизическиеЛицаВодители(ПакетДанных, Объект, СообщениеОбмена)
			И КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'В процессе загрузки данных физического лица произошла исключительная ошибка:
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения,
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.ФизическиеЛица));
	КонецПопытки;
	
КонецПроцедуры

Процедура ПЗО_VehicleObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	// Конвертация производится в транзакции для обеспечения целостности данных
	НачатьТранзакцию();
	Попытка
		Объект = Неопределено;
		Если ПКО_СправочникОбъект_ТранспортныеСредства(ПакетДанных, Объект, СообщениеОбмена)
			И КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'В процессе загрузки данных транспортного средства произошла исключительная ошибка:
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения,
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.ТранспортныеСредства));
	КонецПопытки;
	
КонецПроцедуры

Процедура ПЗО_IdentityPapersInfoRegObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	// Конвертация производится в транзакции для обеспечения целостности данных
	НачатьТранзакцию();
	Попытка
		Объект = Неопределено;
		Если ПКО_РегистрСведенийОбъект_ДокументыФизическихЛиц(ПакетДанных, Объект, СообщениеОбмена)
			И КР_ОбменRabbitОбщиеМеханизмыКонвертации.НаборЗаписейРегистраЗаписать(Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'В процессе загрузки данных физического лица произошла исключительная ошибка:
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения,
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.РегистрыСведений.ДокументыФизическихЛиц));
	КонецПопытки;
	
КонецПроцедуры
// >> 27.11.2023 Петухов А.В., Фактор, #3365

#КонецОбласти

#КонецОбласти

#Область ПравилаКонвертации

#Область Справочники

Функция ПКО_СправочникСсылка_Валюты(ПакетДанных, СообщениеОбмена)
	
	МетаданныеСправочника = Метаданные.Справочники.Валюты;
	
	ТипОшибки = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(
		МетаданныеСправочника);
	
	Если ПакетДанных = Неопределено Тогда
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена,
			СтрШаблон(НСтр("ru = '%1. Данные загрузки не определены.'"),
			МетаданныеСправочника.ПолноеИмя()), ТипОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = КР_Демо_УТ11_ЗагрузкаДанныхСервер.ПараметрыПоискаСсылки();
	
	Если ЗначениеЗаполнено(ПакетДанных.Code) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(Новый Структура("Код", ПакетДанных.Code));
	КонецЕсли;
	
	Валюта = КР_Демо_УТ11_ЗагрузкаДанныхСервер.СсылкаПоДаннымСинхронизации(
		МетаданныеСправочника, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
	
	Возврат Валюта;
	
КонецФункции

Функция ПКО_СправочникСсылка_Контрагенты(ПакетДанных, СообщениеОбмена, КритичныйПоиск = Ложь)
	
	МетаданныеСправочника = Метаданные.Справочники.Контрагенты;
	
	ТекстСообщения = НСтр("ru = '%1. Ошибка поиска по ссылке элемента справочника.'");
	Если КритичныйПоиск Тогда
		ТипОшибки = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_ОшибкаПоискаСсылки(
			МетаданныеСправочника);
	Иначе
		ТипОшибки = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибкаПоискаСсылки(
			МетаданныеСправочника);
	КонецЕсли;
	
	Если ПакетДанных = Неопределено Тогда
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена,
			СтрШаблон(НСтр("ru = '%1. Данные загрузки не определены.'"),
			МетаданныеСправочника.ПолноеИмя()), ТипОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	КонтрагентСсылка = XMLЗначение(Тип("СправочникСсылка.Контрагенты"), ПакетДанных.Ref);
	Если ОбщегоНазначения.СсылкаСуществует(КонтрагентСсылка) Тогда
		Возврат КонтрагентСсылка;
	Иначе
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена,
			СтрШаблон(ТекстСообщения, МетаданныеСправочника.ПолноеИмя()), ТипОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПКО_СправочникСсылка_Организации(ПакетДанных, СообщениеОбмена)
	
	МетаданныеСправочника = Метаданные.Справочники.Организации;
	
	ТипОшибки = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(
		МетаданныеСправочника);
	
	Если ПакетДанных = Неопределено Тогда
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена,
			СтрШаблон(НСтр("ru = '%1. Данные загрузки не определены.'"),
			МетаданныеСправочника.ПолноеИмя()), ТипОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = КР_Демо_УТ11_ЗагрузкаДанныхСервер.ПараметрыПоискаСсылки();
	
	Если ЗначениеЗаполнено(ПакетДанных.INN)
		И ЗначениеЗаполнено(ПакетДанных.KPP) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(
			Новый Структура("ИНН, КПП", ПакетДанных.INN, ПакетДанных.KPP));
	КонецЕсли;
	
	Организация = КР_Демо_УТ11_ЗагрузкаДанныхСервер.СсылкаПоДаннымСинхронизации(
		МетаданныеСправочника, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
	
	Возврат Организация;
	
КонецФункции

Функция ПКО_СправочникСсылка_СтраныМира(ПакетДанных, СообщениеОбмена)
	
	МетаданныеСправочника = Метаданные.Справочники.СтраныМира;
	
	ТипОшибки = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибкаПоискаСсылки(
		МетаданныеСправочника);
	
	Если ПакетДанных = Неопределено Тогда
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена,
			СтрШаблон(НСтр("ru = '%1. Данные загрузки не определены.'"),
			МетаданныеСправочника.ПолноеИмя()), ТипОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = КР_Демо_УТ11_ЗагрузкаДанныхСервер.ПараметрыПоискаСсылки();
	
	Если ЗначениеЗаполнено(ПакетДанных.Code) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(Новый Структура("Код", ПакетДанных.Code));
	КонецЕсли;
	
	СтранаМира = КР_Демо_УТ11_ЗагрузкаДанныхСервер.СсылкаПоДаннымСинхронизации(
		МетаданныеСправочника, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
	
	Возврат СтранаМира;
	
КонецФункции


Функция ПКО_СправочникОбъект_ДоговорыКонтрагентов(ПакетДанных, Объект, СообщениеОбмена)

	МетаданныеСправочника = Метаданные.Справочники.ДоговорыКонтрагентов;
	
	Если Не ЗначениеЗаполнено(ПакетДанных.Code) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено значение поля Code во входящем пакете. Загрузка не будет выполнена.'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения,
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(МетаданныеСправочника));
		Возврат Ложь;
	КонецЕсли;
	
	КонтрагентВладелец = ПКО_СправочникСсылка_Контрагенты(ПакетДанных.Counterparty, СообщениеОбмена, Истина);
	ОрганизацияДоговора = ПКО_СправочникСсылка_Организации(ПакетДанных.Organization, СообщениеОбмена);
	ВалютаДоговора = ПКО_СправочникСсылка_Валюты(ПакетДанных.Currency, СообщениеОбмена);
	
	Если КонтрагентВладелец = Неопределено
		Или ОрганизацияДоговора = Неопределено
		Или ВалютаДоговора = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не найдены ключевые реквизиты объекта загрузки (Контрагент, Организация или Валюта).'");
		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(МетаданныеСправочника);
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);		
		Возврат Ложь;
		
	КонецЕсли;
	
	Ссылка = XMLЗначение(Тип("СправочникСсылка.ДоговорыКонтрагентов"), ПакетДанных.Ref);
	СсылкаСуществует = ОбщегоНазначения.СсылкаСуществует(Ссылка);
	
	Если СсылкаСуществует Тогда
		
		Объект = Ссылка.ПолучитьОбъект();
		
	ИначеЕсли ПакетДанных.Type = "СПокупателем"
		Или ПакетДанных.Type = "СПоставщиком"
		Или ПакетДанных.Type = "СКомиссионером" Тогда
		
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("КР_КодДемо", ПакетДанных.Code);
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			СообщениеОбмена.СсылкиНаОбъекты.Добавить(ДоговорКонтрагента);
			
			ТекстСообщения = НСтр("ru = 'Договор с кодом ""%1"" уже создан. Полученные изменения не применяются.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ПакетДанных.Code);
			ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация(МетаданныеСправочника);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
			
			Возврат Ложь;
		КонецЕсли;
		
		Объект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не поддерживается загрузка договора с типом ""%1"". Договор не будет создан.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПакетДанных.Type);
		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация(МетаданныеСправочника);
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);	
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Предопределенные данные
	Объект.Согласован = Истина;
	Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	Объект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
	Объект.НалогообложениеНДСОпределяетсяВДокументе = Истина;
	Объект.ЗакупкаПодДеятельностьОпределяетсяВДокументе = Истина;
	Объект.СпособДоставки = Перечисления.СпособыДоставки.ОпределяетсяВРаспоряжении;
	
	// Данные пакета
	Объект.Наименование = ПакетДанных.Name;
	Объект.НаименованиеДляПечати = ПакетДанных.Name;
	Объект.КР_КодДемо = ПакетДанных.Code;
	Объект.ПометкаУдаления = ПакетДанных.DeletionMark;
	Объект.ВалютаВзаиморасчетов = ВалютаДоговора;
	Объект.Номер = ПакетДанных.Number;
	Объект.Организация = ОрганизацияДоговора;
	Объект.Контрагент = КонтрагентВладелец;
	Объект.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтрагентВладелец, "Партнер");
	Объект.УчетАгентскогоНДС = ПакетДанных.AccountingAgencyVAT;
	Объект.УстановленСрокОплаты = ПакетДанных.PaymentDeadline;
	Объект.ТипДоговора = ПКО_ТипДоговораКонтрагента(ПакетДанных, КонтрагентВладелец);
	Объект.ВариантОформленияЗакупок = ?(ПакетДанных.Type = "СПоставщиком",
		Перечисления.ВариантыОформленияЗакупок.ТоварыВПути, Перечисления.ВариантыОформленияЗакупок.НеРазделять);
	Объект.ХозяйственнаяОперация = Справочники.ДоговорыКонтрагентов.ХозяйственнаяОперация(
		Объект.ТипДоговора, Объект.ВариантОформленияЗакупок);
	Объект.ПорядокРасчетов =
		?(ПакетДанных.Type = "СПоставщиком" И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			КонтрагентВладелец, "ЮрФизЛицо") = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент,
				Перечисления.ПорядокРасчетов.ПоЗаказам, Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	Объект.ДатаОкончанияДействия = ПакетДанных.EndDate;
	Объект.Комментарий = ПакетДанных.Comment;
	Объект.Дата = ПакетДанных.Date;
	Объект.ОплатаВВалюте = ПакетДанных.PaymentCurrency;
	Объект.КомиссионныеПродажи25 = ?(Объект.ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером, Истина, Ложь);
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_СправочникОбъект_Контрагенты(ПакетДанных, Объект, СообщениеОбмена)
	
	КонтрагентСсылка = XMLЗначение(Тип("СправочникСсылка.Контрагенты"), ПакетДанных.Ref);
	КонтрагентСуществует = ОбщегоНазначения.СсылкаСуществует(КонтрагентСсылка);
	
	ПартнерСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтрагентСсылка, "Партнер");
	Если ЗначениеЗаполнено(ПартнерСсылка) Тогда
		ПартнерОбъект = ПартнерСсылка.ПолучитьОбъект();
	Иначе
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
			|ИЗ Справочник.Партнеры
			|ГДЕ Код = &Код И Наименование = &Наименование");
		Запрос.УстановитьПараметр("Код", ПакетДанных.Code);
		Запрос.УстановитьПараметр("Наименование", ПакетДанных.Name);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ТекстСообщения = НСтр("ru = 'В системе имеется контрагент ""%1"" с кодом ""%2"". Контрагент не будет создан.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ПакетДанных.Name, ПакетДанных.Code);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения,
				КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.Контрагенты));
			Возврат Ложь;		
		КонецЕсли;
		
		ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
	КонецЕсли;
	Если Не ПКО_СправочникОбъект_Партнеры(ПартнерОбъект, ПакетДанных, СообщениеОбмена) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка заполнения партнера. Формирование контрагента невозможно.'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения,
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.Контрагенты));
		Возврат Ложь;		
	КонецЕсли;
	ПартнерСсылка = ПартнерОбъект.Ссылка;
	
	Если КонтрагентСуществует Тогда
		Объект = КонтрагентСсылка.ПолучитьОбъект();
	Иначе
		Объект = Справочники.Контрагенты.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(КонтрагентСсылка);
	КонецЕсли;
	Объект.Партнер = ПартнерСсылка;
	
	Объект.Наименование = ПакетДанных.Name;
	Объект.ПометкаУдаления = ПакетДанных.DeletionMark;
	Объект.НаименованиеПолное = ПакетДанных.FullName;
	Объект.ОбособленноеПодразделение = ПакетДанных.SeparateDivision;
	Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение(
		"Перечисление.ЮридическоеФизическоеЛицо." + ПакетДанных.UrFisLitso);
	Объект.СтранаРегистрации = ПКО_СправочникСсылка_СтраныМира(ПакетДанных.Country, СообщениеОбмена);
	Объект.ИНН = ПакетДанных.INN;
	Объект.КПП = ПакетДанных.KPP;
	Объект.ЮрФизЛицо = ПКО_ПеречислениеСсылка_ЮрФизЛицоКонтрагента(ПакетДанных);
	Объект.КодПоОКПО = ПакетДанных.OKPO;
	Объект.РегистрационныйНомер = ПакетДанных.RegistrationNumber;
	Объект.КР_КодПоставщикаZolla = ПакетДанных.ProviderId;
	
	Если ПакетДанных.SeparateDivision = Истина Тогда
		Объект.ГоловнойКонтрагент = ПКО_СправочникСсылка_Контрагенты(ПакетДанных.HeadCounterparty, СообщениеОбмена);
	КонецЕсли;
	
	ПКО_КонтактнаяИнформация(Объект, ПакетДанных.Contact, СообщениеОбмена);
	ПКО_ИсторияКПП(Объект, ПакетДанных.KppHistory, СообщениеОбмена);
	ПКО_ИсторияНаименований(Объект, ПакетДанных.NamingHistory, СообщениеОбмена);
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_СправочникОбъект_Партнеры(ПартнерОбъект, ПакетДанных, СообщениеОбмена)
	
	ПартнерОбъект.Код = ПакетДанных.Code;
	ПартнерОбъект.Наименование = ПакетДанных.Name;
	ПартнерОбъект.НаименованиеПолное = ПакетДанных.FullName;
	ПартнерОбъект.ПометкаУдаления = ПакетДанных.DeletionMark;
	ПартнерОбъект.ДатаРегистрации = ПакетДанных.DateRegistration;
	ПартнерОбъект.Клиент = ПакетДанных.Client;
	ПартнерОбъект.Поставщик = ПакетДанных.Provider;
	ПартнерОбъект.Перевозчик = ПакетДанных.Carrier;
	ПартнерОбъект.ЮрФизЛицо = ПКО_ПеречислениеСсылка_ЮрФизЛицоПартнера(ПакетДанных);
	ПартнерОбъект.Комментарий = ПакетДанных.Comment;
	
	ПКО_КонтактнаяИнформация(ПартнерОбъект, ПакетДанных.Contact, СообщениеОбмена);
	
	Возврат КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(ПартнерОбъект, СообщениеОбмена);
	
КонецФункции

//Петухов А.В.  25.09.2023  #3167   {
Функция ПКО_Справочник_НоменклатураПрисоединенныеФайлы(ПакетДанных, СообщениеОбмена, Отказ, Лог)
	
	ИмяФайлаКартинки = СокрЛП(ПакетДанных.FileName);
	ДанныеКартинки = ПакетДанных.Image;
	ИмяСобытия = "Загрузка изображений товаров";
	
	ПутьКФайлу = ИмяФайлаКартинки;
	ОписаниеСобытия = СтрШаблон("Обработка файла: %1", ИмяФайлаКартинки);
	КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ОписаниеСобытия,
		КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация(Метаданные.Справочники.НоменклатураПрисоединенныеФайлы));
	ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеСобытия);
	
	// Проверка размера файла.
	ДанныеBase64 = Base64Строка(ДанныеКартинки);
	ДанныеBase64 = СтрЗаменить(ДанныеBase64, Символы.ПС,"");
	ДанныеBase64 = СтрЗаменить(ДанныеBase64, Символы.ВК,"");
	
	// алгоритм взят здесь http://kb.mista.ru/article.php?id=386
	РазмерДанных = СтрДлина(ДанныеBase64) - ?(Прав(ДанныеBase64, 1) = "=", 1, 0) - ?(Прав(ДанныеBase64, 2) = "==", 1, 0);
	РазмерДанных = Цел(РазмерДанных / 4 * 3); // в байтах

	Если РазмерДанных > 102400 Тогда
		ТекстОшибки = НСтр("ru = 'Размер больше 100 Кб, файл пропущен : %1 '");
		ТекстОшибки = СтрШаблон(ТекстОшибки, РазмерДанных);
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстОшибки,
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.НоменклатураПрисоединенныеФайлы));
		ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ТекстОшибки);
		Лог = ТекстОшибки;
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;

	//Разбор имени файла
	мсвЧастиИмениФайла = СтрРазделить(ИмяФайлаКартинки, ".");
	Если мсвЧастиИмениФайла.Количество() = 1 Тогда
		ИмяФайлаБезРасширения = ИмяФайлаКартинки;
		Расширение = "";
	Иначе
		Расширение = мсвЧастиИмениФайла[мсвЧастиИмениФайла.Количество()-1];
		ИмяФайлаБезРасширения = Лев(ИмяФайлаКартинки,СтрДлина(ИмяФайлаКартинки)-СтрДлина(Расширение)-1);
	КонецЕсли;
	ИмяФайла = СокрЛП(ИмяФайлаБезРасширения);
	Если СтрРазделить(ИмяФайла, " ").Количество() <> 2 Тогда 
		ОписаниеСобытия = "Имя не соответствует ожидаемому формату.";
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ОписаниеСобытия,
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.НоменклатураПрисоединенныеФайлы));
		ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеСобытия);
		Лог = ОписаниеСобытия;
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли; 
	
	Артикул = ИмяФайла;
	
	ЗапросНоменклатура = Новый Запрос;
	ЗапросНоменклатура.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	МАКСИМУМ(Номенклатура.ФайлКартинки) КАК ФайлКартинки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура.Ссылка) КАК НоменклатураКоличествоРазличных
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = &Артикул
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.Ссылка";

	//Поиск номенклатуры
	ЗапросНоменклатура.УстановитьПараметр("Артикул", Артикул);
	
	ВыборкаНоменклатура = ЗапросНоменклатура.Выполнить().Выбрать();
	Если ВыборкаНоменклатура.Следующий() Тогда
		Номенклатура = ВыборкаНоменклатура.Ссылка; 
		ФайлКартинки = ВыборкаНоменклатура.ФайлКартинки;
	Иначе
		ОписаниеСобытия = СтрШаблон("Не найдена номенклатура с артикулом ""%1""",Артикул);
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ОписаниеСобытия,
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.НоменклатураПрисоединенныеФайлы));
		ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеСобытия);
		Лог = ОписаниеСобытия;
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли; 
	
	ХранитьФайлыВТомахНаДиске = РаботаСФайламиВТомахСлужебный.ХранитьФайлыВТомахНаДиске();
	ТомХранения = Неопределено;
	Если ХранитьФайлыВТомахНаДиске Тогда  
		ТомХранения = КР_ДополнительныеНастройкиПовтИсп.Значение("ТомХраненияИзображенийНоменклатуры", Ложь);
	КонецЕсли;

	АдресВХранилище = ПоместитьВоВременноеХранилище(ДанныеКартинки);
	
	Если ЗначениеЗаполнено(ФайлКартинки) Тогда
		
		ОписаниеСобытия = "Изображение найдено в базе и будет обновлено.";
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ОписаниеСобытия,
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация(Метаданные.Справочники.НоменклатураПрисоединенныеФайлы));
		ЗаписьЖурналаРегистрации(ИмяСобытия, , , ФайлКартинки, ОписаниеСобытия);
		Лог = ОписаниеСобытия;

		ИнформацияОФайле = Новый Структура;
		ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресВХранилище);
		ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
// << 03.11.2023 Петухов А.В., Фактор, #3226
		ИнформацияОФайле.Вставить(КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен(), Истина);
// >> 03.11.2023 Петухов А.В., Фактор, #3226
		РаботаСФайлами.ОбновитьФайл(ФайлКартинки, ИнформацияОФайле); 
			
		ОписаниеСобытия = "Обновление изображения номенклатуры выполнено успешно.";
		Лог = СтрШаблон("%1%2%3",Лог,Символы.ПС,ОписаниеСобытия);
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ОписаниеСобытия,
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация(Метаданные.Справочники.НоменклатураПрисоединенныеФайлы));
		ЗаписьЖурналаРегистрации(ИмяСобытия, , , ФайлКартинки, ОписаниеСобытия); 
		
	Иначе                             
		
		ОписаниеСобытия = "Будет загружено новое изображение.";
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ОписаниеСобытия,
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация(Метаданные.Справочники.НоменклатураПрисоединенныеФайлы));
		ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеСобытия);
		Лог = ОписаниеСобытия;
		
		Попытка
			
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Том", ТомХранения);
			
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла(ПараметрыФайла);
			ПараметрыФайла.ВладелецФайлов = Номенклатура;
			ПараметрыФайла.ИмяБезРасширения = ИмяФайла;
			ПараметрыФайла.РасширениеБезТочки = Расширение;
// << 03.11.2023 Петухов А.В., Фактор, #3226
			ПараметрыФайла.Вставить(КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен(), Истина);
// >> 03.11.2023 Петухов А.В., Фактор, #3226
			ФайлКартинки = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВХранилище);			
			
			НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
			НоменклатураОбъект.ФайлКартинки = ФайлКартинки;
// << 03.11.2023 Петухов А.В., Фактор, #3226
			НоменклатураОбъект.ДополнительныеСвойства.Вставить(КР_УТ10_УТ11_ЗагрузкаДанныхСервер.СвойствоОбъектБылЗагружен(), Истина);
// >> 03.11.2023 Петухов А.В., Фактор, #3226
			НоменклатураОбъект.Записать();
			
			ОписаниеСобытия = "Запись изображения в базу выполнена успешно.";
			Лог = СтрШаблон("%1%2%3",Лог,Символы.ПС,ОписаниеСобытия);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ОписаниеСобытия,
				КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация(Метаданные.Справочники.НоменклатураПрисоединенныеФайлы));
			ЗаписьЖурналаРегистрации(ИмяСобытия, , , ФайлКартинки, ОписаниеСобытия); 
							
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда 
				ТекстОшибки = ОписаниеОшибки();
			КонецЕсли;
			ОписаниеСобытия = СтрШаблон("Ошибка записи присоединенного файла: %1",ТекстОшибки);
			Лог = СтрШаблон("%1%2%3",Лог,Символы.ПС,"Ошибка записи присоединенного файла");
			Отказ = Истина;
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ОписаниеСобытия,
				КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Метаданные.Справочники.НоменклатураПрисоединенныеФайлы));
			ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеСобытия);
			Возврат Ложь;
		КонецПопытки;
    	
	КонецЕсли;

	СообщениеОбмена.СсылкиНаОбъекты.Добавить(ФайлКартинки); 
	
	Возврат Истина;
	
КонецФункции
//}	

// << 27.11.2023 Петухов А.В., Фактор, #3365
Функция ПКО_СправочникОбъект_ФизическиеЛицаВодители(ПакетДанных, Объект, СообщениеОбмена)
	
	ФизЛицоСсылка = XMLЗначение(Тип("СправочникСсылка.ФизическиеЛица"), ПакетДанных.Ref);
	ФизЛицоСуществует = ОбщегоНазначения.СсылкаСуществует(ФизЛицоСсылка);
	
	Если ФизЛицоСуществует Тогда
		Объект = ФизЛицоСсылка.ПолучитьОбъект();
	Иначе
		Если ПакетДанных.Group = Истина Тогда
			Объект = Справочники.ФизическиеЛица.СоздатьГруппу();
		Иначе
			Объект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		КонецЕсли;
		Объект.УстановитьСсылкуНового(ФизЛицоСсылка);
	КонецЕсли;
	
	Объект.Наименование = ПакетДанных.Name;
	Объект.ПометкаУдаления = ПакетДанных.DeletionMark;
	
	Если ПакетДанных.Group <> Истина Тогда    
		
		Объект.КР_ЭтоВодитель = ПакетДанных.Driver;
			
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_СправочникСсылка_ФизическиеЛицаВодители(ПакетДанных, СообщениеОбмена)
	
	МетаданныеСправочника = Метаданные.Справочники.ФизическиеЛица;
	
	ТипОшибки = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(
		МетаданныеСправочника);
	
	Если ПакетДанных = Неопределено Тогда
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена,
			СтрШаблон(НСтр("ru = '%1. Данные загрузки не определены.'"),
			МетаданныеСправочника.ПолноеИмя()), ТипОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ФизЛицоСсылка = XMLЗначение(Тип("СправочникСсылка.ФизическиеЛица"), ПакетДанных.Ref);
	Если ОбщегоНазначения.СсылкаСуществует(ФизЛицоСсылка) Тогда
		Возврат ФизЛицоСсылка;
	Иначе
		ТекстСообщения = НСтр("ru = '%1. Ошибка поиска по ссылке элемента справочника.'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена,
			СтрШаблон(ТекстСообщения, МетаданныеСправочника.ПолноеИмя()), ТипОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПКО_СправочникОбъект_ТранспортныеСредства(ПакетДанных, Объект, СообщениеОбмена)
	
	ТССсылка = XMLЗначение(Тип("СправочникСсылка.ТранспортныеСредства"), ПакетДанных.Ref);
	ТССуществует = ОбщегоНазначения.СсылкаСуществует(ТССсылка);
	
	Если ТССуществует Тогда
		Объект = ТССсылка.ПолучитьОбъект();
	Иначе
		Объект = Справочники.ТранспортныеСредства.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(ТССсылка);
	КонецЕсли;
	
	Объект.ПометкаУдаления = ПакетДанных.DeletionMark;

	Объект.Наименование = СтрШаблон("%1 %2", ПакетДанных.LicPlate, ПакетДанных.Manufacturer);	
	Объект.Код = ПакетДанных.LicPlate;    
	Объект.Марка = ПакетДанных.Manufacturer;    
	Объект.ГрузоподъемностьВТоннах = ПакетДанных.CapacityTons;    
	Объект.ВместимостьВКубическихМетрах = ПакетДанных.CapacitySqMtrs;    
	Объект.Прицеп = ПакетДанных.TrailerManufacturer;    
	Объект.ГосударственныйНомерПрицепа = ПакетДанных.TrailerLicPlate;    
    Объект.ЛицензионнаяКарточкаВид = "Стандартная"; 
	
	Возврат Истина;
	
КонецФункции

// >> 27.11.2023 Петухов А.В., Фактор, #3365

#КонецОбласти

#Область РегистрыСведений

// << 27.11.2023 Петухов А.В., Фактор, #3365
Функция ПКО_РегистрСведенийОбъект_ДокументыФизическихЛиц(ПакетДанных, Объект, СообщениеОбмена)
	
	Объект = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
	
	// Установим отборы 
	XDTOОтбор = ПакетДанных.IdentityPapersInfoRegSelection;  
	
	// A2105505-2087
	// Поля Period и DocType стали не обязательными
	// 	соответственно изменена логика     
	Если ЗначениеЗаполнено(XDTOОтбор.Period) Тогда 
		Объект.Отбор.Период.Установить(XDTOОтбор.Period);
	КонецЕсли;
	
	Физлицо = ПКО_СправочникСсылка_ФизическиеЛицаВодители(XDTOОтбор.Individual, СообщениеОбмена);
	Объект.Отбор.Физлицо.Установить(Физлицо);  
	
	ВидДокумента = Неопределено;
	Если ЗначениеЗаполнено(XDTOОтбор.DocType) Тогда 
		// Требование в ФДР поиск по наименованию
		ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию( 
			XDTOОтбор.DocType, Истина);
		Если ЗначениеЗаполнено(ВидДокумента) Тогда 
			Объект.Отбор.ВидДокумента.Установить(ВидДокумента);
		Иначе
			СсылкаМетаданные = Метаданные.Справочники.ВидыДокументовФизическихЛиц;
			СсылкаТип = ТипЗнч(ВидДокумента);
			ТекстСообщения = НСтр("ru = 'Не найден элемент справочника %1 ""%2"" по наименованию'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, СсылкаТип, XDTOОтбор.DocType);
	  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(СсылкаМетаданные); 
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	СписокXDTO = ПакетДанных.IdentityPapersInfoInfoRegRecordSet.IdentityPapersInfoInfoRegRecord;
	Для Каждого СтрокаСпискаXDTO Из СписокXDTO Цикл
		
		Запись = Объект.Добавить();
		Запись.Активность = Истина;
		Запись.Период = СтрокаСпискаXDTO.Period;

		//Запись.Физлицо = Физлицо;
		ФизлицоСтрока = ПКО_СправочникСсылка_ФизическиеЛицаВодители(СтрокаСпискаXDTO.Individual, СообщениеОбмена);
		Запись.Физлицо = ФизлицоСтрока;
		Если ФизлицоСтрока <> Физлицо Тогда
			СсылкаМетаданные = Метаданные.Справочники.ФизическиеЛица;
			ТекстСообщения = НСтр("ru = 'Физическое лицо в записи ""%1"" отличается от физического лица в отборе ""%2""'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ФизлицоСтрока, Физлицо);
	  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(СсылкаМетаданные); 
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		КонецЕсли;
		
		// Требование в ФДР поиск по наименованию
		ВидДокументаСтрока = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию( 
			СтрокаСпискаXDTO.DocType, Истина);
		Если Не ЗначениеЗаполнено(ВидДокументаСтрока) Тогда 
			СсылкаМетаданные = Метаданные.Справочники.ВидыДокументовФизическихЛиц;
			СсылкаТип = ТипЗнч(ВидДокумента);
			
			ТекстСообщения = НСтр("ru = 'Не найден элемент справочника %1 ""%2"" по наименованию'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, СсылкаТип, XDTOОтбор.DocType);
	  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(СсылкаМетаданные); 
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		Иначе 
			Запись.ВидДокумента = ВидДокументаСтрока; 
		КонецЕсли;	
		
		//		
		Запись.Серия = СтрокаСпискаXDTO.DocSeries;  
		Запись.Номер = СтрокаСпискаXDTO.DocNumber;  
		Запись.ДатаВыдачи = СтрокаСпискаXDTO.IssueDate;  
		Запись.СрокДействия = СтрокаСпискаXDTO.ExpDate;  
		Запись.КемВыдан = СтрокаСпискаXDTO.IssueDept;  
		Запись.КодПодразделения = СтрокаСпискаXDTO.IssueDeptID;  
		
	КонецЦикла;	
			
	Возврат Истина;
	
КонецФункции
// >> 27.11.2023 Петухов А.В., Фактор, #3365

#КонецОбласти

#Область Прочее

//Петухов А.В.  25.09.2023  #3167   {
Процедура СформироватьСообщениеПоЗагрузкеКартинки(ИдСообщения, ИмяФайла, Отказ, Лог)
	
	XDTOОбъект = ПолучитьОбъектXDTO("ImageOfGoodsImportReport");
	XDTOОбъект.MessageID = XMLСтрока(ИдСообщения);
	XDTOОбъект.FileName = XMLСтрока(ИмяФайла);
	XDTOОбъект.Log = XMLСтрока(Лог);
	XDTOОбъект.Error = Отказ;
	
	ИсходящееСообщение = КР_ОбменRabbitОбработкаСообщенийОбмена.ПолучитьСтруктуруСообщения();
	ИсходящееСообщение.ТипДанных = "ImageOfGoodsImportReport";
	ИсходящееСообщение.Маршрутизация = "ImageOfGoodsImportReport";
	ИсходящееСообщение.ТелоСообщения = КР_ФункцииРаботыJSON.СериализоватьXDTOВJSON(XDTOОбъект);
	
	КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьИсходящееСообщениеОбмена(
		КР_БП_УТ11_ВыгрузкаДанныхСервер.ТочкаОбмена(), ИсходящееСообщение, Ложь);
	
КонецПроцедуры
//}	

Процедура ПКО_КонтактнаяИнформация(Владелец, ПакетДанных, СообщениеОбмена)
	
	Если ПакетДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоКИПартнера = (ТипЗнч(Владелец) = Тип("СправочникОбъект.Партнеры"));
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
	
	Владелец.КонтактнаяИнформация.Очистить();
	
	Для Каждого СтрокаКИ Из ПакетДанных.ContactSingleRow Цикл
		Если ЭтоКИПартнера И (СтрНайти(ВРег(СтрокаКИ.Type), "ЮРИДИЧЕСКИЙ")
			Или СтрНайти(ВРег(СтрокаКИ.Type), "ПОЧТОВЫЙ")) Тогда
			// Для Партнера используем только Фактический адрес
			Продолжить;
		ИначеЕсли ЭтоКИПартнера И СтрНайти(ВРег(СтрокаКИ.Type), "ФАКТИЧЕСКИЙ") Тогда
			ВидКИСтрокой = "Адрес";
		Иначе
			ВидКИСтрокой = СтрокаКИ.Type;
		КонецЕсли;
		
		нСтрокаКИ = ТаблицаКИ.Добавить();
		нСтрокаКИ.Представление = СтрокаКИ.Representation;
		
		УстановитьВидТипКонтактнойИнформации(Владелец, нСтрокаКИ, ВидКИСтрокой);
		Если Не ЗначениеЗаполнено(нСтрокаКИ.Вид) Тогда
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(
				СообщениеОбмена, СтрШаблон(НСтр("ru = 'Не определен вид контактной информации ""%1"".'"), ВидКИСтрокой),
					КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибкаПоискаСсылки(
						Метаданные.Справочники.ВидыКонтактнойИнформации));
		КонецЕсли;
		
		ПартнерыИКонтрагенты.ЗначенияПолейКонтактнойИнформации(
			нСтрокаКИ.Представление, нСтрокаКИ.ЗначенияПолей, нСтрокаКИ.Вид);
	КонецЦикла;
	
	УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(Владелец, ТаблицаКИ);
	
КонецПроцедуры

Процедура ПКО_ИсторияКПП(Владелец, ПакетДанных, СообщениеОбмена)
	
	Если ПакетДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Владелец.ИсторияКПП.Очистить();
	
	Для Каждого СтрокаИстории Из ПакетДанных.KppHistorySingleRow Цикл
		нСтрока = Владелец.ИсторияКПП.Добавить();
		нСтрока.Период = СтрокаИстории.Period;
		нСтрока.КПП = СтрокаИстории.KPP;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПКО_ИсторияНаименований(Владелец, ПакетДанных, СообщениеОбмена)
	
	Если ПакетДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Владелец.ИсторияНаименований.Очистить();
	
	Для Каждого СтрокаИстории Из ПакетДанных.NamingHistorySingleRow Цикл
		нСтрока = Владелец.ИсторияНаименований.Добавить();
		нСтрока.Период = СтрокаИстории.Period;
		нСтрока.НаименованиеПолное = СтрокаИстории.Name;
	КонецЦикла;
	
КонецПроцедуры

Функция ПКО_ПеречислениеСсылка_ЮрФизЛицоКонтрагента(ПакетДанных)
	
	ЮрФизЛицо = Перечисления.ЮрФизЛицо;
	
	Если ПакетДанных.UrFisLitso = "ФизическоеЛицо" Тогда
		// Свойство "OGRNIP" необязательно, и его может не быть в пакете
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПакетДанных, "OGRNIP")
				И ЗначениеЗаполнено(ПакетДанных.OGRNIP) Тогда
			Возврат ЮрФизЛицо.ИндивидуальныйПредприниматель;
		Иначе
			Возврат ЮрФизЛицо.ФизЛицо;
		КонецЕсли;
	// Свойство "Resident" необязательно, и его может не быть в пакете
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПакетДанных, "Resident")
			И ПакетДанных.Resident = Ложь Тогда
		Возврат ЮрФизЛицо.ЮрЛицоНеРезидент;
	Иначе
		Возврат ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	
КонецФункции

Функция ПКО_ПеречислениеСсылка_ЮрФизЛицоПартнера(ПакетДанных)
	
	Если ПакетДанных.UrFisLitso = "ФизическоеЛицо"
		И Не ЗначениеЗаполнено(ПакетДанных.OGRNIP) Тогда
		Возврат Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	Иначе
		Возврат Перечисления.КомпанияЧастноеЛицо.Компания;
	КонецЕсли;
	
КонецФункции

Функция ПКО_ТипДоговораКонтрагента(ПакетДанных, Владелец)
	
	ТипыДоговоров = Перечисления.ТипыДоговоров;
	
	Если ПакетДанных = Неопределено Тогда
		Возврат ТипыДоговоров.ПустаяСсылка();
	КонецЕсли;
	
	РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Владелец, "ЮрФизЛицо, СтранаРегистрации");
	
	ВладелецНеРезидент =
		РеквизитыВладельца.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
	СтранаУчастникЕАЭС =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыВладельца.СтранаРегистрации, "УчастникЕАЭС") = Истина;
	
	Если ПакетДанных.Type = "СПокупателем" Тогда
		Возврат ТипыДоговоров.СПокупателем;
	ИначеЕсли ПакетДанных.Type = "СКомиссионером" Тогда
		Возврат ТипыДоговоров.СКомиссионером;
	ИначеЕсли ПакетДанных.Type = "СПоставщиком"
			И ВладелецНеРезидент И Не СтранаУчастникЕАЭС Тогда
		Возврат ТипыДоговоров.Импорт;
	ИначеЕсли ПакетДанных.Type = "СПоставщиком"
			И ВладелецНеРезидент И СтранаУчастникЕАЭС Тогда
		Возврат ТипыДоговоров.ВвозИзЕАЭС;
	ИначеЕсли ПакетДанных.Type = "СПоставщиком"
			И Не ВладелецНеРезидент Тогда
		Возврат ТипыДоговоров.СПоставщиком;
	Иначе
		Возврат ТипыДоговоров.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеМетодыXDTO

Функция ПолучитьОбъектXDTO(ИмяОбъекта)
	
	URIПространстваИмен = "http://www.zollaintegration.croc.cr_zolla_exchange.org";
	ТипОбъектаXDTO = ФабрикаXDTO.Тип(URIПространстваИмен, ИмяОбъекта);	
	ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъектаXDTO);	
	Возврат ОбъектXDTO;
	
КонецФункции

#КонецОбласти

#Область НастройкиЗагрузкиОбъектов

// << 27.11.2023 Петухов А.В., Фактор, #3365
//Функция НастройкаЗагрузки(ПараметрыЗагрузки, ТипДанных)
Функция НастройкаЗагрузки(ПараметрыЗагрузки, ТипДанных, ОчередьОбмена = "")
// >> 27.11.2023 Петухов А.В., Фактор, #3365
	
	ШаблонПравилаЗагрузки = "КР_БП_УТ11_ЗагрузкаДанныхСервер.ПЗО_%1";
	
	СтрокаЗагрузки = ПараметрыЗагрузки.Добавить();
	СтрокаЗагрузки.ТипДанных = ТипДанных;
	СтрокаЗагрузки.Отправитель = ""; // любой
// << 27.11.2023 Петухов А.В., Фактор, #3365
	//СтрокаЗагрузки.ОчередьОбмена = ""; // любой
	СтрокаЗагрузки.ОчередьОбмена = ОчередьОбмена;
// >> 27.11.2023 Петухов А.В., Фактор, #3365
	СтрокаЗагрузки.ПравилоЗагрузки = СтрШаблон(ШаблонПравилаЗагрузки, ТипДанных);
	СтрокаЗагрузки.ДополнительныеПараметры = Новый Структура;
	
	Возврат СтрокаЗагрузки;
	
КонецФункции

#КонецОбласти

#Область Алгоритмы

Процедура УстановитьВидТипКонтактнойИнформации(ВладелецКИ, СтрокаКИ, ИмяКИ)
	
	ТипЗнчВладелецКИ = ТипЗнч(ВладелецКИ);
	Если ТипЗнчВладелецКИ = Тип("СправочникОбъект.Контрагенты")
		Или ТипЗнчВладелецКИ = Тип("СправочникСсылка.Контрагенты") Тогда
		Постфикс = "Контрагента";
	ИначеЕсли ТипЗнчВладелецКИ = Тип("СправочникОбъект.Партнеры")
		Или ТипЗнчВладелецКИ = Тип("СправочникСсылка.Партнеры") Тогда
		Постфикс = "Партнера";
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ВРег(ИмяКИ) = "АДРЕС" Тогда
		Префикс = "Адрес"; // Для Партнера
	ИначеЕсли ВРег(ИмяКИ) = "ФАКТИЧЕСКИЙ АДРЕС" Тогда
		Префикс = "ФактАдрес"; // Для Контрагента
	ИначеЕсли ВРег(ИмяКИ) = "ПОЧТОВЫЙ АДРЕС" Тогда
		Префикс = "ПочтовыйАдрес"; // Для Контрагента
	ИначеЕсли ВРег(ИмяКИ) = "ЮРИДИЧЕСКИЙ АДРЕС" Тогда
		Префикс = "ЮрАдрес"; // Для Контрагента
	ИначеЕсли ВРег(ИмяКИ) = "ТЕЛЕФОН" Тогда
		Префикс = "Телефон"; // Для всех
	ИначеЕсли ВРег(ИмяКИ) = "ЭЛЕКТРОННАЯ ПОЧТА" Тогда
		Префикс = "Email"; // Для всех
	Иначе
		Возврат;
	КонецЕсли;
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации[Префикс + Постфикс];
	ТипКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидКИ, "Тип");
	
	СтрокаКИ.Вид = ВидКИ;
	СтрокаКИ.Тип = ТипКИ;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
