
#Область СлужебныйПрограммныйИнтерфейс

#Область ПолучениеДанных

// Получить коллекцию.
// 
// Параметры:
//  ИмяКоллекции - Строка -
//  ИсходнаяКоллекция - Неопределено, Массив из Произвольный - Исходная коллекция
// 
// Возвращаемое значение:
//  см. ОписаниеОтветаПорцииПериодическойКоллекции.
Функция ПолучитьКоллекцию(ИмяКоллекции, ИсходнаяКоллекция = Неопределено) Экспорт
	
	Если ИмяКоллекции = "Продажи" Тогда
		Возврат ПолучитьКоллекциюПродаж();
	ИначеЕсли ИмяКоллекции = "Товары" Тогда
		Возврат ПолучитьКоллекциюТоваров(ИсходнаяКоллекция);
	ИначеЕсли ИмяКоллекции = "Категории" Тогда
		Возврат ПолучитьКоллекциюКатегорий(ИсходнаяКоллекция);
	ИначеЕсли ИмяКоллекции = "Покупатели" Тогда
		Возврат ПолучитьКоллекциюПокупателей(ИсходнаяКоллекция);
	ИначеЕсли ИмяКоллекции = "Склады" Тогда
		Возврат ПолучитьКоллекциюСкладов(ИсходнаяКоллекция);
	ИначеЕсли ИмяКоллекции = "Остатки" Тогда
		Возврат ПолучитьКоллекциюОстатков();
	ИначеЕсли ИмяКоллекции = "Заказы" Тогда
		Возврат ПолучитьКоллекциюЗаказовКлиентовДанныеРегистра();
	ИначеЕсли ИмяКоллекции = "Промо" Тогда
		Возврат ПолучитьКоллекциюПромоАкций();
	ИначеЕсли ИмяКоллекции = "ПланыПродаж" Тогда
		Возврат ПолучитьКоллекциюКонтрольныхПлановПродаж();
	ИначеЕсли ИмяКоллекции = "Сезонность" Тогда
		Возврат ПолучитьКоллекциюСезонныхКоэффициентов(ИсходнаяКоллекция);
	ИначеЕсли ИмяКоллекции = "Календарь" Тогда
		Возврат ПолучитьКоллекциюКалендарь();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получить исходную коллекцию.
// 
// Параметры:
//  ИмяКоллекции - Строка - 
// 
// Возвращаемое значение:
//  Массив из Произвольный
Функция ПолучитьИсходнуюКоллекцию(ИмяКоллекции) Экспорт
	
	Если ИмяКоллекции = "Товары" Тогда
		Возврат ПолучитьКоллекциюТоваровИсходную();
	ИначеЕсли ИмяКоллекции = "Категории" Тогда
		Возврат ПолучитьКоллекциюКатегорийИсходную();
	ИначеЕсли ИмяКоллекции = "Покупатели" Тогда
		Возврат ПолучитьКоллекциюПокупателейИсходную();
	ИначеЕсли ИмяКоллекции = "Склады" Тогда
		Возврат ПолучитьКоллекциюСкладовИсходную();
	ИначеЕсли ИмяКоллекции = "Сезонность" Тогда
		Возврат ПолучитьКоллекциюСезонныхКоэффициентовИсходную();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получить даты начала окончания продаж.
// 
// Возвращаемое значение:
//  Структура - Получить даты начала окончания продаж:
// * ДатаНачалаПродаж - Произвольный -
// * ДатаОкончанияПродаж - Произвольный -
Функция ПолучитьДатыНачалаОкончанияПродаж() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ ВтДаты
	|ИЗ
	|	РегистрНакопления.ПланыПродаж.Обороты(, , ДЕНЬ, ) КАК Продажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ)
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(, , ДЕНЬ, ) КАК Продажи
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаНачалаПродаж,
	|	МАКСИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаОкончанияПродаж
	|ИЗ
	|	ВтДаты КАК ВтДаты";
	
	НачалоПродаж = Запрос.Выполнить().Выбрать();
	НачалоПродаж.Следующий();
	ДатаНачалаПродаж = НачалоПродаж.ДатаНачалаПродаж;
	ДатаОкончанияПродаж = НачалоПродаж.ДатаОкончанияПродаж;
	
	Возврат Новый Структура("ДатаНачалаПродаж, ДатаОкончанияПродаж", ДатаНачалаПродаж, ДатаОкончанияПродаж);
	
КонецФункции

// Получить аналог номенклатуры по значению.
// 
// Параметры:
//  ИмяПоляАналога - Строка - 
//  ЗначениеАналога - Произвольный - 
//  ДопСвойствоАналога - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - 
// 
// Возвращаемое значение:
//  СправочникСсылка.Номенклатура
Функция ПолучитьАналогНоменклатурыПоЗначению(ИмяПоляАналога, ЗначениеАналога, ДопСвойствоАналога) Экспорт
	
	ИзвлекатьРеквизиты = Ложь;
	ИзвлекатьДопРеквизиты = Ложь;
	
	ИмяПоляВтораяЧасть = "";
	Если СтрНачинаетсяС(ИмяПоляАналога, "Реквизит_") Тогда
		ИзвлекатьРеквизиты = Истина;
		ИмяПоляВтораяЧасть = Сред(ИмяПоляАналога, 10);
	ИначеЕсли СтрНачинаетсяС(ИмяПоляАналога, "ДопРеквизит_") Тогда
		ИзвлекатьДопРеквизиты = Истина;
		ИмяПоляВтораяЧасть = Сред(ИмяПоляАналога, 13);
	ИначеЕсли СтрНачинаетсяС(ИмяПоляАналога, "ДопСвойство_") Тогда
		ИзвлекатьДопРеквизиты = Истина;
		ИмяПоляВтораяЧасть = Сред(ИмяПоляАналога, 13);
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	ТекстЗапросаРеквизиты =
	"ВЫБРАТЬ
	|	ТаблицаОбъект.Ссылка,
	|	ТаблицаОбъект.Код
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаОбъект
	|
	|ГДЕ
	|	&ИмяРеквизита = &ЗначениеРеквизита
	|
	|;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаОбъект.Ссылка
	|ИЗ
	|	ВТТовары КАК ТаблицаОбъект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОбъект.Код
	|";
	
	ТекстЗапросаДопСвойства =
	"ВЫБРАТЬ
	|	ТаблицаОбъект.Ссылка,
	|	ТаблицаОбъект.Ссылка.Код
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТаблицаОбъект
	|
	|ГДЕ
	|	ТаблицаОбъект.Свойство = &ТребуемоеДопСвойство
	|	И ТаблицаОбъект.Значение = &ЗначениеРеквизита
	|
	|;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаОбъект.Ссылка
	|ИЗ
	|	ВТТовары КАК ТаблицаОбъект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОбъект.Код
	|";
	
	Запрос = Новый Запрос();
	
	Если ИзвлекатьРеквизиты Тогда
		Запрос.Текст = ТекстЗапросаРеквизиты;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРеквизита", "ТаблицаОбъект." + ИмяПоляВтораяЧасть);
	ИначеЕсли ИзвлекатьДопРеквизиты Тогда
		Запрос.Текст = ТекстЗапросаДопСвойства;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеАналога);
	Запрос.УстановитьПараметр("ТребуемоеДопСвойство", ДопСвойствоАналога);
	Запрос.УстановитьПараметр("ИмяПоляВтораяЧасть", ИмяПоляВтораяЧасть);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Разное

// Получает элемент справочника Номенклатура по его идентификатору, либо
// первое вхождение по значению реквизита содержащего идентификатор аналога товара.
//
// Параметры:
//  ЗначениеИдентификатора	 - Строка	 - 
//  НастройкиСервиса		 - Структура - см. СервисПрогнозирования.ШаблонНастроекСервиса
//  НайденныеАналоги		 - Соответствие - где ключ это идентификатор, а значение это найденная ранее номенклатура.
// 
// Возвращаемое значение:
//  см. ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналогаОтвет.
Функция ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(ЗначениеИдентификатора, НастройкиСервиса, НайденныеАналоги) Экспорт
	
	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	ЭтоУИД = СервисПрогнозирования.ЭтоУникальныйИдентификатор(ЗначениеИдентификатора);
	ЗначениеСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиСервиса.РеквизитАналогиТовараСвойство, "ТипЗначения");
	Если ЭтоУИД
		И (ЗначениеСвойства = Новый ОписаниеТипов("СправочникСсылка.Номенклатура")
			Или ЗначениеСвойства = Неопределено) Тогда
		Идентификатор = Новый УникальныйИдентификатор(ЗначениеИдентификатора);
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
		НайденныеАналоги.Вставить(ЗначениеИдентификатора, Номенклатура);
	ИначеЕсли Не ПустаяСтрока(НастройкиСервиса.РеквизитАналогиТовараВИсточнике) Тогда
		Если НайденныеАналоги.Получить(ЗначениеИдентификатора) <> Неопределено Тогда
			Номенклатура = НайденныеАналоги.Получить(ЗначениеИдентификатора);
		Иначе
			ЗначениеИдентификатораОбработанное = ЗначениеИдентификатора;
			ЭтоСсылкаНаНоменклатуру = Ложь;
			Если ЭтоУИД Тогда
				// Если аналоги заданы через ссылочный тип, не являющийся номенклатурой, может быть две ситуации:
				// 1. Пришел идентификатор номенклатуры, т.к. сервис не сгруппировал конкретную товарную позицию по аналогам.
				// 2. Пришел идентификатор доп. реквизита, т.к. сервису удалось произвести такую группировку.
				Идентификатор = Новый УникальныйИдентификатор(ЗначениеИдентификатора);
				ЗначениеИдентификатораОбработанное = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
				ЭтоСсылкаНаНоменклатуру = СсылкаНаОбъектСуществует(ЗначениеИдентификатораОбработанное);
				Если ЭтоСсылкаНаНоменклатуру Тогда
					НайденныеАналоги.Вставить(ЗначениеИдентификатора, ЗначениеИдентификатораОбработанное);
					Номенклатура = ЗначениеИдентификатораОбработанное;
				Иначе
					ЗначениеИдентификатораОбработанное = ПолучитьСсылкуПоОписаниюТиповИдентификатору(ЗначениеСвойства,
						ЗначениеИдентификатора);
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЭтоСсылкаНаНоменклатуру Тогда
				Номенклатура = ПолучитьАналогНоменклатурыПоЗначению(НастройкиСервиса.РеквизитАналогиТовараВИсточнике,
					ЗначениеИдентификатораОбработанное, НастройкиСервиса.РеквизитАналогиТовараСвойство);
				НайденныеАналоги.Вставить(ЗначениеИдентификатора, Номенклатура);
			КонецЕсли;
		КонецЕсли;
	Иначе
		СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Документы.ПланПродаж,
			,
			ТекстНеБылСопоставленТоварПоУИД(ЗначениеИдентификатора));
	КонецЕсли;
	
	Ответ = ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналогаОтвет();
	Ответ.Номенклатура = Номенклатура;
	Ответ.НайденныеАналоги = НайденныеАналоги;
	Возврат Ответ;
	
КонецФункции

// Найти описание реквизита коллекции по имени в сервисе.
// 
// Параметры:
//  РеквизитыКоллекции - Массив из Структура - 
//  ИмяРеквизита - Строка
// 
// Возвращаемое значение:
//  см. ОписаниеВыгружаемогоЭлементаДанных.
Функция НайтиОписаниеРеквизитаКоллекцииПоИмениВСервисе(РеквизитыКоллекции, ИмяРеквизита) Экспорт
	
	Для Каждого ОписаниеРеквизита Из РеквизитыКоллекции Цикл
		Если ОписаниеРеквизита.Значение.ИмяВСервисе = ИмяРеквизита Тогда
			Возврат ОписаниеРеквизита.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Получить ссылку по описанию типов идентификатору.
// 
// Параметры:
//  ОписаниеТипа - ОписаниеТипов - Описание типа
//  ТекстИдентификатора - Строка - Текст идентификатора
// 
// Возвращаемое значение:
//  Произвольный
Функция ПолучитьСсылкуПоОписаниюТиповИдентификатору(ОписаниеТипа, ТекстИдентификатора) Экспорт
	
	Идентификатор = Новый УникальныйИдентификатор(ТекстИдентификатора);
	ТипСвойства = ОписаниеТипа.Типы()[0];
	ИмяТипа = Метаданные.НайтиПоТипу(ТипСвойства).ПолноеИмя();
	Возврат ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТипа).ПолучитьСсылку(Идентификатор);
	
КонецФункции

// Последняя известная дата продажи.
// 
// Возвращаемое значение:
//  Дата - Последняя известная дата продажи
Функция ПоследняяИзвестнаяДатаПродажи() Экспорт
	
	ПоследняяИзвестнаяПродажа = Дата(1, 1, 1);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(Набор.Период, &ПустаяДата)) КАК Период
	|ИЗ 
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПланыПродажОбороты.Период) КАК Период
	|	ИЗ
	|		РегистрНакопления.ПланыПродаж.Обороты(, , Регистратор,
	|		(&ИспользоватьТолькоПланы
	|				ИЛИ &ИспользоватьОстаткиИПланы)
	|		И Сценарий = &СценарийПланов
	|		И (НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ Склад В ИЕРАРХИИ (&ОтборСкладов))) КАК ПланыПродажОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МАКСИМУМ(ВыручкаИСебестоимостьПродажОбороты.Период)
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(, , Регистратор, 
	|		НЕ &ИспользоватьТолькоПланы
	|		И ХозяйственнаяОперация В (&ОперацииПродаж)
	|		И (НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ АналитикаУчетаНоменклатуры.Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ АналитикаУчетаПоПартнерам.Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ АналитикаУчетаНоменклатуры.МестоХранения В ИЕРАРХИИ (&ОтборСкладов))
	|		И (НЕ &УстановленОтборПоОрганизациям
	|				ИЛИ АналитикаУчетаПоПартнерам.Организация В ИЕРАРХИИ (&ОтборОрганизаций))
	|		) КАК ВыручкаИСебестоимостьПродажОбороты
	|	) КАК Набор";
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	ЗначениеКонстанты = Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Получить().Получить();
	НастройкиОтборов = ЗначениеКонстанты.ОбщийОтборВыгрузки;
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры(НастройкиОтборов);
	ОтборПартнеров = ПолучитьОтборПартнеров(НастройкиОтборов);
	ОтборСкладов = ПолучитьОтборСкладов(НастройкиОтборов);
	ОтборОрганизаций = ПолучитьОтборОрганизаций(НастройкиОтборов);
	
	ОперацииПродаж = Новый Массив();
	ОперацииПродаж.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	ОперацииПродаж.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет);
	ОперацииПродаж.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов);
	ОперацииПродаж.Добавить(Перечисления.ХозяйственныеОперации.СторноРеализации);
	ОперацииПродаж.Добавить(Перечисления.ХозяйственныеОперации.РеализацияВРозницу);
	ОперацииПродаж.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеПоВозврату);
	ОперацииПродаж.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомиссионера);
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("ОтборПартнеров", ОтборПартнеров);
	Запрос.УстановитьПараметр("ОтборСкладов", ОтборСкладов);
	Запрос.УстановитьПараметр("ОтборОрганизаций", ОтборОрганизаций);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ЕстьОтборНоменклатуры(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоПартнерам", ЕстьОтборПартнеров(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам", ЕстьОтборСкладов(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоОрганизациям", ЕстьОтборОрганизаций(НастройкиОтборов));
	
	Запрос.УстановитьПараметр("ИспользоватьТолькоПланы", Настройки.ИспользоватьПлановыеОстаткиИПродажи
		И Не Настройки.ИспользоватьРеальныеОстаткиИПродажи);
	Запрос.УстановитьПараметр("ИспользоватьОстаткиИПланы", Настройки.ИспользоватьПлановыеОстаткиИПродажи
		И Настройки.ИспользоватьРеальныеОстаткиИПродажи);
	Запрос.УстановитьПараметр("СценарийПланов", Настройки.СценарийПрогнозированияФактИПлан);
	
	Запрос.УстановитьПараметр("ОперацииПродаж", ОперацииПродаж);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		ПоследняяИзвестнаяПродажа = Выборка.Период;
	КонецЕсли;
	
	Возврат ПоследняяИзвестнаяПродажа;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

// Записать прогноз продаж.
// 
// Параметры:
//  СтруктураОтвета - Массив из Структура - 
//  ВидПлана - СправочникСсылка.ВидыПланов - 
//  ИдОбучения - Строка - 
//  КачествоМодели - Массив из Структура - 
Процедура ЗаписатьПрогнозПродаж(СтруктураОтвета, ВидПлана, ИдОбучения, КачествоМодели) Экспорт
	
	ТребуемыеРеквизитыВидаПлана = "Владелец, Периодичность, ДеньНеделиНачалаПрогноза, НачалоПрогнозирования, 
		|ДеньНеделиНачалаПрогноза, СтруктураНастроек, ЗаполнятьСклад, ЗаполнятьПартнера";
	РеквизитыВидаПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, ТребуемыеРеквизитыВидаПлана);
	
	ТекущийСценарий = РеквизитыВидаПлана.Владелец;
	ТекущаяПериодичность = РеквизитыВидаПлана.Периодичность;
	ДеньНеделиНачалаПрогноза = РеквизитыВидаПлана.ДеньНеделиНачалаПрогноза;
	
	// Для оптимальной загрузки требуется пересортировать принимаемые данные.
	
	ДанныеДляЗагрузки = Новый ТаблицаЗначений();
	ДанныеДляЗагрузки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ДанныеДляЗагрузки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДанныеДляЗагрузки.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ДанныеДляЗагрузки.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ДанныеДляЗагрузки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	НайденныеАналоги = Новый Соответствие();
	
	Для Каждого ТекущийПрогноз Из СтруктураОтвета Цикл
		
		Склад = Неопределено;
		Номенклатура = Неопределено;
		Партнер = Неопределено;
		ДатыКоличества = Новый Соответствие();
		
		Для Каждого КлючЗначение Из ТекущийПрогноз Цикл
			
			Если КлючЗначение.Ключ = "item_id" Тогда
				
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Ответ = ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(КлючЗначение.Значение, НастройкиСервиса,
					НайденныеАналоги);
				Номенклатура = Ответ.Номенклатура;
				НайденныеАналоги = Ответ.НайденныеАналоги;
				
				Если Номенклатура = Неопределено
					Или Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли КлючЗначение.Ключ = "shop_id" Тогда
				
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Склад = Справочники.Склады.ПолучитьСсылку(Идентификатор);
			ИначеЕсли КлючЗначение.Ключ = "customer_id" Тогда
				
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Партнер = Справочники.Партнеры.ПолучитьСсылку(Идентификатор);
			Иначе
				ДатаПродажи = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(КлючЗначение.Ключ);
				ДатаПродажи = СдвинутьДатуКНачалуПериода(ДатаПродажи, ТекущаяПериодичность, ДеньНеделиНачалаПрогноза);
				Количество = Число(КлючЗначение.Значение);
				ДатыКоличества.Вставить(ДатаПродажи, Количество);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого КлючЗначение Из ДатыКоличества Цикл
			НоваяСтрока = ДанныеДляЗагрузки.Добавить();
			НоваяСтрока.Склад = Склад;
			НоваяСтрока.Номенклатура = Номенклатура;
			НоваяСтрока.Партнер = Партнер;
			НоваяСтрока.Дата = КлючЗначение.Ключ;
			НоваяСтрока.Количество = КлючЗначение.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	КачествоДляЗагрузки = Новый ТаблицаЗначений();
	КачествоДляЗагрузки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КачествоДляЗагрузки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КачествоДляЗагрузки.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	КачествоДляЗагрузки.Колонки.Добавить("Качество", Новый ОписаниеТипов("Число"));
	
	Для Каждого Качество Из КачествоМодели Цикл
		Если Качество["predictor"] <> "1C_model" Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = КачествоДляЗагрузки.Добавить();
		
		Ответ = ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(Качество["product_id"], НастройкиСервиса,
			НайденныеАналоги);
		Номенклатура = Ответ.Номенклатура;
		НайденныеАналоги = Ответ.НайденныеАналоги;
		
		Если Номенклатура = Неопределено
			Или Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = Номенклатура;
		
		Если Не СервисПрогнозирования.ПустоеЗначениеСервиса(Качество["customer_id"]) Тогда //@skip-warning
			Идентификатор = Новый УникальныйИдентификатор(Качество["customer_id"]);
			Партнер = Справочники.Партнеры.ПолучитьСсылку(Идентификатор);
			НоваяСтрока.Партнер = Партнер;
		КонецЕсли;
		
		Если Не СервисПрогнозирования.ПустоеЗначениеСервиса(Качество["shop_id"]) Тогда
			Идентификатор = Новый УникальныйИдентификатор(Качество["shop_id"]);
			Склад = Справочники.Партнеры.ПолучитьСсылку(Идентификатор);
			НоваяСтрока.Склад = Склад;
		КонецЕсли;
		
		НоваяСтрока.Качество = Число(Качество["MAE"]);
	КонецЦикла;
	
	// Требуется загружать не все данные, а только те, которые подходят по заданным настройкам модели (вида плана).
	
	// Планы на даты прогноза перезаписываются. Планы на более ранние даты остаются как есть.
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВходящаяТаблица.Склад КАК Склад,
	|	ВходящаяТаблица.Номенклатура КАК Номенклатура,
	|	ВходящаяТаблица.Партнер КАК Партнер,
	|	НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, ДЕНЬ) КАК Дата,
	|	ВходящаяТаблица.Количество КАК Количество
	|ПОМЕСТИТЬ ВТВходящиеДанные
	|ИЗ
	|	&ВходящаяТаблица КАК ВходящаяТаблица
	|ИНДЕКСИРОВАТЬ ПО
	|	ВходящаяТаблица.Склад,
	|	ВходящаяТаблица.Номенклатура,
	|	ВходящаяТаблица.Партнер
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВходящаяТаблица.Склад КАК Склад,
	|	ВходящаяТаблица.Номенклатура КАК Номенклатура,
	|	ВходящаяТаблица.Партнер КАК Партнер,
	|	ВходящаяТаблица.Качество КАК Качество
	|ПОМЕСТИТЬ ВТКачество
	|ИЗ
	|	&КачествоПоПозициям КАК ВходящаяТаблица
	|ИНДЕКСИРОВАТЬ ПО
	|	ВходящаяТаблица.Склад,
	|	ВходящаяТаблица.Номенклатура,
	|	ВходящаяТаблица.Партнер
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВходящиеДанные.Склад КАК Склад,
	|	ВходящиеДанные.Номенклатура КАК Номенклатура,
	|	ВходящиеДанные.Партнер КАК Партнер,
	|	ВходящиеДанные.Дата КАК Дата,
	|	ВходящиеДанные.Количество КАК Количество,
	|	ЕСТЬNULL(КачествоПоПозициям.Качество, 0) КАК Качество,
	|	ЕСТЬNULL(ПланыПродаж.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка
	|ИЗ
	|	ВТВходящиеДанные КАК ВходящиеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКачество КАК КачествоПоПозициям
	|		ПО ВходящиеДанные.Номенклатура = КачествоПоПозициям.Номенклатура
	|			И ВходящиеДанные.Партнер = КачествоПоПозициям.Партнер
	|			И ВходящиеДанные.Склад = КачествоПоПозициям.Склад
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПродаж КАК ПланыПродаж
	|		ПО (ПланыПродаж.НачалоПериода = ВходящиеДанные.Дата)
	|			И (ПланыПродаж.Склад = ВходящиеДанные.Склад)
	|			И (ПланыПродаж.Партнер = ВходящиеДанные.Партнер)
	|			И (ПланыПродаж.Сценарий = &Сценарий)
	|			И (ПланыПродаж.ВидПлана = &ВидПлана)
	|			И (ПланыПродаж.Проведен)
	|			И (ПланыПродаж.НачалоПериода >= &НачалоПрогнозирования)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВходящиеДанные.Дата,
	|	ВходящиеДанные.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланПродаж.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПланПродаж КАК ПланПродаж
	|ГДЕ
	|	ПланПродаж.Сценарий = &Сценарий
	|	И ПланПродаж.ВидПлана = &ВидПлана
	|	И ПланПродаж.НачалоПериода >= &НачалоПрогнозирования
	|	И ПланПродаж.Проведен
	|";
	
	// Все даты сдвигаются к началу текущей периодичности.
	НачалоПрогнозирования = РеквизитыВидаПлана.НачалоПрогнозирования;
	ДеньНеделиНачалаПрогноза = РеквизитыВидаПлана.ДеньНеделиНачалаПрогноза;
	НачалоПрогнозирования = СдвинутьДатуКНачалуПериода(НачалоПрогнозирования, ТекущаяПериодичность, ДеньНеделиНачалаПрогноза);
	
	Запрос.УстановитьПараметр("ВходящаяТаблица", ДанныеДляЗагрузки);
	Запрос.УстановитьПараметр("КачествоПоПозициям", КачествоДляЗагрузки);
	Запрос.УстановитьПараметр("Сценарий", ТекущийСценарий);
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
	Запрос.УстановитьПараметр("НачалоПрогнозирования", НачалоПрогнозирования);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаДляФильтрации = МассивРезультатов[2].Выгрузить();
	ВсеПодходящиеПланы = МассивРезультатов[3].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("СервисПрогнозированияФильтрЗагрузкиПрогноза");
	
	// 1 шаг фильтрации - применение общего фильтра на загрузку.
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ВтВходящиеДанные", ТаблицаДляФильтрации);
	ФильтрНаЗагрузку = Константы.НастройкиОтборовНаЗагрузкуСервисаПрогнозирования.Получить().Получить();
	Если ЗначениеЗаполнено(ФильтрНаЗагрузку) Тогда
		ОтборыСКД = ФильтрНаЗагрузку.ОбщийОтборЗагрузки;
		ТаблицаДляФильтрации = ПолучитьРезультатСКД(СхемаКомпоновкиДанных, ОтборыСКД, Неопределено, ВнешниеНаборы);
	КонецЕсли;
	
	// 2 шаг фильтрации - применение фильтра на загрузку из вида плана.
	ВнешниеНаборы.Вставить("ВтВходящиеДанные", ТаблицаДляФильтрации);
	СтруктураНастроек = РеквизитыВидаПлана.СтруктураНастроек.Получить();
	Если ЗначениеЗаполнено(СтруктураНастроек) Тогда
		ОтборыСКД = СтруктураНастроек.ОтборНоменклатурыНастройки;
		ТаблицаДляФильтрации = ПолучитьРезультатСКД(СхемаКомпоновкиДанных, ОтборыСКД, Неопределено, ВнешниеНаборы);
	КонецЕсли;
	
	// Если данные флаги взведены, в один документ может записаться несколько партнеров и складов.
	// В ином случае ожидается, что сервис прогнозирования вернет единственные значения партнера и склада.
	ЗаполнятьНесколькоСкладов = РеквизитыВидаПлана.ЗаполнятьСклад;
	ЗаполнятьНесколькоПартнеров = РеквизитыВидаПлана.ЗаполнятьПартнера;
	
	ТекущиеЗначения = Новый Структура("Дата");
	Если Не ЗаполнятьНесколькоПартнеров Тогда
		ТекущиеЗначения.Вставить("Партнер");
	КонецЕсли;
	Если Не ЗаполнятьНесколькоСкладов Тогда
		ТекущиеЗначения.Вставить("Склад");
	КонецЕсли;
	
	ТекущийДокумент = Неопределено;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	Для Каждого ТекущаяСтрока Из ТаблицаДляФильтрации Цикл
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеЗначения, ТекущаяСтрока) Тогда
			
			Если ТекущийДокумент <> Неопределено Тогда
				НачатьТранзакцию();
				Попытка
					УстановитьБлокировкуНаПланПродаж(ТекущийДокумент.Ссылка);
					ТекущийДокумент.Записать(РежимЗаписиДокумента.Проведение);
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.Документы.ПланПродаж,
						,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.Ссылка) Тогда
				ТекущийДокумент = ТекущаяСтрока.Ссылка.ПолучитьОбъект();
				ТекущийДокумент.Товары.Очистить();
				
				НайденныйДокумент = ВсеПодходящиеПланы.Найти(ТекущаяСтрока.Ссылка);
				Если НайденныйДокумент <> Неопределено Тогда
					ВсеПодходящиеПланы.Удалить(НайденныйДокумент);
				КонецЕсли;
				
			Иначе
				ТекущийДокумент = Документы.ПланПродаж.СоздатьДокумент();
			КонецЕсли;
			
			ТекущийДокумент.Склад = ?(ЗаполнятьНесколькоСкладов, Неопределено, ТекущаяСтрока.Склад);
			ТекущийДокумент.Партнер = ?(ЗаполнятьНесколькоПартнеров, Неопределено, ТекущаяСтрока.Партнер);
			
			ТекущийДокумент.Дата = НачалоДня(ТекущаяДатаСеанса());
			ТекущийДокумент.НачалоПериода = СдвинутьДатуКНачалуПериода(ТекущаяСтрока.Дата, ТекущаяПериодичность, ДеньНеделиНачалаПрогноза);
			ТекущийДокумент.ОкончаниеПериода = ДобавитьПериодичностьКДате(ТекущийДокумент.НачалоПериода, ТекущаяПериодичность);
			ТекущийДокумент.Статус = Перечисления.СтатусыПланов.ВПодготовке;
			ТекущийДокумент.Сценарий = ТекущийСценарий;
			ТекущийДокумент.Периодичность = ТекущаяПериодичность;
			ТекущийДокумент.ВидПлана = ВидПлана;
			
			ЗаполнитьЗначенияСвойств(ТекущиеЗначения, ТекущаяСтрока);
			
		КонецЕсли;
		
		НоваяСтрока = ТекущийДокумент.Товары.Добавить();
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
		НоваяСтрока.Склад = ТекущаяСтрока.Склад;
		НоваяСтрока.Партнер = ТекущаяСтрока.Партнер;
		НоваяСтрока.Количество = ТекущаяСтрока.Количество;
		НоваяСтрока.ДатаОтгрузки = СдвинутьДатуКНачалуПериода(ТекущаяСтрока.Дата, ТекущаяПериодичность, ДеньНеделиНачалаПрогноза);
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокВСтрокеТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
		
	КонецЦикла;
	
	Если ТекущийДокумент <> Неопределено Тогда
		НачатьТранзакцию();
		Попытка
			УстановитьБлокировкуНаПланПродаж(ТекущийДокумент.Ссылка);
			ТекущийДокумент.Записать(РежимЗаписиДокумента.Проведение);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ПланПродаж,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	// Необработанные документы введенные ранее требуется удалить.
	НачатьТранзакцию();
	Попытка
		Для Индекс = 0 По ВсеПодходящиеПланы.Количество() - 1 Цикл
			ТекущийДокумент = ВсеПодходящиеПланы[Индекс].ПолучитьОбъект();
			ТекущийДокумент.Товары.Очистить();
			ТекущийДокумент.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ПланПродаж,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СоставПередаваемыхДанных

// Получить описание реквизитов коллекций.
// 
// Возвращаемое значение:
//  см. ОписаниеВыгружаемогоЭлементаДанных.
Функция ПолучитьОписаниеРеквизитовВсехКоллекций() Экспорт
	
	Описание = Новый Структура();
	
	// Обязательные коллекции.
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных("sales", Истина, Истина, "Продажи", НСтр("ru='Продажи'"),
		Ложь, ПолучитьОписаниеРеквизитовКоллекцииПродаж());
	Описание.Вставить("Продажи", ОписаниеКоллекции);
	
	// Необязательные коллекции.
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных("products", Ложь, Ложь, "Товары", НСтр("ru='Товары'"),
		Истина, ПолучитьОписаниеРеквизитовКоллекцииТоваров());
	Описание.Вставить("Товары", ОписаниеКоллекции);
	
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных("category", Ложь, Ложь, "Категории", НСтр("ru='Категории товаров'"),
		Истина, ПолучитьОписаниеРеквизитовКоллекцииКатегорийТоваров());
	Описание.Вставить("Категории", ОписаниеКоллекции);
	
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных("customers", Ложь, Ложь, "Покупатели", НСтр("ru='Покупатели'"),
		Истина, ПолучитьОписаниеРеквизитовКоллекцииПокупателей());
	Описание.Вставить("Покупатели", ОписаниеКоллекции);
	
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных("shops", Ложь, Ложь, "Склады", НСтр("ru='Склады/магазины'"),
		Истина, ПолучитьОписаниеРеквизитовКоллекцииСкладов());
	Описание.Вставить("Склады", ОписаниеКоллекции);
	
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных("stock", Ложь, Ложь, "Остатки", НСтр("ru='Остатки товаров'"),
		Ложь, ПолучитьОписаниеРеквизитовКоллекцииОстатковТоваров());
	Описание.Вставить("Остатки", ОписаниеКоллекции);
	
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных("customer_orders", Ложь, Ложь, "Заказы", НСтр("ru='Заказы клиентов'"),
		Ложь, ПолучитьОписаниеРеквизитовКоллекцииЗаказовКлиентов());
	Описание.Вставить("Заказы", ОписаниеКоллекции);
	
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных("promo", Ложь, Ложь, "Промо", НСтр("ru='Промо акции'"),
		Ложь, ПолучитьОписаниеРеквизитовКоллекцииПромоАкций());
	Описание.Вставить("Промо", ОписаниеКоллекции);
	
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных("sales_plan", Ложь, Ложь, "ПланыПродаж", НСтр("ru='Контрольные планы продаж'"),
		Ложь, ПолучитьОписаниеРеквизитовКоллекцииПлановПродаж());
	Описание.Вставить("ПланыПродаж", ОписаниеКоллекции);
	
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных("seasonality", Ложь, Ложь, "Сезонность", НСтр("ru='Сезонность'"),
		Истина, ПолучитьОписаниеРеквизитовКоллекцииСезонности());
	Описание.Вставить("Сезонность", ОписаниеКоллекции);
	
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных("calendar", Ложь, Ложь, "Календарь", НСтр("ru='Календарь предприятия'"),
		Ложь, ПолучитьОписаниеРеквизитовКоллекцииКалендарь());
	Описание.Вставить("Календарь", ОписаниеКоллекции);
	
	Возврат Описание;
	
КонецФункции

// Получить описание метаданных по коллекции.
// 
// Параметры:
//  ИмяКоллекции - Строка - Имя коллекции
// 
// Возвращаемое значение:
//  Массив из см. ШаблонОписанияМетаданных.
Функция ПолучитьОписаниеМетаданныхПоКоллекции(ИмяКоллекции) Экспорт
	
	Если ИмяКоллекции = "Продажи" Тогда
		Описания = Новый Массив();
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ПланПродаж;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ПланПродаж";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.РеализацияТоваровУслуг;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_РеализацияТоваровУслуг";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.КорректировкаРеализации;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_КорректировкаРеализации";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ВозвратТоваровОтКлиента;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ВозвратТоваровОтКлиента";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ОтчетКомиссионера;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ОтчетКомиссионера";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ВводОстатков;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ВводОстатков";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ВводОстатковОПродажахЗаПрошлыеПериоды;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ВводОстатковОПродажахЗаПрошлыеПериоды";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ВводОстатковТоваров;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ВводОстатковТоваров";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ОтчетОРозничныхПродажах;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ОтчетОРозничныхПродажах";
		Описания.Добавить(ОписаниеОбъекта);
		
		Возврат Описания;
	ИначеЕсли ИмяКоллекции = "Товары" Тогда
		Описания = Новый Массив();
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Справочники.Номенклатура;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Справочник_Номенклатура";
		
		Описания.Добавить(ОписаниеОбъекта);
		
		Возврат Описания;
	ИначеЕсли ИмяКоллекции = "Категории" Тогда
		Описания = Новый Массив();
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Справочники.ВидыНоменклатуры;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Справочник_ВидыНоменклатуры";
		
		Описания.Добавить(ОписаниеОбъекта);
		
		Возврат Описания;
	ИначеЕсли ИмяКоллекции = "Покупатели" Тогда
		Описания = Новый Массив();
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Справочники.Партнеры;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Справочник_Партнеры";
		
		Описания.Добавить(ОписаниеОбъекта);
		
		Возврат Описания;
	ИначеЕсли ИмяКоллекции = "Склады" Тогда
		Описания = Новый Массив();
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Справочники.Склады;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Справочник_Склады";
		
		Описания.Добавить(ОписаниеОбъекта);
		
		Возврат Описания;
	Иначе
		ВызватьИсключение ТекстНеРеализованаВыгрузкаДопРеквизитов(ИмяКоллекции);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Тексты

// Текст для события журнала регистрации.
// 
// Возвращаемое значение:
//  Строка
Функция ТекстСобытиеЖурналаРегистрации() Экспорт
	ТекстСобытия = НСтр("ru='Сервис прогнозирования продаж'");
	Возврат ТекстСобытия;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШаблоныИСтруктуры

// Шаблон описания метаданных.
// 
// Возвращаемое значение:
//  Структура - Шаблон описания метаданных:
// * ОбъектМетаданных - Произвольный - 
// * ИмяОбъектаДопРеквизитовСвойств - Строка -  
Функция ШаблонОписанияМетаданных()
	Возврат Новый Структура("ОбъектМетаданных, ИмяОбъектаДопРеквизитовСвойств");
КонецФункции

// Описание ответа порции периодической коллекции.
// 
// Возвращаемое значение:
//  Структура - Описание ответа порции периодической коллекции:
// * Коллекция - ТаблицаЗначений -
// * КоличествоДанных - Число -
// * ДатаОкончанияВыборкиПорции - Дата -
Функция ОписаниеОтветаПорцииПериодическойКоллекции()
	
	Структура = Новый Структура();
	Структура.Вставить("Коллекция", Новый ТаблицаЗначений);
	Структура.Вставить("КоличествоДанных", 0);
	Структура.Вставить("ДатаОкончанияВыборкиПорции", Дата(1, 1, 1));
	
	Возврат Структура;
	
КонецФункции

// Шаблон ответа функции ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога
// 
// Возвращаемое значение:
//   - Структура:
//    * Номенклатура - СправочникСсылка.Номенклатура - найденная номенклатура.
//    * НайденныеАналоги - Соответствие - где ключ это идентификатор, а значение это найденная ранее номенклатура.
//
Функция ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналогаОтвет()
	
	Возврат Новый Структура("Номенклатура, НайденныеАналоги");
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

// Получить коллекцию продаж.
// 
// Возвращаемое значение:
//  см. ОписаниеОтветаПорцииПериодическойКоллекции.
Функция ПолучитьКоллекциюПродаж()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) КАК Дата,
	|	Продажи.Регистратор КАК Ссылка,
	|	Продажи.КоличествоОборот КАК Количество,
	|	Продажи.СуммаОборот КАК Сумма,
	|	ВЫБОР
	|		КОГДА Продажи.КоличествоОборот <> 0
	|				И Продажи.СуммаОборот <> 0
	|			ТОГДА ВЫРАЗИТЬ(Продажи.СуммаОборот / Продажи.КоличествоОборот КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	Продажи.Номенклатура КАК КодТовара,
	|	Продажи.Партнер КАК КодКлиента,
	|	ВЫБОР
	|		КОГДА Продажи.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА Продажи.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК КодСклада,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВТОстаткиПлановые
	|ИЗ
	|	РегистрНакопления.ПланыПродаж.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор,
	|		(&ИспользоватьТолькоПланы
	|				ИЛИ &ИспользоватьОстаткиИПланы)
	|		И Сценарий = &СценарийПланов
	|		И (НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ Склад В ИЕРАРХИИ (&ОтборСкладов))
	|		) КАК Продажи
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ПланПродаж_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ПОМЕСТИТЬ ВТОстаткиПлановыеСДопРеквизитами
	|ИЗ
	|	ВТОстаткиПлановые КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродаж КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПродаж.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Коллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОстаткиПлановые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) КАК Дата,
	|	Продажи.Регистратор КАК Ссылка,
	|	Продажи.КоличествоОборот КАК Количество,
	|	Продажи.СуммаВыручкиОборот КАК Сумма,
	|	ВЫБОР
	|		КОГДА Продажи.КоличествоОборот <> 0
	|				И Продажи.СуммаВыручкиОборот <> 0
	|			ТОГДА ВЫРАЗИТЬ(Продажи.СуммаВыручкиОборот / Продажи.КоличествоОборот КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	Продажи.АналитикаУчетаНоменклатуры.Номенклатура КАК КодТовара,
	|	Продажи.АналитикаУчетаПоПартнерам.Партнер КАК КодКлиента,
	|	ВЫБОР
	|		КОГДА Продажи.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА Продажи.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК КодСклада,
	|	Продажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВТОстаткиФактические
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, 
	|		НЕ &ИспользоватьТолькоПланы
	|		И ХозяйственнаяОперация В (&ОперацииПродаж)
	|		И (НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ АналитикаУчетаНоменклатуры.Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ АналитикаУчетаПоПартнерам.Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ АналитикаУчетаНоменклатуры.МестоХранения В ИЕРАРХИИ (&ОтборСкладов))
	|		И (НЕ &УстановленОтборПоОрганизациям
	|				ИЛИ АналитикаУчетаПоПартнерам.Организация В ИЕРАРХИИ (&ОтборОрганизаций))
	|		)КАК Продажи
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиПлановыеСДопРеквизитами КАК ОстаткиПлановые
	|		ПО (НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) = ОстаткиПлановые.Дата)
	|			И Продажи.Склад = ОстаткиПлановые.КодСклада
	|			И Продажи.АналитикаУчетаНоменклатуры.Номенклатура = ОстаткиПлановые.КодТовара
	|ГДЕ
	|	ОстаткиПлановые.КодТовара ЕСТЬ NULL
	|;
	|ВЫБРАТЬ
	|	Коллекция.Ссылка КАК Ссылка,
	|	Коллекция.Дата КАК Дата,
	|	Коллекция.Количество КАК Количество,
	|	Коллекция.Сумма КАК Сумма,
	|	Коллекция.Цена КАК Цена,
	|	Коллекция.КодТовара КАК КодТовара,
	|	Коллекция.КодКлиента КАК КодКлиента,
	|	Коллекция.КодСклада КАК КодСклада,
	|	Коллекция.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Документ_РеализацияТоваровУслуг_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство КАК Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение КАК Значение
	|ПОМЕСТИТЬ ВТОстаткиФактическиеСДопРеквизитами
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Коллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_КорректировкаРеализации_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Коллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ВозвратТоваровОтКлиента_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Коллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ОтчетКомиссионера_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Коллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ВводОстатков_Реквизиты,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатков КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ВводОстатковОПродажахЗаПрошлыеПериоды_Реквизиты,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ВводОстатковТоваров_Реквизиты,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковТоваров КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ОтчетОРозничныхПродажах_Реквизиты,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОстаткиФактические
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Набор.Ссылка КАК Ссылка,
	|	Набор.Дата КАК Дата,
	|	СУММА(Набор.Количество) КАК Количество,
	|	СУММА(Набор.Сумма) КАК Сумма,
	|	СРЕДНЕЕ(Набор.Цена) КАК Цена,
	|	Набор.КодТовара КАК КодТовара,
	|	Набор.КодКлиента КАК КодКлиента,
	|	Набор.КодСклада КАК КодСклада,
	|	&РеквизитыВсе,
	|	Набор.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Набор.Свойство КАК Свойство,
	|	Набор.Значение КАК Значение
	|ИЗ
	|	(ВЫБРАТЬ
	|		Набор.Ссылка КАК Ссылка,
	|		Набор.Дата КАК Дата,
	|		Набор.Количество КАК Количество,
	|		Набор.Сумма КАК Сумма,
	|		Набор.Цена КАК Цена,
	|		Набор.КодТовара КАК КодТовара,
	|		Набор.КодКлиента КАК КодКлиента,
	|		Набор.КодСклада КАК КодСклада,
	|		&РеквизитыВсе,
	|		Набор.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		Набор.Свойство КАК Свойство,
	|		Набор.Значение КАК Значение
	|	ИЗ
	|		ВТОстаткиФактическиеСДопРеквизитами КАК Набор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Набор.Ссылка КАК Ссылка,
	|		Набор.Дата,
	|		Набор.Количество,
	|		Набор.Сумма,
	|		Набор.Цена,
	|		Набор.КодТовара,
	|		Набор.КодКлиента,
	|		Набор.КодСклада,
	|		&РеквизитыВсе,
	|		Набор.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		Набор.Свойство КАК Свойство,
	|		Набор.Значение КАК Значение
	|	ИЗ
	|		ВТОстаткиПлановыеСДопРеквизитами КАК Набор) КАК Набор
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Ссылка,
	|	Набор.Дата,
	|	Набор.КодТовара,
	|	Набор.КодКлиента,
	|	Набор.КодСклада,
	|	Набор.ХозяйственнаяОперация,
	|	&РеквизитыВсе,
	|	Набор.Свойство,
	|	Набор.Значение
	|
	|ИМЕЮЩИЕ
	|	СУММА(Набор.Количество) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	КодТовара";
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	ОписаниеДопРеквизитов = ДопРеквизитыКоллекции("Продажи");
	
	РеквизитыОбъектаВсеТекстом = ОписаниеДопРеквизитов.РеквизитыОбъектаВсеТекстом;
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	ДопРеквизитыПоМетаданным = ОписаниеДопРеквизитов.ДопРеквизитыПоМетаданным;
	
	ЕстьДопРеквизиты = ВсеДопРеквизитыКлючи.Количество() > 0;
	
	Для Каждого ОписаниеДопРеквизитовМетаданного Из ДопРеквизитыПоМетаданным Цикл
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&" + ОписаниеДопРеквизитовМетаданного.Значение.ПодменяемоеИмяВЗапросе
			+ ",", ОписаниеДопРеквизитовМетаданного.Значение.РеквизитыОбъектаТекстом);
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитыВсе,", РеквизитыОбъектаВсеТекстом);
	
	ЗначениеКонстанты = Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Получить().Получить();
	НастройкиОтборов = ЗначениеКонстанты.ОбщийОтборВыгрузки;
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры(НастройкиОтборов);
	ОтборПартнеров = ПолучитьОтборПартнеров(НастройкиОтборов);
	ОтборСкладов = ПолучитьОтборСкладов(НастройкиОтборов);
	ОтборОрганизаций = ПолучитьОтборОрганизаций(НастройкиОтборов);
	
	ДатаНачалаПродаж = ПолучитьДатыНачалаОкончанияПродаж().ДатаНачалаПродаж;
	
	ДиапазонДатДляВыгрузки = СервисПрогнозирования.ДиапазонДатДляВыгрузки("Продажи", ДатаНачалаПродаж);
	
	ОперацииПродаж = Новый Массив();
	ОперацииПродаж.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	ОперацииПродаж.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет);
	ОперацииПродаж.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов);
	ОперацииПродаж.Добавить(Перечисления.ХозяйственныеОперации.СторноРеализации);
	ОперацииПродаж.Добавить(Перечисления.ХозяйственныеОперации.РеализацияВРозницу);
	ОперацииПродаж.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеПоВозврату);
	ОперацииПродаж.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомиссионера);
	
	Запрос.УстановитьПараметр("ДатаНачала", ДиапазонДатДляВыгрузки.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДиапазонДатДляВыгрузки.ДатаОкончания);
	
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("ОтборПартнеров", ОтборПартнеров);
	Запрос.УстановитьПараметр("ОтборСкладов", ОтборСкладов);
	Запрос.УстановитьПараметр("ОтборОрганизаций", ОтборОрганизаций);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ЕстьОтборНоменклатуры(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоПартнерам", ЕстьОтборПартнеров(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам", ЕстьОтборСкладов(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоОрганизациям", ЕстьОтборОрганизаций(НастройкиОтборов));
	
	Запрос.УстановитьПараметр("ИспользоватьТолькоПланы", Настройки.ИспользоватьПлановыеОстаткиИПродажи
		И Не Настройки.ИспользоватьРеальныеОстаткиИПродажи);
	Запрос.УстановитьПараметр("ИспользоватьОстаткиИПланы", Настройки.ИспользоватьПлановыеОстаткиИПродажи
		И Настройки.ИспользоватьРеальныеОстаткиИПродажи);
	Запрос.УстановитьПараметр("СценарийПланов", Настройки.СценарийПрогнозированияФактИПлан);
	
	Запрос.УстановитьПараметр("ЕстьДопРеквизиты", ЕстьДопРеквизиты);
	Запрос.УстановитьПараметр("ТребуемыеДопСвойства", ВсеДопРеквизитыСвойства);
	Запрос.УстановитьПараметр("ОперацииПродаж", ОперацииПродаж);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Ответ = ОписаниеОтветаПорцииПериодическойКоллекции();
	
	Ответ.КоличествоДанных = Результат.Количество();
	Ответ.ДатаОкончанияВыборкиПорции = ДиапазонДатДляВыгрузки.ДатаОкончания;
	
	Если ЕстьДопРеквизиты Тогда
		Ответ.Коллекция = ОбработатьКоллекциюСДопРеквизитами(Результат, ОписаниеДопРеквизитов, Ложь);
	Иначе
		Результат.Колонки.Удалить("Свойство");
		Результат.Колонки.Удалить("Значение");
		Ответ.Коллекция = Результат;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Получить коллекцию товаров исходную.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Номенклатура.
Функция ПолучитьКоллекциюТоваровИсходную()
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И (НЕ &УстановленОтборПоНоменклатуре
	|		ИЛИ
	|		Номенклатура.Ссылка В ИЕРАРХИИ(&ОтборНоменклатуры))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ОтборНоменклатуры.Количество() > 0);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Получить коллекцию товаров.
// 
// Параметры:
//  ИсходнаяКоллекция - Неопределено, Массив из Произвольный - Исходная коллекция
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
Функция ПолучитьКоллекциюТоваров(ИсходнаяКоллекция = Неопределено)
	
	Если ИсходнаяКоллекция = Неопределено Тогда
		ИсходнаяКоллекция = ПолучитьКоллекциюТоваровИсходную();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.Ссылка КАК Код,
	|	Номенклатура.ВидНоменклатуры КАК КодКатегории
	|ПОМЕСТИТЬ ВТКоллекция
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&ИсходнаяКоллекция)
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура.Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВТКоллекция.Ссылка,
	|	&Реквизиты,
	|	ВТКоллекция.Наименование,
	|	ВТКоллекция.Код,
	|	ВТКоллекция.КодКатегории,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТКоллекция КАК ВТКоллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаОбъект
	|			ПО ВТКоллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И ВТКоллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТКоллекция.Ссылка";
	
	ОписаниеДопРеквизитов = ДопРеквизитыКоллекции("Товары");
	
	РеквизитыОбъектаВсеТекстом = ОписаниеДопРеквизитов.ДопРеквизитыПоМетаданным.Справочник_Номенклатура.РеквизитыОбъектаТекстом;
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	
	ЕстьДопРеквизиты = ВсеДопРеквизитыКлючи.Количество() > 0;
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Реквизиты,", РеквизитыОбъектаВсеТекстом);
	
	Запрос.УстановитьПараметр("ИсходнаяКоллекция", ИсходнаяКоллекция);
	Запрос.УстановитьПараметр("ЕстьДопРеквизиты", ЕстьДопРеквизиты);
	Запрос.УстановитьПараметр("ТребуемыеДопСвойства", ВсеДопРеквизитыСвойства);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ЕстьДопРеквизиты Тогда
		Коллекция = ОбработатьКоллекциюСДопРеквизитами(Результат, ОписаниеДопРеквизитов);
	Иначе
		Результат.Колонки.Удалить("Свойство");
		Результат.Колонки.Удалить("Значение");
		Коллекция = Результат;
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

Функция ПолучитьКоллекциюКатегорийИсходную()
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.ВидНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И (НЕ &УстановленОтборПоНоменклатуре
	|		ИЛИ
	|		Номенклатура.Ссылка В ИЕРАРХИИ(&ОтборНоменклатуры))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ОтборНоменклатуры.Количество() > 0);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьКоллекциюКатегорий(ИсходнаяКоллекция = Неопределено)
	
	Если ИсходнаяКоллекция = Неопределено Тогда
		ИсходнаяКоллекция = ПолучитьКоллекциюКатегорийИсходную();
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидНоменклатуры.Ссылка КАК Ссылка,
	|	ВидНоменклатуры.Наименование КАК Наименование,
	|	ВидНоменклатуры.Ссылка КАК Код
	|ПОМЕСТИТЬ ВТКоллекция
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидНоменклатуры
	|ГДЕ
	|	ВидНоменклатуры.Ссылка В (&ИсходнаяКоллекция)
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНоменклатуры.Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВТКоллекция.Ссылка,
	|	&Реквизиты,
	|	ВТКоллекция.Наименование,
	|	ВТКоллекция.Код
	|ИЗ
	|	ВТКоллекция КАК ВТКоллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ТаблицаОбъект
	|			ПО ВТКоллекция.Ссылка = ТаблицаОбъект.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТКоллекция.Ссылка";
	
	ОписаниеДопРеквизитов = ДопРеквизитыКоллекции("Категории");
	
	РеквизитыОбъектаВсеТекстом 
		= ОписаниеДопРеквизитов.ДопРеквизитыПоМетаданным.Справочник_ВидыНоменклатуры.РеквизитыОбъектаТекстом;
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Реквизиты,", РеквизитыОбъектаВсеТекстом);
	
	Запрос.УстановитьПараметр("ИсходнаяКоллекция", ИсходнаяКоллекция);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Коллекция = Результат;
	
	Возврат Коллекция;
	
КонецФункции

Функция ПолучитьКоллекциюПокупателейИсходную()
	
	ОтборПартнеров = ПолучитьОтборПартнеров();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партнеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	НЕ Партнеры.ПометкаУдаления
	|	И (НЕ &УстановленОтборПоПартнерам
	|		ИЛИ
	|		Партнеры.Ссылка В ИЕРАРХИИ(&ОтборПартнеров))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтборПартнеров", ОтборПартнеров);
	Запрос.УстановитьПараметр("УстановленОтборПоПартнерам", ОтборПартнеров.Количество() > 0);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьКоллекциюПокупателей(ИсходнаяКоллекция = Неопределено)
	
	Если ИсходнаяКоллекция = Неопределено Тогда
		ИсходнаяКоллекция = ПолучитьКоллекциюПокупателейИсходную();
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Ссылка,
	|	Партнеры.Ссылка КАК КодПокупателя
	|ПОМЕСТИТЬ ВТКоллекция
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка В (&ИсходнаяКоллекция)
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнеры.Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВТКоллекция.Ссылка,
	|	&Реквизиты,
	|	ВТКоллекция.КодПокупателя,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТКоллекция КАК ВТКоллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК ТаблицаОбъект
	|			ПО ВТКоллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И ВТКоллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТКоллекция.Ссылка";
	
	ОписаниеДопРеквизитов = ДопРеквизитыКоллекции("Покупатели");
	
	РеквизитыОбъектаВсеТекстом = ОписаниеДопРеквизитов.ДопРеквизитыПоМетаданным.Справочник_Партнеры.РеквизитыОбъектаТекстом;
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	
	ЕстьДопРеквизиты = ВсеДопРеквизитыКлючи.Количество() > 0;
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Реквизиты,", РеквизитыОбъектаВсеТекстом);
	
	Запрос.УстановитьПараметр("ИсходнаяКоллекция", ИсходнаяКоллекция);
	Запрос.УстановитьПараметр("ЕстьДопРеквизиты", ЕстьДопРеквизиты);
	Запрос.УстановитьПараметр("ТребуемыеДопСвойства", ВсеДопРеквизитыСвойства);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ЕстьДопРеквизиты Тогда
		Коллекция = ОбработатьКоллекциюСДопРеквизитами(Результат, ОписаниеДопРеквизитов);
	Иначе
		Результат.Колонки.Удалить("Свойство");
		Результат.Колонки.Удалить("Значение");
		Коллекция = Результат;
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

Функция ПолучитьКоллекциюСкладовИсходную()
	
	ОтборСкладов = ПолучитьОтборСкладов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ПометкаУдаления
	|	И (НЕ &УстановленОтборПоСкладам
	|		ИЛИ
	|		Склады.Ссылка В ИЕРАРХИИ(&ОтборСкладов))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтборСкладов", ОтборСкладов);
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам", ОтборСкладов.Количество() > 0);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьКоллекциюСкладов(ИсходнаяКоллекция = Неопределено)
	
	Если ИсходнаяКоллекция = Неопределено Тогда
		ИсходнаяКоллекция = ПолучитьКоллекциюСкладовИсходную();
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка,
	|	Склады.Ссылка КАК КодСклада
	|ПОМЕСТИТЬ ВТКоллекция
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В (&ИсходнаяКоллекция)
	|ИНДЕКСИРОВАТЬ ПО
	|	Склады.Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВТКоллекция.Ссылка,
	|	&Реквизиты,
	|	ВТКоллекция.КодСклада,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТКоллекция КАК ВТКоллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаОбъект
	|			ПО ВТКоллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И ВТКоллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТКоллекция.Ссылка";
	
	ОписаниеДопРеквизитов = ДопРеквизитыКоллекции("Склады");
	
	РеквизитыОбъектаВсеТекстом = ОписаниеДопРеквизитов.ДопРеквизитыПоМетаданным.Справочник_Склады.РеквизитыОбъектаТекстом;
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	
	ЕстьДопРеквизиты = ВсеДопРеквизитыКлючи.Количество() > 0;
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Реквизиты,", РеквизитыОбъектаВсеТекстом);
	
	Запрос.УстановитьПараметр("ИсходнаяКоллекция", ИсходнаяКоллекция);
	Запрос.УстановитьПараметр("ЕстьДопРеквизиты", ЕстьДопРеквизиты);
	Запрос.УстановитьПараметр("ТребуемыеДопСвойства", ВсеДопРеквизитыСвойства);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ЕстьДопРеквизиты Тогда
		Коллекция = ОбработатьКоллекциюСДопРеквизитами(Результат, ОписаниеДопРеквизитов);
	Иначе
		Результат.Колонки.Удалить("Свойство");
		Результат.Колонки.Удалить("Значение");
		Коллекция = Результат;
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

Функция ПолучитьКоллекциюОстатков()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТоварыНаСкладах.Период, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ ВтДаты
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Обороты(, , ДЕНЬ, ) КАК ТоварыНаСкладах
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК Дата
	|ИЗ
	|	ВтДаты КАК ВтДаты";
	
	НачалоОстатков = Запрос.Выполнить().Выбрать();
	НачалоОстатков.Следующий();
	ДатаНачалаОстатков = НачалоОстатков.Дата;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиИОбороты.ВНаличииКонечныйОстаток КАК Количество,
	|	ОстаткиИОбороты.Номенклатура КАК КодТовара,
	|	ОстаткиИОбороты.Склад КАК КодСклада,
	|	ОстаткиИОбороты.Период КАК Дата
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, День, , 
	|		(НЕ &УстановленОтборПоНоменклатуре ИЛИ Номенклатура В (&ОтборНоменклатуры))
	|		ИЛИ (НЕ &УстановленОтборПоСкладам ИЛИ Склад В (&ОтборСкладов))) КАК ОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ОстаткиИОбороты.Номенклатура";
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры();
	ОтборСкладов = ПолучитьОтборСкладов();
	
	ДиапазонДатДляВыгрузки = СервисПрогнозирования.ДиапазонДатДляВыгрузки("Остатки", ДатаНачалаОстатков);
	
	Запрос.УстановитьПараметр("ДатаНачала", ДиапазонДатДляВыгрузки.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДиапазонДатДляВыгрузки.ДатаОкончания);
	
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ОтборНоменклатуры.Количество() > 0);
	Запрос.УстановитьПараметр("ОтборСкладов", ОтборСкладов);
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам", ОтборСкладов.Количество() > 0);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Ответ = ОписаниеОтветаПорцииПериодическойКоллекции();
	Ответ.Коллекция = Результат;
	Ответ.КоличествоДанных = Результат.Количество();
	Ответ.ДатаОкончанияВыборкиПорции = ДиапазонДатДляВыгрузки.ДатаОкончания;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьКоллекциюЗаказовКлиентовДанныеРегистра()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЗаказыКлиентов.Период, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ ВтДаты
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Обороты(, , ДЕНЬ, ) КАК ЗаказыКлиентов
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК Дата
	|ИЗ
	|	ВтДаты КАК ВтДаты";
	
	НачалоЗаказов = Запрос.Выполнить().Выбрать();
	НачалоЗаказов.Следующий();
	ДатаНачалаЗаказов = НачалоЗаказов.Дата;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЗаказа.Период КАК Дата,
	|	СУММА(ДанныеЗаказа.ЗаказаноОборот) КАК Количество,
	|	СУММА(ДанныеЗаказа.СуммаОборот) КАК Сумма,
	|	СУММА(ВЫБОР
	|		КОГДА
	|			ДанныеЗаказа.ЗаказаноОборот <> 0 И ДанныеЗаказа.СуммаОборот <> 0
	|		ТОГДА
	|			ВЫРАЗИТЬ(ДанныеЗаказа.СуммаОборот / ДанныеЗаказа.ЗаказаноОборот КАК ЧИСЛО(31,2))
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК ЦенаЗакупки,
	|	ДанныеЗаказа.ЗаказКлиента.Партнер КАК КодКлиента,
	|	ДанныеЗаказа.Номенклатура КАК КодТовара,
	|	ДанныеЗаказа.Склад КАК КодСклада,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеЗаказа.ЗаказаноОборот < 0
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК Отменено
	|ПОМЕСТИТЬ ВТЗаказы
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Обороты(&ДатаНачала, &ДатаОкончания, Запись,
	|		(НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ ЗаказКлиента.Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ Склад В ИЕРАРХИИ (&ОтборСкладов))) КАК ДанныеЗаказа
	|ГДЕ
	|	ДанныеЗаказа.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЗаказа.Период,
	|	ДанныеЗаказа.ЗаказКлиента.Партнер,
	|	ДанныеЗаказа.Номенклатура,
	|	ДанныеЗаказа.Склад,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеЗаказа.ЗаказаноОборот < 0
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ
	|
	|;
	|
	|ВЫБРАТЬ
	|	Набор.Дата КАК Дата,
	|	СУММА(Набор.Количество) КАК Количество,
	|	СУММА(Набор.КоличествоПроданное) КАК КоличествоПроданное,
	|	СУММА(Набор.Сумма) КАК Сумма,
	|	СУММА(Набор.ЦенаЗакупки) КАК Цена,
	|	Набор.КодКлиента КАК КодКлиента,
	|	Набор.КодТовара КАК КодТовара,
	|	Набор.КодСклада КАК КодСклада
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		Набор.Дата КАК Дата,
	|		Набор.Количество КАК Количество,
	|		Набор.Количество КАК КоличествоПроданное,
	|		Набор.Сумма КАК Сумма,
	|		Набор.ЦенаЗакупки КАК ЦенаЗакупки,
	|		Набор.КодКлиента КАК КодКлиента,
	|		Набор.КодТовара КАК КодТовара,
	|		Набор.КодСклада КАК КодСклада
	|	ИЗ
	|		ВТЗаказы КАК Набор
	|	ГДЕ
	|		НЕ Набор.Отменено
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Набор.Дата КАК Дата,
	|		0 КАК Количество,
	// Здесь отрицательное количество.
	|		Набор.Количество КАК КоличествоПроданное,
	|		Набор.Сумма КАК Сумма,
	|		Набор.ЦенаЗакупки КАК ЦенаЗакупки,
	|		Набор.КодКлиента КАК КодКлиента,
	|		Набор.КодТовара КАК КодТовара,
	|		Набор.КодСклада КАК КодСклада
	|	ИЗ
	|		ВТЗаказы КАК Набор
	|	ГДЕ
	|		Набор.Отменено
	|	) КАК Набор
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Дата,
	|	Набор.КодКлиента,
	|	Набор.КодТовара,
	|	Набор.КодСклада
	|";
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры();
	ОтборПартнеров = ПолучитьОтборПартнеров();
	ОтборСкладов = ПолучитьОтборСкладов();
	
	ДиапазонДатДляВыгрузки = СервисПрогнозирования.ДиапазонДатДляВыгрузки("Заказы", ДатаНачалаЗаказов);
	
	Запрос.УстановитьПараметр("ДатаНачала", ДиапазонДатДляВыгрузки.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДиапазонДатДляВыгрузки.ДатаОкончания);
	
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("ОтборПартнеров", ОтборПартнеров);
	Запрос.УстановитьПараметр("ОтборСкладов", ОтборСкладов);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ОтборНоменклатуры.Количество() > 0);
	Запрос.УстановитьПараметр("УстановленОтборПоПартнерам", ОтборПартнеров.Количество() > 0);
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам", ОтборСкладов.Количество() > 0);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Ответ = ОписаниеОтветаПорцииПериодическойКоллекции();
	Ответ.Коллекция = Результат;
	Ответ.КоличествоДанных = Результат.Количество();
	Ответ.ДатаОкончанияВыборкиПорции = ДиапазонДатДляВыгрузки.ДатаОкончания;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьКоллекциюПромоАкций()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СкидкиНаценки.Период, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ ВтДаты
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА МаркетинговыеМероприятия.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА МаркетинговыеМероприятия.ПлановаяДатаНачала
	|		ИНАЧЕ МаркетинговыеМероприятия.ДатаНачала
	|	КОНЕЦ) КАК Дата
	|ИЗ
	|	Справочник.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|ГДЕ
	|	НЕ МаркетинговыеМероприятия.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК Дата
	|ИЗ
	|	ВтДаты КАК ВтДаты";
	
	НачалоАкций = Запрос.Выполнить().Выбрать();
	НачалоАкций.Следующий();
	ДатаНачалаАкций = НачалоАкций.Дата;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА МаркетинговыеМероприятия.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА МаркетинговыеМероприятия.ПлановаяДатаНачала
	|		ИНАЧЕ МаркетинговыеМероприятия.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА МаркетинговыеМероприятия.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА МаркетинговыеМероприятия.ПлановаяДатаОкончания
	|		ИНАЧЕ МаркетинговыеМероприятия.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания,
	|	МаркетинговыеМероприятия.Наименование КАК Наименование,
	|	НЕОПРЕДЕЛЕНО КАК КодСклада,
	|	ПартнерыСегмента.Партнер КАК КодКлиента,
	|	НоменклатураСегмента.Номенклатура КАК КодТовара,
	|	0 КАК Скидка,
	|	""activity"" КАК Тип
	|ИЗ
	|	Справочник.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|		ПО МаркетинговыеМероприятия.СегментНоменклатуры = НоменклатураСегмента.Сегмент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|		ПО МаркетинговыеМероприятия.СегментПартнеров = ПартнерыСегмента.Сегмент
	|ГДЕ
	|	НЕ МаркетинговыеМероприятия.ПометкаУдаления
	|	И (НЕ &УстановленОтборПоНоменклатуре
	|		ИЛИ НоменклатураСегмента.Номенклатура ЕСТЬ NULL
	|		ИЛИ НоменклатураСегмента.Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|	И (НЕ &УстановленОтборПоПартнерам
	|		ИЛИ ПартнерыСегмента.Партнер ЕСТЬ NULL
	|		ИЛИ ПартнерыСегмента.Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(Набор.ДатаНачала) КАК ДатаНачала,
	|	МАКСИМУМ(Набор.ДатаОкончания) КАК ДатаОкончания,
	|	Набор.СкидкаНаценка.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА Набор.Источник ССЫЛКА Справочник.Склады
	|			ТОГДА Набор.Источник
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КодСклада,
	|	ВЫБОР
	|		КОГДА Набор.Источник ССЫЛКА Справочник.СоглашенияСКлиентами
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|						ТОГДА Набор.Источник
	|					ИНАЧЕ ПартнерыСегмента.Партнер
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КодКлиента,
	|	ДействиеСкидокНаценокПоНоменклатуре.Номенклатура КАК КодТовара,
	|	Набор.Скидка КАК Скидка,
	|	""discount"" КАК Тип
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДействиеСкидокНаценок.Период КАК ДатаНачала,
	|		НЕОПРЕДЕЛЕНО КАК ДатаОкончания,
	|		ДействиеСкидокНаценок.Источник КАК Источник,
	|		ДействиеСкидокНаценок.СкидкаНаценка КАК СкидкаНаценка,
	|		ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки КАК Скидка,
	|		ДействиеСкидокНаценок.Статус КАК Статус,
	|		ДействиеСкидокНаценок.СегментПартнеров КАК СегментПартнеров
	|	ИЗ
	|		РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
	|	ГДЕ
	|		ДействиеСкидокНаценок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|		И ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки >= 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НЕОПРЕДЕЛЕНО,
	|		ДействиеСкидокНаценок.Период,
	|		ДействиеСкидокНаценок.Источник,
	|		ДействиеСкидокНаценок.СкидкаНаценка,
	|		ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки,
	|		ДействиеСкидокНаценок.Статус,
	|		ДействиеСкидокНаценок.СегментПартнеров
	|	ИЗ
	|		РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
	|	ГДЕ
	|		ДействиеСкидокНаценок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.НеДействует)
	|		И ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки >= 0) КАК Набор
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|	ПО (Набор.Источник ССЫЛКА Справочник.СоглашенияСКлиентами)
	|		И (ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
	|		И (ПартнерыСегмента.Сегмент = ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).СегментПартнеров)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценокПоНоменклатуре КАК ДействиеСкидокНаценокПоНоменклатуре
	|	ПО Набор.СкидкаНаценка = ДействиеСкидокНаценокПоНоменклатуре.Источник
	|ГДЕ
	|	(НЕ &УстановленОтборПоНоменклатуре
	|		ИЛИ ДействиеСкидокНаценокПоНоменклатуре.Номенклатура ЕСТЬ NULL
	|		ИЛИ ДействиеСкидокНаценокПоНоменклатуре.Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|	И (НЕ &УстановленОтборПоПартнерам
	|		ИЛИ (ВЫБОР
	|			КОГДА Набор.Источник ССЫЛКА Справочник.СоглашенияСКлиентами
	|				ТОГДА ВЫБОР
	|						КОГДА ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|							ТОГДА Набор.Источник
	|						ИНАЧЕ ПартнерыСегмента.Партнер
	|					КОНЕЦ
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ ЕСТЬ NULL)
	|		ИЛИ (ВЫБОР
	|			КОГДА Набор.Источник ССЫЛКА Справочник.СоглашенияСКлиентами
	|				ТОГДА ВЫБОР
	|						КОГДА ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|							ТОГДА Набор.Источник
	|						ИНАЧЕ ПартнерыСегмента.Партнер
	|					КОНЕЦ
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ В ИЕРАРХИИ (&ОтборПартнеров)))
	|	И (НЕ &УстановленОтборПоСкладам
	|		ИЛИ ПартнерыСегмента.Партнер ЕСТЬ NULL
	|		ИЛИ ПартнерыСегмента.Партнер В ИЕРАРХИИ (&ОтборСкладов))
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Источник,
	|	Набор.Статус,
	|	Набор.СкидкаНаценка,
	|	Набор.СегментПартнеров,
	|	ВЫБОР
	|		КОГДА Набор.Источник ССЫЛКА Справочник.Склады
	|			ТОГДА Набор.Источник
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Набор.Источник ССЫЛКА Справочник.СоглашенияСКлиентами
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|						ТОГДА Набор.Источник
	|					ИНАЧЕ ПартнерыСегмента.Партнер
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ДействиеСкидокНаценокПоНоменклатуре.Номенклатура,
	|	Набор.Скидка";
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры();
	ОтборПартнеров = ПолучитьОтборПартнеров();
	ОтборСкладов = ПолучитьОтборСкладов();
	
	ДиапазонДатДляВыгрузки = СервисПрогнозирования.ДиапазонДатДляВыгрузки("Промо", ДатаНачалаАкций);
	
	Запрос.УстановитьПараметр("ДатаНачала", ДиапазонДатДляВыгрузки.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДиапазонДатДляВыгрузки.ДатаОкончания);
	
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("ОтборПартнеров", ОтборПартнеров);
	Запрос.УстановитьПараметр("ОтборСкладов", ОтборСкладов);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ОтборНоменклатуры.Количество() > 0);
	Запрос.УстановитьПараметр("УстановленОтборПоПартнерам", ОтборПартнеров.Количество() > 0);
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам", ОтборСкладов.Количество() > 0);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Ответ = ОписаниеОтветаПорцииПериодическойКоллекции();
	Ответ.Коллекция = Результат;
	Ответ.КоличествоДанных = Результат.Количество();
	Ответ.ДатаОкончанияВыборкиПорции = ДиапазонДатДляВыгрузки.ДатаОкончания;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьДатыНачалаОкончанияКонтрольныхПлановПродаж()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ ВтДаты
	|ИЗ
	|	РегистрНакопления.ПланыПродаж.Обороты(, , ДЕНЬ, Сценарий = &СценарийПланов) КАК Продажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаНачалаПродаж,
	|	МАКСИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаОкончанияПродаж
	|ИЗ
	|	ВтДаты КАК ВтДаты";
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	Запрос.УстановитьПараметр("СценарийПланов", Настройки.СценарийПрогнозированияКонтрольныхПланов);
	
	НачалоПродаж = Запрос.Выполнить().Выбрать();
	НачалоПродаж.Следующий();
	ДатаНачалаПродаж = НачалоПродаж.ДатаНачалаПродаж;
	ДатаОкончанияПродаж = НачалоПродаж.ДатаОкончанияПродаж;
	
	Возврат Новый Структура("ДатаНачалаПродаж, ДатаОкончанияПродаж", ДатаНачалаПродаж, ДатаОкончанияПродаж);
	
КонецФункции

Функция ПолучитьКоллекциюКонтрольныхПлановПродаж()
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры();
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Продажи.КоличествоОборот КАК Количество,
	|	Продажи.СуммаОборот КАК Сумма,
	|	ВЫБОР
	|		КОГДА Продажи.КоличествоОборот <> 0
	|				И Продажи.СуммаОборот <> 0
	|			ТОГДА ВЫРАЗИТЬ(Продажи.СуммаОборот / Продажи.КоличествоОборот КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	Продажи.Номенклатура КАК КодТовара,
	|	Продажи.Партнер КАК КодКлиента,
	|	ВЫБОР
	|		КОГДА Продажи.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА Продажи.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК КодСклада,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация,
	|	ДокументПланПродаж.Периодичность КАК Периодичность,
	|	НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) КАК ДатаПланирования,
	|	НАЧАЛОПЕРИОДА(ДокументПланПродаж.Дата, ДЕНЬ) КАК ДатаСозданияПланаПродаж,
	|	НАЧАЛОПЕРИОДА(ДокументПланПродаж.НачалоПериода, ДЕНЬ) КАК ДатаНачалаПериодаПланирования,
	|	НАЧАЛОПЕРИОДА(ДокументПланПродаж.ОкончаниеПериода, ДЕНЬ) КАК ДатаОкончанияПериодаПланирования
	|ИЗ
	|	РегистрНакопления.ПланыПродаж.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Регистратор,
	|			(Сценарий = &СценарийПланов
	|				И (НЕ &УстановленОтборПоНоменклатуре
	|					ИЛИ Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|				И (НЕ &УстановленОтборПоПартнерам
	|					ИЛИ Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|				И (НЕ &УстановленОтборПоСкладам
	|					ИЛИ Склад В ИЕРАРХИИ (&ОтборСкладов)))) КАК Продажи
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПродаж КАК ДокументПланПродаж
	|		ПО ДокументПланПродаж.Ссылка = Продажи.Регистратор
	|ГДЕ
	|	Продажи.КоличествоОборот > 0
	|	И Продажи.Регистратор ССЫЛКА Документ.ПланПродаж";
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры();
	ОтборПартнеров = ПолучитьОтборПартнеров();
	ОтборСкладов = ПолучитьОтборСкладов();
	
	ДатаНачалаПродаж = ПолучитьДатыНачалаОкончанияКонтрольныхПлановПродаж().ДатаНачалаПродаж;
	
	ДиапазонДатДляВыгрузки = СервисПрогнозирования.ДиапазонДатДляВыгрузки("ПланыПродаж", ДатаНачалаПродаж);
	
	Запрос.УстановитьПараметр("ДатаНачала", ДиапазонДатДляВыгрузки.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДиапазонДатДляВыгрузки.ДатаОкончания);
	
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("ОтборПартнеров", ОтборПартнеров);
	Запрос.УстановитьПараметр("ОтборСкладов", ОтборСкладов);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ОтборНоменклатуры.Количество() > 0);
	Запрос.УстановитьПараметр("УстановленОтборПоПартнерам", ОтборПартнеров.Количество() > 0);
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам", ОтборСкладов.Количество() > 0);
	
	Запрос.УстановитьПараметр("СценарийПланов", Настройки.СценарийПрогнозированияКонтрольныхПланов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Ответ = ОписаниеОтветаПорцииПериодическойКоллекции();
	Ответ.Коллекция = Результат;
	Ответ.КоличествоДанных = Результат.Количество();
	Ответ.ДатаОкончанияВыборкиПорции = ДиапазонДатДляВыгрузки.ДатаОкончания;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьКоллекциюСезонныхКоэффициентовИсходную()
	
	ОтборСкладов = ПолучитьОтборСкладов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СезоннаяГруппа.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СезонныеГруппы КАК СезоннаяГруппа
	|ГДЕ
	|	НЕ СезоннаяГруппа.ПометкаУдаления";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтборСкладов", ОтборСкладов);
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам", ОтборСкладов.Количество() > 0);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьКоллекциюСезонныхКоэффициентов(ИсходнаяКоллекция)
	
	Если ИсходнаяКоллекция = Неопределено Тогда
		ИсходнаяКоллекция = ПолучитьКоллекциюСезонныхКоэффициентовИсходную();
	КонецЕсли;
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры();
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СезонныеГруппы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТКоллекция
	|ИЗ
	|	Справочник.СезонныеГруппы КАК СезонныеГруппы
	|ГДЕ
	|	СезонныеГруппы.Ссылка В (&ИсходнаяКоллекция)
	|ИНДЕКСИРОВАТЬ ПО
	|	СезонныеГруппы.Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СезонныеКоэффициенты.Периодичность КАК Периодичность,
	|	СезонныеКоэффициенты.НомерПериода КАК НомерПериода,
	|	СезонныеКоэффициенты.Коэффициент КАК ВесовойКоэффициентСезонности,
	|	Номенклатура.Ссылка КАК КодТовара
	|ИЗ
	|	РегистрСведений.СезонныеКоэффициенты КАК СезонныеКоэффициенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоллекция КАК ВТКоллекция
	|		ПО ВТКоллекция.Ссылка = СезонныеКоэффициенты.СезоннаяГруппа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО Номенклатура.СезоннаяГруппа = СезонныеКоэффициенты.СезоннаяГруппа
	|ГДЕ
	|	НЕ Номенклатура.Ссылка ЕСТЬ NULL
	|	И (НЕ &УстановленОтборПоНоменклатуре
	|		ИЛИ Номенклатура.Ссылка В ИЕРАРХИИ (&ОтборНоменклатуры))";
	
	Запрос.УстановитьПараметр("ИсходнаяКоллекция", ИсходнаяКоллекция);
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ОтборНоменклатуры.Количество() > 0);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКоллекциюКалендарь()
	
	ОсновнойКалендарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	ПроизводственныйКалендарь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойКалендарь, "ПроизводственныйКалендарь");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаНачалаКалендаря
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &ПроизводственныйКалендарь
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачалаКалендаря";
	
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	
	НачалоКалендаря = Запрос.Выполнить().Выбрать();
	НачалоКалендаря.Следующий();
	ДатаНачалаКалендаря = НачалоКалендаря.ДатаНачалаКалендаря;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КалендарныеГрафики.ДатаГрафика КАК Дата,
	|	НЕ КалендарныеГрафики.ДеньВключенВГрафик КАК ЭтоПраздник
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &ПроизводственныйКалендарь";
	
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ДиапазонДатДляВыгрузки = СервисПрогнозирования.ДиапазонДатДляВыгрузки("Календарь", ДатаНачалаКалендаря);
	
	Ответ = ОписаниеОтветаПорцииПериодическойКоллекции();
	Ответ.Коллекция = Результат;
	Ответ.КоличествоДанных = Результат.Количество();
	Ответ.ДатаОкончанияВыборкиПорции = ДиапазонДатДляВыгрузки.ДатаОкончания;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СоставПередаваемыхДанных

// Описание выгружаемого элемента данных.
// 
// Параметры:
//  ИмяВСервисе - Строка - 
//  Обязательный - Булево -
//  Выгружать - Булево -  
//  ИмяВИсточнике - Строка - 
//  Представление - Строка -
//  Категориальный - Булево - 
//  ВложенноеОписание - см. ОписаниеВыгружаемогоЭлементаДанных.
// Возвращаемое значение:
//  Структура - Получить даты начала окончания продаж:
//  * ИмяВСервисе - Строка - 
//  * Обязательный - Булево -
//  * Выгружать - Булево -  
//  * ИмяВИсточнике - Строка - 
//  * Представление - Строка -
//  * Категориальный - Булево - 
//  * ВложенноеОписание - см. ОписаниеВыгружаемогоЭлементаДанных.
Функция ОписаниеВыгружаемогоЭлементаДанных(ИмяВСервисе,
	Обязательный,
	Выгружать,
	ИмяВИсточнике,
	Представление = "",
	Категориальный = Истина,
	ВложенноеОписание = Неопределено)
	
	Возврат СервисПрогнозированияПереопределяемыйКлиентСервер.ОписаниеВыгружаемогоЭлементаДанных(ИмяВСервисе,
		Обязательный,
		Выгружать,
		ИмяВИсточнике,
		Представление,
		Категориальный,
		ВложенноеОписание);
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииПродаж()
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	Описание.Вставить("Дата",
		ОписаниеВыгружаемогоЭлементаДанных("dt_sale", Истина, Истина, "Дата", НСтр("ru='Дата продажи'")));
	Описание.Вставить("КодТовара",
		ОписаниеВыгружаемогоЭлементаДанных("item_id", Истина, Истина, "КодТовара", НСтр("ru='Код товара'")));
	Описание.Вставить("КодСклада",
		ОписаниеВыгружаемогоЭлементаДанных("shop_id", Истина, Истина, "КодСклада", НСтр("ru='Код склада/магазина'")));
	Описание.Вставить("Количество",
		ОписаниеВыгружаемогоЭлементаДанных("quantity", Истина, Истина, "Количество", НСтр("ru='Количество'")));
	
	// Необязательные поля.
	Описание.Вставить("Цена",
		ОписаниеВыгружаемогоЭлементаДанных("price", Ложь, Ложь, "Цена", НСтр("ru='Цена продажи за единицу'")));
	Описание.Вставить("Сумма",
		ОписаниеВыгружаемогоЭлементаДанных("sum", Ложь, Ложь, "Сумма", НСтр("ru='Сумма продажи'")));
	Описание.Вставить("КодКлиента",
		ОписаниеВыгружаемогоЭлементаДанных("customer_id", Ложь, Ложь, "КодКлиента", НСтр("ru='Код покупателя'")));
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииТоваров()
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	Описание.Вставить("Код",
		ОписаниеВыгружаемогоЭлементаДанных("item_id", Истина, Истина, "Код", НСтр("ru='Код товара'")));
	
	// Необязательные поля.
	Описание.Вставить("Наименование",
		ОписаниеВыгружаемогоЭлементаДанных("name", Ложь, Ложь, "Наименование", НСтр("ru='Наименование'")));
	Описание.Вставить("КодКатегории",
		ОписаниеВыгружаемогоЭлементаДанных("category_id", Ложь, Ложь, "КодКатегории", НСтр("ru='Код категории'")));
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииКатегорийТоваров()
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	Описание.Вставить("Код",
		ОписаниеВыгружаемогоЭлементаДанных("category_id", Истина, Истина, "Код", НСтр("ru='Код категории'")));
	
	// Необязательные поля.
	Описание.Вставить("Наименование",
		ОписаниеВыгружаемогоЭлементаДанных("name", Ложь, Ложь, "Наименование", НСтр("ru='Наименование'")));
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииПокупателей()
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	Описание.Вставить("КодПокупателя",
		ОписаниеВыгружаемогоЭлементаДанных("customer_id", Истина, Истина, "КодПокупателя", НСтр("ru='Код покупателя'")));
	
	// Необязательные поля.
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииСкладов()
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	Описание.Вставить("КодСклада",
		ОписаниеВыгружаемогоЭлементаДанных("shop_id", Истина, Истина, "КодСклада", НСтр("ru='Код склада/магазина'")));
	
	// Необязательные поля.
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииОстатковТоваров()
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	Описание.Вставить("КодСклада",
		ОписаниеВыгружаемогоЭлементаДанных("shop_id", Истина, Истина, "КодСклада", НСтр("ru='Код склада/магазина'")));
	Описание.Вставить("КодТовара",
		ОписаниеВыгружаемогоЭлементаДанных("item_id ", Истина, Истина, "КодТовара", НСтр("ru='Код товара'")));
	Описание.Вставить("Дата",
		ОписаниеВыгружаемогоЭлементаДанных("dt_stock", Истина, Истина, "Дата", НСтр("ru='Дата остатков'")));
	Описание.Вставить("Количество",
		ОписаниеВыгружаемогоЭлементаДанных("quantity", Истина, Истина, "Количество", НСтр("ru='Количество'")));
	
	// Необязательные поля.
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииЗаказовКлиентов()
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	Описание.Вставить("КодСклада",
		ОписаниеВыгружаемогоЭлементаДанных("shop_id", Истина, Истина, "КодСклада", НСтр("ru='Код склада/магазина'")));
	Описание.Вставить("КодТовара",
		ОписаниеВыгружаемогоЭлементаДанных("item_id", Истина, Истина, "КодТовара", НСтр("ru='Код товара'")));
	Описание.Вставить("КодКлиента",
		ОписаниеВыгружаемогоЭлементаДанных("customer_id", Истина, Истина, "КодКлиента", НСтр("ru='Код покупателя'")));
	Описание.Вставить("Дата",
		ОписаниеВыгружаемогоЭлементаДанных("dt_order", Истина, Истина, "Дата", НСтр("ru='Дата планируемой продажи'")));
	Описание.Вставить("Количество",
		ОписаниеВыгружаемогоЭлементаДанных("quantity_order", Истина, Истина, "Количество", НСтр("ru='Количество'")));
	Описание.Вставить("КоличествоПроданное",
		ОписаниеВыгружаемогоЭлементаДанных("quantity_sale", Истина, Истина, "КоличествоПроданное", НСтр("ru='Количество проданное'")));
	Описание.Вставить("Цена",
		ОписаниеВыгружаемогоЭлементаДанных("price", Истина, Истина, "Цена", НСтр("ru='Цена продажи за единицу'")));
	Описание.Вставить("Сумма",
		ОписаниеВыгружаемогоЭлементаДанных("sum", Истина, Истина, "Сумма", НСтр("ru='Сумма продажи'")));
	
	// Необязательные поля.
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииПромоАкций()
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	Описание.Вставить("Наименование",
		ОписаниеВыгружаемогоЭлементаДанных("name", Истина, Истина, "Наименование", НСтр("ru='Наименование'")));
	Описание.Вставить("ДатаНачала",
		ОписаниеВыгружаемогоЭлементаДанных("start_order", Истина, Истина, "ДатаНачала", НСтр("ru='Дата начала акции'")));
	Описание.Вставить("ДатаОкончания",
		ОписаниеВыгружаемогоЭлементаДанных("finish_order", Истина, Истина, "ДатаОкончания", НСтр("ru='Дата окончания акции'")));
	Описание.Вставить("Скидка",
		ОписаниеВыгружаемогоЭлементаДанных("discount", Истина, Истина, "Скидка", НСтр("ru='Сумма скидки'")));
	Описание.Вставить("КодТовара",
		ОписаниеВыгружаемогоЭлементаДанных("item_id", Истина, Истина, "КодТовара", НСтр("ru='Код товара'")));
	Описание.Вставить("КодСклада",
		ОписаниеВыгружаемогоЭлементаДанных("shop_id", Истина, Истина, "КодСклада", НСтр("ru='Код склада/магазина'")));
	Описание.Вставить("КодКлиента",
		ОписаниеВыгружаемогоЭлементаДанных("customer_id", Истина, Истина, "КодКлиента", НСтр("ru='Код покупателя'")));
	Описание.Вставить("Тип",
		ОписаниеВыгружаемогоЭлементаДанных("type", Истина, Истина, "Тип", НСтр("ru='Тип акции'")));
	
	// Необязательные поля.
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииПлановПродаж()
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	Описание.Вставить("КодКлиента",
		ОписаниеВыгружаемогоЭлементаДанных("customer_id", Истина, Истина, "КодКлиента", НСтр("ru='Код покупателя'")));
	Описание.Вставить("КодСклада",
		ОписаниеВыгружаемогоЭлементаДанных("shop_id", Истина, Истина, "КодСклада", НСтр("ru='Код склада/магазина'")));
	Описание.Вставить("Периодичность",
		ОписаниеВыгружаемогоЭлементаДанных("periodicity", Истина, Истина, "Периодичность", НСтр("ru='Периодичность'")));
	Описание.Вставить("ДатаСозданияПланаПродаж",
		ОписаниеВыгружаемогоЭлементаДанных("dt_calc_date", Истина, Истина, "ДатаСозданияПланаПродаж", НСтр("ru='Дата формирования плана продаж'")));
	Описание.Вставить("ДатаНачалаПериодаПланирования",
		ОписаниеВыгружаемогоЭлементаДанных("dt_start_date", Истина, Истина, "ДатаНачалаПериодаПланирования", НСтр("ru='Дата начала периода планирования'")));
	Описание.Вставить("ДатаОкончанияПериодаПланирования",
		ОписаниеВыгружаемогоЭлементаДанных("dt_finish_date ", Истина, Истина, "ДатаОкончанияПериодаПланирования", НСтр("ru='Дата окончания периода планирования'")));
	Описание.Вставить("ДатаПланирования",
		ОписаниеВыгружаемогоЭлементаДанных("dt_plan_date", Истина, Истина, "ДатаПланирования", НСтр("ru='Дата планирования'")));
	Описание.Вставить("КодТовара",
		ОписаниеВыгружаемогоЭлементаДанных("item_id", Истина, Истина, "КодТовара", НСтр("ru='Код товара'")));
	Описание.Вставить("Количество",
		ОписаниеВыгружаемогоЭлементаДанных("quantity", Истина, Истина, "Количество", НСтр("ru='Количество'")));
	Описание.Вставить("Сумма",
		ОписаниеВыгружаемогоЭлементаДанных("sum", Истина, Истина, "Сумма", НСтр("ru='Сумма'")));
	
	// Необязательные поля.
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииСезонности()
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	Описание.Вставить("Периодичность",
		ОписаниеВыгружаемогоЭлементаДанных("periodicity", Истина, Истина, "Периодичность", НСтр("ru='Периодичность хранения сезонных коэффициентов'")));
	Описание.Вставить("НомерПериода",
		ОписаниеВыгружаемогоЭлементаДанных("period_number", Истина, Истина, "НомерПериода", НСтр("ru='Номер периода'")));
	Описание.Вставить("ВесовойКоэффициентСезонности",
		ОписаниеВыгружаемогоЭлементаДанных("seasonal_coefficient", Истина, Истина, "ВесовойКоэффициентСезонности", НСтр("ru='Весовой коэффициент сезонности'")));
	Описание.Вставить("КодТовара",
		ОписаниеВыгружаемогоЭлементаДанных("item_id", Истина, Истина, "КодТовара", НСтр("ru='Код товара'")));
	
	// Необязательные поля.
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииКалендарь()
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	Описание.Вставить("КодПраздника",
		ОписаниеВыгружаемогоЭлементаДанных("holiday_id", Истина, Истина, "КодПраздника", НСтр("ru='Код праздника'")));
	Описание.Вставить("Наименование",
		ОписаниеВыгружаемогоЭлементаДанных("name", Истина, Истина, "Наименование", НСтр("ru='Наименование'")));
	Описание.Вставить("ДатаНачала",
		ОписаниеВыгружаемогоЭлементаДанных("start_date", Истина, Истина, "ДатаНачала", НСтр("ru='Дата начала праздника'")));
	Описание.Вставить("ДатаОкончания",
		ОписаниеВыгружаемогоЭлементаДанных("finish_date", Истина, Истина, "ДатаОкончания", НСтр("ru='Дата окончания праздника'")));
	
	// Необязательные поля.
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область Разное

Функция ДопРеквизитыКоллекции(ИмяКоллекции)
	
	ИмяТаблицыОбъединения = "Набор";
	ИмяТаблицыМетаданного = "ТаблицаОбъект";
	
	// 1. Составление полного списка реквизитов.
	// 2. Составление полного списка доп.реквизитов/свойств.
	
	ВсеРеквизиты = Новый Массив();
	ВсеДопРеквизитыКлючи = Новый Массив();
	ВсеДопРеквизитыСвойства = Новый Массив();
	
	РеквизитыОбъектаВсеТекстом = "";
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	ИнфоОКоллекции = Настройки.Коллекции[ИмяКоллекции];
	ДоступныеРеквизиты = ИнфоОКоллекции.ВложенноеОписание;
	Для Каждого КлючЗначение Из ДоступныеРеквизиты Цикл
		ЧастиКлюча = СтрРазделить(КлючЗначение.Ключ, "_");
		Если ЧастиКлюча.Количество() = 1 Тогда
			Продолжить;
		КонецЕсли;
		ТипРеквизита = ЧастиКлюча[0];
		ИмяРеквизита = ЧастиКлюча[1];
		ИмяРеквизитаСТипом = ТипРеквизита + "_" + ИмяРеквизита;
		Если ТипРеквизита = "Реквизит" Тогда
			Если ВсеРеквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
				ВсеРеквизиты.Добавить(ИмяРеквизита);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(КлючЗначение.Значение.ДополнительноеСвойство) Тогда
			Если ВсеДопРеквизитыКлючи.Найти(ИмяРеквизитаСТипом) = Неопределено Тогда
				ВсеДопРеквизитыКлючи.Добавить(ИмяРеквизитаСТипом);
				ВсеДопРеквизитыСвойства.Добавить(КлючЗначение.Значение.ДополнительноеСвойство);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// 3. Текст выбора всех реквизитов, для запроса - агрегатора подзапросов.
	Для Каждого ИмяРеквизита Из ВсеРеквизиты Цикл
		РеквизитыОбъектаВсеТекстом = РеквизитыОбъектаВсеТекстом
			+ ИмяТаблицыОбъединения + ".Реквизит_" + ИмяРеквизита + ", ";
	КонецЦикла;
	
	// 4. Текст выбора всех реквизитов, для запроса к конкретному объекту метаданных.
	ОписаниеМетаданных = ПолучитьОписаниеМетаданныхПоКоллекции(ИмяКоллекции);
	
	ДопРеквизитыПоМетаданным = Новый Структура();
	Для Каждого ОписаниеМетаданного Из ОписаниеМетаданных Цикл
		
		РеквизитыОбъектаСобираемые = Новый Структура();
		Для Каждого ИмяРеквизита Из ВсеРеквизиты Цикл
			РеквизитыОбъектаСобираемые.Вставить(ИмяРеквизита, Ложь);
		КонецЦикла;
		
		ПоляПоОбъектуМетаданных = Новый Структура();
		ПоляПоОбъектуМетаданных.Вставить("РеквизитыОбъектаТекстом", "");
		ПоляПоОбъектуМетаданных.Вставить("РеквизитыОбъектаСобираемые", РеквизитыОбъектаСобираемые);
		ПоляПоОбъектуМетаданных.Вставить("ПодменяемоеИмяВЗапросе", ОписаниеМетаданного.ИмяОбъектаДопРеквизитовСвойств + "_Реквизиты");
		ДопРеквизитыПоМетаданным.Вставить(ОписаниеМетаданного.ИмяОбъектаДопРеквизитовСвойств,
			ПоляПоОбъектуМетаданных);
	КонецЦикла;
	
	Для Каждого ИмяРеквизита Из ВсеРеквизиты Цикл
		Для Каждого ОписаниеМетаданного Из ОписаниеМетаданных Цикл
			ЭтоРеквизитТекущегоМетаданного = ОписаниеМетаданного.ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено;
			РеквизитыОбъектаСобираемые = ДопРеквизитыПоМетаданным[ОписаниеМетаданного.ИмяОбъектаДопРеквизитовСвойств].РеквизитыОбъектаСобираемые;
			Если ЭтоРеквизитТекущегоМетаданного Тогда
				РеквизитыОбъектаСобираемые[ИмяРеквизита] = Истина;
			КонецЕсли;
			ДопРеквизитыПоМетаданным[ОписаниеМетаданного.ИмяОбъектаДопРеквизитовСвойств].РеквизитыОбъектаСобираемые = РеквизитыОбъектаСобираемые;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого КлючЗначение Из ДопРеквизитыПоМетаданным Цикл
		Ключ = КлючЗначение;
		РеквизитыОбъектаТекстом = ДопРеквизитыПоМетаданным[Ключ.Ключ].РеквизитыОбъектаТекстом;
		Для Каждого ИмяРеквизита Из ВсеРеквизиты Цикл
			Если КлючЗначение.Значение.РеквизитыОбъектаСобираемые[ИмяРеквизита] Тогда
				РеквизитыОбъектаТекстом = РеквизитыОбъектаТекстом
					+ ИмяТаблицыМетаданного + "." + ИмяРеквизита + " КАК Реквизит_" + ИмяРеквизита + ", ";
			Иначе
				РеквизитыОбъектаТекстом = РеквизитыОбъектаТекстом
					+ "НЕОПРЕДЕЛЕНО КАК Реквизит_" + ИмяРеквизита + ", ";
			КонецЕсли;
		КонецЦикла;
		ДопРеквизитыПоМетаданным[Ключ.Ключ].РеквизитыОбъектаТекстом = РеквизитыОбъектаТекстом;
	КонецЦикла;
	
	ВозвращаемаяСтруктура = Новый Структура();
	ВозвращаемаяСтруктура.Вставить("РеквизитыОбъектаВсеТекстом", РеквизитыОбъектаВсеТекстом);
	ВозвращаемаяСтруктура.Вставить("ДопРеквизитыПоМетаданным", ДопРеквизитыПоМетаданным);
	ВозвращаемаяСтруктура.Вставить("ВсеДопРеквизитыСвойства", ВсеДопРеквизитыСвойства);
	ВозвращаемаяСтруктура.Вставить("ВсеДопРеквизитыКлючи", ВсеДопРеквизитыКлючи);
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

Функция ОбработатьКоллекциюСДопРеквизитами(Коллекция, ОписаниеДопРеквизитов, ГруппироватьПоСсылке = Истина)
	
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	
	КолонкиКоллекции = "";
	
	ВозвращаемаяТаблица = Коллекция.СкопироватьКолонки();
	Для Каждого ОписаниеКолонки Из ВсеДопРеквизитыКлючи Цикл
		ВозвращаемаяТаблица.Колонки.Добавить(ОписаниеКолонки);
	КонецЦикла;
	
	Если Не ГруппироватьПоСсылке Тогда
		Для Каждого Колонка Из ВозвращаемаяТаблица.Колонки Цикл
			Если Колонка.Имя <> "Свойство"
				Или Колонка.Имя <> "Значение" Тогда
				КолонкиКоллекции = КолонкиКоллекции + ", " + Колонка.Имя;
			КонецЕсли;
		КонецЦикла;
	Иначе
		КолонкиКоллекции = "Ссылка";
	КонецЕсли;
	
	ТекущиеПоля = Новый Структура(КолонкиКоллекции);
	ТекущаяСтрока = Неопределено;
	Для Каждого Строка Из Коллекция Цикл
		Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеПоля, Строка) Тогда
			
			ЗаполнитьЗначенияСвойств(ТекущиеПоля, Строка);
			
			ТекущаяСтрока = ВозвращаемаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Строка);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.Свойство)
			И ЗначениеЗаполнено(Строка.Значение) Тогда
			Индекс = ВсеДопРеквизитыСвойства.Найти(Строка.Свойство);
			Если Индекс <> Неопределено Тогда
				ТекущаяСтрока[ВсеДопРеквизитыКлючи[Индекс]] = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ВозвращаемаяТаблица.Колонки.Удалить("Свойство");
	ВозвращаемаяТаблица.Колонки.Удалить("Значение");
	Возврат ВозвращаемаяТаблица;
	
КонецФункции

Функция СсылкаНаОбъектСуществует(СсылкаНаОбъект)
	
	// Объект не найден вернет Неопределено.
	ПроверочноеЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ПометкаУдаления");
	Возврат ПроверочноеЗначение <> Неопределено;
	
КонецФункции

Функция СдвинутьДатуКНачалуПериода(Дата, Периодичность, ДеньНеделиНачалаПрогноза)
	
	День = 86400;
	ОбработаннаяДата = Дата;
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		ОбработаннаяДата = НачалоДня(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Если ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.ПустаяСсылка() Тогда
			// Остается как есть.
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Понедельник Тогда
			ОбработаннаяДата = НачалоНедели(Дата);
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Вторник Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День;
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Среда Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День * 2;
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Четверг Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День * 3;
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Пятница Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День * 4;
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Суббота Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День * 5;
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Воскресенье Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День * 6;
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ОбработаннаяДата = НачалоМесяца(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ОбработаннаяДата = НачалоКвартала(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ОбработаннаяДата = НачалоГода(Дата);
	КонецЕсли;
	
	Возврат ОбработаннаяДата;
	
КонецФункции

Функция ДобавитьПериодичностьКДате(Дата, Периодичность)
	
	День = 86400;
	ОбработаннаяДата = Дата;
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		ОбработаннаяДата = ОбработаннаяДата + День;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ОбработаннаяДата = ОбработаннаяДата + День * 7;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ОбработаннаяДата = ДобавитьМесяц(ОбработаннаяДата, 1);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ОбработаннаяДата = ДобавитьМесяц(ОбработаннаяДата, 3);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ОбработаннаяДата = ДобавитьМесяц(ОбработаннаяДата, 6);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ОбработаннаяДата = ДобавитьМесяц(ОбработаннаяДата, 12);
	Иначе
		ОбработаннаяДата = ОбработаннаяДата + День;
	КонецЕсли;
	
	// Один день требуется отнять т.к. при прогнозе на 1 день, начать и закончить мы должны внутри одного дня.
	// Аналогично и для других периодичностей. 01.01.2020 + неделя = 07.01.2020, а не 08.01.2020.
	Возврат ОбработаннаяДата - День;
	
КонецФункции

Процедура УстановитьБлокировкуНаПланПродаж(СсылкаНаДокумента)
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Документ.ПланПродаж");
	ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", СсылкаНаДокумента);
	ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
	БлокировкаДанных.Заблокировать();
КонецПроцедуры

#КонецОбласти

#Область Отборы

Функция ПолучитьОтборНоменклатуры(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		ЗначениеКонстанты = Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Получить().Получить();
		НастройкиОтборов = ЗначениеКонстанты.ОбщийОтборВыгрузки;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПанельУправленияСервисомПрогнозирования.ПолучитьМакет("ФильтрОтправляемыхДанныхНоменклатура");
	
	Если ЕстьОтборНоменклатуры(НастройкиОтборов) Тогда
		Возврат ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов, "Номенклатура");
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОтборПартнеров(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		ЗначениеКонстанты = Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Получить().Получить();
		НастройкиОтборов = ЗначениеКонстанты.ОбщийОтборВыгрузки;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПанельУправленияСервисомПрогнозирования.ПолучитьМакет("ФильтрОтправляемыхДанныхПартнеры");
	
	Если ЕстьОтборПартнеров(НастройкиОтборов) Тогда
		Возврат ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов, "Партнер");
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОтборСкладов(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		ЗначениеКонстанты = Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Получить().Получить();
		НастройкиОтборов = ЗначениеКонстанты.ОбщийОтборВыгрузки;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПанельУправленияСервисомПрогнозирования.ПолучитьМакет("ФильтрОтправляемыхДанныхСклады");
	
	Если ЕстьОтборСкладов(НастройкиОтборов) Тогда
		Возврат ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов, "Склад");
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОтборОрганизаций(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		ЗначениеКонстанты = Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Получить().Получить();
		НастройкиОтборов = ЗначениеКонстанты.ОбщийОтборВыгрузки;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПанельУправленияСервисомПрогнозирования.ПолучитьМакет("ФильтрОтправляемыхДанныхОрганизации");
	
	Если ЕстьОтборОрганизаций(НастройкиОтборов) Тогда
		Возврат ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов, "Организация");
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции

Функция ЕстьОтборНоменклатуры(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		ЗначениеКонстанты = Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Получить().Получить();
		НастройкиОтборов = ЗначениеКонстанты.ОбщийОтборВыгрузки;
	КонецЕсли;
	Возврат ЕстьПолеВОтборе(НастройкиОтборов, "Номенклатура");
	
КонецФункции

Функция ЕстьОтборПартнеров(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Получить().Получить();
	КонецЕсли;
	
	Возврат ЕстьПолеВОтборе(НастройкиОтборов, "Партнер");
	
КонецФункции

Функция ЕстьОтборСкладов(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		ЗначениеКонстанты = Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Получить().Получить();
		НастройкиОтборов = ЗначениеКонстанты.ОбщийОтборВыгрузки;
	КонецЕсли;
	
	Возврат ЕстьПолеВОтборе(НастройкиОтборов, "Склад");
	
КонецФункции

Функция ЕстьОтборОрганизаций(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		ЗначениеКонстанты = Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Получить().Получить();
		НастройкиОтборов = ЗначениеКонстанты.ОбщийОтборВыгрузки;
	КонецЕсли;
	
	Возврат ЕстьПолеВОтборе(НастройкиОтборов, "Организация");
	
КонецФункции

Функция ЕстьПолеВОтборе(НастройкиОтборов, ИмяПоля)
	
	ОтборыНастроек = НастройкиОтборов.Отбор; // ОтборКомпоновкиДанных.
	
	Для Каждого ПолеОтбора Из ОтборыНастроек.Элементы Цикл
		Если ТипЗнч(ПолеОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Возврат ЕстьПолеВОтборе(ПолеОтбора, ИмяПоля);
		ИначеЕсли СтрНачинаетсяС(Строка(ПолеОтбора.ЛевоеЗначение), ИмяПоля) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов, ИмяОтбираемогоПоля = Неопределено, ВнешниеНаборыДанных = Неопределено)
	
	ПараметрыСКД = КомпоновкаДанныхСервер.ПараметрыВыгрузитьРезультатСКД();
	
	НастройкиСхемы = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиСхемы.Отбор, НастройкиОтборов.Отбор);
	
	Если ИмяОтбираемогоПоля <> Неопределено Тогда
		КУдалению = Новый Массив();
		Для Индекс = 0 По НастройкиСхемы.Отбор.Элементы.Количество() - 1 Цикл
			Если ТипЗнч(НастройкиСхемы.Отбор.Элементы[Индекс]) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				КУдалению.Добавить(НастройкиСхемы.Отбор.Элементы[Индекс]);
				Продолжить;
			КонецЕсли;
			Если Не СтрНачинаетсяС(Строка(НастройкиСхемы.Отбор.Элементы[Индекс].ЛевоеЗначение), ИмяОтбираемогоПоля) Тогда
				КУдалению.Добавить(НастройкиСхемы.Отбор.Элементы[Индекс]);
			КонецЕсли;
		КонецЦикла;
		Для Каждого УдаляемыйЭлемент Из КУдалению Цикл
			НастройкиСхемы.Отбор.Элементы.Удалить(УдаляемыйЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыСКД.СхемаКомпоновки = СхемаКомпоновкиДанных;
	ПараметрыСКД.НастройкиКомпоновки = НастройкиСхемы;
	ПараметрыСКД.ВнешниеНаборыДанных = ВнешниеНаборыДанных;
	
	Возврат КомпоновкаДанныхСервер.ВыгрузитьРезультатСКД(ПараметрыСКД);
	
КонецФункции

#КонецОбласти

#Область Тексты

Функция ТекстНеРеализованаВыгрузкаДопРеквизитов(ИмяКоллекции)
	ТекстШаблона = НСтр("ru='Не реализована настройка выгрузки дополнительных реквизитов для коллекции: %1'");
	Возврат СтрШаблон(ТекстШаблона, ИмяКоллекции);
КонецФункции

Функция ТекстНеБылСопоставленТоварПоУИД(ТекстИдентификатора)
	ТекстШаблона = НСтр("ru='Не найдена позиция номенклатуры соответствующая идентификатору: %1'");
	Возврат СтрШаблон(ТекстШаблона, ТекстИдентификатора);
КонецФункции

#КонецОбласти

#КонецОбласти