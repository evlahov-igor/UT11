////////////////////////////////////////////////////
//// Объект ОбщийМодуль.КР_УТ11_ЦБ_Магазин_ЗагрузкаДанныхСервер
//// Предназначен для выгрузки данных в магазины посредством шины Rabbit
//// Создан: 12.10.2022 Марченко С.Н., КРОК, JIRA№A2105505-1241            
//// Разработка по ФДР С61.005, Интеграция УТ11 ЦБ - УТ11 Магазин

#Область ПрограммныйИнтерфейс

Функция ДобавитьНастройкиЗагрузкиОбъектов(ПараметрыЗагрузки) Экспорт
	
	Если Не Константы.КР_RabbitMQИспользуетсяОбменСМагазинами.Получить() Тогда 
    	Возврат ПараметрыЗагрузки;
	КонецЕсли;	
	
	#Область Константы
	
	// Грузим все.
	МетаданныеНабор = Метаданные.Константы;  
	ШаблонИмениТипа = "КонстантаМенеджерЗначения.%1";	
	Для Каждого МетаданныеОбъект Из МетаданныеНабор Цикл 
		
		СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, Тип(СтрШаблон(ШаблонИмениТипа, МетаданныеОбъект.Имя)));
		
	КонецЦикла;	
	
	#КонецОбласти
	
	#Область Справочники 

	// Грузим все.
	МетаданныеНабор = Метаданные.Справочники;  
	ШаблонИмениТипа = "СправочникОбъект.%1";	
	Для Каждого МетаданныеОбъект Из МетаданныеНабор Цикл 
		
		СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, Тип(СтрШаблон(ШаблонИмениТипа, МетаданныеОбъект.Имя)));
		
	КонецЦикла;	
	
	#КонецОбласти

	#Область Документы
	
	// Грузим все.
	МетаданныеНабор = Метаданные.Документы;  
	ШаблонИмениТипа = "ДокументОбъект.%1";	
	Для Каждого МетаданныеОбъект Из МетаданныеНабор Цикл 
		
		СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, Тип(СтрШаблон(ШаблонИмениТипа, МетаданныеОбъект.Имя)));
		
	КонецЦикла;	

	#КонецОбласти
	
	#Область ПланыВидовХарактеристик 
	
	// Грузим все.
	МетаданныеНабор = Метаданные.ПланыВидовХарактеристик;  
	ШаблонИмениТипа = "ПланВидовХарактеристикОбъект.%1";	
	Для Каждого МетаданныеОбъект Из МетаданныеНабор Цикл 
		
		СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, Тип(СтрШаблон(ШаблонИмениТипа, МетаданныеОбъект.Имя)));
		
	КонецЦикла;	
	
	#КонецОбласти
	
	#Область РегистрыСведений
	
	// Грузим все.
	МетаданныеНабор = Метаданные.РегистрыСведений;  
	ШаблонИмениТипа = "РегистрСведенийНаборЗаписей.%1";	
	Для Каждого МетаданныеОбъект Из МетаданныеНабор Цикл 
		
		СтрокаЗагрузки = НастройкаЗагрузки(ПараметрыЗагрузки, Тип(СтрШаблон(ШаблонИмениТипа, МетаданныеОбъект.Имя)));
		
	КонецЦикла;	
	
	#КонецОбласти
	
	#Область ЗапросыДанных
	
	// A2105505-2594
	СтрокаЗагрузки = НастройкаЗагрузкиЗапросДанных(ПараметрыЗагрузки, "DataRequest");
	//
	
	#КонецОбласти


	//Петухов А.В.  24.10.2023  #3269   {
	НастройкаЗагрузкиОбновленияКонфигурации(ПараметрыЗагрузки, "ConfigurationUpdateData");
	//}	

	// << 26.06.2024 Петухов А.В., Фактор, #4316
	НастройкаЗагрузкиЛогаОбновленияКонфигурации(ПараметрыЗагрузки, "ConfigurationUpdateLog");
	// >> 26.06.2024 Петухов А.В., Фактор, #4316
	
	Возврат ПараметрыЗагрузки; 
	
КонецФункции

Функция СвойствоОбъектБылЗагружен() Экспорт 
	Возврат "КР_ЗагруженОбменомЦБМагазин";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиЗагрузкиОбъектов       

Функция НастройкаЗагрузки(ПараметрыЗагрузки, ТипДанных)
	
	ПравилоЗагрузки = "КР_УТ11_ЦБ_Магазин_ЗагрузкаДанныхСервер.ОбщиеПравилаЗагрузки";
	
	СтрокаЗагрузки = ПараметрыЗагрузки.Добавить();
	СтрокаЗагрузки.ТипДанных = XMLТип(ТипДанных).ИмяТипа; 
	СтрокаЗагрузки.АлгоритмСериализации = "JSONВДанныеСтруктура";	
	СтрокаЗагрузки.Отправитель = ""; // любой
	СтрокаЗагрузки.ОчередьОбмена = ""; // любой
	СтрокаЗагрузки.ПравилоЗагрузки = ПравилоЗагрузки;
	СтрокаЗагрузки.ДополнительныеПараметры = Новый Структура;
	
	Возврат СтрокаЗагрузки;
	
КонецФункции

Функция НастройкаЗагрузкиЗапросДанных(ПараметрыЗагрузки, ТипДанных)
	
	ПравилоЗагрузки = "КР_УТ11_ЦБ_Магазин_ЗагрузкаДанныхСервер.ПравилаЗагрузкиЗапросДанных";
	
	СтрокаЗагрузки = ПараметрыЗагрузки.Добавить();
	СтрокаЗагрузки.ТипДанных = ТипДанных; 
	СтрокаЗагрузки.АлгоритмСериализации = "JSONВДанныеСтруктура";	
	СтрокаЗагрузки.Отправитель = ""; // любой
	СтрокаЗагрузки.ОчередьОбмена = ""; // любой
	СтрокаЗагрузки.ПравилоЗагрузки = ПравилоЗагрузки;
	СтрокаЗагрузки.ДополнительныеПараметры = Новый Структура;
	
	Возврат СтрокаЗагрузки;
	
КонецФункции

Процедура ОбщиеПравилаЗагрузки(СообщениеОбмена) Экспорт	

	Данные = СообщениеОбмена.Данные;
	
	СоставТипаДанных = СтрРазделить(СообщениеОбмена.ТипДанных, ".");   
	СоставТипаДанных0 = СоставТипаДанных[0];
	
	// Конвертируем в объект
	Объект = Неопределено;                         
	
	// Константа
	Если СоставТипаДанных0 = "ConstantValueManager" Тогда 
		
		Если Не КонвертироватьВМенеджерЗначенияКонстанты(Данные, Объект, СообщениеОбмена)
			Или Не КонстантаМенеджерЗначенияЗаписать(Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
			Возврат;
		КонецЕсли;
		
	// Справочник
	ИначеЕсли СоставТипаДанных0 = "CatalogObject" Тогда 
		
		Если Не КонвертироватьВСсылочныйОбъект(Данные, Объект, СообщениеОбмена)
			Или Не СправочникОбъектЗаписать(Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
			Возврат;
		КонецЕсли;
		
	// Документ
	ИначеЕсли СоставТипаДанных0 = "DocumentObject" Тогда	
		
		Если Не КонвертироватьВСсылочныйОбъект(Данные, Объект, СообщениеОбмена)
			Или Не ДокументОбъектЗаписать(Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
			Возврат;
		КонецЕсли;  
		
	// ПланВидовХарактеристик
	ИначеЕсли СоставТипаДанных0 = "ChartOfCharacteristicTypesObject" Тогда 
		
		Если Не КонвертироватьВСсылочныйОбъект(Данные, Объект, СообщениеОбмена)
			Или Не ПланВидовХарактеристикОбъектЗаписать(Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
			Возврат;
		КонецЕсли;
				
	// ПланОбмена
	ИначеЕсли СоставТипаДанных0 = "ExchangePlanObject" Тогда 
		
		Если Не КонвертироватьВСсылочныйОбъект(Данные, Объект, СообщениеОбмена)
			Или Не ПланОбменаОбъектЗаписать(Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
			Возврат;
		КонецЕсли;
		
	// РегистрСведений
	ИначеЕсли СтрЗаканчиваетсяНа(СоставТипаДанных0, "RecordSet") Тогда	
		
		Если Не КонвертироватьВНаборЗаписейРегистра(Данные, Объект, СообщениеОбмена)
			Или Не НаборЗаписейРегистраЗаписать(Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен()) Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПравилаЗагрузкиЗапросДанных(СообщениеОбмена) Экспорт	
	Перем ТипДанных, Получатель, Параметры;
	
	Данные = СообщениеОбмена.Данные;
	Если Не Данные.Свойство("ТипДанных", ТипДанных)
		Или Не ЗначениеЗаполнено(ТипДанных) Тогда 

		ТекстСообщения = НСтр("ru = 'Не задано обязательное свойство ""ТипДанных"" либо оно не заполнено'");
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		
		Возврат;
	КонецЕсли;	 
	
	Если Не Данные.Свойство("Получатель", Получатель) 
		Или Не ЗначениеЗаполнено(Получатель) Тогда 

		ТекстСообщения = НСтр("ru = 'Не задано обязательное свойство ""Получатель"" либо оно не заполнено'");
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		
		Возврат;
	КонецЕсли;	 
	
	Данные.Свойство("Параметры", Параметры);

	// << 28.03.2024 Петухов А.В., Фактор, #3915
	Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("УникальныйИдентификатор") Тогда
		ЗапросДанныхПоУникальномуИдентификатору(СообщениеОбмена, Получатель, ТипДанных, Параметры);
	Иначе
	// >> 28.03.2024 Петухов А.В., Фактор, #3915
	
		// Определим доступные правила обработки запроса данных
		ДоступныеПравилаОбработки = Новый Соответствие;
		ДоступныеПравилаОбработки.Вставить("DocumentRef.УпаковочныйЛист", "ЗапросДанныхУпаковочныйЛист");    
		//
		
	    ПравилоОбработки = ДоступныеПравилаОбработки[ТипДанных];  
		Если ПравилоОбработки = Неопределено Тогда 
			
			ТекстСообщения = НСтр("ru = 'Не определено правило обработки запроса данных по типу ""%1""'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ТипДанных);
	  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
			
			Возврат;
		КонецЕсли;	 
			
		ФрагментКода = "%1(СообщениеОбмена, Получатель, Параметры)";
		ФрагментКода = СтрШаблон(ФрагментКода, ПравилоОбработки);
		Выполнить(ФрагментКода);
		
	// << 28.03.2024 Петухов А.В., Фактор, #3915
	КонецЕсли;
	// >> 28.03.2024 Петухов А.В., Фактор, #3915
	
КонецПроцедуры

//Петухов А.В.  24.10.2023  #3269   {
Функция НастройкаЗагрузкиОбновленияКонфигурации(ПараметрыЗагрузки, ТипДанных)
	
	СтрокаЗагрузки = ПараметрыЗагрузки.Добавить();
	СтрокаЗагрузки.ТипДанных = ТипДанных;
	СтрокаЗагрузки.АлгоритмСериализации = "JSONВДанныеСтруктура";	
	СтрокаЗагрузки.Отправитель = ""; // любой
	СтрокаЗагрузки.ОчередьОбмена = ""; // любой
	СтрокаЗагрузки.ПравилоЗагрузки = "КР_УТ11_ЦБ_Магазин_ЗагрузкаДанныхСервер.ПравилаЗагрузкиОбновленияКонфигурации";
	СтрокаЗагрузки.ДополнительныеПараметры = Новый Структура;
	
	Возврат СтрокаЗагрузки;
	
КонецФункции

Процедура ПравилаЗагрузкиОбновленияКонфигурации(СообщениеОбмена) Экспорт	

	Данные = СообщениеОбмена.Данные;
	
	Если СообщениеОбмена.ТипДанных = "ConfigurationUpdateData" Тогда 
		
		//ТекстСообщения = НСтр("ru = 'Ошибка заполнения набора записей регистра %1'");
		//ТекстСообщения = СтрШаблон(ТекстСообщения, ОбъектМетаданные.ПолноеИмя());
		
		ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка();
		ТипЗаписиВЛог_Информация = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация();
		
		// << 24.07.2024 Петухов А.В., Фактор, #4316
		Отказ = Ложь;
		ТекстОшибки = "";
		
		ИмяФайла = злОбновлениеКонфигурации.ЗаписьФайлаОбновления(Данные.version, Данные.cfu, СообщениеОбмена.КлючСообщения, Отказ, ТекстОшибки);

		ИмяСобытия = "злОбновлениеКонфигурации";
		
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка записи файла обновления на версию %1: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Данные.version, ТекстОшибки);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Записан файла обновления на версию %1: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Данные.version, ИмяФайла);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Информация);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
		КонецЕсли;
		// >> 24.07.2024 Петухов А.В., Фактор, #4316
		
	КонецЕсли;
	
КонецПроцедуры

//}	

// << 26.06.2024 Петухов А.В., Фактор, #4316
Функция НастройкаЗагрузкиЛогаОбновленияКонфигурации(ПараметрыЗагрузки, ТипДанных)
	
	СтрокаЗагрузки = ПараметрыЗагрузки.Добавить();
	СтрокаЗагрузки.ТипДанных = ТипДанных;
	СтрокаЗагрузки.АлгоритмСериализации = "JSONВДанныеСтруктура";	
	СтрокаЗагрузки.Отправитель = ""; // любой
	СтрокаЗагрузки.ОчередьОбмена = ""; // любой
	СтрокаЗагрузки.ПравилоЗагрузки = "КР_УТ11_ЦБ_Магазин_ЗагрузкаДанныхСервер.ПравилаЗагрузкиЛогаОбновленияКонфигурации";
	СтрокаЗагрузки.ДополнительныеПараметры = Новый Структура;
	
	Возврат СтрокаЗагрузки;
	
КонецФункции

Процедура ПравилаЗагрузкиЛогаОбновленияКонфигурации(СообщениеОбмена) Экспорт	

	Данные = СообщениеОбмена.Данные;
	
	Если СообщениеОбмена.ТипДанных = "ConfigurationUpdateLog" Тогда 
		
		ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка();
		//ТипЗаписиВЛог_Информация = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Информация();
		
		ИмяСобытия = "злОбновлениеКонфигурации.ЗагрузкаЛога";
		
		Магазин = Справочники.Склады.ПустаяСсылка();
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Склады.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.КР_НомерМагазина = &НомерМагазина";
		
		Запрос.УстановитьПараметр("НомерМагазина", Данные.shopnumber);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Магазин = Выборка.Ссылка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Магазин) Тогда
			
			ДатаЗаписи = XMLЗначение(Тип("Дата"), Данные.date);
			НаборЗаписей = РегистрыСведений.злУстановкаОбновленийКонфигурацииВМагазинах.СоздатьНаборЗаписей();

			НаборЗаписей.Отбор.Магазин.Установить(Магазин);
			НаборЗаписей.Отбор.Период.Установить(ДатаЗаписи);
				
			НовЗапись = НаборЗаписей.Добавить();

			НовЗапись.Магазин = Магазин;
			НовЗапись.Период  = ДатаЗаписи;
			НовЗапись.Версия = Данные.version;
			НовЗапись.Успешно = Данные.success;
			НовЗапись.Журнал = Данные.log;

			НаборЗаписей.Записать(Истина);
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Ошибка поиска склада по номеру магазина ""%1""'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Данные.shopnumber);
			КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры
// >> 26.06.2024 Петухов А.В., Фактор, #4316

#КонецОбласти

#Область МетодыКонвертации

Функция КонвертироватьВМенеджерЗначенияКонстанты(Данные, Объект, СообщениеОбмена)
		
	// Получаем объект
	Объект = Новый (СообщениеОбмена.ТипДанных);

	// Конвертируем стандартно как значение реквизвта 	
	КонвертироватьРеквизиты(Данные, Объект, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция КонвертироватьВСсылочныйОбъект(Данные, Объект, СообщениеОбмена)
		
	// Универсальный метод. Обрабатывает ссылочние объекты
		
	Ссылка = Неопределено;                       
	ДанныеСсылка = Данные.Ссылка;
	// Если загружается предопределенный элемент 
	//	то поиск нужно осуществлять по имени предопределенного 
	// При этом если в БД нет записи то создается новый элемент с Уникальным идентификатором источника 
	Если Не ЭтоПредопределенныйЭлемент(ДанныеСсылка, Ссылка)
		Или Не ЗначениеЗаполнено(Ссылка) Тогда 
		Ссылка = XMLЗначение(Тип(ДанныеСсылка.Тип), ДанныеСсылка.УникальныйИдентификатор);
	КонецЕсли;	
	ЭтоНовый = Не ОбщегоНазначения.СсылкаСуществует(Ссылка);  
	
	Если ЭтоНовый Тогда   
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
		Если СтрНайти(ДанныеСсылка.Тип, "DocumentRef.") Тогда 
			Объект = МенеджерОбъекта.СоздатьДокумент();   		
		ИначеЕсли СтрНайти(ДанныеСсылка.Тип, "ExchangePlanRef.") Тогда  
			Объект = МенеджерОбъекта.СоздатьУзел();   		
		ИначеЕсли Данные.Свойство("ЭтоГруппа")
			И Данные.ЭтоГруппа Тогда 
			Объект = МенеджерОбъекта.СоздатьГруппу();   		
		Иначе	                      
			Объект = МенеджерОбъекта.СоздатьЭлемент();   		
		КонецЕсли;
		
		Объект.УстановитьСсылкуНового(Ссылка);  
		
	Иначе
		Объект = Ссылка.ПолучитьОбъект();
	КонецЕсли;	

	// Если непосредственное удаление то на этом остановимся 
	Если Данные.Свойство("НепосредственноеУдаление") Тогда 
		Объект.ДополнительныеСвойства.Вставить("КР_RabbitMQНепосредственноеУдалениеОбъекта");
		Возврат Истина;
	КонецЕсли;
		
	// Далее идет универсальный механизм загрузки 
	// Удаляем свойства которые не могут быть изменены ("только чтение") 
	Данные.Удалить("Ссылка");
	Данные.Удалить("Предопределенный");
	Данные.Удалить("ЭтоГруппа");

	// << 28.03.2024 Петухов А.В., Фактор, #3915
	УстановитьДополнительныеПараметрыКонвертации(СообщениеОбмена);
	// >> 28.03.2024 Петухов А.В., Фактор, #3915
	
	КонвертироватьРеквизиты(Данные, Объект, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция КонвертироватьВНаборЗаписейРегистра(Данные, Объект, СообщениеОбмена)
	
	// Получаем объект
	Объект = Новый (СообщениеОбмена.ТипДанных);
	
	// Не можем использовать общий метод КонвертироватьРеквизиты
	//	так как отбор надо "Установить"
	// Логика скопирована из КонвертироватьРеквизиты только в необходимом объеме
	// Дата синхронизации кода 13.10.2022	           
	
	ТипДата = Тип("Дата");	
	Для Каждого КлючЗначение Из Данные.Отбор Цикл 
		
		ОбъектОтбор = Объект.Отбор;
		ИмяСвойстваОбъекта = КлючЗначение.Ключ;
		ЗначениеСвойстваОбъекта = КлючЗначение.Значение;
		ТипЗначенияСвойства = ТипЗнч(ЗначениеСвойстваОбъекта);
		
		ЗначениеОтбора = Неопределено;
		Если ТипЗначенияСвойства = Тип("Структура") Тогда
			КонвертироватьСтруктуру(ЗначениеСвойстваОбъекта, ЗначениеОтбора, СообщениеОбмена);	
		ИначеЕсли ТипЗнч(ОбъектОтбор[ИмяСвойстваОбъекта].Значение) = ТипДата Тогда 
			ЗначениеОтбора = XMLЗначение(ТипДата, ЗначениеСвойстваОбъекта);
		Иначе
			ЗначениеОтбора = ЗначениеСвойстваОбъекта;
		КонецЕсли;	      
		
		ОбъектОтбор[ИмяСвойстваОбъекта].Установить(ЗначениеОтбора);
		
	КонецЦикла;	
		
	// Собственно набор записей
	КонвертироватьМассивСтруктур(Данные.Записи, Объект, СообщениеОбмена);
		
	Возврат Истина;
	
КонецФункции

Функция КонвертироватьРеквизиты(Данные, Объект, СообщениеОбмена)

	ТипДата = Тип("Дата");	
	Для Каждого КлючЗначение Из Данные Цикл 
		
		ИмяСвойстваОбъекта = КлючЗначение.Ключ;
		ЗначениеСвойстваОбъекта = КлючЗначение.Значение;
		ТипЗначенияСвойства = ТипЗнч(ЗначениеСвойстваОбъекта);
		
		// При добавлении типов данных 
		//	синхронизировать с КонвертироватьВНаборЗаписейРегистра
		//	в блоке обработки Объект.Отбор (только то что будет необходимо)
		// Дата синхронизации кода 13.10.2022	
		
		Если ТипЗначенияСвойства = Тип("Структура") Тогда 
			// << 28.03.2024 Петухов А.В., Фактор, #3915
			//КонвертироватьСтруктуру(ЗначениеСвойстваОбъекта, Объект[ИмяСвойстваОбъекта], СообщениеОбмена);	
			РезультатКонвертации = КонвертироватьСтруктуру(ЗначениеСвойстваОбъекта, Объект[ИмяСвойстваОбъекта], СообщениеОбмена);
			Если РезультатКонвертации = Ложь И СообщениеОбмена.Свойство("ПараметрыЗапросаОшибкиПоискаDataRequest") Тогда
				ОбработатьОшибкуПоискаСсылкиDataRequest(СообщениеОбмена, ИмяСвойстваОбъекта, ЗначениеСвойстваОбъекта);
			КонецЕсли;
			// >> 28.03.2024 Петухов А.В., Фактор, #3915
		// Загрузка табличной части	
		ИначеЕсли ТипЗначенияСвойства = Тип("Массив") Тогда 
			КонвертироватьМассивСтруктур(ЗначениеСвойстваОбъекта, Объект[ИмяСвойстваОбъекта], СообщениеОбмена);
		ИначеЕсли ТипЗнч(Объект[ИмяСвойстваОбъекта]) = ТипДата Тогда 
			Объект[ИмяСвойстваОбъекта] = XMLЗначение(ТипДата, ЗначениеСвойстваОбъекта);
		Иначе
			Объект[ИмяСвойстваОбъекта] = ЗначениеСвойстваОбъекта;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция КонвертироватьСтруктуру(Данные, Значение, СообщениеОбмена)
	
	// ХранилищеЗначения
	Если Данные.Тип = "ValueStorage" Тогда 
		Возврат КонвертироватьХранилищеЗначения(Данные, Значение, СообщениеОбмена);
	// ОписаниеТипов	
	ИначеЕсли Данные.Тип = "TypeDescription" Тогда 
		Возврат КонвертироватьОписаниеТипов(Данные, Значение, СообщениеОбмена);
	// УникальныйИдентификатор
	ИначеЕсли Данные.Тип = "UUID" Тогда 
		Возврат КонвертироватьУникальныйИдентификатор(Данные, Значение, СообщениеОбмена);
	// Ссылка 
	Иначе 
		Возврат КонвертироватьСсылку(Данные, Значение, СообщениеОбмена);
	КонецЕсли;
			
КонецФункции

Функция КонвертироватьХранилищеЗначения(Данные, Значение, СообщениеОбмена)
	
	Если Данные.ЭтоДвоичныеДанные Тогда 
		ВосстановленноеЗначение = Base64Значение(Данные.Данные); 
	Иначе
		ВосстановленноеЗначение = ЗначениеИзСтрокиВнутр(Данные.Данные); 
	КонецЕсли;	
	
	Значение = Новый ХранилищеЗначения(ВосстановленноеЗначение);
	                                 
	Возврат Истина;
	
КонецФункции

Функция КонвертироватьОписаниеТипов(Данные, Значение, СообщениеОбмена)
	
	Значение = ЗначениеИзСтрокиВнутр(Данные.Данные);
		                                 
	Возврат Истина;
	
КонецФункции

Функция КонвертироватьУникальныйИдентификатор(Данные, Значение, СообщениеОбмена)

	СсылкаТип = Тип(Данные.Тип);	
	Значение = XMLЗначение(СсылкаТип, Данные.УникальныйИдентификатор);
	
	Возврат Истина;
	
КонецФункции

Функция КонвертироватьСсылку(Данные, Значение, СообщениеОбмена)

	СсылкаТип = Тип(Данные.Тип);	
	Ссылка = XMLЗначение(СсылкаТип, Данные.УникальныйИдентификатор);
	
	// Ссылку записываем всегда
	Значение = Ссылка;
	
	// Сообщим чтоб знать причнину ошибки
	Если Не ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда 
		
		СсылкаМетаданные = Метаданные.НайтиПоТипу(СсылкаТип);
		
		ТекстСообщения = НСтр("ru = 'Не найден объект %1 ""%2"" по идентификатору ""%3""'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, СсылкаТип, Данные.Представление, Данные.УникальныйИдентификатор);
		
		Если Данные.Свойство("ИгнорироватьОшибкуПриПоиске") Тогда 
  			ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибкаПоискаСсылки(СсылкаМетаданные); 
		Иначе
  			ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(СсылкаМетаданные); 
		КонецЕсли;
		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

Функция КонвертироватьМассивСтруктур(Данные, КоллекцияПриемник, СообщениеОбмена)

	КоллекцияПриемник.Очистить();
	Для Каждого СтрокаДанных Из Данные Цикл 
		
		// Удалим то что только "для чтения"
		СтрокаДанных.Удалить("НомерСтроки");
		
		СтрокаКоллекции = КоллекцияПриемник.Добавить();
		КонвертироватьРеквизиты(СтрокаДанных, СтрокаКоллекции, СообщениеОбмена)		
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область МетодыЗаписиДанных
 
Функция КонстантаМенеджерЗначенияЗаписать(Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен = Неопределено) Экспорт 
	
	УстановитьСвойствоОбъектБылЗагружен(Объект, СвойствоОбъектБылЗагружен);
	
	Объект.Записать();
	
	Возврат Истина;
	
КонецФункции

Функция СправочникОбъектЗаписать(Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен = Неопределено) Экспорт 
	
	Если ОбъектНепосредственноеУдаление(Объект) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	УстановитьСвойствоОбъектБылЗагружен(Объект, СвойствоОбъектБылЗагружен);
	
	Если СообщениеОбмена.ЕстьОшибка Тогда      
		
		Если Объект.ЭтоНовый() Тогда  
			// Новый объект записываем для того чтоб быда ссылка в БД
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.ПометкаУдаления = Истина;
			Объект.Записать();  
			
		КонецЕсли; 
		
		СообщениеОбмена.СсылкиНаОбъекты.Добавить(Объект.Ссылка); 
		
		Возврат Ложь;
		
	КонецЕсли;	
	
	Объект.Записать();
	
	СообщениеОбмена.СсылкиНаОбъекты.Добавить(Объект.Ссылка);
	
	Возврат Истина;
	
КонецФункции

Функция ДокументОбъектЗаписать(Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен = Неопределено) Экспорт 

	Если ОбъектНепосредственноеУдаление(Объект) Тогда 
		Возврат Истина;
	КонецЕсли;

	УстановитьСвойствоОбъектБылЗагружен(Объект, СвойствоОбъектБылЗагружен); 
	
	Если СообщениеОбмена.ЕстьОшибка Тогда      
		
		Если Объект.ЭтоНовый() Тогда  
			// Новый объект записываем для того чтоб быда ссылка в БД
			Объект.ОбменДанными.Загрузка = Истина;
			// A2105505-2456
			Объект.Проведен = Ложь;
			//
			Объект.ПометкаУдаления = Истина;
			Объект.Записать();  
			
		КонецЕсли; 
		
		СообщениеОбмена.СсылкиНаОбъекты.Добавить(Объект.Ссылка); 
		
		Возврат Ложь;
		
	КонецЕсли;	

	Если Объект.Проведен Тогда 
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе

		Если Объект.Ссылка.Проведен	Тогда  
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе	
			РежимЗаписи = РежимЗаписиДокумента.Запись;     
		КонецЕсли;	   

	КонецЕсли;	
	
	Объект.Записать(РежимЗаписи);
	
	СообщениеОбмена.СсылкиНаОбъекты.Добавить(Объект.Ссылка);
	
	Возврат Истина;
	
КонецФункции

Функция ПланВидовХарактеристикОбъектЗаписать(Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен = Неопределено) Экспорт 
	
	Если ОбъектНепосредственноеУдаление(Объект) Тогда 
		Возврат Истина;
	КонецЕсли;

	УстановитьСвойствоОбъектБылЗагружен(Объект, СвойствоОбъектБылЗагружен); 
	
	Если СообщениеОбмена.ЕстьОшибка Тогда      
		
		Если Объект.ЭтоНовый() Тогда  
			// Новый объект записываем для того чтоб быда ссылка в БД
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.ПометкаУдаления = Истина;
			Объект.Записать();  
			
		КонецЕсли; 
		
		СообщениеОбмена.СсылкиНаОбъекты.Добавить(Объект.Ссылка); 
		
		Возврат Ложь;
		
	КонецЕсли;	
	
	Объект.Записать();
	
	СообщениеОбмена.СсылкиНаОбъекты.Добавить(Объект.Ссылка);
	
	Возврат Истина;
	
КонецФункции

Функция ПланОбменаОбъектЗаписать(Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен = Неопределено) Экспорт 
	
	Если ОбъектНепосредственноеУдаление(Объект) Тогда 
		Возврат Истина;
	КонецЕсли;

	УстановитьСвойствоОбъектБылЗагружен(Объект, СвойствоОбъектБылЗагружен); 
	
	Если СообщениеОбмена.ЕстьОшибка Тогда      
		
		Если Объект.ЭтоНовый() Тогда  
			// Новый объект записываем для того чтоб быда ссылка в БД
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.ПометкаУдаления = Истина;
			Объект.Записать();  
			
		КонецЕсли; 
		
		СообщениеОбмена.СсылкиНаОбъекты.Добавить(Объект.Ссылка); 
		
		Возврат Ложь;
		
	КонецЕсли;	

	Объект.Записать();
	
	СообщениеОбмена.СсылкиНаОбъекты.Добавить(Объект.Ссылка);
	
	Возврат Истина;
	
КонецФункции

Функция НаборЗаписейРегистраЗаписать(Объект, СообщениеОбмена, СвойствоОбъектБылЗагружен = Неопределено) Экспорт 
	
	Если Не Объект.ПроверитьЗаполнение() Тогда                                     
		
		ОбъектМетаданные = Объект.Метаданные();
		
		ТекстСообщения = НСтр("ru = 'Ошибка заполнения набора записей регистра %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ОбъектМетаданные.ПолноеИмя());
		
		ТипЗаписиВЛог_Ошибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(ОбъектМетаданные);
		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог_Ошибка);
		
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьСвойствоОбъектБылЗагружен(Объект, СвойствоОбъектБылЗагружен); 
	
	Объект.Записать();
	
	Возврат Истина;
	
КонецФункции

#Область СлужебныеМетоды

Функция ОбъектНепосредственноеУдаление(Объект)
	
	Если Объект.ДополнительныеСвойства.Свойство("КР_RabbitMQНепосредственноеУдалениеОбъекта") Тогда 
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
			Объект.Удалить();
		КонецЕсли;	
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьСвойствоОбъектБылЗагружен(Объект, СвойствоОбъектБылЗагружен)

	Если СвойствоОбъектБылЗагружен <> Неопределено Тогда 
		Объект.ДополнительныеСвойства.Вставить(СвойствоОбъектБылЗагружен()); 
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗапросДанных

Процедура ЗапросДанныхУпаковочныйЛист(ВходящееСообщениеОбмена, Получатель, Параметры)   
	Перем Штрихкод;
		
	Если Не Параметры.Свойство("Штрихкод", Штрихкод)
		Или Не ЗначениеЗаполнено(Штрихкод) Тогда 
		
		ТекстСообщения = НСтр("ru = 'Параметры запроса не содержат свойства Штрихкод либо он не заполнен'");
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(ВходящееСообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		Возврат;
		
	КонецЕсли;	 

	Запрос = Новый Запрос(ТекстЗапросаУпаковочныйЛистПоШтрихкоду());
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	РезультатЗапроса = Запрос.Выполнить();  
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда 
		
		ТекстСообщения = НСтр("ru = 'Не найден Упаковочный лист по Штрихкоду ""%1""'");  
		ТекстСообщения = СтрШаблон(ТекстСообщения, Штрихкод);
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(ВходящееСообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		Возврат;
		
	ИначеЕсли ВыборкаДетальныеЗаписи.Количество() > 1 Тогда	
		
		ТекстСообщения = НСтр("ru = 'Найдено более одной ссылки на Упаковочный лист по Штрихкоду ""%1""'");  
		ТекстСообщения = СтрШаблон(ТекстСообщения, Штрихкод);
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(ВходящееСообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		Возврат;
		
	Иначе
		// Ничего не делаем. Для сонара
	КонецЕсли;

	ВыборкаДетальныеЗаписи.Следующий();
	УпаковочныйЛист = ВыборкаДетальныеЗаписи.Ссылка;
	УпаковочныйЛистОбъект = УпаковочныйЛист.ПолучитьОбъект();
	//
	
	СсылкиНаОбъекты = ВходящееСообщениеОбмена.СсылкиНаОбъекты;   
	СсылкиНаОбъекты.Добавить(УпаковочныйЛист);  
	
	// Выгружаем объект используя эмуляцию действий системы при срабатывании подписки на событие
	// Правила регистрации мы не сипользуем так как запрос может быть выполнен по данниы, 
	// 	которые в норме не должны были регистрироваться к выгрузке
	
	// Формируем исходящее сообщение
	ИсходящееСообщение = КР_ОбменRabbitОбработкаСообщенийОбмена.ПолучитьСтруктуруСообщения();
	ИсходящееСообщение.ТипДанных = XMLТипЗнч(УпаковочныйЛистОбъект).ИмяТипа;
	ИсходящееСообщение.Маршрутизация = Получатель;   
	
	// Эмуляция структуры выгрузки
	СтруктураВыгрузки = Новый Структура("МассивСообщений", Новый Массив);  
	СтруктураВыгрузки.МассивСообщений.Добавить(ИсходящееСообщение);
	
	Попытка
		Отказ = Ложь;
		КР_УТ11_ЦБ_Магазин_ВыгрузкаДанныхСервер.ОбщиеПравилаВыгрузки(УпаковочныйЛистОбъект, Отказ, СтруктураВыгрузки);
	Исключение
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'В алгоритме правила произошла невосстановимая ошибка:
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(ВходящееСообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		Возврат;
	КонецПопытки;
	
	КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьИсходящееСообщениеОбмена(
		КР_УТ11_ЦБ_Магазин_ВыгрузкаДанныхСервер.ТочкаОбмена(), ИсходящееСообщение, Отказ); 
		
КонецПроцедуры

#КонецОбласти

#Область ПрочиеМетоды  

Функция ЭтоПредопределенныйЭлемент(ДанныеСсылка, Ссылка)
   	Перем ИмяПредопределенныхДанных;
	
	ДанныеСсылка.Свойство("ИмяПредопределенныхДанных", ИмяПредопределенныхДанных);
	Если Не ЗначениеЗаполнено(ИмяПредопределенныхДанных) Тогда 
        Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка
	|ИЗ
	|	&ИмяТаблицы КАК Таблица
	|ГДЕ
	|	Таблица.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";

	СсылкаМетаданные = Метаданные.НайтиПоТипу(Тип(ДанныеСсылка.Тип));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", СсылкаМетаданные.ПолноеИмя());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ИмяПредопределенныхДанных);
	
	УстановитьПривилегированныйРежим(Истина);  
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;	
		
	Возврат Истина;
	
КонецФункции

// << 28.03.2024 Петухов А.В., Фактор, #3915
Функция СтруктураЗапросаОшибкиПоискаDataRequest(ИмяРеквизита, ТипРеквизита, НомерПопытки = 0)
	Результат = Новый Структура;
	Результат.Вставить("ИмяРеквизита", ИмяРеквизита);
	Результат.Вставить("ТипРеквизита", ТипРеквизита);
	Результат.Вставить("НомерПопытки", НомерПопытки);
	Возврат Результат;
КонецФункции

Процедура УстановитьДополнительныеПараметрыКонвертации(СообщениеОбмена)
	Если Истина
		И НЕ КР_ДополнительныеНастройкиПовтИсп.БазаЯвляетсяЦентральной()
		И СообщениеОбмена.ТипДанных = "DocumentObject.ПеремещениеТоваров"
	Тогда
		мсвДанныеДляЗапроса = Новый Массив;
		мсвДанныеДляЗапроса.Добавить(СтруктураЗапросаОшибкиПоискаDataRequest("", "DocumentRef.УпаковочныйЛист", 2));
		мсвДанныеДляЗапроса.Добавить(СтруктураЗапросаОшибкиПоискаDataRequest("", "DocumentRef.ЗаказНаПеремещение", 2));
		СообщениеОбмена.Вставить("ПараметрыЗапросаОшибкиПоискаDataRequest", мсвДанныеДляЗапроса);
		СообщениеОбмена.Вставить("ИндексыЗапросовDataRequest", Новый Массив);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьОшибкуПоискаСсылкиDataRequest(СообщениеОбмена, ИмяСвойства, ЗначениеСвойства)
	Для Каждого сткПараметрЗапроса Из СообщениеОбмена.ПараметрыЗапросаОшибкиПоискаDataRequest Цикл
		Если сткПараметрЗапроса.ИмяРеквизита <> ИмяСвойства И сткПараметрЗапроса.ИмяРеквизита <> "" Тогда
			Продолжить;
		КонецЕсли;
		Если сткПараметрЗапроса.ТипРеквизита <> ЗначениеСвойства.Тип И сткПараметрЗапроса.ТипРеквизита <> "" Тогда
			Продолжить;
		КонецЕсли;
		Если сткПараметрЗапроса.НомерПопытки <> СообщениеОбмена.КоличествоПопытокОбработки И сткПараметрЗапроса.НомерПопытки <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексЗапроса = СтрШаблон("%1%2",ЗначениеСвойства.Тип,ЗначениеСвойства.УникальныйИдентификатор);

		Если СообщениеОбмена.ИндексыЗапросовDataRequest.Найти(ИндексЗапроса) = Неопределено Тогда
		
			ТипДанных = Тип(ЗначениеСвойства.Тип);
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("УникальныйИдентификатор", ЗначениеСвойства.УникальныйИдентификатор);
			
			КР_УТ11_ЦБ_Магазин_ВыгрузкаДанныхСервер.ВыполнитьЗапросДанныхКЦентральнойБазе(
				ЗначениеСвойства.Тип, ПараметрыЗапроса, Неопределено);
			СообщениеОбмена.ИндексыЗапросовDataRequest.Добавить(ИндексЗапроса);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗапросДанныхПоУникальномуИдентификатору(ВходящееСообщениеОбмена, Получатель, ТипДанных, Параметры)   
	Перем Штрихкод;
		
	Если Не Параметры.Свойство("УникальныйИдентификатор", Штрихкод)
		Или Не ЗначениеЗаполнено(Параметры.УникальныйИдентификатор) Тогда 
		
		ТекстСообщения = НСтр("ru = 'Параметры запроса не содержат свойства УникальныйИдентификатор либо он не заполнен'");
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(ВходящееСообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		Возврат;
		
	КонецЕсли;	 

	СсылкаТип = Тип(ТипДанных);	
	Ссылка = XMLЗначение(СсылкаТип, Параметры.УникальныйИдентификатор);
	
	Если Не ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда 
		ТекстСообщения = НСтр("ru = 'Не найден %1 по идентификатору ""%2""'");  
		ТекстСообщения = СтрШаблон(ТекстСообщения, ТипДанных, Параметры.УникальныйИдентификатор);
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(ВходящееСообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		Возврат;
	КонецЕсли;
	
	ДанныеОбъект = Ссылка.ПолучитьОбъект();
	//
	
	СсылкиНаОбъекты = ВходящееСообщениеОбмена.СсылкиНаОбъекты;   
	СсылкиНаОбъекты.Добавить(Ссылка);  
	
	// Выгружаем объект используя эмуляцию действий системы при срабатывании подписки на событие
	// Правила регистрации мы не сипользуем так как запрос может быть выполнен по данниы, 
	// 	которые в норме не должны были регистрироваться к выгрузке
	
	// Формируем исходящее сообщение
	ИсходящееСообщение = КР_ОбменRabbitОбработкаСообщенийОбмена.ПолучитьСтруктуруСообщения();
	ИсходящееСообщение.ТипДанных = XMLТипЗнч(ДанныеОбъект).ИмяТипа;
	ИсходящееСообщение.Маршрутизация = Получатель;   
	
	// Эмуляция структуры выгрузки
	СтруктураВыгрузки = Новый Структура("МассивСообщений", Новый Массив);  
	СтруктураВыгрузки.МассивСообщений.Добавить(ИсходящееСообщение);
	
	Попытка
		Отказ = Ложь;
		КР_УТ11_ЦБ_Магазин_ВыгрузкаДанныхСервер.ОбщиеПравилаВыгрузки(ДанныеОбъект, Отказ, СтруктураВыгрузки);
	Исключение
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'В алгоритме правила произошла невосстановимая ошибка:
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
  		ТипЗаписиВЛог = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(); 
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(ВходящееСообщениеОбмена, ТекстСообщения, ТипЗаписиВЛог);
		Возврат;
	КонецПопытки;
	
	КР_ОбменRabbitОбработкаСообщенийОбмена.ЗарегистрироватьИсходящееСообщениеОбмена(
		КР_УТ11_ЦБ_Магазин_ВыгрузкаДанныхСервер.ТочкаОбмена(), ИсходящееСообщение, Отказ); 
		
КонецПроцедуры
// >> 28.03.2024 Петухов А.В., Фактор, #3915

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаУпаковочныйЛистПоШтрихкоду()
	
	Возврат
	"ВЫБРАТЬ
	|	УпаковочныйЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.Проведен
	|	И УпаковочныйЛист.КР_Штрихкод = &Штрихкод"
	;
	
КонецФункции	

#КонецОбласти

#КонецОбласти