
////////////////////////////////////////////////////
//// Общий модуль "КР_Демо_УТ11_ЗагрузкаДанныхСервер"
//// Создан: 21.10.2022, Маскаев П.Ю., КРОК, JIRA№ A2105505-626
//// Разработка по ФДР С51.014 Интеграция 1С Демо - УТ11 Контрагенты, Договоры

#Область ПрограммныйИнтерфейс

Функция ДобавитьНастройкиЗагрузкиОбъектов(ПараметрыЗагрузки) Экспорт
	
	// Списание безналичных ДС
	НастройкаЗагрузки(ПараметрыЗагрузки, "OutgoingPaymentObject");
	
	// << 27.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
	// Заявка на расходование денежных средств
	НастройкаЗагрузки(ПараметрыЗагрузки, "MoneyExpenditureRequest");
	
	// Статьи движения денежных средств
	НастройкаЗагрузки(ПараметрыЗагрузки, "CashFlowItemObject");
	
	// Статьи доходов
	НастройкаЗагрузки(ПараметрыЗагрузки, "ItemOfIncomeObject");
	
	// Статьи расходов
	НастройкаЗагрузки(ПараметрыЗагрузки, "ItemOfExpenditureObject");
	// >> 27.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
	
	Возврат ПараметрыЗагрузки; 
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфес

#Область ПравилаЗагрузкиОбъектов

Процедура ПЗО_OutgoingPaymentObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_ДокументОбъект_СписаниеБезналичныхДС(ПакетДанных, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(Объект, СообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// << 27.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
Процедура ПЗО_MoneyExpenditureRequest(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_ДокументОбъект_ЗаявкаНаРасходованиеДенежныхСредств(ПакетДанных, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.ДокументОбъектЗаписать(Объект, СообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_CashFlowItemObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_СправочникОбъект_СтатьиДвиженияДенежныхСредств(ПакетДанных, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_ItemOfIncomeObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_ПВХОбъект_СтатьиДоходов(ПакетДанных, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПЗО_ItemOfExpenditureObject(СообщениеОбмена) Экспорт
	
	// Получаем пакет
	ПакетДанных = СообщениеОбмена.Данные;
	
	// Конвертируем в объект
	Объект = Неопределено;
	Если Не ПКО_ПВХОбъект_СтатьиРасходов(ПакетДанных, Объект, СообщениеОбмена)
		Или Не КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // >> 27.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195

#КонецОбласти

#КонецОбласти

#Область ПравилаКонвертации

#Область Справочники

Функция ПКО_СправочникСсылка_Валюты(ПакетДанных, СообщениеОбмена, Отказ)
	
	МетаданныеСправочника = Метаданные.Справочники.Валюты;
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьВЛогНетДанных(МетаданныеСправочника, СообщениеОбмена, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = ПараметрыПоискаСсылки();
	ПараметрыПоиска.Вставить("ПоискПоGUID", Истина);
	
	Если ЗначениеЗаполнено(ПакетДанных.Code) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(Новый Структура("Код", ПакетДанных.Code));
	КонецЕсли;
	
	Валюта = СсылкаПоДаннымСинхронизации(
		МетаданныеСправочника, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
	
	Если Валюта = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции

Функция ПКО_СправочникСсылка_ДоговорыКонтрагентов(Владелец, ПакетДанных, СообщениеОбмена, Отказ)
	
	МетаданныеСправочника = Метаданные.Справочники.ДоговорыКонтрагентов;
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьВЛогНетДанных(МетаданныеСправочника, СообщениеОбмена, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = ПараметрыПоискаСсылки();
	ПараметрыПоиска.Вставить("ПоискПоGUID", Истина);
	
	Если ЗначениеЗаполнено(ПакетДанных.Number) И ЗначениеЗаполнено(Владелец) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(
			Новый Структура("Номер, Контрагент", ПакетДанных.Number, Владелец));
	КонецЕсли;
	
	Договор = СсылкаПоДаннымСинхронизации(
		МетаданныеСправочника, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
	
	Если Договор = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Договор;
	
КонецФункции

Функция ПКО_СправочникСсылка_Контрагенты(ПакетДанных, СообщениеОбмена, Отказ)
	
	МетаданныеСправочника = Метаданные.Справочники.Контрагенты;
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьВЛогНетДанных(МетаданныеСправочника, СообщениеОбмена, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = ПараметрыПоискаСсылки();
	ПараметрыПоиска.Вставить("ПоискПоGUID", Истина);
	
	Если ПакетДанных.Resident = Истина И
		ЗначениеЗаполнено(ПакетДанных.INN) И ЗначениеЗаполнено(ПакетДанных.KPP) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(
			Новый Структура("ИНН, КПП", ПакетДанных.INN, ПакетДанных.KPP));
	ИначеЕсли ЗначениеЗаполнено(ПакетДанных.RegistrationNumber) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(
			Новый Структура("РегистрационныйНомер", ПакетДанных.RegistrationNumber));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПакетДанных.ProviderId) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(
			Новый Структура("КР_КодПоставщикаZolla", ПакетДанных.ProviderId));
	КонецЕсли;
	
	Контрагент = СсылкаПоДаннымСинхронизации(
		МетаданныеСправочника, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
	
	Если Контрагент = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

Функция ПКО_СправочникСсылка_Организации(ПакетДанных, СообщениеОбмена, Отказ)
	
	МетаданныеСправочника = Метаданные.Справочники.Организации;
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьВЛогНетДанных(МетаданныеСправочника, СообщениеОбмена, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = ПараметрыПоискаСсылки();
	ПараметрыПоиска.Вставить("ПоискПоGUID", Истина);
	
	Если ЗначениеЗаполнено(ПакетДанных.INN)
			И ЗначениеЗаполнено(ПакетДанных.KPP) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(
			Новый Структура("ИНН, КПП", ПакетДанных.INN, ПакетДанных.KPP));
	КонецЕсли;
	
	Организация = СсылкаПоДаннымСинхронизации(
		МетаданныеСправочника, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
	
	Если Организация = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

Функция ПКО_СправочникСсылка_Пользователи(ПакетДанных, СообщениеОбмена, Отказ = Ложь)
	
	МетаданныеСправочника = Метаданные.Справочники.Пользователи;
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьВЛогНетДанных(МетаданныеСправочника, СообщениеОбмена, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = ПараметрыПоискаСсылки();
	ПараметрыПоиска.Вставить("ПоискПоGUID", Истина);
	
	Если ЗначениеЗаполнено(ПакетДанных.Name) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(
			Новый Структура("Наименование", ПакетДанных.Name));
	КонецЕсли;
	
	Пользователь = СсылкаПоДаннымСинхронизации(
		МетаданныеСправочника, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
	
	Если Пользователь = Неопределено Тогда
		Отказ = Истина;
		
		Пользователь = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ПакетДанных.Ref));
		Объект = Справочники.Пользователи.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Пользователь);
		Объект.Наименование = ПакетДанных.Name;
		Объект.Недействителен = Истина;
		Объект.Служебный = Ложь;
		Объект.Подготовлен = Ложь;
		Объект.Записать();
		
		КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена);
	КонецЕсли;
	
	Возврат Пользователь;
	
КонецФункции

Функция ПКО_СправочникСсылка_СтавкиНДС(ПакетДанных, СообщениеОбмена, Отказ)
	
	МетаданныеСправочника = Метаданные.Справочники.СтавкиНДС;
	
	ТекстОшибки = НСтр("ru = 'Не найден элемент ""%1"" справочника ""Ставки НДС"".'");
	ТипОшибки = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибкаПоискаСсылки(
		МетаданныеСправочника);
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьВЛогНетДанных(МетаданныеСправочника, СообщениеОбмена, Отказ);
		Возврат Неопределено;
	Иначе
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПакетДанных.VATRate);
	КонецЕсли;
	
	СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию(ПакетДанных.VATRate);
	
	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		Отказ = Истина;
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстОшибки, ТипОшибки);
	КонецЕсли;
	
	Возврат СтавкаНДС;
	
КонецФункции

// << 27.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
Функция ПКО_СправочникСсылка_СтруктураПредприятия(ПакетДанных, СообщениеОбмена, Отказ, ХозяйственнаяОперация = Неопределено)
	
	МетаданныеСправочника = Метаданные.Справочники.СтруктураПредприятия;
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьВЛогНетДанных(МетаданныеСправочника, СообщениеОбмена, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = ПараметрыПоискаСсылки();
	// << 08.09.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-2238
	Если ЗначениеЗаполнено(ПакетДанных.Code) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(
			Новый Структура("Код", ПакетДанных.Code));
	КонецЕсли;
	// >> 08.09.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-2238
	
	Подразделение = СсылкаПоДаннымСинхронизации(
		МетаданныеСправочника, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
		
	Если Подразделение = Неопределено 
			И ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Подразделение;
	
КонецФункции

Функция ПКО_СправочникСсылка_ПользователиНеСоздаватьЕслиНеНайден(ПакетДанных, СообщениеОбмена)
	
	МетаданныеСправочника = Метаданные.Справочники.Пользователи;
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьВЛогНетДанных(МетаданныеСправочника, СообщениеОбмена, Неопределено);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = ПараметрыПоискаСсылки();
	ПараметрыПоиска.Вставить("ПоискПоGUID", Истина);
	
	Если ЗначениеЗаполнено(ПакетДанных.Name) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(
			Новый Структура("Наименование", ПакетДанных.Name));
	КонецЕсли;
	
	Пользователь = СсылкаПоДаннымСинхронизации(
		МетаданныеСправочника, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
	
	Возврат Пользователь;
	
КонецФункции

Функция ПКО_СправочникСсылка_СтатьиДвиженияДенежныхСредств(ПакетДанных, СообщениеОбмена, Отказ)
	
	МетаданныеСправочника = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьВЛогНетДанных(МетаданныеСправочника, СообщениеОбмена, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = ПараметрыПоискаСсылки();
	ПараметрыПоиска.Вставить("ПоискПоGUID", Истина);
	
	Если ЗначениеЗаполнено(ПакетДанных.Code) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(Новый Структура("Код", ПакетДанных.Code));
	КонецЕсли;
	
	СтатьяДДС = СсылкаПоДаннымСинхронизации(
		МетаданныеСправочника, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
		
	Если СтатьяДДС = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат СтатьяДДС;
	
КонецФункции

Функция ПКО_СправочникСсылка_СтатьиДвиженияДенежныхСредствРодитель(ПакетДанных, СообщениеОбмена)
	
	МетаданныеСправочника = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	
	Если ПакетДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = ПараметрыПоискаСсылки();
	ПараметрыПоиска.Вставить("ПоискПоGUID", Истина);
	ПараметрыПоиска.Вставить("ЗаписатьСоответствие", Ложь);
	
	Если ЗначениеЗаполнено(ПакетДанных.Code) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(Новый Структура("Код", ПакетДанных.Code));
	КонецЕсли;
	
	СтатьяДДС = СсылкаПоДаннымСинхронизации(
		МетаданныеСправочника, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
	
	Возврат СтатьяДДС;
	
КонецФункции

Функция ПКО_СправочникСсылка_ФизическиеЛица(ПакетДанных, СообщениеОбмена)
	
	МетаданныеСправочника = Метаданные.Справочники.ФизическиеЛица;
	
	Если ПакетДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = ПараметрыПоискаСсылки();
	ПараметрыПоиска.Вставить("ПоискПоGUID", Истина);
	ПараметрыПоиска.Вставить("ЗаписатьСоответствие", Ложь);
	
	ФизЛицо = СсылкаПоДаннымСинхронизации(
		МетаданныеСправочника, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
	
	Возврат ФизЛицо;
	
КонецФункции

Функция ПКО_СправочникОбъект_СтатьиДвиженияДенежныхСредств(ПакетДанных, Объект, СообщениеОбмена)
	
	Ссылка = XMLЗначение(Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств"), ПакетДанных.Ref);
	СсылкаСуществует = ОбщегоНазначения.СсылкаСуществует(Ссылка);
		
	Если СсылкаСуществует Тогда
		Объект = Ссылка.ПолучитьОбъект();
	Иначе
		Объект = ?(ПакетДанных.ItsAGroup = Истина,
			Справочники.СтатьиДвиженияДенежныхСредств.СоздатьГруппу(),
			Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент());
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Заполнить(Неопределено);
	КонецЕсли;
	
	Объект.Код = ПакетДанных.Code;
	Объект.Наименование = ПакетДанных.Name;
	Объект.ПометкаУдаления = ПакетДанных.DeletionMark;
	Объект.Родитель = ПКО_СправочникСсылка_СтатьиДвиженияДенежныхСредствРодитель(ПакетДанных.Parent, СообщениеОбмена);
	
	Если Не Объект.ЭтоГруппа Тогда
		Объект.КорреспондирующийСчет = ПакетДанных.CorrespondingAccount;
		Объект.Описание = ПакетДанных.Description;
		
		Объект.ХозяйственныеОперации.Очистить();
		Для Каждого СтрокаДанных Из ПакетДанных.BusinessTransactions.Row Цикл
			СтрокаТЧ = Объект.ХозяйственныеОперации.Добавить();
			СтрокаТЧ.ХозяйственнаяОперация = ПКО_ПеречислениеСсылка_ХозяйственныеОперации(СтрокаДанных.BusinessTransaction, СообщениеОбмена);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // >> 27.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195

#КонецОбласти

#Область Документы

Функция ПКО_ДокументОбъект_СписаниеБезналичныхДС(ПакетДанных, Объект, СообщениеОбмена)
	
	ТолькоЗапись = (ПакетДанных.Posted = Ложь) Или (ПакетДанных.DeletionMark = Истина);
	
	Ссылка = XMLЗначение(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"), ПакетДанных.Ref);
	СсылкаСуществует = ОбщегоНазначения.СсылкаСуществует(Ссылка);
		
	Если СсылкаСуществует Тогда
		Объект = Ссылка.ПолучитьОбъект();
	Иначе
		Объект = Документы.СписаниеБезналичныхДенежныхСредств.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	ПКО_ДокументОбъект_ОбщиеРеквизиты(ПакетДанных, Объект);
	
	Отказ = Ложь;
	
	Объект.ОчередностьПлатежа = 1;
	Объект.ПроведеноБанком = Истина;
	Объект.НеКонтролироватьЗаполнениеЗаявки = Истина; // << 04.04.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1521
	Объект.ДатаПроведенияБанком = ПакетДанных.PayDate;
	Объект.Организация = ПКО_СправочникСсылка_Организации(
		ПакетДанных.Organization, СообщениеОбмена, Отказ);
	Объект.Валюта = ПКО_СправочникСсылка_Валюты(
		ПакетДанных.Currency, СообщениеОбмена, Отказ);
	Объект.Контрагент = ПКО_СправочникСсылка_Контрагенты(
		ПакетДанных.Сounterparty, СообщениеОбмена, Отказ);
	Объект.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "Партнер");
	Объект.Договор = ПКО_СправочникСсылка_ДоговорыКонтрагентов(
		Объект.Контрагент, ПакетДанных.Contract, СообщениеОбмена, Отказ);
	Объект.Ответственный = ПКО_СправочникСсылка_Пользователи(
		ПакетДанных.Author, СообщениеОбмена, Отказ);
	Объект.Автор = Объект.Ответственный;
	Объект.БанковскийСчет = БанковскийСчетОрганизацииКонтрагента(Объект.Организация, Объект.Валюта, СообщениеОбмена);
	Объект.БанковскийСчетКонтрагента = БанковскийСчетОрганизацииКонтрагента(Объект.Контрагент, Объект.Валюта, СообщениеОбмена);
	Объект.НазначениеПлатежа = ПакетДанных.Purpose;
	Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
	Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	
	Если Не Объект.РасшифровкаПлатежа.Количество() Тогда
		ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
		Объект.СуммаДокумента = ПакетДанных.Amount;
		
		СтрокаТЧ = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		СтрокаТЧ.Организация = Объект.Организация;
		СтрокаТЧ.Партнер = Объект.Партнер;
		СтрокаТЧ.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
		СтрокаТЧ.ВалютаВзаиморасчетов = Объект.Валюта;
		СтрокаТЧ.Сумма = ПакетДанных.Amount;
		СтрокаТЧ.СуммаВзаиморасчетов = ПакетДанных.Amount;
		СтрокаТЧ.СтавкаНДС = ПКО_СправочникСсылка_СтавкиНДС(ПакетДанных, СообщениеОбмена, Отказ);
		СтрокаТЧ.ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
			Объект.Договор, Объект.Организация, Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
		
		КурсИКратность = ДенежныеСредстваСервер.КурсЧислительИКурсЗнаменательВзаиморасчетов(
			Объект.Валюта, СтрокаТЧ.ВалютаВзаиморасчетов, ВалютаРеглУчета,
			?(ЗначениеЗаполнено(Объект.ДатаПроведенияБанком), Объект.ДатаПроведенияБанком, Объект.Дата));
		СтрокаТЧ.КурсЧислительВзаиморасчетов = КурсИКратность.КурсЧислитель;
		СтрокаТЧ.КурсЗнаменательВзаиморасчетов = КурсИКратность.КурсЗнаменатель;
		
		СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС", Истина));
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
	КонецЕсли;
	
	Если Отказ Тогда
		ТипЗаписиОшибкаПоиска = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_ОшибкаПоискаСсылки(Объект.Метаданные());		
		ТекстСообщения = НСтр("ru = 'При разборе пакета возникли ошибки поиска данных. Документ не будет проведен.'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиОшибкаПоиска);	
		ТолькоЗапись = Истина;
	КонецЕсли;
	
	Если ТолькоЗапись Тогда
		Объект.Проведен = Ложь;
		Объект.ДополнительныеСвойства.Вставить("КР_ЗаписатьБезПроведения", Истина);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// << 27.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
Функция ПКО_ДокументОбъект_ЗаявкаНаРасходованиеДенежныхСредств(ПакетДанных, Объект, СообщениеОбмена)
	
	ТолькоЗапись = (ПакетДанных.Posted = Ложь) Или (ПакетДанных.DeletionMark = Истина);
	
	Ссылка = XMLЗначение(Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"), ПакетДанных.Ref);
	СсылкаСуществует = ОбщегоНазначения.СсылкаСуществует(Ссылка);
		
	Если СсылкаСуществует Тогда
		Объект = Ссылка.ПолучитьОбъект();
	Иначе
		Объект = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Заполнить(Неопределено);
	КонецЕсли;
	
	ПКО_ДокументОбъект_ОбщиеРеквизиты(ПакетДанных, Объект);
	
	// Фиксированные данные
	Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Объект.ПриоритетОплаты = Справочники.ПриоритетыОплаты.ПолучитьПриоритетПоУмолчанию(Неопределено);
	Объект.ФормаОплатыНаличная = Истина;
	
	Отказ = Ложь;
	
	// Данные загрузки
	Объект.Организация                     = ПКО_СправочникСсылка_Организации(ПакетДанных.Organization, СообщениеОбмена, Отказ);
	Объект.СтатьяДвиженияДенежныхСредств   = ПКО_СправочникСсылка_СтатьиДвиженияДенежныхСредств(ПакетДанных.CashFlowItem, СообщениеОбмена, Отказ);
	Объект.Валюта                          = ПКО_СправочникСсылка_Валюты(ПакетДанных.Currency, СообщениеОбмена, Отказ); 
	// --> Евлахов Игорь Николаевич (Начало) 11.07.2024
	// Задача #4398
	// Начало было
	//Объект.Автор                           = ПКО_СправочникСсылка_ПользователиНеСоздаватьЕслиНеНайден(ПакетДанных.User, СообщениеОбмена);
	//Объект.КтоЗаявил                       = ПКО_СправочникСсылка_ПользователиНеСоздаватьЕслиНеНайден(ПакетДанных.Applicant, СообщениеОбмена);
	// Конец было
	ПользовательПоУмолчанию = КР_ДополнительныеНастройкиПовтИсп.Значение("ОтветственныйПодсортировки", Ложь);
	Объект.Автор						   = ПользовательПоУмолчанию;
	Объект.КтоЗаявил 					   = ПользовательПоУмолчанию;
	// <-- Евлахов Игорь Николаевич (Конец) 11.07.2024
	Объект.ПодотчетноеЛицо                 = ПКО_СправочникСсылка_ФизическиеЛица(ПакетДанных.AccountablePerson, СообщениеОбмена);
	Объект.Статус                          = ПКО_ПеречислениеСсылка_СтатусыЗаявокНаРасходДС(ПакетДанных.Status, СообщениеОбмена);
	Объект.СуммаДокумента                  = ПакетДанных.SumDoc;
	Объект.ЖелательнаяДатаПлатежа          = ПакетДанных.PreferredDateOfPayment;
	Объект.НомерВедомостиНаВыплатуЗарплаты = ПакетДанных.PayrollNumber;
	Объект.ДатаВедомостиНаВыплатуЗарплаты  = ПакетДанных.PayrollDate;
	Объект.ДатаАвансовогоОтчета            = ПакетДанных.AdvanceReportDate;
	
	ХозОперацииСтатьиДДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяДвиженияДенежныхСредств,
								"ХозяйственныеОперации").Выгрузить().ВыгрузитьКолонку("ХозяйственнаяОперация");
	Если ХозОперацииСтатьиДДС.Найти(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу) = Неопределено Тогда
		Объект.Контрагент                  = Справочники.Контрагенты.РозничныйПокупатель;
		Объект.ХозяйственнаяОперация       = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
	Иначе
		Объект.ХозяйственнаяОперация       = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты;
		Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу;
	КонецЕсли;
	
	Объект.Подразделение                   = ПКО_СправочникСсылка_СтруктураПредприятия(
		ПакетДанных.Subdivision, СообщениеОбмена, Отказ, Объект.ХозяйственнаяОперация);
	Объект.Касса                           = Справочники.Кассы.НайтиПоРеквизиту("Подразделение", Объект.Подразделение);
	
	Объект.РасшифровкаПлатежа.Очистить(); // << 08.09.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-2238
	Для Каждого СтрокаДанных Из ПакетДанных.PaymentDecryption.Row Цикл
		нСтрока = Объект.РасшифровкаПлатежа.Добавить();
		нСтрока.Сумма = СтрокаДанных.Sum;
		нСтрока.СуммаВзаиморасчетов = СтрокаДанных.SettlementSum;
		нСтрока.ВалютаВзаиморасчетов = ПКО_СправочникСсылка_Валюты(СтрокаДанных.Currency, СообщениеОбмена, Отказ);
		нСтрока.СтатьяРасходов = ПКО_ПВХСсылка_СтатьиРасходов(СтрокаДанных.ItemOfExpenditure, СообщениеОбмена, Отказ);
		нСтрока.СтатьяДвиженияДенежныхСредств = ПКО_СправочникСсылка_СтатьиДвиженияДенежныхСредств(СтрокаДанных.CashFlowItem, СообщениеОбмена, Отказ);
		нСтрока.Подразделение = ПКО_СправочникСсылка_СтруктураПредприятия(СтрокаДанных.Subdivision, СообщениеОбмена, Отказ);
		нСтрока.Комментарий = СтрокаДанных.Comment;
	КонецЦикла;
	
	Если Не ПакетДанных.SumDoc = Объект.РасшифровкаПлатежа.Итог("Сумма") Тогда
		ТипЗаписиОшибка = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(Объект.Метаданные());
		
		ТекстСообщения = НСтр("ru = 'Полученные данные суммы %1 не совпадают с рассчитанными данными документа %2.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПакетДанных.SumDoc, Объект.РасшифровкаПлатежа.Итог("Сумма"));
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиОшибка);
		
		ТолькоЗапись = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		ТипЗаписиОшибкаПоиска = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_ОшибкаПоискаСсылки(Объект.Метаданные());		
		ТекстСообщения = НСтр("ru = 'При разборе пакета возникли ошибки поиска данных. Документ не будет проведен.'");
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена, ТекстСообщения, ТипЗаписиОшибкаПоиска);	
		ТолькоЗапись = Истина;
	КонецЕсли;
	
	Если ТолькоЗапись Тогда
		Объект.Проведен = Ложь;
		Объект.ДополнительныеСвойства.Вставить("КР_ЗаписатьБезПроведения", Истина);
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции // >> 27.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195

#КонецОбласти

#Область Перечисления

Функция ПКО_ПеречислениеСсылка_ХозяйственныеОперации(ПакетДанных, СообщениеОбмена)
	
	МетаданныеПеречисления = Метаданные.Перечисления.ХозяйственныеОперации;
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьВЛогНетДанных(МетаданныеПеречисления, СообщениеОбмена, Неопределено);
		Возврат Неопределено;
	КонецЕсли;
	
	ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации." + ПакетДанных);
	
	Если Не ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		ЗаписатьВЛогОшибкаПоиска(МетаданныеПеречисления, ПакетДанных, СообщениеОбмена)
	КонецЕсли;
	
	Возврат ХозяйственнаяОперация;
	
КонецФункции

// << 08.09.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-2238
Функция ПКО_ПеречислениеСсылка_СтатусыЗаявокНаРасходДС(ПакетДанных, СообщениеОбмена)
	
	МетаданныеПеречисления = Метаданные.Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств;
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьВЛогНетДанных(МетаданныеПеречисления, СообщениеОбмена, Неопределено);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПакетДанных = "Подготовлен" Тогда
		СтатусЗаявки = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
	ИначеЕсли ПакетДанных = "Утвержден" Тогда
		СтатусЗаявки = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате;
	ИначеЕсли ПакетДанных = "Отклонен" Тогда
		СтатусЗаявки = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена;
	Иначе
		СтатусЗаявки = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СтатусЗаявки;
	
КонецФункции // >> 08.09.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-2238

#КонецОбласти

#Область ПВХ

// << 27.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
Функция ПКО_ПВХСсылка_СтатьиДоходов(ПакетДанных, СообщениеОбмена, Отказ)
	
	МетаданныеПВХ = Метаданные.ПланыВидовХарактеристик.СтатьиДоходов;
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьВЛогНетДанных(МетаданныеПВХ, СообщениеОбмена, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = ПараметрыПоискаСсылки();
	ПараметрыПоиска.Вставить("ПоискПоGUID", Истина);
	ПараметрыПоиска.Вставить("ЗаписатьСоответствие", Ложь);
	
	Если ЗначениеЗаполнено(ПакетДанных.Code) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(Новый Структура("Код", ПакетДанных.Code));
	КонецЕсли;
	
	СтатьяРасходов = СсылкаПоДаннымСинхронизации(
		МетаданныеПВХ, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
	
	Если СтатьяРасходов = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат СтатьяРасходов;
	
КонецФункции

Функция ПКО_ПВХСсылка_СтатьиРасходов(ПакетДанных, СообщениеОбмена, Отказ)
	
	МетаданныеПВХ = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов;
	
	Если ПакетДанных = Неопределено Тогда
		ЗаписатьВЛогНетДанных(МетаданныеПВХ, СообщениеОбмена, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = ПараметрыПоискаСсылки();
	ПараметрыПоиска.Вставить("ПоискПоGUID", Истина);
	ПараметрыПоиска.Вставить("ЗаписатьСоответствие", Ложь);
	
	Если ЗначениеЗаполнено(ПакетДанных.Code) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(Новый Структура("Код", ПакетДанных.Code));
	КонецЕсли;
	
	СтатьяРасходов = СсылкаПоДаннымСинхронизации(
		МетаданныеПВХ, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
	
	Если СтатьяРасходов = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат СтатьяРасходов;
	
КонецФункции

Функция ПКО_ПВХСсылка_СтатьиДоходовРодитель(ПакетДанных, СообщениеОбмена)
	
	МетаданныеПВХ = Метаданные.ПланыВидовХарактеристик.СтатьиДоходов;
	
	Если ПакетДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = ПараметрыПоискаСсылки();
	ПараметрыПоиска.Вставить("ПоискПоGUID", Истина);
	ПараметрыПоиска.Вставить("ЗаписатьСоответствие", Ложь);
	
	Если ЗначениеЗаполнено(ПакетДанных.Code) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(Новый Структура("Код", ПакетДанных.Code));
	КонецЕсли;
	
	СтатьяРасходов = СсылкаПоДаннымСинхронизации(
		МетаданныеПВХ, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
	
	Возврат СтатьяРасходов;
	
КонецФункции

Функция ПКО_ПВХСсылка_СтатьиРасходовРодитель(ПакетДанных, СообщениеОбмена)
	
	МетаданныеПВХ = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов;
	
	Если ПакетДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = ПараметрыПоискаСсылки();
	ПараметрыПоиска.Вставить("ПоискПоGUID", Истина);
	ПараметрыПоиска.Вставить("ЗаписатьСоответствие", Ложь);
	
	Если ЗначениеЗаполнено(ПакетДанных.Code) Тогда
		ПараметрыПоиска.ПоляПоиска.Добавить(Новый Структура("Код", ПакетДанных.Code));
	КонецЕсли;
	
	СтатьяРасходов = СсылкаПоДаннымСинхронизации(
		МетаданныеПВХ, ПакетДанных.Ref, СообщениеОбмена, ПараметрыПоиска);
	
	Возврат СтатьяРасходов;
	
КонецФункции

Функция ПКО_ПВХОбъект_СтатьиДоходов(ПакетДанных, Объект, СообщениеОбмена)
	
	Ссылка = XMLЗначение(Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов"), ПакетДанных.Ref);
	СсылкаСуществует = ОбщегоНазначения.СсылкаСуществует(Ссылка);
		
	Если СсылкаСуществует Тогда
		Объект = Ссылка.ПолучитьОбъект();
	Иначе
		Объект = ?(ПакетДанных.ItsAGroup = Истина,
			ПланыВидовХарактеристик.СтатьиДоходов.СоздатьГруппу(),
			ПланыВидовХарактеристик.СтатьиДоходов.СоздатьЭлемент());
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Заполнить(Неопределено);
	КонецЕсли;
	
	Объект.Код = ПакетДанных.Code;
	Объект.Наименование = ПакетДанных.Name;
	Объект.Родитель = ПКО_ПВХСсылка_СтатьиДоходовРодитель(ПакетДанных.Parent, СообщениеОбмена);
	
	Если Не Объект.ЭтоГруппа Тогда
		Объект.Описание = ПакетДанных.Description;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПКО_ПВХОбъект_СтатьиРасходов(ПакетДанных, Объект, СообщениеОбмена)
	
	Ссылка = XMLЗначение(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"), ПакетДанных.Ref);
	СсылкаСуществует = ОбщегоНазначения.СсылкаСуществует(Ссылка);
		
	Если СсылкаСуществует Тогда
		Объект = Ссылка.ПолучитьОбъект();
	Иначе
		Объект = ?(ПакетДанных.ItsAGroup = Истина,
			ПланыВидовХарактеристик.СтатьиРасходов.СоздатьГруппу(),
			ПланыВидовХарактеристик.СтатьиРасходов.СоздатьЭлемент());
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Заполнить(Неопределено);
	КонецЕсли;
	
	Объект.Код = ПакетДанных.Code;
	Объект.Наименование = ПакетДанных.Name;
	Объект.Родитель = ПКО_ПВХСсылка_СтатьиРасходовРодитель(ПакетДанных.Parent, СообщениеОбмена);
	
	Если Не Объект.ЭтоГруппа Тогда
		Объект.Описание = ПакетДанных.Description;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // >> 27.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195

#КонецОбласти

#Область Прочее

// << 27.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195
Процедура ПКО_ДокументОбъект_ОбщиеРеквизиты(ПакетДанных, ДокументОбъект)
	
	// Дата документа
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПакетДанных, "DocDate") Тогда
		ДокументОбъект.Дата = ПакетДанных.DocDate;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПакетДанных, "Date") Тогда
		ДокументОбъект.Дата = ПакетДанных.Date;
	КонецЕсли;
	
	// Номер документа
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПакетДанных, "DocNumber") Тогда
		ДокументОбъект.Номер = ПакетДанных.DocNumber;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПакетДанных, "Number") Тогда
		ДокументОбъект.Номер = ПакетДанных.Number;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПакетДанных, "Comment") Тогда
		ДокументОбъект.Комментарий = ПакетДанных.Comment;
	КонецЕсли;
	
	ДокументОбъект.Проведен        = ПакетДанных.Posted;
	ДокументОбъект.ПометкаУдаления = ПакетДанных.DeletionMark;
	
КонецПроцедуры // >> 27.02.2023, Маскаев П.Ю., КРОК, Jira№ A2105505-1195

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиЗагрузкиОбъектов

Функция НастройкаЗагрузки(ПараметрыЗагрузки, ТипДанных)
	
	ШаблонПравилаЗагрузки = "КР_Демо_УТ11_ЗагрузкаДанныхСервер.ПЗО_%1";
	
	СтрокаЗагрузки = ПараметрыЗагрузки.Добавить();
	СтрокаЗагрузки.ТипДанных = ТипДанных;
	СтрокаЗагрузки.Отправитель = ""; // любой
	СтрокаЗагрузки.ОчередьОбмена = ""; // любой
	СтрокаЗагрузки.ПравилоЗагрузки = СтрШаблон(ШаблонПравилаЗагрузки, ТипДанных);
	СтрокаЗагрузки.ДополнительныеПараметры = Новый Структура;
	
	Возврат СтрокаЗагрузки;
	
КонецФункции

#КонецОбласти

#Область Алгоритмы

Процедура ЗаписатьВЛогНетДанных(МетаданныеПоиска, СообщениеОбмена, Отказ)
	
	ТипОшибки = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибкаПоискаСсылки(
		МетаданныеПоиска);
	
	КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена,
		СтрШаблон(НСтр("ru = '%1. Данные загрузки не определены.'"), МетаданныеПоиска.ПолноеИмя()), ТипОшибки);
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ЗаписатьВЛогОшибкаПоиска(МетаданныеПоиска, ДанныеПоиска, СообщениеОбмена)
	
	ТипОшибки = КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибкаПоискаСсылки(
		МетаданныеПоиска);
	
	КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена,
		СтрШаблон(НСтр("ru = '%1. Не найдены данные по полям поиска: %2.'"), МетаданныеПоиска.ПолноеИмя(), ДанныеПоиска), ТипОшибки);
	
КонецПроцедуры

Функция БанковскийСчетОрганизацииКонтрагента(Владелец, ВалютаСчета, СообщениеОбмена)
	
	БанковскийСчет = Неопределено;
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Владелец, ВалютаСчета);
		ИмяСправочника = "БанковскиеСчетаОрганизаций";
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Владелец, ВалютаСчета);
		ИмяСправочника = "БанковскиеСчетаКонтрагентов";
	Иначе
		БанковскийСчет = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчет)
		Или Не ЗначениеЗаполнено(ВалютаСчета)
		Или Не ЗначениеЗаполнено(Владелец) Тогда
		Возврат БанковскийСчет;
	КонецЕсли;
	
	Объект = Справочники[ИмяСправочника].СоздатьЭлемент();
	
	Объект.Владелец = Владелец;
	Объект.ВалютаДенежныхСредств = ВалютаСчета;
	Объект.Наименование = СтрШаблон(НСтр("ru = '%1 (%2)'"),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "Наименование"), 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВалютаСчета, "Наименование"));
	Объект.НомерСчета = "11111111111111111111";
	Объект.РучноеИзменениеРеквизитовБанка = Истина;
	Объект.РучноеИзменениеРеквизитовБанкаДляРасчетов = Ложь;
	Объект.ИностранныйБанк = Ложь;
	Объект.ОтдельныйСчетГОЗ = Ложь;
	Объект.СтранаБанка = Справочники.СтраныМира.Россия;
	Объект.ЭтоIBAN = Ложь;
	
	Если ИмяСправочника = "БанковскиеСчетаОрганизаций" Тогда
		Объект.ТипСчета = Перечисления.ТипыБанковскихСчетов.Расчетный;
		Объект.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Числом;
		Объект.ВыводитьСуммуБезКопеек = Ложь;
		Объект.ИспользоватьОбменСБанком = Истина;
		Объект.Кодировка = "Windows";
		Объект.РазрешитьПлатежиБезУказанияЗаявок = Ложь;
		Объект.ИспользоватьПрямойОбменСБанком = Ложь;
		Объект.ОбменСБанкомВключен = Ложь;
		Объект.Закрыт = Ложь;
		Объект.ФорматОбмена = "1CClientBankExchange";
	КонецЕсли;
	
	Если КР_ОбменRabbitОбщиеМеханизмыКонвертации.СправочникОбъектЗаписать(Объект, СообщениеОбмена) Тогда
		БанковскийСчет = Объект.Ссылка;
	КонецЕсли;
	
	Возврат БанковскийСчет;
	
КонецФункции

Функция РазрешенПоискСсылки(МетаданныеОбъекта, СообщениеОбмена)
	
	ПоискРазрешен = Истина;
	
	Если Не ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) Тогда
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена,
			НСтр("ru = 'Поиск по нессылочным типам данных не поддерживается.'"),
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(МетаданныеОбъекта));
		ПоискРазрешен = Ложь;
	КонецЕсли;
	
	ПолноеИмяМДОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	Если СтрНайти(ВРег(ПолноеИмяМДОбъекта), "ТАБЛИЧНАЯЧАСТЬ") Тогда
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(СообщениеОбмена,
			НСтр("ru = 'Поиск по табличным частям не поддерживается.'"),
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_Ошибка(МетаданныеОбъекта));
		ПоискРазрешен = Ложь;
	КонецЕсли;
	
	Возврат ПоискРазрешен;
	
КонецФункции

// Функция возвращает ссылку искомого объекта метаданных
//
// Параметры:
//  МетаданныеОбъекта    - Метаданные - Метаданные искомого объекта
//  ИдентификаторОбъекта - Строка     - Строковое представление идентификатора объекта
//  СообщениеОбмена      - Структура  - Данные сообщения обмена
//  ПоискПоGUID          - Булево     - Флаг попытки поиска через метод XMLЗначение()
//  ПоляПакетногоПоиска  - Массив     - Массив структур полей поиска по таблице справочника,
//										по каждому элементу массива строится отдельный запрос
//  ЗаписатьСоответствие - Булево     - Флаг необходимости записи в регистр после поиска
//
// Возвращаемое значение:
//  ЛюбаяСсылка, Неопределено - Ссылка искомого объекта
//
Функция СсылкаПоДаннымСинхронизации(
			МетаданныеОбъекта,
			ИдентификаторОбъекта,
			СообщениеОбмена,
			ДополнительныеПараметры = Неопределено) Экспорт 
	
	ПолноеИмяМДОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	Если Не РазрешенПоискСсылки(МетаданныеОбъекта, СообщениеОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ПараметрыПоискаСсылки();
	КонецЕсли;
	
	МассивИмениТипа = СтрРазделить(ПолноеИмяМДОбъекта, ".", Ложь);
	ОжидаемыйТип = Тип(СтрШаблон("%1Ссылка.%2", МассивИмениТипа[0], МассивИмениТипа[1]));
	
	ТекстОшибкиПоискПоGUID = СтрШаблон(НСтр("ru = 'Не найдена ссылка по GUID ""%1"" в базе данных.'"), ИдентификаторОбъекта);
	ТекстОшибкиПоискВРегистреНеожиданныйТип =
		НСтр("ru = 'По GUID ""%1"" тип данных в регистре идентификаторов отличается от ожидаемого.
			|	Ожидаемый тип: %2
			|	Найденный тип: %3'");
	ТекстОшибкиПоискВРегистреНетДанных =
		СтрШаблон(НСтр("ru = 'Не найдена ссылка по GUID ""%1"" в регистре идентификаторов объектов.'"), ИдентификаторОбъекта);
	
	СсылкаНаОбъект = Неопределено;
	МассивОшибок = Новый Массив;
	
	Если ДополнительныеПараметры.Свойство("ПоискПоGUID")
		И ДополнительныеПараметры.ПоискПоGUID = Истина Тогда
		СсылкаНаОбъект = XMLЗначение(ОжидаемыйТип, ИдентификаторОбъекта);
		Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъект) Тогда
			Возврат СсылкаНаОбъект;
		Иначе
			МассивОшибок.Добавить(ТекстОшибкиПоискПоGUID);
			СсылкаНаОбъект = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЕстьЗаписьСИдентификаторомВСинхронизируемыхОбъектах(
											ИдентификаторОбъекта, СсылкаНаОбъект, СообщениеОбмена) Тогда
		ТипЗнчСсылки = ТипЗнч(СсылкаНаОбъект);
		Если ТипЗнчСсылки = ОжидаемыйТип Тогда
			Возврат СсылкаНаОбъект;
		Иначе
			ТекстОшибки = СтрШаблон(ТекстОшибкиПоискВРегистреНеожиданныйТип,
				ИдентификаторОбъекта, ПолноеИмяМДОбъекта, Метаданные.НайтиПоТипу(ТипЗнчСсылки).ПолноеИмя());
			МассивОшибок.Добавить(ТекстОшибки);
			СсылкаНаОбъект = Неопределено;
		КонецЕсли;
	Иначе
		МассивОшибок.Добавить(ТекстОшибкиПоискВРегистреНетДанных);
	КонецЕсли;
	
	ПоляПоиска = Неопределено;
	Если Не ДополнительныеПараметры.Свойство("ПоляПоиска", ПоляПоиска) Тогда
		ПоляПоиска = Новый Массив;
	КонецЕсли;
	СсылкаНаОбъект = СсылкаПоПолямПоиска(МетаданныеОбъекта, ПоляПоиска, МассивОшибок);
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) И МассивОшибок.Количество() Тогда
		ТипЛогирования =
			КР_ОбменRabbitОбработкаСообщенийОбмена.ТипЗаписиВЛог_НекритичнаяОшибкаПоискаСсылки(МетаданныеОбъекта);
		МассивОшибок.Вставить(0,
			СтрШаблон(НСтр("ru = '%1. Ссылка на объект не найдена.'"), ПолноеИмяМДОбъекта));
		ОбщийТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС + Символы.Таб);
		
		КР_ОбменRabbitОбработкаСообщенийОбмена.ДобавитьЗаписьВЛог(
			СообщениеОбмена, ОбщийТекстОшибки, ТипЛогирования);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект)
		И ДополнительныеПараметры.Свойство("ЗаписатьСоответствие")
		И ДополнительныеПараметры.ЗаписатьСоответствие = Истина Тогда
		КР_ОбменRabbitОбщиеМеханизмыКонвертации.ЗаписатьИдентификаторСинхронизируемыхОбъектов(
			ИдентификаторОбъекта, СсылкаНаОбъект, СообщениеОбмена);
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции // СсылкаПоДаннымСинхронизации()

// Функция производит поиск по таблице ссылочного типа данных
//
// Параметры:
//  МетаданныеОбъекта - Метаданные - Метаданные искомого объекта
//  ПоляПоиска - Массив, Структура - Массив структур или структура полей поиска
//  МассивОшибок - Массив, Неопределено - Массив строк полученных ошибок
//
// Возвращаемое значение:
//  ЛюбаяСсылка, Неопределено - Результат поиска
//
Функция СсылкаПоПолямПоиска(МетаданныеОбъекта, Знач ПоляПоиска, МассивОшибок = Неопределено) Экспорт
	
	СсылкаНаОбъект = Неопределено;
	
	Если МассивОшибок = Неопределено Тогда
		МассивОшибок = Новый Массив;
	КонецЕсли;
	
	Если ТипЗнч(ПоляПоиска) = Тип("Структура") Тогда
		ПоляПоиска = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПоляПоиска);
	КонецЕсли;
	
	ТекстОшибкиПоискВИБНетДанных   = НСтр("ru = 'По полям поиска [%1] данные не найдены.'");
	ТекстОшибкиПоискВИББолееОдного = НСтр("ru = 'По полям поиска [%1] найдено более одного объекта.'");
	
	Запрос = ЗапросПоискаСсылки(МетаданныеОбъекта, ПоляПоиска);
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
		МассивОшибок.Добавить(НСтр("ru = 'Не заданы поля поиска.'"));
	Иначе
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		Для Индекс = 0 По РезультатЗапроса.ВГраница() Цикл
			Если РезультатЗапроса[Индекс].Пустой() Тогда
				ТекстОшибки = СтрШаблон(ТекстОшибкиПоискВИБНетДанных,
					ПредставлениеПолейПоиска(ПоляПоиска[Индекс]));
				МассивОшибок.Добавить(ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			Выборка = РезультатЗапроса[Индекс].Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				СсылкаНаОбъект = Выборка.СсылкаНаОбъект;
				Прервать;
			Иначе
				ТекстОшибки = СтрШаблон(ТекстОшибкиПоискВИББолееОдного,
					ПредставлениеПолейПоиска(ПоляПоиска[Индекс]));
				МассивОшибок.Добавить(ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции // СсылкаПоПолямПоиска()

Функция ЗапросПоискаСсылки(МетаданныеОбъекта, ПоляПоиска)
	
	ПолноеИмяМДОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Таблица.Ссылка КАК СсылкаНаОбъект
	|ИЗ
	|	%1 КАК Таблица
	|ГДЕ
	|	%2
	|	И НЕ Таблица.ПометкаУдаления";
	
	МассивТекстовПакета = Новый Массив;
	
	Для Каждого СтруктураПолей Из ПоляПоиска Цикл
		МассивТекстовУсловий = Новый Массив;
		
		Для Каждого КлючИЗначение Из СтруктураПолей Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив")
				Или ТипЗнч(КлючИЗначение.Значение) = Тип("СписокЗначений") Тогда
				ТекстУсловия = "Таблица.%1 В(&%1)";
			Иначе
				ТекстУсловия = "Таблица.%1 = &%1";
			КонецЕсли;
			МассивТекстовУсловий.Добавить(СтрШаблон(ТекстУсловия, КлючИЗначение.Ключ));
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		Если МассивТекстовУсловий.Количество() Тогда
			МассивТекстовПакета.Добавить(СтрШаблон(ТекстЗапроса,
				ПолноеИмяМДОбъекта, СтрСоединить(МассивТекстовУсловий, " И ")));
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(МассивТекстовПакета, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Возврат Запрос;
	
КонецФункции

// Функция возвращает пустую структуру параметров поиска ссылки
// по данным синхронизации с RabbitMQ
//
// Возвращаемое значение:
//  Структура - Структура параметров поиска
//
Функция ПараметрыПоискаСсылки() Экспорт
	
	ПараметрыПоиска = Новый Структура;
	
	ПараметрыПоиска.Вставить("ПоискПоGUID"         , Ложь);
	ПараметрыПоиска.Вставить("ЗаписатьСоответствие", Истина);
	ПараметрыПоиска.Вставить("ПоляПоиска"          , Новый Массив);
	
	Возврат ПараметрыПоиска;
	
КонецФункции

Функция ПредставлениеПолейПоиска(СтруктураПолей)
	
	МассивТекстов = Новый Массив;
	
	Для Каждого КлючИЗначение Из СтруктураПолей Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
			ПредставлениеУсловия = НСтр("ru = '%1 в списке (%2)'");
			ПредставлениеЗначения = СтрСоединить(КлючИЗначение.Значение, "|");
		ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("СписокЗначений") Тогда
			ПредставлениеЗначения = СтрСоединить(КлючИЗначение.Значение.ВыгрузитьЗначения(), "|");
			ПредставлениеУсловия = НСтр("ru = '%1 в списке (%2)'");
		Иначе
			ПредставлениеУсловия = НСтр("ru = '%1 = ""%2""'");
			ПредставлениеЗначения = Строка(КлючИЗначение.Значение);
		КонецЕсли;
		
		МассивТекстов.Добавить(СтрШаблон(ПредставлениеУсловия, КлючИЗначение.Ключ, ПредставлениеЗначения));
	КонецЦикла;
	
	Возврат СтрСоединить(МассивТекстов, ";");
	
КонецФункции

#КонецОбласти

#КонецОбласти
